<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>useAxios: React hook for any Axios call</title>
      <author>Kevin White</author>
      <pubDate>Thu, 20 May 2021 02:40:01 +0000</pubDate>
      <link>https://dev.to/kwhitejr/useaxios-react-hook-for-any-axios-call-12b7</link>
      <guid>https://dev.to/kwhitejr/useaxios-react-hook-for-any-axios-call-12b7</guid>
      <description>&lt;p&gt;&lt;code&gt;useAxios()&lt;/code&gt; is a React hook that simplifies async fetching and state management. &lt;a href="https://github.com/kwhitejr/use-axios"&gt;Source code&lt;/a&gt; and &lt;a href="https://codesandbox.io/s/use-axios-nydlk"&gt;live example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to suggest an improvement? I'm all ears! Please file an issue or open a PR!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./use-axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axiosConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;axiosConfig&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoadingIcon&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMsg&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useAxios&lt;/code&gt; is an &lt;a href="https://github.com/axios/axios"&gt;Axios&lt;/a&gt;-specific implementation of my generic &lt;a href="https://github.com/kwhitejr/use-async-func"&gt;useAsyncFunc&lt;/a&gt; React hook.&lt;/p&gt;

&lt;p&gt;One issue for async operations is when the return value is no longer required. For example, the user leaves the page (the requesting component is unmounted) or the user provides a new search query (the old search query's response is superfluous).&lt;/p&gt;

&lt;p&gt;You might see an error like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In these situations, we want to cancel the initial request. The browser Web API provides the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController"&gt;&lt;code&gt;AbortController&lt;/code&gt; interface&lt;/a&gt;; it is a controller object that allows you to abort one or more Web requests. Axios provides similar capability with the &lt;a href="https://github.com/axios/axios#cancellation"&gt;CancelToken&lt;/a&gt; class. CancelTokens are straightforward to implement if you are already using the Axios library. You read a little more about each implementation &lt;a href="https://medium.datadriveninvestor.com/aborting-cancelling-requests-with-fetch-or-axios-db2e93825a36"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useaxios"&gt;
  &lt;/a&gt;
  useAxios
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 *
 * @param {string} url      - The url to call
 * @param {object} [config] - The axios config object; defaults to GET, etc
 * @returns {state}         - { isLoading, isError, response }
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// useReducer manages the local complex state of the async func hook's lifecycle.&lt;/span&gt;
  &lt;span class="c1"&gt;// See the source code for the full reducer!&lt;/span&gt;
  &lt;span class="c1"&gt;// NOTE: it is easy to modify or expand the reducer to fit your needs.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Declare Axios cancel token&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CancelToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Define the axios call&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callAxios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Begin with a clean state&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AXIOS_INIT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Straightforward axios call,&lt;/span&gt;
        &lt;span class="c1"&gt;// With cancel token inserted into config&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;cancelToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AXIOS_SUCCESS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Two options on error:&lt;/span&gt;
        &lt;span class="c1"&gt;// 1. If error is an axios cancel, simply return and move on&lt;/span&gt;
        &lt;span class="c1"&gt;// 2. For all other errors, assume async failure and dispatch failure action&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isCancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Canceled request.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AXIOS_FAILURE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// Invoke the defined axios call&lt;/span&gt;
    &lt;span class="nx"&gt;callAxios&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// On unmount, cancel the request&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Operation canceled.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// NOTE: here be dragon!&lt;/span&gt;
    &lt;span class="c1"&gt;// My instinct was include the axios config in this array, e.g. [url, config]&lt;/span&gt;
    &lt;span class="c1"&gt;// This causes an infinite re-render loop that I have not debugged yet :-/&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useAxios&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It is good to cancel superfluous requests so that they do not become memory leaks! I hope you find this example helpful.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Implementing Redux pattern </title>
      <author>Jucian0</author>
      <pubDate>Thu, 20 May 2021 02:03:36 +0000</pubDate>
      <link>https://dev.to/jucian0/implementing-redux-pattern-1oj0</link>
      <guid>https://dev.to/jucian0/implementing-redux-pattern-1oj0</guid>
      <description>&lt;p&gt;If you are a software developer and aren't in another world, you have probably read or heard something about Redux. Today Redux is very popular, but not as much as some years ago. The first time that I heard about React, the second word was always Redux, "How to init with react and redux", "Todo app with react redux", and another hundred names. Even though Redux is not as popular today as in the past, I think it's very helpful that you know how Redux works and how you can create a simple version of this famous pattern. &lt;/p&gt;

&lt;p&gt;Redux is a pattern that provides a way to manage your application state. Redux pattern increased in popularity when front-end applications became more complex, and when we started to develop applications with many components, sharing the same state. You can find a lot of libraries that implement this, we have Redux for React and RXJS for Angular. &lt;/p&gt;

&lt;p&gt;Since Redux is very popular I assume that you know how it works and how to use it, but I will provide some basic information about it. If you want to know more, however, I recommend that you read the documentation about the patterns and how some libraries do this. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-explanations"&gt;
  &lt;/a&gt;
  Redux explanations
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Actions - basically actions are like instructions that drive your intentions, you need a &lt;code&gt;type&lt;/code&gt; that describes what you want to do, and if you need some data to perform your intentions, it's necessary to provide a &lt;code&gt;payload&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Push up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reducers - reducers are pure functions that perform your intentions in the application state, that function receives the current state and the action, that is running. For every action, you should provide a reaction in your reducer.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// do something&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt;  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// do another thing&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store - I like to think about Store as a place where you have the real state, and it provides the resources to get the state &lt;code&gt;store.getState()&lt;/code&gt;, and register listeners.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#our-redux-api"&gt;
  &lt;/a&gt;
  Our Redux API
&lt;/h2&gt;

&lt;p&gt;This is how we will initiate our Store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our redux implementation has some public methods and private method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dispatch() - This method will receive the instruction that will drive how the state will be changed.&lt;/li&gt;
&lt;li&gt;subscriber() - With this method, we can subscribe listeners to know when the application state is changed. These listeners will be simple functions that can receive the new state changed by argument.&lt;/li&gt;
&lt;li&gt;value() - These methods will return the current state of the application.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;

    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need another method to perform the state changes, &lt;code&gt;reducer&lt;/code&gt; is the last method that we need in our implementation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, we need more than methods in our redux implementation, we need a property to hold the state application, &lt;code&gt;state&lt;/code&gt; and another to hold the reducers application and one more to hold the subscribers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:{[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:{[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#constructor"&gt;
  &lt;/a&gt;
  Constructor
&lt;/h3&gt;

&lt;p&gt;Let's go ahead. You may notice that I'm using typescript, but feel free to use javascript. Our first step is to write the constructor method, &lt;code&gt;constructor&lt;/code&gt; needs to receive the reducers and the initialState, so let's do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we assign &lt;code&gt;reducers&lt;/code&gt; and &lt;code&gt;initialState&lt;/code&gt; to &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;reducers&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;todoReducer&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;todoReducer&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:[]}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, reduce will perform and return the state changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we iterate reducers registered in Store and invoke every reducer passing by argument the current state and the current action. After that, we save the result returned by every reducer in the correct state property. Finally, we return to the new state. Since the reduce method is a private method it will not be available to use out of class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subscribe"&gt;
  &lt;/a&gt;
  Subscribe
&lt;/h2&gt;

&lt;p&gt;Subscribe will allow us to have many state change listeners, so let's implement it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;thi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we received a function that will be invoked when some changes happen in the state, &lt;code&gt;subscriber&lt;/code&gt; will add the &lt;code&gt;fn&lt;/code&gt; argument into &lt;code&gt;subscribers&lt;/code&gt; property. The last part of this method will return another function that when invoked will remove the &lt;code&gt;fn&lt;/code&gt; function passed by argument. The function that will be returned knows the &lt;code&gt;subscriber&lt;/code&gt; method context, for this reason, we can compare &lt;code&gt;fn&lt;/code&gt; argument with every subscriber registered in our Store and decide who needs to be removed.&lt;/p&gt;

&lt;p&gt;Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;// do something&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;// wii remove callback function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dispatch"&gt;
  &lt;/a&gt;
  Dispatch
&lt;/h3&gt;

&lt;p&gt;Let's implement this method and learn how it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When &lt;code&gt;reduce&lt;/code&gt; method is invoked it returns a new state and assigns it to &lt;code&gt;state&lt;/code&gt; property of the store. After that, we iterate &lt;code&gt;subscribers&lt;/code&gt; property and invoke every subscribed function passing the new state by argument, this way every listener will be notified with the new application state.&lt;/p&gt;

&lt;p&gt;Using it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD_TODO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Push up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#value"&gt;
  &lt;/a&gt;
  Value
&lt;/h3&gt;

&lt;p&gt;Our last method implementation will be a get method that will return us the current state, let's implement it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducers&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we have a simple implementation of redux, this implementation does not reflect any redux library implementation, it's just a possible implementation of redux. The principal goal of this post is to show you a simple way of how redux works. If you are more interested in a functional approach, let me know and we can address it in the next post.&lt;/p&gt;

&lt;p&gt;I hope that you enjoyed this post. Stay Safe!!!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>redux</category>
      <category>react</category>
    </item>
    <item>
      <title>(Realistic) List of Web Dev Resources 💻🚀</title>
      <author>Maureen T'O </author>
      <pubDate>Thu, 20 May 2021 00:25:58 +0000</pubDate>
      <link>https://dev.to/maureento8888/realistic-list-of-web-dev-resources-253c</link>
      <guid>https://dev.to/maureento8888/realistic-list-of-web-dev-resources-253c</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@lucabravo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Luca Bravo&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I've been finding a lot of articles on DEV lately that garner a TON of reactions, especially ones that provide lists of more than 20 to 50+ resources!&lt;/p&gt;

&lt;p&gt;That's a lot. 🤯&lt;/p&gt;

&lt;p&gt;A lot of choice paralysis, too.&lt;/p&gt;

&lt;p&gt;In reality, it's not about how popular the resources are, or how many you can add to your archive list (where you may not even pick up to read). Instead, it's about &lt;strong&gt;what problems these resources solve&lt;/strong&gt; for you that makes a list successful. So, I will do just that!&lt;/p&gt;

&lt;p&gt;Keep in mind these are &lt;strong&gt;my own opinions&lt;/strong&gt; and by all means, if you like those really long resource lists, do use them. This list is meant to be accessible, cost-effective, and focused! &lt;strong&gt;These are also resources that have been successful for my learning&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My resources are all &lt;strong&gt;multimodal ways of learning&lt;/strong&gt; (audiovisual, reading) - some may not be fully accessible by nature. At the end of the day, you know what works best for you!&lt;/p&gt;

&lt;p&gt;Lastly, my resources are &lt;strong&gt;NOT hundreds of hours long&lt;/strong&gt;! I studied all I have of web development throughout the last year of my &lt;strong&gt;full-time undergraduate degree&lt;/strong&gt;, so when it comes to time-management, I've got you covered ☺️&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#skip-links"&gt;
  &lt;/a&gt;
  Skip links 👇🏼
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#html-css"&gt;HTML / CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vuejs-nuxtjs"&gt;Vue.js / Nuxt.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#version-control"&gt;Version Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#responsive-web-design"&gt;Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#forums"&gt;Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#html-css"&gt;
  &lt;/a&gt;
  HTML / CSS
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Absolute must if you're going into web development, and 100% needed for frontend development. These two are the builders of the visual front of the web&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flaviocopes.com"&gt;Flavio Copes&lt;/a&gt;' &lt;a href="https://flaviocopes.com/page/html-handbook/"&gt;HTML handbook&lt;/a&gt; [FREE] - a true, beginner-friendly, comprehensive, and easy read that gets you up and running with HTML quickly&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flaviocopes.com"&gt;Flavio Copes&lt;/a&gt;' &lt;a href="https://flaviocopes.com/page/css-handbook/"&gt;CSS handbook&lt;/a&gt; [FREE] - a comprehensive CSS resource and easy read&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://scrimba.com"&gt;Scrimba&lt;/a&gt;'s &lt;a href="https://scrimba.com/learn/cssgrid"&gt;CSS Grid&lt;/a&gt; - what I used to nail down CSS Grid, and revisit it&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UClb90NQQcskPUGDIXsQEz5Q"&gt;Dev Ed&lt;/a&gt;'s &lt;a href="https://youtu.be/gXkqy0b4M5g"&gt;Responsive Navigation Bar Tutorial | HTML CSS JAVA...&lt;/a&gt; [FREE] - Don't ask... Just watch until 13:00 mins. I didn't understand HTML hierarchy until the 13 mins! ☺️&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Literally the language of the modern web. You'll definitely need this to learn the whole ecosystem of the web, from Node.js to package bundlers like Webpack&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://codewithmosh.com"&gt;Code with Mosh&lt;/a&gt;'s &lt;a href="https://codewithmosh.com/p/javascript-basics-for-beginners"&gt;JavaScript for Beginners&lt;/a&gt; - ALL the basics of JS in bitesized, audiovisual format&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codewithmosh.com"&gt;Code with Mosh&lt;/a&gt;'s &lt;a href="https://codewithmosh.com/p/object-oriented-programming-in-javascript"&gt;JavaScript OOP&lt;/a&gt; - everything you need to know about JS OOP in quick, bite-sized and well-explained audiovisual format&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org"&gt;freeCodeCamp.org&lt;/a&gt;'s &lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JavaScript Algorithms and Data Structures &lt;/a&gt; [FREE] - to practice JS you've learned, and learn DS &amp;amp; A&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vuejs-nuxtjs"&gt;
  &lt;/a&gt;
  Vue.js / Nuxt.js
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you're learning Vue.js, these are the BEST resources I've stuck with, from basics to advanced&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Vue Mastery has courses on Nuxt.js!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flaviocopes.com"&gt;Flavio Copes&lt;/a&gt;' &lt;a href="https://flaviocopes.com/page/vue-handbook/"&gt;Vue.js 2 Handbook&lt;/a&gt; [FREE] - great to get you started in Vue 2 without mismatched YouTube tutorials (syntax doesn't differ between v2 and v3)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vuemastery.com"&gt;Vue Mastery&lt;/a&gt;'s courses - choose from &lt;a href="https://www.vuemastery.com/courses-path/beginner"&gt;beginner&lt;/a&gt;, &lt;a href="https://www.vuemastery.com/courses-path/intermediate"&gt;intermediate&lt;/a&gt;, and &lt;a href="https://www.vuemastery.com/courses-path/advanced"&gt;advanced&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://debbie.codes"&gt;Debbie O'Brien&lt;/a&gt;'s &lt;a href="https://www.youtube.com/c/DebbieOBrien"&gt;YouTube&lt;/a&gt; [FREE] - for AWESOME &lt;a href="https://nuxtjs.org"&gt;Nuxt.js&lt;/a&gt; tidbits!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#version-control"&gt;
  &lt;/a&gt;
  Version Control
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Must have if you're to work in teams / companies, or track versions of your projects&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codecademy.com"&gt;Codecademy&lt;/a&gt;'s &lt;a href="https://www.codecademy.com/learn/learn-git"&gt;Learn Git&lt;/a&gt; course&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#responsive-web-design"&gt;
  &lt;/a&gt;
  Responsive Web Design
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The most necessary skillset you can add to your web design / development career&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.kevinpowell.co"&gt;Kevin Powell&lt;/a&gt;'s &lt;a href="https://courses.kevinpowell.co/conquering-responsive-layouts"&gt;Conquering Responsive Layouts&lt;/a&gt; course - BEST and most comprehensive course on responsive web design.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.samanthaming.com"&gt;Samantha Ming&lt;/a&gt;'s &lt;a href="https://www.samanthaming.com/flexbox30/"&gt;Flexbox 30&lt;/a&gt; [FREE] - the one flexbox resource I stuck with through visually engaging and adorable examples of flexbox in action.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#forums"&gt;
  &lt;/a&gt;
  Forums
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;In learning anything, you'll almost always get by with a little help from friends and fellow classmates. Take a quick coffee break ☕️ and hop on these places for some help&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com"&gt;StackOverFlow&lt;/a&gt; - I don't find  sO helpful for asking (am I the only one that gets shamed for a slightly unclear question? 🥲). Instead, I use SO for finding issues that others have answers for.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://discord.com/invite/HBherRA"&gt;Vue Land Discord&lt;/a&gt; Code Help channels&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://discord.com/invite/ps2h6QT"&gt;Nuxt.js Discord&lt;/a&gt; Help channels&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Alrighty, that's it for today. This post will be updated as I find new info. 2 out of 2 posts today done! ✅&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My first post today if you want to read:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/maureento8888" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9iK2LNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AGIbGBya--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/300766/109fc338-716f-4285-b336-aa29c8eeaeea.png" alt="maureento8888 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/maureento8888/how-to-create-named-routes-in-nuxt-js-4i94" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create named routes in Nuxt.js&lt;/h2&gt;
      &lt;h3&gt;Maureen T'O  ・ May 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#nuxt&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;p&gt;It's about time I collected all my resources I've &lt;strong&gt;successfully&lt;/strong&gt; learned from into a list so it can be helpful to others! My rule of thumb is I don't learn from the most popular teachers like Wes Bos or Traversy Media (Brad Traversy), even though I know how amazing they are ❤️&lt;/p&gt;

&lt;p&gt;This way, I don't force myself into learning from popular teachers even when the teaching style doesn't work for me 🌟&lt;/p&gt;

&lt;p&gt;This way of learning web dev has really helped me reduce anxiety (longggg lists of 50+ resources scares me 😬), and helps me focus rather than suffering from &lt;a href="https://en.wikipedia.org/wiki/Shiny_object_syndrome"&gt;"shiny object syndrome"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have you had any resources you stick by? What learning style works for you? Drop them in the comments below!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Optimize for Change</title>
      <author>swyx</author>
      <pubDate>Thu, 20 May 2021 00:16:31 +0000</pubDate>
      <link>https://dev.to/swyx/how-to-optimize-for-change-a2n</link>
      <guid>https://dev.to/swyx/how-to-optimize-for-change-a2n</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published on &lt;a href="https://www.freecodecamp.org/news/how-to-optimize-for-change-software-development/"&gt;FreeCodeCamp&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Imagine you worked at Magic Money Corp, which runs on just three lines of JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collect underpants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;profit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// $$$!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now imagine something's wrong with the left phalange and we need to take &lt;code&gt;doStuff&lt;/code&gt; down for maintenance. What happens if you temporarily comment out the second line?&lt;/p&gt;

&lt;p&gt;Oh no! &lt;code&gt;profit()&lt;/code&gt; is erroring all over the place. You've broken our magic money machine! To solve this, you would now have to read through the entire source code of &lt;code&gt;doStuff&lt;/code&gt; to understand what it does and replace critical code for &lt;code&gt;profit&lt;/code&gt; to function. &lt;/p&gt;

&lt;p&gt;Maybe it's better to just leave &lt;code&gt;doStuff&lt;/code&gt; there... we don't &lt;em&gt;need&lt;/em&gt; a functioning phalange right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When we are afraid of making changes to our code, it starts to ossify and bloat.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's imagine if we had built Magic Money Corp on immutable data structures instead (or used a functional language):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ImmutableMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;step1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collect underpants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;doStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;profit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// $$$!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It &lt;em&gt;looks&lt;/em&gt; the same, but now I can remove &lt;code&gt;doStuff&lt;/code&gt;, and have no fear of breaking Magic Money Corp! &lt;/p&gt;

&lt;p&gt;I've been obsessed with Dan Abramov's concept of &lt;a href="https://overreacted.io/optimized-for-change/"&gt;Optimizing for Change&lt;/a&gt; since he wrote about it two years ago. It clearly articulates a core design principle of React (the rest are &lt;a href="https://reactjs.org/docs/design-principles.html"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/reactjs/react-basic"&gt;here&lt;/a&gt;). For me, it is one of &lt;a href="https://twitter.com/swyx/status/1383516418205835264"&gt;the 7 lessons that will outlive React&lt;/a&gt; that I now try to apply everywhere else.&lt;/p&gt;

&lt;p&gt;The main question it doesn't answer: &lt;em&gt;how&lt;/em&gt; exactly do you optimize for change?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Plan for Common Changes&lt;/li&gt;
&lt;li&gt;Use Simple Values&lt;/li&gt;
&lt;li&gt;Minimize Edit Distance&lt;/li&gt;
&lt;li&gt;Catch Errors Early&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-optimize-for-change"&gt;
  &lt;/a&gt;
  Why Optimize for Change
&lt;/h2&gt;

&lt;p&gt;First, an obligatory explanation of this idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hard-to-delete code drives out easy-to-delete code over time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Many layers of bandaids over hard-to-delete code causes technical mummification&lt;/li&gt;
&lt;li&gt;Therefore we must try to optimize for change from the earliest design&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The inspiration for this came from "Easy-to-replace systems tend to get replaced with hard-to-replace systems" (&lt;a href="https://twitter.com/cramforce/status/1139925981051801600"&gt;&lt;em&gt;Malte Ubl&lt;/em&gt;&lt;/a&gt;) and "Write code that is easy to delete, not easy to extend" (&lt;a href="https://programmingisterrible.com/post/139222674273/how-to-write-disposable-code-in-large-systems"&gt;&lt;em&gt;tef&lt;/em&gt;&lt;/a&gt;)&lt;strong&gt;.&lt;/strong&gt; Economics fans will recognize this as &lt;a href="https://twitter.com/swyx/status/1286624921532080129"&gt;an application&lt;/a&gt; of &lt;a href="https://en.wikipedia.org/wiki/Gresham%27s_law"&gt;Gresham's Law&lt;/a&gt;. The idea is the same — a form of anti-entropy where &lt;em&gt;inflexibility&lt;/em&gt; increases, instead of disorder.&lt;/p&gt;

&lt;p&gt;It's not that we don't &lt;em&gt;know&lt;/em&gt; when our systems are hard-to-replace. It is that the most expedient response is usually to slap on a workaround and keep going. After one too many bandaids, our codebase mummifies. This is the consequence of not allowing room for &lt;em&gt;change&lt;/em&gt; in our original designs, a related (but distinct) idea to "technical debt" (which has its &lt;a href="https://redmonk.com/rstephens/2017/08/08/technical-debt/"&gt;own&lt;/a&gt; &lt;a href="https://twitter.com/jessitron/status/1123310331957145601"&gt;problems&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The reason we must allow for changes is that &lt;a href="https://stackoverflow.blog/2020/02/20/requirements-volatility-is-the-core-problem-of-software-engineering/"&gt;requirements volatility is a core problem of software engineering&lt;/a&gt;. We devs often fantasize that our lives would be a lot easier if product specs were, well, fully &lt;em&gt;specified&lt;/em&gt; upfront. But that's the &lt;a href="https://en.wikipedia.org/wiki/Spherical_cow"&gt;spherical frictionless cow&lt;/a&gt; of programming. In reality, the only constant is change. We should carefully design our abstractions and APIs acknowledging this fact.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0hLMXdKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1078j8opalnrzuu8p4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0hLMXdKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1078j8opalnrzuu8p4u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-for-common-changes"&gt;
  &lt;/a&gt;
  Plan for Common Changes
&lt;/h2&gt;

&lt;p&gt;Once you're bought in to the need to optimize for change, it is easy to go overboard and be overcome by analysis paralysis. &lt;em&gt;How&lt;/em&gt; do you design for &lt;em&gt;anything&lt;/em&gt; when EVERYTHING could change?!&lt;/p&gt;

&lt;p&gt;We could overdo it by, for example, putting abstract facades on every interface or turning every function asynchronous. It’s clear that doubling the size of your codebase in exchange for no difference in feature set is not desirable either.&lt;/p&gt;

&lt;p&gt;A reasonable way to draw the line is to design for small, common tweaks, and not worry about big, infrequent migrations. Hillel Wayne calls these &lt;a href="https://twitter.com/hillelogram/status/1189024161127190528"&gt;requirement perturbations&lt;/a&gt; — small, typical feature requests should not throw your whole design out of whack. &lt;/p&gt;

&lt;p&gt;For the probabilistically inclined, the best we can do is make sure our design adapts well to 1-3 "standard deviation" changes. Bigger changes than that are rare (by definition), and justify a more invasive rewrite when they happen.&lt;/p&gt;

&lt;p&gt;This way, we also avoid optimizing for change that may never come, which can be a significant source of software bloat and complexity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Common changes can be accumulated with experience - the humorous example of this is &lt;a href="http://www.catb.org/jargon/html/Z/Zawinskis-Law.html"&gt;Zawinski's Law&lt;/a&gt;, but there are many far less extreme changes that are entirely routine and can be anticipated, whether by &lt;a href="https://www.swyx.io/preemptive-pluralization/"&gt;Preemptive Pluralization&lt;/a&gt; or &lt;a href="https://www.swyx.io/dev-guide-to-tech-strategy/"&gt;Business Strategy&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-simple-values"&gt;
  &lt;/a&gt;
  Use Simple Values
&lt;/h2&gt;

&lt;p&gt;Once we have constrained the scope of our ambitions, I like to dive straight into thinking about API design. The end goal is clear. In order to make code easy to change: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it has to first be easy to &lt;strong&gt;&lt;em&gt;delete...&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;which then makes it easier to &lt;strong&gt;&lt;em&gt;cut and paste&lt;/em&gt;&lt;/strong&gt;...&lt;/li&gt;
&lt;li&gt;which makes it easier to create and break apart &lt;strong&gt;&lt;em&gt;abstractions&lt;/em&gt;&lt;/strong&gt;...&lt;/li&gt;
&lt;li&gt;and so on, until you cover all routine maintenance tasks, including logging, debugging, testing and performance optimization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rich Hickey is well known for preaching the &lt;a href="https://www.infoq.com/presentations/Value-Values/"&gt;Value of Values&lt;/a&gt; and &lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Simplicity&lt;/a&gt;. It is worth deeply understanding the implications of this approach for API design. Where you might pass class instances or objects with dynamic references, you could instead pass simple, immutable values. This eliminates a whole class of potential bugs (and unlocks logging, serialization and other goodies). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LH4xn2R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olrtcg8p9ress0j3klob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LH4xn2R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olrtcg8p9ress0j3klob.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Out of these requirements for simple uncomplected values, you can derive from first principles a surprising number of "best" practices — &lt;a href="https://www.youtube.com/watch?v=bFuRvcAEiHg"&gt;immutable programming&lt;/a&gt;, constraining state with a &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell"&gt;functional core, imperative shell&lt;/a&gt;, &lt;a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"&gt;parse don't validate&lt;/a&gt;, and &lt;a href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/"&gt;managing function color&lt;/a&gt;. The pursuit of simplicity isn't a cost-free proposition, but a variety of techniques from &lt;a href="https://twitter.com/jordwalke/status/959018527091904512"&gt;structural sharing&lt;/a&gt; to static analysis can help.&lt;/p&gt;

&lt;p&gt;Instead of memorizing a table of good/bad examples, the better approach is to understand that these are all instances of the same general rule: &lt;strong&gt;Complexity arises from coupling.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minimize-edit-distance"&gt;
  &lt;/a&gt;
  Minimize Edit Distance
&lt;/h2&gt;

&lt;p&gt;I mentally picture the braids from &lt;em&gt;Simple Made Easy&lt;/em&gt; now, whenever I think about complexity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--am9riybL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj20hvtks9erpk2y4wzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--am9riybL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj20hvtks9erpk2y4wzp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you have multiple strings next to each other, you can braid them and knot them up. This is complexity — complexity is difficult to unwind. It is only when you have just one string that it becomes impossible to braid. &lt;/p&gt;

&lt;p&gt;More to the point, we should try to reduce our reliance on &lt;em&gt;order&lt;/em&gt; as much as possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execution order — If I delete something on line 2, how easily can the developer tell if something in line 3 will blow up? How many changes do I need to make to fix it?&lt;/li&gt;
&lt;li&gt;Resolution order — If concurrent processes resolve out of order, how easily can I correct for or guarantee against race conditions?&lt;/li&gt;
&lt;li&gt;Filesystem order — If I move some code from one place to another, how many other files need to be edited to reflect this?&lt;/li&gt;
&lt;li&gt;Argument order — If I swap the position of some arguments, whether in a function call or a class constructor or a YAML config file, does the program implode?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;this is an ad hoc list; there are probably some big ones I'm missing here, please let me know&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can even quantify this complexity with a notion of "&lt;a href="https://en.wikipedia.org/wiki/Edit_distance"&gt;edit distance&lt;/a&gt;":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If I use multi-arity functions, then I cannot easily add or remove or rearrange parameters without then updating &lt;em&gt;all&lt;/em&gt; the callsites, or adding default params I don't actually want. Single arity functions/languages with named params require only essential updates and no more. (This isn't without tradeoffs of course — more discussion &lt;a href="https://twitter.com/swyx/status/1198632709834326021"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Turning a stateless component stateful with React (pre-Hooks) used to require edits/additions of 7 lines of code. With React Hooks, it just takes 1.&lt;/li&gt;
&lt;li&gt;Asynchrony and Data Dependency tend to propagate in a codebase. If one requirement changed and something at the bottom needed to be async (e.g. it needs one data fetch), I used to have to switch between at least 3 files and folders, and add reducers and actions and selectors with Redux to coordinate this. Better to decomplect parent-child relationships — a design goal prominent in &lt;a href="https://twitter.com/acdlite/status/969747179731533824"&gt;React Suspense&lt;/a&gt;, &lt;a href="https://twitter.com/swyx/status/1193112002413117440"&gt;Relay Compiler&lt;/a&gt; and &lt;a href="https://sophiebits.com/2020/01/01/fast-maintainable-db-patterns.html"&gt;GraphQL's dataloader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could even imagine a complexity measure similar to the CSS specificity formula - a complexity of &lt;code&gt;C(1,0,0,0)&lt;/code&gt; would be harder to change than &lt;code&gt;C(0,2,3,4)&lt;/code&gt;.  So optimizing for change would mean reducing the "edit distance" complexity profile of common operations.&lt;/p&gt;

&lt;p&gt;I haven't exactly worked out what the formula is yet, but we can &lt;em&gt;feel&lt;/em&gt; it when a codebase is hard to change. Development progresses slower as a result. But that's just the visible effect — because it isn't &lt;em&gt;fun&lt;/em&gt; to experiment in the codebase, &lt;strong&gt;novel ideas are never found&lt;/strong&gt;. The invisible cost of missed innovation is directly related to how easy it is to try stuff out or change your mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To make code easy to change, make it impossible to "braid" your code.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#catch-errors-early"&gt;
  &lt;/a&gt;
  Catch Errors Early
&lt;/h2&gt;

&lt;p&gt;As much as we can try to contain the &lt;a href="https://medium.com/background-thread/accidental-and-essential-complexity-programming-word-of-the-day-b4db4d2600d4"&gt;accidental&lt;/a&gt; complexity of our code by API design and code style, we can never completely eliminate it except for the most trivial programs. For the remaining essential complexity, we have to keep our feedback loops as short as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yh9Kkgpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft6xbdkm4mpzitumho5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yh9Kkgpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ft6xbdkm4mpzitumho5i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IBM coined the term "&lt;a href="https://devops.com/shift-left-can-you-be-left-out/"&gt;Shift Left&lt;/a&gt;" after finding that &lt;a href="https://www.researchgate.net/publication/255965523_Integrating_Software_Assurance_into_the_Software_Development_Life_Cycle_SDLC"&gt;the earlier you catch errors, the cheaper they are to fix&lt;/a&gt;. If you arrange the software development lifecycle from left (design) to right (production), the idea is that if you shift your errors "left" then you'd save actual money by catching errors earlier (For more on this, see my discussion and sources in &lt;a href="https://dev.to/dx/language-servers-are-the-new-frameworks-1lbm"&gt;Language Servers are the New Frameworks&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In concrete terms this might translate to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit tests that pinpoint what broke in your code when you refactor&lt;/li&gt;
&lt;li&gt;types that &lt;a href="https://css-tricks.com/types-or-tests-why-not-both/"&gt;codify the contracts&lt;/a&gt; between data and functions&lt;/li&gt;
&lt;li&gt;continuous deploys that take &lt;a href="https://stackoverflow.blog/2021/01/19/fulfilling-the-promise-of-ci-cd/"&gt;less than 15 minutes&lt;/a&gt; (you probably have easy wins to make in &lt;a href="https://twitter.com/housecor/status/1213093680501993472?s=20"&gt;frontend&lt;/a&gt; or &lt;a href="https://charity.wtf/2020/12/31/why-are-my-tests-so-slow-a-list-of-likely-suspects-anti-patterns-and-unresolved-personal-trauma/"&gt;backend&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/swyx/status/1115632067885375491"&gt;local development servers&lt;/a&gt; that emulate your cloud environment&lt;/li&gt;
&lt;li&gt;"live" values either provided by &lt;a href="https://dev.to/dx/language-servers-are-the-new-frameworks-1lbm"&gt;language servers&lt;/a&gt; or &lt;a href="https://quokkajs.com/"&gt;editor plugins&lt;/a&gt; or &lt;a href="https://replay.io/"&gt;replay recording&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The causality may be &lt;strong&gt;&lt;em&gt;bidirectional&lt;/em&gt;&lt;/strong&gt;. If you make it easier to change things, you will be able to make changes more frequently. It could work the other way too — because you expect to make frequent changes, you are more incentivized to make things easy to change. An extreme example of this involves not just code, but community - the longer a library (or language) stays on version 1, the harder the difficulty of switching to version 2, whereas ecosystems that regularly publish breaking versions (in exchange for clear improvements) seem to avoid stasis by sheer exposure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-caution-against-too-much-change"&gt;
  &lt;/a&gt;
  A caution against &lt;em&gt;too much&lt;/em&gt; change
&lt;/h2&gt;

&lt;p&gt;Any good idea turns bad when taken to the extreme. If you change things &lt;em&gt;too much&lt;/em&gt; you might be favoring &lt;em&gt;velocity over stability&lt;/em&gt; — and stability is very much a feature that your users and code consumers rely on. &lt;a href="https://www.hyrumslaw.com/"&gt;Hyrum's law&lt;/a&gt; guarantees that with sufficient users and time, even your &lt;em&gt;bugs&lt;/em&gt; will be relied on, and people will get upset if you fix them.&lt;/p&gt;

&lt;p&gt;That said, overall, I find Optimizing for Change a net win in my programming, product, and system design decisions and am happy that I've boiled it down to four principles: Plan for Common Changes, Use Simple Values, Minimize Edit Distance, and Catch Errors Early!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-reads"&gt;
  &lt;/a&gt;
  Related reads
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.swyx.io/preemptive-pluralization/"&gt;Pre-emptive Pluralization is Probably Not Evil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twyx.ck.page/posts/swyx-io-7-lessons-to-outlive-react"&gt;7 Lessons to Outlive React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>learnings</category>
      <category>apidesign</category>
      <category>tech</category>
    </item>
    <item>
      <title>Proof-of-concept for inline editable areas in rich text fields in Kentico Xperience MVC</title>
      <author>Vera van Klaveren</author>
      <pubDate>Wed, 19 May 2021 23:35:05 +0000</pubDate>
      <link>https://dev.to/truelime/proof-of-concept-for-inline-editable-areas-in-rich-text-fields-in-kentico-xperience-mvc-1lnl</link>
      <guid>https://dev.to/truelime/proof-of-concept-for-inline-editable-areas-in-rich-text-fields-in-kentico-xperience-mvc-1lnl</guid>
      <description>&lt;p&gt;One thing I have always liked about Kentico Kontent is the out-of-the-box support for inserting arbitrary objects into rich text. This harnesses the powers of structured content, like better portability across different use cases, but still allows editors to spruce up their content with elements that would be difficult or even impossible to construct from standard rich text editor capabilities.&lt;/p&gt;

&lt;p&gt;For an upcoming project using the full Kentico Xperience platform, we had identified the need for a similar amount of freedom in composing content. Xperience has somewhat comparable functionality in the form of its Page Builder. However, the page builder requires hard-coding the editable areas into the page, which means that there is a fixed number of editable areas per page, in fixed positions, and outside of any structured content.&lt;/p&gt;

&lt;p&gt;To get around this limitation, we needed a solution that allowed editors to insert editable areas into their rich text. An additional requirement was that the functionality should be accessible even to low-tech content editors, ideally allowing them to insert editable areas into their text at the press of a button, and requiring no further tinkering.&lt;/p&gt;

&lt;p&gt;This post describes our proof-of-concept build of this functionality, and the decisions we made along the way. The source code is &lt;a href="https://github.com/vErsateX/xperience13-InlineEditableAreasPoC"&gt;available on GitHub&lt;/a&gt;. The resulting functionality can be seen in the following screen capture:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXcYZF7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5uquzm6arhbnovelpwwh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXcYZF7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5uquzm6arhbnovelpwwh.gif" alt="A quick demo of the built functionality."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The functionality as described was developed for Xperience 13. Keep this in mind if you plan to follow along, as things might need some tweaking for earlier versions. If you can't get it to work, your best bet would probably be to look for differences in the relevant documentation for Xperience 13 and your version, and go from there.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-editable-area-placeholders-to-our-rich-text"&gt;
  &lt;/a&gt;
  Adding editable area placeholders to our rich text
&lt;/h2&gt;

&lt;p&gt;Our basic idea was to insert a placeholder into the content, which could then be resolved into an actual editable area when the content is being rendered in the MVC view. For the placeholder, we chose the following markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;editable-area&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"areaIdentifier"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/editable-area&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our reasoning was that this would fit in well with the rest of the HTML, and also has a lower chance of colliding with any actual content typed by the editors. Of course, any arbitrary piece of markup could be used, as long as the parsing logic is changed along with it. The only requirement here is that the placeholder specifies its own &lt;code&gt;areaIdentifier&lt;/code&gt;, which allows us to deterministically relate our placeholder to its rendered editable area. Otherwise, we might lose the contents of the area when some change leaves us unable to generate the same identifier that was used when the area was originally created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resolving-placeholders-into-editable-areas"&gt;
  &lt;/a&gt;
  Resolving placeholders into editable areas
&lt;/h2&gt;

&lt;p&gt;On the MVC side, we retrieve our page data as usual, up to the point where we have to render our rich text content. To simplify the calling code, we will make our functionality available as an extension method to the &lt;code&gt;IHtmlHelper&lt;/code&gt; object, which can be accessed in the view by the &lt;code&gt;Html&lt;/code&gt; property. Keep this in mind when reading the following code snippets, as this means we cannot directly use the usual &lt;code&gt;@Html.Raw(...)&lt;/code&gt; and whatnot, since our code won't be running directly in the view.&lt;/p&gt;

&lt;p&gt;First off, we need to separate our editable area placeholders from the actual text, and render each in order. We chose to use a regular expression for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;@"&amp;lt;editable-area id=""(.*?)""&amp;gt;&amp;lt;\/editable-area&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normally, I wouldn't recommend parsing HTML(-like) strings using regular expressions, as detailed in &lt;a href="https://stackoverflow.com/a/1732454"&gt;this StackOverflow answer&lt;/a&gt;. However, as detailed in &lt;a href="https://stackoverflow.com/a/1733489"&gt;the answer below it&lt;/a&gt;, "it's sometimes appropriate to use them for parsing a &lt;em&gt;limited&lt;/em&gt;, &lt;em&gt;known&lt;/em&gt; set of HTML", which is the case here. This does mean the solution is vulnerable to minor changes in the placeholder markup. You could tweak the pattern a bit to be more robust, but since the HTML is not really meant to be manipulated directly, we didn't think it necessary in our case, and this simple pattern also has the added benefit of being easier to understand and reason about.&lt;/p&gt;

&lt;p&gt;As for the pattern, note that we have introduced a capturing group for the value of the &lt;code&gt;id&lt;/code&gt; attribute. &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.split?view=net-5.0#System_Text_RegularExpressions_Regex_Split_System_String_System_String_"&gt;An interesting feature of the &lt;code&gt;Regex.Split(...)&lt;/code&gt; overloads&lt;/a&gt; is that the substrings captured by the capturing groups in the regex are themselves included in the returned array. This means that our &lt;code&gt;components&lt;/code&gt; variable now references an array containing pieces of HTML, interspersed with the IDs of our editable areas. Specifically, this means the HTML is located at the &lt;em&gt;even&lt;/em&gt; indices, and the editable area IDs at the &lt;em&gt;odd&lt;/em&gt; indices. Thus, we can render everything to the view using the following loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isEditableArea&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isEditableArea&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;RenderEditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;RenderHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To keep things readable, we have extracted the exact logic for rendering the HTML components into separate methods (or more specifically, local functions). Starting with the &lt;code&gt;RenderHtml(string)&lt;/code&gt; method, this is implemented as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHtmlContent&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ViewContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we still use the equivalent of &lt;code&gt;Html.Raw(...)&lt;/code&gt; to render the HTML, just as we would do when rendering it directly inside of a view, but that we have to manually write this to the view output.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;RenderEditableAreaAsync(string)&lt;/code&gt; method is implemented using the same &lt;code&gt;RenderContent(IHtmlContent)&lt;/code&gt; method, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;RenderEditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;kentico&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Kentico&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;kentico&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, nothing special is going on here. We just call the same methods as we would do in our view, but we have to manually write their output to the view output.&lt;/p&gt;

&lt;p&gt;All of this combined gives us the following class. Note that we have added it to the same namespace as Kentico's own &lt;code&gt;EditableAreaAsync(...)&lt;/code&gt; method to make it accessible wherever you might otherwise directly render the editable areas. Also note that to allow our method to be called with the &lt;code&gt;@Html.DoSomething&lt;/code&gt; syntax in our views, we have to return an &lt;code&gt;object&lt;/code&gt; reference. However, since the output is written directly to the view context, we will always return &lt;code&gt;null&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Kentico.Web.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc.Rendering&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text.RegularExpressions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Kentico.PageBuilder.Web.Mvc&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;/// A static class implementing operations for working with inline editable areas.&lt;/span&gt;
    &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InlineEditableAreas&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Resolves the editable areas in the given HTML string and writes the result to the view context.&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name="htmlHelper"&amp;gt;An &amp;lt;see cref="IHtmlHelper"/&amp;gt; object containing the view context.&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;param name="html"&amp;gt;The HTML string.&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;returns&amp;gt;The return value is not used and will always be null.&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;ResolveEditableAreasAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IHtmlHelper&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Regex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@"&amp;lt;editable-area id=""(.*?)""&amp;gt;&amp;lt;\/editable-area&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;isEditableArea&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isEditableArea&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;RenderEditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;RenderHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;RenderEditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;kentico&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Kentico&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;kentico&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EditableAreaAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

            &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;RenderContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHtmlContent&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;htmlHelper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ViewContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our views, we can then call our extension method as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;@await&lt;/span&gt; &lt;span class="n"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ResolveWidgetAreasAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SomeRichTextField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-a-button-to-the-editor-for-inserting-editable-areas"&gt;
  &lt;/a&gt;
  Adding a button to the editor for inserting editable areas
&lt;/h2&gt;

&lt;p&gt;While we &lt;em&gt;could&lt;/em&gt; just instruct the content editors to copy-paste some markup directly into their HTML, that wouldn't be very user-friendly. Therefore, we also have to add a button that can directly insert these editable area placeholders into the rich text field, without ever having to directly work with the underlying HTML. Luckily, the CKEditor Kentico uses for its WYSIWYG editor has great support for adding custom plugins.&lt;/p&gt;

&lt;p&gt;Basically, you create a plugin by adding a new folder in the &lt;code&gt;CMS/CMSAdminControls/CKeditor/plugins&lt;/code&gt; folder. The name of this folder determines the name of your plugin, which is important for later. Inside of this folder, you create a JavaScript file named &lt;code&gt;plugin.js&lt;/code&gt;, which will contain the actual button behaviour, and an &lt;code&gt;icons&lt;/code&gt; folder containing an image for our button icon, which should have the same name as our plugin. In our case, this gives us the following folder structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CMS/CMSAdminControls/CKeditor/plugins
└───inlineeditableareas
    ├───plugin.js
    └───icons
        └───inlineeditableareas.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following snippet contains our &lt;code&gt;plugin.js&lt;/code&gt; script. In it, we create a new plugin, which defines a new command, &lt;code&gt;insertEditableArea&lt;/code&gt;, and adds a button that executes that command when clicked. When executed, the command generates a random ID value for our placeholder, and then inserts the placeholder markup into the editor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;CKEDITOR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inlineeditableareas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;icons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inlineeditableareas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;init&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;insertEditableArea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;editableAreaId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;editable-area id="&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;editableAreaId&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;&amp;lt;/editable-area&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;editableArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CKEDITOR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFromHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editableArea&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inlineeditableareas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Insert widget area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;insertEditableArea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;toolbar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;insert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this in place, we just need to add our plugin to the CKEditor. This is done in the &lt;code&gt;config.js&lt;/code&gt; file, which is located at &lt;code&gt;/CMS/CMSAdminControls/CKeditor/config.js&lt;/code&gt;. This file should contain one big function that receives a &lt;code&gt;config&lt;/code&gt; object as a parameter. This object has a &lt;code&gt;plugins&lt;/code&gt; field that we need to &lt;em&gt;add&lt;/em&gt; our plugin to, as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,inlineeditableareas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;+=&lt;/code&gt;, and the leading comma. This is important because the &lt;code&gt;plugins&lt;/code&gt; field will already contain a comma-separated list of plugins, and we need to append a new element to it. Also, if your &lt;code&gt;config.js&lt;/code&gt; file already contains a line that adds some plugins to this field, you can of course combine the two and add the plugin to the existing assignment.&lt;/p&gt;

&lt;p&gt;Finally, we need to actually add our button to the relevant toolbars. This is done in the same file, and takes the form of assigning a jagged array to a field like &lt;code&gt;config.toolbar_Standard&lt;/code&gt;. The nested arrays define the sub-sections of the toolbar. You can either choose to add our &lt;code&gt;inlineeditableareas&lt;/code&gt; to one of the existing nested arrays, or add a new array containing the new button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-placeholders-visible-in-the-editor"&gt;
  &lt;/a&gt;
  Making the placeholders visible in the editor
&lt;/h2&gt;

&lt;p&gt;At this point, we have fully functional inline editable areas. However, they are only visible in the &lt;em&gt;Page&lt;/em&gt; tab, meaning they are still quite hard to work with, requiring us to switch to the page builder to even see that we have actually inserted an editable area. We can remedy this by adding some custom editor styling to make the editable areas stand out a bit more. In previous versions of the CMS, we could add a style sheet for this directly in Kentico, in the &lt;em&gt;CSS stylesheets&lt;/em&gt; module, and add it to our site in the &lt;em&gt;Sites&lt;/em&gt; module. For Xperience 13, we instead have to add a style sheet to the &lt;code&gt;wwwroot&lt;/code&gt; of our MVC project, and specify it in the &lt;code&gt;Content &amp;gt; Content management &amp;gt; CSS stylesheet for WYSIWYG editor&lt;/code&gt; setting in the &lt;em&gt;Settings&lt;/em&gt; module. For example, if our MVC project contained a file &lt;code&gt;/wwwroot/css/editor.css&lt;/code&gt;, we would specify &lt;code&gt;~/css/editor.css&lt;/code&gt; as our setting value.&lt;/p&gt;

&lt;p&gt;Of course, there are infinite possibilities for styling these placeholders. We came up with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;editable-area&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;widget area&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="n"&gt;darkgrey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#888&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing to note about this style sheet is that we style the &lt;code&gt;::before&lt;/code&gt;, instead of the element itself. Beside the &lt;code&gt;::before&lt;/code&gt; allowing us to add a bit of text to better describe its purpose, this also prevents the element from being modified in the WYSIWYG editor. If we had styled the element itself, and thus given it actual dimensions, the editor would actually allow you to enter text inside of it like any other container element, thus changing the placeholder structure and preventing our regular expressions from recognising it. Again, this could be remedied by changing the regular expression a bit, but since we don't want anything to be entered inside of the placeholder anyway, we thought this was the better solution.&lt;/p&gt;

&lt;p&gt;Another minor thing is that we chose to refer to the editable area here as a &lt;em&gt;widget area&lt;/em&gt;. Our reasoning was that calling it an &lt;em&gt;editable&lt;/em&gt; area in a location where you cannot actually edit it might be confusing to the content editors, and we consider &lt;em&gt;editable area&lt;/em&gt; to be more of a technical, under-the-hood term anyway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With all this in place, we have reached our goal of enabling content editors to use the page builder functionality &lt;em&gt;inside&lt;/em&gt; of their rich text, rather than having to choose between just using it &lt;em&gt;around&lt;/em&gt; it, or letting go of structured content completely and just putting the rich text into the page builder as well. This promotes applicability of the content to more use cases, potentially putting less strain on future wishes or requirements. This also improves reusability of existing page types, as the pages can be composed into different forms more freely. Of course, if a consistent pattern emerges among these, a dedicated page type or template might be of more use, since this reduces the manual work required.&lt;/p&gt;

&lt;p&gt;I think the main shortcomings of the current solution lie mostly with the WYSIWYG representation of the editable areas. While the initial flow of adding a new editable area works well, moving them around afterwards can be a bit tricky, since the editor thinks its just a regular empty container with a funny name. The CKEditor does have support for the concept of an 'object', which is actually what Kentico used for its own inline widgets before, which might be worthwhile to investigate further.&lt;/p&gt;

&lt;p&gt;All in all, this has been a fun project to dig into. I hope you have found this post insightful or helpful in any way.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@halacious?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;HalGatewood.com&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/website?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>kentico</category>
      <category>xperience</category>
      <category>pagebuilder</category>
      <category>richtext</category>
    </item>
    <item>
      <title>Angular directives: Interesting ways to use it.</title>
      <author>Rahman Adewale Hafeez</author>
      <pubDate>Wed, 19 May 2021 22:04:40 +0000</pubDate>
      <link>https://dev.to/dwale/angular-directives-interesting-ways-to-use-it-1k4b</link>
      <guid>https://dev.to/dwale/angular-directives-interesting-ways-to-use-it-1k4b</guid>
      <description>&lt;p&gt;This article will be using the angular directive to create a reusable custom user validation field. A typical use case will be an account lookup field or any user validation field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mGRAelUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp7a4smvh4wgumcddaoo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mGRAelUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp7a4smvh4wgumcddaoo.gif" alt="gif for validate account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll be using a bank account validation feature for this document. I came about this idea due to my experience in the fintech industry, where I've had to implement this across various applications, this will allow you to keep your code DRY and it also looks cool 😉.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" [appAccountLookup] = "bankInformationForm.value"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we create our angular application using the Angular CLI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new account-validation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that's done, we need to navigate into our application and create our directive, it should be added automatically to your declarations array in your app.module.ts file. You can achieve that with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd account-validation
ng generate directive accountLookup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in our app folder, let's create an interface that will help define the signature of the object our directive will accept as an input. It should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**bankInfo.ts**

export class IBankInfo {
   bankCode: string;
   bankAccountNumber: string;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our newly created directive should have the structure displayed below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;** account-lookup.directive.ts **

import { Directive } from '@angular/core';

@Directive({
selector: '[appAccountLookup]'
})

export class AccountLookupDirective {
constructor() {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we continue with our directive, let's create the form that will house the input that will use the directive. It should look like this once you are done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**app.component.ts**

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  bankInformationForm!: FormGroup;

  constructor (private formBuilder: FormBuilder) {}
  ngOnInit(): void {
     this.initializeForm();
  }

  private initializeForm():void {
   this.bankInformationForm = this.formBuilder.group({
      bankCode: ["", Validators.required],
      bankAccountNumber: ["", Validators.required]
  });
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, let's bind our template to the form and use our directive in the account number input field&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**app.component.html**

&amp;lt;form  [formGroup]= "bankInformationForm"&amp;gt;
  &amp;lt;fieldset&amp;gt;
    &amp;lt;div class="input__field--row"&amp;gt;
      &amp;lt;label &amp;gt;Bank&amp;lt;/label&amp;gt;
      &amp;lt;span class="input__wrapper"&amp;gt;
       &amp;lt;select name="bankCode" id="bankCode" formControlName="bankCode"&amp;gt;
   &amp;lt;option [disabled]=true value=""&amp;gt;Choose Bank&amp;lt;/option&amp;gt;
   &amp;lt;option value="038"&amp;gt;GTBank&amp;lt;/option&amp;gt;
       &amp;lt;/select&amp;gt;
      &amp;lt;/span&amp;gt;
     &amp;lt;/div&amp;gt;

    &amp;lt;div class="input__field--row"&amp;gt;
      &amp;lt;label&amp;gt;Account Number&amp;lt;/label&amp;gt;
      &amp;lt;span class="input__wrapper"&amp;gt;
       &amp;lt;input type="text" name="bankAccountNumber"id="bankAccountNumber" formControlName="bankAccountNumber" [appAccountLookup] = "bankInformationForm.value"/&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/fieldset&amp;gt; 
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's bring in all the elements we need to bring this directive to life.&lt;/p&gt;

&lt;p&gt;Our directive will accept the bank details we retrieve from our BankInformation form. We will be making use of reactive forms so don't forget to import the ReactiveFormsModule in your app.module.ts file, we will need to import the &lt;a href="https://angular.io/api/core/Input"&gt;Input&lt;/a&gt; decorator. We are also going to need the &lt;a href="https://angular.io/api/core/Renderer2"&gt;Renderer2&lt;/a&gt; and &lt;a href="https://angular.io/api/core/ElementRef"&gt;ElementRef&lt;/a&gt; classes to be injected in here to make this work, now your directive should look like this.&lt;br&gt;
It will take the &lt;strong&gt;bankDetails&lt;/strong&gt; object as its Input so we can declare it as it is below. We would also be adding a loading text and a default text to the element that will perform the action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;** account-lookup.directive.ts **
import { Directive, ElementRef, Input, Renderer2} from '@angular/core';
@Directive({
  selector: '[appAccountLookup]'
})
export class AccountLookupDirective {
 @Input('appAccountLookup') bankDetails!: IBankInfo;
 defaultActionText: string = 'Verify Account';
 loadingActionText: string = 'Verifying...';

  constructor(private renderer: Renderer2, private el: ElementRef)                                                    {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! next up, let's code the method that will modify our input by adding the necessary elements to it which will be called in the constructor of our AccountLookupDirective class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private modifyField():void {

  // Set style of parent
  const parent =  this.renderer.parentNode(this.el.nativeElement)
  this.renderer.setStyle(parent, 'position', 'relative');

  // Create action element inside the input field
  const actionButton = this.renderer.createElement('span');
  this.renderer.addClass(actionButton, 'inside__input--button');
this.renderer.setProperty(actionButton,'innerHTML',this.defaultActionText);

  actionButton.addEventListener('click', (event:any) =&amp;gt; {
  // Method that will return the account name
  });

  this.renderer.appendChild(parent, actionButton);
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above we've created the &lt;em&gt;"Verify"&lt;/em&gt; action, we also gave it a class of &lt;em&gt;"inside__input - button"&lt;/em&gt;, the CSS class will be styled like this. Let's also add the class our account name will be displayed, &lt;em&gt;"result__under - text"&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.inside__input--button {
   position: absolute;
   font-size: 10px;
   right: 13px;
   top:30%;
   cursor: pointer;
   user-select: none;
 }
.result__under--text {
   position: absolute;
   font-size: 12px;
   left: 0px;
   bottom: -50%;
   cursor: pointer;
   user-select: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we just did above was to add a verify button inside our input element so our users can click on that button and fetch the account name from the account validation API.&lt;/p&gt;

&lt;p&gt;Let's create a utility service that will contain the method which will make the API call to the service to validate the user's bank details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng generate service utility
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add the method that will make the API call, your service should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**utility.service.ts**
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class UtilityService {
  constructor( private httpClient: HttpClient ) { }

  public validateAccount(validateAccount): Observable&amp;lt;any&amp;gt; {

    return this.httpClient.post('this.apis.verifyAccount', validateAccount)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now import the service in our directive and inject it via the constructor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;** app.component.ts **
import { IBankInfo } from './bankInfo';
import { UtilityService } from './utility-service.service';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's code the method that will make this API call and the actions that will be performed after the account name is returned. We will call this method &lt;strong&gt;verifyAccountDetails&lt;/strong&gt;. This is where we retrieve the account name and append it to the input field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**account-lookup.directive.ts**

  private verifyAccountDetails(actionButton: HTMLElement,  parent:HTMLElement){
this.renderer.setProperty(actionButton,'innerHTML',this.loadingActionText);

  const accountNameDisplay = this.renderer.createElement('span');
  this.renderer.addClass(accountNameDisplay, 'result__under--text');

  this.renderer.appendChild(parent, accountNameDisplay);

 this.utilityService.validateAccount(this.bankDetails)
 .subscribe((resp)=&amp;gt; {
   actionButton.innerHTML = this.defaultActionText;
this.renderer.setProperty(accountNameDisplay,'innerHTML',resp.accountName);
},
 (error: any)=&amp;gt; {
   actionButton.innerHTML = this.defaultActionText;
   console.log(error);
  })
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, our method accepts the actionButton and the parent element as compulsory parameters. We created the element the returned account name will be displayed and gave a class of &lt;em&gt;result_under - text&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With that, we can easily reuse this directive in any component across our application. You can find the code on my &lt;a href="https://github.com/dwale/account-lookup-directive-in-angular"&gt;Github&lt;/a&gt;, please leave your comments and suggestions.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>directives</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>"Am I a bad developer?" - A question developers commonly face</title>
      <author>𝙼𝚊𝚗𝚞𝚃𝚑𝚎𝙲𝚘𝚍𝚎𝚛</author>
      <pubDate>Wed, 19 May 2021 22:00:41 +0000</pubDate>
      <link>https://dev.to/manuthecoder/am-i-a-bad-developer-a-question-developers-commonly-face-4gck</link>
      <guid>https://dev.to/manuthecoder/am-i-a-bad-developer-a-question-developers-commonly-face-4gck</guid>
      <description>&lt;p&gt;Being a developer is hard, no doubt about it.&lt;br&gt;
Software development is a field where nobody knows everything. Everyone in this field loves to share and talk about the technology they are working on or they have explored. &lt;strong&gt;Everybody wants to learn some sort of technology they are lacking because nobody wants to become a bad developer.&lt;/strong&gt; If you are a beginner or experienced understand that technology is a never-ending thing so there will be always something to learn and you can’t learn all the technology, frameworks, tools which are coming out every day. Accept that when you see someone’s proficiency in a certain domain or technology it doesn’t mean he/she knows everything. They are also like you and they also don’t know something in tech that you know. Today everyone in software development needs help from StackOverflow or other resources so you’re not alone with this feeling. &lt;strong&gt;Just because someone knows a framework or library which you don't know doesn't mean you're a bad developer!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A good programmer understands that that they have to continue to learn and grow. They strive to do their best at every effort, admit to failures and learn from them. A good programmer loves to program, and would do so in their spare time even if they already spend 80+ hours a week programming.&lt;br&gt;
&lt;a href="https://softwareengineering.stackexchange.com/questions/41473/how-can-i-know-whether-i-am-a-good-programmer"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's a couple of tips for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Don't judge yourself&lt;/strong&gt; - People tend to undervalue themselves. Ask a mentor instead&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn the basics first&lt;/strong&gt; - React, jQuery, Vue might be wonderful technologies, but remember, they are all based on JavaScript! Learn the fundamentals first before going on to the frameworks/libraries. It will make life easier!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't try to learn everything&lt;/strong&gt; - If you know at least 10-15 programming languages, that's awesome! There are over 700 programming languages. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be passionate&lt;/strong&gt; - Yes, you should &lt;em&gt;want&lt;/em&gt; to learn more. &lt;em&gt;Wanting to learn more makes you a very good programmer!&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Work on personal projects&lt;/strong&gt; - (ok, well, I'm still in school, and I dont have a job yet), but still, have personal projects. It makes coding fun!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully you found this useful&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>SvelteKit Theme Switch</title>
      <author>Nico Bachner</author>
      <pubDate>Wed, 19 May 2021 21:47:50 +0000</pubDate>
      <link>https://dev.to/nico_bachner/sveltekit-theme-switch-a58</link>
      <guid>https://dev.to/nico_bachner/sveltekit-theme-switch-a58</guid>
      <description>&lt;p&gt;When adding Dark Mode to my new SvelteKit project, there were a few issues I ran into when creating the theme switch, but I came up with a solution that I'm quite proud of, so I'd like to share it.&lt;/p&gt;

&lt;p&gt;The solution is comprised of 4 main parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Svelte Store&lt;/li&gt;
&lt;li&gt;Theme Switch Component&lt;/li&gt;
&lt;li&gt;Style Switcher&lt;/li&gt;
&lt;li&gt;Theme Styles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we begin, I'd like to point out that while this tutorial uses CSS Custom Properties (a.k.a. CSS Variables) for theming, the solution works with any theming method, as long as the styles are defined in a global stylesheet.&lt;/p&gt;

&lt;p&gt;Also, I'll be using TypeScript, so for those using plain JS, simply remove the type definitions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types
&lt;/h2&gt;

&lt;p&gt;The first thing we'll do is to define our themes. We can do this in the global type definitions (&lt;code&gt;src/globals.d.ts&lt;/code&gt;) so that we have access to the types throughout our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/globals.d.ts&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we're doing here is declaring a global type called &lt;code&gt;Theme&lt;/code&gt; that we can access from anywhere in our project. This means if we define a variable type as &lt;code&gt;Theme&lt;/code&gt;, then we can only assign the values &lt;code&gt;'system'&lt;/code&gt;, &lt;code&gt;'light'&lt;/code&gt;, or &lt;code&gt;'dark'&lt;/code&gt; to it. &lt;/p&gt;

&lt;p&gt;Apart from &lt;code&gt;'system'&lt;/code&gt;, you can choose your theme values to your heart's desire. You're also not limited to just two, so experiment away!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;'system'&lt;/code&gt; value here is important: we want the user to be greeted with their preferred theme, so we want the default theme to correspond to their Operating System color scheme.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svelte-store"&gt;
  &lt;/a&gt;
  Svelte Store
&lt;/h2&gt;

&lt;p&gt;Now that we've got type definitions out of the way, we can move on to the heart of the theme switch: the theme store. The theme store is a &lt;a href="https://svelte.dev/docs#svelte_store"&gt;Svelte Store&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/lib/stores.ts (or .js)&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're creating a Svelte Store called &lt;code&gt;theme&lt;/code&gt; and assigning it the default value of &lt;code&gt;'system'&lt;/code&gt;. Again, it is important that &lt;code&gt;'system'&lt;/code&gt; is the default so that the user's preferences are respected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theme-switch-component"&gt;
  &lt;/a&gt;
  Theme Switch Component
&lt;/h2&gt;

&lt;p&gt;We can now use the Svelte Store we created in our Theme Switch Component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// src/lib/components/ThemeSwitch.svelte

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/stores&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;System&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;system&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{$theme}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {#each themes as { value, title }}
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            {title}
        &lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
    {/each}
&lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;/* your styles here */&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot going on here, so I think a quick walkthrough is in order.&lt;/p&gt;

&lt;p&gt;We first import &lt;code&gt;theme&lt;/code&gt; from &lt;code&gt;'$lib/stores'&lt;/code&gt;.  &lt;code&gt;$lib/stores&lt;/code&gt; is a path alias for &lt;code&gt;src/lib/stores.svelte&lt;/code&gt;, the file in which we created our theme Svelte Store.&lt;/p&gt;

&lt;p&gt;We now want to modify the value of &lt;code&gt;theme&lt;/code&gt;. We could do this by calling &lt;code&gt;theme.set(x)&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is the value we want theme to be (In this setup, &lt;code&gt;'system'&lt;/code&gt;, &lt;code&gt;'light'&lt;/code&gt;, or &lt;code&gt;'dark'&lt;/code&gt;). However, there is an easier way: the &lt;code&gt;$&lt;/code&gt; shortcut. By referencing a Svelte Store using a &lt;code&gt;$&lt;/code&gt; prefix, it becomes mutable.&lt;/p&gt;

&lt;p&gt;(If a value is mutable, that means it can be changed by assigning a new value to it. In JavaScript, for example, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; create mutable variables, whereas &lt;code&gt;const&lt;/code&gt; creates immutable ones.)&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;$theme&lt;/code&gt; is mutable, we use the svelte binding &lt;code&gt;bind:value&lt;/code&gt; to get &lt;code&gt;theme&lt;/code&gt; to track the changes to the value of the selected option. The browser does most of the heavy lifting in this case, since all we need to do is read the &lt;code&gt;value&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#style-switcher"&gt;
  &lt;/a&gt;
  Style Switcher
&lt;/h2&gt;

&lt;p&gt;We now have a Svelte Store that stores the theme value, and a Theme Switch component that updates the theme value, so all that remains is the functionality for changing the theme based on the theme value.&lt;/p&gt;

&lt;p&gt;The way I went about this is swapping stylesheets in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the generated document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// src/routes/__layout.svelte

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/stores&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;svelte:head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt;
        &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"color-scheme"&lt;/span&gt;
        &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{$theme&lt;/span&gt; &lt;span class="err"&gt;==&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;system&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;light&lt;/span&gt; &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="na"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;{`/theme/${$theme}.css`}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svelte:head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we're doing here loading a CSS stylesheet dynamically based on the current theme value. For example, on page load, the previous code will generate the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"color-scheme"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"light dark"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/theme/system.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#theme-styles"&gt;
  &lt;/a&gt;
  Theme Styles
&lt;/h2&gt;

&lt;p&gt;The only thing that remains now is to define the styles of our project. We can do this anywhere in the &lt;code&gt;static/&lt;/code&gt; directory, as long as we remember to adjust the path in &lt;code&gt;&amp;lt;link rel="stylesheet" href={'/theme/${$theme}.css'} /&amp;gt;&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;p&gt;If we follow the path convention I set up, we get the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static
└── theme
    ├── system.css
    ├── light.css
    └── dark.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;light.css&lt;/code&gt; and &lt;code&gt;dark.css&lt;/code&gt; (or whatever you choose to call you themes), we style our project accordingly. An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* light.css */&lt;/span&gt;

&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--lightest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--lighter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--strong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--stronger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--strongest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While these are straightforward, the file that requires more attention is &lt;code&gt;system.css&lt;/code&gt;. This is because there we need to worry about system preferences. While it is easy to access the user's preference using the &lt;code&gt;prefers-color-scheme&lt;/code&gt; media query, we need to keep in mind here that there are only two predefined choices, &lt;code&gt;light&lt;/code&gt; and &lt;code&gt;dark&lt;/code&gt;. Hence we need to style accordingly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* system.css */&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;--lightest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--lighter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--strong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--stronger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--strongest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;--lightest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--lighter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--strong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--stronger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;--strongest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! You now have a working theme switch.&lt;/p&gt;

&lt;p&gt;If you want to make your theme switch even cooler, you could store the selected value in localStorage so that when the user selects a particular theme, that theme will also be the one loaded next time they visit the page.&lt;/p&gt;

&lt;p&gt;The source code of the project I was building the Theme Switch for is on GitHub: &lt;a href="https://github.com/nico-bachner/v4"&gt;nico-bachner/v4&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>svelte</category>
      <category>sveltekit</category>
    </item>
    <item>
      <title>Top 10 Machine Learning Projects With Free Source Code And Tutorial For Final Year &amp; Resume</title>
      <author>Mishu Dhar Chando</author>
      <pubDate>Wed, 19 May 2021 21:47:42 +0000</pubDate>
      <link>https://dev.to/chando0185/top-10-machine-learning-projects-with-free-source-code-and-tutorial-for-final-year-resume-6ka</link>
      <guid>https://dev.to/chando0185/top-10-machine-learning-projects-with-free-source-code-and-tutorial-for-final-year-resume-6ka</guid>
      <description>&lt;p&gt;Youtube Link: &lt;br&gt;
&lt;a href="https://youtu.be/C18ELHXw31A"&gt;https://youtu.be/C18ELHXw31A&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>deeplearning</category>
      <category>python</category>
    </item>
    <item>
      <title>Rails Generators</title>
      <author>Jessie Rohrer</author>
      <pubDate>Wed, 19 May 2021 21:47:07 +0000</pubDate>
      <link>https://dev.to/jrrohrer/rails-generators-1p44</link>
      <guid>https://dev.to/jrrohrer/rails-generators-1p44</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@robpumphrey?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Rob Pumphrey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/red-blocks?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I started learning Rails a few weeks ago, the concept of using generators scared me. I am a visual learner, and I like to have information laid out neatly in front of me. I can't push to GitHub without refreshing my repo page to make sure the push actually...pushed. So imagine my anxiety when I ran a generator for the first time and about 500 files were added to my project. &lt;/p&gt;

&lt;p&gt;If you are a beginner who is just as weary of new command line actions as I am, I am here to tell you it's totally OK to embrace Rails' generators. They will make your life easier, I promise. I'm going to break down what the most commonly used generators do, what they add to your project, and how to decide which ones to use and when.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scaffold-generator"&gt;
  &lt;/a&gt;
  Scaffold Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate scaffold ModelName column_name:data_type&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This one is basically cheating, but your app will be up and running (if not looking super bland) in just a couple of minutes. But it is unlikely that the code generated will be a perfect fit for your application, because it basically generates a complete app, minus the content. You will end up removing files and taking extra time to go through and figure out which of the generated files you actually need. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It
&lt;/h3&gt;

&lt;p&gt;If you need an app up and running, like, yesterday, and you don't care about bloat files. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resource-generator"&gt;
  &lt;/a&gt;
  Resource Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate resource ModelName column_name:data_type&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have your project planned out, this generator will save you a lot of time getting set up. It will create your model, controller, migration, helper file, scss file, and views folder. It will also add a full &lt;code&gt;resources&lt;/code&gt; call in your &lt;code&gt;routes.rb&lt;/code&gt; file.  You can specify attributes that will be added to your migration table, and you can specify a 'belongs_to' Active Record association that will automatically be filled in for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It
&lt;/h3&gt;

&lt;p&gt;If you want to create your views on your own, you are using a front-end MVC framework, or you are building an API. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-generator"&gt;
  &lt;/a&gt;
  Model Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate model ModelName column_name:data_type column_name2:data_type2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This generator is great for creating the core code needed to create a model and associated database table without adding a bunch of extra stuff to your program. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It
&lt;/h3&gt;

&lt;p&gt;Primarily when you are adding a new model to your project, if you only want the model file and the migration file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#controller-generator"&gt;
  &lt;/a&gt;
  Controller Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate controller ControllerName controller_action controller_action&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will allow you to create a controller. You can append the names of controller actions you want to add, and Rails will create routes to each of those arguments. It will also create a  new view directory and a template file for each of the controller actions specified. Finally, it will also create a helper file and an scss file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It:
&lt;/h3&gt;

&lt;p&gt;This generator is ideal if you want to create a static views or non-CRUD related features. Like adding a Sessions controller for handling signups and logins. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migration-generator"&gt;
  &lt;/a&gt;
  Migration Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate migration MigrationName column_name:data_type&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Like the name implies, this generator will create a new migration for you, and add it to your &lt;code&gt;db/migrate&lt;/code&gt; file. You can specify the name of the migration and any attributes you want to add. Rails is even kind enough to infer from the name of your migration what you want to accomplish. So if you name your migration &lt;code&gt;AddContentToComments&lt;/code&gt; it will create a migration that will add a column called content to your comments table. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It
&lt;/h3&gt;

&lt;p&gt;When all you need is a new migration file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes-on-rails-generators"&gt;
  &lt;/a&gt;
  Notes on Rails Generators
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can shorten the command by swapping the word &lt;code&gt;generate&lt;/code&gt; with the letter &lt;code&gt;g&lt;/code&gt;: &lt;code&gt;rails g model User username:string password:password_digest&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you don't want the included Rails test framework, append the flag &lt;code&gt;--no-test-framework&lt;/code&gt; to the end of your generate command.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you ever want to know what generators are available to you, you can always type &lt;code&gt;rails generate&lt;/code&gt; into your console. You'll get an output that looks like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Usage: rails generate GENERATOR [args] [options]

General options:
  -h, [--help]     # Print generator's options and usage
  -p, [--pretend]  # Run but do not make any changes
  -f, [--force]    # Overwrite files that already exist
  -s, [--skip]     # Skip files that already exist
  -q, [--quiet]    # Suppress status output

Please choose a generator below.

Rails:
  application_record
  assets
  benchmark
  channel
  controller
  generator
  helper
  integration_test
  jbuilder
  job
  mailbox
  mailer
  migration
  model
  resource
  scaffold
  scaffold_controller
  system_test
  task

ActiveRecord:
  active_record:application_record

TestUnit:
  test_unit:channel
  test_unit:generator
  test_unit:install
  test_unit:mailbox
  test_unit:plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rails generators are your friend. They do a lot of grunt work for you so you can get started on the fun parts of your project. &lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GitOps Superpowers</title>
      <author>Charles Landau</author>
      <pubDate>Wed, 19 May 2021 21:23:16 +0000</pubDate>
      <link>https://dev.to/charlesdlandau/gitops-superpowers-40p</link>
      <guid>https://dev.to/charlesdlandau/gitops-superpowers-40p</guid>
      <description>&lt;p&gt;I've been using GitOps for the past few years and I wanted to reflect briefly on what I've learned, how it helps, and how it breaks down.&lt;/p&gt;

&lt;p&gt;The term GitOps was developed by Weaveworks in 2017. It's a technique where you put the desired state of your system in a version controlled repository. When changes are made in the code, those changes get applied to your system automatically (they are "deployed"). There are lots of tools that implement this, including &lt;a href="https://fluxcd.io/"&gt;Weaveworks' own FluxCD tool&lt;/a&gt;, &lt;a href="https://www.terraform.io/cloud"&gt;Terraform Cloud&lt;/a&gt;, &lt;a href="https://vercel.com/"&gt;and Vercel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a deeper dive on GitOps, &lt;a href="//gitops.tech"&gt;gitops.tech&lt;/a&gt; is a great place to start.&lt;/p&gt;

&lt;p&gt;Since I started using it, GitOps has made it considerably easier for me to build. Considerations like governance, tracking changes, and testing are much less daunting. Generally, what I like to do now is require changes to get a peer review before being accepted. For more sensitive environments some providers will &lt;a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners"&gt;let you assign ownership to specific parts of the system&lt;/a&gt;, so that those owners must be the ones to approve changes. This is great for &lt;a href="https://www.openriskmanual.org/wiki/Four_Eyes_Principle"&gt;enforcing the "four eyes principle"&lt;/a&gt; - that changes can't get made by a single person. Sometimes it can be good to define the desired infrastructure alongside software, as with Vercel or many projects that use &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;. In other cases it's much better to avoid this, such as when you're using GitOps to manage a cloud account.&lt;/p&gt;

&lt;p&gt;All the benefits of defining systems with code roll up to the GitOps approach. Changes in the repository can be tested automatically, you can write reusable libraries, you can try your changes in test/QA environments before accepting them. The nice thing here is that you can accomplish this using git branches! Your CI tool probably has prebuilt jobs that can cover many of these use cases.&lt;/p&gt;

&lt;p&gt;Unfortunately, not everything can always be defined declaratively and deployed automatically and on time. There are a lot of factors that could drive you back to "ClickOps". The most obvious one is when the code doesn't support a resource you need (e.g. there is no Terraform implementation for what you're doing.) Two different problems arise when this happens. The first is that the steps you took manually all add up to a debt, and they need to be taken again if you ever need to redeploy. They need to be documented, and they need to be automated. Failing to document them is very bad, and the task of automating them has a way of languishing in the backlog. The other problem is that you have chipped away at one of the benefits of GitOps. We want the team to trust that the source repository describes the desired state very well. If we have enough manual workarounds tacked on to that desired state it becomes much harder to look at the source repository and understand what's going on.&lt;/p&gt;

&lt;p&gt;In addition to the problem of manual workarounds, there can be some other challenges with GitOps having to do with bootstrapping and kickstarting.&lt;/p&gt;

&lt;p&gt;Bootstrapping a GitOps-managed system can be the cause of a lot of navel-gazing and &lt;a href="https://en.wikipedia.org/wiki/Rube_Goldberg_machine"&gt;Rube Goldberginess&lt;/a&gt;. There is usually no practical reason to automate every aspect of the bootstrapping, and it's turtles all the way down so why bother? (I have a strong urge to automate all the things, so this is mostly advice to myself.) An illustrative example: You may want to make an AWS Account Factory, but you wouldn’t write a puppet to automate the root account provisioning.&lt;/p&gt;

&lt;p&gt;It can sometimes be necessary to "kickstart" resources as well, wherein we delete something that's in the desired state definition, like a container or storage volume, so that the automation pipeline can detect the missing resource and recreate it. There are a lot of different reasons this can end up being needed, often tied to implementation details that are at a lower level of abstraction than you're dealing with. (Immutable infrastructure methodologies seem to have a bunch of related problems here.)&lt;/p&gt;

&lt;p&gt;Despite the challenges, I don't think I'll be transitioning out of GitOps any time soon, and in fact I want to manage more things with GitOps. It feels faster to click through the AWS dashboard and make an S3 bucket, but it's fast in the same way writing code without tests feels like saving time. I think there's more opportunity for data and analytics resources to be managed by GitOps, and &lt;a href="https://twitter.com/kelseyhightower/status/1164194470436302848"&gt;treating configuration like data&lt;/a&gt; opens up all kinds of new possibilities.&lt;/p&gt;

&lt;p&gt;Cover Photo by Zach Reiner on Unsplash&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>kubernetes</category>
      <category>cloud</category>
    </item>
    <item>
      <title>A closer look at the new Glitch starter apps</title>
      <author>jenn schiffer</author>
      <pubDate>Wed, 19 May 2021 21:09:03 +0000</pubDate>
      <link>https://dev.to/glitch/a-closer-look-at-the-new-glitch-starter-apps-22ke</link>
      <guid>https://dev.to/glitch/a-closer-look-at-the-new-glitch-starter-apps-22ke</guid>
      <description>&lt;p&gt;&lt;em&gt;The following post was written by Glitch engineer, &lt;a href="https://glitch.com/@cute"&gt;Keith Kurson&lt;/a&gt;. In it, he discusses the tech stack and opinions behind our new lineup of Glitch starter apps. Enjoy, and let us know what you think + create!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We &lt;a href="https://blog.glitch.com/post/remix-a-whole-new-glitch"&gt;just launched generated static sites&lt;/a&gt;! 🎉 This has been an in-flight feature for a long time, and something I’m really excited to finally see out in the world. There are a lot of moving pieces, but the most important thing to take away is this: generated static sites allow you to run a development process and, when you’re done editing, Glitch will run your &lt;code&gt;npm run build&lt;/code&gt; script and upload that optimized build to the glitch.me domain every project gets free.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://glitch.com/create-project"&gt;new starter projects&lt;/a&gt; were created for remixing. This bumps up our two templates (hello-express and hello-webpage) to four (website, node, react, eleventy) with opinionated and minimal versions of each. Thinking through the technology choices for each starter and choosing the packages that we were endorsing was an exciting challenge, and we were able to build on the incredible work the open-source community has been doing since we last created new starters. Let’s walk through the new starters and what powers them to give you a better idea of how they’ll help you get started building your idea in seconds.&lt;/p&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/glitch-hello-node?previewSize=100&amp;amp;path=index.html" alt="glitch-hello-node on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  Node.js
&lt;/h3&gt;

&lt;p&gt;Our previous Node.js starter, hello-express, was in daily use but starting to fall behind modern Node best practices. Looking at the landscape of Node web servers, there was a clear choice: &lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt;. The &lt;a href="https://github.com/fastify/benchmarks/"&gt;speed&lt;/a&gt; gives us the ability to serve more pages, faster, from the glitch containers. It’s also great how &lt;a href="https://www.fastify.io/ecosystem/"&gt;easily extensible&lt;/a&gt; Fastify is. Having &lt;a href="https://www.fastify.io/docs/latest/Validation-and-Serialization/"&gt;validation&lt;/a&gt; built-in didn’t hurt. We are really excited about what Fastify will allow us to build going forward and how to leverage it for Glitch users; plus, we can build &lt;a href="https://www.fastify.io/docs/latest/Plugins/"&gt;Glitch-specific plugins&lt;/a&gt; to interface with our asset management, fully-powered terminal, etc., in the future. There isn’t a lot of boilerplate needed to instantly create an API, so we were able to keep both the opinionated and minimal versions of the Node.js starter fairly straightforward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HMLQP7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tm20kqvf4lh3lecw29s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HMLQP7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tm20kqvf4lh3lecw29s.jpg" alt="screenshot of a benchmark comparison of requests per second showing that Fastify comes out on top. Data: Fastify, 38901 req/sec; Koa, 28576 req/sec; Express, 8458 req/sec; Restify, 24450 req/sec; Hapi, 20302 req/sec."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Above: Fastify benchmark comparison&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#react-generated-static-sites"&gt;
  &lt;/a&gt;
  React + Generated Static Sites
&lt;/h3&gt;

&lt;p&gt;We’ve had trouble in the past getting the React development process to be performant on Glitch servers, so solving the speed problem was the #1 priority. Fortunately, our team didn’t have to do much of the work here and instead could rely on &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; to do the heavy lifting. It starts &lt;strong&gt;immediately&lt;/strong&gt;, supports TypeScript and JSX, and has hot module reload enabled by default. That significantly reduced the surface area we needed to build ourselves to support a lightning-fast React workflow.&lt;/p&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/glitch-hello-react?previewSize=100&amp;amp;path=index.html" alt="glitch-hello-react on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;One way Vite achieves these incredible speeds is by bundling all of your dependencies (in &lt;a href="https://glitch.com/~glitch-hello-react"&gt;~glitch-hello-react&lt;/a&gt; they are: React, Wouter and react-helmet-async) with &lt;a href="https://esbuild.github.io/"&gt;ESBuild&lt;/a&gt;. ESBuild is an extremely fast JavaScript bundler written in Go. Most likely you aren’t changing your dependencies nearly as much as your code, so it can do that once and only build again when you add a new dependency or upgrade the version.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1siNpSQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvy5zn30qed2h5axdwdj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1siNpSQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvy5zn30qed2h5axdwdj.jpg" alt='bar graph captioned "above: the time to do a production bundle of 10 copies of the three.js library from scratch using default settings, including minification and source maps" and each bar represents a build time per tool, with esbuild having the best, lowest time. Data: esbuild, 0.37s; rollup + terser, 36s; webpack 4, 41.91s; webpack 5, 54.5s; parcel 2, 56.71s; parcel 1, 118.51s.'&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;From esbuild.github.io&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you close the editor and stop working on your site, it runs the Vite build process in the background which creates an &lt;a href="https://vitejs.dev/guide/features.html#build-optimizations"&gt;optimized bundle&lt;/a&gt; with Rollup. That means you can take advantage of the wild world of &lt;a href="https://vitejs.dev/guide/using-plugins.html"&gt;Rollup plugins&lt;/a&gt;. We serve this fast production bundle at your free glitch.me domain until you start working in the editor again.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#eleventy-generated-static-sites"&gt;
  &lt;/a&gt;
  Eleventy + Generated Static Sites
&lt;/h3&gt;

&lt;p&gt;Static site generators are all the rage today, and for good reason. &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt; cares about speed, ease of use, and—most importantly—the experience of someone browsing your site. When you run the Eleventy build script, it takes all of your files and creates a bundle that can be loaded by those still using AOL dialup. (Please let us know if you are still using AOL dialup!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PFn7HVbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvckd1rcjjsspixxeyp9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFn7HVbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvckd1rcjjsspixxeyp9.jpg" alt="screenshot from the 11ty site showing the ~glitch-hello-eleventy lighthouse scores of 95, 96, 100, 100"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Above: Eleventy Lighthouse scores&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Eleventy starters list is a scoreboard with Lighthouse scores, pushing Eleventy builders to make a performant site that anyone on any connection can view. As website bundles get more and more bloated, Eleventy pushes for as little JavaScript as possible, and uses it only where you need it.&lt;/p&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/glitch-hello-eleventy?previewSize=100&amp;amp;path=index.html" alt="glitch-hello-eleventy on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;Our &lt;a href=""&gt;~glitch-hello-eleventy&lt;/a&gt; starter has support for blog posts in Markdown, beautiful styling, and instructions for adding more complexity if you need it. The &lt;a href=""&gt;minimal template&lt;/a&gt; was built by the Eleventy team.&lt;/p&gt;

&lt;p&gt;Along with support for Eleventy, we’re supporting all of the Eleventy projects that others have built. Want a high-performance blog with image optimizations and analytics? Check out &lt;a href="https://www.industrialempathy.com/posts/eleventy-high-performance-blog/"&gt;eleventy-high-performance-blog&lt;/a&gt;. Something a little more designed, that uses Tailwind CSS and a JS framework (Alpine.js)? &lt;a href="https://11ta.netlify.app/"&gt;Try 11ta&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#everything-else"&gt;
  &lt;/a&gt;
  Everything else 🎉
&lt;/h3&gt;

&lt;p&gt;These are just our starters using the new generated static site functionality. You can apply the same concepts to a &lt;a href="https://glitch.com/~glitch-hello-vue"&gt;Vue site&lt;/a&gt;, or &lt;a href="https://glitch.com/~glitch-hello-svelte"&gt;Svelte&lt;/a&gt;! Any code you can run in the build script that outputs to a build folder can take advantage of this new functionality. Just add this configuration to your package.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"glitch": {
  "projectType": "generated_static"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will tell Glitch to treat your project as a generated static site so you have a development environment when you want it, and a production site on your glitch.me domain when you’re done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, why not remix one of these starters and &lt;a href="https://glitch.com/create-project"&gt;create a new project&lt;/a&gt; right now?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>eleventy</category>
      <category>fastify</category>
      <category>vite</category>
    </item>
  </channel>
</rss>
