<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to design a rate limiter </title>
      <author>Salah Elhossiny</author>
      <pubDate>Tue, 07 Sep 2021 05:30:30 +0000</pubDate>
      <link>https://dev.to/salah856/how-to-design-a-rate-limiter-27d3</link>
      <guid>https://dev.to/salah856/how-to-design-a-rate-limiter-27d3</guid>
      <description>&lt;p&gt;In a network system, a rate limiter is used to control the rate of traffic sent by a client or a service. In the HTTP world, a rate limiter limits the number of client requests allowed to be sent over a specified period. If the API request count exceeds the threshold defined by the rate limiter, all the excess calls are blocked. Here are a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; A user can write no more than 2 posts per second.&lt;/li&gt;
&lt;li&gt;You can create a maximum of 10 accounts per day from the same IP address.&lt;/li&gt;
&lt;li&gt;You can claim rewards no more than 5 times per week from the same device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before starting the design, we first look at the benefits of using an API rate limiter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prevent resource starvation caused by Denial of Service (DoS) attack [1]. Almost all APIs published by large tech companies enforce some form of rate limiting. For example, Twitter limits the number of tweets to 300 per 3 hours. Google docs APIs have the following default limit: 300 per user per 60 seconds for read requests. A rate limiter prevents DoS attacks, either intentional or unintentional, by blocking the excess calls.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce cost. Limiting excess requests means fewer servers and allocating more resources to high priority APIs. Rate limiting is extremely important for companies that use paid third party APIs. For example, you are charged on a per-call basis for the following external APIs: check credit, make a payment, retrieve health records, etc. Limiting the number of calls is essential to reduce costs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prevent servers from being overloaded. To reduce server load, a rate limiter is used to filter out excess requests caused by bots or users’ misbehavior&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-understand-the-problem-and-establish-design-scope"&gt;
  &lt;/a&gt;
  Step 1 - Understand the problem and establish design scope
&lt;/h2&gt;

&lt;p&gt;Rate limiting can be implemented using different algorithms, each with its pros and cons. The interactions between an interviewer and a candidate help to clarify the type of rate limiters we are trying to build&lt;/p&gt;

&lt;p&gt;Candidate: What kind of rate limiter are we going to design? Is it a client-side rate limiter or server-side API rate limiter?&lt;/p&gt;

&lt;p&gt;Interviewer: Great question. We focus on the server-side API rate limiter.&lt;/p&gt;

&lt;p&gt;Candidate: Does the rate limiter throttle API requests based on IP, the user ID, or other properties?&lt;/p&gt;

&lt;p&gt;Interviewer: The rate limiter should be flexible enough to support different sets of throttle rules.&lt;/p&gt;

&lt;p&gt;Candidate: What is the scale of the system? Is it built for a startup or a big company with a large user base?&lt;br&gt;
Interviewer: The system must be able to handle a large number of requests.&lt;/p&gt;

&lt;p&gt;Candidate: Will the system work in a distributed environment?&lt;/p&gt;

&lt;p&gt;Interviewer: Yes.&lt;/p&gt;

&lt;p&gt;Candidate: Is the rate limiter a separate service or should it be implemented in application code?&lt;br&gt;
Interviewer: It is a design decision up to you.&lt;/p&gt;

&lt;p&gt;Candidate: Do we need to inform users who are throttled?&lt;br&gt;
Interviewer: Yes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;p&gt;Here is a summary of the requirements for the system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accurately limit excessive requests.&lt;/li&gt;
&lt;li&gt;Low latency. The rate limiter should not slow down HTTP response time.&lt;/li&gt;
&lt;li&gt;Use as little memory as possible.&lt;/li&gt;
&lt;li&gt;Distributed rate limiting. The rate limiter can be shared across multiple servers or processes.&lt;/li&gt;
&lt;li&gt;Exception handling. Show clear exceptions to users when their requests are throttled.&lt;/li&gt;
&lt;li&gt;High fault tolerance. If there are any problems with the rate limiter (for example, a cache server goes offline), it does not affect the entire system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-2-propose-highlevel-design-and-get-buyin"&gt;
  &lt;/a&gt;
  Step 2 - Propose high-level design and get buy-in
&lt;/h2&gt;

&lt;p&gt;Let us keep things simple and use a basic client and server model for communication.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#where-to-put-the-rate-limiter"&gt;
  &lt;/a&gt;
  Where to put the rate limiter?
&lt;/h4&gt;

&lt;p&gt;Intuitively, you can implement a rate limiter at either the client or server-side.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Client-side implementation. Generally speaking, client is an unreliable place to enforce rate limiting because client requests can easily be forged by malicious actors. Moreover, we might not have control over the client implementation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server-side implementation. Figure 4-1 shows a rate limiter that is placed on the server- side.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BaNLwIII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120378-d579933f-556e-4cd3-8b63-8ef6d63b4d90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BaNLwIII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120378-d579933f-556e-4cd3-8b63-8ef6d63b4d90.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides the client and server-side implementations, there is an alternative way. Instead of putting a rate limiter at the API servers, we create a rate limiter middleware, which throttles requests to your APIs. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdZwKFZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120384-74c77aff-fda1-4cd5-b0ce-c712b840e0aa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdZwKFZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120384-74c77aff-fda1-4cd5-b0ce-c712b840e0aa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assume our API allows 2 requests per second, and a client sends 3 requests to the server within a second. The first two requests are routed to API servers. However, the rate limiter middleware throttles the third request and returns a HTTP status code 429. The HTTP 429 response status code indicates a user has sent too many requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yehSI4bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120396-f3dd7e42-df2d-4c44-bf7b-3bdbfde5cbdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yehSI4bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120396-f3dd7e42-df2d-4c44-bf7b-3bdbfde5cbdf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cloud microservices [4] have become widely popular and rate limiting is usually implemented within a component called API gateway. API gateway is a fully managed&lt;br&gt;
service that supports rate limiting, SSL termination, authentication, IP whitelisting, servicing static content, etc. For now, we only need to know that the API gateway is a middleware that supports rate limiting.&lt;/p&gt;

&lt;p&gt;While designing a rate limiter, an important question to ask ourselves is: where should the rater limiter be implemented, on the server-side or in a gateway? There is no absolute answer.&lt;/p&gt;

&lt;p&gt;It depends on your company’s current technology stack, engineering resources, priorities, goals, etc. Here are a few general guidelines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Evaluate your current technology stack, such as programming language, cache service, etc. Make sure your current programming language is efficient to implement rate limiting on the server-side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Identify the rate limiting algorithm that fits your business needs. When you implement everything on the server-side, you have full control of the algorithm. However, your choice might be limited if you use a third-party gateway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you have already used microservice architecture and included an API gateway in the design to perform authentication, IP whitelisting, etc., you may add a rate limiter to the API gateway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Building your own rate limiting service takes time. If you do not have enough engineering resources to implement a rate limiter, a commercial API gateway is a better option.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#algorithms-for-rate-limiting"&gt;
  &lt;/a&gt;
  Algorithms for rate limiting
&lt;/h2&gt;

&lt;p&gt;Rate limiting can be implemented using different algorithms, and each of them has distinct pros and cons. Even though this chapter does not focus on algorithms, understanding them at high-level helps to choose the right algorithm or combination of algorithms to fit our use cases. Here is a list of popular algorithms:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;• Token bucket
• Leaking bucket
• Fixed window counter
• Sliding window log
• Sliding window counter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#token-bucket-algorithm"&gt;
  &lt;/a&gt;
  Token bucket algorithm
&lt;/h4&gt;

&lt;p&gt;The token bucket algorithm is widely used for rate limiting. It is simple, well understood andcommonly used by internet companies. Both Amazon and Stripe use this algorithm to throttle their API requests.&lt;/p&gt;

&lt;p&gt;The token bucket algorithm work as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A token bucket is a container that has pre-defined capacity. &lt;/li&gt;
&lt;li&gt;Tokens are put in the bucket at preset rates periodically. &lt;/li&gt;
&lt;li&gt;Once the bucket is full, no more tokens are added. &lt;/li&gt;
&lt;li&gt;The refiller puts 2 tokens into the bucket every second. Once the bucket is full, extra tokens will overflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GX_4o_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120508-e55a0136-e72c-448c-a84f-bff662be24d7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GX_4o_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120508-e55a0136-e72c-448c-a84f-bff662be24d7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#leaking-bucket-algorithm"&gt;
  &lt;/a&gt;
  Leaking bucket algorithm
&lt;/h4&gt;

&lt;p&gt;The leaking bucket algorithm is similar to the token bucket except that requests are processed at a fixed rate. It is usually implemented with a first-in-first-out (FIFO) queue. The algorithm works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a request arrives, the system checks if the queue is full. If it is not full, the request is added to the queue.&lt;/li&gt;
&lt;li&gt;Otherwise, the request is dropped.&lt;/li&gt;
&lt;li&gt;Requests are pulled from the queue and processed at regular intervals.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIUYe5JI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132173606-16b92216-374c-4b89-9356-e807dae1618e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIUYe5JI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132173606-16b92216-374c-4b89-9356-e807dae1618e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leaking bucket algorithm takes the following two parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bucket size: it is equal to the queue size. The queue holds the requests to be processed at a fixed rate.&lt;/li&gt;
&lt;li&gt;Outflow rate: it defines how many requests can be processed at a fixed rate, usually in seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shopify, an ecommerce company, uses leaky buckets for rate-limiting&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory efficient given the limited queue size.&lt;/li&gt;
&lt;li&gt;Requests are processed at a fixed rate therefore it is suitable for use cases that a stable outflow rate is needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A burst of traffic fills up the queue with old requests, and if they are not processed in time, recent requests will be rate limited.&lt;/li&gt;
&lt;li&gt;There are two parameters in the algorithm. It might not be easy to tune them properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#fixed-window-counter-algorithm"&gt;
  &lt;/a&gt;
  Fixed window counter algorithm
&lt;/h4&gt;

&lt;p&gt;Fixed window counter algorithm works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The algorithm divides the timeline into fix-sized time windows and assign a counter for each window.&lt;/li&gt;
&lt;li&gt;Each request increments the counter by one.&lt;/li&gt;
&lt;li&gt;Once the counter reaches the pre-defined threshold, new requests are dropped until a new time window starts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPO38c-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132173976-d45e74e0-b632-4508-a6e5-360126d7520b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPO38c-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132173976-d45e74e0-b632-4508-a6e5-360126d7520b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A major problem with this algorithm is that a burst of traffic at the edges of time windows could cause more requests than allowed quota to go through.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory efficient.&lt;/li&gt;
&lt;li&gt;Easy to understand.&lt;/li&gt;
&lt;li&gt;Resetting available quota at the end of a unit time window fits certain use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spike in traffic at the edges of a window could cause more requests than the allowed quota to go through.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#sliding-window-log-algorithm"&gt;
  &lt;/a&gt;
  Sliding window log algorithm
&lt;/h4&gt;

&lt;p&gt;The fixed window counter algorithm has a major issue: it allows more requests to go through at the edges of a window. The sliding window log algorithm fixes the issue. It works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The algorithm keeps track of request timestamps. Timestamp data is usually kept in cache, such as sorted sets of Redis. &lt;/li&gt;
&lt;li&gt;When a new request comes in, remove all the outdated timestamps. Outdated timestamps are defined as those older than the start of the current time window.&lt;/li&gt;
&lt;li&gt;Add timestamp of the new request to the log.&lt;/li&gt;
&lt;li&gt;If the log size is the same or lower than the allowed count, a request is accepted. Otherwise, it is rejected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjzhgQfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132174782-401a4eeb-321b-40e1-94ce-1a6e7d4989a7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjzhgQfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132174782-401a4eeb-321b-40e1-94ce-1a6e7d4989a7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, the rate limiter allows 2 requests per minute. Usually, Linux timestamps are stored in the log. However, human-readable representation of time is used in our example for better readability.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The log is empty when a new request arrives at 1:00:01. Thus, the request is allowed.• A new request arrives at 1:00:30, the timestamp 1:00:30 is inserted into the log. After the insertion, the log size is 2, not larger than the allowed count. Thus, the request is allowed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A new request arrives at 1:00:50, and the timestamp is inserted into the log. After the insertion, the log size is 3, larger than the allowed size 2. Therefore, this request is rejected even though the timestamp remains in the log.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A new request arrives at 1:01:40. Requests in the range [1:00:40,1:01:40) are within the latest time frame, but requests sent before 1:00:40 are outdated. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two outdated timestamps, 1:00:01 and 1:00:30, are removed from the log. After the remove operation, the log size becomes 2; therefore, the request is accepted.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate limiting implemented by this algorithm is very accurate. In any rolling window, requests will not exceed the rate limit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The algorithm consumes a lot of memory because even if a request is rejected, its timestamp might still be stored in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#sliding-window-counter-algorithm"&gt;
  &lt;/a&gt;
  Sliding window counter algorithm
&lt;/h4&gt;

&lt;p&gt;The sliding window counter algorithm is a hybrid approach that combines the fixed window counter and sliding window log. The algorithm can be implemented by two different approaches. We will explain one implementation in this section and provide reference for the other implementation at the end of the section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qeemt3XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132175266-5fd0470d-e71a-441a-a058-81d0dd942b49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qeemt3XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132175266-5fd0470d-e71a-441a-a058-81d0dd942b49.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assume the rate limiter allows a maximum of 7 requests per minute, and there are 5 requests in the previous minute and 3 in the current minute. For a new request that arrives at a 30% position in the current minute, the number of requests in the rolling window is calculated using the following formula:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requests in current window + requests in the previous window * overlap percentage of the rolling window and previous window.&lt;/li&gt;
&lt;li&gt;Using this formula, we get 3 + 5 * 0.7% = 6.5 request. Depending on the use case, the number can either be rounded up or down. &lt;/li&gt;
&lt;li&gt;In our example, it is rounded down to 6. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the rate limiter allows a maximum of 7 requests per minute, the current request can go through. However, the limit will be reached after receiving one more request.&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It smooths out spikes in traffic because the rate is based on the average rate of the previous window.&lt;/li&gt;
&lt;li&gt;Memory efficient.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It only works for not-so-strict look back window. It is an approximation of the actual rate because it assumes requests in the previous window are evenly distributed. However, this problem may not be as bad as it seems. &lt;/li&gt;
&lt;li&gt;According to experiments done by Cloudflare, only 0.003% of requests are wrongly allowed or rate limited among 400 million requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#highlevel-architecture"&gt;
  &lt;/a&gt;
  High-level architecture
&lt;/h3&gt;

&lt;p&gt;The basic idea of rate limiting algorithms is simple. At the high-level, we need a counter to keep track of how many requests are sent from the same user, IP address, etc. If the counter is larger than the limit, the request is disallowed. Where shall we store counters? Using the database is not a good idea due to slowness of disk access. In-memory cache is chosen because it is fast and supports time-based expiration strategy. For instance, Redis is a popular option to implement rate limiting. It is an in- memory store that offers two commands: INCR and EXPIRE.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;INCR: It increases the stored counter by 1.&lt;/li&gt;
&lt;li&gt;EXPIRE: It sets a timeout for the counter. If the timeout expires, the counter is automatically deleted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNsqnMsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132176124-60d39b6a-3532-452e-81f3-cd08d9d9587a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNsqnMsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132176124-60d39b6a-3532-452e-81f3-cd08d9d9587a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The client sends a request to rate limiting middleware.&lt;/li&gt;
&lt;li&gt;Rate limiting middleware fetches the counter from the corresponding bucket in Redis andchecks if the limit is reached or not.

&lt;ul&gt;
&lt;li&gt;If the limit is reached, the request is rejected.&lt;/li&gt;
&lt;li&gt;If the limit is not reached, the request is sent to API servers. Meanwhile, the system increments the counter and saves it back to Redis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-3-design-deep-dive"&gt;
  &lt;/a&gt;
  Step 3 - Design deep dive
&lt;/h3&gt;

&lt;p&gt;The high-level design does not answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How are rate limiting rules created? Where are the rules stored?&lt;/li&gt;
&lt;li&gt;How to handle requests that are rate limited?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this section, we will first answer the questions regarding rate limiting rules and then go over the strategies to handle rate-limited requests. Finally, we will discuss rate limiting in distributed environment, a detailed design, performance optimization and monitoring.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#rate-limiting-rules"&gt;
  &lt;/a&gt;
  Rate limiting rules
&lt;/h4&gt;

&lt;p&gt;Lyft open-sourced their rate-limiting component. We will peek inside of the component and look at some examples of rate limiting rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;messaging&lt;/span&gt;
&lt;span class="na"&gt;descriptors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;message_type&lt;/span&gt;
  &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;marketing&lt;/span&gt;
  &lt;span class="na"&gt;rate_limit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;unit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;day&lt;/span&gt;
    &lt;span class="na"&gt;requests_per_unit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the system is configured to allow a maximum of 5 marketing messages per day. Here is another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auth&lt;/span&gt;
&lt;span class="na"&gt;descriptors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auth_type&lt;/span&gt;
  &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;login&lt;/span&gt;
  &lt;span class="na"&gt;rate_limit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;unit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minute&lt;/span&gt;
    &lt;span class="na"&gt;requests_per_unit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#exceeding-the-rate-limit"&gt;
  &lt;/a&gt;
  Exceeding the rate limit
&lt;/h4&gt;

&lt;p&gt;In case a request is rate limited, APIs return a HTTP response code 429 (too many requests) to the client. Depending on the use cases, we may enqueue the rate-limited requests to be processed later. For example, if some orders are rate limited due to system overload, we may keep those orders to be processed later.&lt;/p&gt;

&lt;p&gt;How does a client know whether it is being throttled? And how does a client know the number of allowed remaining requests before being throttled? The answer lies in HTTP response headers. The rate limiter returns the following HTTP headers to clients:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X-Ratelimit-Remaining: The remaining number of allowed requests within the window.

X-Ratelimit-Limit: It indicates how many calls the client can make per time window.

X-Ratelimit-Retry-After: The number of seconds to wait until you can make a request again without being throttled.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When a user has sent too many requests, a 429 too many requests error and X-Ratelimit-Retry-After header are returned to the client.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imuIIDlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132287806-04de0d48-0056-485e-b809-0e06ddec791d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imuIIDlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132287806-04de0d48-0056-485e-b809-0e06ddec791d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rules are stored on the disk. Workers frequently pull rules from the disk and store them in the cache.&lt;/li&gt;
&lt;li&gt;When a client sends a request to the server, the request is sent to the rate limiter middleware first.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rate limiter middleware loads rules from the cache. It fetches counters and last request timestamp from Redis cache. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Based on the response, the rate limiter decides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the request is not rate limited, it is forwarded to API servers.&lt;/li&gt;
&lt;li&gt;if the request is rate limited, the rate limiter returns 429 too many requests error to the client. &lt;/li&gt;
&lt;li&gt;In the meantime, the request is either dropped or forwarded to the queue.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#monitoring"&gt;
  &lt;/a&gt;
  Monitoring
&lt;/h3&gt;

&lt;p&gt;After the rate limiter is put in place, it is important to gather analytics data to check whether the rate limiter is effective. Primarily, we want to make sure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The rate limiting algorithm is effective.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The rate limiting rules are effective.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example, if rate limiting rules are too strict, many valid requests are dropped. In this case, we want to relax the rules a little bit. &lt;/li&gt;
&lt;li&gt;In another example, we notice our rate limiter becomes ineffective when there is a sudden increase in traffic like flash sales. &lt;/li&gt;
&lt;li&gt;In this scenario, we may replace the algorithm to support burst traffic. Token bucket is a good fit here.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Avoid being rate limited. Design your client with best practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use client cache to avoid making frequent API calls.&lt;/li&gt;
&lt;li&gt;Understand the limit and do not send too many requests in a short time frame.&lt;/li&gt;
&lt;li&gt;Include code to catch exceptions or errors so your client can gracefully recover fromexceptions.&lt;/li&gt;
&lt;li&gt;Add sufficient back off time to retry logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/System-Design-Interview-insiders-Second/dp/B08CMF2CQF"&gt; System Design Interview Book &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rate Limiting in Javascript with a Token Bucket: &lt;br&gt;
&lt;a href="https://kendru.github.io/javascript/2018/12/28/rate-limiting-in-javascript-with-a-token-bucket/"&gt;https://kendru.github.io/javascript/2018/12/28/rate-limiting-in-javascript-with-a-token-bucket/&lt;/a&gt;&lt;br&gt;
Rate-limiting strategies and techniques: &lt;a href="https://cloud.google.com/solutions/rate-limiting-strategies-techniques"&gt;https://cloud.google.com/solutions/rate-limiting-strategies-techniques&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter rate limits: &lt;a href="https://developer.twitter.com/en/docs/basics/rate-limits"&gt;https://developer.twitter.com/en/docs/basics/rate-limits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google docs usage limits: &lt;a href="https://developers.google.com/docs/api/limits"&gt;https://developers.google.com/docs/api/limits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IBM microservices: &lt;a href="https://www.ibm.com/cloud/learn/microservices"&gt;https://www.ibm.com/cloud/learn/microservices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Throttle API requests for better throughput: &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html"&gt;https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stripe rate limiters: &lt;a href="https://stripe.com/blog/rate-limiters"&gt;https://stripe.com/blog/rate-limiters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shopify REST Admin API rate limits: &lt;a href="https://help.shopify.com/en/api/reference/rest-admin-api-rate-limits"&gt;https://help.shopify.com/en/api/reference/rest-admin-api-rate-limits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Better Rate Limiting With Redis Sorted Sets: &lt;a href="https://engineering.classdojo.com/blog/2015/02/06/rolling-rate-limiter/"&gt;https://engineering.classdojo.com/blog/2015/02/06/rolling-rate-limiter/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;System Design — Rate limiter and Data modelling:&lt;a href="https://medium.com/@saisandeepmopuri/system-design-rate-limiter-and-data-modelling-9304b0d18250"&gt;https://medium.com/@saisandeepmopuri/system-design-rate-limiter-and-data-modelling-9304b0d18250&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How we built rate limiting capable of scaling to millions of domains: &lt;a href="https://blog.cloudflare.com/counting-things-a-lot-of-different-things/"&gt;https://blog.cloudflare.com/counting-things-a-lot-of-different-things/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redis website: &lt;a href="https://redis.io/"&gt;https://redis.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lyft rate limiting: &lt;a href="https://github.com/lyft/ratelimit"&gt;https://github.com/lyft/ratelimit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scaling your API with rate limiters: &lt;a href="https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#request-rate-limiter"&gt;https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#request-rate-limiter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is edge computing: &lt;a href="https://www.cloudflare.com/learning/serverless/glossary/what-is-edge-computing/"&gt;https://www.cloudflare.com/learning/serverless/glossary/what-is-edge-computing/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rate Limit Requests with Iptables: &lt;a href="https://blog.programster.org/rate-limit-requests-with-iptables"&gt;https://blog.programster.org/rate-limit-requests-with-iptables&lt;/a&gt;&lt;/p&gt;

</description>
      <category>systems</category>
      <category>architecture</category>
      <category>design</category>
    </item>
    <item>
      <title>10 Free Online Resume Builders for professional career</title>
      <author>NITESH TALIYAN</author>
      <pubDate>Tue, 07 Sep 2021 05:08:14 +0000</pubDate>
      <link>https://dev.to/niteshtaliyan/10-free-online-resume-builders-for-professional-career-46o8</link>
      <guid>https://dev.to/niteshtaliyan/10-free-online-resume-builders-for-professional-career-46o8</guid>
      <description>&lt;p&gt;When it comes to building a resume, I believe less is more. Content is way more important than the template. So whenever I face rejection, I would rather spend my time and energy building new projects, researching, or finding part-time jobs to polish my skills than focus too much on resume aesthetics. Here are some resume builders you can use to build your resume in no time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oRm0eL_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e997aptg31gzdrebrydx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oRm0eL_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e997aptg31gzdrebrydx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TL;DR:&lt;br&gt;
&lt;em&gt;MS Word&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Canva&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Resumake.io&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Novoresume&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Resume-now&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Resume Genius&lt;/em&gt;&lt;br&gt;
&lt;em&gt;MyPerfectResume&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Zety (free resources only)&lt;/em&gt;&lt;br&gt;
&lt;em&gt;VisualCV&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Indeed.com&lt;/em&gt;&lt;/p&gt;

</description>
      <category>resume</category>
      <category>requestforpost</category>
      <category>portfolio</category>
      <category>career</category>
    </item>
    <item>
      <title>THE 6 BEST SITES TO LEARN JAVASCRIPT FOR FREE</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Tue, 07 Sep 2021 04:52:15 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/the-6-best-sites-to-learn-javascript-for-free-343c</link>
      <guid>https://dev.to/koulurunandakishorereddy/the-6-best-sites-to-learn-javascript-for-free-343c</guid>
      <description>&lt;p&gt;JavaScript is everywhere, so we wanted to make it easier for JavaScript learners to choose the resources that will empower them as they progress through their learning journey. Sites like these are incredible opportunities to develop your skills and share them.&lt;/p&gt;

&lt;h1&gt;1 . JavaScript Algorithms and Data Structures  &lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered in This Course:&lt;/b&gt; JavaScript ES6, Regular Expressions, Data Structures, Debugging&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAj0CDpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391318518/wYVcp_0wW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAj0CDpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391318518/wYVcp_0wW.png" alt="u09kss7fb8l61.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Certification : &lt;/b&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;freecodecamp.org&lt;/a&gt;&lt;a&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;2 . JavaScript Fundamentals&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered in This Course:&lt;/b&gt; HTML basics, Variables,Operators,Errors,Custom Objects,Popups&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcb8v_Cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628392365543/IbH8_nYAs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcb8v_Cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628392365543/IbH8_nYAs.png" alt="Screenshot (122) (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Course : &lt;/b&gt; &lt;a href="https://www.udemy.com/course/javascriptfundamentals/"&gt;udemy.com&lt;/a&gt;&lt;a&gt;  &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;3 . The Modern JavaScript Tutorial &lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;Fundamentals,Code Quality,Objects,Data Types,Functions,Prototypes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--53Ws0jwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398562511/EPS4978n8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--53Ws0jwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398562511/EPS4978n8.png" alt="the-modern-javascript-tutorial.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Blog :&lt;/b&gt;&lt;a href="https://javascript.info/"&gt;javascript.info&lt;/a&gt;&lt;a&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;4 . Eloquent JavaScript &lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;Values,Types,Operators,Functions,HTTP,Modules,Node.js,Projects&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFyv6Mzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398901302/SF3i_lkHX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFyv6Mzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398901302/SF3i_lkHX.png" alt="eloquent-javascript.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Ebook : &lt;/b&gt; &lt;a href="https://eloquentjavascript.net/"&gt;eloquentjavascript&lt;/a&gt;&lt;a&gt;  &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;5 . A re-introduction to JavaScript&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;Numbers,Strings,Other types,Variables,Operators,Control structures,Objects,Arrays,Functions,Custom objects&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOsKvkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628399481121/yDmczQLbe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOsKvkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628399481121/yDmczQLbe.jpeg" alt="0452-05-reintroduction-javascript.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Blog :&lt;/b&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript"&gt;developer.mozilla.org&lt;/a&gt;&lt;a&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;6 . Learn modern JavaScript&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;ES6 from scratch,var &amp;amp; let,const,Javascript scope,Mutation,Object.freeze(),Arrow functions,High order functions,Default parameters,Rest operator,Spread operator,Object destructuring,Array destructuring,
Constructor functions,Declarative functions, ES6 classes, Getters and setters, ES6 modules, Import &amp;amp; Export&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAIIL4f3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628400176178/tE-iVWFxF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAIIL4f3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628400176178/tE-iVWFxF.png" alt="js.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;interactive : &lt;/b&gt;&lt;a href="https://scrimba.com/learn/es6"&gt;scrimba.com&lt;/a&gt;&lt;a&gt;  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is your favourite website to learn JavaScript? Let us know down in the comments below!&lt;/p&gt;



&lt;br&gt;
To all my readers out here I have an interesting thing to share with you. There's a hackathon going on there. For more information, keep reading.

&lt;p&gt;A hackathon might be an alternative for you if you are a computer science student or an upcoming developer. The benefit of participating in an online or physical hackathon is that you can develop coding skills, work with developers, develop a resume, and meet peers.&lt;/p&gt;

&lt;p&gt;I recommend Hack This Fall 2.0 if you are interested in such an event. The event takes place between 22nd and 24th of October. A 48-Hour Virtual Hackathon is taking this to the next level this year, with the aim of promoting hackers and helping them to develop new ideas and prototypes in various domains. A part of their mission is also to support beginners to hack our society and bring a positive change.&lt;/p&gt;

&lt;p&gt;If you want to register for this wonderful hackathon you can do it:&lt;a href="https://hackthisfall.devpost.com/"&gt;click here&lt;/a&gt;.don't forget to use my referral code : HTFHE068. Over a thousand hackers have already signed up.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Divide and Conquer! An approach to software engineering project management.</title>
      <author>Davide de Paolis</author>
      <pubDate>Tue, 07 Sep 2021 04:51:05 +0000</pubDate>
      <link>https://dev.to/dvddpl/divide-and-conquer-an-approach-to-software-engineering-project-management-2e0n</link>
      <guid>https://dev.to/dvddpl/divide-and-conquer-an-approach-to-software-engineering-project-management-2e0n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#divide-et-impera"&gt;
  &lt;/a&gt;
  Divide et Impera!
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Divide and conquer!&lt;/em&gt; : in politics and sociology, it is &lt;em&gt;a strategy of gaining and maintaining power by breaking up larger concentrations of power into pieces that individually have less power than the one implementing the strategy.&lt;/em&gt; &lt;a href="https://en.wikipedia.org/wiki/Divide_and_rule"&gt;wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, split the forces of your enemy into smaller groups or individuals, which are easier to control and defeat.&lt;/p&gt;

&lt;p&gt;Wait,  what has that to do with project management in software engineering?&lt;/p&gt;

&lt;p&gt;Do I mean to &lt;strong&gt;isolate and weaken the individual team members&lt;/strong&gt; so that they can be easily &lt;em&gt;ruled&lt;/em&gt;, sorry, &lt;strong&gt;managed&lt;/strong&gt;, and that the goals can be achieved without any form of dissent?&lt;/p&gt;

&lt;p&gt;Of course, not!&lt;/p&gt;

&lt;p&gt;But how could I achieve the goal that was assigned to the team I was working with - 20 developers, more than 1 million lines of code, more than 15 thousand errors, hundreds of features to be rewritten - if not with  Divide and Conquer!?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Software development is the act of breaking a complex problem down into smaller problems and composing simple solutions to form a complete solution to the complex problem&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is actually true for any big task, it helps if you break the task down into smaller, more manageable parts. &lt;strong&gt;Little piece by little piece, the big task is less intimidating.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“How do you eat an elephant?"&lt;/p&gt;

&lt;p&gt;“Easy — One bite at a time”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#so-what-did-we-do-in-practice"&gt;
  &lt;/a&gt;
  So what did we do in practice?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;we individuated 4 &lt;strong&gt;macro-areas of intervention&lt;/strong&gt; within the project/codebase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;we split the team of 20 + people into 4 &lt;strong&gt;squads&lt;/strong&gt; who could focus on one of these 4 macro areas independently - almost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;we run an &lt;strong&gt;analysis&lt;/strong&gt; on features and errors, aggregated them, and then split them into categories that were assigned to the different squads and individual members who were in charge of that category.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;we made iterations more frequent.  instead of monthly deadlines, we were reassessing our status weekly ( at the beginning we did not even have anything “showable” if not that the number of bugs (defects) and errors was decreasing…) and eventually, &lt;strong&gt;re-adjust course&lt;/strong&gt;.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not everything though could be broken down in smaller bits, nor was it advisable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-did-we-not-divide-instead"&gt;
  &lt;/a&gt;
  Where did we not divide instead?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Decision making: &lt;strong&gt;devs can be solitary animals&lt;/strong&gt;:  but we didn’t want to have a developer working on his task alone, just to realise after days or weeks the solution was wrong or did not fit the big picture.   So,  we had iterative coding design sessions to discuss solutions collectively ( within the small groups though).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Knowledge sharing:  weekly present some interesting solutions or learnings to other team members.&lt;br&gt;
We dismantled &lt;strong&gt;Silos&lt;/strong&gt; and &lt;strong&gt;Towers of Knowledge&lt;/strong&gt;: especially with this high churn rate - we could not afford to have someone be the only one responsible for doing things or knowing how to do certain things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Helping each other:   &lt;strong&gt;devs are stubborn and like challenges&lt;/strong&gt; - but we could not afford people being stuck for hours, or days on a problem - so we enforced “asking for help, or seeking people in need”  30 minutes of struggle → shout it out to the team:  &lt;strong&gt;maybe someone already went through a similar problem and already has a solution&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, &lt;strong&gt;by combining an atomic and aggressive approach to the problem with a mutualistic approach to the people&lt;/strong&gt;, we were able to reduce the scope and increase productivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/dvddpl/the-biggest-advice-i-could-give-to-another-developer-3jme"&gt;By working on a smaller scope&lt;/a&gt;, we could ignore the rest.&lt;br&gt;
&lt;a href="https://dev.to/dvddpl/you-have-only-limited-time-and-attention-eliminate-the-noise-4f0b"&gt;By avoiding distractions&lt;/a&gt; we could improve focus &lt;br&gt;
By having a shorter feedback loop -  &lt;em&gt;"Do something, Make sure it is ok, Rework or Move onto the next task"&lt;/em&gt; -  we improved our speed&lt;br&gt;
By sharing the struggles, celebrating the progress, sharing knowledge, and showing help to each other, we &lt;strong&gt;fought frustration, insecurity&lt;/strong&gt; and a sense of impotence in front of a massive task.&lt;br&gt;
And in the end, despite all my predictions, we made it.&lt;/p&gt;

&lt;p&gt;As Francis of Assisi said: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Start by doing what’s necessary; then do what’s possible, and suddenly you are doing the impossible.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;This is the transcript of a speech I gave at my local &lt;a href="https://www.toastmasters.org/"&gt;Toastmasters Club&lt;/a&gt; (an international organization to practice public speaking and leadership skills) for Level 4 of my &lt;a href="https://www.toastmasters.org/pathways-overview/pathways-innovative-planning-path"&gt;Innovative Planning Pathways&lt;/a&gt; where I had to write and present a speech about my experience in a project. &lt;/p&gt;

&lt;p&gt;You can consider it a &lt;strong&gt;fictional story&lt;/strong&gt;, although a lot of what is described there comes from my &lt;strong&gt;direct experience&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;I hope you find it interesting and of some help.&lt;/p&gt;

</description>
      <category>career</category>
      <category>publicspeaking</category>
      <category>development</category>
      <category>projectmanagement</category>
    </item>
    <item>
      <title>Linked List Questions: Detect a Cycle - Set or Hashtable Approach</title>
      <author>Kathan Vakharia</author>
      <pubDate>Tue, 07 Sep 2021 04:33:17 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/linked-list-questions-detect-a-cycle-set-or-hashtable-approach-5gb2</link>
      <guid>https://dev.to/kathanvakharia/linked-list-questions-detect-a-cycle-set-or-hashtable-approach-5gb2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#video-explanation"&gt;
  &lt;/a&gt;
  Video Explanation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8zVzUl7v-ds"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Note: In the youtube video above, I have explained 2 approaches. In this post, I'll explain the first one i.e. first 8 mins of the video.&lt;/p&gt;

&lt;p&gt;If you are more into reading, continue with the blog. I would still suggest you at least download the annotations that I did in the video :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/linked-list-cycle/"&gt;https://leetcode.com/problems/linked-list-cycle/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given &lt;code&gt;head&lt;/code&gt;, the head of a linked list, determine if the linked list has a cycle in it.&lt;/p&gt;

&lt;p&gt;There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the &lt;code&gt;next&lt;/code&gt; pointer.&lt;/p&gt;

&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if there is a cycle in the linked list. Otherwise, return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Give yourself at least 15-20 mins to figure out the solution :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;The idea here is to traverse the list, and while doing that store the nodes in a &lt;code&gt;set&lt;/code&gt;. If there's a cycle present, we'll try to insert a node(the &lt;em&gt;starting point&lt;/em&gt; of cycle) for the &lt;em&gt;second&lt;/em&gt; time, and as a &lt;code&gt;set&lt;/code&gt; cannot have &lt;strong&gt;duplicate&lt;/strong&gt; values, we can happily stop the algorithm by saying, YES there's a cycle in list. On the contrary, if a cycle is not present, we'll reach the end of the list and stop the algorithm by saying NO there's no cycle in the list.&lt;/p&gt;

&lt;p&gt;Here's the pseudo code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ListNode Node = head
Set s
while(Node != NULL)
    if(s.contains(Node)) // a node is encountered second time
        return true 
    else
        s.insert(Node)
        Node = Node.next
//if cycle was not found ie. 'if' condition was never met
return false

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🗒 We are creating a &lt;em&gt;set of node's addresses&lt;/em&gt; here NOT the node's values, Why? because node's addresses are &lt;strong&gt;unique&lt;/strong&gt; in the list and values are not. For Example, 1→2→3→3→NULL doesn't contain a cycle but if we go by storing values in the set, the algorithm will say it does contain a cycle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why-raw-set-endraw-important"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;set&lt;/code&gt;? (IMPORTANT)
&lt;/h3&gt;

&lt;p&gt;Problem-solving is not just about solving questions, it is also about deciding proper data structure. Some of you may have this question, why did we use set here and not any other data structure?&lt;/p&gt;

&lt;p&gt;Our need here is to perform two operations: &lt;em&gt;store&lt;/em&gt; and &lt;em&gt;lookup(read)&lt;/em&gt; from our data structure in every iteration and as a &lt;code&gt;set&lt;/code&gt; is implemented as &lt;code&gt;hashtable&lt;/code&gt; in programming languages, we can do &lt;strong&gt;O(1)&lt;/strong&gt; &lt;em&gt;insertion&lt;/em&gt; as well as &lt;em&gt;lookup&lt;/em&gt;. So although you can use any data structure of your choice, &lt;code&gt;set&lt;/code&gt; a.k.a &lt;code&gt;hashtable&lt;/code&gt;  is the best choice!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you still have any doubts, you can refer the video explanation :)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linked-list"&gt;
  &lt;/a&gt;
  Definition of Linked List
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* A note about 'count(Key)'
*Searches the container for elements whose value is k and returns 
*  the number of elements found
*Because unordered_set containers do not allow for duplicate keys,
*   this means that the function returns 1 if an element with 
*   that value exists in the container, and zero otherwise.
*/&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;hasCycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;unordered_set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nodes_seen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes_seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;nodes_seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;N&lt;/code&gt;: Length of Linked List&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-on"&gt;
  &lt;/a&gt;
  Time Complexity: O(N)
&lt;/h3&gt;

&lt;p&gt;We are traversing the entire list and at every iteration, constant-time operations are done. ( and one more time if a cycle exists but asymptotically, it's still O(N) )&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-on"&gt;
  &lt;/a&gt;
  Space Complexity: O(N)
&lt;/h3&gt;

&lt;p&gt;We are storing every node exactly once.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Backend Developer Roadmap 2021 | How to Become a Backend Developer</title>
      <author>Pranav</author>
      <pubDate>Tue, 07 Sep 2021 02:52:15 +0000</pubDate>
      <link>https://dev.to/codedamn/backend-developer-roadmap-2021-how-to-become-a-backend-developer-3flg</link>
      <guid>https://dev.to/codedamn/backend-developer-roadmap-2021-how-to-become-a-backend-developer-3flg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-http"&gt;
  &lt;/a&gt;
  1) HTTP
&lt;/h2&gt;

&lt;p&gt;HTTP stands for HyperText Transfer Protocol, a widely understood acronym, but do you know what this protocol is and why it is required. Think that you are only given a terminal with Curl or NetCat installed. Will you be able to send a raw HTTP Request without any help? It doesn't mean that you have to memorize the format of an HTTP Request. It simply means whether you are capable of sending a request without any help.‌&lt;br&gt;
‌You must have a semantic understanding of HTTP Object &amp;amp; its method, status code, headers &amp;amp; body of an HTTP Object. You should understand the different types of content types in the response headers. You should not only understand the syntax level, but you must also understand the technical level about what HTTP is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-rest"&gt;
  &lt;/a&gt;
  2) REST
&lt;/h2&gt;

&lt;p&gt;REST is another popular term among beginner devs that stands for Representational State Transfer, but it is essential to understand to perform HTTP requests better. While many people continue to use the terms REST and HTTP interchangeably, the truth is that they are two different things. REST refers to a set of attributes of a particular architectural style, while HTTP is a well-defined protocol that happens to exhibit many features of a RESTful system.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lH1QNxYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi9y3n8astreoq4enj3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lH1QNxYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi9y3n8astreoq4enj3k.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
REST architecture states different status codes and using the correct method names. You should be familiar with the different types of HTTP Methods and their use cases. The most important HTTP methods are GET, POST, PUT &amp;amp; DELETE. Also, you should know about the JSON response from the server and how to handle it.‌&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9p20GnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acat0lt3uv35zhq3a5dy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9p20GnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acat0lt3uv35zhq3a5dy.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Similarly, you can also learn GraphQL. It is technically not an alternative to REST but has advantageous features over REST. While using GraphQL, you don't need to care about the different HTTP Methods. Your focus will be on the Schema of the GraphQL Query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-programming-language"&gt;
  &lt;/a&gt;
  3) Programming Language
&lt;/h2&gt;

&lt;p&gt;The most important is to have a solid grip on a programming language that can run on a server. This does not include HTML as it is a Markup language and not a programming language. You can learn many languages here, namely, Node.JS (a runtime environment to run JavaScript in the server), Python, Rust, PHP &amp;amp; Golang. These are the most used languages for the back-end of your web application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KM8VxmSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygl0koaspkkym5adfb2d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KM8VxmSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygl0koaspkkym5adfb2d.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
A solid understanding of programming languages is very necessary. This doesn't mean learning how the loops, variables, functions works. This also includes creating HTTP requests &amp;amp; servers using the programming language and having good fundamentals in the networking (which is covered in the next point).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-networking-amp-linux-fundamentals"&gt;
  &lt;/a&gt;
  4) Networking &amp;amp; Linux Fundamentals
&lt;/h2&gt;

&lt;p&gt;You need to have a good understanding of how networks work on any operating system level. You'll primarily be working with the TCP, a 4th level protocol as per the OSI Model.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--71_5L9ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58o0q52v5pa445y5g7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--71_5L9ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58o0q52v5pa445y5g7y.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Understanding the basics of Linux Fundamentals is essential as when you are working with a server, you most probably won't have interactive Graphical User Interfaces to handle the server. Therefore, it is very important to find your way around the terminal or command line, which is probably "bash" if you use Linux servers.‌&lt;br&gt;
‌Also, networking is important at the Operating System level as it is sometimes essential to communicate and retrieve and insert data into a database which brings us to the following necessary things, Databases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-database"&gt;
  &lt;/a&gt;
  5) Database
&lt;/h2&gt;

&lt;p&gt;Databases are very essential to maintain and organize the data generated by the users. This could be a SQL (Structured Query Language) or a NoSQL (Not Only Structured Query Language) database. Both have a lot in common, for example, indexing is a common concept in both kinds of databases.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFbDM8ie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujkdrsn0lqurkpjoyh5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFbDM8ie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujkdrsn0lqurkpjoyh5n.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
The most common SQL databases would be Postgres or MySQL, and for NoSQL databases, it would be MongoDB or Cassandra or Redis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-caching"&gt;
  &lt;/a&gt;
  6) Caching
&lt;/h2&gt;

&lt;p&gt;Caching data is important because it helps speed up application performance and increase efficiency. It stores data locally, which means browsers and websites will load faster because access elements like homepage images have previously been downloaded.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rP8X4WRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5glxvk9o65d0kr5l2tep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rP8X4WRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5glxvk9o65d0kr5l2tep.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
The most common caching technologies that are used are Redis &amp;amp; Memcached. Another promising technology that helps you with caching is AWS ElastiCache, which brings us to our following topic, cloud providers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-cloud-providers"&gt;
  &lt;/a&gt;
  7) Cloud Providers
&lt;/h2&gt;

&lt;p&gt;When it comes to Cloud Providers, the most resonating names are Amazon Web Services, Google Cloud Platform, and Microsoft Azure, among others like Digital Ocean.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZzZdgVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cw4xqsjwui43m2dugt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZzZdgVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cw4xqsjwui43m2dugt9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You have to pick any one of the cloud providers and get into their ecosystem and understand their embedded features for explicable use. Most of them also provide some free credits for you to use their cloud service. Cloud provides increased amounts of storage and processing power to run the applications &amp;amp; it's easy to access information, process and analyze data, and connect people and resources from any location anywhere in the world. So it's vital to have some fundamental understanding of any cloud provider.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-web-security"&gt;
  &lt;/a&gt;
  8) Web Security
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2DdXdRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9gr1rg1pf3t3no13tdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DdXdRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9gr1rg1pf3t3no13tdh.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Anyone can code but is your code secure enough that it's not vulnerable, and the data you are capturing is safe, probably!. So it's very, very important to understand web security before developing scalable applications.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5i1fquWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyigrgo6bp96cfnt0o9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5i1fquWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyigrgo6bp96cfnt0o9h.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You probably don't want your database to be corrupted or just got cloned and getting dumped by the hacker. Any back-end developer can make and manage servers, but a good back-end engineer can write secure code that keeps the collected data and the users' privacy safe. More about web security can be read &lt;a href="https://codedamn.com/news/5-web-security-tips-for-web-apps"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-containerization-amp-testing"&gt;
  &lt;/a&gt;
  9) Containerization &amp;amp; Testing
&lt;/h2&gt;

&lt;p&gt;Containerization and Testing are optional technologies for you to learn as a beginner. As a beginner, you can choose Docker to learn Containerization. You can also prefer Kubernetes but it is overkill. For testing, you can use Jest for your back-end testing and Postman for your API testing.&lt;/p&gt;

&lt;p&gt;You can watch the YouTube video &lt;a href="https://www.youtube.com/watch?v=aZkG0b6oi4s"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>backend</category>
      <category>graphql</category>
      <category>http</category>
      <category>linux</category>
    </item>
    <item>
      <title>use emoji as your className</title>
      <author>油炸皮卡丘的大号</author>
      <pubDate>Tue, 07 Sep 2021 02:42:40 +0000</pubDate>
      <link>https://dev.to/yzpkq/use-emoji-as-your-classname-21jl</link>
      <guid>https://dev.to/yzpkq/use-emoji-as-your-classname-21jl</guid>
      <description>&lt;p&gt;I use emoticons as the className, I think it should be able to impress my colleagues&lt;/p&gt;

&lt;p&gt;ha ha 💩&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fu0cmnr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dzb8bdrne6r87e7jn0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fu0cmnr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dzb8bdrne6r87e7jn0e.png" alt="css-emoji"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Intercepting HTTP Requests with NodeJS</title>
      <author>Henry Williams</author>
      <pubDate>Tue, 07 Sep 2021 02:20:02 +0000</pubDate>
      <link>https://dev.to/henryjw/intercepting-http-requests-with-nodejs-21ba</link>
      <guid>https://dev.to/henryjw/intercepting-http-requests-with-nodejs-21ba</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;As part of a project at work, I had to develop a way to intercept and store HTTP traffic for any given backend application (microservice in this case). This would have been a fairly straightforward task, but our backend is composed of many services (and many repos). Therefore, the solution had to be as seamless as possible so that it could be easily integrated into any of the services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;Using &lt;a href="https://www.npmjs.com/package/@mswjs/interceptors"&gt;&lt;code&gt;@mswjs/interceptors&lt;/code&gt;&lt;/a&gt; makes it straightforward to intercept HTTP traffic on your backend app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intercepting-http-traffic"&gt;
  &lt;/a&gt;
  Intercepting HTTP Traffic
&lt;/h2&gt;

&lt;p&gt;For my use case, there were two options I could think of for capturing the HTTP traffic:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Create a library that wraps an HTTP client library like Axios&lt;/li&gt;
    &lt;li&gt;Somehow intercept all HTTP traffic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In an ideal world, I would have chosen &lt;strong&gt;option 1&lt;/strong&gt; since it would be the simplest. Unfortunately, the project I work on consists of many microservices owned by different teams. Therefore, it would make it difficult for everyone to go back and refactor their code to use this new library.&lt;/p&gt;

&lt;p&gt;Therefore, my only option was really &lt;strong&gt;option 2&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-attempt"&gt;
  &lt;/a&gt;
  First attempt
&lt;/h3&gt;

&lt;p&gt;My first attempt was ok, but far from perfect. After trying to intercept the traffic directly through the low-level &lt;a href="https://nodejs.org/api/http.html"&gt;http&lt;/a&gt; module, I opted for a more higher-level solution. My idea was to &lt;a href="https://stackoverflow.com/a/5626250/1650910"&gt;monkey patch&lt;/a&gt; Axios's request methods to inject my own logic before a request is sent and after the response is received.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentAxios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;put&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;patch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;options&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;originalFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thisArgument&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_parseAxiosArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpRequestEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;


      &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
      &lt;span class="nx"&gt;doSomethingWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;originalFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thisArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;doSomethingWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method worked fine, but then I accidentally bumped into a cleaner approach while reading the Axios docs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-attempt"&gt;
  &lt;/a&gt;
  Second attempt
&lt;/h3&gt;

&lt;p&gt;To my surprise, Axios actually offers an API for intercepting requests and responses!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createInterceptor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InterceptorApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mswjs/interceptors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;interceptXMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mswjs/interceptors/lib/interceptors/XMLHttpRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;interceptClientRequest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mswjs/interceptors/lib/interceptors/ClientRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentAxios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_instrumentHttpResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosRequestConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;AxiosRequestConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpRequestEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;


   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;AxiosResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;


   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ah! Much better. &lt;strong&gt;However&lt;/strong&gt;, there is another complication to this approach that's also present in the first attempt: the interception has to be set for every Axios instance; this makes for a less than ideal developer experience. I initially assumed everyone used the default axios instance. However, it turns out that it's also possible to create new instances via &lt;a href="https://github.com/axios/axios#creating-an-instance"&gt;&lt;code&gt;axios.create()&lt;/code&gt;&lt;/a&gt;. So back to the drawing board 😔&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-solution"&gt;
  &lt;/a&gt;
  Final solution
&lt;/h3&gt;

&lt;p&gt;Before attempting to mess with the low-level &lt;code&gt;http&lt;/code&gt; module, I decided to look for some existing solutions. And after digging around for some time, I stumbled into &lt;a href="https://www.npmjs.com/package/@mswjs/interceptors"&gt;&lt;code&gt;@mswjs/interceptors&lt;/code&gt;&lt;/a&gt;. This library is very well documented and is TypeScript friendly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHTTPTraffic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interceptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createInterceptor&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;// Required even if not used&lt;/span&gt;
      &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;interceptXMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;interceptClientRequest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="nx"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpRequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicRequest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpRequestEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;


   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#caviats"&gt;
  &lt;/a&gt;
  Caviats
&lt;/h3&gt;

&lt;p&gt;Although the final solution is more general and is also agnostic to the client HTTP library used, there are some downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since all HTTP traffic going thorugh the app is intercepted, there needs to be some logic in place to know which requests to ignore. E.g., instrumentation tools like NewRelic regularly send requests to capture metadata. This can add a lot of noise if not handled properly&lt;/li&gt;
&lt;li&gt;Dependence on another library. Whether this is a big deal depends on what the interception is used for. Probably not a big deal for most projects&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Parallelism in JavaScript: build super programs🔥🔥</title>
      <author>sk</author>
      <pubDate>Tue, 07 Sep 2021 01:19:11 +0000</pubDate>
      <link>https://dev.to/sfundomhlungu/parallelism-in-javascript-build-super-programs-5a9k</link>
      <guid>https://dev.to/sfundomhlungu/parallelism-in-javascript-build-super-programs-5a9k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#concurrency-vs-parallelism"&gt;
  &lt;/a&gt;
  Concurrency vs Parallelism
&lt;/h1&gt;



&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  concurrency:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;single object&lt;/strong&gt; performing multiple tasks( example: a juggler) &lt;/p&gt;

&lt;p&gt;we already talked about this system in the previous chapter: the task queue and microtask queue which are both executed by a single thread (interchanged), the main thread.&lt;/p&gt;

&lt;p&gt;both async and sync code in JS is executed by a single thread, which juggles both of them based on the state of the event loop.&lt;/p&gt;

&lt;p&gt;Concurrency example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 // doing multiple tasks in a period of time

task a task b  task c

 concurrency:  
        task a

        task c

        task a

        task b

        task a

        task c - complete 

        task b

        task a

        task b

        task a - complete 

        task b - complete

        final result

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;a single thread juggles multiple tasks, giving the illusion that they are happening at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parallelism"&gt;
  &lt;/a&gt;
  parallelism
&lt;/h2&gt;

&lt;p&gt;multiple objects working at the same time, on one or multiple tasks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
task a   task b    task c 

task a   task b    task c 

task a   task b    complete

task a   complete  complete

task a   complete  complete

complete   complete  complete



final result


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multiple independent objects, working independently of each other(not interleaved) this is usually achieved through multiple threads and cores, languages such as java have this feature built in I believe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parallelism-in-browsers"&gt;
  &lt;/a&gt;
  Parallelism in browsers
&lt;/h2&gt;

&lt;p&gt;Browsers are fundamentally single threaded, having only the main thread handling both the execution of JavaScript code and rendering the browser window, async programming does relieve the main thread by pausing execution of specific code, but in the end even that code will run on the main thread, needless to say the main thread works pretty hard, which is actually the source of "a script is slowing down your browser" message, when a script is taking to long to finish a task and blocks the main thread, while async is the solution, an even better solution is creating a new thread and that is where web workers come in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-workers"&gt;
  &lt;/a&gt;
  web workers
&lt;/h2&gt;

&lt;p&gt;a web worker creates/spawns a second JS thread separate from the front end browser,  the thread does not have access to the DOM, window and anything in the front-end browser accept given by the main thread, all the is, is JS, this is true parallelism: the idea of two separate threads not inability to access the DOM, these threads run at the same time without blocking each other.&lt;/p&gt;

&lt;p&gt;they communicate via a message system, they are able to send messages to each, which can be strings, objects or simple values.&lt;/p&gt;

&lt;p&gt;This way we can migrate heavy computation from the main thread to the 2nd, and allow the main to perform it's primary duty to handle use input and react seamlessly.&lt;/p&gt;

&lt;p&gt;This is a true game changer, you can literally perform heavy tasks in the worker, without the browser missing a frame, this is ultimate optimization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-workers"&gt;
  &lt;/a&gt;
  getting started with workers
&lt;/h2&gt;

&lt;p&gt;because workers run in the browser we need an HTML file for this part, &lt;/p&gt;

&lt;p&gt;create three files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
 index.html
 main.js
 worker.js


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will be using  vscode live server plugin to serve index.html, you can use whatever you like, or even a bundler like parcel which support imports and live reload. &lt;/p&gt;

&lt;p&gt;Goal: create a second thread running an infinite loop, while the browser's main thread plays animation at 60FPS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;



 &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;



 &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;





&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in main.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main thread&lt;/span&gt;



&lt;span class="cm"&gt;/**

 * @type {HTMLLabelElement}

 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;




&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ionic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nativescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sass&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;



&lt;span class="c1"&gt;// simple DOM update&lt;/span&gt;
&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// choosing a random skill every 16ms and updating the label element to show that skill&lt;/span&gt;

     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know this does not seem much, given that set interval is a microtask, but if we add an infinite loop in the main file, one of two things will happen your browser will trash or not update the UI at all, since the main thread is stuck in this infinite loop, because of the run-to-completion rule, you can test it by adding an infinite loop in main.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;



&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this sets us up nicely to prove that a worker spawns a new thread separate from the browser window and document, if we can run an infinite loop logging something in the worker thread while updating the browser successfully every 16ms this will prove that these threads are separate, &lt;/p&gt;

&lt;p&gt;remove the infinite loop in main and add the following on top&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creates a worker thread(spawning a new thread)&lt;/span&gt;
&lt;span class="c1"&gt;// Worker() takes name of an existing js file, which the worker will load in it's own environment &lt;/span&gt;
&lt;span class="c1"&gt;// separate from the the main js and it's thread &lt;/span&gt;
&lt;span class="c1"&gt;// every code in worker.js will run in the second thread&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;// we use the worker object to communicate and receive communcication from the second thread&lt;/span&gt;


&lt;span class="c1"&gt;// sending a msg to the second thread&lt;/span&gt;
&lt;span class="c1"&gt;// the msg can be an object, stringified JSON object, buffer arrays etc&lt;/span&gt;
&lt;span class="c1"&gt;// but you cannot send DOM elements, classes etc &lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello there&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open worker.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//worker.js thread&lt;/span&gt;


&lt;span class="c1"&gt;//catching/receiving messages&lt;/span&gt;


&lt;span class="c1"&gt;// self = refers to the worker, &lt;/span&gt;
&lt;span class="c1"&gt;// listening to messages&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


  &lt;span class="c1"&gt;// logging the recieved message&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



 &lt;span class="c1"&gt;// sending back a message to the main thread after 10 seconds&lt;/span&gt;
 &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="c1"&gt;// sending a message to main thread &lt;/span&gt;

 &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;after 10 000 milliseconds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;




&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In main.js we can also listen to messages from the second/worker thread using the worker object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from second thread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you reload, in the console you will see worker.js logging "hello there" and after 10000ms  the main thread will receive a message from worker and logs it&lt;/p&gt;

&lt;p&gt;the infinite loop experiment&lt;/p&gt;

&lt;p&gt;in the worker&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



&lt;span class="c1"&gt;// infinite loop&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;



 &lt;span class="c1"&gt;// logging at an interval, logging at every iteration will crash the browser&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10000000000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;while loop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="p"&gt;}&lt;/span&gt;




 &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.00000000000000000000000000000001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;magic, the browser is not skipping a bit, while the infinite loop is running, if you have been using JS for a while, you'll understand how much of a big deal this is, just having a while(true) statement in JavaScript is super impressive.&lt;/p&gt;

&lt;p&gt;the browser might crash because of the frequent console logs, make sure you clear the console while it is running.&lt;/p&gt;

&lt;p&gt;Using this simple architecture there are many possibilities: operating on big files, large amounts of data and algorithms, only sending the computation result to the main thread. &lt;/p&gt;

&lt;p&gt;In term of the DOM access, there are libraries out there, for one workerDom which allows manipulation of the DOM in the worker, workerDom also works well with major front-end frameworks.&lt;/p&gt;

&lt;p&gt;With that we have achieved true parallelism in JavaScript.&lt;/p&gt;

&lt;p&gt;This is an excerpt from an eBook &lt;a href="https://sk76.gumroad.com/l/JS4AdvancedB?_ga=2.231950431.1783815175.1630970910-637662627.1625442646"&gt;JavaScript for advanced beginners&lt;/a&gt; available on gumroad as a pre-order, and should be launching soon, &lt;/p&gt;

&lt;p&gt;The eBooks main goal is to provide a gentle but needed push towards advanced JS, range of topics are covered from Object Oriented JS, Object composition to generators, promises, computational media and metaprogramming  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>parallelism</category>
      <category>webworkers</category>
      <category>webdev</category>
    </item>
    <item>
      <title>4 Resume Tips for Communicating Your Web Dev Accomplishments to Potential Employers</title>
      <author>Alex Sanders</author>
      <pubDate>Tue, 07 Sep 2021 01:00:58 +0000</pubDate>
      <link>https://dev.to/alexsan28195851/4-resume-tips-for-communicating-your-web-dev-accomplishments-to-potential-employers-4o0c</link>
      <guid>https://dev.to/alexsan28195851/4-resume-tips-for-communicating-your-web-dev-accomplishments-to-potential-employers-4o0c</guid>
      <description>&lt;p&gt;Creating a web development resume seems like a fairly easy task. If you list your education, degrees, and accomplishments, potential employers will know exactly what you’re capable of achieving. However, it doesn’t usually doesn’t work that way.&lt;/p&gt;

&lt;p&gt;Potential employers often struggle to understand what accomplishments mean in terms of how your skills will benefit their company. For instance, creating a custom SEO plugin for WordPress is a huge accomplishment, but employers who don’t care about SEO won’t necessarily be impressed.&lt;/p&gt;

&lt;p&gt;If your goal is to communicate your web development accomplishments to potential employers – in a way they can understand – the following tips will be helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-a-web-developer-resume-template"&gt;
  &lt;/a&gt;
  1. Use a web developer resume template
&lt;/h2&gt;

&lt;p&gt;If you’ve never used a resume template, you’ll be surprised at how much easier it will be to create a good resume. Starting with a template makes it easier to build a resume and get your wording correct.&lt;/p&gt;

&lt;p&gt;To get started, check out the &lt;a href="https://resume.supply/examples/web-development"&gt;developer resume templates&lt;/a&gt; from Resume Supply for ways to list your accomplishments and skills. These templates provide clear examples of how to phrase your accomplishments as an experienced web developer, and you can also find senior and entry-level examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-share-your-accomplishments-in-nondeveloperspeak"&gt;
  &lt;/a&gt;
  2. Share your accomplishments in non-developer-speak
&lt;/h2&gt;

&lt;p&gt;It’s natural to want to explain your accomplishments in development terms. For example, if you created a custom content management system (CMS) for a client, that’s a huge deal! However, a potential employer who doesn’t have any immediate need in a custom CMS needs to know how that accomplishment will translate to their next project.&lt;/p&gt;

&lt;p&gt;Employers who aren’t web developers &lt;a href="https://www.reddit.com/r/webdev/comments/apiyr6/am_i_the_only_one_or_do_clients_almost_never/"&gt;won’t understand your accomplishments&lt;/a&gt; unless you phrase them in a specific way. You need to communicate your accomplishments in terms of how those accomplishments will benefit your future employer. For instance, how did the company benefit from your achievement?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-send-potential-employers-direct-links-to-past-projects"&gt;
  &lt;/a&gt;
  3. Don’t send potential employers direct links to past projects
&lt;/h2&gt;

&lt;p&gt;There is a tendency to link potential employers to your past projects, but this can backfire if the employer doesn’t understand what they’re looking at. This is one of the reasons many developers have &lt;a href="https://dev.to/jkettmann/don-t-waste-your-time-on-a-portfolio-website-314b#what-you-want-to-achieve-with-a-portfolio-website"&gt;stopped creating portfolio websites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, say you created a custom WordPress theme to look exactly like a client’s current HTML/CSS design and then migrated all the content. That kind of project can easily exceed 60-80 hours of work, depending on the complexity of the design. &lt;/p&gt;

&lt;p&gt;Providing “before and after” links to a potential employer will probably backfire. When both websites look identical, it won’t impress anyone who isn’t a developer. Some employers might even believe it was just a copy and paste job.&lt;/p&gt;

&lt;p&gt;Don’t give potential employers the opportunity to misunderstand the amount of work involved in your past projects. Sometimes it’s appropriate to link directly to your projects, but not always.&lt;/p&gt;

&lt;p&gt;When direct links aren’t the best move, guide them through your projects in a controlled manner by telling them what went into each project. Sometimes “tell, don’t show” is more appropriate than “show, don’t tell.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-dont-use-the-employers-job-posting-to-write-your-resume"&gt;
  &lt;/a&gt;
  4. Don’t use the employer’s job posting to write your resume
&lt;/h2&gt;

&lt;p&gt;You might be tempted to create a unique resume for each potential employer by listing your skills according to what’s listed in the job posting. This is almost always a bad idea. Employers will know if you’ve done this, but you’ll also sell yourself short.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#most-employers-dont-know-what-they-need"&gt;
  &lt;/a&gt;
  Most employers don’t know what they need
&lt;/h2&gt;

&lt;p&gt;Employers don’t usually know much about development – and many don’t even know there are different programming languages. Some job postings list requirements for knowing, say, five popular programming languages without any particular reason.&lt;/p&gt;

&lt;p&gt;When it comes to listing developer qualifications, there is often a disconnect between what employers think they need and what they actually need. Some employers just copy other job postings and hope for the best.&lt;/p&gt;

&lt;p&gt;For instance, if an employer lists &lt;a href="https://www.itlandmark.com/blog/coldfusion-is-not-dead-it-is-alive/"&gt;ColdFusion&lt;/a&gt; as a requirement, it probably means their current applications are written in CF. However, they might need to migrate to an entirely new system. If they’re only open to hiring developers fluent in CF, they might never get the opportunity to advance their applications.&lt;/p&gt;

&lt;p&gt;Whether an employer is advertising a development job opening or sifting through resumes, many don’t know what skills will serve their company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-will-you-make-your-next-employer-more-profitable"&gt;
  &lt;/a&gt;
  How will you make your next employer more profitable?
&lt;/h2&gt;

&lt;p&gt;At the end of the day, employers are focused on profits. Even companies that treat their employees like royalty are committed to increasing their profits.&lt;/p&gt;

&lt;p&gt;For the best results, write your resume in terms of how you will support the company. Skills are important to list, but potential employers will be far more impressed when you can tell them how you’ll help them become more profitable.&lt;/p&gt;

</description>
      <category>resume</category>
      <category>developer</category>
      <category>employers</category>
      <category>tips</category>
    </item>
    <item>
      <title>Why Every Web Developer Should Learn About Security</title>
      <author>Lindsey Fonnesbeck</author>
      <pubDate>Tue, 07 Sep 2021 00:47:04 +0000</pubDate>
      <link>https://dev.to/lindsfonnes/why-security-is-important-for-every-developer-21d9</link>
      <guid>https://dev.to/lindsfonnes/why-security-is-important-for-every-developer-21d9</guid>
      <description>&lt;p&gt;This past week during my 100 days of hacking challenge, I started to dive deeper into the fundamentals of security and exactly why we as developers should learn to implement security into our code. Cybersecurity and software engineering are commonly seen as two separate specialties without much overlap, other than maybe an intro class or two for Computer Science students and a few dedicated minutes in a lecture for bootcamp grads if they're lucky.&lt;/p&gt;

&lt;p&gt;When I initially started to learn to code, I tried to ask around for advice on how I could integrate my passion for web security with software engineering. The general consensus that I received at that time, was that they are two separate things and that the frameworks learned in school were enough and that I didn't need to concern myself with the security aspect. Something about that just didn't sit right with me, and as I've started to learn more about breaking applications through Bugcrowd's bug bounty mentorship program, my stance that all developers should learn more about implementing security in their code is enforced. &lt;/p&gt;

&lt;p&gt;Using a framework is a common practice during development, because they abstract a lot of logic, in turn, saving a lot of time. However, using a framework without an understanding of how it works or the potential risks can put the security of your application in jeopardy. A single line of defective code can render an organization's internal systems to vulnerabilities. Many companies use the same frameworks and dependencies. This means when a vulnerability is discovered within these tools it puts all of the companies using them at risk. More so if they aren't making sure to update their dependencies and taking action against these risks. While efficiency and agility often take priority during development, without security built into the application the  attack surface is greatly increased.&lt;/p&gt;

&lt;p&gt;When developing an application, you should consider things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What should this application do?&lt;/li&gt;
&lt;li&gt;How should this application behave?&lt;/li&gt;
&lt;li&gt;What are my inputs? (form fields, query parameters, local storage, embedded css, etc)&lt;/li&gt;
&lt;li&gt;What are my outputs?&lt;/li&gt;
&lt;li&gt;What potential weaknesses could be taken advantage of by a hacker?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While software engineering and cybersecurity should still be viewed as their own specialties, there are many benefits for developers learning the basics of integrating security into their coding practices. By having developers be part of the solution, in taking responsibility for their code, users and companies will be less likely to be involved in a data breach that exposes confidential data. It may take time to see a change in curriculum to include secure software development practices. Depending on the size of the company, their level of concern with security and budget, companies may rectify this by implementing a DevSecOps team, a security champion, or by hiring developers who are more aware of security practices compared to those who aren't familiar with security concepts. The goal of integrating security with web development is to prevent common vulnerabilities in your application, which protects the users, the companies, and lessens the likelihood of having to backpedal in the event of a costly &amp;amp; time expansive security breach.&lt;/p&gt;

&lt;p&gt;Interested in learning more? Several resources that you may find beneficial include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://nostarch.com/websecurity"&gt;Web Security for Developers by Malcolm McDonald&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.amazon.com/Alice-Bob-Learn-Application-Security/dp/1119687357"&gt;Alice &amp;amp; Bob Learn Application Security by Tanya Janca&lt;/a&gt; or the author has a &lt;a href="https://www.youtube.com/playlist?&amp;lt;br&amp;gt;%0Alist=PLI9RITMnVbygrVQaGvpojIzgHTpkRrIn8"&gt;YouTube playlist&lt;/a&gt; reading of the book&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=o2nPF_14PUQ&amp;amp;list=WL&amp;amp;index=13&amp;amp;t=2s"&gt;Learn Enough Frontend Security to Be Dangerous webinar&lt;/a&gt; hosted by Mintbean&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_5A0AVgqTOg"&gt;MicroFocus Lunch &amp;amp; Learn DevSecOps&lt;/a&gt; hosted by Black Girls Hack&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will be studying a different web vulnerability each week during my 100 days of hacking and I look forward to sharing in more detail about common vulnerabilities and how we as developers can defend against them. In the meantime, let me know what your thoughts are on web developers learning more about security &amp;amp; any resources you find interesting!&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>100daysofhacking</category>
    </item>
    <item>
      <title>Vocabulary Building Day 11</title>
      <author>vindhya Hegde </author>
      <pubDate>Tue, 07 Sep 2021 00:08:07 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day-11-142j</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day-11-142j</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;entrenched&lt;/strong&gt;(adjective): fixed firmly or securely&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edo17wnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.storyworks.in/blog/wp-content/uploads/2015/11/Overcoming-Entrenched-Views-StoryWorks-860x721.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edo17wnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.storyworks.in/blog/wp-content/uploads/2015/11/Overcoming-Entrenched-Views-StoryWorks-860x721.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=entrenched&amp;amp;oq=entrenched&amp;amp;aqs=chrome..69i57.8220j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;preclude&lt;/strong&gt;(verb) :keep from happening or arising; make impossible.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f1zNGLku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ts.idictionary.co.kr/files/pd/word_sub_img/420x420/1466954260_28.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1zNGLku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ts.idictionary.co.kr/files/pd/word_sub_img/420x420/1466954260_28.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=preclude&amp;amp;oq=preclude&amp;amp;aqs=chrome..69i57j0i433i512l2j0i512l7.16592j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bucolic&lt;/strong&gt;(adjective): relating to the pleasant aspects of the countryside and country life.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ty7sa5I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freegreatpicture.com/files/photo102/50844-bucolic.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ty7sa5I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freegreatpicture.com/files/photo102/50844-bucolic.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=bucolic&amp;amp;oq=bucolic&amp;amp;aqs=chrome..69i57j0i433i512j0i512l3j46i175i199i512j0i512l4.7797j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;didactic&lt;/strong&gt;(adjective): instructive(especially excessively)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0DkvK4lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://study.com/cimages/videopreview/videopreview-full/screen_shot_2015-11-28_at_8.18.20_pm_127105.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0DkvK4lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://study.com/cimages/videopreview/videopreview-full/screen_shot_2015-11-28_at_8.18.20_pm_127105.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=didactic&amp;amp;oq=didactic&amp;amp;aqs=chrome..69i57j0i433i512j0i512l3j0i433i512j0i512l4.10009j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;predilection&lt;/strong&gt;(noun): strong liking&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2GDBzmhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/1d/e7/95/1de795451a0d8ea04a03dbb6dfb83f22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GDBzmhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/1d/e7/95/1de795451a0d8ea04a03dbb6dfb83f22.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=predilection&amp;amp;oq=predilection&amp;amp;aqs=chrome..69i57j0i433i512j0i512l8.12336j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day11</category>
    </item>
  </channel>
</rss>
