<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Metro Rail Path Finder</title>
      <author>Abdul Samad</author>
      <pubDate>Thu, 13 Jan 2022 22:53:26 +0000</pubDate>
      <link>https://dev.to/iabdsam/metro-rail-path-finder-2o3k</link>
      <guid>https://dev.to/iabdsam/metro-rail-path-finder-2o3k</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;I made an &lt;strong&gt;Express application which basically calculates the path from one station to another in a particular city's Metro rail map.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It connects to the database on Mongodb Atlas. My database has collections based on maps of different cities.&lt;br&gt;
The express app passes the User-preferences over to functions that query the database to find the route.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The app is very easily scalable&lt;/strong&gt;, as to add a map, one only has to add a new collection in the database (containing Station names etc) and one option in the "Map Select" drop-down.&lt;br&gt;
Everything else, including the functions and the drop-downs are designed to get updates from the database itself.&lt;/p&gt;

&lt;p&gt;Here is the link to my &lt;a href="https://github.com/mr-loop-1/metro-path-mongodb/"&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mr-loop-1"&gt;
        mr-loop-1
      &lt;/a&gt; / &lt;a href="https://github.com/mr-loop-1/metro-path-mongodb"&gt;
        metro-path-mongodb
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
metro-path-mongodb&lt;/h1&gt;
&lt;p&gt;This is a Metro Rail Path Finder app.&lt;/p&gt;
&lt;p&gt;Stack Used: Expressjs, MongoDb Atlas&lt;/p&gt;
&lt;h2&gt;
To run the app&lt;/h2&gt;
&lt;p&gt;Just make sure that node and npm are installed and&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And it will be deployed on &lt;code&gt;http://localhost:3000/users/details&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: The Mongodb database may refuse to connect sometimes. I am finding a fix for that&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mr-loop-1/metro-path-mongodb"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0osks_bh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skygdomy4fb9h8pm1yik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0osks_bh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skygdomy4fb9h8pm1yik.png" alt="Main Image" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TEBxJVlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5mztfnl25m81ahaef5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TEBxJVlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5mztfnl25m81ahaef5j.png" alt="Second Image" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Technology Used: Express, Mongodb, Atlas&lt;br&gt;
Contact: &lt;a href="mailto:iabdulsamad1412@gmail.com"&gt;iabdulsamad1412@gmail.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Mundos virtuales | Ep. 1 El MUD</title>
      <author>Bel Rey</author>
      <pubDate>Thu, 13 Jan 2022 22:50:06 +0000</pubDate>
      <link>https://dev.to/iamdoomling/mundos-virtuales-ep-1-el-mud-1nc1</link>
      <guid>https://dev.to/iamdoomling/mundos-virtuales-ep-1-el-mud-1nc1</guid>
      <description>&lt;p&gt;Pertenezco a las última generación que vivió una infancia sin internet. A pesar de estoy mi relación con las computadoras empezó a una edad muy temprana. Mi papá era programador, de los que trabajaban con tarjetas perforadas y fueron avanzando al paso de la tecnología. En casa siempre tuvimos computadora, pero era una máquina más que se prendía para hacer un trabajo especifico y después se apagaba. A diferencia de la tele o la radio, que nos traían información del exterior, la compu era algo estático, frizado en el tiempo. Las únicas actualizaciones que recibía llegaban en diskettes de 3/4. &lt;/p&gt;

&lt;p&gt;Mamá no la usaba. Yo la prendía de vez en cuando para hacer dibujos en paint, papá la usaba para trabajar y de vez en cuando para darme lecciones de cómo usar Fox Pro. “Tenés que aprender, esto es el futuro” decía orgulloso.&lt;/p&gt;

&lt;p&gt;Fast-forward a 1998, el momento en que llegó dial-up a mi vida. Algunos de ustedes quizás ni sepan QUE es dial up. Básicamente era internet a través de la linea telefónica. Una de sus particularidades era que te ocupaba la linea, es decir, mientras estabas conectado no podías recibir ni hacer llamadas y si levantabas el teléfono se escuchaban unos ruiditos al estilo &lt;em&gt;bip bop prippp pp&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Con papá vivíamos casi solos. Mamá transitó una serie de problemas de salud y pasaba meses enteros internada, así que eramos él, un adicto al trabajo que nunca se esperó tener que hacerse cargo solo de mi pre-adolescencia y yo con doce años y muchas opiniones.&lt;/p&gt;

&lt;p&gt;Empecé a pasar cada minuto que no estaba en la escuela usando la computadora. Tenía que aprovechar porque a las 19hs llegaba papá y me cortaba la linea. No le gustaba que use internet. Está lleno de extraños, decía. Y tenía razón, de pronto mi mundo era mucho más extenso. Ya no estaba limitada a hablar con los amigos del cole o la gente de inglés. Me conectaba a salas de mIRC y conectaba con extraños. Extraños con los que muchas veces compartía gustos que con la gente del cole no. No saben lo difícil que era ser otaku en los ‘90.&lt;/p&gt;

&lt;p&gt;En algún momento, explorando páginas de literatura fantástica me crucé con Petria. Petria era un MUD, multi-user dungeon. Un juego fantástico basado en texto donde te hacías un personaje, lo subías de nivel, explorabas el mapa, mejorabas tu equipo y eventualmente llegabas a nivel 100, peleabas contra un boss final y te hacías inmortal. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w6zpTBs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8lm9h71lzoj4nawoxkw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6zpTBs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8lm9h71lzoj4nawoxkw.png" alt="Image description" width="604" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¿Cómo se jugaba? Te conectabas a una dirección a través de un cliente telnet (básicamente una consola o terminal) e ibas leyendo las descripciones de cada sala en la que estabas. Si alguien entraba en la misma sala el juego te avisaba. Si el clima cambiaba te avisaba. Cada acción que pudiera afectar al personaje aparecía como texto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hr45EvUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cszae13je9uycqu6bmy6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hr45EvUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cszae13je9uycqu6bmy6.png" alt="Image description" width="517" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¿Era divertido? Sí, re. Pero al margen de eso su verdadero atractivo era la comunidad. Jugué desde 1998 a 2002 con diferentes niveles de intensidad. A veces eran horas por día, en otros momentos una vez por semana. En Petria hice amigos de muchos países y a algunos los conocí en el mundo real. Entre ellos se destacan Renzo, que fue mi mejor amigo toda la adolescencia y David, quien eventualmente fue mi primer novio.&lt;/p&gt;

&lt;p&gt;La principal diferencia entre este tipo de experiencia en mundos virtuales versus una simple sala de chat es que nos daban un contexto. Vos entrabas a Petria y te encontrabas con personas con un interés común y un mundo con reglas definidas donde podías interactuar.&lt;/p&gt;

&lt;p&gt;Cuando alguien cumplía años armabamos un festín y nos emborrachabamos en la plaza principal. Cuando alguien estaba triste se organizaba un torneo de PK (player killing, lo que hoy sería PvP). A veces ibamos de excursión a zonas complicadas o ayudábamos a algún alma en pena a pasar niveles.&lt;/p&gt;

&lt;p&gt;Nos recomendábamos música y libros. A veces se contaban historias. Gracias a Petria conocí a Tolkien y a Blind Guardian. En mi entorno real de ese momento nadie era fan de estas cosas y si bien creo que eventualmente podría haber llegado al mismo lugar, la realidad es que Petria ayudó a este proceso. El mundo y sus reglas en sí eran solamente el catalizador para nuestra experiencia colectiva pero detrás de cada nombre, de cada personaje, había un humano real que generaba conexiones que se sentían reales.&lt;/p&gt;

&lt;p&gt;En algún momento las tardes de Petria fueron reemplazadas por partidas de AoE, Quake y salidas a la Bond Street. Pero las experiencias que viví en ese mundo son tan reales como cualquiera que me haya pasado en el mundo físico.&lt;/p&gt;

&lt;p&gt;El mundo mutó, hoy en día no es raro conocer amigos en “la internet”. Mucho menos después de dos años de pandemia. Y aunque todavía seguimos poniendo barreras entre el mundo real y el virtual, yo creo que la linea será cada vez más difusa.&lt;/p&gt;

&lt;p&gt;En la novela “Otherland” de Tad Williams, se habla de un mundo donde la gente se conecta por medio de dispositivos de realidad virtual a un universo paralelo. En ese mundo se juntan con amigos, estudian, realizan actividades del día a día y también cometen alguna que otra ilegalidad.&lt;/p&gt;

&lt;p&gt;Estamos hoy en día dando los primeros pasos hacia el mundo de “Otherland”, pero la realidad no siempre se va a presentar como lo hace en la ciencia ficción. Hoy en día estamos viendo  grandes empresas entrando en el juego y planteando experiencias híbridas entre lo real y virtual, algunas incluso ofreciendo plataformas. &lt;/p&gt;

&lt;p&gt;Pero al final del día, esta experiencia en sí misma no es nueva, es algo que ya viene ocurriendo naturalmente. Cualquiera que haya pasado tiempo jugando un MMORPG con amigos sabe que al margen de las reglas y los objetivos del juego la experiencia cambia radicalmente según con quien la compartimos. Y este punto es clave en cualquier mundo virtual, que la plataforma sea solo catalizador de nuestra imaginación colectiva como usuarios. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mundos virtuales es una serie de blogs donde voy a explorar las vivencias online que fueron y serán. Si te interesa contarme alguna vivencia podés hacermela llegar por &lt;a href="//mailto:bethlejem@gmail.com"&gt;acá&lt;/a&gt; o &lt;a href="http://twitter.com/iamdoomling"&gt;acá&lt;/a&gt; &amp;lt;3. Si tenemos suerte algún día Netflix hace una película al respecto.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Manage webhooks with MongoDB Functions and Triggers</title>
      <author>Pubudu Jayawardana</author>
      <pubDate>Thu, 13 Jan 2022 22:46:31 +0000</pubDate>
      <link>https://dev.to/pubudusj/manage-webhooks-with-mongodb-functions-and-triggers-4lob</link>
      <guid>https://dev.to/pubudusj/manage-webhooks-with-mongodb-functions-and-triggers-4lob</guid>
      <description>&lt;p&gt;In this post I explain how I built a webhook management system with MongoDB triggers and functions. This is part of mongodb atlas hackathon here in dev.to&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Webhooks are still a preferred choice of many organizations to communicate with 3rd party services. Since webhook calls are event-driven, if we use MongoDB Atlas as our database solution, we can use the features like &lt;a href="https://docs.mongodb.com/realm/triggers/trigger-types/"&gt;triggers&lt;/a&gt; and &lt;a href="https://docs.mongodb.com/realm/functions/"&gt;functions&lt;/a&gt; to build a low code webhook management system. In this project, I showcase how to build such system with MongoDB Realm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Action Star&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;You can find the source code of the application at &lt;a href="https://github.com/pubudusj/webhook-management-with-mongodb/"&gt;https://github.com/pubudusj/webhook-management-with-mongodb/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setup instructions are available further in this post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#mongodb-featurestools-used"&gt;
  &lt;/a&gt;
  MongoDB features/tools used
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/cloud/atlas/lp/try2"&gt;MongoDB Atlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/triggers/trigger-types/"&gt;Realm Triggers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/functions/"&gt;Realm Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/functions/add-external-dependencies"&gt;Realm External Dependancies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/cli/"&gt;Realm CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/hosting/"&gt;Realm static hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/sdk/node/"&gt;MongoDB NodeJS SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h4&gt;

&lt;p&gt;You can see a fully functional demo at&lt;br&gt;
&lt;a href="https://webhookmanagement-gfbga.mongodbstitch.com/"&gt;https://webhookmanagement-gfbga.mongodbstitch.com/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kXGPG2zx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7t4neex5pjj11czk51y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXGPG2zx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7t4neex5pjj11czk51y.png" alt="System architecture" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h4&gt;

&lt;p&gt;There are 3 parts to this implementation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Webhook registration.&lt;/li&gt;
&lt;li&gt;Webhook call for create candidate/user event.&lt;/li&gt;
&lt;li&gt;View webhook call history.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Webhook Registration&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is an API exposed in the AWS API gateway which proxy to a Lambda function (&lt;em&gt;RegisterWebhookFunction&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;In this function, MongoDB NodeJS SDK is included, where it generate a webhook signing token and save the companyId, webhookUrl, event type as ‘candidate.created’ and the signing token to MongoDB collection - webhooks.&lt;/li&gt;
&lt;li&gt;Generated webhook signing token will be returned from the API end point. &lt;/li&gt;
&lt;li&gt;This token can be used to authenticate the incoming webhook.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Create user&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is an API exposed in the AWS API gateway which proxy to a Lambda function (&lt;em&gt;CreateUserFunction&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Again, in this function, MongoDB NodeJS SDK is included, where it save user data including the companyId to a MongoDB collection - users.&lt;/li&gt;
&lt;li&gt;In MongoDB Realm, I have created a application - WebhookManagement.&lt;/li&gt;
&lt;li&gt;There, I have created a trigger (&lt;em&gt;CandidateCreated&lt;/em&gt;), which will trigger when a new user is added to the users collection.&lt;/li&gt;
&lt;li&gt;Also, there is a function created as &lt;em&gt;CandidateCreated&lt;/em&gt; attached to this trigger, so this function will be executed upon the trigger.&lt;/li&gt;
&lt;li&gt;Within this &lt;em&gt;CandidateCreated&lt;/em&gt; function, there are few steps involved to call the webhook.&lt;/li&gt;
&lt;li&gt;First it calls another function, &lt;em&gt;GetWebhook&lt;/em&gt; to check if there are webhooks registered for this companyId and event type ‘candidate.created’.&lt;/li&gt;
&lt;li&gt;If so, &lt;em&gt;GetUserObject&lt;/em&gt; function will be called to fetch the respective user data from users collection.&lt;/li&gt;
&lt;li&gt;With those information, there is another function - &lt;em&gt;CreateWebhookPayload&lt;/em&gt; - called to create the payload for the webhook.&lt;/li&gt;
&lt;li&gt;In this &lt;em&gt;CreateWebhookPayload&lt;/em&gt; function, it generates a token to be added to the payload using signing token. To generate the token, I use SHA256 algorithm as:
&lt;code&gt;
hmacSHA256(userId + currentTime, signingToken)
&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This token will be used to verify the authenticity of the request coming into the webhook. To generate this token, I use JS library 'crypto-js' which can be added easily into the realm app as an external dependency.&lt;/li&gt;
&lt;li&gt;Once the payload is created, external url will be called including this payload using JS library 'axios'. Here also, I use external dependancy feature of realm app to load 'axios' library into the function.&lt;/li&gt;
&lt;li&gt;Once the external api is called, the result will be saved into the webhook_calls collection using the function - &lt;em&gt;CreateWebhookCall&lt;/em&gt;. Here, the url, payload, timestamp, status and response from the webhook call are saved into the webhook_calls collection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;View webhook call history&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To fetch webhook call history, an API exposed in the AWS API gateway which proxy to a Lambda function (&lt;em&gt;FetchWebhookHistoryFunction&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Given the companyId, using MongoDB NodeJS SDK, it will query the webhook_call collection to fetch the data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How to Set up&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, create a new MongoDB Cluster with the name "Testing" at MongoDB Atlas.&lt;/li&gt;
&lt;li&gt;Create a new user with username+password authentication at the Database Access section with permission read and write to any database.&lt;/li&gt;
&lt;li&gt;In the Realm section, create a new application. Use name as "WebhookManagement" and choose the option: 'Use and existing MongoDB Atlas Data Source' and choose the cluster created in step 1 - Testing.&lt;/li&gt;
&lt;li&gt;Under the 'Authentication' section, enable API keys and create a API key. Generated public key and private keys is required for realm cli authentication later on.&lt;/li&gt;
&lt;li&gt;Install realm cli using &lt;code&gt;npm install -g mongodb-realm-cli&lt;/code&gt; in your local machine.&lt;/li&gt;
&lt;li&gt;Clone this &lt;a href="https://github.com/pubudusj/webhook-management-with-mongodb"&gt;github repository&lt;/a&gt; to your local machine.&lt;/li&gt;
&lt;li&gt;This repo contains 3 main directories.&lt;/li&gt;
&lt;li&gt;Goto the the realm directory, open the Makefile and set the values for parameters: REALM_APP_ID, APP_NAME, REALM_PUBLIC_KEY, REALM_PRIVATE_KEY.&lt;/li&gt;
&lt;li&gt;Within the realm directory, run &lt;code&gt;make realm_login&lt;/code&gt;, &lt;code&gt;make realm_pull_app&lt;/code&gt;, &lt;code&gt;make setup_functions&lt;/code&gt;, &lt;code&gt;make setup_triggers&lt;/code&gt;, &lt;code&gt;make deploy_all&lt;/code&gt; in the same order. This will create all the functions, triggers and dependancies in the Realm app.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;backend&lt;/code&gt; directory contains a AWS SAM application to set up the required Lambda functions and API gateway apis which are consumed by the frontend app. Once the backend deployed, the API gateway url is required to set up frontend app. To deploy the backend, you need to have the connection string for the MongoDB database. You can get it from 'Connect' button on the dashboard of your DB cluster.&lt;/li&gt;
&lt;li&gt;Instead of this AWS backend, you can use Realm endpoints as well. &lt;a href="https://docs.mongodb.com/realm/endpoints/"&gt;https://docs.mongodb.com/realm/endpoints/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;frontend&lt;/code&gt; directory contains a VueJS app. Copy the .env.example file into .env and changed the VUE_APP_API_BASE_URL parameter with the one received in the backend deployment.&lt;/li&gt;
&lt;li&gt;Then, use &lt;code&gt;npm run serve&lt;/code&gt; for local testing or for production build, use &lt;code&gt;npm run build --production&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Goto the hosting section of the Realm App and enable hosting. This will create a sample app with a url. ex: webhookmanagement-gfbga.mongodbstitch.com&lt;/li&gt;
&lt;li&gt;Upload the frontend build files generated in step 12.&lt;/li&gt;
&lt;li&gt;Confirm the changes and visit the url. You will see the frontend app.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Sample screenshot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r8s5uLO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkz36ywl8l2vfin196b6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r8s5uLO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkz36ywl8l2vfin196b6.png" alt="Success Webhooks" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RbpwYzcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osuhp318bdsedmyiqdde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RbpwYzcq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osuhp318bdsedmyiqdde.png" alt="Failed Webhooks" width="880" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Overall, Atlas and Realm provides great experience in terms of developer experience and performance. There are few thing I would like to see in future.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Retry feature: Currently, if Realm function fails, we cannot automatically retry.&lt;/li&gt;
&lt;li&gt;Individual function calls in log: Currently if one function is being called within another function, it is not recorded in the logs. Only the calling function has a entry. Better to make all the function executions available in the logs.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>atlashackathon</category>
      <category>showdev</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>xChange-MongoDB Realm and SwiftUI</title>
      <author>Amey Sunu</author>
      <pubDate>Thu, 13 Jan 2022 22:42:45 +0000</pubDate>
      <link>https://dev.to/ameysunu/xchange-mongodb-realm-and-swiftui-34d4</link>
      <guid>https://dev.to/ameysunu/xchange-mongodb-realm-and-swiftui-34d4</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;xChange is an app designed in SwiftUI for iOS that helps meet users from different parts of the globe. It uses “Letter”, in which users can create letters, through which users can share their thoughts and feelings as notes to which users within the local region can react and get in touch with. Users with premium features can get access to the global feature where they can interact with letters all over the globe. The app uses MongoDB Realm for authentication and CRUD operations as local persistence storage, and is deployed on to MongoDB Atlas whenever a trigger to the app is viewed. The app mainly focuses on how people can interact with each other, merely based on their thoughts. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Action Star&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ameysunu"&gt;
        ameysunu
      &lt;/a&gt; / &lt;a href="https://github.com/ameysunu/xchange"&gt;
        xchange
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
xChange&lt;/h2&gt;
&lt;p&gt;xChange is an app designed in SwiftUI for iOS that helps meet users from different parts of the globe. It uses “Letter”, in which users can create letters, through which users can share their thoughts and feelings as notes to which users within the local region can react and get in touch with. Users with premium features can get access to the global feature where they can interact with letters all over the globe. The app uses MongoDB Realm for authentication and CRUD operations as local persistence storage, and is deployed on to MongoDB Atlas whenever a trigger to the app is viewed. The app mainly focuses on how people can interact with each other, merely based on their thoughts.&lt;/p&gt;
&lt;h2&gt;
Tools Used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SwiftUI&lt;/li&gt;
&lt;li&gt;MongoDB Realm&lt;/li&gt;
&lt;li&gt;MapKit and CoreLocation&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ameysunu/xchange"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;The application uses MapKit, and CoreLocation for determining current location using Apple Maps to analyse the current location of users to deploy the letter in such a way that it binds the users of the same location. Using Realm, the data is bound with local CoreData within the iPhone and can be deployed to MongoDB Atlas. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#future-work"&gt;
  &lt;/a&gt;
  Future Work
&lt;/h4&gt;

&lt;p&gt;Using Artificial Intelligence, illegitimate users shall be removed. The AI will also monitor and handle abusive images, and NSFW content.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dECXH3e_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqzp1mi3d34j0rfiitgl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dECXH3e_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqzp1mi3d34j0rfiitgl.png" alt="" width="880" height="1904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_y3Czw_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk1el1rxxblb4sil6sd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_y3Czw_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk1el1rxxblb4sil6sd9.png" alt="Image description" width="880" height="1904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Z9baB3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgqqbcyvjewm5531zjsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Z9baB3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgqqbcyvjewm5531zjsm.png" alt="Image description" width="880" height="1904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvuh8lCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dhwd7z6s8s5l6234w00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvuh8lCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dhwd7z6s8s5l6234w00.png" alt="Image description" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SiCsSaWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxbw4k52qa49rqacjef6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SiCsSaWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxbw4k52qa49rqacjef6.png" alt="Image description" width="880" height="1904"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Creating a better date-picking experience with the DateRangePicker component</title>
      <author>Bryan Robinson</author>
      <pubDate>Thu, 13 Jan 2022 22:15:11 +0000</pubDate>
      <link>https://dev.to/algolia/creating-a-better-date-picking-experience-with-the-daterangepicker-component-4019</link>
      <guid>https://dev.to/algolia/creating-a-better-date-picking-experience-with-the-daterangepicker-component-4019</guid>
      <description>&lt;p&gt;When crafting a search interface, it's often enough to use what comes prepackaged with Algolia's InstantSearch libraries. Each library comes in a different flavor of JavaScript for your ease of use. Each one has all the main pieces you need to craft a strong UI. &lt;/p&gt;

&lt;p&gt;Sometimes you want to go beyond what's available. &lt;/p&gt;

&lt;p&gt;At that point, you're presented with two options: craft your own with our connector APIs or find a pre-built custom widget.&lt;/p&gt;

&lt;p&gt;It should come as no surprise to anyone that knows me that when presented with wanting a React date picker for &lt;a href="https://www.algolia.com/blog/engineering/algolia-coding-challenge-help-santa/"&gt;December's coding challenge,&lt;/a&gt; I wanted to write as little code as possible to make it work, but I also wanted the best UI possible for Santa. When it came to bonus challenge number 5, I needed something extra. My first stop? &lt;a href="https://www.algolia.com/developers/code-exchange/"&gt;The Algolia Code Exchange&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;After a quick search around &lt;code&gt;date&lt;/code&gt; components, I found exactly what I needed: the aptly-named &lt;a href="https://github.com/algolia/react-instantsearch-widget-date-range-picker"&gt;@algolia/react-instantsearch-widget-date-range-picker&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;If you'd like to follow along, you'll need to install a new React InstantSearch project. The easiest way to do that is to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; npx create-instantsearch-app concert-search &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="nt"&gt;--app-id&lt;/span&gt; latency &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="nt"&gt;--api-key&lt;/span&gt; 059c79ddd276568e990286944276464a &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="nt"&gt;--index-name&lt;/span&gt; concert_events_instantsearchjs &lt;span class="se"&gt;\&lt;/span&gt;
 &lt;span class="nt"&gt;--template&lt;/span&gt; &lt;span class="s2"&gt;"React InstantSearch"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This monster command will set up a React InstantSearch project and connect it to &lt;a href="https://github.com/algolia/datasets/tree/master/concerts"&gt;Algolia's hosted concert Index&lt;/a&gt;. Change directory into the created folder and run &lt;code&gt;yarn start&lt;/code&gt; for a solid starting point.&lt;/p&gt;

&lt;p&gt;At this point, you've got a full search experience for a set of concerts. &lt;/p&gt;

&lt;p&gt;If you want to filter by date, you could set up a &lt;code&gt;&amp;lt;RefinementList&amp;gt;&lt;/code&gt; component and set its &lt;code&gt;attribute&lt;/code&gt; prop to &lt;code&gt;date&lt;/code&gt;, but those dates are Unix timestamps (for easiest comparisons). This isn't ideal for the user experience. Let's make that better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-and-configuring-the-widget"&gt;
  &lt;/a&gt;
  Installing and configuring the widget
&lt;/h2&gt;

&lt;p&gt;To get the date range picker up and running, we need to install a couple of dependencies.&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @algolia/react-instantsearch-widget-date-range-picker @duetds/date-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will install the official Algolia React Date picker widget and its dependency the Duet Date picker.&lt;/p&gt;

&lt;p&gt;From here, we need to import the packages into our &lt;code&gt;src/App.js&lt;/code&gt; file and initialize the Duet Date Picker for use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Add right after the imports included in the create-instantsearch-app code&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DateRangePicker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@algolia/react-instantsearch-widget-date-range-picker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineCustomElements&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@duetds/date-picker/dist/loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Defines the custom elements from the date picker for use on the window object  &lt;/span&gt;
&lt;span class="nx"&gt;defineCustomElements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that these packages are imported, we're ready to get this on the page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-date-range-picker"&gt;
  &lt;/a&gt;
  Adding the date range picker
&lt;/h2&gt;

&lt;p&gt;To add the picker to the page, we need to select a spot within the &lt;code&gt;&amp;lt;InstantSearch&amp;gt;&lt;/code&gt; component. The base of the app is a &lt;code&gt;search-panel&lt;/code&gt;. By default, all we have inside this is the results, but we can add a filter panel, as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;InstantSearch&lt;/span&gt; &lt;span class="nx"&gt;_searchClient_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;searchClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;indexName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;concert_events_instantsearchjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;search-panel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;search-panel__filters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DateRangePicker&lt;/span&gt; &lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;  
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;_className_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;search-panel__results&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="err"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;//... Results code&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/InstantSearch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The DateRangePicker accepts an &lt;code&gt;attribute&lt;/code&gt; prop. This prop accepts a date-based attribute from the hits in our Index. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Quick note&lt;/em&gt;: The DateRangePicker accepts a Unix timestamp with milliseconds since the Epoch, not seconds. Depending on your data structure, you may need to create a secondary timestamp in your data.&lt;/p&gt;

&lt;p&gt;When you view the rendered page, you should now have a date picker. There are a few small UI snags to clean up. &lt;/p&gt;

&lt;p&gt;The Duet Date picker uses a slew of CSS Custom Properties for much of its styling. At the start of our &lt;code&gt;src/App.css&lt;/code&gt; file, we need to paste those in and configure for our app (as appropriate).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-color-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3c4ee0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-color-text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-color-text-active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-color-placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-color-button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f5f5f5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-color-surface&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-color-overlay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-color-border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d6d6e7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

  &lt;span class="py"&gt;--duet-font&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'Segoe UI'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
  &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-font-normal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-font-bold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

  &lt;span class="py"&gt;--duet-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;--duet-z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The two picker areas are a little close together still, so let's fix that with a little CSS, as well. This can go in &lt;code&gt;src/App.css&lt;/code&gt; but should be closer to the bottom. There are many ways to get the space between the two items, the quick and easy solution is to use CSS Grid and the &lt;code&gt;gap&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.date-range-picker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, we have a functioning, user-friendly date picker. No more dealing with Unix timestamps and conversions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-this-further"&gt;
  &lt;/a&gt;
  Take this further
&lt;/h2&gt;

&lt;p&gt;This works great in the small sample dataset, but can also be brought into any Algolia InstantSearch application. If you're looking to take this example further, create a better UI around each Hit by editing the hit component in &lt;code&gt;src/App.js&lt;/code&gt;. You could also show the current filters applied with the &lt;a href="https://www.algolia.com/doc/api-reference/widgets/current-refinements/react/"&gt;CurrentRefinements component&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Search Job Postings on HackerNews</title>
      <author>I love integers</author>
      <pubDate>Thu, 13 Jan 2022 22:06:03 +0000</pubDate>
      <link>https://dev.to/yuhuishishishi/search-job-postings-on-hackernews-bmk</link>
      <guid>https://dev.to/yuhuishishishi/search-job-postings-on-hackernews-bmk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Hacker Job Search let you search job postings on HackerNews.&lt;br&gt;
It used Real Scheduled Trigger and Functions to scrape job postings from HackerNews at an hour interval.&lt;/p&gt;

&lt;p&gt;Atlas Search index is built on top to enable search by keyword functions. &lt;/p&gt;

&lt;p&gt;The searching endpoint is exposed as HTTPS endpoints with Realm Functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Automation Innovation&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;{% github https://github.com/yuhuishi-convect/hacker-job-search %}&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://yuhuishi-convect.github.io/hacker-job-search"&gt;Demo Site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/43df624c66ae46489bf6285fbc027868"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pv6olKPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.loom.com/sessions/thumbnails/43df624c66ae46489bf6285fbc027868-with-play.gif" alt="demo video" width="609" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>react</category>
      <category>mongodb</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Configurar una cuenta AWS IAM para desplegar nuestras aplicaciones con ASP.NET</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Thu, 13 Jan 2022 21:59:14 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/configurar-una-cuenta-aws-iam-para-desplegar-nuestras-aplicaciones-con-aspnet-2e9b</link>
      <guid>https://dev.to/esdanielgomez/configurar-una-cuenta-aws-iam-para-desplegar-nuestras-aplicaciones-con-aspnet-2e9b</guid>
      <description>&lt;p&gt;Amazon Web Services, también conocida como AWS, es un conjunto de herramientas y servicios de cloud computing de Amazon. En este primer artículo, nuestro objetivo será crear una cuenta IAM (AWS Identity and Access Management), enfocada en el despliegue de aplicaciones web ASP.NET. En este sentido, este será el proceso: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Obtener una cuenta de capa gratuita de AWS&lt;/li&gt;
&lt;li&gt;Configurar una cuenta IAM&lt;/li&gt;
&lt;li&gt;Establecer las políticas para un usuario determinado en IAM&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-registrarse-para-obtener-una-cuenta-de-capa-gratuita-de-aws"&gt;
  &lt;/a&gt;
  1. Registrarse para obtener una cuenta de capa gratuita de AWS
&lt;/h2&gt;

&lt;p&gt;AWS dispone de un nivel gratuito para probar y consumir servicios durante 12 meses. En la siguiente dirección podemos realizar el registro correspondiente: &lt;a href="https://aws.amazon.com/free"&gt;aws.amazon.com/free&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Este es un proceso bastante sencillo, sin embargo, hay que tener en cuenta que hay que proporcionar los datos de nuestra tarjeta de crédito/debito para poder activarla.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-configurar-una-cuenta-iam"&gt;
  &lt;/a&gt;
  2. Configurar una cuenta IAM
&lt;/h2&gt;

&lt;p&gt;AWS &lt;em&gt;Identity and Access Management&lt;/em&gt; (IAM) proporciona un control de acceso detallado en todo AWS. Con IAM, podemos especificar quién puede acceder a qué servicios y recursos, y en qué condiciones. Con las políticas de IAM, también podemos administrar los permisos de otros usuarios y de sistemas que tengamos implementados para garantizar los permisos de privilegios mínimos.&lt;/p&gt;

&lt;p&gt;Muy bien, suponiendo que ya nos hemos creado una cuenta raíz, o en caso de que ya tengamos alguna, al iniciar sesión veremos la consola de AWS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3aB7M5ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qwxj3f845iqg6z684e3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3aB7M5ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qwxj3f845iqg6z684e3.png" alt="" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Al ingresar a este servicio IAM, nos dirigiremos al apartado Users dentro del menú de opciones y seleccionaremos Add User. El objetivo es crear un usuario, el cual se utilizará para asociar los servicios de AWS que se van a utilizar, ya que no es recomendable proporcionar nuestros privilegios de acceso de usuario raíz. &lt;/p&gt;

&lt;p&gt;El formulario para agregar a un nuevo usuario se verá de esta manera:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X2Yf2W6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3vk2g1orymii71s3t87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2Yf2W6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3vk2g1orymii71s3t87.png" alt="" width="880" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Una vez que se haya terminado con la creación del nuevo usuario de IAM, es necesario descargar las credenciales. Estas las podremos utilizar más adelante para realizar una configuración de AWS desde Visual Studio por ejemplo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odDf_3s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/put010of4ls7pwvqdp26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odDf_3s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/put010of4ls7pwvqdp26.png" alt="" width="481" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nota: es muy importante mantener este archivo CSV en un lugar seguro, ya que se encuentran allí las credenciales de acceso. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-establecer-las-pol%C3%ADticas-del-usuario"&gt;
  &lt;/a&gt;
  3. Establecer las políticas del usuario
&lt;/h2&gt;

&lt;p&gt;Dependiendo de nuestro objetivo, nosotros podemos proporcionar los permisos de acceso y uso de los servicios de AWS para nuestros usuarios. Supongamos que en este caso queremos desplegar nuestras aplicaciones con ASP.NET Core desde Visual Studio hacia AWS, para esto nuestro nuevo usuario IAM necesita poder acceder a ciertos servicios de AWS. En este caso, nos dirigiremos al usuario en cuestión dentro de IAM en AWS y seleccionaremos la opción &lt;code&gt;Add inline policy&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ra1MLeha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w6w00f7ch8nrhpjpf5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ra1MLeha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w6w00f7ch8nrhpjpf5g.png" alt="" width="757" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luego, realizaremos este proceso para cada uno de los siguientes servicios, los cuales serán de utilidad para poder desplegar nuestras aplicaciones web ASP.NET:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elastic Beanstalk&lt;/li&gt;
&lt;li&gt;EC2&lt;/li&gt;
&lt;li&gt;S3&lt;/li&gt;
&lt;li&gt;CloudFormation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qlf4k90p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl1h4b5ck84jfy9kfxyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qlf4k90p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl1h4b5ck84jfy9kfxyo.png" alt="" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Después de agregar cada uno de los servicios, asignaremos un nombre para esta política y la guardaremos. Al final tendremos algo como esto: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKs9x8JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28njfw2xm8ga3hw3ywyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKs9x8JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28njfw2xm8ga3hw3ywyi.png" alt="" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gracias-por-leer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;¡Gracias por leer!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Con este proceso, nuestro IAM estará creado, y las políticas estarán establecidas. En próximos artículos revisaremos como acceder a AWS desde Visual Studio 2019 gracias a esta configuración. &lt;/p&gt;

&lt;p&gt;Si tienes alguna pregunta o alguna idea en mente, será un gusto poder estar en comunicación y juntos intercambiar conocimientos entre sí.&lt;/p&gt;

&lt;p&gt;¡Nos vemos en &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! O si gustas también puedes escribirme por otros medios: &lt;a href="https://esdanielgomez.com"&gt;esDanielGomez.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>dotnet</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>January 13th, 2022: What did you learn this week?</title>
      <author>Nick Taylor</author>
      <pubDate>Thu, 13 Jan 2022 21:47:24 +0000</pubDate>
      <link>https://dev.to/nickytonline/january-13th-2022-what-did-you-learn-this-week-j82</link>
      <guid>https://dev.to/nickytonline/january-13th-2022-what-did-you-learn-this-week-j82</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ojmB7lOn3VUU8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ojmB7lOn3VUU8/giphy.gif" alt="Image of the brain" width="500" height="281"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And remember, if something you learnt was a big win for you, then you know where to drop it as well.👇👇🏻👇🏼👇🏽👇🏾👇🏿&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_NJBg3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--W9v1So-5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/342975/98b7a8ed-aa91-48a3-bcc0-ebe2c13b5893.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/what-was-your-win-this-week-4oa2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What was your win this week?&lt;/h2&gt;
      &lt;h3&gt;Gracie Gregory (she/her) for The DEV Team ・ Jun 11 '21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#weeklyretro&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/6brH8dM3zeMyA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/6brH8dM3zeMyA/giphy.gif" alt='Little kid making a fist as if to say "Yes!"' width="220" height="220"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>CI/CD in Node.js with GitHub Actions</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 13 Jan 2022 21:47:12 +0000</pubDate>
      <link>https://dev.to/logrocket/cicd-in-nodejs-with-github-actions-3ag4</link>
      <guid>https://dev.to/logrocket/cicd-in-nodejs-with-github-actions-3ag4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/sarahchima/"&gt;Sarah Chima Atuonwu&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;Continuous integration/continuous deployment is a software engineering practice that helps teams to collaborate better and improve their overall software. With GitHub Actions, you can easily integrate this into your GitHub project without using an external platform.&lt;/p&gt;

&lt;p&gt;In this tutorial, we see how you can use GitHub Actions to set up a CI/CD pipeline to your project.&lt;/p&gt;

&lt;p&gt;To use this tutorial, you will need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Node installed&lt;/li&gt;
&lt;li&gt;  Basic knowledge of Node.js and Express&lt;/li&gt;
&lt;li&gt;  Good knowledge of Git&lt;/li&gt;
&lt;li&gt;  Jest and Heroku will be used, but it’s not compulsory to follow along&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we delve into GitHub Actions for CI/CD, let’s understand what continuous integration and what continuous deployment is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-continuous-integration"&gt;
  &lt;/a&gt;
  What is continuous integration?
&lt;/h2&gt;

&lt;p&gt;Continuous integration (CI) is the software engineering practice that requires frequent commits to a shared repository. You may have gotten so used to this practice that you may wonder why there’s a term for it.&lt;/p&gt;

&lt;p&gt;To understand this better, let us consider the opposite of CI. Before CI, people would work on feature branches for weeks or months and then try to merge this branch to a main branch. Think about all that could go wrong during such merge — merge conflicts and failing tests, just to mention a few.&lt;/p&gt;

&lt;p&gt;Continuous integration tries to prevent all of these by encouraging small and frequent code updates. When a code is committed to a repository, it can be built and tested against setup workflows to ensure that the code does not introduce any errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-continuous-deployment"&gt;
  &lt;/a&gt;
  What is continuous deployment?
&lt;/h2&gt;

&lt;p&gt;Continuous deployment means code changes are automatically deployed/released to a testing or production environment as soon as they are merged. This is often interchanged with continuous delivery and that’s because they are very similar. The only difference is that in continuous delivery, human intervention (e.g., the click of a button) is needed for the changes to be released. However, in continuous deployment, everything happens automatically. For the rest of this post, we refer to CD as continuous deployment.&lt;/p&gt;

&lt;p&gt;Let’s outline some advantages of CI/CD.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-cicd"&gt;
  &lt;/a&gt;
  Advantages of CI/CD
&lt;/h3&gt;

&lt;p&gt;Here are more advantages in addition to those already mentioned above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Fault isolation is simpler and faster. Since changes are smaller, it is easier to isolate the changes that cause a bug after deployment. This makes it easier to fix or roll back changes if necessary&lt;/li&gt;
&lt;li&gt;  Since CI/CD encourages small, frequent changes, code review time is shorter&lt;/li&gt;
&lt;li&gt;  A major part of the CI/CD pipeline is the automated testing of critical flows for a project. This makes it easier to prevent changes that may break these flows in production&lt;/li&gt;
&lt;li&gt;  Better code quality is ensured because you can configure the pipeline to test against linting rules&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s consider how we can use GitHub Actions to configure a CI/CD pipeline for a Node.js project. Before we jump into the code, let us get a brief overview of GitHub Actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-github-actions"&gt;
  &lt;/a&gt;
  What are GitHub Actions?
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions"&gt;GitHub documentation&lt;/a&gt; on GitHub Actions, "GitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline. You can create workflows that build and test every pull request to your repository, or deploy merged pull requests to production."&lt;/p&gt;

&lt;p&gt;This means that with GitHub Actions, you can set up CI/CD pipelines that run when certain actions are taken on a repository. You can decide to run tests for every pull request (PR) created or merged, you can automatically deploy merged PR, and you can even set up a workflow to add the appropriate labels when a PR is created.&lt;/p&gt;

&lt;p&gt;So how does it work? We will use an example to explain how to set it up for a repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-github-actions"&gt;
  &lt;/a&gt;
  Setting up GitHub Actions
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; Create a repository on GitHub, or you can use an existing repository. In the repository, click on the &lt;code&gt;Actions&lt;/code&gt; tab. You will see this screen. A simple workflow with the minimum necessary structure is already suggested, and you have the option to set up a workflow yourself.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9GP35bvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/setting-up-github-actions.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9GP35bvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/setting-up-github-actions.png" alt="Getting Started with GitHub Actions" width="730" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Configure&lt;/strong&gt; button for the &lt;strong&gt;Simple workflow.&lt;/strong&gt; You will see this page. Let us try to understand what is going on here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--riypQHak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/github-actions-simple-workflow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--riypQHak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/github-actions-simple-workflow.png" alt="GitHub Actions Simple Workflow" width="730" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workflows"&gt;
  &lt;/a&gt;
  Workflows
&lt;/h3&gt;

&lt;p&gt;Take note of the directory in which the file is created: &lt;code&gt;.github/workflows&lt;/code&gt;. A workflow is a configurable automated process that runs one or more jobs. You can see the workflow file created here is a YAML file. A workflow is defined by a YAML file in your &lt;code&gt;.github/workflows&lt;/code&gt; directory and it is triggered by an event defined in the file.&lt;/p&gt;

&lt;p&gt;The file created contains the code below. We will use this to explain other components of GitHub Actions, the workflow being one component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is a basic workflow to help you get started with Actions&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CI&lt;/span&gt;

&lt;span class="c1"&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Triggers the workflow on push or pull request events but only for the main branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;# Allows you to run this workflow manually from the Actions tab&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# This workflow contains a single job called "build"&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checks out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a single command using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run a one-line script&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello, world!&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run a multi-line script&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo Add other actions to build,&lt;/span&gt;
          &lt;span class="s"&gt;echo test, and deploy your project.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h3&gt;

&lt;p&gt;In every workflow created, you need to specify a specific event that triggers the workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Triggers the workflow on push or pull request events but only for the main branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This snippet from the sample workflow indicates that the workflow will be run whenever a push or pull request is made to the &lt;code&gt;main&lt;/code&gt; branch. A workflow can also be scheduled to run at certain times, like a cron job. You can &lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#scheduled-events"&gt;read about it here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jobs"&gt;
  &lt;/a&gt;
  Jobs
&lt;/h3&gt;

&lt;p&gt;A job is a set of steps that a workflow should execute on the same runner. This could either be a shell script or an action. Steps are executed in order in the same runner and are dependent on each other. This is good because data can be shared from one step to another.&lt;/p&gt;

&lt;p&gt;Jobs are run in parallel, but you can also configure a job to depend on another job. For instance, you may want to deploy a merged PR only when the build succeeds or tests have passed.&lt;/p&gt;

&lt;p&gt;Runners &lt;br&gt;
This indicates the server the job should run on. It could be Ubuntu Linux, Microsoft Windows, or macOS, or you can host your own runner that the job should run on.&lt;/p&gt;

&lt;p&gt;In the sample workflow, we want the job to run on the latest version of Ubuntu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#actions"&gt;
  &lt;/a&gt;
  Actions
&lt;/h3&gt;

&lt;p&gt;An action performs a complex, repetitive task. It is a custom application for the GitHub Actions platform. Actions are really important to reduce the amount of code you need to set up a workflow. You can either write an action or use an already existing action from the GitHub Marketplace.&lt;/p&gt;

&lt;p&gt;Here’s a snippet of an action that is used in the sample workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For our application, we will need to use a Node.js action to build our Node application and a Heroku action to deploy our application. We will get back to this later.&lt;/p&gt;

&lt;p&gt;For now, rename the file to a name of your choice. I’ll rename mine to &lt;code&gt;main.yml&lt;/code&gt; and refer to it later. Commit this workflow (click on the &lt;strong&gt;Start commit&lt;/strong&gt; button), then merge and clone our repository into our local machine.&lt;/p&gt;

&lt;p&gt;To see GitHub Actions at work, let us create a very simple Node application in the project we just cloned. If you want to add GitHub Actions to an existing project, you may skip this part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;Let’s install the dependencies we need. We will be using Express for our application and Jest and SuperTest for testing the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express 
npm &lt;span class="nb"&gt;install &lt;/span&gt;jest supertest &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-the-application-and-adding-tests"&gt;
  &lt;/a&gt;
  Creating the application and adding tests
&lt;/h3&gt;

&lt;p&gt;Next, we add &lt;code&gt;index.js&lt;/code&gt; and &lt;code&gt;app.js&lt;/code&gt; files to an &lt;code&gt;src&lt;/code&gt; directory. In your terminal, run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;src
&lt;span class="nb"&gt;cd &lt;/span&gt;src
&lt;span class="nb"&gt;touch &lt;/span&gt;index.js app.js app.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the created &lt;code&gt;app.js&lt;/code&gt; file and add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;index.js&lt;/code&gt; file, add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example app listening on port 3000!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s also add a test for the endpoint we just created. In the &lt;code&gt;app.test.js&lt;/code&gt;, add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supertest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;supertest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;supertest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/test endpoint&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should return a response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;package.json&lt;/code&gt; file, add the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; scripts to the scripts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node src"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest src/app.test.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npm start&lt;/code&gt; and &lt;code&gt;npm test&lt;/code&gt; to ensure that everything works as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-workflow"&gt;
  &lt;/a&gt;
  Setting up the workflow
&lt;/h2&gt;

&lt;p&gt;Let us get back to our GitHub workflow we pulled from our repository: the &lt;code&gt;main.yml&lt;/code&gt; file, or whatever you named yours. We will modify this file to build the application and run tests whenever a pull request is merged to the &lt;code&gt;main&lt;/code&gt; branch, and deploy this application to Heroku.&lt;/p&gt;

&lt;p&gt;So in that file, change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Controls when the workflow will run&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we are building a Node application, we need an action to set up Node.js for build. We do not need to build this from scratch since this action is already available in the GitHub Marketplace. So we go to GitHub Marketplace to find an action we can use.&lt;/p&gt;

&lt;p&gt;On GitHub, click on &lt;code&gt;Marketplace&lt;/code&gt; in the top navigation. Search for Node and you see a &lt;strong&gt;Setup Node.js Environment&lt;/strong&gt; action under &lt;strong&gt;Actions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jq943fzL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/github-set-up-node-js-environment.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jq943fzL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/github-set-up-node-js-environment.png" alt="GitHub Setup Node.js Environment" width="730" height="401"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on it to see a description of the action and how to use it. You will see this screen with a description.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vuJ13_2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/description-set-up-node-js-environment.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vuJ13_2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/description-set-up-node-js-environment.png" alt="Setup Node.js Environment Description" width="730" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to replace the steps in our workflow with the steps here.&lt;/p&gt;

&lt;p&gt;So we replace this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a single command using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run a one-line script&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello, world!&lt;/span&gt;

      &lt;span class="c1"&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run a multi-line script&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo Add other actions to build,&lt;/span&gt;
          &lt;span class="s"&gt;echo test, and deploy your project.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14.x'&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can make it more understandable by adding names to the steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Use Node.js&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;14.x"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run test&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, if we push this to our main branch, we will see this action run. But because we want to go a step further to add automatic deployment to Heroku, we will add a second job to our workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-to-heroku"&gt;
  &lt;/a&gt;
  Deploy to Heroku
&lt;/h2&gt;

&lt;p&gt;Once again, we do not need to build the action for this deployment from scratch. The GitHub Marketplace saves the day. So we will go back to the marketplace and search for &lt;strong&gt;Deploy to Heroku&lt;/strong&gt;. You can decide to use an action of your choice for this depending on your needs. If you run your app in a Docker container, you may want to use the ones for Docker.&lt;/p&gt;

&lt;p&gt;We will use the first action “Deploy to Heroku” by AkhileshNS because we are deploying a simple Node.js application. Let’s click on it to see how to use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--42HN48w1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/deploy-heroku-github-actions-node-js-project.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--42HN48w1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/deploy-heroku-github-actions-node-js-project.png" alt="Deploy to Heroku" width="730" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Under the &lt;strong&gt;Getting Started&lt;/strong&gt; section, there are details on how to use the action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6V3qhxV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/getting-started-heroku-github-node-js.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6V3qhxV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/getting-started-heroku-github-node-js.png" alt="Getting Started with Heroku" width="730" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will copy the sample code there in the build part, add it to the jobs, and modify it to suit our needs. So, add this to the &lt;code&gt;main.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;akhileshns/heroku-deploy@v3.12.12&lt;/span&gt; &lt;span class="c1"&gt;# This is the action&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;heroku_api_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.HEROKU_API_KEY}}&lt;/span&gt;
          &lt;span class="na"&gt;heroku_app_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;YOUR&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;APP's&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NAME"&lt;/span&gt; &lt;span class="c1"&gt;#Must be unique in Heroku&lt;/span&gt;
          &lt;span class="na"&gt;heroku_email&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;YOUR&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;EMAIL"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we already have a build job, we will rename this job to &lt;code&gt;deploy&lt;/code&gt;. Also, we need this job to run only when the tests run successfully, so to prevent it from running in parallel to the build job, we will add that it depends on the build.&lt;/p&gt;

&lt;p&gt;The code above will be modified to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;akhileshns/heroku-deploy@v3.12.12&lt;/span&gt; 
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;heroku_api_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.HEROKU_API_KEY}}&lt;/span&gt;
          &lt;span class="na"&gt;heroku_app_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;YOUR&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;APP's&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;NAME"&lt;/span&gt; &lt;span class="c1"&gt;#Must be unique in Heroku&lt;/span&gt;
          &lt;span class="na"&gt;heroku_email&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;YOUR&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;EMAIL"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now notice that for this job to run, we need a Heroku account. That is where you will get &lt;code&gt;HEROKU_API_KEY&lt;/code&gt; and a Heroku app name. If you do not have an account, you can &lt;a href="https://signup.heroku.com"&gt;sign up here&lt;/a&gt;. After signing up, or if you already have an account, you can get your &lt;code&gt;HEROKU_API_KEY&lt;/code&gt; from your account settings. Click on the image on the top right part of the navigation to get to your account settings. Scroll down to API Key to copy your API key.&lt;/p&gt;

&lt;p&gt;For our workflow to have access to this key, we need to add it to the &lt;strong&gt;Secrets&lt;/strong&gt; of our repository. So in your Github repo, go to &lt;strong&gt;Settings &amp;gt; Secrets&lt;/strong&gt; and click on &lt;strong&gt;New Secret&lt;/strong&gt;. Enter &lt;strong&gt;HEROKU_API_KEY&lt;/strong&gt; as the name and paste the copied API key from Heroku as the value.&lt;/p&gt;

&lt;p&gt;After that, to ensure that our Heroku app name is unique and to prevent our deployment from failing, we can create a new app on Heroku. On your dashboard, click on &lt;strong&gt;New&lt;/strong&gt; and follow the steps to create the app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69Aygj1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/create-new-heroku-app.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69Aygj1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/create-new-heroku-app.png" alt="Create New Heroku App" width="730" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the app name and update the workflow with your created app name and your Heroku email address.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-workflow"&gt;
  &lt;/a&gt;
  Testing the workflow
&lt;/h2&gt;

&lt;p&gt;We are ready to test our workflow now. To ensure that everything is in place, here is what the &lt;code&gt;main.yml&lt;/code&gt; file should contain. Since this is a YAML file, ensure that it is spaced correctly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Main&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Use Node.js&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;14.x"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run test&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm test&lt;/span&gt;

  &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;akhileshns/heroku-deploy@v3.12.12&lt;/span&gt; 
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;heroku_api_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.HEROKU_API_KEY}}&lt;/span&gt;
          &lt;span class="na"&gt;heroku_app_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sarah-oo"&lt;/span&gt;
          &lt;span class="na"&gt;heroku_email&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sarahchimao@gmail.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s commit this and push to our main branch.&lt;/p&gt;

&lt;p&gt;If you go to the &lt;strong&gt;Actions&lt;/strong&gt;, you will see that your push triggered a workflow run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qxEOjLIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/github-actions-add-workflow-view.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qxEOjLIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/github-actions-add-workflow-view.png" alt="GitHub Actions Add Workflow" width="730" height="58"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can click on the workflow to get details about its progress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--daZBeRiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/github-actions-workflow-details.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--daZBeRiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/github-actions-workflow-details.png" alt="GitHub Actions Workflow Details" width="730" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see from the image above that the build was successful and the deployment is ongoing. Also notice that the deploy job ran only after the build job completed. If all goes well, you will get a successful deployment like the one below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_LME-Ugj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/successful-heroku-deployment-github-node-js.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_LME-Ugj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2022/01/successful-heroku-deployment-github-node-js.png" alt="Successful Heroku Deployment" width="730" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s view our deployed app. Go to &lt;code&gt;&amp;lt;Name of your app&amp;gt;.herokuapp.com/test&lt;/code&gt; and you should see “Hello, world!” on the screen.&lt;/p&gt;

&lt;p&gt;Great work for making it this far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we have discussed what CI/CD is and its advantages. We also discussed GitHub Actions and used a simple workflow to show how you can set up a CI/CD pipeline with it. You can create multiple workflows for the needs of your repository. For instance, if you work on a repository with many contributors, you can decide to create a workflow that runs when a pull request to the main branch is created, and another that runs when the pull request is merged.&lt;/p&gt;

&lt;p&gt;One good thing about GitHub Actions is that you do not have to build all the actions needed for your workflows from scratch. The marketplace already has a lot of actions you can use or customize to suit your needs. You can also build custom actions that are specific to the needs of your organization. All of these make GitHub Actions an exciting tool to use to build a CI/CD pipeline.&lt;/p&gt;

&lt;p&gt;Thanks for reading and I really hope this tutorial serves as a good guide to get started with &lt;a href="https://blog.logrocket.com/github-actions-how-to-autodeploy-your-app/"&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For further reading, you can reference the &lt;a href="https://docs.github.com/en/actions"&gt;official documentation&lt;/a&gt; on GitHub Actions.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#200s-only-heavycheckmark-monitor-failed-and-slow-network-requests-in-production"&gt;
  &lt;/a&gt;
  200’s only ✔️ Monitor failed and slow network requests in production
&lt;/h2&gt;

&lt;p&gt;Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, &lt;a href="https://logrocket.com/signup/"&gt;try LogRocket.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1zhbpx-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1zhbpx-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" alt="LogRocket Sign Up" width="880" height="348"&gt;&lt;/a&gt;&lt;a href="https://logrocket.com/signup/"&gt;https://logrocket.com/signup/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is like a DVR for web and mobile apps, recording literally everything that happens while a user interacts with your app. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.&lt;/p&gt;

&lt;p&gt;LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. &lt;a href="https://logrocket.com/signup/"&gt;Start monitoring for free.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
    </item>
    <item>
      <title>Automate sending monthly invoices</title>
      <author>Chirag</author>
      <pubDate>Thu, 13 Jan 2022 21:09:00 +0000</pubDate>
      <link>https://dev.to/chiragsrvstv/automate-sending-monthly-invoices-321n</link>
      <guid>https://dev.to/chiragsrvstv/automate-sending-monthly-invoices-321n</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-submission"&gt;
  &lt;/a&gt;
  Overview of Submission
&lt;/h3&gt;

&lt;p&gt;Generate and send automated monthly invoices with ease 🏎 &lt;br&gt;
This project might be helpful you if you usually end up in a situation where you need to manually generate invoices(pdf) at the end of every month and need to email it to your clients/orgs. This project aims to solve that particular pain point by automating the whole flow. It could be ran locally from the cli or could be deployed as a serverless function on realm that'd trigger every month ✌️&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Automation Innovation&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/chiragsrvstv"&gt;
        chiragsrvstv
      &lt;/a&gt; / &lt;a href="https://github.com/chiragsrvstv/invoice-sender"&gt;
        invoice-sender
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Automate emailing monthly pdf invoices
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Automated Invoice Sender&lt;/h1&gt;
&lt;p&gt;Generate and send automated monthly invoices with ease 🏎 &lt;br&gt;
This project might be helpful you if you usually end up in a situation where you need to manually generate invoices(pdf) at the end of every month and need to email it to your clients/orgs. This project aims to solve that particular pain point by automating the whole flow. It could be ran locally from the cli or could be deployed as a serverless function that'd trigger every month ✌️&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;The project uses a sample html invoice template which is then filled with relevant data and a pdf file is generated out of it. Then this pdf file is attached in the email and then finally is sent to the relevant recipients. You can always consider using own html template and use the same variables to generate and send a custom invoice.&lt;/p&gt;
&lt;h2&gt;
Installation and setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone or…&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/chiragsrvstv/invoice-sender"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://day.js.org/en/"&gt;https://day.js.org/en/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodemailer.com/about/"&gt;https://nodemailer.com/about/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/html-pdf?activeTab=readme"&gt;https://www.npmjs.com/package/html-pdf?activeTab=readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/mustache"&gt;https://www.npmjs.com/package/mustache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Why the VAR and LET keywords shouldn't be used interchangeably</title>
      <author>Richard Oliver Bray</author>
      <pubDate>Thu, 13 Jan 2022 21:07:19 +0000</pubDate>
      <link>https://dev.to/richardbray/why-the-var-and-let-keywords-shouldnt-be-used-interchangeably-3n07</link>
      <guid>https://dev.to/richardbray/why-the-var-and-let-keywords-shouldnt-be-used-interchangeably-3n07</guid>
      <description>&lt;p&gt;If you'd asked me about the &lt;strong&gt;var&lt;/strong&gt; and &lt;strong&gt;let&lt;/strong&gt; Javascript keywords about a week ago I would say for the most part, they are interchangeable. Yes &lt;em&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;/em&gt; is function scoped and &lt;em&gt;&lt;strong&gt;let&lt;/strong&gt;&lt;/em&gt; is block scoped but I really ran into a situation where switching them around caused any issues. Until recently...&lt;/p&gt;

&lt;p&gt;A friend of mine show me this piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Output &amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;span class="c1"&gt;// 3 (immediately)&lt;/span&gt;
&lt;span class="c1"&gt;// 3 (after one second)&lt;/span&gt;
&lt;span class="c1"&gt;// 3 (after two seconds)&lt;/span&gt;

&lt;span class="o"&gt;---&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Output &amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;span class="c1"&gt;// 0 (immediately)&lt;/span&gt;
&lt;span class="c1"&gt;// 1 (after one second)&lt;/span&gt;
&lt;span class="c1"&gt;// 2 (after two seconds)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I assumed it would loop though 0-2 with both keywords but I was shocked to see it only did that when &lt;strong&gt;let&lt;/strong&gt; was used and not &lt;strong&gt;var&lt;/strong&gt;. At the time I had no idea why that was the case so I did some research and thought I'd put my findings in a post for others to learn from.&lt;/p&gt;

&lt;p&gt;To fully understand why this happens we need to talk about two things; &lt;strong&gt;scope&lt;/strong&gt; and &lt;strong&gt;the event loop&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-scope"&gt;
  &lt;/a&gt;
  1. Scope
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;var&lt;/em&gt;&lt;/strong&gt; keyword has function level scope and the &lt;strong&gt;&lt;em&gt;let&lt;/em&gt;&lt;/strong&gt; keyword has block level scope, but what does that actually mean?&lt;/p&gt;

&lt;p&gt;Scope in most programming languages refers to the access functions and objects have to variables depending on where they are placed. There is a great &lt;a href="https://www.youtube.com/watch?v=SBwoFkRjZvE"&gt;video by LeanCode.academy&lt;/a&gt; that explains the details of what scope is, but for the code I shared above, when the &lt;strong&gt;var&lt;/strong&gt; keyword is used, it can be read and reassigned outside of the loop within the fn function. When &lt;strong&gt;let&lt;/strong&gt; is used, it cannot be read or reassigned outside of the loop even within the function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-ffd_Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gh6761ii4to8u3xbc2rj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-ffd_Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gh6761ii4to8u3xbc2rj.png" alt="the difference between block and function scope" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-event-loop"&gt;
  &lt;/a&gt;
  2. The event loop
&lt;/h2&gt;

&lt;p&gt;Javascript is a single-thread language, I won't go into detail on what that means in this post, all you need to know is that it can't execute multiple things at the same time. However, with the power of the &lt;strong&gt;event loop&lt;/strong&gt; Javascript can give the illusion executing multiple things by putting some code aside and coming back to it later, when this happens really fast it sort of feels like multiple things are running at the same time. This is how the setTimeout function works.&lt;/p&gt;

&lt;p&gt;There's a great &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;video by Philip Roberts&lt;/a&gt; that explains in detail how the event loop works but for this post I'm going to simplify it a bit for our case.&lt;/p&gt;

&lt;p&gt;Javascript code in the browser is placed in the &lt;strong&gt;call stack&lt;/strong&gt; before being executed. If the code needs to be executed later (if it's a promise or setTimeout etc...) it is handled by some &lt;strong&gt;browser APIs&lt;/strong&gt; (which we won't talk about in detail), before going into the &lt;strong&gt;task&lt;/strong&gt; or &lt;strong&gt;event queue&lt;/strong&gt;. The &lt;strong&gt;event loop&lt;/strong&gt; is constantly checking if the call stack is empty, if it is, it will add an event from the event queue to the call stack to be executed. Let's go through our code with the event loop in mind.&lt;/p&gt;

&lt;p&gt;a. When our code first runs it adds our main function (fn), then the loop to the call stack. This happens for both let and var versions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IZk5niY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zdr8c1jcrvpciqs6kwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IZk5niY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zdr8c1jcrvpciqs6kwb.png" alt="main function and loop added to call stack" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;b. The first setTimeout is reached then added to the call stack, but then moved to the browser APIs to be handled later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKsL2r1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q262ljwth6nzced54uhp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKsL2r1t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q262ljwth6nzced54uhp.png" alt="first setTimeout moved to browser API" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;c. The first setTimeout has an instruction to execute after 0 milliseconds (1000 * i where i is 0 on the first loop). So that immediately get's sent to the event loop and will stay there until the call stack is empty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lYoX_BTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vualo2hrxz5vg91epwf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lYoX_BTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vualo2hrxz5vg91epwf4.png" alt="first setTimeout gets sent to event queue" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;d. The loop will run two more times and move the following setTimeout functions from the call stack to browser APIs with instructions to execute after 1000 and 2000 milliseconds respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--civV5d5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k11x9spk1jreg619ipx8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--civV5d5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k11x9spk1jreg619ipx8.png" alt="all setTimeouts added to browser API column" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e. After that's done the loop and the main function are popped off the call stack, the event loop checks if there's anything in the event queue and since there is, that get's moved to the call stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVxSzR7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1scohct2nmjh4wdq0brl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVxSzR7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1scohct2nmjh4wdq0brl.png" alt="call stack is empty and first setTimeout move to it because of event loop" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;f. At this point the first setTimeout function will run and &lt;strong&gt;i&lt;/strong&gt; will be set &lt;strong&gt;at the time this executes&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Bear in mind that the loop has already run three times at this point, so when &lt;strong&gt;var&lt;/strong&gt; is used by the time this executes &lt;em&gt;i&lt;/em&gt; is equal to 3, why? The first time the loop runs &lt;em&gt;i&lt;/em&gt; is 0, then 1, then 2. Because var is function scoped it will increment from 2 to 3 and then not run the loop. &lt;/p&gt;

&lt;p&gt;In the case of &lt;strong&gt;let&lt;/strong&gt; however, because it is block scoped, even after the loop has run three times when &lt;em&gt;this&lt;/em&gt; setTimeout executes, the value of &lt;em&gt;i&lt;/em&gt; is 0, it hasn't been reassigned.&lt;/p&gt;

&lt;p&gt;g. The next setTimeout function moves to the event queue after 1000 milliseconds then with the help of the event loop quickly moves into the empty call stack and executes. Again at this stage if the &lt;strong&gt;var&lt;/strong&gt; keyword is used &lt;em&gt;i&lt;/em&gt; will equal 3, but for &lt;strong&gt;let&lt;/strong&gt; when the console log runs it looks for the block scoped value of &lt;em&gt;i&lt;/em&gt; is 1, this was retained when this event was first moved from the call stack to the browser api so that will print 1 to the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5t2_DpwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsemi3zyg0io6u178nty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5t2_DpwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsemi3zyg0io6u178nty.png" alt="The remaining setTimeout functions moving through the event loop cycle" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You've probably figured out what happens to the last setTimeout function so I won't go through that.&lt;/p&gt;




&lt;p&gt;If you add a breakpoint to the function in the setTimeout and look in the Chrome dev tools the difference between function and block scoping is a tiny bit more obvious.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TUbKjmoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5njmwyabuqxr7ly2of7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TUbKjmoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5njmwyabuqxr7ly2of7s.png" alt="different between let and var in Chrome dev tools" width="354" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;var&lt;/strong&gt; shows the function scoped variable in the main function (fn), but &lt;strong&gt;let&lt;/strong&gt; shows the loop (_loop_1) inside the main function which is the extra bit of information saved in the event that goes through the event loop remembering the block scoped value of the variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;I know this post is quite long but I hope you found it useful. Whenever you can, use &lt;strong&gt;let&lt;/strong&gt; instead of &lt;strong&gt;var&lt;/strong&gt; . If you can't, there ware ways of getting block scoping with &lt;strong&gt;var&lt;/strong&gt; but it results in some weird looking code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding 🧑🏿‍💻&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.outsystems.com/blog/posts/asynchronous-vs-synchronous-programming/"&gt;https://www.outsystems.com/blog/posts/asynchronous-vs-synchronous-programming/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.educative.io/edpresso/what-is-an-event-loop-in-javascript"&gt;https://www.educative.io/edpresso/what-is-an-event-loop-in-javascript&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/31285911/why-let-and-var-bindings-behave-differently-using-settimeout-function"&gt;https://stackoverflow.com/questions/31285911/why-let-and-var-bindings-behave-differently-using-settimeout-function&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>keywords</category>
      <category>variables</category>
    </item>
    <item>
      <title>SignPost - A Geo-Social Network (Atlas Hackathon)</title>
      <author>Matthew Lucas</author>
      <pubDate>Thu, 13 Jan 2022 21:01:38 +0000</pubDate>
      <link>https://dev.to/notmattlucas/signpost-a-geo-social-network-atlas-hackathon-ied</link>
      <guid>https://dev.to/notmattlucas/signpost-a-geo-social-network-atlas-hackathon-ied</guid>
      <description>&lt;p&gt;For those of us who have had the good sense and fortune (or possibly misfortune?) to play one of the Dark Souls series, we're intimately familiar with the mystical orange soapstone. This item allows players to drop messages anywhere within their world that will then appear to other players in their own worlds. These are used to hint, warn, amuse or (more often than not troll) other players as they journey through the treacherous land of Lordran.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--95tUlBwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aqidzw5kcth10r79s9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--95tUlBwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2aqidzw5kcth10r79s9b.png" alt="SignPost" width="477" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I took inspiration from the idea of the orange soapstone - specifically being able to drop messages at any location for others to read - and came up with the idea of 'SignPost', a geo-social network. This is a platform that allows you to drop messages (signposts) anywhere you like and to read the messages other people have left, where you're located. This could be great for directions, sports (cross-country hiking), games, etc - but is mostly just a fun idea for a hackathon.&lt;/p&gt;

&lt;p&gt;SignPost is an Android app supported exclusively by the MongoDB Atlas platform, from user-authentication and login through to geo-querying and search. The app has four core features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Signup and authentication using your Google credentials (via MongoDB Realm).&lt;/li&gt;
&lt;li&gt;Browsing a map marked with "signposts" - messages dropped by other users near your location.&lt;/li&gt;
&lt;li&gt;Dropping a signpost yourself.&lt;/li&gt;
&lt;li&gt;Searching for signposts across the world &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#1-a-map-filled-with-signposts"&gt;
  &lt;/a&gt;
  1. A map filled with signposts
&lt;/h4&gt;

&lt;p&gt;Once logged in (via your Google credentials) you're presented with a map zoomed in on your current location. The app fetches any messages in your local area and plots them on the map for you to interact with. These appear as orange markers, and will display the message when touched.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RDmtvayeyg0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-dropping-your-own-signpost-on-the-map"&gt;
  &lt;/a&gt;
  2. Dropping your own signpost on the map
&lt;/h4&gt;

&lt;p&gt;If you have something to say you can easily post your own message on the map. Just tap the exact point at which you want to post it and type away.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/77qtHJAXCio"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-searching-for-signposts-across-the-world"&gt;
  &lt;/a&gt;
  3. Searching for signposts across the world
&lt;/h4&gt;

&lt;p&gt;You can search for messages across the whole world, thanks to the Atlas search integration. Simply click the search icon (top right) pick the message from your search results and your map will be immediately transported around the world.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TD9oVm_x9vY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-does-it-all-hang-together"&gt;
  &lt;/a&gt;
  How does it all hang together?
&lt;/h4&gt;

&lt;p&gt;The SignPost app is backed completely by the MongoDB Atlas platform, and uses a number of its features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Realm / Google Authentication&lt;/strong&gt; to seamlessly add google user signon and tracking to the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MongoDB Atlas with Geospatial Indexes&lt;/strong&gt; to allow the plotting of messages with their latitude/longitude co-ordinates, and to query records within the locality of a point.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Atlas Search&lt;/strong&gt; to make it trivial to map the signpost messages into a free text search.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Realm Functions&lt;/strong&gt; to provide a serverless set of backend APIs for the three key functions of the app - reading, writing and searching for messages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3fA66x16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ejhty2yb4qps3t17civ.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fA66x16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ejhty2yb4qps3t17civ.jpg" alt="Architecture" width="880" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In summary, MongoDB Atlas was able to provide a complete back-end stack (with the exception of Google Maps) to develop a fully functional Android application, even though I'd never written a line of Android code before 😲&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lucas-matt"&gt;
        lucas-matt
      &lt;/a&gt; / &lt;a href="https://github.com/lucas-matt/signpost"&gt;
        signpost
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/manual/geospatial-queries/"&gt;Geospatial Queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/authentication/google/"&gt;Google Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/manual/geospatial-queries/"&gt;Geospatial Queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.atlas.mongodb.com/atlas-search/"&gt;Atlas Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/realm/functions/"&gt;Realm Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>atlashackathon</category>
    </item>
  </channel>
</rss>
