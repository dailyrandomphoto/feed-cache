<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Adding Google Authentication Feature.</title>
      <author>Kirti </author>
      <pubDate>Sun, 23 Jan 2022 08:13:11 +0000</pubDate>
      <link>https://dev.to/kirtisingh3008/adding-google-authentication-feature-25a4</link>
      <guid>https://dev.to/kirtisingh3008/adding-google-authentication-feature-25a4</guid>
      <description>&lt;p&gt;Hey everyone! In this article, we will be adding a new feature &lt;strong&gt;Google AUTH&lt;/strong&gt; to our login Form.&lt;br&gt;
Let's start with basics install a react app using the below commands in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;google_auth&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;google_auth&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's quickly install a very popular package  &lt;em&gt;react-google-login&lt;/em&gt;  to display a ‚ÄúLog in with Google‚Äù button which will help us in retrieving information about the user and will also handle displaying a google login prompt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now after that write these lines of code in the App.js file i have added the explanation to each line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GoogleLogin&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-google-login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// importing library&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Function for displaying response in console&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profileObj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* It takes some props as clientId , ButtonText
      onSuccess , onFailure, cookiePolicy= {single_host_origin} */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GoogleLogin&lt;/span&gt;
         &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;
         &lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Login with Google&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
         &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;displayResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nx"&gt;onFailure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;displayResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nx"&gt;cookiePolicy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;single_host_origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, as you can see the clientId is yet not there, so for that go to "Google API console" and in there add a new project, just add your project name and done.&lt;br&gt;
Now switch to the project which you just added. Go to credentials.&lt;br&gt;
After that go to &lt;strong&gt;configure consent screen&lt;/strong&gt; and after that click on &lt;strong&gt;"External"&lt;/strong&gt; after that click on create.&lt;br&gt;
Now it will ask you to fill in some more details like application name(not the same as your project's name). You have to also enter the support email id and after that just keep on clicking save and next.&lt;br&gt;
Now, go back to the credentials tab again and click on create credentials. Here click on &lt;strong&gt;Create OAuth client ID&lt;/strong&gt; and in there add application type to be Web application and add URI to where you want to use your google login.&lt;br&gt;
Yuhuu!!! we generated our keys.&lt;br&gt;
Now, simply copy and paste the code in the code editor where clientID ="Our Above steps result".&lt;/p&gt;

&lt;p&gt;Now, just run your react app and click on the login button you will see something like this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1OVam-3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4az8nbfnzqkarmb90c2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1OVam-3z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4az8nbfnzqkarmb90c2.jpg" alt="Working" width="880" height="890"&gt;&lt;/a&gt;&lt;br&gt;
and after you log in with any of the accounts it will display it in the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C80ZUme2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibcr11i0z459qus869z3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C80ZUme2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibcr11i0z459qus869z3.png" alt="Working" width="880" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have attached the GitHub code for the same.&lt;br&gt;
&lt;a href="https://github.com/kirtisingh3008/web-dev/tree/main/google_auth"&gt;Github&lt;/a&gt;&lt;br&gt;
Thank You!!!üôÇüôÇ&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Pug HTML for beginners | All-time-dev?</title>
      <author>All-time-dev</author>
      <pubDate>Sun, 23 Jan 2022 08:03:28 +0000</pubDate>
      <link>https://dev.to/alltimedev/what-is-pug-html-for-beginners-all-time-dev-5d38</link>
      <guid>https://dev.to/alltimedev/what-is-pug-html-for-beginners-all-time-dev-5d38</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-pug-html-for-beginners-alltimedev"&gt;
  &lt;/a&gt;
  What is Pug HTML for beginners | All-time-dev?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1iE2JuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gputhzsk5gtp8ej3n2ct.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1iE2JuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gputhzsk5gtp8ej3n2ct.jpg" alt="Pug HTML" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, we are going to know about PUG which is a very important topic for you if you are a backend developer we will know the history of PUG, what is a pug and its uses what are template engines, and more. So, if you are interested and if you like our today's post then share it with your developer friends. So, that they can also gain some knowledge about PUG.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pug"&gt;
  &lt;/a&gt;
  What is PUG?
&lt;/h2&gt;

&lt;p&gt;Pug is a template engine for NODE JS means that if you write any PUG code then it will compile into HTML and its syntax will become simple which will help you understand your code better and eventually, it will increase productivity while coding and it also helps in writing reusable HTML code and it also helps in pulling data from a database while using an API from Rapid Apis or any other site but if you don't know what is a template Engine then it enables you to use Static template files on your web app. At Runtime means Node JS which is a JS(JavaScript) runtime. In this case, Pug which is a template engine will replace the variables in the file with actual values and will transform the file into an HTML file which helps you to design an HTML page and will also help you make it dynamic easily if you are using NODE JS and Mongo DB. So, simple Pug is a template engine for NODE JS which helps you to write HTML in the backend for a better understanding of code and easy reusability, and if you are thinking that if I am writing Node JS then can we only use PUG with Node JS then no we can also use with PHP, Python and several other languages and different languages have there different template engines like Python have its own template engine named Mako and JavaScript also has its own template engine named Jade/Pug, ejs (Embedd JavaScript)and some template engines also supports more than one language like Mustache which supports Ruby, JavaScript, Python, Erlang, Objective-C, Go, Lua, Scala, Node JS, Python, Java, .Net, Android, C++, C, C# and more and there is a important fact about Pug is that its old name was Jade which was changed into pug due to a trademark.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-5-tools-which-are-integrable-with-pug"&gt;
  &lt;/a&gt;
  Top 5 tools which are integrable with Pug
&lt;/h2&gt;

&lt;p&gt;Pug is very awesome and it has some integrable with some tools that you can use to increase your productivity and to use it for more uses like creating backend, for generating HTML websites, charting and more. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Lad which is a Node JS framework&lt;/li&gt;
&lt;li&gt;Node JS which is JavaScript Runtime&lt;/li&gt;
&lt;li&gt;Prepros which is a compiler&lt;/li&gt;
&lt;li&gt;Squido which is a HTML website generator&lt;/li&gt;
&lt;li&gt;Anychart for charting&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#popular-companies-using-pug"&gt;
  &lt;/a&gt;
  Popular companies using Pug
&lt;/h2&gt;

&lt;p&gt;As Pug is very popular for serving dynamic content with Node JS then there are a lot of companies who is using Pug for growing their business like -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Glovo&lt;/li&gt;
&lt;li&gt;Coursera&lt;/li&gt;
&lt;li&gt;1mg&lt;/li&gt;
&lt;li&gt;Chiper&lt;/li&gt;
&lt;li&gt;Shimo website&lt;/li&gt;
&lt;li&gt;Barogo&lt;/li&gt;
&lt;li&gt;Accenture&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Top 10 template engines rather than Pug&lt;br&gt;
Pug is a very popular JavaScript template engine but there some more template engines which are even more better than Pug. Now, I will tell only the names of those template engines but if you want a complete post on that topic then you can comment below. I will definitely create a post on that topic.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mustache. &lt;/li&gt;
&lt;li&gt;Underscore Templates&lt;/li&gt;
&lt;li&gt;Embedded JS Templates&lt;/li&gt;
&lt;li&gt;HandlebarsJS. &lt;/li&gt;
&lt;li&gt;NunJucks&lt;/li&gt;
&lt;li&gt;UnderScore JS&lt;/li&gt;
&lt;li&gt;Webix&lt;/li&gt;
&lt;li&gt;Hogan.JS&lt;/li&gt;
&lt;li&gt;Swig&lt;/li&gt;
&lt;li&gt;Marko&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, these are some of the popular template engines rather than Pug HTML that you can use as an alternative all of them are very good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-using-pug-better-than-using-html-and-react"&gt;
  &lt;/a&gt;
  Is using Pug better than using HTML and React?
&lt;/h2&gt;

&lt;p&gt;Many people have doughts that why should we use Pug instead of just using HTML which every web developer already knows instead of learning template engines which is new for us then the simple answer is that Pug is more powerful and provides features like conditions, loops, included, mixins like SASS that we can render on reference data or whenever when the users inputs data and it natively supports JavaScript as it is both a JavaScript library and also a JavaScript template engine and an important reference that I have given you in the introduction is that, Pug is important to make website dynamic then yes its very important as if you want to make a website dynamic then at that time you must need Pug to serve dynamic content with NODE JS. So, in this case using Pug with Node JS will be better idea then using HTML with it. but if we choose to use Pug instead of React that's not a good idea as React JS is not only a template engine like Pug JS it is also framework that you can use to create web apps frontend and everyone knows that if you want to create a web app then the best stack is MERN STACK which includes React with Node JS, Express JSand Mongo DB. So, in this case if you want to create a web app then I would recommend using React JS. &lt;/p&gt;

&lt;p&gt;To continue reading the post visit &lt;a href="https://all-time-devlopment.blogspot.com/2022/01/what-is-pug-html-for-beginners-all-time.html"&gt;https://all-time-devlopment.blogspot.com/2022/01/what-is-pug-html-for-beginners-all-time.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Financing your open source project</title>
      <author>VORG</author>
      <pubDate>Sun, 23 Jan 2022 08:00:48 +0000</pubDate>
      <link>https://dev.to/vorg/financing-your-open-source-project-4i2l</link>
      <guid>https://dev.to/vorg/financing-your-open-source-project-4i2l</guid>
      <description>&lt;p&gt;Funding doesn‚Äôt mean your open source project is no longer pure. Financing means you want to take your project further.&lt;/p&gt;

&lt;p&gt;The best form of financing for an open source project is a DAO. But ICO makes people feel that it is purely for making money. Therefore, most DAO tools are not suitable.&lt;/p&gt;

&lt;p&gt;Here is a DAO tool built for developers: &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt; is a decentralized DAO registry based on Ethereum.&lt;/p&gt;

&lt;p&gt;You can create your unique DAO on &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt; and get an associated unique domain name. At the same time, you can raise funds as needed by increasing capital and expanding shares on &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The trading of shares can be completed on &lt;a href="https://vorg.io"&gt;VORG&lt;/a&gt;, and the currency medium of the transaction is &lt;em&gt;Ether&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can refer to &lt;a href="https://dev.to/vorg/vorg-decentralized-company-and-domain-name-registry-599a"&gt;VORG: Decentralized company and domain name registry&lt;/a&gt; to learn how to build a DAO, increase capital and shares, trade, and configure domain names.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Snippets</title>
      <author>Wahid Abduhakimov</author>
      <pubDate>Sun, 23 Jan 2022 07:57:20 +0000</pubDate>
      <link>https://dev.to/wahidd/snippets-236g</link>
      <guid>https://dev.to/wahidd/snippets-236g</guid>
      <description>&lt;p&gt;Code snippets in vscode are used to speedup your coding speed. You can create code snippets for frequently used code blocks of any programming language. &lt;/p&gt;

&lt;p&gt;Watch the video below to learn how to create C# code snippets in no time. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hKBoupCziWI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>coding</category>
    </item>
    <item>
      <title>Introduction to Modern Data Architecture (formerly Lake House)</title>
      <author>Adit Modi</author>
      <pubDate>Sun, 23 Jan 2022 07:39:43 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-modern-data-architecture-formerly-lake-house-29g6</link>
      <guid>https://dev.to/aws-builders/introduction-to-modern-data-architecture-formerly-lake-house-29g6</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Organizations have been building data lakes to analyze massive amounts of data for deeper insights into their data. To do this, they bring data from multiple silos into their data lake, and then run analytics and AI/ML directly on it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is common for these organizations to also have data stored in specialized data stores, such as a NoSQL database, a search service, or a data warehouse, to support different use cases. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To efficiently analyze all of the data spread across the data lake and other data stores, businesses often move data in and out of data lake and between these data stores. This data movement can get complex and messy as the data grows in these stores. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To address this, businesses need a data architecture that not only allows building scalable, cost-effective data lakes but also supports simplified governance and data movement between various data stores. We refer to this as a lake house architecture. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lake house is a modern data architecture that integrates a data lake, a data warehouse, and other purpose-built data stores while enabling unified governance and seamless data movement.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DHehW4bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lui5dzxmu1yfinjvetfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DHehW4bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lui5dzxmu1yfinjvetfl.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Architecture Options for Building an Analytics Application on AWS&lt;/strong&gt; is a Series containing different articles that cover the key scenarios that are common in many analytics applications and how they influence the design and architecture of your analytics environment in AWS. These series present the assumptions made for each of these scenarios, the common drivers for the design, and a reference architecture for how these scenarios should be implemented.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;As shown in the following diagram, with a lake house approach, organizations can store their data in a data lake and also be able to use purpose-built data stores that work with the data lake. This approach allows access to all of their data to make better decisions with agility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vvh4q8_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8nn87cjaam6yr5ua58q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vvh4q8_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8nn87cjaam6yr5ua58q.png" alt="Image description" width="554" height="410"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Modern data architecture&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In a lake house design, there are three different patterns for data movement. They can be described as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inside-out data movement&lt;/strong&gt;: A subset of data in a data lake is sometimes moved to a data store, such as an Amazon OpenSearch Service cluster or an Amazon Neptune cluster, to support specialized analytics, such as search analytics, building knowledge graphs, or both. This pattern is what we consider an inside-out data movement. For example, enterprises send information from structured sources (relational databases), unstructured sources (metadata, media, or spreadsheets) and other assets first to a data lake that is moved to Amazon Neptune to build a knowledge graph.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Outside-in data movement&lt;/strong&gt;: Organizations use data stores that best fit their applications and later move that data into a data lake for analytics. For instance, to maintain game state, player data, session history, and leaderboards, a gaming company right chooses Amazon DynamoDB as the data store. This data can later be exported to a data lake for additional analytics to improve the gaming experience for its players. We refer to this kind of data movement as outside-in.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Around the perimeter&lt;/strong&gt;: In addition to the preceding two patterns, there are scenarios where the data is moved from one specialized data store to another. For example, enterprises might copy customer profile data from their relational database to a NoSQL database to support their reporting dashboards. This data movement is often considered as around the perimeter.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#characteristics"&gt;
  &lt;/a&gt;
  Characteristics
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Scalable data lake&lt;/strong&gt;: A data lake is at the center of a well-architected lake house design. A data lake should be able to scale easily to petabytes and exabytes as data grows. Use a scalable, durable data store that provides the fastest performance at the lowest cost, supports multiple ways to bring data in and has a good partner ecosystem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data diversity&lt;/strong&gt;: Applications generate data in many formats. A data lake should support diverse data types ‚Äî structured, semi-structured, or unstructured.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Schema management&lt;/strong&gt;: A lake house design should support schema on read for a data lake with no strict source data requirement. The choice of storage structure, schema, ingestion frequency, and data quality should be left to the data producer. A data lake should also be able to incorporate changes to the structure of the incoming data, which is referred to as schema evolution. In addition, schema enforcement helps businesses ensure data quality by preventing writes that do not match the schema.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Metadata management&lt;/strong&gt;: Data should be self-discoverable with the ability to track lineage as data flows through tiers within the data lake. A comprehensive data catalog that captures the metadata and provides a query-able interface for all data assets is recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;**Unified governance: A lake house design should have a robust mechanism for centralized authorization and auditing. Configuring access policies in the data lake and across all the data stores can be extremely complex and error prone. Having a centralized location to define the policies and enforce them is critical to a secure lake house architecture.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transactional semantics&lt;/strong&gt;: In a data lake, data is often ingested nearly continuously from multiple sources and is queried concurrently by multiple analytic engines. Having atomic, consistent, isolated, and durable (ACID) transactions is pivotal to keeping data consistent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference-architecture"&gt;
  &lt;/a&gt;
  Reference architecture
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JRarOnuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xnfh0epr2katsu4t4qp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JRarOnuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xnfh0epr2katsu4t4qp.png" alt="Image description" width="800" height="584"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Modern data architecture reference architecture&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configuration-notes"&gt;
  &lt;/a&gt;
  Configuration notes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To organize data for efficient access and easy management:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The storage layer can store data in different states of consumption readiness, including raw, trusted-conformed, enriched, and modeled. It‚Äôs important to segment your data lake into landing, raw, trusted, and curated zones to store data depending on its consumption readiness. Typically, data is ingested and stored as is in the data lake (without having to first define schema) to accelerate ingestion and reduce time needed for preparation before data can be explored.&lt;/li&gt;
&lt;li&gt;Partition data with keys that align to common query criteria.&lt;/li&gt;
&lt;li&gt;Convert data to an open columnar file format, and apply compression. This will lower storage usage, and increase query performance.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose the proper storage tier based on data temperature. Establish a data lifecycle policy to automatically delete old data to meet your retention requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decide on a location for data lake ingestion (that is, an S3 bucket). Select a frequency and isolation mechanism that meets your business needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Depending on your ingestion frequency or data mutation rate, schedule file compaction to maintain optimal performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use AWS Glue crawlers to discover new datasets, track lineage, and avoid a data swamp.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manage access control and security using AWS Lake Formation, IAM role setting, AWS KMS, and AWS CloudTrail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No need to move data between a data lake and the data warehouse for the data warehouse to access it. Amazon Redshift Spectrum can directly access the dataset in the data lake.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For more, refer to the Derive Insights from AWS Lake House whitepaper.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Hope this guide gives you an Introduction to Modern data architecture (formerly Lake House), explains the Characteristics, Reference Architecture and Configuration Notes for Modern data architecture.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comment section üëá&lt;br&gt;
And if you haven't yet, make sure to follow me on below handles:&lt;/p&gt;

&lt;p&gt;üëã &lt;strong&gt;connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
ü§ì &lt;strong&gt;connect with me on &lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
üê±‚Äçüíª &lt;strong&gt;follow me on &lt;a href="https://github.com/AditModi"&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
‚úçÔ∏è &lt;strong&gt;Do Checkout &lt;a href="https://aditmodi.hashnode.dev"&gt;my blogs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Like, share and follow me üöÄ for more content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-user-aditmodi-"&gt;
  &lt;/a&gt;
  &lt;div class="ltag__user ltag__user__id__497987"&gt;
  
    .ltag__user__id__497987 .follow-action-button {
      background-color: #000000 !important;
      color: #fa6c00 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/aditmodi" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/aditmodi"&gt;Adit Modi&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/aditmodi"&gt;Cloud Engineer | AWS Community Builder | 8x AWS Certified | 3x Azure Certified | Author of Cloud Tech , DailyDevOps &amp;amp; BigDataJournal | DEV moderator&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/analytics-lens/modern-data-architecture.html"&gt;Reference Guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>datascience</category>
      <category>cloud</category>
      <category>architecture</category>
    </item>
    <item>
      <title>The Complete React Roadmap</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 23 Jan 2022 06:12:38 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/the-complete-react-roadmap-1ho4</link>
      <guid>https://dev.to/ruppysuppy/the-complete-react-roadmap-1ho4</guid>
      <description>&lt;p&gt;Learning &lt;strong&gt;React&lt;/strong&gt; can be &lt;em&gt;confusing at first&lt;/em&gt;, sometimes even &lt;em&gt;downright scary&lt;/em&gt;! This article aims to put forth a &lt;strong&gt;complete roadmap&lt;/strong&gt; to learn &lt;strong&gt;React&lt;/strong&gt; so that you have a &lt;em&gt;clear path moving forward&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h1&gt;

&lt;p&gt;There are some &lt;em&gt;pre-requisites&lt;/em&gt; to learning &lt;strong&gt;React&lt;/strong&gt;, without which, you will &lt;em&gt;find yourself struggling hard&lt;/em&gt;. So it is &lt;em&gt;highly advisable&lt;/em&gt; to master the following skills first, before diving into learning &lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;HTML&lt;/strong&gt; - You need to be well acquainted with the &lt;em&gt;basic tags&lt;/em&gt; and the &lt;em&gt;attributes&lt;/em&gt; they accept. No need to be an &lt;strong&gt;HTML&lt;/strong&gt; master, &lt;em&gt;just the basics would do&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS&lt;/strong&gt; - Unless you want to create &lt;em&gt;bland websites&lt;/em&gt; like this
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MmkPAt5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r20uu4s8euo42szzl4wa.png" alt="Image description" width="616" height="469"&gt;
You should definitely spend some time going through the basics (namely &lt;code&gt;selectors&lt;/code&gt;, &lt;code&gt;box-model&lt;/code&gt;, &lt;code&gt;flexbox&lt;/code&gt;, &lt;code&gt;grid layout&lt;/code&gt;, and &lt;code&gt;responsive design&lt;/code&gt;) of &lt;strong&gt;CSS&lt;/strong&gt; too.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt; - Since &lt;strong&gt;React&lt;/strong&gt; runs on top of &lt;strong&gt;JavaScript&lt;/strong&gt;, you do need a &lt;em&gt;solid foundation&lt;/em&gt; to ease up the process of learning &lt;strong&gt;React&lt;/strong&gt;. As a barebones, you would need &lt;code&gt;variables&lt;/code&gt;, &lt;code&gt;conditional statements&lt;/code&gt;, &lt;code&gt;loops&lt;/code&gt;, &lt;code&gt;DOM manipulation&lt;/code&gt;, and &lt;code&gt;event triggering&lt;/code&gt;.
Learning the &lt;strong&gt;ES6+&lt;/strong&gt; features such as the &lt;code&gt;spread&lt;/code&gt; &amp;amp; &lt;code&gt;rest operators&lt;/code&gt;, and &lt;code&gt;arrow functions&lt;/code&gt; would come in handy too.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Setting up a React Project&lt;/strong&gt;: Before you can start learning &lt;strong&gt;React&lt;/strong&gt;, quite evidently you would need to set up a &lt;strong&gt;React Project&lt;/strong&gt;, which is a &lt;em&gt;highly tedious task&lt;/em&gt;. Luckily we have &lt;em&gt;awesome tools&lt;/em&gt; like the &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;&lt;code&gt;create-react-app&lt;/code&gt;&lt;/a&gt; &lt;em&gt;to get the job done&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Get Acquainted with JSX&lt;/strong&gt;: Typically &lt;strong&gt;React&lt;/strong&gt; code is written &lt;strong&gt;JSX&lt;/strong&gt; (&lt;strong&gt;JavaScript XML&lt;/strong&gt;). You can opt to not use it, using only &lt;code&gt;React.createElement&lt;/code&gt; calls only, but there is no point in making your &lt;em&gt;life miserable doing it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwFyGx0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10x8niyw6rczvnbh1mib.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwFyGx0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10x8niyw6rczvnbh1mib.gif" alt="Ain't Nobody got time for that" width="500" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should be familiar with the differences between &lt;strong&gt;JSX&lt;/strong&gt; and &lt;strong&gt;HTML&lt;/strong&gt;, like every &lt;code&gt;element&lt;/code&gt; &lt;em&gt;must contain a closing tag&lt;/em&gt;, the events are in &lt;strong&gt;Camel Case&lt;/strong&gt; (&lt;code&gt;onClick&lt;/code&gt; as opposed to &lt;code&gt;onclick&lt;/code&gt;), and the ability to use &lt;strong&gt;JS&lt;/strong&gt; inside the code directly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Types of Components&lt;/strong&gt;: Although recently, there is a push toward using &lt;strong&gt;Functional Component&lt;/strong&gt; for all purposes as they are more &lt;em&gt;intuitive&lt;/em&gt; and &lt;em&gt;easier to code&lt;/em&gt;, you should have a &lt;em&gt;basic understanding&lt;/em&gt; of &lt;strong&gt;Class Components&lt;/strong&gt; too to ensure when you work on a &lt;code&gt;legacy code base&lt;/code&gt;, you don't end up looking like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JDnrOJO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37ohqeuojcuq10yjp6zg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JDnrOJO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37ohqeuojcuq10yjp6zg.gif" alt="run away" width="483" height="325"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Props vs State&lt;/strong&gt;: &lt;code&gt;Props&lt;/code&gt; allows us to &lt;em&gt;pass data from one component to another&lt;/em&gt;, but if used inappropriately, it can lead to &lt;code&gt;prop chaining&lt;/code&gt;, a &lt;em&gt;highly undesired practice&lt;/em&gt; in &lt;strong&gt;React&lt;/strong&gt; projects, which we will &lt;em&gt;fix later down the &lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;State&lt;/code&gt; allows you to &lt;em&gt;store data&lt;/em&gt; between the component &lt;strong&gt;re-renders&lt;/strong&gt;. Updating the &lt;code&gt;state&lt;/code&gt; &lt;strong&gt;re-renders&lt;/strong&gt; the component and &lt;em&gt;every child&lt;/em&gt; accepting the &lt;code&gt;state&lt;/code&gt; data as a prop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lists and Keys&lt;/strong&gt;: Often while dealing with a lot of &lt;strong&gt;dynamic data&lt;/strong&gt;, you be required to render &lt;code&gt;lists&lt;/code&gt; of &lt;strong&gt;data&lt;/strong&gt;. Make sure you add &lt;code&gt;key&lt;/code&gt; to allow &lt;strong&gt;React&lt;/strong&gt; to &lt;em&gt;keep track of the elements&lt;/em&gt; and &lt;em&gt;optimally re-render them&lt;/em&gt;, instead of &lt;em&gt;re-rendering them every time something changes&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Component Life Cycle&lt;/strong&gt;: The &lt;strong&gt;Class Components&lt;/strong&gt; has &lt;strong&gt;life cycle&lt;/strong&gt; methods such as &lt;code&gt;componentDidMount()&lt;/code&gt; and &lt;code&gt;componentWillUnmount()&lt;/code&gt;, which can also be emulated by the &lt;code&gt;useEffect&lt;/code&gt; &lt;strong&gt;Hook&lt;/strong&gt; in &lt;strong&gt;Functional Components&lt;/strong&gt;. These &lt;strong&gt;life cycle&lt;/strong&gt; methods run at &lt;em&gt;specific time&lt;/em&gt;, making them useful for &lt;em&gt;certain tasks&lt;/em&gt;, such as an &lt;strong&gt;API call&lt;/strong&gt; on &lt;code&gt;componentDidMount()&lt;/code&gt; or &lt;strong&gt;timer cleanups&lt;/strong&gt; during &lt;code&gt;componentWillUnmount()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#intermediate"&gt;
  &lt;/a&gt;
  Intermediate
&lt;/h1&gt;

&lt;p&gt;Let's now dive into the Intermediate &lt;strong&gt;React&lt;/strong&gt; topics&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g7tvqlu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef8cu8g7242nvgm0o9sy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7tvqlu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef8cu8g7242nvgm0o9sy.gif" alt="let's do it" width="500" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt;: Till now your Application would end up looking &lt;em&gt;pretty basic&lt;/em&gt;. Let's fix it right now. There are &lt;em&gt;hundreds of choices to style the application&lt;/em&gt;, but unless you are using some library such as &lt;strong&gt;Material UI&lt;/strong&gt;, &lt;strong&gt;Chakra UI&lt;/strong&gt;, &lt;strong&gt;Semantic UI&lt;/strong&gt;, I would highly suggest using &lt;strong&gt;CSS&lt;/strong&gt; or &lt;strong&gt;SCSS modules&lt;/strong&gt;, which gives you complete power of &lt;strong&gt;CSS&lt;/strong&gt; with the addition of keeping the &lt;em&gt;styling scoped to just one file&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;No more to worry about using the same class name twice and accidentally overriding it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hooks&lt;/strong&gt;: &lt;strong&gt;Hooks&lt;/strong&gt; were a &lt;em&gt;recent addition&lt;/em&gt; in &lt;strong&gt;React 16.8&lt;/strong&gt; and it totally changed the &lt;strong&gt;React Ecosystem&lt;/strong&gt;. &lt;strong&gt;Hooks&lt;/strong&gt; introduced features from &lt;strong&gt;Class Components&lt;/strong&gt; into &lt;strong&gt;Functional Components&lt;/strong&gt;, making it possible to use &lt;code&gt;state&lt;/code&gt;, &lt;code&gt;lifecycle methods&lt;/code&gt;, &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt;s in &lt;strong&gt;Functional Components&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Often people avoid learning the &lt;em&gt;difficult concepts&lt;/em&gt; such as &lt;code&gt;memo&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt;, but that's a bad idea as if you are building anything of &lt;strong&gt;real-world significance&lt;/strong&gt;, your application will definitely &lt;em&gt;rely heavily&lt;/em&gt; on these. Moreover using &lt;code&gt;context&lt;/code&gt; allows you to avoid the &lt;code&gt;prop chaining&lt;/code&gt; issue discussed previously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; also allows you to create custom hooks to cater to your personal need, which you should also look into.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Portals&lt;/strong&gt;: Occasionally you will run into edge cases where, you &lt;em&gt;styling elements&lt;/em&gt; such as &lt;strong&gt;modal&lt;/strong&gt; to &lt;em&gt;render on top of elements further down the &lt;strong&gt;DOM&lt;/strong&gt; tree&lt;/em&gt; becomes a nightmare. In such cases, &lt;strong&gt;Portals&lt;/strong&gt; are there to help you out, they allow you to render elements outside the default &lt;strong&gt;React Root Element&lt;/strong&gt;, making it &lt;em&gt;far easier to not only style&lt;/em&gt;, but even &lt;em&gt;group elements together&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lazy Loading&lt;/strong&gt;: &lt;strong&gt;Lazy loading&lt;/strong&gt; is a &lt;em&gt;design pattern&lt;/em&gt; commonly used in &lt;strong&gt;web design&lt;/strong&gt; and &lt;strong&gt;development&lt;/strong&gt; to &lt;em&gt;defer initialization of an object&lt;/em&gt; until &lt;em&gt;the point at which it is needed&lt;/em&gt;. It can contribute to &lt;strong&gt;efficiency&lt;/strong&gt; in the program's operation &lt;em&gt;if properly and appropriately used&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Luckily implementing &lt;strong&gt;Lazy Loading&lt;/strong&gt; in &lt;strong&gt;React&lt;/strong&gt; is a walk in the park. All you need is the &lt;code&gt;Suspense&lt;/code&gt; &lt;strong&gt;Component&lt;/strong&gt; and familiarity with the &lt;code&gt;import()&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#advanced"&gt;
  &lt;/a&gt;
  Advanced
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Found everything on the list a piece of cake?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1W5x_PC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owd4d5ohci60p2w6hrw7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1W5x_PC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owd4d5ohci60p2w6hrw7.gif" alt="Easy" width="498" height="364"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Put your knowledge to the test with these &lt;em&gt;advanced skills&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Webpack &amp;amp; Babel&lt;/strong&gt;: None of the &lt;strong&gt;JSX&lt;/strong&gt; you write can be &lt;em&gt;understood by a browser&lt;/em&gt;, so it has to be &lt;code&gt;transpiled&lt;/code&gt; into regular &lt;strong&gt;JS&lt;/strong&gt; for Browser to execute it. The transpilation process is handled by &lt;strong&gt;Babel&lt;/strong&gt; and bundling everything into a single file is done by &lt;strong&gt;Webpack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To truly understand &lt;em&gt;how everything fits in&lt;/em&gt;, you need to build a &lt;strong&gt;React App&lt;/strong&gt; from scratch, check out &lt;a href="https://dev.to/ruppysuppy/create-react-app-from-scratch-like-a-pro-de0"&gt;this article&lt;/a&gt; to know how to do it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;: &lt;strong&gt;Testing&lt;/strong&gt; is something very few people actually enjoy doing, as it falls under the category of &lt;strong&gt;"dark work"&lt;/strong&gt;, where the things you &lt;em&gt;doesn't make any visible changes&lt;/em&gt;. But for large applications, it is of &lt;em&gt;crucial importance&lt;/em&gt; as &lt;em&gt;a small change might end up breaking the entire application&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;: This is simply &lt;em&gt;one of the core skills you must possess&lt;/em&gt;. &lt;strong&gt;TypeScript&lt;/strong&gt; is a superset of &lt;strong&gt;JavaScript&lt;/strong&gt;, which adds the important, &lt;em&gt;yet optional&lt;/em&gt;, &lt;strong&gt;strict type system&lt;/strong&gt; and is the language of choice for any &lt;strong&gt;large scale React application&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all you need to know about &lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6iRT9CmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp6lmupohw1uvmmj26vk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6iRT9CmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp6lmupohw1uvmmj26vk.gif" alt="Phew" width="500" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ecosystem"&gt;
  &lt;/a&gt;
  Ecosystem
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;But what about the React Router, or perhaps something for state management?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Glad you asked! Let's dive into the &lt;strong&gt;React Tools&lt;/strong&gt; that are worth diving into. You can check these out as soon as you are done with the basics of &lt;strong&gt;React&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Routing&lt;/strong&gt;: Since &lt;strong&gt;React&lt;/strong&gt; is a &lt;em&gt;library&lt;/em&gt; and not a &lt;em&gt;framework&lt;/em&gt;, it doesn't ship with its own routing, but &lt;strong&gt;React Router&lt;/strong&gt; is a library that's worth looking into.&lt;/p&gt;

&lt;p&gt;If you are using an &lt;strong&gt;SSG&lt;/strong&gt; (&lt;strong&gt;Static Site Generation&lt;/strong&gt;) or SSR (&lt;strong&gt;Server Side Rendering&lt;/strong&gt;) like &lt;strong&gt;Gatsby&lt;/strong&gt; or &lt;strong&gt;Next.js&lt;/strong&gt;, then you would already have a routing built-in, without requiring any additional libraries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;State Management&lt;/strong&gt;: &lt;strong&gt;State Management&lt;/strong&gt; tools like &lt;strong&gt;Context API&lt;/strong&gt; is a nice feature of &lt;strong&gt;React&lt;/strong&gt;, but falls short in the case of &lt;em&gt;large scale applications&lt;/em&gt;. In such cases, using a library like &lt;strong&gt;Redux&lt;/strong&gt; or the &lt;em&gt;innumerable ones&lt;/em&gt; available on &lt;code&gt;npm&lt;/code&gt; would be a better idea&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cross-Platform&lt;/strong&gt;: If you want to use the same logic as your &lt;strong&gt;Web App&lt;/strong&gt; in a &lt;strong&gt;Mobile Application&lt;/strong&gt; and &lt;strong&gt;Desktop Application&lt;/strong&gt; too, &lt;strong&gt;React Native&lt;/strong&gt; and &lt;strong&gt;Electron&lt;/strong&gt; (or preferably &lt;strong&gt;Tauri&lt;/strong&gt;) would be great tools to look into. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt;: If you don't want to write custom styling for your application, &lt;strong&gt;Material UI&lt;/strong&gt;, &lt;strong&gt;Chakra UI&lt;/strong&gt;, or &lt;strong&gt;Semantic UI&lt;/strong&gt; might be worth a look. It can &lt;em&gt;drastically reduce the effort required&lt;/em&gt; as they come with &lt;strong&gt;pre-built components&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;That's the &lt;strong&gt;Complete React Roadmap&lt;/strong&gt;. Hope that helps you plan out your journey to become a ground-breaking &lt;strong&gt;React Developer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Developing!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Did I miss something? Share it in the comments below üëá&lt;/p&gt;

&lt;p&gt;Want to see an &lt;strong&gt;Advanced React Project&lt;/strong&gt; built from scratch? Check out&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ruppysuppy"&gt;
        ruppysuppy
      &lt;/a&gt; / &lt;a href="https://github.com/ruppysuppy/Crypto-Crowdfund"&gt;
        Crypto-Crowdfund
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ü§ëüí∞ Crowdfunding Platform backed by Ethereum Blockchain to bring your creative projects to life
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt; to chop away your development woes? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Personal Website&lt;/a&gt; and &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to connect? Reach out to me on &lt;a href="https://www.linkedin.com/in/tapajyoti-bose/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Add a VSC Command Palette to Your Website!</title>
      <author>Harsh Singh</author>
      <pubDate>Sun, 23 Jan 2022 04:38:49 +0000</pubDate>
      <link>https://dev.to/harshhhdev/adding-a-command-palette-to-your-website-5cpp</link>
      <guid>https://dev.to/harshhhdev/adding-a-command-palette-to-your-website-5cpp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-well-be-making-today"&gt;
  &lt;/a&gt;
  What We'll Be Making Today
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gb10bh7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mypz69jp0mbuedusxx2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gb10bh7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mypz69jp0mbuedusxx2.gif" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://4zsur.sse.codesandbox.io/"&gt;Live Demo üöÄ&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wait-what"&gt;
  &lt;/a&gt;
  Wait, what?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; has an amazing feature called the command palette, which gives you access to the entire application's functionality. It's a productivity hack and saves us a lot of tension.&lt;/p&gt;

&lt;p&gt;Similar to &lt;a href="https://code.visualstudio.com/"&gt;VSC&lt;/a&gt;, &lt;a href="https://monkeytype.com"&gt;MonkeyType&lt;/a&gt; is an open-source, minimalistic, and customisable typing test. It's designed to be accessed from just your keyboard, eliminating the need to switch back and forth with your mouse.&lt;/p&gt;

&lt;p&gt;I really love the command palette feature on their website too, which allows you to tweak settings easily. Today, we're going to be making something similar to that in Next.js/React.&lt;/p&gt;

&lt;p&gt;Looks cool right? Let's get into the tutorial.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  üöÄ Getting Started
&lt;/h1&gt;

&lt;p&gt;The boring part of setting up a &lt;a href="https://nextjs.org/docs/getting-started"&gt;Next.js project&lt;/a&gt; which you probably know how to do.&lt;/p&gt;

&lt;p&gt;Feel free to skip to &lt;a href=""&gt;Creating Our Command Palette&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://www.npmjs.com/package/npx"&gt;npx&lt;/a&gt; or &lt;a href="https://yarnpkg.com/"&gt;yarn&lt;/a&gt;, create a new &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt; or &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Next.js (flags for TypeScript are optional)&lt;/span&gt;

npx create-next-app@latest palette &lt;span class="nt"&gt;--ts&lt;/span&gt;
&lt;span class="c"&gt;# ...using yarn&lt;/span&gt;
yarn create next-app palette &lt;span class="nt"&gt;--typescript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Create React App (flags for TypeScript are optional)&lt;/span&gt;

npx create-react-app palette &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;span class="c"&gt;# ...using yarn&lt;/span&gt;
yarn create react-app palette &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since I'm in love with it, I'll be doing this project in &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt; with &lt;a href="https://typescriptlang.org"&gt;TypeScript&lt;/a&gt; - however, the procedure for implementing this in other &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; frameworks shouldn't be too different. &lt;/p&gt;

&lt;p&gt;Now let's go to our terminal and run &lt;code&gt;yarn dev&lt;/code&gt;. Our development server should be started on &lt;a href="http://localhost:3000"&gt;localhost:3000&lt;/a&gt;. Nice!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  üí° Project Setup
&lt;/h1&gt;

&lt;p&gt;Alright, now in our &lt;code&gt;styles/globals.css&lt;/code&gt; file let's add some basic styles to make our page slightly less ugly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e9edf1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#323b45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Fira&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's go to &lt;code&gt;styles/Home.module.css&lt;/code&gt; and create some starter styles for our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100vh&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Let's go to &lt;code&gt;pages/index.tsx&lt;/code&gt; and remove some junk there. Let's also import our custom monospace font using &lt;a href="https://nextjs.org/docs/api-reference/next/head"&gt;next-head&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Command Palette&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'https://fonts.googleapis.com/css2?family=Fira+Code&amp;amp;display=swap'&lt;/span&gt;
          &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Press Space For a Command Palette&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our page should now look somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wu5lk0rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/150664950-a78c6034-8144-4903-8605-15c72aadd5ae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wu5lk0rh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/150664950-a78c6034-8144-4903-8605-15c72aadd5ae.png" alt="image" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-the-palette"&gt;
  &lt;/a&gt;
  üé® Building the Palette
&lt;/h1&gt;

&lt;p&gt;Cool! So let's start building out our command palette.&lt;/p&gt;

&lt;p&gt;Create a new file, &lt;code&gt;components/Palette.tsx&lt;/code&gt; and open it up.&lt;/p&gt;

&lt;p&gt;Inside it, let's define the basic structure of our command palette.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'dialog'&lt;/span&gt; &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* Search Icon */&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;
            &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Type to Search...'&lt;/span&gt;
            &lt;span class="na"&gt;spellCheck&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'false'&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
            &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'https://github.com/harshhhdev'&lt;/span&gt;
            &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'norefferer'&lt;/span&gt;
           &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* GitHub Icon */&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
             GitHub
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save it, and import this component into the main file.&lt;/p&gt;

&lt;p&gt;If you check our browser now, the grotesque default styles make me want to vomit. Let's go back to our &lt;code&gt;styles/Home.module.css&lt;/code&gt; file and add in some extra styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.palette&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#323b45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8%&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.options&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt; &lt;span class="nb"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.options&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.options&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.search&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.search&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.option&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.625rem&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#323b45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.875rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.option&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.option&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#323b45&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#939faf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.option&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.625rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! We can now add these styles to our components accordingly. &lt;/p&gt;

&lt;p&gt;While we're at it, let's also download some icons from &lt;a href="https://react-icons.github.io/react-icons/"&gt;React Icons&lt;/a&gt;, and import them up top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Palette&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;palette&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'dialog'&lt;/span&gt; &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FaSearch&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
             &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;
             &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Type to Search...'&lt;/span&gt;
             &lt;span class="na"&gt;spellCheck&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'false'&lt;/span&gt;
             &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
              &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'https://github.com/harshhhdev'&lt;/span&gt;
              &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'norefferer'&lt;/span&gt;
              &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
             &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FaGithub&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
               GitHub
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Phew, that sure looks better. Now let's create multiple links using an array and map it onto the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://hxrsh.in/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Portfolio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FaUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://github.com/harshhhdev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GitHub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FaGithub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://twitter.com/harshhhdev/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Twitter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FaTwitter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under &lt;code&gt;div.options&lt;/code&gt;, let's map the array onto an option element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; 
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'norefferer'&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and with that, woo-hoo! Our command line's visual aspect is finished üéâ It should look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ftpWU8y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/150659528-0b5acc35-925a-4f3f-8d9f-9d58a2e89fd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftpWU8y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/69592270/150659528-0b5acc35-925a-4f3f-8d9f-9d58a2e89fd9.png" alt="image" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#searching"&gt;
  &lt;/a&gt;
  üîé Searching
&lt;/h1&gt;

&lt;p&gt;Let's get the search working. To start off, let's create a filter function which filters our array using a search query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;optionText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;optionText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Now let's get our search bar input and filter the results using some React hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create another function, called changeHandler, which will be called when we type something onto the search bar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FormEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, let's create a new array of objects being passed through the filter function which returns an array of objects with keywords.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredResults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, instead of mapping &lt;code&gt;Options&lt;/code&gt;, let's map &lt;code&gt;filteredResults&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;filteredResults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; 
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'norefferer'&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The search should be working perfectly now! Give yourself a pat on the back if you made it this far.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keyboard-navigation"&gt;
  &lt;/a&gt;
  üíª Keyboard Navigation
&lt;/h1&gt;

&lt;p&gt;One of the crucial characteristics of our command palette should be the ability to navigate it using only the keyboard.&lt;/p&gt;

&lt;p&gt;For this, we'll be using a handy React hook called &lt;a href="https://github.com/dealroom/react-arrow-key-navigation-hook"&gt;react-arrow-key-navigation-hook&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you're using &lt;a href="https://typescriptlang.org"&gt;TypeScript&lt;/a&gt;, unfortunately, this project does not come with type definitions. Either make your own type definitions, turn off library checks in &lt;code&gt;tsconfig.json&lt;/code&gt;, or just create a file called &lt;code&gt;nav.d.ts&lt;/code&gt; paste in &lt;code&gt;declare module 'react-arrow-key-navigation-hook'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After we've done that, we can import it into our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useArrowKeyNavigationHook&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-arrow-key-navigation-hook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// ...inside the Palette component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useArrowKeyNavigationHook&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;selectors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a,input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's assign the ref into our &lt;code&gt;wrapper&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;parentRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! We should now be able to navigate through our command palette using just our arrow keys.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#toggle-states"&gt;
  &lt;/a&gt;
  Toggle States
&lt;/h1&gt;

&lt;p&gt;As we prepare to wrap up, we need to add in toggling functionality to our palette. &lt;/p&gt;

&lt;p&gt;Let's create another state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we close, we also need to reset our &lt;code&gt;searchQuery&lt;/code&gt;. To do this, let's create a toggle function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's add an event listener to our document inside the &lt;code&gt;useEfffect&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we add a document listener for the "space" key being pressed. When it's pressed, we simply toggle the state of the command palette.&lt;/p&gt;

&lt;p&gt;We should now be able to toggle the state of our palette with the Space key. Nice! However, we also want it so that when the click outside the palette, it should close. &lt;/p&gt;

&lt;p&gt;You can create your own hook for this following &lt;a href="https://www.30secondsofcode.org/react/s/use-click-outside"&gt;this tutorial&lt;/a&gt;, however, for the sake of this tutorial I'll just use &lt;a href="https://github.com/zhaluza/react-detect-click-outside"&gt;react-detect-click-outside&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boundary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDetectClickOutside&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;onTriggered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's assign our &lt;code&gt;boundary&lt;/code&gt; to our &lt;code&gt;contents&lt;/code&gt; element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;boundary&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and viola! The div should work.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;That's it! There are libraries which do this for you, but nothing's as good as building your own from scratch as it leaves you limitless for customising it the way you want!&lt;/p&gt;

&lt;p&gt;Now for those looking for some extra fun or learning something extra, here are some additions you could add to this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Animations using &lt;a href="https://framer.com/motion"&gt;Framer Motion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create sub-menus using React hooks&lt;/li&gt;
&lt;li&gt;Add a radio button functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's it! Feel free to checkout the live demo on &lt;a href="https://codesandbox.io/s/command-palette-react-4zsur"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/4zsur"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build a Video Conference App from Scratch using WebRTC,Websocket,PHP +JS Day 16</title>
      <author>ben pobi</author>
      <pubDate>Sun, 23 Jan 2022 04:09:51 +0000</pubDate>
      <link>https://dev.to/benpobi/build-a-video-conference-app-from-scratch-using-webrtcwebsocketphp-js-day-16-53eh</link>
      <guid>https://dev.to/benpobi/build-a-video-conference-app-from-scratch-using-webrtcwebsocketphp-js-day-16-53eh</guid>
      <description>&lt;p&gt;In this video we'll cover how to create ValidateEmail   method&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yVxeKmJcpCA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webrtc</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Become a Data Engineer in 2022</title>
      <author>SeattleDataGuy</author>
      <pubDate>Sun, 23 Jan 2022 04:04:38 +0000</pubDate>
      <link>https://dev.to/seattledataguy/how-to-become-a-data-engineer-in-2022-3pha</link>
      <guid>https://dev.to/seattledataguy/how-to-become-a-data-engineer-in-2022-3pha</guid>
      <description>&lt;p&gt;Photo by¬†&lt;a href="https://unsplash.com/@thisisengineering?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;ThisisEngineering RAEng&lt;/a&gt;¬†on¬†&lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you were paying attention in 2021, then you would know that data engineering jobs are on the rise.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.interviewquery.com/blog-data-science-interview-report/"&gt;Jay Feng's report&lt;/a&gt;¬†analyzing 10,000 data science interviews found that interviews for data engineering jobs increased by 40% in 2020. There has also been a massive increase in funding in the data engineering space and the explosion of data-driven content has led to a revival of the term data engineering. I've also seen an increase in the number of companies offering data engineering internships. This is not just at Amazon and Facebook, but also at companies like Spotify.&lt;/p&gt;

&lt;p&gt;All¬†of this information is good news for aspiring data engineers. It's possible to come out of college, land a good job, and thrive in this growing field.&lt;/p&gt;

&lt;p&gt;But what does it take to¬†&lt;a href="https://www.youtube.com/watch?v=PEsCumjfBW0"&gt;become a data engineer in 2022&lt;/a&gt;? What skills do you need to have today so that they are still relevant five years from now?&lt;/p&gt;

&lt;p&gt;In this article, I'll cover what skills emerging data engineers need, where they can apply for jobs, and what they can do to stand out in this competitive field.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-skills-do-data-engineers-need"&gt;
  &lt;/a&gt;
  What Skills Do Data Engineers Need
&lt;/h1&gt;

&lt;p&gt;What skills are companies asking for from junior data engineers?&lt;/p&gt;

&lt;p&gt;It's important to know the basics. Most interviews, at a junior or intern level won't expect you to know more than the three sections below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Python&lt;/li&gt;
&lt;li&gt;  SQL&lt;/li&gt;
&lt;li&gt;  Data modeling and ETL development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are generally on all interviews. An exception is that if you are in coding you could learn either Python, Java, or Scala. If you know two of those languages, you can usually figure out the last one.&lt;/p&gt;

&lt;p&gt;If you're going into an internship or junior position, you shouldn't be expected to know much more than these requirements. If you're going into a mid-level position, then there might be an expectation to know a little more.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-a-data-engineer-internship-at-amazon"&gt;
  &lt;/a&gt;
  Getting A Data Engineer Internship At Amazon
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w_gFZwuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A45UrkvhJ24GxfzSTJqXuDQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w_gFZwuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A45UrkvhJ24GxfzSTJqXuDQ.png" alt="" width="880" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiHuPWaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AzxLuBuZSQ6PfutRSln3Okw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiHuPWaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AzxLuBuZSQ6PfutRSln3Okw.png" alt="" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at this data engineering internship opportunity from Amazon. They expect that you have a bachelor's degree, which makes sense. They also expect you to know Python, how to create data pipelines, databases, and warehouse modeling concepts. All of this makes sense.&lt;/p&gt;

&lt;p&gt;When you scroll down to the preferred qualifications, there are some questionable¬†statements. Amazon is asking for a master's degree, which seems unnecessary for any sort of computer¬†engineering, software engineering, or data engineering job. These skills are not generally learned in college and there's not exactly a data engineering master's degree.&lt;/p&gt;

&lt;p&gt;I also find it frustrating that they want applicants to articulate the basic differences between data types. I'm not sure what they're going for there because NoSQL and relational data types are very similar. I understand what they're getting at but wish they had phrased that point better. They should have said something like¬†&lt;em&gt;understanding the difference between SQL and NoSQL&lt;/em&gt;¬†or something similar.&lt;/p&gt;

&lt;p&gt;However, they have stated that you'll need a lot of SQL and data modeling experience. I've interviewed at Amazon, and those are definitely skills you will need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-a-data-engineer-internship-at-facebook"&gt;
  &lt;/a&gt;
  Getting A Data Engineer Internship At Facebook
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYpxbBfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ANStQetj9aPcB6JkBwMdxjA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYpxbBfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ANStQetj9aPcB6JkBwMdxjA.png" alt="" width="880" height="115"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2AF2bBFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AugfjGu-ReEgaL1SunX_8MQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2AF2bBFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2AugfjGu-ReEgaL1SunX_8MQ.png" alt="" width="880" height="820"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Taking a look at this¬†&lt;a href="https://www.facebookcareers.com/jobs/253886259650481/"&gt;data engineer intern role&lt;/a&gt;¬†at Facebook, they also require experience with SQL Python. They also call out the need to understand distributed systems, which I think is unnecessary, having worked at Facebook or Meta. You don't need to know things that are under the hood, like Presto or Hive, because your job will just involve writing SQL. Nor will you be writing any MapReduce jobs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#where-to-apply"&gt;
  &lt;/a&gt;
  Where To Apply
&lt;/h1&gt;

&lt;p&gt;I found a lot of junior data engineer positions just by Googling. There are a lot more than were around when I was going into data engineering.&lt;/p&gt;

&lt;p&gt;Some companies don't seem to understand the term junior and are asking for 2+ years of experience whereas a junior role should be 0--2 years of experience.&lt;/p&gt;

&lt;p&gt;However, there are plenty of junior and internship positions advertised. Thus, you can just ignore the ones that are asking for too much experience.&lt;/p&gt;

&lt;p&gt;At least make sure that the position is paying well (at least $80--100K) if it asks for a lot of experience. The Amazon internship that we looked at is paying $7,700 a month for a position based in Colorado, which makes it close to $100,000 a year.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-stand-out"&gt;
  &lt;/a&gt;
  How To Stand Out
&lt;/h1&gt;

&lt;p&gt;Although there are a lot of positions for data engineers, there are also a lot more people wanting to become data engineers. Entry-level positions are paying up to $100K per annum,¬†&lt;a href="https://policyadvice.net/insurance/insights/average-american-income/#:~:text=What%20percentage%20of%20Americans%20makes,the%20population%20earned%20over%20%24200%2C000."&gt;which would put you into the top 15% of American earners&lt;/a&gt;. You could even make more if you worked at a successful startup with equity options. So, it's important to know how to stand out.&lt;/p&gt;

&lt;p&gt;To get a job typically you would study hard, apply for positions and network and get referrals. However, to stand out, you need to promote yourself. You could be the smartest data engineer in the world but if you don't know how to promote yourself, no one will know.&lt;/p&gt;

&lt;p&gt;In 2022, there are a ton of avenues to promote yourself. You can make videos, write articles, and share your code, as well as what you're currently learning and/or working on.&lt;/p&gt;

&lt;p&gt;Channels to publish content include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/company/18129251/"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/@SeattleDataGuy"&gt;Medium&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.theseattledataguy.com/"&gt;Your own website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Your own GitHub repository&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/channel/UCmLGJ3VYBcfRaWbP6JLJcpA"&gt;YouTube&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This kind of content helps recruiters and companies get to know you as a person, not just as a resume that hits their desks.&lt;/p&gt;

&lt;p&gt;The content publishing method can be tailored to suit your personality and skills. Some people are great at creating their own projects, like doing open-source work and writing code. For people who don't like coding as much, you can work on more high-level concepts and write blogs. This might involve understanding data modeling and writing basic data modeling breakdowns. For example, you could write articles about what the different tables in a warehouse are or compare modern concepts like data mesh, data fabric, and¬†&lt;a href="https://www.theseattledataguy.com/snowflake-vs-bigquery%e2%80%8a-%e2%80%8atwo-cloud-data-warehouses-of-many-setting-up-your-data-in-the-modern-data-stack/"&gt;data warehousing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This type of work helps you to prepare for interviews as well as produce content to share with potential employers. Platforms like YouTube are great because you can share your work and ideas with what feels like an infinite number of people. I've had hiring managers reach out to me because there are not a lot of people publishing videos about data engineering.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;There are many things you can do to increase your chances of becoming a data engineer in 2022. You can start by learning the right skills and applying for positions. However, it's important to also promote yourself through content publishing. This will help you stand out from the crowd and show potential employers that you're passionate about data engineering. There are many avenues to publish content, so find one that best suits your personality and skillset.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect With Me:
&lt;/h1&gt;

&lt;p&gt;‚úÖ YouTube:&lt;a href="https://www.youtube.com/channel/UCmLGJ3VYBcfRaWbP6JLJcpA"&gt;https://www.youtube.com/channel/SeattleDataGuy&lt;/a&gt;&lt;br&gt;
‚úÖ Website:¬†&lt;a href="https://www.theseattledataguy.com/"&gt;https://www.theseattledataguy.com/&lt;/a&gt;&lt;br&gt;
‚úÖ LinkedIn:¬†&lt;a href="https://www.linkedin.com/company/18129251"&gt;https://www.linkedin.com/company/18129251&lt;/a&gt;&lt;br&gt;
‚úÖ Personal Linkedin:¬†&lt;a href="https://www.linkedin.com/in/benjaminrogojan/"&gt;https://www.linkedin.com/in/benjaminrogojan/&lt;/a&gt;&lt;br&gt;
‚úÖ FaceBook:¬†&lt;a href="https://www.facebook.com/SeattleDataGuy"&gt;https://www.facebook.com/SeattleDataGu&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>database</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Top Python Project Ideas: Beginners Level [2022]</title>
      <author>Naem Azam </author>
      <pubDate>Sun, 23 Jan 2022 04:00:48 +0000</pubDate>
      <link>https://dev.to/naemazam/top-python-project-ideas-beginners-level-2022-jba</link>
      <guid>https://dev.to/naemazam/top-python-project-ideas-beginners-level-2022-jba</guid>
      <description>&lt;h2&gt;
  &lt;a href="#python-is-one-of-the-most-popular-programming-languages-currently-it-looks-like-this-trend-is-about-to-continue-in-2022-and-beyond-so-if-you-are-a-python-beginner-the-best-thing-you-can-do-is-work-on-some-realtime-python-project-ideas"&gt;
  &lt;/a&gt;
  Python is one of the most popular programming languages currently. It looks like this trend is about to continue in 2022 and beyond. So, if you are a Python beginner, the best thing you can do is work on some real-time Python project ideas.
&lt;/h2&gt;

&lt;p&gt;But first, let‚Äôs address the more pertinent question that must be lurking in your mind: &lt;strong&gt;why to build Python projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When it comes to careers in software development, it is a must for aspiring developers to work on their own projects. Developing real-world projects is the best way to hone your skills and materialize your theoretical knowledge into practical experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you work on live projects, it will help:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;To boost your confidence&lt;/strong&gt;  ‚Äì As you work with real tools and technologies, you will become more confident about your strengths while also identifying your weak points.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;To experiment&lt;/strong&gt;  ‚Äì You will need to acquaint yourself with new tools and technologies while working on a python project. The more you learn about cutting-edge development tools, environments, libraries, the broader will be your scope for experimentation with your projects. The more you experiment with different  &lt;strong&gt;python project ideas&lt;/strong&gt;, the more knowledge you gain.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;To know the nitty-gritty of SDLC&lt;/strong&gt;  ‚Äì When you develop a project from scratch, you will gain a deeper understanding of how the software development life cycle functions. With time you will learn how to plan before writing the code, execute the code, manage the testing process, fix bugs, deploy the code, and also update your software product from time to time.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;To master the concepts of programming&lt;/strong&gt;  ‚Äì One of the biggest advantages of building real-world projects is that with continuous practice, you will master the concepts and patterns of programming in different languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#top-10-projects-idea"&gt;
  &lt;/a&gt;
  Top 10 Projects Idea
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-mad-libs-generator"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Mad Libs Generator&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;One of the best ideas to start experimenting you hands-on  &lt;strong&gt;python projects for students&lt;/strong&gt;  is working on Mad Libs Generator. This is the perfect project for beginners who are just starting out with software development. Primarily focused on strings, variables, and concatenation, this project will teach you how to manipulate user-inputted data. The program design is such that it will ask users to enter a series of inputs that will be considered as a Mad Lib. &lt;/p&gt;

&lt;p&gt;The input could be anything, an adjective, a noun, a pronoun, etc. Once all the inputs are entered, the application will take the data and arrange the inputs into a story template form. Sound fun, right?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-number-guessing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Number Guessing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the  &lt;strong&gt;simple python projects&lt;/strong&gt;  yet an exciting one. You can even call it a mini-game. Make a program in which the computer randomly chooses a number between 1 to 10, 1 to 100, or any range. Then give users a hint to guess the number. Every time the user guesses wrong, he gets another clue, and his score gets reduced. The clue can be multiples, divisible, greater or smaller, or a combination of all.&lt;br&gt;
You will also need functions to compare the inputted number with the guessed number, to compute the difference between the two, and to check whether an actual number was inputted or not in this python project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-textbased-adventure-game"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Text-based Adventure Game&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is a basic version of the Adventure game. It is completely text-based. In this version of the game, users can move about through different rooms within a single setting, and based on the user input, it will provide descriptions for each room. This is one of the interesting python projects.&lt;br&gt;
Movement direction is crucial here ‚Äì you must create walls and set the directions in which the users can move through the rooms, set movement restrictions, and also include a tracker that can track how far a user has walked or moved in the game. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-dice-rolling-simulator"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Dice Rolling Simulator&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;As the name of the program suggests, we will be imitating a rolling dice. This is one of the interesting python projects and will generate a random number each dice the program runs, and the users can use the dice repeatedly for as long as he wants. When the user rolls the dice, the program will generate a random number between 1 and 6 (as on a standard dice).&lt;/p&gt;

&lt;p&gt;The number will then be displayed to the user. It will also ask users if they would like to roll the dice again. The program should also include a function that can randomly grab a number within 1 to 6 and print it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-hangman"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Hangman&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is more of a ‚Äúguess the word‚Äù game. The core concepts you have to use while developing this project are variables, random, integer, strings, char, input and output, and boolean. In the game, users have to enter letter guesses, and each user will have a limited number of guesses (a counter variable is needed for limiting the guesses). This is one of the interesting python projects to begin with.&lt;/p&gt;

&lt;p&gt;You can create a pre-organized list of words that users can grab words from. Also, you must include specific functions to check whether or not a user has entered a single letter or if the input letter is in the hidden word, to if the user has actually inputted a single letter, and to print the correct outcomes (letters).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-contact-book"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Contact Book&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the excellent python projects for beginners. Everyone uses a contact book to save contact details, including name, address, phone number, and even email address. This is a command-line project where you will design a contact book application that users can use to save and find contact details. The application should also allow users to update contact information, delete contacts, and list saved contacts. The SQLite database is the ideal platform for saving contacts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-email-slicer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Email Slicer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the convenient python projects that has a lot of use in the future. The program helps get you the username and domain name from an email address. You can even customize the application and send a message to the host with this information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-binary-search-algorithm"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Binary search algorithm&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Have you ever heard the proverb, ‚Äúfinding a needle in a haystack.‚Äù This program is designed to do just that- by using a binary search algorithm. You can create a list of random numbers between 0 to 100, with every succeeding number having a difference of 2 between them. When the user inputs a random number, the program will check if that number is included in the list. It will do so by creating two halves of the list. If the program finds the number in the first half of the list, it will eliminate the other half and vice versa. The search will continue until the program finds the number input of the user or until the subarray size becomes 0 (this means that the number is not in the list). This python project idea will help you create an implement an algorithm that searches for an element in a list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-desktop-notifier-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Desktop Notifier App&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Have you ever wondered how notifications work? This small python project idea will throw some light on this. The desktop notifier apps run on your system and send you a piece of information after a fixed interval of time. We suggest you use libraries such as notify2, requests, etc. to build such a program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-python-story-generator"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. Python Story Generator&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is a fun but exciting python project which will work wonders with kids. In a nutshell, the program will ask users for inputs such as the name of a place, action, etc. and then build a story around the data. The story will be the same always but with little variation with the input.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-on-github-to-get-all-project-free"&gt;
  &lt;/a&gt;
  Follow Me On &lt;a href="https://github.com/naemazam"&gt;GitHub&lt;/a&gt; To Get All Project Free!!!!
&lt;/h2&gt;

</description>
      <category>python</category>
      <category>project</category>
      <category>beginners</category>
      <category>naemazam</category>
    </item>
    <item>
      <title>5 ways to implement case-insensitive search in SQLite with full Unicode support</title>
      <author>shallowdepth</author>
      <pubDate>Sun, 23 Jan 2022 03:23:29 +0000</pubDate>
      <link>https://dev.to/shallowdepth/5-ways-to-implement-case-insensitive-search-in-sqlite-with-full-unicode-support-53p2</link>
      <guid>https://dev.to/shallowdepth/5-ways-to-implement-case-insensitive-search-in-sqlite-with-full-unicode-support-53p2</guid>
      <description>&lt;p&gt;Recently I needed a case-insensitive search in SQLite to check if an item with the same name already exists in one of my projects ‚Äì &lt;a href="https://shallowdepth.online/projects/listok/?utm_source=devto&amp;amp;utm_medium=post"&gt;listOK&lt;/a&gt;. At first, it looked like a simple task, but upon deeper dive, it turned out to be easy, but not simple at all, with many twists and turns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#builtin-sqlite-capabilities-and-their-drawbacks"&gt;
  &lt;/a&gt;
  Built-in SQLite capabilities and their drawbacks
&lt;/h2&gt;

&lt;p&gt;In SQLite you can get a case-insensitive search in three ways:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- 1. Use a NOCASE collation&lt;/span&gt;
&lt;span class="c1"&gt;-- (we will look at other ways for applying collations later):&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; 
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;"String in AnY case"&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;NOCASE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- 2. Normalize all strings to the same case,&lt;/span&gt;
&lt;span class="c1"&gt;-- does not matter lower or upper:&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; 
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;"string in lower case"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- 3. Use LIKE operator which is case insensitive by default:&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; 
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="nv"&gt;"String in AnY case"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you use SQLAlchemy and its ORM these approaches will look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm.query&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Query&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YourModel&lt;/span&gt;


&lt;span class="n"&gt;text_to_find&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Text in AnY case"&lt;/span&gt;

&lt;span class="c1"&gt;# NOCASE collation
&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YourModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;YourModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"NOCASE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;text_to_find&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Normalizing text to the same case
&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YourModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YourModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;text_to_find&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# LIKE operator. No need to use SQLAlchemy's ilike
# since SQLite LIKE is already case-insensitive.
&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YourModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YourModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_to_find&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All these approaches are not ideal. &lt;em&gt;&lt;strong&gt;First&lt;/strong&gt;&lt;/em&gt;, without special considerations they do not make use of indexes on the field they are working on, with &lt;code&gt;LIKE&lt;/code&gt; being the worst offender: in most cases it is &lt;a href="https://www.sqlite.org/optoverview.html#the_like_optimization"&gt;incapable of using indexes&lt;/a&gt;. More on the use of indexes for case-insensitive queries is below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Second&lt;/strong&gt;&lt;/em&gt;, and more importantly, they have a rather limited &lt;a href="https://www.sqlite.org/lang_expr.html#the_like_glob_regexp_and_match_operators"&gt;understanding&lt;/a&gt; of what case-insensitive mean:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SQLite only understands upper/lower case for ASCII characters by default. The LIKE operator is &lt;strong&gt;case sensitive&lt;/strong&gt; by default for unicode characters that are beyond the ASCII range. For example, the expression 'a' LIKE 'A' is TRUE but '√¶' LIKE '√Ü' is FALSE.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is not a problem if you plan to work with strings that contain only English alphabet letters, numbers, etc. I needed the full Unicode spectrum, so a better solution was in order.&lt;/p&gt;




&lt;p&gt;Below I summarize five ways to achieve case insensitive search/comparison in SQLite for all Unicode symbols. Some of these solutions can be adapted to other databases and for implementing Unicode-aware &lt;code&gt;LIKE&lt;/code&gt;, &lt;code&gt;REGEXP&lt;/code&gt;, &lt;code&gt;MATCH&lt;/code&gt;, and other functions, although these topics are out of the scope of this post.&lt;/p&gt;

&lt;p&gt;We will look at the pros and cons of each approach, implementation details, and, finally, at indexes and performance considerations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-icu-extension"&gt;
  &lt;/a&gt;
  1. ICU extension
&lt;/h3&gt;

&lt;p&gt;Official SQLite documentation &lt;a href="https://www.sqlite.org/faq.html#q18"&gt;mentions&lt;/a&gt; the &lt;a href="https://www.sqlite.org/src/artifact?ci=trunk&amp;amp;filename=ext/icu/README.txt"&gt;ICU extension&lt;/a&gt; as a way to add complete support for Unicode in SQLite. ICU stands for International Components for Unicode.&lt;/p&gt;

&lt;p&gt;ICU solves the problems of both case-insensitive &lt;code&gt;LIKE&lt;/code&gt; and comparison/search, plus adds support for different collations for a good measure. It may even be faster than some of the later solutions since it is written in C and is more tightly integrated with SQLite.&lt;/p&gt;

&lt;p&gt;However, it comes with its challenges:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is a new &lt;strong&gt;type&lt;/strong&gt; of dependency: not a Python library, but an extension that should be distributed together with the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ICU needs to be compiled before use, potentially for different OS and platforms (not tested).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ICU does not itself implement Unicode conversions, but relies on the underline operating system ‚Äì I have seen multiple mentions of OS-specific issues, especially with Windows and macOS.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;All other solutions will depend on your Python code to perform the comparison, so it is important to choose the right approach to converting and comparing strings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choosing-the-right-python-function-for-caseinsensitive-comparison"&gt;
  &lt;/a&gt;
  Choosing the right python function for case-insensitive comparison
&lt;/h3&gt;

&lt;p&gt;To perform case-insensitive comparison and search we need to normalize strings to one case. My first instinct was to use &lt;code&gt;str.lower()&lt;/code&gt; for this. It will work in most circumstances, but it is not the proper way. Better to use &lt;code&gt;str.casefold()&lt;/code&gt; (&lt;a href="https://docs.python.org/3/library/stdtypes.html#str.casefold"&gt;docs&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Return a casefolded copy of the string. Casefolded strings may be used for caseless matching.&lt;/p&gt;

&lt;p&gt;Casefolding is similar to lowercasing but more aggressive because it is intended to remove all case distinctions in a string. For example, the German lowercase letter '√ü' is equivalent to "ss". Since it is already lowercase, &lt;code&gt;lower()&lt;/code&gt; would do nothing to '√ü'; &lt;code&gt;casefold()&lt;/code&gt; converts it to "ss".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, below we will use the &lt;code&gt;str.casefold()&lt;/code&gt; function for all conversions and comparisons.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-applicationdefined-collation"&gt;
  &lt;/a&gt;
  2. Application-defined collation
&lt;/h3&gt;

&lt;p&gt;To perform a case-insensitive search for all Unicode symbols we need to define a new collation in the application after connecting to the database (&lt;a href="https://www.sqlite.org/c3ref/create_collation.html"&gt;documentation&lt;/a&gt;). Here you have a choice ‚Äì overload the built-in &lt;code&gt;NOCASE&lt;/code&gt; or create your own ‚Äì we will discuss the pros and cons below. For the sake of an example we will use a new name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;

&lt;span class="c1"&gt;# Custom collation, maybe it is more efficient
# to store strings
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unicode_nocase_collation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_collation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"UNICODE_NOCASE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unicode_nocase_collation&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Connect to the DB and register the function
&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"your_db_path"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_collation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"UNICODE_NOCASE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unicode_nocase_collation&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Or, if you use SQLAlchemy you need to register
# the collation via an event
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listens_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'connect'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqlite_engine_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_collation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"UNICODE_NOCASE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unicode_nocase_collation&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Collations have several advantages compared to the next solutions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;They are easy to use. You can specify collation in the table schema and it will be automatically applied to all queries and indexes on this field unless you specify otherwise:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;UNICODE_NOCASE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;For the sake of completeness, let's look at two more ways to use collations:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- In a particular query:&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;"Text in AnY case"&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;UNICODE_NOCASE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- In an index:&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;idx1&lt;/span&gt; 
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;UNICODE_NOCASE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;-- Word of caution: your query and index &lt;/span&gt;
&lt;span class="c1"&gt;-- must match exactly,including collation, &lt;/span&gt;
&lt;span class="c1"&gt;-- otherwise, SQLite will perform a full table scan.&lt;/span&gt;
&lt;span class="c1"&gt;-- More on indexes below.&lt;/span&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'something'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- Output: SCAN TABLE test&lt;/span&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'something'&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;NOCASE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- Output: SEARCH TABLE test USING COVERING INDEX idx1 (text=?)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Collation provides case-insensitive sorting with &lt;code&gt;ORDER BY&lt;/code&gt; out of the box. It is especially easy to get if you define the collation in the table schema.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Performance-wise collations have some peculiarities, which we will discuss further.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-applicationdefined-sql-function"&gt;
  &lt;/a&gt;
  3. Application-defined SQL function
&lt;/h3&gt;

&lt;p&gt;Another way to achieve case-insensitive search is to create an application-defined SQL function (&lt;a href="https://www.sqlite.org/appfunc.html"&gt;documentation&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;

&lt;span class="c1"&gt;# Custom function
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Connect to the DB and register the function
&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"your_db_path"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CASEFOLD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Or, if you use SQLAlchemy you need to register 
# the function via an event
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listens_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'connect'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqlite_engine_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CASEFOLD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both cases &lt;code&gt;create_function&lt;/code&gt; accepts up to four arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  name of the function as it will be used in the SQL queries&lt;/li&gt;
&lt;li&gt;  number of arguments the function accepts&lt;/li&gt;
&lt;li&gt;  the function itself&lt;/li&gt;
&lt;li&gt;  optional bool &lt;code&gt;deterministic&lt;/code&gt;, default &lt;code&gt;False&lt;/code&gt; (added in Python 3.8) ‚Äì it is important for indexes, which we will discuss below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with collations, you have a choice ‚Äì overload built-in function (for instance, &lt;code&gt;LOWER&lt;/code&gt;) or create new. We will look at it in more detail later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-compare-in-the-application"&gt;
  &lt;/a&gt;
  4. Compare in the application
&lt;/h3&gt;

&lt;p&gt;Another way of case-insensitive search would be comparing in the app itself, especially if you could narrow down the search by using an index on other fields. For instance, in listOK case-insensitive comparison is needed for items in a particular list. Therefore, I could select all items in the list, normalize them to one case and compare them with the normalized new item.&lt;/p&gt;

&lt;p&gt;Depending on your circumstances it is not a bad solution, especially if the subset you will be comparing with is small. However, you will not be able to utilize database indexes on the text, only on other parameters you will be using to narrow down the scope.&lt;/p&gt;

&lt;p&gt;The advantage of this approach is its flexibility: in the application you can check not only equality but, for instance, implement "fuzzy" comparison to take into account possible misprints, singular/plural forms, etc. This is the route I chose for listOK since the bot needed fuzzy comparison for the "smart" item creation.&lt;/p&gt;

&lt;p&gt;In addition, it eliminates any coupling with the database ‚Äì it is simple storage that does not know anything about the data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-store-normalized-field-separately"&gt;
  &lt;/a&gt;
  5. Store normalized field separately
&lt;/h3&gt;

&lt;p&gt;There is one more solution: create a separate column in the database and keep there normalized text you will be searching on. For instance, the table may have this structure (only relevant fields):&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;name_normalized&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Sentence capitalization&lt;/td&gt;
&lt;td&gt;sentence capitalization&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;CAPITAL LETTERS&lt;/td&gt;
&lt;td&gt;capital letters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Non-ASCII symbols: –ù–∞–π–¥–∏ –ú–µ–Ω—è&lt;/td&gt;
&lt;td&gt;non-ascii symbols: –Ω–∞–π–¥–∏ –º–µ–Ω—è&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This may look excessive at first: you always need to keep the normalized version updated and effectively doubling the size of the &lt;code&gt;name&lt;/code&gt; field. However, with ORMs or even manually it is easy to do and the disk space plus RAM is relativity cheap.&lt;/p&gt;

&lt;p&gt;Advantages of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It completely decouples the application and database ‚Äì you can easily switch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can pre-process normalized filed if your queries require it (trim, remove punctuation or spaces, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#should-you-overload-builtin-functions-and-collations"&gt;
  &lt;/a&gt;
  Should you overload built-in functions and collations?
&lt;/h2&gt;

&lt;p&gt;When using application-defined SQL functions and collations you often have a choice: use a unique name or overload built-in functionality. Both approaches have their pros and cons in two main dimensions:&lt;/p&gt;

&lt;p&gt;First, &lt;strong&gt;reliability/predictability&lt;/strong&gt; when for some reason (a one-off mistake, bug, or intentionally) you do not register these functions or collations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Overloading: the database will still work, but the results may not be correct:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the built-in function/collation will behave differently than their custom counterparts;&lt;/li&gt;
&lt;li&gt;if you used now absent collation in an index it will appear to work, but results may be wrong even when reading;&lt;/li&gt;
&lt;li&gt;if the table with index and index using custom function/collation gets updated, the index may get corrupted (updated using built-in implementation), but continue working as if nothing happened.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Not overloading: the database will not work in any respects where the absent functions or collations are used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if you use an index on an absent function you will be able to use it for reading, but not for updates;&lt;/li&gt;
&lt;li&gt;indexes with application-defined collation will not work at all, since they use the collation while searching in the index.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Second, &lt;strong&gt;accessibility&lt;/strong&gt; outside of the main application: migrations, analytics, etc.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Overloading: you will be able to modify the database without problem, keeping in mind the risk of corrupting indexes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not overloading: in many cases you will need to register these functions or collations or take extra steps to avoid parts of the database that depend on it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you decide to overload, it may be a good idea to &lt;a href="https://www.sqlite.org/lang_reindex.html"&gt;rebuild indexes&lt;/a&gt; based on custom functions or collations in case they get wrong data recorded there, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Rebuild all indexes using this collation&lt;/span&gt;
&lt;span class="k"&gt;REINDEX&lt;/span&gt; &lt;span class="n"&gt;YOUR_COLLATION_NAME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- Rebuild particular index&lt;/span&gt;
&lt;span class="k"&gt;REINDEX&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- Rebuild all indexes&lt;/span&gt;
&lt;span class="k"&gt;REINDEX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performance-of-applicationdefined-functions-and-collations"&gt;
  &lt;/a&gt;
  Performance of application-defined functions and collations
&lt;/h2&gt;

&lt;p&gt;Custom functions or collation are much slower than built-in functions: SQLite "returns" to your application each time it calls the function. You can easily check it by adding a global counter to the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Work with the database
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Number of times the function has been called
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are querying rarely or your database is small, you will not see any meaningful difference. However, if you do not use an index on this function/collation, the database may perform a complete table scan applying the function/collation on each row. Depending on the size of the table, hardware, and the number of requests, the low performance may be surprising. Later I will publish a review of application-defined functions and collations performance.&lt;/p&gt;

&lt;p&gt;Strictly speaking, collations are a bit slower than SQL functions since for each comparison they need to casefold two strings, instead of one. Although this difference is very small: in my tests, the casefold function was faster than similar collation for around 25% which amounted to a difference of 10 seconds after 100 million iterations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indexes-and-caseinsensitive-search"&gt;
  &lt;/a&gt;
  Indexes and case-insensitive search
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#indexes-and-functions"&gt;
  &lt;/a&gt;
  Indexes and functions
&lt;/h3&gt;

&lt;p&gt;Let's start with the basics: if you define an index on any field, it will not be used in queries on a function applied to this field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;idx1&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- Output: SCAN TABLE table_name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For such queries you need a separate index with the function itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;idx1&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- Output: SEARCH TABLE table_name USING INDEX idx1 (&amp;lt;expr&amp;gt;=?)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In SQLite, it can be done on a custom function as well, but it must be marked as deterministic (meaning that with the same inputs it returns the same result):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"CASEFOLD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;casefold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deterministic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that you can create an index on a custom SQL function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;idx1&lt;/span&gt; 
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CASEFOLD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; 
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;CASEFOLD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- Output: SEARCH TABLE table_name USING INDEX idx1 (&amp;lt;expr&amp;gt;=?)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#indexes-and-collations"&gt;
  &lt;/a&gt;
  Indexes and collations
&lt;/h3&gt;

&lt;p&gt;The situation with collations and indexes is similar: for a query to utilize an index they must use the same collation (implied or provided expressly), otherwise, it will not work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Table without specified collation will use BINARY&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;-- Create an index with a different collation&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;idx1&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;NOCASE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;-- Query will use default column collation -- BINARY&lt;/span&gt;
&lt;span class="c1"&gt;-- and the index will not be used&lt;/span&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- Output: SCAN TABLE test&lt;/span&gt;


&lt;span class="c1"&gt;-- Now collations match and index is used&lt;/span&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;NOCASE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- Output: SEARCH TABLE test USING INDEX idx1 (text=?)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As noted above, collation can be specified for a column in the table schema. This is the most convenient way ‚Äì it will be applied to all queries and indexes on the respective field automatically unless you specify otherwise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Using application defined collation UNICODE_NOCASE from above&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt; &lt;span class="k"&gt;COLLATE&lt;/span&gt; &lt;span class="n"&gt;UNICODE_NOCASE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;-- Index will be built using the collation&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;idx1&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;-- Query will utilize index and collation automatically&lt;/span&gt;
&lt;span class="k"&gt;EXPLAIN&lt;/span&gt; &lt;span class="n"&gt;QUERY&lt;/span&gt; &lt;span class="n"&gt;PLAN&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'something'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- Output: SEARCH TABLE test USING COVERING INDEX idx1 (text=?)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#which-solution-to-choose"&gt;
  &lt;/a&gt;
  Which solution to choose?
&lt;/h2&gt;

&lt;p&gt;To choose a solution we need some criteria for comparison:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Simplicity&lt;/strong&gt; ‚Äì how difficult it is to implement and maintain it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt; ‚Äì how fast your queries will be&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Extra space&lt;/strong&gt; ‚Äì how much additional database space the solution requires&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Coupling&lt;/strong&gt; ‚Äì how much your solution intertwines the code and storage&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;th&gt;Simplicity&lt;/th&gt;
&lt;th&gt;Performance (relative, without index)&lt;/th&gt;
&lt;th&gt;Extra space&lt;/th&gt;
&lt;th&gt;Coupling&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ICU extension&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Difficult: requires a new type of dependency and compiling&lt;/td&gt;
&lt;td&gt;Medium to high&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Custom collation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Simple: allows to set collation in the table schema and apply it automatically to any query on the field&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Custom SQL function&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Medium: requires either building an index based on it or using in all relevant queries&lt;/td&gt;
&lt;td&gt;Low&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Comparing in the app&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Simple&lt;/td&gt;
&lt;td&gt;Depends on the use case&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Storing normalized string&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Medium: you need to keep the normalized string updated&lt;/td&gt;
&lt;td&gt;Low to Medium&lt;/td&gt;
&lt;td&gt;x2&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As usual, the choice of the solution will depend on your use case and performance demands. Personally, I would go either with custom collation, comparing in the app, or storing a normalized string. For example, in listOK, I first used a collation and moved to comparing in the app when added fuzzy search.&lt;/p&gt;

</description>
      <category>database</category>
      <category>python</category>
      <category>sql</category>
      <category>sqlite</category>
    </item>
    <item>
      <title>How We Turn This Bootstrap Based Web Into a Pixel Game-Like</title>
      <author>manushifva</author>
      <pubDate>Sun, 23 Jan 2022 03:06:37 +0000</pubDate>
      <link>https://dev.to/sandbottle/how-we-turn-this-bootstrap-based-web-into-a-pixel-game-like-2o77</link>
      <guid>https://dev.to/sandbottle/how-we-turn-this-bootstrap-based-web-into-a-pixel-game-like-2o77</guid>
      <description>&lt;p&gt;Bootstrap is great for building your web. It's simple, fast, and has great mobile support. But, making your site too "bootstrapped" is not a good thing, especially if you are a pixel game studio.&lt;/p&gt;

&lt;p&gt;Let's take a look at this. This is our website's old display.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xij-bAwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wieqhhcmy187e49cdc3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xij-bAwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wieqhhcmy187e49cdc3c.png" alt="Our ye olde web's display" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks nice and clean. But, it has one big problem, too usual. It's a big horrible mistake for us who works in the creative industry (well, this is hyperbole).&lt;/p&gt;

&lt;p&gt;And, here's our new website's display.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--osy05VCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8q6le6475puv2055b2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--osy05VCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8q6le6475puv2055b2f.png" alt="Our brand-new shiny web's display" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not perfect, but we're proud of this shiny-polished new website.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#our-quest-start"&gt;
  &lt;/a&gt;
  Our quest start.
&lt;/h2&gt;

&lt;p&gt;As a game developer, assets size doesn't matter. Because assets can bloat it to the app, clients won't feel the long-loading time for the assets. This is a bit different with the web. We need to keep the file size as low as possible, use as low as possible resources, and keep the load time fast.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#designing"&gt;
  &lt;/a&gt;
  Designing.
&lt;/h2&gt;

&lt;p&gt;Start with a concept. We use something that relates with our studio's name, Sandbottle;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Beach.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We also design the web like a retro-style game, with that big game title at the top-center, and a play button that can't play anything (lol) at the bottom-center of the page.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#start-drawing"&gt;
  &lt;/a&gt;
  Start drawing
&lt;/h2&gt;

&lt;p&gt;Drawing isn't a big thing when you are a pixel game studio. Right?&lt;/p&gt;

&lt;p&gt;The answer is no. &lt;/p&gt;

&lt;p&gt;Why? Since we only have one artist, and they are currently unavailable now. We also can't pay another, because we have some lack of cash. So, I need to wear my beret and paint that on my own.&lt;/p&gt;

&lt;p&gt;Start searching for reference, I found this great image for reference: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EzcpZawB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkwrit6zkroq1y63njfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EzcpZawB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkwrit6zkroq1y63njfa.png" alt="Image reference" width="612" height="392"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;That image was perfect like we need it. It has some padding at the sides and centered content exactly was planned before:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8ls4kVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtdzu5rvyh00dhn5z7q2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8ls4kVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtdzu5rvyh00dhn5z7q2.png" alt="Padded image" width="880" height="514"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, I'm starting to redraw that image partially. Remove and add some parts, and hocus pocus, I don't know how I can finish it.&lt;/p&gt;

&lt;p&gt;Don't forget about the button, still to draw it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jgSKRCHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1963x9hlx8sl36ocfp4o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jgSKRCHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1963x9hlx8sl36ocfp4o.png" alt="Image description" width="880" height="430"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For the button, I'm using a 32x32 px canvas, and drawing it as a 5 frames animated sprite, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQgV4EJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0r6smzntt81h7509nfv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQgV4EJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0r6smzntt81h7509nfv.gif" alt="Button" width="128" height="128"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After doing that all, I'm drawing one more thing; the game title. Drawing the game title is the easiest part of my part-time artist journey, because I just simply copy the font and modify a bit of it from &lt;a href="https://opengameart.org/content/pixel-block-font"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#start-coding"&gt;
  &lt;/a&gt;
  Start coding
&lt;/h2&gt;

&lt;p&gt;In this part, I'm doing some CSSs that centered the images, put the game title at the top and the button down. &lt;/p&gt;

&lt;p&gt;I also want that button can play its animation when hovered. Since (pure) JavaScript can't control gif playback, I'm coding this little function;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function hover() {
    $('#gif').show()
    $('#png').hide()
}

function leave() {
    $('#gif').hide()
    $('#png').show()

    $('#gif').attr('src', '/images/button.gif?x=' + Math.random())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function will show the static png when the button is unhovered, and the function will change it to gif when it's hovered. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-test"&gt;
  &lt;/a&gt;
  Final test
&lt;/h2&gt;

&lt;p&gt;Let's test our web with the lighthouse. Here's the result. Pretty insane right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wltNQpFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dw7rb8bsq7nz2j8w9yh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wltNQpFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dw7rb8bsq7nz2j8w9yh.png" alt='Lighthouse result (tested with "Desktop" device)' width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think that enough for today. Kinda fun to be an artist sometimes. &lt;/p&gt;

&lt;p&gt;Hit also the web here: &lt;a href="https://sandbottle.net"&gt;https://sandbottle.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[ Note ]&lt;br&gt;
This article is reuploaded because it's accidentally removed.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
