<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Nebula Graph: how variable-Length Pattern Matching is implemented</title>
      <author>lisahui</author>
      <pubDate>Fri, 22 Oct 2021 06:06:50 +0000</pubDate>
      <link>https://dev.to/lisahui/nebula-graph-how-variable-length-pattern-matching-is-implemented-1pb5</link>
      <guid>https://dev.to/lisahui/nebula-graph-how-variable-length-pattern-matching-is-implemented-1pb5</guid>
      <description>&lt;p&gt;At the very heart of openCypher, the MATCH clause allows you to specify simple query patterns to retrieve the relationships from a graph database. A variable-length pattern is commonly used to describe paths and it is Nebula Graph’s first try to get nGQL compatible with openCypher in the MATCH clause.&lt;/p&gt;

&lt;p&gt;As can be seen from the previous articles of this series, an execution plan is composed of physical operators. Each operator is responsible for executing unique computational logics. To implement the MATCH clause, the operators such as GetNeighbors, GetVertices, Join, Project, Filter, and Loop, which have been introduced in the previous articles, are needed. Unlike the tree structure in a relational database, the execution process expressed by an execution plan in Nebula Graph is a cyclic graph. How to transform a variable-length pattern into a physical plan in Nebula Graph is the focus of the Planner. In this article, we will introduce how variable-length pattern matching is implemented in Nebula Graph.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-analysis"&gt;
  &lt;/a&gt;
  Problem Analysis
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#fixedlength-pattern"&gt;
  &lt;/a&gt;
  Fixed-Length Pattern
&lt;/h3&gt;

&lt;p&gt;In a MATCH clause, a fixed-length pattern is commonly used to search for a relationship. If a fixed-length pattern is considered a special case of the variable-length pattern, that is, a pattern describing a path of a specified length, the implementations of both can be unified. Here are the examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Fixed-length pattern MATCH (v)-[e]-(v2)
// Variable-length pattern MATCH (v)-[e*1..1]-(v2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The preceding examples differ from each other in the type of the e variable. In the fixed-length pattern, e represents an edge, while in the variable-length one, e represents a list of edges of length 1.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-variablelength-patterns"&gt;
  &lt;/a&gt;
  Connecting Variable-Length Patterns
&lt;/h3&gt;

&lt;p&gt;According to the syntax of openCypher, a MATCH clause allows you to specify a combination of various patterns for describing complicated paths. For example, two variable-length patterns can be connected as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MATCH (v)-[e*1..3]-(v2)-[ee*2..4]-(v3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pattern combination in the preceding example is extendable, which means by connecting variable-length and fixed-length patterns in different ways, various complicated paths can be queried. Therefore, we must find a pattern to generate an execution plan to iterate the whole process recursively. The following conditions must be considered:&lt;/p&gt;

&lt;p&gt;The following variable-length path depends on the preceding one.&lt;br&gt;
The variables in the following pattern depend on the preceding pattern.&lt;br&gt;
Before the next traversal step, the starting vertex must be de-duplicated.&lt;br&gt;
From the following example, you can see that as long as an execution plan can be generated for the part of ()-[:like*m..n]-, combinations and iterations may be applied to generate plans for the subsequent parts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;()-[:like*m..n]- ()-[:like*k..l]- ()
 \____________/   \____________/   \_/
    Pattern1         Pattern2       Pattern3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#execution-plan"&gt;
  &lt;/a&gt;
  Execution Plan
&lt;/h2&gt;

&lt;p&gt;In this section, we will introduce how the ()-[:like*m..n]- part in the preceding example is transformed into a physical execution plan in Nebula Graph. This pattern describes a graph of a minimum of m hops and a maximum of n hops. In Nebula Graph, a one-step traversal is completed by the GetNeighbors operator. To implement a multi-step traversal, each traversal step must call the GetNeighbors operator again on the basis of the previous step, and when the traversal of all the steps are completed, all the retrieved vertices and edges are connected end to end to form a single path. What users need is the paths of m to n relationships. However, in the execution process, paths of length 1 to length n are queried and are stored for output or for the next traversal, but only the paths of length m to n are retrieved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#onestep-traversal"&gt;
  &lt;/a&gt;
  One-Step Traversal
&lt;/h3&gt;

&lt;p&gt;Let’s see what the one-step traversal looks like. In Nebula Graph, the source vertex is stored together with its outgoing edges, so retrieving them does not need to access data across partitions. However, the destination vertex and its incoming edges are stored in different partitions, so GetVertices is necessary for retrieving the properties of the vertex. In addition, to avoid replicated scanning of Storage, the source vertices must be de-duplicated before the traversal. The execution plan of a one-step traversal is shown as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJ_RVjed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244211-8f1aaec3-b1f4-4e52-b74c-7d547b4f350f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJ_RVjed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244211-8f1aaec3-b1f4-4e52-b74c-7d547b4f350f.png" alt="One-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multistep-traversal"&gt;
  &lt;/a&gt;
  Multi-Step Traversal
&lt;/h3&gt;

&lt;p&gt;The process of a multi-step traversal is the repetition of one-step traversal. However, we can see that the GetNeighbors operator can retrieve the properties of an edge’s source vertex, so the GetVertices operator can be omitted in the previous step. Here is an execution plan of a two-step traversal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EUbdh4ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244372-74619d76-8b10-481a-9dde-d065d801f847.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EUbdh4ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138244372-74619d76-8b10-481a-9dde-d065d801f847.png" alt="Multi-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storing-paths"&gt;
  &lt;/a&gt;
  Storing Paths
&lt;/h3&gt;

&lt;p&gt;The paths retrieved in each traversal step may be needed at the end of the traversal, so all the paths must be stored. The paths for a two-step traversal are connected by the Join operator. In the result of the example ()-[e:like*m..n]-, e represents a list of data (edges), so Union is needed to merge the results of each traversal step. The execution plan will be evolved further as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vbJSdFTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138245877-36d53b4a-0643-4058-8ffb-23502edc0901.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbJSdFTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138245877-36d53b4a-0643-4058-8ffb-23502edc0901.png" alt="One-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-variablelength-patterns"&gt;
  &lt;/a&gt;
  Connecting Variable-Length Patterns
&lt;/h3&gt;

&lt;p&gt;After the implementations of the preceding process, a physical plan will be generated for the ()-[e:like*m..n]- pattern. If multiple similar patterns are connected together, such a process is iterated. However, before the iteration, the results of the previous process must be filtered to get the paths of length m to length n. The retrieved dataset of the previous process involves the paths of length 1 to length n, so filtering them by path length is needed. When the variable-length patterns are connected together, the execution plan becomes as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KS16LRwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138246601-acec9a6e-07b7-4f2d-ba0e-40850dabb63c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS16LRwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/138246601-acec9a6e-07b7-4f2d-ba0e-40850dabb63c.png" alt="One-Step Traversal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the step-by-step decomposition of the patterns, the expected execution plan for the MATCH clause is finally generated. As you can see, it takes a lot of effort to transform a complicated pattern into the underlying interfaces for a traversal. Of course, the execution plan can be optimized, such as the multi-step traversal can be encapsulated by using the Loop operator and the sub-plan of a one-step traversal can be reused, which will not be detailed in this article. If you are interested, please refer to &lt;a href="https://github.com/vesoft-inc/nebula/blob/master/src/graph/planner/match/Expand.cpp"&gt;the source code of Nebula Graph&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This article demonstrated the process of generating an execution plan for a MATCH clause with a variable-length pattern. While reading the article, you may have this question: Why such a basic and simple path query will generate such a complicated execution plan in Nebula Graph? It’s not like Neo4j, where only a few operators are needed to complete the same job. In Nebula Graph, complicated directed acyclic graphs (DAG) are generated.&lt;/p&gt;

&lt;p&gt;The answer is that in Nebula Graph, the operators are closer to the underlying interfaces and there is a lack of semantic abstractions for higher-level graph operations. The operator granularity is too fine, so too many details need to be considered to implement the optimization of the upper layer. We will further study the execution operators to gradually improve the functionality and the performance of the MATCH clause.&lt;/p&gt;

&lt;p&gt;If you encounter any problems in the process of using Nebula Graph, please refer to &lt;a&gt;Nebula Graph Database Manual&lt;/a&gt; to troubleshoot the problem. It records in detail the knowledge points and specific usage of the graph database and the graph database Nebula Graph.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>opensource</category>
      <category>database</category>
      <category>devops</category>
    </item>
    <item>
      <title>5 proverbs for rapid development</title>
      <author>Aatmaj</author>
      <pubDate>Fri, 22 Oct 2021 06:06:40 +0000</pubDate>
      <link>https://dev.to/aatmaj/5-proverbs-for-rapid-development-2o4o</link>
      <guid>https://dev.to/aatmaj/5-proverbs-for-rapid-development-2o4o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#let-us-see-five-proverbs-which-fit-perfectly-to-the-rapid-development-scenario"&gt;
  &lt;/a&gt;
  Let us see five proverbs which fit perfectly to the rapid development scenario.
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#an-ounce-of-protection-is-worth-a-pound-of-cure"&gt;
  &lt;/a&gt;
  An ounce of protection is worth a pound of cure.
&lt;/h3&gt;

&lt;p&gt;A little precaution before a crisis hits is better than lot of firefighting afterwards.&lt;br&gt;
Many times, developers neglect risk management. Risk management, identification and prevention are more critical than we think. Unidentified risks cause a lot of trouble in the later stages of software development. This is why, preventing such risks is wiser than to fix them after they get worsened. Identifying risks and taking precautions against them, that is protecting the project against the risk is a key to rapid development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-stich-in-time-saves-nine"&gt;
  &lt;/a&gt;
  A stich in time saves nine
&lt;/h3&gt;

&lt;p&gt;Correction at early stages saves work later.&lt;br&gt;
In a software development lifecycle, doing right things at the right time is very important. If work is delayed in the earlier stages, it can causes much trouble afterward. Example a flaw in the design time is not fixed is bound to cause a disaster. And one flaw in the implementation time if not fixed will take almost triple the time to fix at the debugging phase. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cross-the-stream-where-it-is-shallowest"&gt;
  &lt;/a&gt;
  Cross the stream where it is shallowest.
&lt;/h3&gt;

&lt;p&gt;Don't complicate things unnecessarily.&lt;br&gt;
Many developers believe that the more complicated things will be made, the better the project will execute. But that's not the case. In reality complicated practices, stringent methodologies actually lengthen the process rather than  making it faster. This is why many times the simple is the best. Complex design patters, complex code leads only to increasing the clutter of the program. Yes, this doesnt mean that one must nor use complex patterns or code. This means that one must always strive for a simpler solution to the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-the-doughnut-and-not-the-hole"&gt;
  &lt;/a&gt;
  Watch the doughnut, and not the hole.
&lt;/h3&gt;

&lt;p&gt;Focus on what you have rather than at what you don't.&lt;br&gt;
In a software development lifecycle, one cannot get all the aspects perfect. In that case, you need to maximize what you have over what you don't. For example you might not have trained personnel, or say might not have enough time. But in such cases, you must focus on what you have and try to give the best possible. Focus on your strengths and try to win the match.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#too-many-cooks-spoil-the-broth"&gt;
  &lt;/a&gt;
  Too many cooks spoil the broth.
&lt;/h3&gt;

&lt;p&gt;If too many people are involved in a task or activity, it will not be done well.&lt;br&gt;
This is often the case with software development scenarios. Too many people who are experienced and have their own different viewpoints. While difference in perspectives always leads to better ideas, there must be only one decision maker whome everyone  must follow. Disagree but commit must be the case with those who are the subordinates. If too many people are decision makers, then it will lead to chaos.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Handful Github Repos for Full stack web developer</title>
      <author>rams codes</author>
      <pubDate>Fri, 22 Oct 2021 05:02:13 +0000</pubDate>
      <link>https://dev.to/code_rams/handful-github-repos-for-full-stack-web-developer-2625</link>
      <guid>https://dev.to/code_rams/handful-github-repos-for-full-stack-web-developer-2625</guid>
      <description>&lt;p&gt;This article contains a list of useful GitHub repositories to help full-stack web developers to improve their skills. &lt;/p&gt;

&lt;p&gt;It is structured in the following order,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Roadmap&lt;/li&gt;
&lt;li&gt;Front end developer resources&lt;/li&gt;
&lt;li&gt;Backend developer resources&lt;/li&gt;
&lt;li&gt;Full-stack developer resources&lt;/li&gt;
&lt;li&gt;Web development tools&lt;/li&gt;
&lt;li&gt;Projects based learning &lt;/li&gt;
&lt;li&gt;Free books and additional tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-web-developer-roadmap"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Web Developer Roadmap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The roadmap is a guided way to start your journey to become a full stack developer. This repo contains the roadmap for a complete front-end, back-end and dev-ops learning pathway.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCGOAEz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632930953254/VGpH7sz8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HCGOAEz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632930953254/VGpH7sz8f.png" alt="Screenshot 2021-09-29 at 9.25.28 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-design-resources-for-developers"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;Design resources for Developers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains the curated list of design and UI resources from stock photos, web templates, CSS frameworks, UI libraries, tools and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RBUi-MW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931132372/h8H-XZ416l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBUi-MW8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931132372/h8H-XZ416l.png" alt="Screenshot 2021-09-29 at 9.28.29 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-frontend-web-development-resources"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/RitikPatni/Front-End-Web-Development-Resources"&gt;Frontend Web Development Resources&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A practical journey of tools and resources to become front-end Web Developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJMn4-8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931187932/VKfWHtvsX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJMn4-8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931187932/VKfWHtvsX.png" alt="Screenshot 2021-09-29 at 9.29.32 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-frontend-dev-bookmarks"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/dypsilon/frontend-dev-bookmarks"&gt;Frontend Dev Bookmarks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The curated collection of resources for frontend web developers for appearance, architecture, compatibility, user interface and a lot more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QaweHA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931437119/VjcRZPEiS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QaweHA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931437119/VjcRZPEiS.png" alt="Screenshot 2021-09-29 at 9.33.43 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-frontend-interview-handbook"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/yangshun/front-end-interview-handbook"&gt;Frontend Interview Handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Contains Front End interview preparation materials for developers includes - pop quizzes, coding, front end system design and more!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x53CvQoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931521605/xiwdGndHV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x53CvQoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931521605/xiwdGndHV.png" alt="Screenshot 2021-09-29 at 9.35.08 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-awesome-backend-engineer"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/zhashkevych/awesome-backend"&gt;Awesome Backend Engineer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A curated and opinionated list of resources for backend developers includes resources for networking, databases, security, architecture and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZwRFRTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931639670/5QPWNuDY5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZwRFRTt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931639670/5QPWNuDY5.png" alt="Screenshot 2021-09-29 at 9.37.00 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-ultimate-node-js-resources"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/DHANUSHXENO/Ultimate-NodeJs-Resources"&gt;Ultimate Node js resources&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This repo contains resources for Nodejs includes Github repos, books, blogs, youtube videos to refer and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QyDMzGgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931807823/Hqf9zL1Pp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QyDMzGgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931807823/Hqf9zL1Pp.png" alt="Screenshot 2021-09-29 at 9.39.43 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-javascript-algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms and Data Structures&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains Js based examples of many popular algorithms and data structures.&lt;/p&gt;

&lt;p&gt;Each algorithm and data structure has its own related explanations and links for further reading (including YouTube videos).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLXwiM44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931888084/3NVAfFPsQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLXwiM44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931888084/3NVAfFPsQ.png" alt="Screenshot 2021-09-29 at 9.41.11 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-30-seconds-of-code"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains a wide variety of ES6 helper functions includes helpers for dealing with primitives, arrays and objects, as well as algorithms, DOM manipulation functions and Node.js utilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djQs5qou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931953290/abxRy3tza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djQs5qou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632931953290/abxRy3tza.png" alt="Screenshot 2021-09-29 at 9.42.21 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-become-a-full-stack-web-developer"&gt;
  &lt;/a&gt;
  10. &lt;a href=""&gt;Become a Full Stack Web Developer &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains free resources for learning Full Stack Web Development which includes a complete learning journey to become a full-stack web developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2I-ScV06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932011333/YzXXn4fMq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2I-ScV06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932011333/YzXXn4fMq.png" alt="Screenshot 2021-09-29 at 9.43.20 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-web-development-resources"&gt;
  &lt;/a&gt;
  11. &lt;a href="https://github.com/markodenic/web-development-resources"&gt;Web Development Resources&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Tools for web development includes illustrations, icons, fonts, templates, libraries and a lot more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0G99u54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932082437/13A4HMokIp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0G99u54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932082437/13A4HMokIp.png" alt="Screenshot 2021-09-29 at 9.44.09 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-free-for-dev"&gt;
  &lt;/a&gt;
  12. &lt;a href="https://github.com/ripienaar/free-for-dev"&gt;Free for Dev&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains a complete list of software (SaaS, PaaS, IaaS, etc.) and other offerings that have free tiers for developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8A-N1Jvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932140332/q1FHMkJPp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8A-N1Jvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932140332/q1FHMkJPp.png" alt="Screenshot 2021-09-29 at 9.45.28 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-tech-interview-handbook"&gt;
  &lt;/a&gt;
  13. &lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Tech Interview Handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Curated technical interview preparation materials to clear technical interviews.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EahORpDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932217084/8-wMVUWYI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EahORpDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932217084/8-wMVUWYI.png" alt="Screenshot 2021-09-29 at 9.46.44 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-projectbased-learning"&gt;
  &lt;/a&gt;
  14. &lt;a href="https://github.com/practical-tutorials/project-based-learning"&gt;Project-Based Learning &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;"Learn by doing" is the best approach to learn to code. &lt;/p&gt;

&lt;p&gt;Here are programming tutorials in which you can learn to build an application from scratch. &lt;/p&gt;

&lt;p&gt;These tutorials are divided into different primary programming languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x1Sg-DLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932277599/iXjngmzkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x1Sg-DLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932277599/iXjngmzkf.png" alt="Screenshot 2021-09-29 at 9.47.47 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-free-programming-books"&gt;
  &lt;/a&gt;
  15. &lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Contains the list of books and resources for all programming languages in many languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I7aQteOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932346893/Yc8IBSdiI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7aQteOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932346893/Yc8IBSdiI.png" alt="Screenshot 2021-09-29 at 9.48.54 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-awesome"&gt;
  &lt;/a&gt;
  16. &lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It contains Awesome lists about all kinds of interesting topics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bh8KYUOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932402343/wE9by_g4M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bh8KYUOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632932402343/wE9by_g4M.png" alt="Screenshot 2021-09-29 at 9.49.51 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for taking your time and reading this article, it was originally written as Twitter &lt;a href="https://twitter.com/code_rams/status/1443211619090243590"&gt;thread&lt;/a&gt;, and posted in my personal blog &lt;a href="https://ramyachinnadurai.in/handful-github-repos-for-full-stack-web-developer"&gt;ramyachinnadurai.in&lt;/a&gt;. If you have any suggestions or ideas to share feel free to contact me on  &lt;a href="https://twitter.com/code_rams"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>fullstack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Appwrite Users Services</title>
      <author>Asian Cat</author>
      <pubDate>Fri, 22 Oct 2021 04:59:09 +0000</pubDate>
      <link>https://dev.to/asiancat54x/appwrite-users-services-4ohk</link>
      <guid>https://dev.to/asiancat54x/appwrite-users-services-4ohk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2pe1riDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9v7gap3s63m903rnn2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2pe1riDe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9v7gap3s63m903rnn2o.png" alt="Appwrite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-appwrite"&gt;
  &lt;/a&gt;
  What is Appwrite?
&lt;/h2&gt;

&lt;p&gt;Appwrite is an end-to-end backend server for Web, Mobile, Native, or Backend apps packaged as a set of Docker microservices. Appwrite abstracts the complexity and repetitiveness required to build a modern backend API from scratch and allows you to build secure apps faster.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#how-will-this-post-be-help-to-you"&gt;
  &lt;/a&gt;
  How will this post be help to you?
&lt;/h2&gt;

&lt;p&gt;This post is for the beginners who are trying to get started with Appwrite. This post teaches you how you can use Appwrite user services in your Appwrite project.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#what-are-we-going-to-use"&gt;
  &lt;/a&gt;
  What are we going to use?
&lt;/h2&gt;

&lt;p&gt;We will be using:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite"&gt;Appwrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/electron/electron"&gt;Electron&lt;/a&gt; as frontend&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/caroso1222/notyf"&gt;Notyf&lt;/a&gt; for displaying toast messages&lt;/li&gt;
&lt;/ol&gt;



&lt;h2&gt;
  &lt;a href="#what-we-will-do"&gt;
  &lt;/a&gt;
  What we will do
&lt;/h2&gt;

&lt;p&gt;We will be creating a simple login / signup form using Appwrite's users services. The registered user can see other users who are registered and check their username , email verification status , registeration date etc.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing dependencies
&lt;/h2&gt;

&lt;p&gt;Now we will install all the required dependencies for out project&lt;/p&gt;

&lt;p&gt;package.json should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "appwrite-toturial",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "electron ."
  },
  "keywords": [],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "appwrite": "^4.0.4",
    "dotenv": "^10.0.0",
    "electron": "^15.3.0",
    "moment": "^2.29.1",
    "node-appwrite": "^2.5.1"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run &lt;code&gt;npm install&lt;/code&gt; to install the dependencies!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template"&gt;
  &lt;/a&gt;
  Template
&lt;/h2&gt;

&lt;p&gt;Create three files - index.html , styles.css and app.js&lt;/p&gt;

&lt;p&gt;The code for the frontend (html and css) in the github repository.&lt;/p&gt;

&lt;p&gt;app.js should be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const notyf = new Notyf()

const loginText = document.querySelector(".title-text .login");
const loginForm = document.querySelector("form.login");
const loginBtn = document.querySelector("label.login");
const signupBtn = document.querySelector("label.signup");
const signupLink = document.querySelector("form .signup-link a");

signupBtn.onclick = ((e) =&amp;gt; {
    loginForm.style.marginLeft = "-50%";

    loginText.style.marginLeft = "-50%";
});

loginBtn.onclick = (() =&amp;gt; {
    loginForm.style.marginLeft = "0%";

    loginText.style.marginLeft = "0%";
});

signupLink.onclick = (() =&amp;gt; {
    signupBtn.click();

    return false;
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;index.js:&lt;/p&gt;

&lt;p&gt;This file will be our entrypoint for this application. We will initialize electron here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { app , BrowserWindow } = require("electron")
const path = require("path")

app.on("ready", () =&amp;gt; {
    const window = new BrowserWindow({
        "width": 500,
        "height": 500,
        "webPreferences": {
            "nodeIntegration": true,
            "contextIsolation": false,
        }
    })

    window.loadFile(path.join(__dirname, "index.html"))
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run &lt;code&gt;npm run start&lt;/code&gt; and you should see a login / signup form.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#starting-the-application"&gt;
  &lt;/a&gt;
  Starting the application
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Gather all the input and buttons for getting the data from user&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will use JavaScript's &lt;code&gt;.querySelector&lt;/code&gt; method for selecting both the buttons and listen for each of them&lt;/p&gt;

&lt;p&gt;In app.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const loginText = document.querySelector(".title-text .login");
const loginForm = document.querySelector("form.login");
const loginBtn = document.querySelector("label.login");
const signupBtn = document.querySelector("label.signup");
const signupLink = document.querySelector("form .signup-link a");

signupBtn.onclick = (() =&amp;gt; {
    loginForm.style.marginLeft = "-50%";

    loginText.style.marginLeft = "-50%";

    signUp()
});

loginBtn.onclick = (() =&amp;gt; {
    loginForm.style.marginLeft = "0%";

    loginText.style.marginLeft = "0%";

    signIn()
});

signupLink.onclick = (() =&amp;gt; {
    signupBtn.click();

    return false;
});

document.addEventListener("keydown" , (e) =&amp;gt; {
    if(e.keyCode === 27){
        const target = document.querySelector(".userInfo")

        if(target.style.opacity == 1){
            target.classList.add("fade")

            target.style.display = "block"

            setTimeout(() =&amp;gt; {
                target.classList.remove("fade")

                target.style.opacity = 0

                target.style.display = "none"
            } , 599)

            notyf.success("Press ESC to close")
        }
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will first start by creating a new user.&lt;/p&gt;

&lt;p&gt;To create a new user, firstly we will have to initialize all the required classes from appwrite.&lt;/p&gt;

&lt;p&gt;Gather projectId , endPoint and api Key from appwrite's dashboard and use them here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const sdk = require("node-appwrite")

const client = new sdk.Client()

client.setEndpoint(apiEndPoint)
      .setProject(projectId)
      .setKey(projectAPiKey)

const users = new sdk.Users(client)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will listen for the click and add user to database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector(".signUp_button").addEventListener("click" , (e) =&amp;gt; {
    e.preventDefault()

    const username = document.querySelector(".sign_up_username").value

    const email = document.querySelector(".sign_up_email").value

    const password = document.querySelector(".sign_up_password").value

    if(password.length &amp;lt; 6){
        notyf.error("Password must be at least 6 characters")

        return
    }

    users.create(email , password , username).then((res) =&amp;gt; {
        notyf.success("Successfully Created A New User!")
    })
    .catch((err) =&amp;gt; {
        console.error(err)

        notyf.error("Error while creating a new user!")
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this is the function which will run on click of the sign up button&lt;/p&gt;

&lt;p&gt;The first line is pretty simple, it prevents the default behaviour. The next three lines are for the user's credentials. Next, we are checking if the length of the password is not less than 6. &lt;code&gt;Note: Appwrite raises an error if the password length is less that 6&lt;/code&gt;. Finally, creating users is pretty simple. The User class which we initiated, will be used to create the user. Now run the file and enter username , email address and password.&lt;/p&gt;

&lt;p&gt;Now, move to the appwrite's dashboard and click the Users button under Develop in left panel. &lt;/p&gt;

&lt;p&gt;Now, you will see that a new user is created and it should look somewhat like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XV17Q0gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnzmzlicydyv85vqabtw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XV17Q0gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnzmzlicydyv85vqabtw.png" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! We have successfully created sign up form!&lt;/p&gt;




&lt;ol&gt;
&lt;li&gt;Making login form&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, making login form is as simple as creating user. Instead, it is done using a different module named &lt;code&gt;appwrite&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is how you would do it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Import the appwrite module
const { Appwrite } = require("appwrite")
const server = new Appwrite()

server.setEndpoint(endPoint)
      .setProject(projectID)

document.querySelector(".login_button").addEventListener("click" , (e) =&amp;gt; {
    e.preventDefault()

    const email = document.querySelector(".signin_email").value;

    const password = document.querySelector(".signin_password").value

    server.account.createSession(email, password).then((res) =&amp;gt; {
        notyf.success("Successfully logged in!")
    })
    .catch((err) =&amp;gt; {
        notyf.error("Username or password is incorrect!")
    })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, firstly we are listening for the click. On click, we are gathering username and password from input element in DOM. Next, we are creating a session for the user login. This session can be used for the next time whenever the users opens the app (The session is stored inside of the user's system and can be retrived any time). It would directly take them to dashboard instead to again doing login. So, if the account email and password are correct, we would send a message saying that there was a successful login. If the login email / password is incorrect, we will display invalid credentials message.&lt;/p&gt;

&lt;p&gt;Now, we have successfully created a working login / signup system!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#showing-a-list-of-users-available"&gt;
  &lt;/a&gt;
  Showing a list of users available
&lt;/h2&gt;

&lt;p&gt;Now that our login / signup system is complete, we will show the users, the names of all the other users registered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
users.list().then((users) =&amp;gt; {
    const parent = document.querySelector(".users")

    for(let user of users.users) {
        const card = document.createElement("div");

        card.addEventListener("click" , parseFunction(showUser , [user["$id"]]));

        card.classList.add("user-card")

        card.innerHTML = user.name;

        parent.appendChild(card);
    }
})
.catch((err) =&amp;gt; {})

const parseFunction = (name , args) =&amp;gt; {
    return () =&amp;gt; name(...args)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, here, firstly, we are requesting to the appwrite to send a list of all the users registered. &lt;code&gt;users.list&lt;/code&gt; returns a object with the list of users. &lt;code&gt;name&lt;/code&gt; gives the name of that specific user. There are other properties too which can be used. You can see them &lt;a href="https://appwrite.io/docs/models/userList"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you run this function, you will see a list of users logged in (even though at first, you will see your own username if you are the only one registered, you can try to sign up with multiple emails and test that out). &lt;/p&gt;

&lt;p&gt;Next, we are just creating a card for showing the user's name.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#show-users-profile"&gt;
  &lt;/a&gt;
  Show user's profile
&lt;/h2&gt;

&lt;p&gt;So, when we will click on a specific user's card, we should see his/her name, when they signed up , and their status.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const showUser = (userId) =&amp;gt; {
    users.get(userId).then((user) =&amp;gt; {
        document.querySelector(".userName").innerHTML = "Username: " + user.name
        document.querySelector(".userVerified").innerHTML = "Email Verified: " + (user.emailVerification ? "Verified" : "Not verified")
        document.querySelector(".userRegistration").innerHTML = "Registration: " + moment(user.registration).format("DD/MM/YYYY")
        document.querySelector(".userStatus").innerHTML = "Status: " + (user.status === 0 ? "Unactivated" : user.status === 1 ? "Activated" : "Blocked")

        const target = document.querySelector(".userInfo")

        if(target.style.opacity == 0){
            target.classList.add("unfade")

            target.style.display = "block"

            setTimeout(() =&amp;gt; {
                target.classList.remove("unfade")

                target.style.opacity = 1
            } , 599)

            notyf.success("Press ESC to close")
        }
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, this function fetchs the user according to the user id. Then, we can use the data to show the user's name , whether their email is verified , the date when they registered and their status (whether thay are active, inactive or blocked). &lt;a href="https://appwrite.io/docs/models/user"&gt;Here&lt;/a&gt; is the list of the data that appwrite returns. Next lines are for animation. The block appears with a unfading animation.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#updating-users-credentials"&gt;
  &lt;/a&gt;
  Updating user's credentials
&lt;/h2&gt;

&lt;p&gt;Now that we have created a system for user sign up, we should also allow users to edit their crendentials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
document.querySelector(".update").addEventListener("click", (e) =&amp;gt; {
    e.stopImmediatePropagation()

    var f = false

    users.updateEmail(currentUserId , document.querySelector(".editEmail").value).then((res) =&amp;gt; {})
        .catch((err) =&amp;gt; {
            notyf.error("Invalid email")

            f = true
        })

    if(f){
        return
    }

    f = false

    users.updateName(currentUserId , document.querySelector(".editName").value).then((res) =&amp;gt; {})
        .catch((err) =&amp;gt; {
            notyf.error("Invalid email")

            f = true
        })

    if(f){
        return
    }

    f = false

    users.updatePassword(currentUserId , document.querySelector(".editPassword").value).then((res) =&amp;gt; {})
        .catch((err) =&amp;gt; {
            notyf.error("Invalid email")

            f = true
        })

    if(f){
        return
    }

    notyf.success("Successfully changed the credentials")
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, here firstly we are listening for the update button click. On click, we would do the following things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update the email - Get the new email from the input and check if there wasnt any error while updating. If there was, send a toast notification&lt;/li&gt;
&lt;li&gt;Update the username - Get the new username from the input and check if there wasnt any error while updating. If there was, send a toast notification&lt;/li&gt;
&lt;li&gt;Update the password - Get the new password from the input and check if there wasnt any error while updating. If there was, send a toast notification&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-logouts"&gt;
  &lt;/a&gt;
  Creating logouts
&lt;/h2&gt;

&lt;p&gt;Now, the user should be able to logout. This should go like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
document.querySelector(".logout").addEventListener("click", (e) =&amp;gt; {
    server.account.deleteSession("current")

    const target = document.querySelector('.wrapper')

    const secondtarget = document.querySelector(".dashboard")

    secondtarget.classList.add("fade")

    target.classList.add("unfade")

    target.style.display = "block"

    setTimeout(() =&amp;gt; {
        target.classList.remove("unfade")

        target.style.opacity = 1

        secondtarget.classList.remove("fade")

        secondtarget.style.opacity = 0
    } , 599)

    notyf.success("Successfully logged out")
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we are listening for the click on the logout button. Whenever the user clicks the button, we will delete the session that we have created during login. "current" deletes the current session saved in the user's system. As the session is deleted, next time we open up the app, it will redirect to the login / signup page.&lt;/p&gt;

&lt;p&gt;Next lines are for fading and unfading effect for the dashboard and authentication page, respectively. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deleting-account"&gt;
  &lt;/a&gt;
  Deleting account
&lt;/h2&gt;

&lt;p&gt;Now that we have created all the elements, we will now allow users to delete their account.&lt;/p&gt;

&lt;p&gt;The code should go like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.querySelector(".delete").addEventListener("click" , (e) =&amp;gt; {
    users.delete(currentUserId)

    const target = document.querySelector('.wrapper')

    const secondtarget = document.querySelector(".dashboard")

    secondtarget.classList.add("fade")

    target.classList.add("unfade")

    target.style.display = "block"

    setTimeout(() =&amp;gt; {
        target.classList.remove("unfade")

        target.style.opacity = 1

        secondtarget.classList.remove("fade")

        secondtarget.style.opacity = 0
    } , 599)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we will listen for the click on the delete button. Whenever the user clicks it, we will run the function.&lt;/p&gt;

&lt;p&gt;The first line of the function deletes the user from the databse. The next lines are just for the animations just like we did in logout.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that you will have understood how to use Appwrite's Users Services. This tutorial uses all the services that appwrite provides and bundles them into a project.&lt;/p&gt;

&lt;p&gt;I found out about Appwrite from the Hacktoberfest event. I really love this project. Its simple, easy and most of all - secure and fast. It has a good UI for seeing the requests count, database collections and users. I would really recommend using Appwrite while creating a database application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  Github repository
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/AsianCat54x/Appwrite-Tutorial"&gt;Here&lt;/a&gt; is the full source code for this project:  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>appwrite</category>
    </item>
    <item>
      <title>Code that replicates itself(not recursion)</title>
      <author>Shuvo</author>
      <pubDate>Fri, 22 Oct 2021 04:57:58 +0000</pubDate>
      <link>https://dev.to/0shuvo0/code-that-replicates-itselfnot-recursion-4chf</link>
      <guid>https://dev.to/0shuvo0/code-that-replicates-itselfnot-recursion-4chf</guid>
      <description>&lt;p&gt;This thing called virus is crazy as hell, right? Like some dude out of nowhere got infected by COVID-19 virus. Now the world is going through this huge pandemic. That is due to their ability to replicate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hUStiyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs8f73t3692hejst4sug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hUStiyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bs8f73t3692hejst4sug.png" alt="Computer virus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The situation is similar with digital virus aka computer virus. If somehow just one virus can enter your computer, in right condition it will create millions of copies of itself.&lt;br&gt;
So what is a computer virus? A computer is just some code that has the ability to replicate itself. &lt;strong&gt;Code that can output itself is called Quine&lt;/strong&gt;.&lt;br&gt;
However a code that simply just reads itself is not a Quine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#not a quine
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Code for a quine is made out of two parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;code used to do the printing&lt;/li&gt;
&lt;li&gt;data representing textual form of the code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's an example of quine in Python&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'q=%r;print (q%%q)'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#output: q='q=%r;print (q%%q)';print (q%q)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And in JS:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;`($=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)()`&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;

&lt;span class="c1"&gt;//output in console: ($=_=&amp;gt;`($=${$})()`)()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can find more examples of quine by following these links: &lt;a href="//geeksforgeeks.org/quines-in-javascript/"&gt;JavaScript Quines&lt;/a&gt;, &lt;a href="https://www.geeksforgeeks.org/quine-in-python/"&gt;Python Quines&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for now. Make sure you check out my other articles and YT tutorials.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__728097"&gt;
  
    .ltag__user__id__728097 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/0shuvo0" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/0shuvo0"&gt;Shuvo&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/0shuvo0"&gt;Frontend Developer and YouTuber.
Channel link: https://www.youtube.com/c/AngleBrace&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;iframe&gt;
  width="710"&lt;br&gt;
  height="399"&lt;br&gt;
  src="https://www.youtube.com/embed/cyUsAFblyhc"&lt;br&gt;
  allowfullscreen&lt;br&gt;
  loading="lazy"&amp;gt;&lt;br&gt;
&lt;/iframe&gt;&lt;br&gt;
&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why should you opt for React Migration?</title>
      <author>olga white</author>
      <pubDate>Fri, 22 Oct 2021 04:39:55 +0000</pubDate>
      <link>https://dev.to/whiteeolgaa/why-should-you-opt-for-react-migration-2251</link>
      <guid>https://dev.to/whiteeolgaa/why-should-you-opt-for-react-migration-2251</guid>
      <description>&lt;p&gt;When organizations could depend upon their items' provisions and administrations' benefits for assuming control over the market. In any case, the ascent in digitization turned the assumptions for customers to an alternate degree. &lt;a href="https://www.mckinsey.com/business-functions/mckinsey-design/our-insights/the-business-value-of-design"&gt;McKinsey says today buyers&lt;/a&gt; hope to infer personalization, instantaneousness, and comfort from their computerized insight. &lt;/p&gt;

&lt;p&gt;That made customer commitment an eminent highlight focus on. Subsequently, significant associations are attempting to lift their client experience, putting more noteworthy accentuation on their UI plan that goes about as an impetus to draw in and hold customers. In one more report by McKinsey, client focused plans eliminate the mass of physical and computerized administration and in the end works on monetary execution. &lt;/p&gt;

&lt;p&gt;Configuration isn't just with regards to inventiveness, yet it centers around the requirements, inspirations, and worries of your shoppers, states BCG. This further assists organizations with staying ready for serious difficulties and openings. Deloitte demonstrates the above assertion by saying that almost 79% of business chiefs accept that human-focused plan believing is essential to defeat complex issues. &lt;/p&gt;

&lt;p&gt;Thus alongside firm client research, select the best instrument and innovation to foster an insight driven human-focused plan. That is one more motivation to pick React Consulting Services. &lt;/p&gt;

&lt;p&gt;What is React? &lt;/p&gt;

&lt;p&gt;Respond is a reusable part based, open-source, front-end JavaScript library made by Jordan Walke, a Facebook programmer to deal with advertisements, in 2011. While Angular and Vue are noticeable players on the lookout, as per Google Trends, React has beaten them in the game due to its: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Quick turn of events&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upgraded execution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unidirectional information stream&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;System adaptability&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reusable parts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple expectation to learn and adapt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code steadiness&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple investigating&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fast delivering&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, React assists with creating web and portable application client driven plans with more noteworthy UI control and the board.&lt;/p&gt;

&lt;p&gt;For what reason would it be a good idea for you to decide on React Migration?&lt;/p&gt;

&lt;p&gt;Respond relocation has acquired a lot of noticeable quality on account of its structure. The React structure empowers designers to chip away at enormous web and versatile applications without page reloading concerns.&lt;/p&gt;

&lt;p&gt;In addition, ReactJS movement administrations help to foster client driven at this point well disposed applications with best in class elements and configuration stream. Respond is acceptable on numerous stages, and gives improved code reusability to foster cutting edge web and portable applications on a low financial plan. Plus, with React movement support of these applications becomes simpler and practical.&lt;/p&gt;

&lt;p&gt;The main associations all throughout the planet join ReactJS movement administrations with React counseling administrations to get the top tier application improvement experience.&lt;/p&gt;

&lt;p&gt;Presently there are huge loads of &lt;a href="https://www.cronj.com/react/reactjs-consulting"&gt;react js consulting&lt;/a&gt; organizations on the lookout. You can check for yourself by basically composing "Respond JS Consulting Companies" on Google. You will undoubtedly get huge loads of results. In any case, how might you guarantee which is the best one for you? All things considered, just follow the given rundown to track down the able accomplice for your necessities!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Investigate organizations' position and notoriety on the lookout.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Waitlist React counseling firms dependent on their tributes, customers' audits, portfolio and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get a more profound understanding into their engineers' ranges of abilities and aptitude, relational abilities and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look at whether their security and protection consistence meet your nation's conventions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Examine inside and out their advancement system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get an unmistakable image of their correspondence and improvement following offices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Post with regards to their NDA and other proprietorship agreements to guarantee possession maintenance.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>reactmigration</category>
    </item>
    <item>
      <title>7 CSS tips you need to know right now.</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Fri, 22 Oct 2021 04:12:20 +0000</pubDate>
      <link>https://dev.to/abhirajb/7-css-tips-you-need-to-know-right-now-2jji</link>
      <guid>https://dev.to/abhirajb/7-css-tips-you-need-to-know-right-now-2jji</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1-change-the-color-of-the-cursor-for-any-input-field"&gt;
  &lt;/a&gt;
  1. Change the color of the cursor for any input field
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z91g5Eu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F86kvJM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z91g5Eu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F86kvJM.png" alt="caret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-center-any-thing-with-just-3-lines-of-css"&gt;
  &lt;/a&gt;
  2. Center any thing with just 3 lines of CSS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KSZ8LIw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/y7YOD55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KSZ8LIw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/y7YOD55.png" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-add-smooth-scroll-in-just-one-line-of-css"&gt;
  &lt;/a&gt;
  3. Add smooth scroll in just one line of CSS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7d6iP_-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uMQijje.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7d6iP_-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uMQijje.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-add-any-image-to-the-heading-of-a-page-to-create-a-cool-effect"&gt;
  &lt;/a&gt;
  4. Add any image to the heading of a page to create a cool effect
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZmlWItW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8WsaZ1t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZmlWItW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8WsaZ1t.png" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-truncate-text-with-plain-css"&gt;
  &lt;/a&gt;
  5. Truncate text with plain CSS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qnve6UVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8RpPVbu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qnve6UVq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8RpPVbu.png" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-make-any-element-resizable"&gt;
  &lt;/a&gt;
  6. Make any element resizable
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FKTkyklH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jCxw95f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FKTkyklH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jCxw95f.png" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-add-any-image-as-the-cursor"&gt;
  &lt;/a&gt;
  7. Add any image as the cursor
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NTLycUha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rSSW4b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NTLycUha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rSSW4b2.png" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hope this has helped you learn something new.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/rainboestrykr"&gt;Twitter&lt;/a&gt;&lt;br&gt;
Thank you ✨&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;This post is an excerpt from the following tweet of &lt;a class="mentioned-user" href="https://dev.to/denicmarko"&gt;@denicmarko&lt;/a&gt;
 &lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUv9KUkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1308385514744098816/oDXuaci__normal.jpg" alt="Marko ⚡ Denic profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Marko ⚡ Denic
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/denicmarko"&gt;@denicmarko&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      CSS tips you won't see in most tutorials.&lt;br&gt;&lt;br&gt;🧵
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:17 AM - 20 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1450768106872311809" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1450768106872311809" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1450768106872311809" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>BookCritiq: A React Project</title>
      <author>Jessie Rohrer</author>
      <pubDate>Fri, 22 Oct 2021 04:00:40 +0000</pubDate>
      <link>https://dev.to/jrrohrer/bookcritiq-a-react-project-1glj</link>
      <guid>https://dev.to/jrrohrer/bookcritiq-a-react-project-1glj</guid>
      <description>&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@ugur?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ugur Akdemir&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/books?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have made it! This is my final project for the Flatiron School software engineering bootcamp! I was so excited to start this project, I flew through the last section of the course. Partially because I know from my experience building all of my previous projects that project mode is where I learn the most. And React is a handful - I did &lt;em&gt;so&lt;/em&gt; much googling and reading and researching.&lt;/p&gt;

&lt;p&gt;I landed on the idea of creating a book review app for this project after sifting through some other ideas that turned out to be a bit complicated for a first foray into building with React. The basic idea is to create a space where people can find in or add a book to the database, then add their review to it. My MVP requires just the book and review models, but I built out my Rails API back end with the full app in mind -- I used the Rails scaffold generator to spin up four models: User, Book, Review, and Comment (no test framework, please). This was so quick that it felt like cheating. I added some books and a couple of reviews to the seed file, sorted out model associations, and set up my serializers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A note on serializers here. I used &lt;code&gt;fast-jsonapi&lt;/code&gt; for this project because I was familiar with it. I &lt;em&gt;highly&lt;/em&gt; recommend that you use a different serializer like ActiveModel Serializer, because fast-jsonapi nests your serialized data inside a data object, which makes your data more complicated to work with on the front end. I spent a lot of time console-logging and sorting out how to access the pieces of data I wanted, and using a less deeply nested set of data would have made things a lot easier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After playing around with creating and relating objects and seeing what I could access at different endpoints, I moved on to the front end.&lt;/p&gt;

&lt;p&gt;I created a boilerplate react app using the &lt;code&gt;create-react-app&lt;/code&gt; command. I then spent a few minutes removing the bits I wasn't going to need. Then I tackled adding some dependencies. The project requirements state that I have to make use of Redux and Thunk, and I knew I wanted to tackle adding styling with bootstrap, as well as handling client-side routing with React Router, so I added those dependencies with npm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install redux
npm install react-redux
npm install redux-thunk
npm install bootstrap
npm install react-bootstrap
npm install react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step was to tackle setting up my App component, which I refactored from the boilerplate functional component to a class component. I then moved over to the Index component and set up the Redux store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;thunk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux-thunk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;thunk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux-thunk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composeEnhancers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__REDUX_DEVTOOLS_EXTENSION_COMPOSE__&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// store is where data is stored globally, reducers tell us what to do with our store based on certain actions.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;booksReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composeEnhancers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thunk&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;


&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StrictMode&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/React.StrictMode&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then create a reducer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;booksReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;books&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]},&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where the app will process actions and modify the Redux store. &lt;/p&gt;

&lt;p&gt;With the store and reducer set up, I moved on to creating some book components. I decided that the main component will be the BookContainer, which will render BooksList, BookCreateForm, and BookShow components. BooksList contains links to all of the books, BookShow renders a single book, and BookCreateForm contains a controlled form for creating a new book. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I ran into some trouble getting the correct book to render on the BookShow component. I ended up using the &lt;code&gt;useParams()&lt;/code&gt; hook that comes built into React to access the id in the URL the user clicked in order to render the component, then used that id to filter out the correct book from state. Using &lt;code&gt;let book = props.books[props.match.params.id - 1]&lt;/code&gt; selected the book based on its position in the array, and I wanted the id of the book rendered to match the id in the URL, not a position in the props array. The final code I used to achieve this looks like this:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// This pulls the id value directly from the URL.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// This line filters out the book we're looking for based on the ID in the URL&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// check if the book was found. If not, return null (allow time for the fetch to run).&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bookData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This is just to make it so I don't have to say 'book.attributes.property' every time I want to access the book data. Thanks, fast-jsonapi!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I followed a flow like this to complete the rest of the project: Create components -&amp;gt; import necessary files -&amp;gt; decide if the component should be a class or functional component -&amp;gt; build out the component -&amp;gt; connect to the store if necessary -&amp;gt; build a new action if necessary -&amp;gt; add a case to the reducer to handle the action if necessary -&amp;gt; connect to other components with React Router if needed -&amp;gt; test everything works. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phUcB1uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/h8y265b9iKtzKT0pDj/giphy.gif%3Fcid%3Decf05e4710zuscoduttqgil6bme708v4wbpxm0m6cs78hf15%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phUcB1uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/h8y265b9iKtzKT0pDj/giphy.gif%3Fcid%3Decf05e4710zuscoduttqgil6bme708v4wbpxm0m6cs78hf15%26rid%3Dgiphy.gif%26ct%3Dg" alt="Spongebob Go with the flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the Book components set up, I moved on to the Review components. I created a Review container that will be rendered by the BookShow component. The only place reviews will be visible currently is on a book's individual show page. Inside the ReviewContainer component, there are CreateReviewForm and Reviews components. CreateReviewForm contains a controlled form for adding a review to a Book, and the Reviews component is responsible for rendering all of the reviews. &lt;/p&gt;

&lt;p&gt;With the main functionality in place, I moved on to UI design. The first thing I did with bootstrap is add the CDN script to the head of the index.html file. Aside from removing some standard create-react-app code, this was the only time I touched this file. I chose to use the CDN because users may have already come across it and their browsers will already be aware of Bootstrap's styles, which means that the styles for my app will load faster in their browser.&lt;/p&gt;

&lt;p&gt;With that set up, I created a Navbar component and added links to the Routes that have been created throughout my app. I then styled it responsively using bootstrap class tags. I'll be honest: I pieced this together based on Bootstrap's documentation examples after a couple of hours of googling and figuring out how to set my own color scheme. &lt;/p&gt;

&lt;p&gt;I found &lt;a href="https://medium.com/swlh/responsive-navbar-using-react-bootstrap-5e0e0bd33bd6"&gt;this article&lt;/a&gt; to be very helpful for setting up a responsive navbar.&lt;/p&gt;

&lt;p&gt;The final component added is a Home component, which serves as a landing page for the app. My final steps were to move through all of my components and apply appropriate styles using bootstrap components and class tags. While I did spend a lot of time learning, implementing the Bootstrap library turned out to be much faster at making the app look appealing than trying to write out the CSS all on my own. &lt;/p&gt;

&lt;p&gt;Overall, I am pleased with the outcome of this project. I am still a little shaky on some of the concepts, but I have a much better grasp on React and Redux (and Bootstrap!) than I did when I started. I am excited to come back to this project after graduation to sort out adding users, authentication, and comments.&lt;/p&gt;

&lt;p&gt;If you'd like to check out the repos, you can find the front end &lt;a href="https://github.com/jrrohrer/book-critiq-fe"&gt;here&lt;/a&gt;, and the back end &lt;a href="https://github.com/jrrohrer/book-critiq-be"&gt;here&lt;/a&gt;. (And if you do check them out, shoot me a message! I'd love to talk about it, especially if you have suggestions.)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>October 22nd, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 22 Oct 2021 03:05:33 +0000</pubDate>
      <link>https://dev.to/nickytonline/october-22nd-2021-what-did-you-learn-this-week-bh3</link>
      <guid>https://dev.to/nickytonline/october-22nd-2021-what-did-you-learn-this-week-bh3</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/qKltgF7Aw515K/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/qKltgF7Aw515K/giphy.gif" alt="Information flowing through your brain"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>code every day with me</title>
      <author>duccanhole</author>
      <pubDate>Fri, 22 Oct 2021 02:50:25 +0000</pubDate>
      <link>https://dev.to/coderduck/code-every-day-with-me-2kmi</link>
      <guid>https://dev.to/coderduck/code-every-day-with-me-2kmi</guid>
      <description>&lt;p&gt;&lt;strong&gt;--DAY 4--&lt;/strong&gt;&lt;br&gt;
Hi, I am going to make #100DaysOfCode Challenge.Everyday I will try solve 1 problem from leetcode or hackerrank. Hope you can go with me until end.&lt;br&gt;
&lt;strong&gt;Now let's solve problem today:&lt;/strong&gt;&lt;br&gt;
-Problem: Longest Common Prefix&lt;br&gt;
-Detail: &lt;a href="https://leetcode.com/problems/longest-common-prefix/"&gt;https://leetcode.com/problems/longest-common-prefix/&lt;/a&gt;&lt;br&gt;
-My solution (javascript):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var longestCommonPrefix = function(str) {
    if(str.length==0) return '';
    let prefix='';
    for(let i=0;i&amp;lt;str[0].length;i++){
        let check=true;
        for(let j=1;j&amp;lt;str.length;j++){
            if(str[j].charAt(i)!=str[0].charAt(i)){
                return prefix;
            }
        }
        if(check) prefix+=str[0].charAt(i);
    }
    return prefix;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt;&lt;em&gt;If you have better solution or any question, please comment below. I will appreciate.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>100daysofcode</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>🥑 Put your React on a diet</title>
      <author>Andrew Luca</author>
      <pubDate>Fri, 22 Oct 2021 02:28:39 +0000</pubDate>
      <link>https://dev.to/iamandrewluca/put-your-react-on-a-diet-3c6d</link>
      <guid>https://dev.to/iamandrewluca/put-your-react-on-a-diet-3c6d</guid>
      <description>&lt;p&gt;For a long time I heard people complaining that &lt;a href="https://reactjs.org/"&gt;&lt;code&gt;React &amp;amp; ReactDOM&lt;/code&gt;&lt;/a&gt; has a huge size, and everyone recommended to use &lt;a href="https://preactjs.com/"&gt;&lt;code&gt;Preact&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;react&lt;/code&gt; &amp;amp; &lt;code&gt;react-dom&lt;/code&gt; bundle&lt;br&gt;
&lt;a href="https://bundlephobia.com/package/react"&gt;https://bundlephobia.com/package/react&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bundlephobia.com/package/react-dom"&gt;https://bundlephobia.com/package/react-dom&lt;/a&gt;&lt;br&gt;
&lt;code&gt;preact&lt;/code&gt; bundle&lt;br&gt;
&lt;a href="https://bundlephobia.com/package/preact"&gt;https://bundlephobia.com/package/preact&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Me personally never had the opportunity to try and migrate a &lt;code&gt;React&lt;/code&gt; app to &lt;code&gt;Preact&lt;/code&gt; till today.&lt;/p&gt;

&lt;p&gt;Chișinău, capital of Moldova has public transport tracking. And we Open Source enthusiasts made a simple app that shows on a map, live location of desired trolleybuses. &lt;a href="https://roataway.md/"&gt;Roata Wăy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are using &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; and some other &lt;code&gt;React&lt;/code&gt; third party libraries.&lt;/p&gt;

&lt;p&gt;In docs &lt;code&gt;Preact&lt;/code&gt; says you need to alias &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; to &lt;code&gt;preact/compat&lt;/code&gt; for everything to work. But here we have a problem, &lt;code&gt;create-react-app&lt;/code&gt; does not allow aliases by default, you need to eject or use &lt;code&gt;@craco/craco&lt;/code&gt; or &lt;code&gt;react-app-rewired&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because I didn't wanted to add any more configuration to the project and I started to analyse internals of &lt;code&gt;create-react-app&lt;/code&gt; maybe I can find any backdoors. Nothing found.&lt;/p&gt;

&lt;p&gt;Then I remembered two ways you can install packages using &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Install package (e.g. &lt;code&gt;my-package&lt;/code&gt;) from local directory&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; ../package-directory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add in &lt;code&gt;package.json&lt;/code&gt; such a line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"my-package"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"file:../package-directory"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Install package under a different name&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;custom-name@npm:react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add in &lt;code&gt;package.json&lt;/code&gt; such a line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"custom-name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm:react@^17.0.2"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I realised that &lt;code&gt;npm:&lt;/code&gt; is just the protocol, and we can use other protocols, like &lt;code&gt;file:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And what I did next, was amazing to me 😀 &lt;/p&gt;

&lt;p&gt;Install Preact dependency&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;preact
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install &lt;code&gt;preact/compat&lt;/code&gt; folder under &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; name using combining both methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react@file:node_modules/preact/compat
npm &lt;span class="nb"&gt;install &lt;/span&gt;react-dom@file:node_modules/preact/compat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/Uxma5LRUa5VAI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Uxma5LRUa5VAI/giphy.gif" alt="magic shia"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And create this script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm set-script postinstall &lt;span class="s2"&gt;"rm -f node_modules/react/src/index.d.ts"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will remove &lt;code&gt;preact/compat&lt;/code&gt; types so TypeScript can consume &lt;code&gt;@types/react&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run start&lt;/code&gt; and Boom 💥 our app is working 🚀 and we got rid of almost 34KB from bundle.&lt;/p&gt;

&lt;p&gt;There is no need to configure your build system at all. It just works!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/roataway/roataway-web/pull/153"&gt;Pull Request with changes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://app.netlify.com/sites/roataway/deploys/61721171aa8d4d00086a89d2"&gt;Netlify Build Details &lt;/a&gt;&lt;br&gt;
&lt;a href="https://deploy-preview-153--roataway.netlify.app/"&gt;Application Preview&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all for today! Bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/m9eG1qVjvN56H0MXt8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/m9eG1qVjvN56H0MXt8/giphy.gif" alt="girl sliding"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@brookelark?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Brooke Lark&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/diet?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>preact</category>
      <category>npm</category>
      <category>roataway</category>
    </item>
    <item>
      <title>5 Minutes Introduction to Pointers in C++</title>
      <author>chesterchong</author>
      <pubDate>Fri, 22 Oct 2021 01:30:49 +0000</pubDate>
      <link>https://dev.to/chesterchong/5-minutes-introduction-to-pointers-in-c-1mld</link>
      <guid>https://dev.to/chesterchong/5-minutes-introduction-to-pointers-in-c-1mld</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: This article assumes that you have basic knowledge of programming.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Note 2: Pointer is a very crucial part of data structures and algorithms.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-pointer"&gt;
  &lt;/a&gt;
  Introduction to Pointer
&lt;/h2&gt;

&lt;p&gt;Every variable is allocated a section of memory big enough to hold a value of the variable's data type. Since every byte of memory has a unique address, a variable's address is then determined by the first byte allocated to that variable. This is where the pointer is introduced to store the memory address of other object or variable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A pointer is a specialised variable to store the memory address of other variable or object of the same data type, except void pointer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#address-of-operator-amp"&gt;
  &lt;/a&gt;
  Address of Operator (&amp;amp;)
&lt;/h3&gt;

&lt;p&gt;We can place address operator (&amp;amp;), or ampersand in front of a variable name, or identifier to return the address of the variable.&lt;br&gt;
&lt;code&gt;int variable = 88;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;amp;variable&lt;/code&gt;&lt;br&gt;
Then, assign it to a pointer after pointer declaration.&lt;br&gt;
&lt;code&gt;int *ptr;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;ptr = &amp;amp;variable;&lt;/code&gt;&lt;br&gt;
Afterwards, you can print the memory address of variable to the console.&lt;br&gt;
&lt;code&gt;std::cout &amp;lt;&amp;lt; ptr &amp;lt;&amp;lt; std::endl;&lt;/code&gt;&lt;br&gt;
Finally, the memory address is displayed in the form of hexadecimal numbers.&lt;br&gt;
&lt;code&gt;0x1eed300&lt;/code&gt;&lt;br&gt;
You can also print out the address of that pointer.&lt;br&gt;
&lt;code&gt;std::cout &amp;lt;&amp;lt; &amp;amp;ptr &amp;lt;&amp;lt; std::endl;&lt;/code&gt;&lt;br&gt;
The output will be something similar to this.&lt;br&gt;
&lt;code&gt;0x7ffc426d3ec8&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Address operator is meant to help you to store and retrieve memory address of a variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dereference-operator-"&gt;
  &lt;/a&gt;
  Dereference Operator (*)
&lt;/h3&gt;

&lt;p&gt;Aside from handling memory address, we can retrieve and modify the data using the pointer that we have declared just now. Simply place an asterisk in front of a pointer to return the value contained in that memory location.&lt;br&gt;
&lt;code&gt;std::cout &amp;lt;&amp;lt; *ptr &amp;lt;&amp;lt; std::endl;&lt;/code&gt;&lt;br&gt;
The output will be the value of which variable was assigned.&lt;br&gt;
&lt;code&gt;88&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dereference operator is used to access and modify data contained in a memory location pointed to by a pointer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#pointer-to-pointer"&gt;
  &lt;/a&gt;
  Pointer to Pointer
&lt;/h3&gt;

&lt;p&gt;What's more fun is you can create multi level pointers. The idea is that we create new pointers to store memory address of existing pointers. For instance, you create level 2 pointer.&lt;br&gt;
&lt;code&gt;int **ptr2;&lt;/code&gt;&lt;br&gt;
Moving next, you assign it with the memory address of level 1 pointer.&lt;br&gt;
&lt;code&gt;ptr2 = &amp;amp;ptr1;&lt;/code&gt;&lt;br&gt;
Lastly, you can choose to print the memory address or the value contained of that variable.&lt;br&gt;
&lt;code&gt;std::cout &amp;lt;&amp;lt; *ptr2 &amp;lt;&amp;lt; std::endl;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;std::cout &amp;lt;&amp;lt; **ptr2 &amp;lt;&amp;lt; std::endl;&lt;/code&gt;&lt;br&gt;
The output:&lt;br&gt;
&lt;code&gt;0x1eed300&lt;/code&gt;&lt;br&gt;
&lt;code&gt;88&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pointer-size"&gt;
  &lt;/a&gt;
  Pointer Size
&lt;/h3&gt;

&lt;p&gt;The size of a pointer in C++ depends on the word size of processor on most occasions. For instance, pointer size is 4 bytes for a 32 bit computer and 8 bytes for a 64 bit computer, regardless of data types.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#void-pointer"&gt;
  &lt;/a&gt;
  Void Pointer
&lt;/h3&gt;

&lt;p&gt;Void pointer is a pointer with no associated data type. It can hold address of any data type and can be typecasted to any data type. For the moment, we ain't going to talk about the implementation of void pointer.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
