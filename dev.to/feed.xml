<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Grokking Lenses</title>
      <author>Matt Thornton</author>
      <pubDate>Fri, 28 May 2021 12:09:52 +0000</pubDate>
      <link>https://dev.to/choc13/grokking-lenses-2jgp</link>
      <guid>https://dev.to/choc13/grokking-lenses-2jgp</guid>
      <description>&lt;p&gt;In most functional programming languages data structures are immutable by default, which is great because immutability eliminates a whole raft of issues from our code, freeing our brains up to worry about the higher level problems we're trying to solve. One of the drawbacks of immutability is how cumbersome it can be to modify nested data structures. In this post we're going to independently discover a better way of "updating" immutable data and in doing so re-invent lenses.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h1&gt;

&lt;p&gt;In this post we'll imagine that we're working with the following data model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;HouseNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Postcode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So a &lt;code&gt;User&lt;/code&gt; has a &lt;code&gt;CreditCard&lt;/code&gt; which has an &lt;code&gt;Address&lt;/code&gt;. Now imagine that we've been asked to write some code that lets a user update their postcode for the address of their credit card. Pretty easy right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
          &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                    &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                              &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yikes! That's not pretty. Compare that to the imperative version in something like C#.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="nf"&gt;SetCreditCardPostcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Postcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, the data model might be mutable and there might be a bit more faff in the method declaration, but it's hard to argue with the fact that the actual set operation is much clearer in the imperative style.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#composing-a-solution"&gt;
  &lt;/a&gt;
  Composing a solution 🎼
&lt;/h1&gt;

&lt;p&gt;Instinctively, what we'd like to do is write functions that take care of setting their respective bits of the model and then compose them when we want to set data that is nested inside a larger structure. For example let's write some setters for &lt;code&gt;Address&lt;/code&gt;, &lt;code&gt;CreditCard&lt;/code&gt; and &lt;code&gt;User&lt;/code&gt; in their respective modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setPostcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setAddress&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I've omitted writing setters for every single property for brevity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These functions are nice because they're very focused on a singular piece of the data model. Ideally, to write &lt;code&gt;setCreditCardPostcode&lt;/code&gt; we'd be able to compose these individual functions to create a new function that can update the postcode inside a user's credit card. Something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPostcode&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAddress&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCreditCard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Aside: &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; is the function composition operator, so that &lt;code&gt;f &amp;gt;&amp;gt; g&lt;/code&gt; is equivalent to &lt;code&gt;fun x -&amp;gt; x |&amp;gt; f |&amp;gt; g&lt;/code&gt;. More concretely if we had &lt;code&gt;let addOne x = x + 1&lt;/code&gt; then we could write &lt;code&gt;let addTwo = addOne &amp;gt;&amp;gt; addOne&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But... it's not going to compile! The problem is that &lt;code&gt;Address.setPostcode&lt;/code&gt; has the signature &lt;code&gt;Postcode -&amp;gt; Address -&amp;gt; Address&lt;/code&gt; and &lt;code&gt;CreditCard.setAddress&lt;/code&gt; has the signature &lt;code&gt;Address -&amp;gt; CreditCard -&amp;gt; CreditCard&lt;/code&gt;. So when we write &lt;code&gt;Address.setPostcode &amp;gt;&amp;gt; CreditCard.setAddress&lt;/code&gt; then the output of &lt;code&gt;Address.setPostcode&lt;/code&gt; (which is &lt;code&gt;Address -&amp;gt; Address&lt;/code&gt;) does not match the input to &lt;code&gt;CreditCard.setAddress&lt;/code&gt; (which is just &lt;code&gt;Address&lt;/code&gt;).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#aligning-the-types"&gt;
  &lt;/a&gt;
  Aligning the types
&lt;/h1&gt;

&lt;p&gt;Our first attempt, whilst not quite right, is pretty close. The types nearly line up. Let's see if we can align the types so that the output of one setter can feed straight in to the input of the next one.&lt;/p&gt;

&lt;p&gt;If we look again at the output from &lt;code&gt;Address.setPostcode postcode&lt;/code&gt; then we see it's a function whose signature is &lt;code&gt;Address -&amp;gt; Address&lt;/code&gt;. That is, when we partially apply a &lt;code&gt;postcode&lt;/code&gt; to &lt;code&gt;setPostcode&lt;/code&gt;, it creates a function that can transform an address by setting the &lt;code&gt;Postcode&lt;/code&gt; property to the value we partially applied. So how about if we change the input of &lt;code&gt;CreditCard.setAddress&lt;/code&gt; to take an address transformation function, rather than just a new address value. In fact, there's nothing special about &lt;code&gt;CreditCard.setAddress&lt;/code&gt; so let's make this change for all of our setters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setAddress&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might feel like this is a hack in order to make composition work, but what we've actually done is made a much more powerful "setter" function. Each "setter" is now capable of taking any transformation function which it applies to the current value and then returns a new version of the data with this modification. If we think about it, setting a property is just a special case of this more general transformation where we ignore the existing value.&lt;/p&gt;

&lt;p&gt;What we've actually created here are more like property modifiers than just setters. Each modifier has the signature &lt;code&gt;('child -&amp;gt; 'child) -&amp;gt; ('parent -&amp;gt; 'parent)&lt;/code&gt;, which means given a function that can modify some child property, then I'll return you a function that updates the parent type. So let's rename them to &lt;code&gt;modifyX&lt;/code&gt; instead and see if we can now create &lt;code&gt;setCreditCardPostcode&lt;/code&gt; in the composition style that we wanted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hmmm, it's still not quite right. The type of &lt;code&gt;setCreditCardPostcode&lt;/code&gt; is actually &lt;code&gt;(Postcode -&amp;gt; Postcode) -&amp;gt; (User -&amp;gt; User)&lt;/code&gt;, which in hindsight is obvious because all we've done is compose modifiers, not setters. So we've actually just created a new "modifier" here that lets us modify the postcode property of the user's credit card. In order to do a "set" operation we just apply the transformation that does the "set" to the "modifier".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we compose our modifiers and then partially apply it with a transformer that just ignores the input and sets the value to the supplied &lt;code&gt;postcode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you've followed up to this point then you've grokked the core principles, which is that if we have modifier functions that know how to update their one piece of the model, then we can chain them together to build modifiers that operate across many nested layers of a larger data structure. Everything that follows from now will be just tidying this up and extracting the generic parts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#generic-property-modifiers"&gt;
  &lt;/a&gt;
  Generic property modifiers
&lt;/h1&gt;

&lt;p&gt;It should be clear from the last implementation of &lt;code&gt;setCreditCardPostcode&lt;/code&gt; that in order to set a nested property we do two things. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compose the necessary property modifiers to create one that can operates across many layers of a nested data structure.&lt;/li&gt;
&lt;li&gt;Apply a transformation function that ignores the current value and just returns the new value that we want to set the property to.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Given that all of our property modifiers are of the form &lt;code&gt;('child -&amp;gt; 'child) -&amp;gt; ('parent -&amp;gt; 'parent)&lt;/code&gt;, we should be able to write a &lt;code&gt;set&lt;/code&gt; function that works for any modifier. It's really simple and just looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can even define the &lt;code&gt;modifyCreditCardPostcode&lt;/code&gt; in the &lt;code&gt;User&lt;/code&gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyCreditCardPostcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then use it whenever we want to set a new value, as in &lt;code&gt;user |&amp;gt; set User.modifyCreditCard "A POSTCODE"&lt;/code&gt; and we could also use it to transform a &lt;code&gt;Postcode&lt;/code&gt;, as in &lt;code&gt;user |&amp;gt; User.modifyCreditCardPostcode (fun (Postcode postcode) -&amp;gt; postcode |&amp;gt; String.toUpper |&amp;gt; PostCode)&lt;/code&gt;. That's a nice separation of concerns.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#combing-getters-and-setters"&gt;
  &lt;/a&gt;
  Combing getters and setters
&lt;/h1&gt;

&lt;p&gt;We might be tempted to stop here, and for the purposes of our initial problem regarding awkward data updates we've achieved our goal, but it would be nice if we could make this concept of property modifiers even more universal. In particular if we could combine the closely related acts of getting and setting a property in a single function.&lt;/p&gt;

&lt;p&gt;If we look at &lt;code&gt;Address.modifyPostcode&lt;/code&gt; again we'll see that it contains a "get" operation for the &lt;code&gt;Postcode&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
              &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                       &lt;span class="c1"&gt;// ^ getting here ^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's possible to rearrange this slightly and put the "get" first and pipe it in to a function that does the "setting".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyPostcode&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's now clear to see that our modifiers perform the following operations.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the child data.&lt;/li&gt;
&lt;li&gt;Transform the child data.&lt;/li&gt;
&lt;li&gt;Update the parent with the transformed child value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So if we could somehow find a way to skip the final step, then we'd have ourselves a getter. The only thing we can do to affect the behaviour of &lt;code&gt;modifyPostcode&lt;/code&gt; though is to provide a different &lt;code&gt;transformer&lt;/code&gt;. Unfortunately, try as we might there's no function we can supply here that will stop the final "setter" step from also running.&lt;/p&gt;

&lt;p&gt;One trick we can do though is to make the &lt;code&gt;transformer&lt;/code&gt; return a functor, see &lt;a href="https://dev.to/choc13/grokking-functors-bla"&gt;Grokking Functors&lt;/a&gt; if you need a recap. If we do this then in order to then call the final "setter" step we need to &lt;code&gt;map&lt;/code&gt; it so that we can apply this "setter" to the contents of the functor we returned from the &lt;code&gt;transformer&lt;/code&gt;. So, for example, &lt;code&gt;modifyCodeProperty&lt;/code&gt; would look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;Postcode&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
    &lt;span class="c1"&gt;// Everything's the same until the final line where we call map&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might still be wondering how that lets us avoid calling the final "setter" step? Well, we can now exploit the &lt;code&gt;map&lt;/code&gt; function to change the behaviour of &lt;code&gt;modifyPostcode&lt;/code&gt;. If we remember how functors work then &lt;code&gt;map&lt;/code&gt; is defined on a per functor basis, so by returning different functors from the &lt;code&gt;transformer&lt;/code&gt; we can get different mapping behaviours at the end.&lt;/p&gt;

&lt;p&gt;What we need then is a functor whose &lt;code&gt;map&lt;/code&gt; instance just ignores the function being applied to it. One that just returns its input without transforming it. Fortunately for us such a functor already exists called &lt;code&gt;Const&lt;/code&gt; and it's defined like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Ignored&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Value&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;_)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Map&lt;/code&gt; for &lt;code&gt;Const&lt;/code&gt; just returns the input &lt;code&gt;x&lt;/code&gt;. With that we're in a position to write a generic &lt;code&gt;get&lt;/code&gt; function that will extract the child value from any of our modifiers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What about our &lt;code&gt;set&lt;/code&gt; function? Which functor should we return from the &lt;code&gt;transformer&lt;/code&gt; in there? Well we need one that just runs the function without modification and that happens to also be a well known functor that goes by the name of &lt;code&gt;Identity&lt;/code&gt;. &lt;code&gt;Identity&lt;/code&gt; is defined like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's &lt;code&gt;map&lt;/code&gt; instance just calls the function &lt;code&gt;f&lt;/code&gt; on the input &lt;code&gt;x&lt;/code&gt; and wraps the result back up in another &lt;code&gt;Identity&lt;/code&gt; constructor. People often wonder why we'd need such a boring functor, but it comes in handy in these situations. With that  &lt;code&gt;set&lt;/code&gt; only requires a slight modification from before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;modifiedParent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;

    &lt;span class="n"&gt;modifiedParent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together 🧩
&lt;/h1&gt;

&lt;p&gt;We've made quite a few changes to things now, so let's see it all together. We'll start with the signature that a modifier must have, then show the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions that work for any such modifier and finally show how we can use them to solve our original problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Modifier signature - notice how the output is completely generic now which supports both our get and set use cases&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;child&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="nc"&gt;Const&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
    &lt;span class="n"&gt;child&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;modifiedParent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;

    &lt;span class="n"&gt;modifiedParent&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyPostcode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;Postcode&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyAddress&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;Address&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;modifyCreditCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Functor&amp;lt;CreditCard&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transformer&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;postcode&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyCreditCard&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyAddress&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modifyPostcode&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our code is now very close to an imperative style setter. In fact, by reversing the composition operator, from &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; and switching the order of the modifiers, we've even been able to order the property access in the same way that an imperative programmer would be familiar with, from the outermost to the innermost property. &lt;em&gt;Using &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; is often frowned upon in general because it can be confusing, so use it at your own judgement.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-lenses"&gt;
  &lt;/a&gt;
  You just discovered Lenses 🔍
&lt;/h1&gt;

&lt;p&gt;These things we've been calling "modifiers", well they're better known as lenses. Lenses are a better name for them because they're not actually doing any modification, they're just composable functions that focus on a specific part of a data structure. We can define functions like &lt;code&gt;get&lt;/code&gt;, typically called &lt;code&gt;view&lt;/code&gt;, and &lt;code&gt;set&lt;/code&gt;, usually called &lt;code&gt;setl&lt;/code&gt; (for set lens), that let us read or write the value that any lens points to because the structure of a lens is completely generic.&lt;/p&gt;

&lt;p&gt;There are also many more things that we can do with lenses, which is part of a broader topic called optics, which we haven't covered here. For instance we can easily work with data that might be missing, or focus our lens on specific parts of every element in a list.&lt;/p&gt;

&lt;p&gt;Lenses are also about more than just composable getters and setters. They also provide an abstraction barrier for our code. If we access data through a lens rather than directly it means that if we later refactor a data structure we only have to modify the lens and the rest of the code will remain unaffected.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lenses-in-the-wild"&gt;
  &lt;/a&gt;
  Lenses in the wild 🐗
&lt;/h1&gt;

&lt;p&gt;There are a few lens "conventions" that are probably worth pointing out at this stage, as it's how you'll likely see them written in the wild. This is all just syntactic sugar on top of what we've already discovered, such as things like special operators which just make them a bit more pleasant to write. Below is the same example from above, but written using the FSharpPlus lens library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: FSharpPlus"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;FSharpPlus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Lens&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- bring the lens operators in to scope&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// Lenses are usually named with a leading underscore&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Postcode&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// We also usually just name after the property they point to&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// The &amp;lt;&amp;amp;&amp;gt; is just an infix version of map&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;creditCard&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// We can use the .-&amp;gt; as an infix version of setl&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;creditCard&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="o"&gt;.-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;postcode&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getCreditCardPostcode&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// We can use the ^. operator as an infix version of view&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="o"&gt;^.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;creditCard&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nn"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few things to point out here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Typically lenses are named like &lt;code&gt;_propertyName&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;What we used to call &lt;code&gt;transformer&lt;/code&gt; we often just denote as &lt;code&gt;f&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Instead of writing &lt;code&gt;map&lt;/code&gt; it's common to write the lens using the &lt;code&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/code&gt; operator. This is just a flipped infix version of &lt;code&gt;map&lt;/code&gt; and it lets us create the lens from a getter (to the left of the operator) and a setter (to the right of the operator).&lt;/li&gt;
&lt;li&gt;We can use the &lt;code&gt;.-&amp;gt;&lt;/code&gt; operator as an infix version of &lt;code&gt;setl&lt;/code&gt;, which gives us an even more imperative style looking setter.&lt;/li&gt;
&lt;li&gt;We can also use &lt;code&gt;.^&lt;/code&gt; instead of &lt;code&gt;view&lt;/code&gt; to get the value, which is a kind of analogous to the &lt;code&gt;.&lt;/code&gt; operator in OOP.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#what-did-we-learn"&gt;
  &lt;/a&gt;
  What did we learn? 🧑‍🎓
&lt;/h1&gt;

&lt;p&gt;Lenses allow us to write property accessors which we can compose to focus on different parts of a large data model. We can then pass them to functions like &lt;code&gt;view&lt;/code&gt; or &lt;code&gt;setl&lt;/code&gt; to actually view the data or set it.&lt;/p&gt;

&lt;p&gt;Lenses are also a great abstraction barrier that we can use to decouple our code from the specifics of our data models current structure. They also allow us do other useful transformations which we haven't gone into here. Lenses, and the broader topic of optics, is a large one, but with this intro you should find it much easier to explore what else they have to offer.&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>programming</category>
      <category>grokking</category>
    </item>
    <item>
      <title>How to check if key exists in a python dictionary?</title>
      <author>hrishikesh1990</author>
      <pubDate>Fri, 28 May 2021 11:33:48 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-check-if-key-exists-in-a-python-dictionary-3756</link>
      <guid>https://dev.to/hrishikesh1990/how-to-check-if-key-exists-in-a-python-dictionary-3756</guid>
      <description>&lt;p&gt;In this python tutorial, we look at dictionaries and how to check if a key exists in a dictionary we also explain the code to facilitate further learning.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts. However, in case you are here only for the solution use this &lt;a href="#code-to-check-if-a-key-exists-in-python-dictionary"&gt;link&lt;/a&gt;.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-do-we-check-if-a-key-exists-in-python-dictionary"&gt;Why do we check if a key exists in python dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#checking-if-a-key-exists-using-in-operators"&gt;Checking if a key exists using in operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-get-method"&gt;Using the get() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are here to learn how to check if a key exists in a dictionary it is most likely because of two reasons, either you are new to python or you tried using the &lt;code&gt;has_key&lt;/code&gt; methods and were served with an error. In case it is the latter, this is because python3 has removed the &lt;code&gt;has_key&lt;/code&gt; methods. However, there are other equally efficient methods and we look at them below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-check-if-a-key-exists-in-python-dictionary"&gt;
  &lt;/a&gt;
  Why do we check if a key exists in python dictionary?
&lt;/h2&gt;

&lt;p&gt;Dictionaries are common and extensively used data types in python. They hold key-value pairs and these values are accessed by the respective keys in order to perform many tasks on them. And this is why it is a good practice to check if the key exists below you try to access its relevant value. Doing so would also reduce the likelihood of facing errors. &lt;/p&gt;

&lt;p&gt;Now let's look at the different ways you can use to check if a key exists in python dictionary&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-if-a-key-exists-using-raw-in-endraw-operators"&gt;
  &lt;/a&gt;
  Checking if a key exists using &lt;code&gt;in&lt;/code&gt; operators:
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; operator in python is a membership operator, it takes two parameters and checks if one is a member of the other and returns a boolean &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. In our case, we the &lt;code&gt;in&lt;/code&gt; operator to check if the key is a member of the dictionary. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-to-check-if-a-key-exists-in-python-dictionary"&gt;
  &lt;/a&gt;
  Code to check if a key exists in python dictionary
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dict_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dict_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exists"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Does not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Output = "Exists"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's check for a negative case&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dict_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"d"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dict_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exists"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Does not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Output = "Does not exist"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, the &lt;code&gt;not in&lt;/code&gt; operator can also be used. However, remember the &lt;code&gt;in&lt;/code&gt; operator is case sensitive hence you could either ensure all your keys are in the same case or you could use the &lt;code&gt;upper()&lt;/code&gt; or &lt;code&gt;lower()&lt;/code&gt; methods respectively. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-get-method"&gt;
  &lt;/a&gt;
  Using the get() method
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;get()&lt;/code&gt; method is a dict method that is used to return the value of the key passed as an argument and if the key is not present it returns either a default value (if passed) else it returns &lt;code&gt;None&lt;/code&gt;. Using this method we can pass a key and check if a key exists in python dictionary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-get"&gt;
  &lt;/a&gt;
  Syntax of get()
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;dictionary&lt;/code&gt; is the name of the dict you indent to work with&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Keyname&lt;/code&gt; - The keyname of the value to intent to return&lt;/p&gt;

&lt;p&gt;&lt;code&gt;value&lt;/code&gt; - Optional, this value is returned in case the key does not exist&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-to-check-if-the-key-exists-in-a-dictionary-using-get"&gt;
  &lt;/a&gt;
  Code to check if the key exists in a dictionary using get()
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dict_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dict_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exists"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Does not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Output = "Exists"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for a negative case,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dict_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dict_1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exists"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Does not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Output = "Does not exist"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While using this method keep in mind that this would not be accurate in case you have a key with the value &lt;code&gt;None&lt;/code&gt; in case you don't then this method would work fine. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;Although both these methods have their respective caveats to vary about they are far similarly and efficient in comparison to the other methods. And regarding other methods, I've come across methods that iterate over the dictionary and then check compare it to the key. However, all those methods so work they aren't efficient and should only be used to facilitate understanding of the concepts. But in case you are a learner, please feel free to try out such methods as well. &lt;/p&gt;

&lt;p&gt;Do leave your thoughts in the comment section below. Happy learning. :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learn CSS By Playing Games 👾</title>
      <author>Suprabha</author>
      <pubDate>Fri, 28 May 2021 11:14:27 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/learn-css-by-playing-games-1a36</link>
      <guid>https://dev.to/suprabhasupi/learn-css-by-playing-games-1a36</guid>
      <description>&lt;p&gt;&lt;span&gt;L&lt;/span&gt;earning CSS can be a frustrating experience sometime. One of the best things about learning to code is that people who are good at coding also happen to have the skills to make games that teach other people to code.&lt;/p&gt;

&lt;p&gt;Here are some games which help you to master CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-flexbox-froggy"&gt;
  &lt;/a&gt;
  1. &lt;a href="http://flexboxfroggy.com/"&gt;Flexbox Froggy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrUpdADC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GWrtvGq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrUpdADC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GWrtvGq.jpg" alt="Flex box froggy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This game is about Flexbox and it covers flex properties like &lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;justify-content&lt;/code&gt;, &lt;code&gt;align-content&lt;/code&gt;, &lt;code&gt;flex-direction&lt;/code&gt;, &lt;code&gt;align-self&lt;/code&gt;, &lt;code&gt;flex-wrap&lt;/code&gt;, &lt;code&gt;flex-flow&lt;/code&gt; and order in 24 different levels. &lt;/p&gt;

&lt;p&gt;Yeah, last level is bit challenging  😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-flexbox-zombies"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://mastery.games/flexboxzombies/"&gt;Flexbox Zombies&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N83-Zqhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/O8cIaZn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N83-Zqhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/O8cIaZn.jpg" alt="FlexBox Zombies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we use Flexbox to position the hero’s crossbow and hit the zombies and survive along the game.&lt;br&gt;
Each section unravels part of the plot, gives you expertise over a new flexbox concept, and presents zombie survival challenges that force you to solidify your new skills like your life depends on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-flexbox-defense"&gt;
  &lt;/a&gt;
  3. &lt;a href="http://www.flexboxdefense.com/"&gt;Flexbox defense&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jbJDlWI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qi8yDrT.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jbJDlWI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qi8yDrT.jpg" alt="flexbox-defence"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flexbox defense is based on the classic tower defence games, but to place our items we write CSS instructions. We use the justify-content property on the main container to move the single towers into effective positions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-grid-garden"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://cssgridgarden.com/"&gt;Grid Garden&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JfoFh8qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zeffn3Q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JfoFh8qp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zeffn3Q.jpg" alt="Grid garden"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grid Garden game features 28 levels, starting with easy difficulty and gradually increasing it. Use the various grid properties to water and grow your carrot garden. Grid Garden has a code editor and visual area so you instantly see your result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-css-battle"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://cssbattle.dev/"&gt;CSS Battle&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8I3alk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Y4p1koK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8I3alk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Y4p1koK.png" alt="CSS battle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS Battle is more of an online challenge than an actual CSS practice game, the objective is to write HTML and CSS code to replicate the given target image in the least code possible. This game is constantly updated with new challenges. It has a global ranking system and the ability to re-play each challenge so you can improve your own results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-css-diner"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://flukeout.github.io/"&gt;CSS Diner&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ultyttKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Q4gpwIi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ultyttKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Q4gpwIi.jpg" alt="CSS Diner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The CSS Diner webapp is really fun and genuinely educational for developers of all skill levels. You’ll go through 26 different levels of increasing difficulty. The first few levels teach core fundamentals like element selectors and class selectors. In the later levels you’re working with advanced concepts like :only-of-type and :not(x).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-codepip"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://codepip.com/"&gt;CodePip&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiCq0lbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UNmPh6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiCq0lbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UNmPh6x.png" alt="Code pip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We already checked Grid Garden and Flexbox Froggy, you’ve seen some examples of CodePip’s work already.&lt;br&gt;
Those are just the two free games they offer. If you sign up for a pro account on their site, they also have games that range from general CSS review to JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-codemonkey"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.playcodemonkey.com/"&gt;CodeMonkey&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ubv0rFDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RiDdi9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ubv0rFDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RiDdi9j.png" alt="Code monkey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeMonkey teaches coding using CoffeeScript, a real programming language, to teach you to build your own games in HTML5. It’s aimed at coding for kids, but it’s definitely fun for adults, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-codingame"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.codingame.com/start"&gt;CodinGame&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--meh90AO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/VPE7X9E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--meh90AO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/VPE7X9E.png" alt="Coding Game"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodinGame offers up fun free games to help learn more than 25 programming languages, including JavaScript, Ruby, and PHP. One of the great things about CodinGame is that you can play with friends or colleagues, and also enter international coding competitions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-codecombat"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://codecombat.com/"&gt;CodeCombat&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--26U0RnCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WdknSPK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--26U0RnCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WdknSPK.png" alt="Code combat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn Python, JavaScript, CoffeeScript, or the Lua game scripting language. On the beginner Dungeon level, you’ll move your Hero through the game using some basic commands according to the tutorial alongside the game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#games-using-pure-css"&gt;
  &lt;/a&gt;
  Games using pure CSS 🔖
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-roadmap"&gt;
  &lt;/a&gt;
  1. &lt;a href="http://victordarras.fr/cssgame"&gt;Roadmap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qIaTplij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/m5JJsR7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qIaTplij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/m5JJsR7.png" alt="Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Skill and speed are required to solve this little game, only made with CSS and HTML. It is not directly teaching CSS, but looking into the source code teaches a lot about clip-path, transform and animation with @keyframes!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-carnival"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://codepen.io/una/pen/NxZaNr"&gt;Carnival&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6t39_ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YC1TEbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6t39_ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YC1TEbp.png" alt="Carnival"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You only have 8 seconds to hit all targets! A nice little CSS game using checkboxes and CSS animations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-service-workies"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://serviceworkies.com"&gt;Service Workies&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4lXp_Cmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9nBP8Oe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4lXp_Cmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9nBP8Oe.png" alt="Service workies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this adventure you'll learn how to avoid the PWA pitfalls. You'll level up your skills and thrive with Service Workers. Perhaps even slay the savage beasts that have plagued the poor village workies for centuries! A registration is required.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-unfold"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://rupl.github.io/unfold/"&gt;Unfold&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDuJr5D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UazaTSl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDuJr5D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UazaTSl.png" alt="Unfold"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This isn't exactly a game but more an interactive presentation about CSS 3D Transforms. Give it a go, it not boring 😂, animations are really awesome which has been done by pure CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paid-games"&gt;
  &lt;/a&gt;
  Paid Games 🤑
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#grid-critters"&gt;
  &lt;/a&gt;
  &lt;a href="https://gridcritters.com"&gt;Grid Critters&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0NeUfK9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/xH0phte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0NeUfK9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/xH0phte.png" alt="Grid cutters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your journey to master CSS Grid begins on the mysterious planet Grideros. Your mission is to use your ship's powerful Grid tool to save alien critters from extinction. A registration is required.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Ways to Build a Mobile App - Low Level Coding</title>
      <author>Krowser Web Services </author>
      <pubDate>Fri, 28 May 2021 11:11:59 +0000</pubDate>
      <link>https://dev.to/krowser/ways-to-build-a-mobile-app-low-level-coding-468d</link>
      <guid>https://dev.to/krowser/ways-to-build-a-mobile-app-low-level-coding-468d</guid>
      <description>&lt;p&gt;As the name implies, building an app using this method requires coding knowledge. If you don't know how to code. you'll either have to learn it or hire a developer. While I don't want to discourage you from learning a new skill, the first app you code on your own probably won't be suitable for mass distribution. But if the app isn't for your business and you want to improve your technical ability, then go for it.&lt;/p&gt;

&lt;p&gt;Otherwise, hiring a development team will be your best option here. Low-level coding will always be the most expensive and time-consuming development method. Why? Allow me to quickly explain.&lt;/p&gt;

&lt;p&gt;Most people want their apps available on Android and iOS devices. But this requires you to code in two different languages-essentially building two completely separate apps (one for each operating system).&lt;/p&gt;

&lt;p&gt;So at a minimum, you'll need an Android developer and iOS developer. Most development teams also consist of a web developer, designer, QA manager, and project manager. Once your app is built, you'll still need to retain the developers to maintain your app. The labor adds up quickly.&lt;/p&gt;

&lt;p&gt;If you're creating a game, augmented reality app, or trying to develop the next Facebook, low-level coding will be your best option. This method gives you the most control over your app, but it comes at a price.&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Telemedicine software development</title>
      <author>Alex</author>
      <pubDate>Fri, 28 May 2021 10:59:28 +0000</pubDate>
      <link>https://dev.to/alexanderkdev/telemedicine-software-development-40lk</link>
      <guid>https://dev.to/alexanderkdev/telemedicine-software-development-40lk</guid>
      <description>&lt;p&gt;Hello to everybody!&lt;br&gt;
Today I want to talk about telemedicine. It is a modern answer to a number of obstacles that a person faces when he decides to visit a doctor. The creation of a specialized application will facilitate the interaction between the doctor and the patient in such matters as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search and selection of the required specialist by the patient;&lt;/li&gt;
&lt;li&gt;Search for patients for a doctor's appointment;&lt;/li&gt;
&lt;li&gt;The structuring of visiting times follows the schedule and is not disturbed by the lateness of the patient or the doctor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application development is necessary to make it easier for doctors and patients to find each other and to ensure comfortable work in one information field.&lt;br&gt;
You know, that the main goal of telemedicine is to facilitate the interaction of the doctor with the patient.&lt;br&gt;
Contacting the patient at a distance, the doctor conducts a survey about the patient's condition. If necessary, the patient and the doctor can switch to video communication. This will allow you to visually assess the patient's condition, its severity, and give recommendations for further action. All this is possible thanks to the creation of a number of functionalities and distinctive features in applications that attract various patients to certain online clinics.&lt;br&gt;
How can you make money?&lt;br&gt;
Earnings for the clinic through the telemedicine application can be carried out in three directions:&lt;br&gt;
1) The patients. By opening the application, the client can select the required specialist, make an appointment and then he pays the cost of the doctor's service. Reception can take place by appointment or immediately after payment. The creators of telemedicine software can implement several types of payment for the client, thereby increasing the possibility of making a profit for the clinic.&lt;br&gt;
2) Cooperation with pharmacies. The clinic can create a separate category in the “Pharmacy” application, where the patient can purchase all the necessary medicines according to the prescribed prescription. A percentage of the income from sales of medicines goes to the clinic, which decided to implement this function in the application. Delivery of medicines is carried out by a cooperating pharmacy, freeing the telemedicine clinic from additional logistics costs.&lt;br&gt;
3) Advertising. This type of earnings makes it possible to launch ads on the basis of the application, which organizes additional income for the clinic and expands the interest of patients in the recommended goods / services.&lt;br&gt;
Working in the company of the Exceed Team as a software engineer, I made new additional features for telemedicine software as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration with medical equipment&lt;/li&gt;
&lt;li&gt;Integration with fitness / health gadgets&lt;/li&gt;
&lt;li&gt;Billing integration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creating a telemedicine platform, I use mobile and web applications. I usually use programming languages: Android = Java; Kotlin. iOS = Swift.&lt;br&gt;
As for web applications, I use React Native, Nodes, Laravel, Node.js, React.&lt;br&gt;
However, the use of these applications is often impossible without the integration of additional tools that make telemedicine work easier and more active. We are talking about tools such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AI (Artificial Intelligence)&lt;/li&gt;
&lt;li&gt;WebRTC&lt;/li&gt;
&lt;li&gt;EMR and EHR&lt;/li&gt;
&lt;li&gt;Cloud services&lt;/li&gt;
&lt;li&gt;IVR&lt;/li&gt;
&lt;li&gt;Elastic search&lt;/li&gt;
&lt;li&gt;Geolocation&lt;/li&gt;
&lt;li&gt;Twilio&lt;/li&gt;
&lt;li&gt;Safe payment&lt;/li&gt;
&lt;li&gt;Integration with health tracking apps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create an optimal application that meets the needs of a doctor and a patient, it is necessary to collect business data, which is built on the basis of information about the market analysis of the created telemedicine applications. In connection with the current situation of the pandemic, there has been a "jump" in the number of visits to doctors through telemedicine.&lt;br&gt;
The Exceed Team is ready to implement any of your ideas for creating telemedicine. If your future application contains new solutions in this area of business, we are ready to present you a unique solution to ensure that you get ready-made software on any device that meets all your requirements and plans. Contact us to find out all the nuances and additional details in the field of telemedicine app development.&lt;/p&gt;

</description>
      <category>telemedicine</category>
      <category>software</category>
      <category>application</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Notion template to organize your chords 🎸and learning guitar</title>
      <author>Sarthak Sharma</author>
      <pubDate>Fri, 28 May 2021 10:55:12 +0000</pubDate>
      <link>https://dev.to/xenoxdev/notion-template-to-organize-your-chords-and-learning-guitar-4j6a</link>
      <guid>https://dev.to/xenoxdev/notion-template-to-organize-your-chords-and-learning-guitar-4j6a</guid>
      <description>&lt;p&gt;Hey folks 👋🏼&lt;/p&gt;

&lt;p&gt;We just launched another Product on Product Hunt. It's a notion template that helps you to organize your chords and learn guitar&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-guitar"&gt;
  &lt;/a&gt;
  Learn Guitar
&lt;/h3&gt;

&lt;p&gt;An amazing template to make your dreams of playing that dreamy song on your own, come true. This template will help you keep track of your guitar learning progress.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HaEBP5hil3w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It contains two databases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chords&lt;/li&gt;
&lt;li&gt;My Songs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#chords"&gt;
  &lt;/a&gt;
  Chords
&lt;/h3&gt;

&lt;p&gt;It contains all the chords identified with a name, an image, and your learning progress. This template is complete with a feature that will add a new chord with its status set to Next.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ek1yzmJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzr4n7iwpy1cyvpm8dg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ek1yzmJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzr4n7iwpy1cyvpm8dg9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chords-views"&gt;
  &lt;/a&gt;
  Chords Views
&lt;/h3&gt;

&lt;p&gt;The Chords Collection lets you choose from database, learning status, and chords gallery, showcasing how many chords you have collected so far!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chord Gallery View&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Trjc3N84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlfit6uu32ug6q8x6658.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Trjc3N84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlfit6uu32ug6q8x6658.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Board View&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-3tE2Hu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqsq3yit6ryz67usp6cq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-3tE2Hu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqsq3yit6ryz67usp6cq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-songs"&gt;
  &lt;/a&gt;
  My Songs
&lt;/h3&gt;

&lt;p&gt;It contains all the songs you like and want to practice, identified with the title, artist, learning status bar and the list of chords that are required to play it. (related to the 🎼Chords database). New songs can be added with the provided template. It will automatically create a song with Next status and add the gallery and table views along with all the other sections.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TyJBAil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dpm9c6a6ll5gulw8qhz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TyJBAil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dpm9c6a6ll5gulw8qhz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Detailed View&lt;/strong&gt;&lt;br&gt;
Inside the song page, a detailed view of the song with a linked database showing the chords gallery is provided along with the chords table, followed by the embedded video and audio of the song, and the lyrics.&lt;/p&gt;

&lt;p&gt;It also has a comments field so you can add your personal notes. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlOw8iII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx89uxtdh03yi2bnbogf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlOw8iII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx89uxtdh03yi2bnbogf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-songs-views"&gt;
  &lt;/a&gt;
  My songs Views
&lt;/h3&gt;

&lt;p&gt;You have the freedom to choose from List, database, and Learning Status view, to track your progress in real-time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List View&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNehsP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6f3s2i9w59bn6fg3pse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNehsP9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6f3s2i9w59bn6fg3pse.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Board view&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZMsYJeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bawcqgd28muhloctj0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZMsYJeI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5bawcqgd28muhloctj0k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-one"&gt;
  &lt;/a&gt;
  Want One?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/038reunmBR97xFM8Nj/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/038reunmBR97xFM8Nj/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Here is your link&lt;/em&gt;&lt;/strong&gt; 👉 &lt;a href="https://prototion.com/notion-template/Learn-Guitar-WiaqM2TMIVAv1qCF"&gt;&lt;strong&gt;&lt;em&gt;Learn Guitar&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are on Producthunt today. Go show some love here🔥&lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/notion-guitar-learning"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Wqh1gaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpbl45jr6gyjnoggz29b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>showdev</category>
    </item>
    <item>
      <title>What You Need to Know to Improve Your Node.js Web Development</title>
      <author>Le Truong</author>
      <pubDate>Fri, 28 May 2021 10:52:58 +0000</pubDate>
      <link>https://dev.to/letruong/what-you-need-to-know-to-improve-your-node-js-web-development-3bm</link>
      <guid>https://dev.to/letruong/what-you-need-to-know-to-improve-your-node-js-web-development-3bm</guid>
      <description>&lt;p&gt;Each programming language has its own set of advantages. However, when it comes to web development, JavaScript is the web technology's primary programming language. JavaScript performs admirably, given how easily it integrates with HTML and CSS. Node.js's influence also contributes to the language's rapid growth in popularity.&lt;/p&gt;

&lt;p&gt;Node.js is an open-source server capable of executing JavaScript to create web applications. Due to its versatility and adaptability, it has gained enormous popularity among web developers worldwide. However, as with many other systems, there is a need to optimize Node.js web development efficiency to achieve the best results with the fewest resources.&lt;/p&gt;

&lt;p&gt;The following four points will help you improve your Node.js web development:&lt;/p&gt;

&lt;h2&gt;Load Balancing Properly&lt;/h2&gt;

&lt;p&gt;Developing web applications that are efficient and capable of handling many incoming connections can be difficult. Proper load balancing is critical when creating such a web application. It entails the distribution of incoming traffic to maintain the stability of the connections. Using the cluster module in Node.js, you can replicate an application instance to support multiple connections stably.&lt;/p&gt;

&lt;p&gt;Node.js supports duplication when using a single multicore server or a cluster of servers. Due to its versatility, it is ideal for an independent web developer or even a web application development company. Additionally, the reverse proxy feature shields the system from direct internet traffic exposure, allowing for greater flexibility when multiple servers are used.&lt;/p&gt;

&lt;h2&gt;Cache&lt;/h2&gt;

&lt;p&gt;Caching data that does not change frequently is beneficial for improving web application performance. Additionally, it accelerates the development process when Node.js is used, particularly on both the client and server sides. Further, caching reduces the client's data costs by storing frequently used data locally.&lt;/p&gt;

&lt;p&gt;Using the Redis module in Node.js, you can store temporary data. This process, referred to as object caching, speeds up web development by optimizing server performance. When used in conjunction with client-side caching, the time required to render data for multiple users is significantly reduced.&lt;/p&gt;

&lt;h2&gt;Simple Illumination Coding&lt;/h2&gt;

&lt;p&gt;Web application performance is critical in today's technological landscape. Therefore, it is essential to keep web development's base code as light and compact as possible. Simple light coding improves efficiency and reduces delays. Latency is the primary factor that affects the responsiveness of the web and determines how much data is transmitted in a given timeframe.&lt;/p&gt;

&lt;p&gt;Node.js applications require fewer files and needless coding than applications written in other development systems. The majority of these different systems employ distinct front-end and back-end programming languages. Node.js is used for both, which results in less code and decreased latency.&lt;/p&gt;

&lt;h2&gt;Monitoring Web Applications Through the Use of Web Application Monitoring Systems&lt;/h2&gt;

&lt;p&gt;Web applications and operating systems have recently evolved into the backbone of countless businesses worldwide. Keeping an eye on these systems is critical to ensuring they operate at peak performance levels at all times. Web application monitoring tools provide accurate and timely information about a business's infrastructure, sending alerts in the event of server or client issues.&lt;/p&gt;

&lt;p&gt;When monitoring Node.js performance, there are several metrics to keep an eye on. The behavior of the system is one of these metrics, which includes downtime and latencies. These metrics will send alerts in the event of a server failure. Additionally, it is critical to monitor the application's resource usage, as inefficient optimization can increase costs and slower response times.&lt;/p&gt;

&lt;h2&gt;Utilize Node.js to Its Full Potential&lt;/h2&gt;

&lt;p&gt;It's pretty simple to deploy a Node—js-based web application or website. The difficulty arises in optimizing system performance while minimizing resource requirements. Reduced operating costs will significantly assist you in achieving your business goals. Hiring a team of professional front-end and back-end developers also helps to increase the efficiency of Node.js development.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Pillars of learning programming</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Fri, 28 May 2021 10:48:58 +0000</pubDate>
      <link>https://dev.to/line/pillars-of-learning-programming-5b7k</link>
      <guid>https://dev.to/line/pillars-of-learning-programming-5b7k</guid>
      <description>&lt;p&gt;I have only about 2+ years of experience in the field of programming, but in these 2 years, I have gone through more than 100s courses. Some of them actually helped and some didn't.&lt;/p&gt;

&lt;p&gt;So here are my on how you can choose your courses or simply learn programming by using these tips or pillars- &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;1.&lt;strong&gt;Test Your Skills First&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Testing your skills before taking any course is more important than you think, making our list of what we are lacking can help a lot. &lt;/p&gt;

&lt;p&gt;For example - If you a complete beginner and wanna learn HTML &amp;amp; CSS, then you should know your skill of what you know about designing because ultimately you are gonna use these languages for designing your website.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Test with learning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While learning you should test you skills that you learned. This has many benefits, but most beginners are not ready for it, mainly because they don't believe in themselves or they are just too lazy for this.&lt;/p&gt;

&lt;p&gt;For this, each programming course should centre around exercises. So that practising could never become a problem.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Fundamentals First&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Start with fundamentals, I personally know some people that start with Node.js directly without even touching JavaScript or starts with Django without knowing Python.&lt;/p&gt;

&lt;p&gt;Start with the least you can this really helps your development learning in future as you know the fundamentals completely.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Ask for help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is my personal story, I started learning HTML by myself as I don't want a teacher, in the first six I made my skills enough capable to make a website that looks like a website from the 1990s then I started with CSS it took me about 2 months to teach me. But when I started discussing questions with my school teacher, I learned more things in those 10 days than in the last 8 months.&lt;/p&gt;

&lt;p&gt;This shows that having an instructor or a mentor really makes the process very fast and less time consuming.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Be Motivated&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do You know why everyone can't be a developer? Because they don't have enough motivation to sit in front of a screen, constantly typing random words on the keyboards and not having any result.&lt;/p&gt;

&lt;p&gt;Be motivated, best thing that I knew for motivation is just to rewards yourself after you do something. Like for example, MrBeast uploaded a video, don't start watching it as soon as you saw it instead say to yourself I will fix this bug and then watch this video, this is the simplest reward you can give yourself.&lt;/p&gt;

&lt;p&gt;Thanks for reading, Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;TWITTER&lt;/a&gt; and &lt;a href="https://t.co/Q7zJeuHRYe?amp=1"&gt;DONATE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linenewsletter.substack.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N1SHBG54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0f2sb0m66tz8adhalh4h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>programming</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Benefits of Microsoft Flow</title>
      <author>Hugh Olssen</author>
      <pubDate>Fri, 28 May 2021 10:30:01 +0000</pubDate>
      <link>https://dev.to/hugholssen/benefits-of-microsoft-flow-4jd</link>
      <guid>https://dev.to/hugholssen/benefits-of-microsoft-flow-4jd</guid>
      <description>&lt;p&gt;Microsoft Flow is a cloud-based system with which you can create automated workflows, simplify business processes, and manage them more efficiently.&lt;/p&gt;

&lt;p&gt;Microsoft Flow divides its flows into three main types:&lt;/p&gt;

&lt;p&gt;Automatic Flow - a type of Flow that is activated when a pre-selected event occurs. For example, when a file is updated, other employees will be notified.&lt;br&gt;
Scheduled Flow - a flow that occurs at a specific time, such as receiving a warning to report each day of an upcoming event.&lt;br&gt;
Button Flow-Flow activated at the push of a button.&lt;/p&gt;

&lt;p&gt;Microsoft Flow is a tool that anyone can use and integrate into their Microsoft Office 365 suite. In addition to being a business process management platform that automates repetitive tasks and simplifies their execution on behalf of employees, it also provides additional benefits.&lt;/p&gt;

&lt;p&gt;You can easily integrate it with other applications (connectors). The activation-based tool allows you to integrate workflows directly into the various applications you use using connectors.&lt;/p&gt;

&lt;p&gt;A connector is a tool that connects two or more external applications. Therefore, Connector lets you connect your MailChimp to Slack, SharePoint, or other applications. This way, you can automate the processes between them and simplify your daily starting tasks.&lt;/p&gt;

&lt;p&gt;This workaround method is suitable even for people who do not have the technology and only need a Microsoft account to access the application. Also, let me note that some connectors are only available to premium users.&lt;/p&gt;

&lt;p&gt;You can use Microsoft Flow to link your applications together and create a flow between them. For example, you can use Flow to copy data from one application to another automatically. This way, your colleagues can easily share and access data through various web applications.&lt;/p&gt;

&lt;p&gt;A practical example is linking Sharepoint to your Outlook. Whenever a colleague sends you a file in your email, the software automatically triggers the Flow and shares the same file on your SharePoint.&lt;/p&gt;

&lt;p&gt;After reading all this, you are probably convinced that workflow automation tools are a must nowadays: Because big data and an abundance of responsibilities outweigh things, we need something that will make our lives easier and simplify our daily business tasks that we are going through.&lt;/p&gt;

&lt;p&gt;You are now wondering what if a disaster occurs and no proper backup is available within your Microsoft 365. In fact, Microsoft is not providing backup, well, not the backup most of us would want. Either way, Office 365 may be one of your main issues in backing up the crucial data. Office 365 backup is still an enigma for Microsoft 365 users.&lt;/p&gt;

&lt;p&gt;In this regard, I will share with you the best Office 365 backup on the market, as I am willing to help businesses worldwide to proceed with their successful operations for their specific needs.&lt;/p&gt;

&lt;p&gt;While I was searching for Office 365 backup several years ago and got Veeam as my backup partner, I really wasn't satisfied with Veeam. In this case, I tried &lt;a href="https://www.altaro.com/office-365-backup/"&gt;Altaro Office 365 backup&lt;/a&gt;, and now I am enjoying all the benefits! &lt;/p&gt;

</description>
      <category>microsoftflow</category>
      <category>microservices</category>
      <category>backup</category>
      <category>altaro</category>
    </item>
    <item>
      <title>9 Python Project Ideas From Beginners to Advanced </title>
      <author>Christine Shu</author>
      <pubDate>Fri, 28 May 2021 09:53:24 +0000</pubDate>
      <link>https://dev.to/christineshu/9-python-project-ideas-from-beginners-to-advanced-507f</link>
      <guid>https://dev.to/christineshu/9-python-project-ideas-from-beginners-to-advanced-507f</guid>
      <description>&lt;p&gt;If you are learning to code, chances are you might be learning Python. What are some ways that you are able to learn Python effectively and efficiently? Arguably, one of the best ways to learn a programming language is by practicing projects that have real world applications. By working on real projects, you’ll be able to analyze the problem and come up with your own code solution. It’s also a great way to build up your portfolio! &lt;/p&gt;

&lt;p&gt;Here’s a list of &lt;a href="https://www.codementor.io/projects/python"&gt;Python projects&lt;/a&gt; from &lt;a href="https://www.codementor.io/projects"&gt;DevProjects&lt;/a&gt; to help you get started: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beginner-level projects: You will need a basic understanding of Python fundamentals&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/tool/rss-feed-reader-in-terminal-atx32jp82q"&gt;RSS feed reader in terminal&lt;/a&gt;: Practice building a tool for fetching and converting the feed with a given RSS feed URL.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/rss-feed-reader-website-atx32j280x"&gt;RSS feed reader website&lt;/a&gt;: Work with and become familiar with RSS feeds and practice how to parse XML.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/tool/web-scraper-to-get-news-article-content-atx32d46qe"&gt;Web scraper to get news article content&lt;/a&gt;: Build a simple web scraper using Python libraries to obtain web page content and select the elements you need on a web page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Medium-level projects:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/medicine-dose-tracker-b6evlas194"&gt;Medicine dose tracker web app&lt;/a&gt;: Build a web app with a simple UI to add medicine name, dosages, and frequency. Learn and practice using HTML/CSS, REST APIs, and connecting databases.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/weekly-newsletter-summary-email-atx32ild7k"&gt;Weekly newsletter summary email&lt;/a&gt;: Create a serverless app to consolidate your email subscriptions into a single weekly summary email.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/tool/background-job-system-atx32exogo"&gt;Background job system&lt;/a&gt;: Build a background system and practice writing concurrent programming.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hard projects: These are for the advanced. Some of the projects require knowledge of other languages.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/favorite-stocks-watcher-b0wexig802"&gt;Favorite stocks watcher&lt;/a&gt;: Create an application that can monitor and share stock portfolios with Django and React frameworks and Python and JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/plagiarism-checker-website-atx32nf0oa"&gt;Plagiarism checker website&lt;/a&gt;: Build an automated solution that handles plagiarism  detection with Flask and Bootstrap.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codementor.io/projects/web/online-photo-collage-tool-atx32mwend"&gt;Online photo collage tool&lt;/a&gt;: Build a web app with completely separate front end, API, task queue, and optional storage components. Practice handling image inputs from users and processing basic image tasks asynchronously. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find more unique projects in other tech stacks on &lt;a href="https://www.codementor.io/projects"&gt;DevProjects&lt;/a&gt;. It’s a free community where users can learn programming by building projects. Our goal is to bridge the learning gap between theory and real-world code. Each project spec is uniquely designed by senior developers and is clear and limited in scope.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://www.codementor.io/projects"&gt;DevProjects&lt;/a&gt; for more project ideas. If you are interested in being a project contributor, check out the page &lt;a href="https://www.notion.so/codementor/DevProjects-Contribute-projects-c7027b65fbd541d7848f02d3711ebe01"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;👇🏼 Leave a comment below to let me know which project looks the most interesting to you!👇🏼&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>All You Wanted to Know About UX, UI, and Usability Testing</title>
      <author>TestFort</author>
      <pubDate>Fri, 28 May 2021 09:35:26 +0000</pubDate>
      <link>https://dev.to/testfort_inc/all-you-wanted-to-know-about-ux-ui-and-usability-testing-440e</link>
      <guid>https://dev.to/testfort_inc/all-you-wanted-to-know-about-ux-ui-and-usability-testing-440e</guid>
      <description>&lt;p&gt;Imagine creating a great app just to have it crash and burn because adequate steps weren’t taken to rid it of bugs and errors. This might happen because one essential stage of building a digital product was overlooked, quality assurance (QA) with &lt;a href="https://testfort.com/usability-testing"&gt;UX/UI testing&lt;/a&gt; as one of the major steps. &lt;/p&gt;

&lt;p&gt;QA is the stage where bugs and errors are detected and fixed so that your product is in its best shape and is working as it should. Testing and conducting QA on products as a separate stage is crucial because developers and designers see products through a different lens and can’t always make sure all usability criteria are met and all possible errors eliminated. &lt;/p&gt;

&lt;p&gt;So, QA and testing should be done at every stage of creating software to determine the usability of a product in terms of its user experience as well as the user interface. This guide will discuss just that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-ui-ux-and-usability"&gt;
  &lt;/a&gt;
  What Are UI, UX, and Usability?
&lt;/h1&gt;

&lt;p&gt;UI and UX are often mentioned together but they are two distinct areas of software or digital product development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition of UX&lt;/strong&gt;&lt;br&gt;
UX, or user experience is how people interact with an app. UX is mostly about prototyping and wireframing, architecture design, and interactions. &lt;/p&gt;

&lt;p&gt;How do we want this to work? What features should be present on this or that screen? How do we make this work? These are examples of questions you might ask a UX architect. &lt;/p&gt;

&lt;p&gt;For UX designers, it’s essential to understand how their target audience wants to interact with the app, how these people think, and what makes them feel good or bad while using an app. This also dictates how an interface will look in order to lead a user to a target action in the most natural way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition of UI&lt;/strong&gt;&lt;br&gt;
UI, or user interface, on the other hand, is the graphical layout of an application or software. It’s mostly about layouts, colors, fonts, illustrations, and other elements of style you can see in an app, software, or a website. &lt;/p&gt;

&lt;p&gt;What style do we want the app to have? What will this button/form/etc. look like? These are the questions you might ask a UI designer. &lt;/p&gt;

&lt;p&gt;UI designers decide what an app will look like, from the color schemes to the fonts to the shapes of buttons. Most UI designers are also graphic designers and their job is to create aesthetic appeal for their application. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Difference between UI and UX design&lt;/strong&gt;&lt;br&gt;
There’s a tight connection between user experience (UX) and user interface (UI). They are related, but not the same.&lt;/p&gt;

&lt;p&gt;UI is more about design and implementation, while UX is more about the architecture and structure of the interface. So, normally, UX goes first. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvex8f0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu3rm0idq8a18gfnbaoy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bvex8f0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu3rm0idq8a18gfnbaoy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All this leads us to usability—the foundation of design, the measure of how a good user interface facilitates a positive user experience. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Usability?&lt;/strong&gt;&lt;br&gt;
Usability means just how comfortable your software or website is to use for an average user.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How easy is the learning curve? &lt;/li&gt;
&lt;li&gt;How quickly does a user get what they want? &lt;/li&gt;
&lt;li&gt;Is there anything annoying while using the app? 
This is what usability is about in a few words, and it connects both UI and UX. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An interface should be intuitive – users shouldn’t need to go through a daunting onboarding process just to do a simple action, when everything is clear, quick and obvious to use. &lt;/p&gt;

&lt;p&gt;And yes, this also refers to both simple and complicated apps, software, and websites. Complicated systems are where usability is especially important. For example, it’s quite difficult to create an unusable calculator because we all understand what it should look like and how it works, and even if the interface is not perfect, most people will know how to use it. But if there’s something more complex, like accounting or banking software, it’s very easy to create a cumbersome, overloaded, and buggy interface, and you might need an experienced &lt;a href="https://testfort.com/usability-testing"&gt;usability testing&lt;/a&gt; company to do the job for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zEG2TS3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e25pu9ho5kx5mcpye1to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zEG2TS3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e25pu9ho5kx5mcpye1to.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does Usability Testing Equal Functional Testing?&lt;/strong&gt;&lt;br&gt;
Not really. While functional testing goes deep into whether all features operate well, software and website usability testing refers to how exactly they work and whether it is the most efficient way. &lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user can update their information on the website and it is successfully updated on the server. This is a “check” from the functional testing side. &lt;/li&gt;
&lt;li&gt;A user can update their information, but it takes five minutes to update. This is an issue that a website usability testing service may report. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;he main focus of functional testing is assessing the workability of an app or software, whereas the main focus of usability testing is to make the app easier to use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-usability-needs-quality-assurance"&gt;
  &lt;/a&gt;
  Why Usability Needs Quality Assurance
&lt;/h1&gt;

&lt;p&gt;It might not seem obvious from the outside, but it’s impossible to just go and create a flawless app or website. Bugs and errors are always there until you detect and fix them, and this doesn’t mean your developers’ work is bad. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Any interface, even in a very simple app, is a set of interactions. Different features created by different people, or just at a different time, may not connect with each other perfectly and cause errors. &lt;/li&gt;
&lt;li&gt;Apps and especially websites may be run on other platforms and devices, which may also cause unexpected issues that are hard to detect during the development process. &lt;/li&gt;
&lt;li&gt;And yes, human errors may also occur. Your team may have been working on the development of an app for a long time, and there may be things they haven’t noticed just because their eyes are blurred. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, it’s not always obvious where a mistake may occur. You need “hunters” (professionals in UI and UX testing) who know how to find these big and small bugs that may spoil your users’ experience and who will report to the developers in the right way.&lt;/p&gt;

&lt;p&gt;If UX and UI testing are an integral part of the product development process, you can implement quality assurance at each level, from the creation of a separate feature to the app release and updates, to make sure everything works right. You’ll fix problems as they arise, not after users report them to you.&lt;/p&gt;

&lt;p&gt;Which, in turn, saves you time, increases the quality of your product, and helps you increase your customers’ satisfaction.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-the-main-requirements-for-web-and-app-usability"&gt;
  &lt;/a&gt;
  What Are the Main Requirements for Web and App Usability?
&lt;/h1&gt;

&lt;p&gt;There’s a standard list of requirements that fits most of the apps and if they are met, chances are high that your app or website will have a good usability score. These requirements, in a more or less equal form, are used by all professionals and vendors that provide &lt;a href="https://testfort.com/usability-testing"&gt;usability testing&lt;/a&gt; services. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;&lt;br&gt;
The product should be accessible to the largest number of its potential users. People with disabilities should be able to use it via assistive services just as easily as an average target user. People with different backgrounds and native languages shouldn’t have issues using your app either.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perceivability&lt;/strong&gt;&lt;br&gt;
All parts of the interface should be easy to perceive and have alternatives. For example, if an image is unavailable, it should have alternative text or a caption so users can understand what it represented.&lt;/p&gt;

&lt;p&gt;Another example is providing captions in video material and a transcript for audio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operability&lt;/strong&gt;&lt;br&gt;
This usability requirement concerns user activity and means that everything that is conceived should be possible to use, for example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the features should be available and working. &lt;/li&gt;
&lt;li&gt;User needs to have enough time to read the interface and its content. &lt;/li&gt;
&lt;li&gt;The content should be physically safe (e.g. it should not cause seizures in predisposed people). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ease of Navigation&lt;/strong&gt;&lt;br&gt;
On the same note, what makes an interface operable is good navigation, in any type of website or software, from the simplest to the more complicated ones. &lt;/p&gt;

&lt;p&gt;Navigation should be made as simple, easy, and seamless as possible so that users don’t think about doing something, but just do it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Performance&lt;/strong&gt;&lt;br&gt;
To gauge the performance of your site or app, you need to be aware of the speed at which it loads pages and content, especially high-quality images. Text loads faster than images and illustrations, so the aim here is to make sure your product is in no way sluggish and loads within a matter of seconds.&lt;/p&gt;

&lt;p&gt;And in terms of design, you should think about what’s happening while the content is loading. For example, the spinning wheel was introduced to interfaces so users know that something is happening and the app didn’t just freeze.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Understandable Interface&lt;/strong&gt;&lt;br&gt;
In an understandable interface, the content is readable – there’s no fine print or clash of colors. It also operates in predictable ways so users can avoid making mistakes.&lt;/p&gt;

&lt;p&gt;For example, if a user is filling out a form and missing a required field, a window will pop up alerting them to the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsiveness&lt;/strong&gt;&lt;br&gt;
Since handheld devices are used more than computers and laptops these days, it’s important to keep up with the times and adapt content and web design for phone use as well. This poses a web design challenge because most sites are designed with computers in mind.&lt;/p&gt;

&lt;p&gt;Responsiveness is all about your site working smoothly and cleanly regardless of the device it’s opened on. You can even do this adaptation on WordPress, but it still needs to be tweaked to look as presentable as it would on a large screen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learnability&lt;/strong&gt;&lt;br&gt;
Learnability is the ease and pace at which a user picks up the ways to use a product. It used to be very common for user interfaces to require training to operate them but the current trend is toward creating UI that is usable for every kind of user, right away. This is why learnability is such an essential requirement; it makes sure that different kinds of users, including complete amateurs, can get on board easily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Credibility&lt;/strong&gt;&lt;br&gt;
Credibility means that your product should inspire justified trust in users. This means people are trusting that: &lt;/p&gt;

&lt;p&gt;The product will do what it is intended (or expected) to do; &lt;br&gt;
It will do it in a safe and harmless way; &lt;br&gt;
It will be of the expected quality and do it in the expected time. &lt;br&gt;
It’s simply impossible to deliver your product with its UI and UX if it is not trustworthy and people don’t trust using it. Users will just go elsewhere. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User-Friendliness&lt;/strong&gt;&lt;br&gt;
This just means that the UI should be a pleasure to use. This could mean aesthetically pleasing designs, quick navigation and loading times, and any other features that users love to see on their interfaces. This is such a big requirement because many users base their opinions about products and interfaces on how user-friendly they are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Absence of Errors&lt;/strong&gt;&lt;br&gt;
This means that it should be virtually impossible to give wrong results when information is fed into the app or website. It should be bulletproof against the entrance of invalid data or unexpected user scenarios. The harder you make it to make an error in the first place, the better the error tolerance of your product will be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smooth Flow&lt;/strong&gt;&lt;br&gt;
A good flow is a combination of actions that follow seamlessly, exactly as a user intuitively expects it to be. Some examples of bad flow are: &lt;/p&gt;

&lt;p&gt;Unreasonably long processes with many steps and screens to pass; &lt;br&gt;
Unnecessary or irrelevant pop-ups between commands; &lt;br&gt;
Repeated steps or expected steps missed.&lt;br&gt;
In terms of website usability, flow also means that one relevant page is followed by another relevant page without any additional information being thrown at the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customization&lt;/strong&gt;&lt;br&gt;
It deeply depends on each app or website; however nowadays, we’re used to customized experiences and we expect a certain minimal level almost everywhere. This basic level includes the ability to manage such things as user names and avatars, color schemes, and timezones—it’s what we do in many apps, from email accounts to games. In more complicated apps, the expected level of customization may go deeper and include many more features, corresponding to the product. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Engagement&lt;/strong&gt;&lt;br&gt;
Visually stimulating content that is fun and interesting to look at guarantees user engagement. Certain apps boast much higher user engagement levels than others and one huge reason for this is that they promote the kind of content that they know will garner the most user attention and engagement. This means that the majority of users should rate your app’s tools as fun to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQXFda43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2g4vq7bmv1rurufo49c0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQXFda43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2g4vq7bmv1rurufo49c0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UX and UI testing includes all these aspects, with UX involving architecture and experience and UI involving the design itself.&lt;/p&gt;

&lt;p&gt;For example, during the UX testing stage, you might discover that there should be a confirmation pop-up after a user sends a message to support. Otherwise, they send a message several times thinking that something didn’t work.&lt;/p&gt;

&lt;p&gt;At the same time, a UI tester might tell you the feedback form is designed in unpleasing colors and the fonts are difficult to read.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-you-perform-a-usability-test"&gt;
  &lt;/a&gt;
  How Do You Perform a Usability Test?
&lt;/h1&gt;

&lt;p&gt;Whether you perform this stage in-house or involve a UI/UX-testing service provider, &lt;a href="https://testfort.com/usability-testing"&gt;usability testing&lt;/a&gt; is done in sessions, each one dedicated to a certain part of the design. There’s roughly five phases in a session:&lt;/p&gt;

&lt;p&gt;1) Planning. This stage includes defining objectives, determining which exact part of a product will be the focus, choosing user personas to work with, and defining the exact tests to execute.&lt;br&gt;
2) Recruiting a test group. If you dedicated enough time to detailing user personas in the previous step, finding them in most cases is a matter of choosing the right source. If you have an established user base or social media following you can assemble a focus group from them. You can also reach out to your clients directly or hire from an agency.&lt;br&gt;
3) Running tests. When you’re ready to run tests, make sure that the focus group is comfortable and then perform the test. And don’t forget to record the results on video; it will help you analyze the data more deeply. &lt;br&gt;
4) Analyzing data. Once you get your data, it’s time to analyze it and determine the most serious and frequent issues. Based on this analysis, you can find solutions and improve the design. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vCoXTQ0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gujno3e37uurbcs65hmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vCoXTQ0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gujno3e37uurbcs65hmp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s see how the test phase is actually done. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Methods of Usability Testing&lt;/strong&gt;&lt;br&gt;
There are several techniques that are applied by usability testing companies and professionals, depending on the specific target audience and available resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Guerilla testing – going into public places, randomly choosing people, and asking them to participate. This method can be used in the early stages, when you already have a tangible design so you can determine if you are moving in the right direction.&lt;/li&gt;
&lt;li&gt;Lab testing – simulating scenarios in a controlled (lab) environment with a moderator. It’s useful when you need to see how real users interact with your product, however, you run the risk of forcing non-realistic user behavior. &lt;/li&gt;
&lt;li&gt;Remote testing – unsupervised testing in a natural user environment and probably the most realistic for a lot of companies right now. This method is handy when you want to validate a hypothesis on a large sample. However, this might not be your first choice, because unmoderated testing doesn’t provide insight on user reasoning.&lt;/li&gt;
&lt;li&gt;Card sorting – an easy way to test content and features by placing them on cards and asking users to sort the cards into categories. This is a good method for optimizing your navigation structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Can You Automate Usability Tests?&lt;/strong&gt;&lt;br&gt;
When it comes to functional and performance tests, it’s possible to achieve full automation. You may imitate user behavior or check technical data with automated testing to ensure each feature works as intended. &lt;/p&gt;

&lt;p&gt;In usability (both UI and UX testing), it’s all about human behavior. You need to observe how people interact with a program and how they react, that’s why this type of testing may be only partially automated. &lt;/p&gt;

&lt;p&gt;For example, you may automate data input and analysis, with UX testing platforms and additional tools, and get valuable data with apps like Hotjar or Userreport, but you cannot watch real-life user behaviour with any of these tools. So, manual tests are also necessary in usability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At What Stage is Usability Testing Done?&lt;/strong&gt;&lt;br&gt;
Usability testing may be performed during different stages of the development process, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Product concept;&lt;/li&gt;
&lt;li&gt;Wireframe, mock-up or a clickable prototype;&lt;/li&gt;
&lt;li&gt;Fully functional product (app, website, software).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, you should work with UX and UI testing professionals during all the stages, starting from the raw idea and implementing their recommendations during the process. It will help you save a lot of time and money by avoiding mistakes that will otherwise need to be fixed later, sometimes at a high price. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Much Does Usability Testing Cost?&lt;/strong&gt; &lt;br&gt;
As in most IT services, the final cost depends on many factors, such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The development stage;&lt;/li&gt;
&lt;li&gt;Costs of technology required to run a test (e.g. a UX testing platform, analytics tools, etc.);&lt;/li&gt;
&lt;li&gt;The necessity of competitive/comparative studies; &lt;/li&gt;
&lt;li&gt;App versions to test (e.g. mobile and desktop);&lt;/li&gt;
&lt;li&gt;Required sample sizes; &lt;/li&gt;
&lt;li&gt;Exact target audiences – sometimes they may be hard to find and invite;&lt;/li&gt;
&lt;li&gt;The number of markets and locations (e.g. you might need to perform studies in different countries).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s impossible to give an average cost for UI/UX testing. A simple app that is exclusive to iOS and only has four key functions across four screens can be tested in one week for under $1,000. Meanwhile, a complex CRM for a large business could take months to explore and require thousands of individual tests, running up a bill of $100k or more.&lt;/p&gt;

&lt;p&gt;For a detailed estimate, it’s always best to reach out to your QA team and &lt;a href="https://testfort.com/contact-us"&gt;ask for a quote&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Long Does Usability Testing Take?&lt;/strong&gt;&lt;br&gt;
Depending on the same factors that influence the price (development stage, user personas, markets, sample sizes, etc.) an average usability test for a product or wireframe may take between two weeks and two months. &lt;/p&gt;

&lt;p&gt;Here’s how it breaks down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Estimation&lt;/strong&gt; — After our first call, we take between 2-5 days to prepare an estimate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Preparation&lt;/strong&gt; — The team will prepare a comprehensive list of test cases and scenarios, prepare traceability matrices, and create a timeline for testing the project. 1-3 weeks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Execution&lt;/strong&gt; – We go over every button on every screen to ensure it fits with the overall design theme, is accessible, easy to find, and its function can be intuitively understood. Depending on the complexity of the software or website, this can take anywhere between two days and several weeks. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Analysis&lt;/strong&gt; — After the completion of each test we document it, write a bug report for all discovered UI/UX inconsistencies, and prepare documentation to be delivered to the development team for debugging and further development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;To sum up, usability testing in both UI and UX is an essential component of successful &lt;a href="https://qarea.com/services/product-development"&gt;product development&lt;/a&gt;. It allows you to provide end users with a quality product that they will not only find useful but also thoroughly enjoy.&lt;/p&gt;

&lt;p&gt;Any app or piece of software these days should provide a high quality, easy, and seamless experience, so it’s essential to have a strong QA component, such as a usability testing agency to ensure the quality of your app or website. Products that are not up to the mark in any aspect are often driven out of the market as soon as they arrive.&lt;/p&gt;

&lt;p&gt;You can achieve a smooth interaction between a user and an interface by adopting the skills of TestFort. More than 800 projects were improved together with our team during more than 19 years of experience, and we’ll be happy to help you create a great error-free product.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at&lt;/em&gt; &lt;em&gt;&lt;a href="https://testfort.com/blog/all-you-wanted-to-know-about-ux-ui-and-usability-testing"&gt;testfort.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>usabilitytesting</category>
      <category>qatesting</category>
      <category>qateam</category>
    </item>
    <item>
      <title>Video call app with chat functionality built using React.js, Web RTC and Socket.io</title>
      <author>Mihir Gupta</author>
      <pubDate>Fri, 28 May 2021 09:23:19 +0000</pubDate>
      <link>https://dev.to/mihir0699/video-call-app-with-chat-functionality-built-using-react-js-web-rtc-and-socket-io-3eeo</link>
      <guid>https://dev.to/mihir0699/video-call-app-with-chat-functionality-built-using-react-js-web-rtc-and-socket-io-3eeo</guid>
      <description>&lt;p&gt;This is a video calling application where users can call other user and will also have the capabiltiy to mute their mic and audio. Their is also real time chat functionality.&lt;br&gt;
It's also a modern PWA so users can install it on their devices like other native apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project Link&lt;/strong&gt; - &lt;strong&gt;&lt;em&gt;&lt;a href="https://video-chat-mihir.vercel.app/"&gt;https://video-chat-mihir.vercel.app/&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github repo&lt;/strong&gt; - &lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/mihir0699/Video-Chat"&gt;https://github.com/mihir0699/Video-Chat&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo Video&lt;/strong&gt; - &lt;strong&gt;&lt;em&gt;&lt;a href="https://youtu.be/zsyEx2sVi6c"&gt;https://youtu.be/zsyEx2sVi6c&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-and-functionalities"&gt;
  &lt;/a&gt;
  Features and Functionalities 😃
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Video Call with others&lt;/li&gt;
&lt;li&gt;Mute audio/video&lt;/li&gt;
&lt;li&gt;Instantly join a video call with a code&lt;/li&gt;
&lt;li&gt;Chat in real-time&lt;/li&gt;
&lt;li&gt;Chat Notifications&lt;/li&gt;
&lt;li&gt;Install it as a PWA (Progressive Web App) on your device&lt;/li&gt;
&lt;li&gt;Unlimited duration calls&lt;/li&gt;
&lt;li&gt;Share code instantly on social media platforms&lt;/li&gt;
&lt;li&gt;Simple and intuitive UI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots 📸
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  Home Page
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xo59vXk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115701626-9b838e00-a385-11eb-8a07-214ca0b9f327.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xo59vXk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115701626-9b838e00-a385-11eb-8a07-214ca0b9f327.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#incoming-call"&gt;
  &lt;/a&gt;
  Incoming Call
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iD5oGzrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115701844-d8e81b80-a385-11eb-91cf-014b23e24ae4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iD5oGzrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115701844-d8e81b80-a385-11eb-91cf-014b23e24ae4.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-call"&gt;
  &lt;/a&gt;
  In Call
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--81ML_zua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115702841-07b2c180-a387-11eb-897e-f19abefafef5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--81ML_zua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115702841-07b2c180-a387-11eb-897e-f19abefafef5.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chat"&gt;
  &lt;/a&gt;
  Chat
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K36c1dEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115702929-24e79000-a387-11eb-906c-704608263da4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K36c1dEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115702929-24e79000-a387-11eb-906c-704608263da4.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUkO1w-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115703177-709a3980-a387-11eb-8d9d-15ddf3b66a25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUkO1w-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/48746544/115703177-709a3980-a387-11eb-8d9d-15ddf3b66a25.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack 💻
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netlify.com/"&gt;Netlify + Heroku (Hosting)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webrtc"&gt;Web RTC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://socket.io/"&gt;Socket.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ant.design/"&gt;Ant Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>webrtc</category>
      <category>socketio</category>
    </item>
  </channel>
</rss>
