<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Open Source in Everyday Life</title>
      <author>Anish De</author>
      <pubDate>Thu, 07 Oct 2021 10:19:51 +0000</pubDate>
      <link>https://dev.to/byteslash/open-source-in-everyday-life-j84</link>
      <guid>https://dev.to/byteslash/open-source-in-everyday-life-j84</guid>
      <description>&lt;p&gt;We often don't realize but open-source projects play a huge role in our life. Today, in this article, I am going to talk about how we use open-source technologies in our everyday life and what would happen if they didn't exist 😱.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WZyNXkdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633524503879/t56B1bvDk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZyNXkdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633524503879/t56B1bvDk.gif" alt="let-us-get-started-minions.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-examples"&gt;
  &lt;/a&gt;
  Some Examples
&lt;/h2&gt;

&lt;p&gt;Let us start with some open-source technologies we use in our daily life - &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#android"&gt;
  &lt;/a&gt;
  Android
&lt;/h3&gt;

&lt;p&gt;Many of us have phones running the &lt;a href="https://www.android.com/"&gt;Android Operating System&lt;/a&gt;. Android by itself is an open-source project maintained by Google. The base version of android is popularly referred to as Android Open Source Project (AOSP). Now, what do I mean by the base version of android? Well most of us aren't running pure AOSP on our phones as companies put on their proprietary code on top of AOSP. In fact &lt;a href="https://developers.google.com/android/guides/overview"&gt;Google Play Services&lt;/a&gt; is closed-source. You can use AOSP without Google Play Services but then you are going to miss out on Google Services and will face weird issues if you do so. Many third-party apps will also have trouble working as many of them rely on Google APIs like the Google Maps API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chromium"&gt;
  &lt;/a&gt;
  Chromium
&lt;/h3&gt;

&lt;p&gt;Most people use some chromium-based browser, be it Google Chrome, Microsoft Edge, Vivaldi, Brave, or even Opera. Chromium by itself is an &lt;a href="https://www.chromium.org/Home"&gt;open-source project&lt;/a&gt;. Now, to be fair, none of the aforementioned browsers are open-source (with the exception of Brave). This is usually done to pack more proprietary features. For example, Google Chrome comes with a suite of Google features like syncing across different devices. These browsers are a chromium fork with more features, different themes, better integration with operating systems, and more optimization. It is a lot like how Android works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; is an extremely popular code editor and it is open source. You can take a look at the &lt;a href="https://github.com/microsoft/vscode"&gt;source code on GitHub&lt;/a&gt;. There is a small caveat, the version of Visual Studio Code distributed by Microsoft does have telemetry which the open-source version doesn't. You can download &lt;a href="https://vscodium.com/"&gt;VSCodium&lt;/a&gt; which has binaries built from the source code on GitHub but you might face issues. &lt;/p&gt;

&lt;p&gt;Most applications depend on some open-source project, be it a web framework like &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; or some other package. In fact, all programming languages are open-source (at least I have never heard of a closed-source programming language). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-open-source"&gt;
  &lt;/a&gt;
  Advantages of Open Source
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#great-community"&gt;
  &lt;/a&gt;
  Great Community
&lt;/h3&gt;

&lt;p&gt;You will have a great community built around your project that will trust your project. Many people are open-source enthusiasts and will try their best to use open-source software. These people will be your users if the application fulfills their needs!!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributors"&gt;
  &lt;/a&gt;
  Contributors
&lt;/h3&gt;

&lt;p&gt;When an application is open-source, open-source contributors get a chance to contribute to your project. Any contribution is extremely valuable as it usually fixes a problem. There will be spam but that is just part of the game.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning"&gt;
  &lt;/a&gt;
  Learning
&lt;/h3&gt;

&lt;p&gt;Contributing to open-source is something that gives not only beginners but also advanced developers something to work on and learn from contributing. You, as the developer of the project, will also learn a lot from the community of developers who find something not right with your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  Fixes
&lt;/h3&gt;

&lt;p&gt;We all make mistakes and there will be loopholes or bugs in your code. Other contributors will not only let you know about the issue but also help you in fixing the problem or even fix the problem themselves. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-understanding"&gt;
  &lt;/a&gt;
  Better Understanding
&lt;/h3&gt;

&lt;p&gt;If one encounters a problem in an open-source project, one can look at the source code and better understand the cause of the problem. This will help resolve the bug more quickly making it a win-win situation for you, as the developer and the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#portfolio"&gt;
  &lt;/a&gt;
  Portfolio
&lt;/h3&gt;

&lt;p&gt;Contributing to open-source is something of great importance in your portfolio. It is a great starting point that will help you later on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-would-happen-if-opensource-didnt-exist"&gt;
  &lt;/a&gt;
  What would happen if open-source didn't exist
&lt;/h2&gt;

&lt;p&gt;Now that we have seen examples of open-source in our day-to-day life and have seen the advantages, let us discuss what would happen if everything would be proprietary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-wouldnt-be-good-for-developers"&gt;
  &lt;/a&gt;
  It wouldn't be good for developers
&lt;/h3&gt;

&lt;p&gt;Developers usually rely on programming languages, libraries, and frameworks when developing an application. If these were not open-source, developers would fear that they might be shipping applications with trackers which they didn't intend to add. This would also mean that there would be lesser flexibility. When something is open-source, there is a great community making tutorials, understanding how a framework works, working on making it better, and making plugins for it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wouldnt-be-good-for-beginners"&gt;
  &lt;/a&gt;
  Wouldn't be good for beginners
&lt;/h3&gt;

&lt;p&gt;Beginners learn a lot from contributing to open-source. If this opportunity was to be taken away from their learning path, they would lose a lot. From my personal experience, I can say that I have learned a lot by contributing to others' projects on GitHub. Even seeing and understanding the source code of an application and how it works teaches one a lot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tinkerers-wouldnt-be-happy"&gt;
  &lt;/a&gt;
  Tinkerers wouldn't be happy
&lt;/h3&gt;

&lt;p&gt;Many people don't want a company to decide what is best for them. They want to customize their things as much as they can to fit their needs and likings. This makes one more comfortable and gives people options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost
&lt;/h3&gt;

&lt;p&gt;As things would become closed-source, corporations would try to make the most out of it by pricing their products high. Due to many things being open-source, the community has developed many open-source alternatives which may better suit a person. Not only are open-source projects usually free or cheap but also they are better when it comes to privacy. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#privacy"&gt;
  &lt;/a&gt;
  Privacy
&lt;/h3&gt;

&lt;p&gt;This takes us to privacy. Closed-source applications are known to have trackers which is a direct invasion of privacy. Open-source applications usually don't have such trackers. If someone is concerned about their privacy, they can even self-host an application they want to use.&lt;/p&gt;

&lt;p&gt;Other than these, closed-source applications would take away the advantages open-source applications tend to have (as mentioned above).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you have found this article helpful in understanding the importance of open-source in our everyday life. Feel free to leave a comment down below if you have a doubt and you can reach out to me on &lt;a href="https://twitter.com/anishde12020"&gt;Twitter&lt;/a&gt; as well. I am also going to write a lot about open-source this month so keep an eye on my blog or follow me so you are notified whenever I release a new post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7I9xPEMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633593281303/Bjk6EPRvy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7I9xPEMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633593281303/Bjk6EPRvy.gif" alt="bye-close-door-mionion.gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Finding the Right Open Source Projects to Contribute to</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Thu, 07 Oct 2021 10:11:18 +0000</pubDate>
      <link>https://dev.to/byteslash/finding-the-right-open-source-projects-to-contribute-to-500j</link>
      <guid>https://dev.to/byteslash/finding-the-right-open-source-projects-to-contribute-to-500j</guid>
      <description>&lt;p&gt;One of the biggest question marks while contributing to open source is what to contribute to?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuWCPxqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/3ohzAfg9idAylNIpoY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuWCPxqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/3ohzAfg9idAylNIpoY/giphy.gif" alt="thinking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's see where to find these repositories-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-searchexplore"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/explore"&gt;GitHub search/explore&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Github is a great way to find other open-source projects to work on. Here you can search by-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Topics&lt;/li&gt;
&lt;li&gt;Languages&lt;/li&gt;
&lt;li&gt;Stars&lt;/li&gt;
&lt;li&gt;Trending&lt;/li&gt;
&lt;li&gt;And many more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A great topic to search for is &lt;a href="https://github.com/search?q=good+first+issue&amp;amp;type=issues"&gt;&lt;code&gt;good first issue&lt;/code&gt;&lt;/a&gt;. You can find beginner friendly issues that are easier to contribute&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QUf-AdOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633571537845/YaNlm2dBu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QUf-AdOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633571537845/YaNlm2dBu.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-first-issuesdev"&gt;
  &lt;/a&gt;
  &lt;a href="https://goodfirstissue.dev/"&gt;Good first issues.dev&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Easily find beginner-friendly issues to work on. You can find repositories of different languages easily and start working on them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OjsrGN18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633571657257/OBAfiYl_R.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OjsrGN18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633571657257/OBAfiYl_R.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awesome-for-beginners-github-repository"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/MunGell/awesome-for-beginners"&gt;Awesome for beginners GitHub repository&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is a collection of open-source projects on GitHub that you can contribute to. They are sorted based on the language so it is easy to find what you want to work on-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbHUPJ5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633572083827/5un3fCJLH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbHUPJ5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633572083827/5un3fCJLH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-first-issuescom"&gt;
  &lt;/a&gt;
  &lt;a href="https://goodfirstissues.com/"&gt;Good First Issues.com&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is another website with a list of many beginner friendly projects. You can search by labels, languages, repositories&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--voQyt5e6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633572608557/qdF_X4sTM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--voQyt5e6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633572608557/qdF_X4sTM.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contribute-to-the-apps-and-tools-you-use"&gt;
  &lt;/a&gt;
  Contribute to the apps and tools you use
&lt;/h3&gt;

&lt;p&gt;Give back to the free open-source tools, websites, and apps you have been using by contributing to them! Here are a few to list-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/freeCodeCamp/freeCodeCamp"&gt;FreeCodeCamp&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/facebook/react"&gt;React&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/microsoft/vscode"&gt;Vscode&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/vuejs/vue"&gt;Vue&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vercel/next.js"&gt;Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tailwindlabs/tailwindcss"&gt;TailwindCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;p&gt;Since this is the month of hacktoberfest, here are 2 websites to find open source projects participating in hacktoberfest-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://hacktoberfest-projects.vercel.app/"&gt;Hacktoberfest projects&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This site lets you find projects based on a preferred language and even search for projects!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4tCVcGNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633573307634/pbHazdYLZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4tCVcGNt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633573307634/pbHazdYLZ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;**&lt;a href="https://hacktosearch.vercel.app/"&gt;Hacktosearch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Search for projects you can contribute to by topics and languages. This is a great tool for finding more personalized projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4hWtdjpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633573762264/3M1BjiJj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4hWtdjpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633573762264/3M1BjiJj0.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found some great projects to contribute to from these resources. &lt;/p&gt;

&lt;p&gt;What else do you use to find great projects? Let me know in the comments ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.avneesh.tech/what-is-open-source"&gt;What is Open Source and how to get started?&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.avneesh.tech/how-to-contribute-to-an-open-source-project"&gt;How to contribute to an open-source project and make a PR?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React timeline animation component</title>
      <author>Alex Kashuba</author>
      <pubDate>Thu, 07 Oct 2021 10:10:09 +0000</pubDate>
      <link>https://dev.to/akashuba/react-timeline-animation-component-6h2</link>
      <guid>https://dev.to/akashuba/react-timeline-animation-component-6h2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ozg5QmlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lihj5p7el615ih3a5vf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ozg5QmlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lihj5p7el615ih3a5vf.gif" alt="timeline animation"&gt;&lt;/a&gt;&lt;br&gt;
Hi! &lt;br&gt;
In this post, I'd like to introduce a react component, that was designed for animating the timelines and the scroll-dependent animations. &lt;/p&gt;

&lt;p&gt;Firstly I try to find existing solutions, but they work with a solid timeline. In my case, I have a banner in the middle of the timeline. It gives me an idea to create a wrapper component for any part of the timeline, sticks or step circles whatever. You can see the full &lt;a href="https://codesandbox.io/s/brave-kepler-fdbzv?file=/src/App.js:2443-2454"&gt;demo&lt;/a&gt; &lt;br&gt;
The component uses the "render prop" pattern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TimelineObserver&lt;/span&gt;
  &lt;span class="nx"&gt;initialColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e5e5e5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;fillColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#53b374&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;handleObserve&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;setObserver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Timeline&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;timeline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;setObserver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setObserver&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we pass a ref to the setObserver function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeline1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeline1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;timeline1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;timeline1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;timeline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to filter already filled elements and prevent further position recalculations, we use the "id" prop.&lt;/p&gt;

&lt;p&gt;In terms of optimization, we use the "IntersectionObserver" to interact with elements only if they are in the viewport. And the requestAnimationFrame to handle the color fill animation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setObservable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;obs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;observableList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;observablesStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also can add a callback that fired after the element will fully cross the middle of the screen. (watch the demo)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someCallback3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setMessage3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Finish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fireConfetti&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;circle3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;someCallback3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is react-timeline-animation at first glance. Be free to suggest ideas or contributions, contacts in github below.&lt;br&gt;
Code can be found in &lt;a href="https://github.com/akashuba/react-timeline-animation"&gt;github&lt;/a&gt;.&lt;br&gt;
And &lt;a href="https://www.npmjs.com/package/react-timeline-animation"&gt;npm&lt;/a&gt; package.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Cryptourism.io on Google Maps</title>
      <author>Cryptourism.io</author>
      <pubDate>Thu, 07 Oct 2021 10:05:34 +0000</pubDate>
      <link>https://dev.to/cryptourism/cryptourism-io-on-google-maps-4j0b</link>
      <guid>https://dev.to/cryptourism/cryptourism-io-on-google-maps-4j0b</guid>
      <description>&lt;p&gt;Cryptourism.io on Google Maps&lt;/p&gt;

&lt;p&gt;And another milestone achieved. Cryptourism.io just got added to the Google Maps and paving the way to complete the Pre-Sale stage.&lt;br&gt;
For more info visit us today &lt;a href="https://cryptourism.io/"&gt;https://cryptourism.io/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#google-marketplace-cryptourism-ctr-blockchain-tourism-mortagua-portugal"&gt;
  &lt;/a&gt;
  google #marketplace #cryptourism #CTR #blockchain #tourism #Mortagua #Portugal
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>Tips to develop an effective logo for the Digital World!
</title>
      <author>Marcus Shires</author>
      <pubDate>Thu, 07 Oct 2021 09:37:01 +0000</pubDate>
      <link>https://dev.to/marcusshires/tips-to-develop-an-effective-logo-for-the-digital-world-fce</link>
      <guid>https://dev.to/marcusshires/tips-to-develop-an-effective-logo-for-the-digital-world-fce</guid>
      <description>&lt;p&gt;Are you here to gain some know-how regarding your next logo? Well, if yes then you would be as enthusiastic about logo making as every other logo designer. So, keep yourself hooked to this blog as you will be guided on some of the best logotypes, their significance and simply how you could design them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-for-a-logo-design"&gt;
  &lt;/a&gt;
  Tools for a Logo Design
&lt;/h2&gt;

&lt;p&gt;The tools that you would need to equip your brand logo with are basically the combination of a beginner level to an advanced level. However, you should not go lost in the ambiguity of various logo builders. In this instance, for each logo type, you have to opt for software that is specified in that particular domain. For example, if you aim to design an anime logo then you have to purchase an &lt;a href="https://logozila.com/logo-maker/anime/"&gt;anime logo creator&lt;/a&gt;. For most that are oblivious, an anime logo can revolutionize your brand as it adds a spark into it that is more engaging and relatable. There is a wide array of anime logo types and designs on the web that you can surf for a blur-free insight!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-sensible-color-pallet"&gt;
  &lt;/a&gt;
  A Sensible Color Pallet
&lt;/h2&gt;

&lt;p&gt;Colors undoubtedly play a massive role in signifying the base of your logo. So, what’s the trick? Well, logo designers are intelligent people who have an eye for details. If you are an emerging learner, then it is important to develop a sense of brand image, and then making it align with the colors. For example, it is common that whenever people refer to earth friendly brands some of the colors hitting their mind would be blue, green and brown. At times, a logo structure is too complex that using multiple colors would make it further complicated. On the contrary, using multiple colors in a basic logo can be as appealing!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-original-for-personalization"&gt;
  &lt;/a&gt;
  Be Original for Personalization
&lt;/h2&gt;

&lt;p&gt;While it’s great to get inspired, there is a fine line between copying and duplicating someone’s work rather than getting mere inspiration. If you are new to the market and striving for customization then investing into highly innovative and advanced logo generators with qualities of artificial intelligence. This will make you learn immensely and at the same time serve you with endless ideas, that won’t require you to pressurize your thoughts in case you are facing a creative block. One of the best tricks of dealing with this is to merge different inspirations that should be something you aspire to achieve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-go-overboard-with-everything"&gt;
  &lt;/a&gt;
  Don’t go overboard with everything
&lt;/h2&gt;

&lt;p&gt;Do you know why some of the brands are successful today while the rest aren’t? It is majorly because they are well-recognized and well established worldwide. And ultimately the credits go to an exceptional logo! Why don’t you check it on your end? Just close your eyes and ask yourself about any top 3 logos clicking your mind first. There are chances that the simplest yet attractive logos will make space in your head. For many reasons, the retention of those logos is more than any other logo that is composed with multiple elements. This however shouldn’t be confused with the idea that you should limit the use of tools; you definitely can do that but the proportion should be within the range.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-of-shapes"&gt;
  &lt;/a&gt;
  Use of shapes
&lt;/h2&gt;

&lt;p&gt;Shapes come in different sizes, perimeters, and dimensions. So when you are using them you should emphasize whether they make sense, especially with the ideas that you have brainstormed. For example, you are using a triangle while being clueless about the concept of using it in your logo. On the positive side though, shapes are illusionary objects that can bring an ultimate glistening effect in your logo. More than anything else, you are never curbing with options in shapes, the range is as wide as it gets depending on your pick.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-the-right-steps-at-the-right-time"&gt;
  &lt;/a&gt;
  Follow the right steps at the right time!
&lt;/h2&gt;

&lt;p&gt;If you are moving through a descending order with your logo designing, then you better stop. This is because choosing the template first and then drafting your logo is not the right idea. There are specific steps for everything that you aim to do and therefore, you have to follow that pathway. As you do so, your success is ensured for the brand. So the first step to be taken for the logo design is to hunt for the tool. Once you do so, experiment and explore the interfaces of the software. Upon that, you have to find a template that is similar to your draft that you had already practiced and saved on other apps. Next, you have to import it on the software and edit it, bring required changes and see where alterations are required. It is always recommended to check with your team before sending it to the final client. So before you reach that stage, download the logo and see if the colors are right, and the pixels are also appropriate, only then you should forward it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-sum-up"&gt;
  &lt;/a&gt;
  To Sum Up
&lt;/h2&gt;

&lt;p&gt;You would only know what the best logo in the world is, as you will find it worth admiration from your clients and the target audience. Just implement these and your brand can reach skies of success. &lt;/p&gt;

</description>
      <category>design</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Drum Kit using HTML, CSS, and Javascript</title>
      <author>Divyamcm</author>
      <pubDate>Thu, 07 Oct 2021 08:53:01 +0000</pubDate>
      <link>https://dev.to/divyamcm/drum-kit-using-html-css-and-javascript-9ha</link>
      <guid>https://dev.to/divyamcm/drum-kit-using-html-css-and-javascript-9ha</guid>
      <description>&lt;p&gt;========================================&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1eO-HgkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595460/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/background_image_bq4d1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1eO-HgkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595460/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/background_image_bq4d1e.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dear Reader,&lt;/p&gt;

&lt;p&gt;How about building drum kit on your own virtually with the help of some scripting language?Sounds cool right! Let’s start building a simple drum kit using HTML, CSS, and Javascript that runs in a browser which will play the sound when the user press on particular key on the keyboard.&lt;/p&gt;

&lt;p&gt;Folder Structure of the project&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;em&gt;index.html — contains the HTML layout which defines the element structure that would be shown on the page.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;images folder — contains .jpg images used in our project.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;sounds folder — contains . wav files used in our project.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;style.css — contains CSS code for styling. Using CSS we can style the different portions to make it more visually appealing.&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#html-layout"&gt;
  &lt;/a&gt;
  HTML Layout
&lt;/h1&gt;

&lt;p&gt;Open VSCode and create the basic HTML structure in an &lt;strong&gt;index.html&lt;/strong&gt; file by ! and then pressing tab. Give the &lt;strong&gt;title&lt;/strong&gt; as ‘Drum Kit*&lt;em&gt;’&lt;/em&gt;&lt;em&gt;. Link **style.css&lt;/em&gt;* to the created HTML file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;title&amp;gt;Drum Kit&amp;lt;/title&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;link rel=”stylesheet” href=”style.css”&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Inside the body, Create a div element with the class of &lt;strong&gt;keys&lt;/strong&gt; which will wrap all the drum kit keys used in our application.Inside the div class we have another set of div’s with a class of &lt;strong&gt;key.&lt;/strong&gt; Now each one of these keys here has a sound associated with it. For every key on the keyboard when we do key up or key down action, there is going to be something called the &lt;strong&gt;key code&lt;/strong&gt; that is associated with that key. For ex: key code of &lt;em&gt;‘A’&lt;/em&gt; is 65.&lt;/p&gt;

&lt;p&gt;In our project, we are using &lt;strong&gt;&lt;em&gt;‘A’, ‘S’, ‘D’, ‘F’, ‘G’ ‘H’, ‘J’, ‘K’, ‘L’&lt;/em&gt;&lt;/strong&gt; keys  to play the sounds of the drum kit. When we press any of the above keys on the keyboard then we’re going to play the corresponding audio element.For example when we press key &lt;strong&gt;&lt;em&gt;‘A’ (_Keycode ‘65’&lt;/em&gt;)_&lt;/strong&gt;  on keyboard we’re going to check if that was the &lt;strong&gt;&lt;em&gt;‘A’&lt;/em&gt;&lt;/strong&gt; Key then we’re going to play the corresponding audio that also has the same &lt;strong&gt;data-key&lt;/strong&gt; and we’re going to find the key &lt;strong&gt;div&lt;/strong&gt; element,add a class of &lt;strong&gt;playing&lt;/strong&gt; so it will animate itself on in.&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;what is this data-key?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;data-*&lt;/code&gt; attribute is used to store custom data private to the page or application.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;data-*&lt;/code&gt; attribute gives us the ability to embed custom data attributes on all HTML elements.&lt;/p&gt;

&lt;p&gt;The stored (custom) data can then be used in the page’s JavaScript to create a more engaging user experience&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;data-*&lt;/code&gt; attribute consist of two parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; The attribute name should not contain any uppercase letters, and must be at least one character long after the prefix “data-”. In our case it is &lt;strong&gt;data-key.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt; The attribute value can be any string. In our case value is a number which represents keycode.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the HTML code,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div class=”keys”&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div data-key=”65" class=”key”&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;kbd&amp;gt;A&amp;lt;/kbd&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;span class=”sound”&amp;gt;clap&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;audio data-key=”83" src=”sounds/hihat.wav”&amp;gt;&amp;lt;/audio&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--548p0nMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595459/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/HTML_code_y0u80e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--548p0nMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595459/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/HTML_code_y0u80e.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;index.html&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#css-styling"&gt;
  &lt;/a&gt;
  CSS Styling
&lt;/h1&gt;

&lt;p&gt;CSS is used to style the different portions and make it more visually appealing.Experiment on color, background, font-family, margin and font size you want to give to the body,heading and the keys.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ReAixCM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595459/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/CSS_1_phawta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ReAixCM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595459/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/CSS_1_phawta.png" alt=""&gt;&lt;/a&gt;style.css&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we press any of these keys &lt;strong&gt;&lt;em&gt;‘A’, ‘S’, ‘D’, ‘F’, ‘G’ ‘H’, ‘J’, ‘K’, ‘L’&lt;/em&gt;&lt;/strong&gt; on keyboard then let’s do some animation on key &lt;strong&gt;div&lt;/strong&gt; element . On key press from the keyboard the corresponding key &lt;strong&gt;div&lt;/strong&gt; element on the UI should scale a bit and the border should be changed to yellow with shadow which means we have to change the existing property value.This transition should happen on key down(key press)and we will use &lt;strong&gt;CSS transitions&lt;/strong&gt; which allows you to change property values smoothly, over a given duration.&lt;/p&gt;

&lt;p&gt;we will define the property values that has to be changed in &lt;strong&gt;playing&lt;/strong&gt; class which will get added to the key &lt;strong&gt;div&lt;/strong&gt; element on key down action using Javascript function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vLZ7ZpSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595459/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/CSS_2_p5qdni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vLZ7ZpSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595459/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/CSS_2_p5qdni.png" alt=""&gt;&lt;/a&gt;&lt;em&gt;style.css&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-logic"&gt;
  &lt;/a&gt;
  Javascript logic
&lt;/h1&gt;

&lt;p&gt;The logic of the player is defined inside the &lt;strong&gt;script&lt;/strong&gt; tag.Our first goal is to listen to the key down event and call &lt;strong&gt;playSound&lt;/strong&gt; function. We are passing the event object to the function where event object holds all kinds of info like what key was actually hit which also contains the &lt;strong&gt;keycode&lt;/strong&gt;.Take an example, we press &lt;strong&gt;keycode 65&lt;/strong&gt; (‘A’) on the keyboard. Next, we are finding out is there an &lt;strong&gt;audio&lt;/strong&gt; element on the page that has a &lt;strong&gt;data-key&lt;/strong&gt; of 65 for that we are going to use &lt;strong&gt;document.querySelector()&lt;/strong&gt; to select an audio element where it has a &lt;strong&gt;data — key&lt;/strong&gt; same as &lt;strong&gt;e.keycode.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;window.addEventListener(‘keydown’, playSound);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function playSound(e) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const audio = document.querySelector(`audio[data-key=”${e.keyCode}”]`);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In a similar way, find out is there an &lt;strong&gt;div&lt;/strong&gt; element on the page that has a &lt;strong&gt;data&lt;/strong&gt;-&lt;strong&gt;key&lt;/strong&gt; of 65 for that we are going to use &lt;strong&gt;document.querySelector()&lt;/strong&gt; to select an &lt;strong&gt;div&lt;/strong&gt; element where it has a &lt;strong&gt;data — key&lt;/strong&gt; same as &lt;strong&gt;e.keycode&lt;/strong&gt;. The returned element is assigned to a constant variable called &lt;strong&gt;key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const key = document.querySelector(`div[data-key=”${e.keyCode}”]`);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If &lt;strong&gt;audio&lt;/strong&gt; element is not present i.e If the pressed key on the keyboard don’t have an audio element associated with it then &lt;strong&gt;return&lt;/strong&gt; in other words statement stops the execution of a function.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if (!audio) return;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are going to add the &lt;strong&gt;playing&lt;/strong&gt; class on the &lt;strong&gt;div&lt;/strong&gt; element which is assigned to constant variable &lt;strong&gt;key .&lt;/strong&gt; This &lt;strong&gt;playing&lt;/strong&gt; class will add animation to the &lt;strong&gt;div&lt;/strong&gt; element of the corresponding key pressed as mentioned in CSS section before.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;key.classList.add(‘playing’);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next we are going to the play the audio. Before playing the audio we will&lt;br&gt;&lt;br&gt;
rewind it to the start of the element so that if you hit key in succession over and over again it will just rewind it to the start. So let’s say,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;audio.currentTime = 0;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;audio.play();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;we are done with &lt;strong&gt;playSound&lt;/strong&gt; function*&lt;em&gt;.&lt;/em&gt;* As we already discussed,we are adding the animation once the listed key is pressed but we also want to remove the animation in sometime. The requirement is to add the animation only during the key press. we can use a &lt;strong&gt;transitionend&lt;/strong&gt; event that will fire when the element has stopped animating itself on in*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const keys = Array.from(document.querySelectorAll(‘.key’));&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;keys.forEach(key =&amp;gt; key.addEventListener(‘transitionend’, removeTransition));&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now, what is the transitionend event?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we already discussed,when the listed key is pressed the &lt;strong&gt;div&lt;/strong&gt; element CSS will be transitioned to scale a bit and the border will be changed to yellow with shadow.The &lt;code&gt;**transitionend**&lt;/code&gt; event is fired when a CSS transition has completed. Once the &lt;strong&gt;transitionend&lt;/strong&gt; event occurs we will call &lt;strong&gt;removeTransition&lt;/strong&gt; function by passing event object. The event object contains a propertyName called ‘&lt;strong&gt;transform&lt;/strong&gt;’ which indicates the transform has finished. If the transition is completed then we will remove the animation by removing the class &lt;strong&gt;playing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function removeTransition(e) {&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if (e.propertyName !== ‘transform’) return;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;e.target.classList.remove(‘playing’);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wIEsCX8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595459/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/javascript_evpd7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wIEsCX8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/thewebdev/image/upload/v1633595459/JavaScript/MEDIUM%2520BLOG%25202_Drumkit/javascript_evpd7c.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are done!! Time to run the code and check the results.&lt;br&gt;
 &lt;a href="https://www.youtube.com/watch?v=fqnWbdOG2-U"&gt;https://www.youtube.com/watch?v=fqnWbdOG2-U&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the complete source code &lt;a href="https://github.com/Divyamcm/Projects/tree/main/Drumkit"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for your interest.&lt;/p&gt;

&lt;p&gt;-Divya M C M&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Blogue: A blogging site for Vue</title>
      <author>Sam Zhang</author>
      <pubDate>Thu, 07 Oct 2021 08:50:45 +0000</pubDate>
      <link>https://dev.to/samzhangjy/blogue-a-blogging-site-for-vue-3p60</link>
      <guid>https://dev.to/samzhangjy/blogue-a-blogging-site-for-vue-3p60</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-blogue"&gt;
  &lt;/a&gt;
  What is Blogue?
&lt;/h2&gt;

&lt;p&gt;Blogue is a light-weight blogging site for Vue.js.&lt;/p&gt;

&lt;p&gt;I developed it for a reason: there isn't really a simple blogging tool for Vue. VuePress works, but it's to complicated. So for that purpose, I developed this light-weight blogging site for Vue: Blogue.&lt;/p&gt;

&lt;p&gt;You can host it on any server that has Nodejs and Vue installed. Actually, you even don't need them if you already built your blog on your own laptop: just host the HTML and JavaScript files directly!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#behind-blogue"&gt;
  &lt;/a&gt;
  Behind Blogue
&lt;/h3&gt;

&lt;p&gt;At first, I just wanted to build a lightweight blog for myself. However, I found that if I publish the source code and write a tutorial on how to use it, developers can spend less time on building the blog but more time writing the posts.&lt;/p&gt;

&lt;p&gt;So I decided to make Blogue open source. And that's why this post appeared.&lt;/p&gt;

&lt;p&gt;Of course, Blogue is not quite complete: there might be bugs, and the UI might not work properly. However, from my own usage, there aren't any issues till now. I will try to add some more features and make Blogue more customizable in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-blogue"&gt;
  &lt;/a&gt;
  How to use Blogue?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: Make sure you have &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://vuejs.org/"&gt;Vue 2&lt;/a&gt; installed before continuing.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;You need to config your blog before using.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#general-configuration"&gt;
  &lt;/a&gt;
  General Configuration
&lt;/h4&gt;

&lt;p&gt;Write your configuration for the entire blog in &lt;code&gt;/posts/data/config.json&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"config"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Your username"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"avatarPath"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Your avatar image url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Your blog description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Your name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"blogTitle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Your blog title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"blogStartYear"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;started.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Used&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;copyrights&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;footer.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Contact method"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Contact information, such as your email address"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Contact link, such as `mailto:email@example.com`"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please fill in all information above, or Blogue might crash.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projects-configuration"&gt;
  &lt;/a&gt;
  Projects Configuration
&lt;/h4&gt;

&lt;p&gt;First, provide a list of your projects needed to be shown on your blog. Configure them in &lt;code&gt;/posts/data/projects.json&lt;/code&gt;. E.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"projects"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Project name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"des"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Project description"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"img"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Project cover image url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Project homepage url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"github"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Project GitHub url"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, please fill in all information above.&lt;/p&gt;

&lt;p&gt;Then, please create a file called &lt;code&gt;project-des.md&lt;/code&gt; under &lt;code&gt;/posts/data/&lt;/code&gt;. In this markdown file, you can write some text which will be shown in the projects page above the projects. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;Below are my personal projects made in my free time.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can write in MarkDown format.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-yourself-configuration"&gt;
  &lt;/a&gt;
  About Yourself Configuration
&lt;/h4&gt;

&lt;p&gt;You needed to provide a MarkDown file to display on the &lt;code&gt;about&lt;/code&gt; page. Write something about your self in the Markdown file &lt;code&gt;/posts/data/about.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to use Markdown!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-posts"&gt;
  &lt;/a&gt;
  Writing Posts
&lt;/h3&gt;

&lt;p&gt;You can write your posts in Markdown format, under &lt;code&gt;/posts/&lt;/code&gt;. The file structure of &lt;code&gt;/posts/&lt;/code&gt; is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;posts                             
├─ data                           
│  ├─ about.md                    
│  ├─ config.json                 
│  ├─ posts.json                  
│  ├─ project-des.md              
│  └─ projects.json               
├─ post-1-title.md                      
├─ post-2-title.md              
├─ post-3-title.md                  
└─ post-4-title.md  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, you need to do one more configuration on the posts: &lt;code&gt;/posts/data/posts.json&lt;/code&gt;. Write down the posts you wanted to display on the blog and provide some information about it. Such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Blogue: A simple blogging site for Vue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;title&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"Vue.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"project"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"frontend"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tags&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cover"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://dev-to-uploads.s3.amazonaws.com/i/95lvt23xz4ozer5byomi.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;cover&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;url&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"des"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"There isn't really a simple blogging tool for Vue. VuePress works, but it's to complicated. So for that purpose, I developed this light-weight blogging site for Vue: Blogue."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;description&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;publish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;date&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Year&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Month&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Day&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"blogue"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;stored&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;under&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`/posts/`&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the &lt;code&gt;id&lt;/code&gt; of a post is its &lt;strong&gt;filename&lt;/strong&gt;, &lt;strong&gt;NOT&lt;/strong&gt; its title. Wrong configuration can led to a 404 response for a mis-configured post. Be sure to check the configuration!&lt;/p&gt;

&lt;p&gt;So, every time you wanted to publish a post, you need to add it to the configuration file. Otherwise, it won't show up at all in your blog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publish-your-blog"&gt;
  &lt;/a&gt;
  Publish your blog
&lt;/h3&gt;

&lt;p&gt;If this is the first time you publish your blog, you need to install Blogue dependencies first.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn&lt;/code&gt; (or &lt;code&gt;npm install&lt;/code&gt; for &lt;code&gt;npm&lt;/code&gt;) to install Blogue dependencies.&lt;/p&gt;

&lt;p&gt;Currently, Blogue supports only GitHub pages to publish automatically. You need to build and publish your site manually if you wanted to host on other platforms.&lt;/p&gt;

&lt;p&gt;First, create a repository named &lt;code&gt;&amp;lt;your-github-username&amp;gt;.github.io&lt;/code&gt;, replacing &lt;code&gt;&amp;lt;your-github-username&amp;gt;&lt;/code&gt; with your real GitHub username.&lt;/p&gt;

&lt;p&gt;Then, run &lt;code&gt;source publish.sh&lt;/code&gt; to build and publish your blog to GitHub pages. After running this script, your blog should be live on &lt;code&gt;&amp;lt;your-github-username&amp;gt;.github.io&lt;/code&gt; in a few minutes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-your-blog-locally"&gt;
  &lt;/a&gt;
  Running your blog locally
&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;yarn serve&lt;/code&gt; (or &lt;code&gt;npm run serve&lt;/code&gt; if you're using &lt;code&gt;npm&lt;/code&gt;) to start a hot-reloading development server on &lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-your-blog-manually"&gt;
  &lt;/a&gt;
  Building your blog manually
&lt;/h3&gt;

&lt;p&gt;If you're not using GitHub Pages as your hosting provider, you'll need to build your site manually.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;yarn build&lt;/code&gt; (or &lt;code&gt;npm run build&lt;/code&gt; for &lt;code&gt;npm&lt;/code&gt;) to build Blogue.&lt;/p&gt;

&lt;p&gt;After building, the &lt;code&gt;/dist&lt;/code&gt; directory contains the build assets for your blog (HTML, CSS, JavaScript, etc).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last words
&lt;/h2&gt;

&lt;p&gt;Please star or fork &lt;a href="https://github.com/samzhangjy/Blogue"&gt;Blogue&lt;/a&gt; on GitHub to support me!&lt;/p&gt;

&lt;p&gt;As always, feel free to report issues and open a PR to help the development!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Have you sell anything using Gumroad?</title>
      <author>Madza</author>
      <pubDate>Thu, 07 Oct 2021 08:42:48 +0000</pubDate>
      <link>https://dev.to/madza/have-you-sell-anything-using-gumroad-5e8d</link>
      <guid>https://dev.to/madza/have-you-sell-anything-using-gumroad-5e8d</guid>
      <description>&lt;p&gt;Selling digital products like e-books, courses, videos and graphics can be an awesome source of passive income.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/"&gt;Gumroad&lt;/a&gt; provides a great platform for that and is one of the most popular choices among the developers.&lt;/p&gt;

&lt;p&gt;Have you sold anything with it? Do you make a living of it?&lt;br&gt;
Share your links below! 👇&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>gumroad</category>
    </item>
    <item>
      <title>When was the last time you asked for a raise? </title>
      <author>Madza</author>
      <pubDate>Thu, 07 Oct 2021 08:41:21 +0000</pubDate>
      <link>https://dev.to/madza/when-was-the-last-time-you-asked-for-a-raise-b1o</link>
      <guid>https://dev.to/madza/when-was-the-last-time-you-asked-for-a-raise-b1o</guid>
      <description>&lt;p&gt;Getting a raise keeps you motivated, lifts your self-esteem and adapts your income to all the increasing living costs.&lt;/p&gt;

&lt;p&gt;When was the last time you asked for a raise?&lt;/p&gt;

&lt;p&gt;Also, what arguments do you usually use in the discussion and have you ever switched the jobs due to not getting the raise?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>business</category>
      <category>finances</category>
    </item>
    <item>
      <title>How to Observe EventBridge Events with AppSync Subscriptions</title>
      <author>Benoît Bouré</author>
      <pubDate>Thu, 07 Oct 2021 08:18:28 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-observe-eventbridge-events-with-appsync-subscriptions-2l0o</link>
      <guid>https://dev.to/aws-builders/how-to-observe-eventbridge-events-with-appsync-subscriptions-2l0o</guid>
      <description>&lt;p&gt;I recently came across David Boyne's blog post: &lt;a href="https://www.boyney.io/blog/2021-09-06-debug-eventbridge-with-postman"&gt;How to Observe EventBridge Events with Postman and WebSockets&lt;/a&gt;. What a great idea! But, then I thought:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I can do the same with AppSync Subscriptions!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had to try! Here is what I achieved:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-basic-appsync-api"&gt;
  &lt;/a&gt;
  Building the basic AppSync API
&lt;/h2&gt;

&lt;p&gt;The idea was simple. I needed the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AppSync API&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Mutation&lt;/code&gt; that receives events from EventBridge&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Subscription&lt;/code&gt; that is attached to the aforementioned Mutation&lt;/li&gt;
&lt;li&gt;An EventBridge rule that sends events to the AppSync Mutation (target)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also wanted to be able to filter events I was interested in. Here, I thought about two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Filter the events in the EventBridge rule.&lt;/li&gt;
&lt;li&gt;Send &lt;strong&gt;all&lt;/strong&gt; events to AppSync and use AppSync to filter them, thanks to &lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/aws-appsync-real-time-data.html#using-subscription-arguments"&gt;subscription arguments&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I went with the second approach. It would give me more flexibility to filter the events at query time instead of having to re-deploy each time I wanted a new filter.&lt;/p&gt;

&lt;p&gt;Here is the GraphQL Schema I created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;sendEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EventBridgeMessageInput&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EventBridgeMessage&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;detailType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EventBridgeMessage&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;sendEvent&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EventBridgeMessage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;detailType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AWSDateTime&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AWSJSON&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EventBridgeMessageInput&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;detailType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AWSDateTime&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AWSJSON&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also needed to setup the Mutation. I used a &lt;code&gt;NONE&lt;/code&gt; data source for that and a simple mapping template that just returns the received payload.&lt;/p&gt;

&lt;p&gt;All done! Now, by executing the &lt;code&gt;sendEvent&lt;/code&gt; Mutation, it gets delivered to the subscription! 🙌&lt;/p&gt;

&lt;p&gt;All that was left to do was to configure EventBrige and set the Mutation as a target.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-attempt-api-destinations"&gt;
  &lt;/a&gt;
  First attempt: API Destinations
&lt;/h2&gt;

&lt;p&gt;My first attempt was to use API Destinations. I followed this &lt;a href="https://aws.amazon.com/blogs/mobile/appsync-eventbridge/"&gt;awesome tutorial&lt;/a&gt; and defined my &lt;em&gt;Input Path&lt;/em&gt; and &lt;em&gt;Input Transformer&lt;/em&gt; rules which looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;InputPathsMap:
  version: $.version
  id: $.id
  detailType: $.detail-type
  source: $.source
  account: $.account
  time: $.time
  region: $.region
  resources: $.resources
  detail: $.detail
InputTemplate: |
  {
    "query": "mutation SendEvent($event: EventInput!) { sendEvent(event: $event) { version id detailType source account time region resources detail } }",
    "operationName": "SendEvent",
    "variables": {
      "event": {
        "version": "&amp;lt;version&amp;gt;",
        "id": "&amp;lt;id&amp;gt;",
        "detailType": "&amp;lt;detailType&amp;gt;",
        "source": "&amp;lt;source&amp;gt;",
        "account": "&amp;lt;account&amp;gt;",
        "time": "&amp;lt;time&amp;gt;",
        "region": "&amp;lt;region&amp;gt;",
        "resources": "&amp;lt;resources&amp;gt;",
        "detail": &amp;lt;detail&amp;gt;
      }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, that didn't work! 😞&lt;/p&gt;

&lt;p&gt;The problem is that in EventBridge, the &lt;code&gt;detail&lt;/code&gt; attribute is an arbitrary JSON object which could have any shape. This is the reason I used an &lt;code&gt;AWSJSON&lt;/code&gt; type in my GraphQL schema (I wanted to receive any event). The problem is that AppSync expects the JSON to be &lt;strong&gt;stringified&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;After some investigation, I could not find any way for EventBridge to stringify JSONs. So, that was a dead end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-lambda-to-the-rescue"&gt;
  &lt;/a&gt;
  AWS Lambda to the rescue!
&lt;/h2&gt;

&lt;p&gt;If EventBridge cannot do it, Lambda surely can! So, I wrote a simple lambda that receives the event, reformats it and calls the AppSync endpoint. I then just configured the Lambda as an EventBridge target. (&lt;a href="https://github.com/bboure/appsync-eventbridge-subscriber/blob/master/src/processEvent.ts"&gt;See the code here&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✍️ Note: I also added an IAM authentication method to the AppSync API that Lambda can use to call the Mutation (in addition to the API key used by the subscription).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All set! Now, running the following subscription:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MySubscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;detailType&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And sending an event into Event Bridge&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws events put-events &lt;span class="nt"&gt;--entries&lt;/span&gt; &lt;span class="s1"&gt;'[{"DetailType": "my.detail.type", "Source": "my.source", "Detail": "{\"foo\": \"bar\"}"}]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"subscribe"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"resources"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"region"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"us-east-1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"source"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my.source"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"detailType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my.detail.type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"detail"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;}"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works! 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-power-of-appsync-subscriptions"&gt;
  &lt;/a&gt;
  The power of AppSync subscriptions
&lt;/h2&gt;

&lt;p&gt;One of the great features of AppSync subscriptions is that you can specify which changes you are interested in at query time. You can do that by adding arguments to the subscription endpoint. Whatever value you pass in the input, you will only receive changes that &lt;a href="https://blog.purple-technology.com/lessons-learned-aws-appsync-subscriptions/"&gt;match the Mutation's response fields values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, I can now do queries such as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="c"&gt;## Will match events with detail-type = "my.detail" only&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;detailType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my.detail"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;detailType&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;## Will match events with source = "my.source" only&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my.source"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;detailType&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;## Will match events with detail-type = "my.detail" AND source = "my.source"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;detailType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my.detail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my.source"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;detailType&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isn't that great? I can now listen to exactly the events I am interested in 🔥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-amp-gotchas"&gt;
  &lt;/a&gt;
  Limitations &amp;amp; gotchas
&lt;/h2&gt;

&lt;p&gt;Unfortunately, this technique has some limitations. It &lt;strong&gt;cannot&lt;/strong&gt; filter events based on the content of the &lt;code&gt;detail&lt;/code&gt; field. This is because the data comes stringified.&lt;/p&gt;

&lt;p&gt;Also, filters only work when the values &lt;strong&gt;exactly&lt;/strong&gt; match. You cannot use advanced filters such as &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;anything-but&lt;/code&gt;, etc. These are filters supported by eventBridge, &lt;strong&gt;not&lt;/strong&gt; by AppSync.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that any advanced filter can still be achieved through filters at the EventBridge rule level, of course!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post, I showed you how we can observe EventBridge events through AppSync subscriptions and how we can even filter them at query time. Although its usage is somewhat limited, it can probably still be very helpful when you only need to filter on the &lt;code&gt;detailType&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; values, for example. You can easily use it to debug/test your application.&lt;/p&gt;

&lt;p&gt;Find the full code of this implementation &lt;a href="https://github.com/bboure/appsync-eventbridge-subscriber/"&gt;on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A big thanks to &lt;a href="https://twitter.com/boyney123"&gt;David Boyne&lt;/a&gt; for the inspiration!&lt;/p&gt;

</description>
      <category>appsync</category>
      <category>aws</category>
      <category>eventbridge</category>
      <category>observability</category>
    </item>
    <item>
      <title>Building a Tailwind CSS dropdown component</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Thu, 07 Oct 2021 08:09:48 +0000</pubDate>
      <link>https://dev.to/themesberg/building-a-tailwind-css-dropdown-component-ban</link>
      <guid>https://dev.to/themesberg/building-a-tailwind-css-dropdown-component-ban</guid>
      <description>&lt;p&gt;Tailwind CSS is a utility-first framework that I've been using for most of my projects this year and I can't find any good reason to go back to other frameworks such as Bootstrap or Foundation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sMvkSxQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0onrdip3s2ha181vfe2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sMvkSxQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0onrdip3s2ha181vfe2h.png" alt="Tailwind CSS dropdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite that I did found a pretty big drawback because Tailwind CSS does not provide a base set of components that you can use to get build websites even faster.&lt;/p&gt;

&lt;p&gt;That is why I started a tutorial series here on the DEV community on how to build the most commonly used web components using the utility classes from Tailwind CSS and Vanilla JavaScript.&lt;/p&gt;

&lt;p&gt;Previously I showed you how to build &lt;a href="https://dev.to/themesberg/building-tailwind-css-card-components-12c5"&gt;Tailwind CSS card components&lt;/a&gt; and today I'll show something more advanced: how to build a Tailwind CSS dropdown element.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-dropdown"&gt;
  &lt;/a&gt;
  Tailwind CSS dropdown
&lt;/h2&gt;

&lt;p&gt;First things first, we need to build the HTML. Let's create a button and use the styles from this &lt;a href="https://flowbite.com/docs/components/buttons/"&gt;Tailwind CSS button&lt;/a&gt; from the Flowbite library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2.5 text-center inline-flex items-center" type="button"&amp;gt;Dropdown button &amp;lt;svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's also set up the HTML of the menu itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2.5 text-center inline-flex items-center" type="button" data-dropdown-toggle="dropdown"&amp;gt;Dropdown button &amp;lt;svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/button&amp;gt;

&amp;lt;!-- Dropdown menu --&amp;gt;
&amp;lt;div class="hidden bg-white text-base z-50 list-none divide-y divide-gray-100 rounded shadow my-4"&amp;gt;
    &amp;lt;div class="px-4 py-3"&amp;gt;
      &amp;lt;span class="block text-sm"&amp;gt;Bonnie Green&amp;lt;/span&amp;gt;
      &amp;lt;span class="block text-sm font-medium text-gray-900 truncate"&amp;gt;name@flowbite.com&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;ul class="py-1" aria-labelledby="dropdown"&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href="#" class="text-sm hover:bg-gray-100 text-gray-700 block px-4 py-2"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href="#" class="text-sm hover:bg-gray-100 text-gray-700 block px-4 py-2"&amp;gt;Settings&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href="#" class="text-sm hover:bg-gray-100 text-gray-700 block px-4 py-2"&amp;gt;Earnings&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href="#" class="text-sm hover:bg-gray-100 text-gray-700 block px-4 py-2"&amp;gt;Sign out&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we've already applied the styles to the menu and we use the &lt;code&gt;hidden&lt;/code&gt; class to hide it by default, since we only want it shown when we click on the button.&lt;/p&gt;

&lt;p&gt;If we include the Flowbite library's JavaScript into our project via CDN or NPM, we'll be able to use data attributes to connect the button with the dropdown menu.&lt;/p&gt;

&lt;p&gt;Include the following JavaScript before the closing of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://unpkg.com/@themesberg/flowbite@latest/dist/flowbite.bundle.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now let's add the &lt;code&gt;data-dropdown-toggle="dropdown"&lt;/code&gt; attribute to the button, where &lt;code&gt;dropdown&lt;/code&gt; is the id of the dropdown menu element's id.&lt;/p&gt;

&lt;p&gt;We also have to add &lt;code&gt;id="dropdown"&lt;/code&gt; to the dropdown menu element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2.5 text-center inline-flex items-center" type="button" data-dropdown-toggle="dropdown"&amp;gt;Dropdown button &amp;lt;svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/button&amp;gt;

&amp;lt;!-- Dropdown menu --&amp;gt;
&amp;lt;div class="hidden bg-white text-base z-50 list-none divide-y divide-gray-100 rounded shadow my-4" id="dropdown"&amp;gt;
    &amp;lt;div class="px-4 py-3"&amp;gt;
      &amp;lt;span class="block text-sm"&amp;gt;Bonnie Green&amp;lt;/span&amp;gt;
      &amp;lt;span class="block text-sm font-medium text-gray-900 truncate"&amp;gt;name@flowbite.com&amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;ul class="py-1" aria-labelledby="dropdown"&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href="#" class="text-sm hover:bg-gray-100 text-gray-700 block px-4 py-2"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href="#" class="text-sm hover:bg-gray-100 text-gray-700 block px-4 py-2"&amp;gt;Settings&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href="#" class="text-sm hover:bg-gray-100 text-gray-700 block px-4 py-2"&amp;gt;Earnings&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;
        &amp;lt;a href="#" class="text-sm hover:bg-gray-100 text-gray-700 block px-4 py-2"&amp;gt;Sign out&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final result should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sMvkSxQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0onrdip3s2ha181vfe2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sMvkSxQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0onrdip3s2ha181vfe2h.png" alt="Tailwind CSS dropdown element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whenever you click on the button it will open the dropdown menu and when clicking outside it will close it. You can use this element anywhere on your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS component library
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/dropdowns/"&gt;Tailwind CSS dropdown component&lt;/a&gt; is part of a larger and open-source component library called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mOvO0Zwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ia4maxl3cxnbottfoeks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOvO0Zwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ia4maxl3cxnbottfoeks.png" alt="Tailwind CSS components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more about how you can get started with this &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Tailwind CSS component library&lt;/a&gt; by following the quickstart guide from the online documentation.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>opensource</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Configure Elasticsearch in Magento 2</title>
      <author>WebMeridian</author>
      <pubDate>Thu, 07 Oct 2021 08:02:20 +0000</pubDate>
      <link>https://dev.to/web_meridian/how-to-configure-elasticsearch-in-magento-2-fjo</link>
      <guid>https://dev.to/web_meridian/how-to-configure-elasticsearch-in-magento-2-fjo</guid>
      <description>&lt;p&gt;The search engine of any eCommerce platform is arguably the essential part of the store. With an efficient search engine like Elasticsearch, customers can quickly locate everything they need on your platform. This boosts a positive customer experience and leads to an increase in sales. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-elasticsearch"&gt;
  &lt;/a&gt;
  What is Elasticsearch?
&lt;/h2&gt;

&lt;p&gt;Elasticsearch is an open-source analytics and search engine. It is fast, efficient, and powerful enough to handle many searches at a time. It works by storing your data centrally and mapping them effectively. This enables it to locate and retrieve data efficiently and at high speed. It is even capable of full-text searches on an HTTPS interface. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#header-why-use-elasticsearch-in-magento-2"&gt;
  &lt;/a&gt;
  Header Why use Elasticsearch in Magento 2?
&lt;/h2&gt;

&lt;p&gt;If you want to boost the efficiency of your eCommerce store, you need a powerful search engine. It helps customers go around the store quickly and enables them to reach your products with ease. If you are an existing eCommerce store owner, you will understand that a laggy search engine would frustrate customers and reduce the number of products they open in your store. This will lead to the low conversion of the visitors to the site. However, with Elasticsearch, you get faster and more efficient searches. &lt;br&gt;
Reindex&lt;br&gt;
This is the synchronisation of data in Elasticsearch. It is used because data in Elasticsearch is always secondary. It works by rebuilding an index by using the stored data in the table of the index. In turn, it leads to the replacement of the old copy of the index. For Magento users, there are two different ways of creating the reindex. They are the full reindex and partial reindex. Partial reindex focuses only on the products that have been changed. Full reindex gives the developer freedom to trigger it manually via code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#category-view-page"&gt;
  &lt;/a&gt;
  Category View Page
&lt;/h2&gt;

&lt;p&gt;A category view page allows you to sort the products in your store into groups. The feature will enable customers to filter the products they want to locate. Thanks to Elasticseach, Magento can quickly get the information of matching products to the query. Here, Magento sends the customers request to Elasticsearch. This is to find products with matching IDs. From the Elasticsearch results, Magento loads the products from the MySQL database. Then the products are displayed on the interface for the viewer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-search"&gt;
  &lt;/a&gt;
  Advanced Search
&lt;/h2&gt;

&lt;p&gt;In as much as there is a quick search feature, an advanced search feature is also necessary. This feature is similar to the quick search feature, but it comes with some added search options. Here, the customer can add more search details such as price, size, colour, and more. It produces a finer and well-detailed search result. It works perfectly for users that know the specific product they are looking for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#header-graphql"&gt;
  &lt;/a&gt;
  Header GraphQL
&lt;/h2&gt;

&lt;p&gt;GraphQL is one of the APIs used in Magento. It gives access to external systems to fetch Magento data. It also lets users request what they want in a single query. It works on a similar principle of searching for products directly at the store. Here clients are also allowed to request a unique data specification of their own. Here, bandwidth is saved and waterfall requests are reduced. Here, only the exact fields you need will bring results. The reduction in data transmitted helps to boost the performance of the site. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#header-search-suggestions"&gt;
  &lt;/a&gt;
  Header Search Suggestions
&lt;/h2&gt;

&lt;p&gt;Search Suggestions helps users to find results better. It does not interfere with the leading search in any way. What it does is offer suggestions to the primary search of the user. It usually happens for a few reasons. One reason is as a result of a typographical error by the user. In this scenario, it displays the “Did you mean...” on the results page. It helps the user realise their mistake and show the correct product at the same time. In other scenarios, it happens when they are no results from the query. It then offers alternatives that are similar to the query and also available in the database. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#easy-steps-to-configure-magento-2-elasticsearch"&gt;
  &lt;/a&gt;
  Easy Steps to Configure Magento 2 Elasticsearch
&lt;/h2&gt;

&lt;p&gt;Configuring Elasticsearch to work with Magneto is relatively easy. However, you have to follow the steps mentioned below to get the best results. Have a look at the steps. &lt;/p&gt;

&lt;p&gt;This is the final step. Here, you are to turn on search suggestions and set up the number of suggestions and their results. Also, turn on search recommendations and set up the number of recommendations and their results. Then save your configuration. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;p&gt;So far, it is clear that Elasticsearch is a powerful tool that you need in your store. It is fast, efficient, and very reliable. However, the best part is that you can implement Elasticsearch with our full-stack web services. You can reach&lt;br&gt;
&lt;a href="https://webmeridian.org/"&gt;out to us&lt;/a&gt;, and our professionals will help you get it all done!&lt;br&gt;
&lt;a href="https://webmeridian.org/blog/"&gt;New Magento &amp;amp; eCommerce Insights in our Blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>magento</category>
      <category>ecommerce</category>
    </item>
  </channel>
</rss>
