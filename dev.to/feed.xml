<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why React Hooks Exist?</title>
      <author>Ritesh Kumar</author>
      <pubDate>Mon, 23 Aug 2021 11:02:48 +0000</pubDate>
      <link>https://dev.to/wordssaysalot/why-react-hooks-exist-4gn4</link>
      <guid>https://dev.to/wordssaysalot/why-react-hooks-exist-4gn4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;React.js is the most widely used JavaScript library for front-end developers at the moment. It is utilized by developers and corporations all around the world as an open-source project.&lt;/p&gt;

&lt;p&gt;Hooks are one of the most useful features of react. When interacting with the state, hooks allowed us to employ functional components instead of class-based components. Aside from built-in hooks, React also allows us to create our own custom hooks.&lt;/p&gt;

&lt;p&gt;In this post, We'll look at what React Hooks are and why they're important.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#problem-"&gt;
  &lt;/a&gt;
  Problem :
&lt;/h1&gt;

&lt;p&gt;Before react 16.8 (16 Feb 2019) developers were limited to use class-based components if they want to maintain state in the component, and functional components were used for only those components, which don't require any state.&lt;/p&gt;

&lt;p&gt;This results in inconsistency through the app and there were several issues with class-based components.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#issues-"&gt;
  &lt;/a&gt;
  Issues :
&lt;/h1&gt;

&lt;p&gt;The use of two different types of components created these major issues:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inconsistency through the app&lt;/li&gt;
&lt;li&gt;If someone wants to add states in functional&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;the component that requires the whole state to be converted into the class-based component.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To use class-based components proper 'bind' has to be maintained.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h1&gt;

&lt;p&gt;Hooks actually doesn't solve the problem related to class-based components.&lt;/p&gt;

&lt;p&gt;I just give some extra power to a functional component that allows developers to do anything with a functional component that they were already doing with class-based components.&lt;/p&gt;

&lt;p&gt;Hooks let you always use functional components instead of having to constantly switch between functions, classes, higher-order components, and render props.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h1&gt;

&lt;p&gt;Now most developer uses functional component with hooks because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They can add remove states as they require.&lt;/li&gt;
&lt;li&gt;Hooks simplifies the development process and maintains consistency through the app.&lt;/li&gt;
&lt;li&gt;You no longer need to struggle with 'bind'&lt;/li&gt;
&lt;li&gt;Functional components became more versatile than class-based.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h1&gt;

&lt;p&gt;Finally, I can guarantee you that learning React Hooks is not difficult. when I first started using react, I wasn't a big fan of hooks. But now I'm completely enamored with it.¬†&lt;br&gt;
It may appear challenging at first, but as long as we focus on the fundamentals and learn how each component works, we will be able to incorporate this¬†feature with ease.¬†&lt;br&gt;
Wait a minute, if you want to learn the basics of react hooks, go through this  &lt;a href="https://reactjs.org/docs/hooks-overview.html"&gt;documentation&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;In the next article of this series, I'll go through some of my favorite instances of custom hooks and how to use them in your own apps. Until then, stay tuned.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h1&gt;

&lt;p&gt;As always, any questions or suggestions, please feel free to leave a response or  &lt;a href="https://twitter.com/dewdropxD"&gt;tweet me&lt;/a&gt;  üê¶! Good luck and happy coding!!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>An Introduction to Semantic Versioning</title>
      <author>Niall Maher</author>
      <pubDate>Mon, 23 Aug 2021 11:01:04 +0000</pubDate>
      <link>https://dev.to/nialljoemaher/an-introduction-to-semantic-versioning-26n9</link>
      <guid>https://dev.to/nialljoemaher/an-introduction-to-semantic-versioning-26n9</guid>
      <description>&lt;p&gt;Semantic versioning is a system to help developers, project managers, and consumers have a universal way of understanding the release process. Semantic versioning is some guidelines so that we can understand what is happening in a release.&lt;/p&gt;

&lt;p&gt;More importantly for us coders, semantic versioning will let us know if a change will break our code.&lt;/p&gt;

&lt;p&gt;You will find most of the major projects in the wild on GitHub that use Semantic Versioning.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#major-version"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Major Version&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;There are two times to increment this version when there is a new&lt;/p&gt;

&lt;p&gt;When we increment this version, it means that there are backwards-incompatible changes in this release. The API has changed and may contain breaking changes for users of the API.&lt;/p&gt;

&lt;p&gt;Reset both minor and patch versions after the major number has been incremented.&lt;/p&gt;

&lt;p&gt;If we were making a major release for &lt;code&gt;1.23.11&lt;/code&gt; it would become &lt;code&gt;2.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minor-version"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Minor version&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We increment the minor version when adding new features or functionality that do not break or change the existing API. When you increase the minor version, reset the patch version to zero.&lt;/p&gt;

&lt;p&gt;Use this when you are making non-breaking changes that are not a bug fix.&lt;/p&gt;

&lt;p&gt;If we were making a minor release for &lt;code&gt;1.23.11&lt;/code&gt;, it would become &lt;code&gt;1.24.0&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#patch-version"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Patch version&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Patch versions are used for bug fixes. This is when there are no functionality changes in the updates. There is no limit to these numbers, and we do not need to reset any other numbers.&lt;/p&gt;

&lt;p&gt;If we were making a patch release for &lt;code&gt;1.23.11&lt;/code&gt;, it would become &lt;code&gt;1.23.12&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prereleases-and%C2%A0build"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pre-releases and¬†build&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We won't dive deeply into this syntax as there are many different ways to use it and warrant an article of its own, but I do want you to be aware of how to read pre-releases. But mainly, this is used when we wish to release software informally to some users for testing purposes. These are called pre-releases.&lt;/p&gt;

&lt;p&gt;Pre-releases may not be stable or compatible with the previous major, minor and patch versions that they imply.&lt;/p&gt;

&lt;p&gt;As an example, &lt;code&gt;1.23.11-beta.1&lt;/code&gt;, our pre-release identifier has two parts. The tag "beta" and a version "1". You might also see some build data also appended, such as the commit from which the build came from, eg. &lt;code&gt;1.23.11-beta.1+nialljoemaher-2bf235&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a deeper dive, I have added a couple of links below to some fantastic articles that helped me understand the pre-release tagging.¬†&lt;/p&gt;




&lt;p&gt;For the official Semantic Versioning guide‚Ää-‚Ää&lt;a href="https://semver.org/"&gt;https://semver.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A more detailed guide and awesome article‚Ää-‚Ää&lt;a href="https://developerexperience.io/practices/semantic-versioning"&gt;https://developerexperience.io/practices/semantic-versioning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another one I liked while doing some research‚Ää-‚Ää&lt;a href="https://devopedia.org/semantic-versioning"&gt;https://devopedia.org/semantic-versioning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding! üíú&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/nialljoemaher"&gt;Follow me on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Subscribe on &lt;a href="https://www.youtube.com/c/Cod%C3%BACommunity"&gt;Cod√∫ Community&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Sharpen your Ruby: Part 2</title>
      <author>Eric The Coder</author>
      <pubDate>Mon, 23 Aug 2021 10:49:51 +0000</pubDate>
      <link>https://dev.to/ericchapman/sharpen-your-ruby-part-2-42km</link>
      <guid>https://dev.to/ericchapman/sharpen-your-ruby-part-2-42km</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP, and Ruby. By far Ruby is my favorite programming language. Together let start a journey and revisit our Ruby foundations.&lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;You want to sharpen your Ruby?&lt;/h2&gt; 

&lt;p&gt;In this series, we will start from the beginning and will discover every aspect of Ruby one step at a time. &lt;/p&gt;

&lt;p&gt;Each post will include some theory but also exercise and solution.&lt;/p&gt;

&lt;p&gt;If you have any questions/comments or your are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Strings Declaration&lt;/h2&gt;

&lt;p&gt;String variable represents any text data. A key point for the syntax of strings declaration is that they have to be enclosed in single or double-quotes. The program will throw an error if they are not wrapped inside quotation marks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Bad&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Mike&lt;/span&gt; &lt;span class="c1"&gt;# Will throw an error&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Mike"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Number can also be represent as string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;text_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"45"&lt;/span&gt;
&lt;span class="n"&gt;number_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable text_age is a string variable. It cannot be processed in Ruby as a number like be used in addition or multiplication etc. &lt;/p&gt;

&lt;p&gt;The number_age variable is an integer number so that variable can be part of any Ruby number manipulations methods.&lt;/p&gt;

&lt;h2&gt;String concatenation&lt;/h2&gt;

&lt;p&gt;String can be add together like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'World'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="c1"&gt;# Hello World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Attention. You cannot add string and number&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' is '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' years old'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="c1"&gt;# ERROR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That code returns an error because Ruby cannot add number to string. &lt;/p&gt;

&lt;p&gt;To make this code work, we have to convert the age variable to string using the to_s method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' is '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' years old'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="c1"&gt;# Mike is 25 years old&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;String Interpolation&lt;/h2&gt;

&lt;p&gt;String interpolation is replacing placeholders with values in a string literal. &lt;/p&gt;

&lt;p&gt;For string interpolation to work. String has to be wrapped inside a double quotation mark. Here an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 
&lt;span class="c1"&gt;# Hello Mike&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the last code snippet, the message variable will be processed by Ruby before assignment. The #{name} placeholder will be replaced by the containing variable value.&lt;/p&gt;

&lt;p&gt;Inside placeholder #{} any Ruby expression can be used...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Your age in 2 years will be &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;# Your age in 2 years will be 47&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;In Ruby everything is an object!&lt;/h2&gt;

&lt;p&gt;You maybe have ear this before. What does that mean for us the developer?&lt;/p&gt;

&lt;p&gt;First, what is an object? An object refers to a particular instance of a class with its own methods and properties.&lt;/p&gt;

&lt;p&gt;In Ruby types are defined as classes, so for example, if you have a string variable, it's an instance of the String class.&lt;/p&gt;

&lt;p&gt;For example, take this variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This 'message' variable will be dynamically typed by Ruby as a string. That string is a class. So message is an instance of the class string. &lt;/p&gt;

&lt;p&gt;In Ruby the String class already has many methods to help do basic and advance string manipulations.&lt;/p&gt;

&lt;p&gt;That also means that the 'message' variable will inherit all the methods and properties of his parent class (String).&lt;/p&gt;

&lt;p&gt;Example of method call (syntax: object.method)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="c1"&gt;# MIKE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'upcase' is a method of the String class. This method converts all the string characters to uppercase.&lt;/p&gt;

&lt;p&gt;For now, if you don't understand all that class instance thing THAT'S NORMAL! We will cover class and object later. &lt;/p&gt;

&lt;p&gt;The only thing we need to understand for now is that variables like a string variable have methods we can call to automatically do some stuff.&lt;/p&gt;

&lt;p&gt;Here are some string methods available in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="c1"&gt;# MIKE&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
&lt;span class="c1"&gt;# mike&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt;
&lt;span class="c1"&gt;# Mike&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
&lt;span class="c1"&gt;# ekiM&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;
&lt;span class="c1"&gt;# 11&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
&lt;span class="c1"&gt;# true&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="s1"&gt;'ke'&lt;/span&gt;
&lt;span class="c1"&gt;# true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look how those methods names are self-descriptive. We do not need any comments and any explanation to understand what each method does... Welcome to Ruby world!&lt;/p&gt;

&lt;h2&gt;More String methods&lt;/h2&gt;

&lt;p&gt;Now that we understand the basics we will start to learn more advanced string methods. &lt;/p&gt;

&lt;h3&gt;The sub and gsub method&lt;/h3&gt;

&lt;p&gt;Ruby has a handy string method to replace part of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The sky is blue
puts message.sub '&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="s1"&gt;', '&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;# The sky is red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the method call has no parentheses to enclose parameters. In Ruby those are optional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Valid&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;

&lt;span class="c1"&gt;# Also valid&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The convention is to omit the parentheses unless the code seems clearer with them.&lt;/p&gt;

&lt;p&gt;The sub method replaces the first occurrence. The gsub method replaces all the occurrences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The sky is blue and the car is also blue'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;
&lt;span class="c1"&gt;# The sky is red and the car is also red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Strip method&lt;/h3&gt;

&lt;p&gt;Remove white space before or after a string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'  Welcome to Ruby World  '&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;
&lt;span class="c1"&gt;# 'Welcome to Ruby World'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Chaining methods&lt;/h3&gt;

&lt;p&gt;It is possible to chain string methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'   Mike Taylor '&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Paul'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
&lt;span class="c1"&gt;# paul taylor&lt;/span&gt;
&lt;span class="c1"&gt;# In that specific situation, using the parentheses make the code easier to read&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercise&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input the user name and store the result in a variable&lt;/li&gt;
&lt;li&gt;Input the user password and store the result in a variable&lt;/li&gt;
&lt;li&gt;Remove password before or after white space&lt;/li&gt;
&lt;li&gt;Convert the password to lowercase&lt;/li&gt;
&lt;li&gt;Display user name and password but replace the password letter 'e' with a star
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter user name: _Mike
Enter user password: _secret

The user name is Mike and his password is s*cr*t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user password: '&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The user name is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and his password is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tuned for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on Twitter. &lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>10 Awesome Youtube channels to learn UI/UX</title>
      <author>Olubisi Idris Ayindeüí°</author>
      <pubDate>Mon, 23 Aug 2021 10:49:17 +0000</pubDate>
      <link>https://dev.to/olanetsoft/10-awesome-youtube-channels-to-learn-ui-ux-mp1</link>
      <guid>https://dev.to/olanetsoft/10-awesome-youtube-channels-to-learn-ui-ux-mp1</guid>
      <description>&lt;p&gt;We've all overheard debates about a product's outstanding 'UX' or a website's awful 'UI' while walking through the hip streets of the world's IT capitals. Is it a code you'll never be able to decipher?&lt;/p&gt;

&lt;p&gt;I usually publish a curated list of resources. Still, I recently discovered some excellent YouTube channels for learning UI/UX to aid in the development of your design skills, and I hope you find them beneficial.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I am not connected with any of these channels; I am simply sharing this information for educational purposes to assist anyone struggling to understand UI/UX.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#mizko"&gt;
  &lt;/a&gt;
  Mizko
&lt;/h3&gt;

&lt;p&gt;As a designer and entrepreneur, he is 29 years old. Throughout his career, he led strategy and design for more than 70 firms, assisting them in raising more than $300 million. He also worked as an in-house designer, lead designer, and independent contractor (freelancer), finally growing Mizko Media into a ten-person agency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCZJkZy008cQjqkJeKpJu8tA"&gt;https://www.youtube.com/channel/UCZJkZy008cQjqkJeKpJu8tA&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jesse-showalter"&gt;
  &lt;/a&gt;
  Jesse Showalter
&lt;/h3&gt;

&lt;p&gt;Every week, Jesse Showalter posts Digital Design &amp;amp; Web Development videos focused on tools, approaches, projects, and more to assist creative people in creating beautiful things. Subscribe to beneficial training videos if you're an aspiring Web Designer, UI Designer, or Front-End Developer who wants to make beautiful things with pixels and code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/JesseAtomic"&gt;https://www.youtube.com/user/JesseAtomic&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flux"&gt;
  &lt;/a&gt;
  Flux
&lt;/h3&gt;

&lt;p&gt;Ran Segall, a designer, and entrepreneur keeps a personal vlog called Flux. On the show, He talks about his experiences as a designer and a business owner, including his successes, setbacks, and lessons learned.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCN7dywl5wDxTu1RM3eJ_h9Q"&gt;https://www.youtube.com/channel/UCN7dywl5wDxTu1RM3eJ_h9Q&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#malewicz"&gt;
  &lt;/a&gt;
  Malewicz
&lt;/h3&gt;

&lt;p&gt;This channel will address UX/UI misconceptions, design best practices and techniques, productivity, and how to improve design and life through numerous life-hacks and routines he employs to keep motivated, calm, and productive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UC_Dq0oUEi7uXhdUX8prunbw"&gt;https://www.youtube.com/channel/UC_Dq0oUEi7uXhdUX8prunbw&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cuberto-design"&gt;
  &lt;/a&gt;
  Cuberto Design
&lt;/h3&gt;

&lt;p&gt;Cuberto is an international company that works with clients from all over the world. In eight years, they have participated in more than 300 projects. This channel shares tips and tricks for UX/UI design, illustrations, and animations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCzestFrXpwSGCfcbO2pObwQ"&gt;https://www.youtube.com/channel/UCzestFrXpwSGCfcbO2pObwQ&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ajampsmart"&gt;
  &lt;/a&gt;
  AJ&amp;amp;Smart
&lt;/h3&gt;

&lt;p&gt;They are a Berlin-based product design and innovation studio! They often collaborate with some of the world's largest corporations to help them create better products faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCeB_OpLspKJGiKv1CYkWFFw"&gt;https://www.youtube.com/channel/UCeB_OpLspKJGiKv1CYkWFFw&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mike-locke"&gt;
  &lt;/a&gt;
  Mike Locke
&lt;/h3&gt;

&lt;p&gt;Senior UI/UX designer with strong skills in Visual UI Design, User Experience, Usability, Interaction Design, Information Architecture, Research &amp;amp; Analytics, XHTML/CSS, and Strategy &amp;amp; Planning. He is recognized as a creative leader with a diverse skillset that includes everything from design to front-end programming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/mlwebco"&gt;https://www.youtube.com/user/mlwebco&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saptarshi-prakash"&gt;
  &lt;/a&gt;
  Saptarshi Prakash
&lt;/h3&gt;

&lt;p&gt;Hey there! This is Saptarshi (a.k.a. Sapta), an engineer turned self-taught Product Designer based in Bangalore, India. In the last six years, he has worked with some of the very well-known startups of India and learned anything and everything needed to create unique experiences for the users. Psychology, Visuals, Motion, Illustrations, Writing, to name a few. He is also an active speaker, teacher, and community builder and has delivered over 70 talks, workshops, and webinars on design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/saptarshipr"&gt;https://www.youtube.com/user/saptarshipr&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#punit-chawla"&gt;
  &lt;/a&gt;
  Punit Chawla
&lt;/h3&gt;

&lt;p&gt;He is an experienced UX/UI designer who hails from India. Subscribe to his channel for videos about web design, user interface design, Adobe Xd tutorials, Figma tutorials, design news, and more! Every Monday and Thursday, he posts fantastic design films.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCkfdb6tUwVoGXPPzY7H6hUg"&gt;https://www.youtube.com/channel/UCkfdb6tUwVoGXPPzY7H6hUg&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#careerfoundry"&gt;
  &lt;/a&gt;
  CareerFoundry
&lt;/h3&gt;

&lt;p&gt;CareerFoundry is a premier online school focused on teaching the next generation of technology talent. They provide advanced courses in UX Design, Web Development, Data Analytics, and UI Design, collaborating with the top professionals in each sector to develop the most comprehensive learning materials that promise to take you from novice to job-ready (guaranteed) in 6-10 months.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/careerfoundry"&gt;https://www.youtube.com/user/careerfoundry&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-futur"&gt;
  &lt;/a&gt;
  The Futur
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/thefuturishere"&gt;https://www.youtube.com/c/thefuturishere&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Oh, yes. I'm a software engineer that teaches, writes, and builds beautiful apps, but I also have a strong sense of user experience, and I hope you find these resources helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtube.com"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Cover image by @&lt;a href="https://dev.to@saviomartin66"&gt;Savio Martin&lt;/a&gt;](&lt;a href="https://slickr.vercel.app/app"&gt;https://slickr.vercel.app/app&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'd love to connect with you at &lt;a href="https://twitter.com/olanetsoft"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/olubisi-idris-ayinde-05727b17a/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/Olanetsoft"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in my next blog article. Take care!!!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>ux</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>Permission denied for laravel 8 storage logs
 [solved] - 2021</title>
      <author>ssbhattarai</author>
      <pubDate>Mon, 23 Aug 2021 10:43:10 +0000</pubDate>
      <link>https://dev.to/613596/permission-denied-for-laravel-8-storage-logs-solved-2021-12ld</link>
      <guid>https://dev.to/613596/permission-denied-for-laravel-8-storage-logs-solved-2021-12ld</guid>
      <description>&lt;p&gt;If you are a laravel developer you may run into the &lt;strong&gt;laraval.log permission error that is **The stream or file "log file location" could not be opened: failed to open stream: Permission denied&lt;/strong&gt;. I found this error mostly while deploying laravel in VPS (virtual private network) in digitalocean droplet.&lt;/p&gt;

&lt;p&gt;To solve this error there is only one command which is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo chown -R www-data:www-data /var/www/{laravel_project_name}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your storage permission error must be solved by now.&lt;/p&gt;

&lt;p&gt;Happy Coding!!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Sending A POST Request In Python</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 23 Aug 2021 10:41:59 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/sending-a-post-request-in-python-3mgh</link>
      <guid>https://dev.to/ayabouchiha/sending-a-post-request-in-python-3mgh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-post-request"&gt;
  &lt;/a&gt;
  What's POST request
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;: is a request that is used for sending information or data to a specific server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install requests
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sending-post-requests-in-python"&gt;
  &lt;/a&gt;
  Sending POST requests in Python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://jsonplaceholder.typicode.com/posts'&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'buy new mouse'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'I need to buy a new mouse !'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'userId'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json; charset=UTF-8'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 201
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# b'{\n  "title": "buy new mouse",\n  "body": "I need to buy a new mouse !",\n  "userId": 5,\n  "id": 101\n}'
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# {
#   "title": "buy new mouse",
#   "body": "I need to buy a new mouse !",
#   "userId": 5,
#   "id": 101
# }
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;class 'str'&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# https://jsonplaceholder.typicode.com/posts
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# application/json; charset=utf-8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# utf-8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tutorials-to-learn-requests"&gt;
  &lt;/a&gt;
  tutorials to learn requests
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=tb8gHvYlCFs"&gt;Python Requests Tutorial: Request Web Pages, Download Images, POST Data, Read JSON, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iv-Uc8d3tDs&amp;amp;"&gt;Requests in Python | Python Request Tutorial | Python Tutorial For Beginners | Edureka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-requests-tutorial/"&gt;Python Requests Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-requests/"&gt;python-requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/all-you-need-to-know-about-python-json-module-5ef0"&gt;All You Need To Know About Python JSON Module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Random Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Math Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7"&gt;5 Useful Python String Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>SE Internship Log[4]</title>
      <author>Ruheni Alex</author>
      <pubDate>Mon, 23 Aug 2021 10:16:49 +0000</pubDate>
      <link>https://dev.to/ruheni/se-internship-log-4-5hc5</link>
      <guid>https://dev.to/ruheni/se-internship-log-4-5hc5</guid>
      <description>&lt;p&gt;Hello there internet stranger, üëãüèΩ&lt;/p&gt;

&lt;p&gt;Welcome to the 5th edition of the Software Engineering(SE) Log.&lt;/p&gt;

&lt;p&gt;This week was frustrating. I spent the week trying to debug a test that failed 1-3 times a day (a cron job that runs on an hourly basis). &lt;/p&gt;

&lt;p&gt;When does it fail? Anytime of the day.&lt;/p&gt;

&lt;p&gt;Why does it fail? The response data is 0 instead of 20(expectation).&lt;/p&gt;

&lt;p&gt;Why is it 0? No frickin' clue. ü•≤&lt;/p&gt;

&lt;p&gt;Hopefully, the upcoming week will be better than the previous one.&lt;/p&gt;

&lt;p&gt;Enough with the rant. This week, I learned a bunch of stuff ‚Äì rethinking performance, &lt;a href="https://nextjs.org/docs/advanced-features/measuring-performance"&gt;Next.js measuring performance&lt;/a&gt;, &lt;a href="https://github.com/maticzav/label-sync"&gt;label-sync&lt;/a&gt;, and being a proactive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-skills"&gt;
  &lt;/a&gt;
  Technical Skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#rethinking-performance"&gt;
  &lt;/a&gt;
  Re-thinking performance
&lt;/h3&gt;

&lt;p&gt;This won't be about bloated JavaScript bundles or optimizing . I'm not an expert.&lt;/p&gt;

&lt;p&gt;This week, I got a comment on a PR for a task I was working on that I was making an expensive API call ‚Äì introspecting the user's database checking for any tables.&lt;/p&gt;

&lt;p&gt;No big deal? Well, it is. This operation would happen every time a user opens a project.&lt;/p&gt;

&lt;p&gt;This changed how I think about API requests from the frontend in terms of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cost&lt;/li&gt;
&lt;li&gt;User experience.&lt;/li&gt;
&lt;li&gt;Compute required to make handle a task happen ‚Äì on the API, and the user's resources which in this case is their database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just because you can do something doesn't mean you should. Compute resources are finite. Evaluate the impact of the requests you make and how you can cut down on what isn't necessary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs-measuring-performance"&gt;
  &lt;/a&gt;
  Next.js Measuring performance
&lt;/h3&gt;

&lt;p&gt;Vercel provides analytics on application performance for different stacks ‚Äì Next.js included.&lt;/p&gt;

&lt;p&gt;Next.js can provides tooling that allows you to measure analytics and use your own custom analytics.&lt;/p&gt;

&lt;p&gt;The metrics that Next.js allows you to track include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://web.dev/vitals/"&gt;Web Vitals&lt;/a&gt; - these metrics measure and report performance of your application to ensure you're delivering a great user experience. &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/docs/advanced-features/measuring-performance#custom-metrics"&gt;Custom Metrics&lt;/a&gt; - this are specific to Next.js measuring time taken for a page to hydrate and render:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Next.js-hydration&lt;/code&gt; - time take for a page to start and finish hydrating&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Next.js-route-change-to-render&lt;/code&gt; - time taken for a page to render a page after navigating to the route&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Next.js-render&lt;/code&gt; - time taken for a page to finish rendering after a route change&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° Fun learning project idea - build your own/ custom tool to measure these analytics. The aim would be to learn how to store time-series data, average the data, and visualize the data. Chrome devtools and &lt;a href="https://web.dev/measure"&gt;Web.dev&lt;/a&gt; doesn't measure custom Next.js metrics.&lt;br&gt;
You can see how well my site is performing ü§°&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tsakuo2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33921841/130419796-0257f6c5-a2ea-4f58-943d-0f13d32599dc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tsakuo2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33921841/130419796-0257f6c5-a2ea-4f58-943d-0f13d32599dc.png" alt="ruheni.dev analytics"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In your Next.js application, edit/ create &lt;code&gt;_app.js&lt;/code&gt; in the &lt;code&gt;/pages&lt;/code&gt; directory. Define the &lt;code&gt;reportWebVitals&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reportWebVitals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;metric&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;metric&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FCP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// handle results - console.log or send to an API (same case for other metrics)&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LCP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CLS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TTFB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next.js-hydration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next.js-route-change-to-render&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next.js-render&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These analytics provide insights as to how user experience is in your web application, parts of your application that are not doing too well, and tips on improving performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#labelsync"&gt;
  &lt;/a&gt;
  üß∞  Label-sync
&lt;/h3&gt;

&lt;p&gt;Label-sync is a handy tool that makes managing GitHub labels across multiple repositories delightful.&lt;/p&gt;

&lt;p&gt;Why do you need it? You don't.&lt;/p&gt;

&lt;p&gt;The default GitHub labels are good. But, they could be better.&lt;/p&gt;

&lt;p&gt;GitHub labels provide meta-data for a GitHub issue. This could be the context of a given problem, for example backend, frontend, bug, test, improvement, feature, whether an issue requires discussion, time, and the list goes on on what this could be.&lt;/p&gt;

&lt;p&gt;Label-sync allows you to define affected repositories, labels, theme for the labels, descriptions, group labels etc.&lt;/p&gt;

&lt;p&gt;It requires some configuration when starting out. However, managing issues in your projects will be a delight.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a personal opinion.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soft-skills"&gt;
  &lt;/a&gt;
  Soft Skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#being-proactive"&gt;
  &lt;/a&gt;
  Being Proactive
&lt;/h3&gt;

&lt;p&gt;Being proactive involves taking responsibility of your life. It involves anticipating problems, seeking solutions and giving it your best shot.&lt;/p&gt;

&lt;p&gt;The alternative to being proactive is reactive - responding to tasks/life as they stream in. &lt;/p&gt;

&lt;p&gt;You are responsible for your own growth, including your career.&lt;/p&gt;

&lt;p&gt;Go out there, ace it and have a great week!&lt;/p&gt;

&lt;p&gt;Till next week. ‚úåüèΩ&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>frontend</category>
      <category>tools</category>
    </item>
    <item>
      <title>Best VS Code extensions you should use as a Developer.</title>
      <author>Aman Singh</author>
      <pubDate>Mon, 23 Aug 2021 09:56:36 +0000</pubDate>
      <link>https://dev.to/aman2221/best-vs-code-extensions-you-should-use-as-a-developer-5815</link>
      <guid>https://dev.to/aman2221/best-vs-code-extensions-you-should-use-as-a-developer-5815</guid>
      <description>&lt;h2&gt;
  &lt;a href="#top-12-vs-code-extensions-which-makes-your-life-much-easier-as-a-developer"&gt;
  &lt;/a&gt;
  Top 12 VS Code extensions which makes your life much easier as a developer.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-auto-rename-tag"&gt;
  &lt;/a&gt;
  1. Auto Rename Tag
&lt;/h3&gt;

&lt;p&gt;Automatically rename paired HTML/XML tag, same as Visual Studio IDE does.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggnwTTaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16sb5yikizh40p9uy56y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggnwTTaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16sb5yikizh40p9uy56y.jpg" alt="auto"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-babel-es6es7"&gt;
  &lt;/a&gt;
  2. Babel ES6/ES7
&lt;/h3&gt;

&lt;p&gt;This is a standalone version of the syntax given with vscode-flowtype. Improves majorly on the grammar distributed by default with vscode. This language extension brings no changes to the intellisense.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6gDye7Vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65ux78tz8s72v808kngr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6gDye7Vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/65ux78tz8s72v808kngr.png" alt="babel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=dzannotti.vscode-babel-coloring"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-bracket-pair-colorizer"&gt;
  &lt;/a&gt;
  3. Bracket Pair Colorizer
&lt;/h3&gt;

&lt;p&gt;This extension allows matching brackets to be identified with colours. The user can define which characters to match, and which colours to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7prkpiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8jwdtua5kzvaig0rpqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7prkpiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8jwdtua5kzvaig0rpqa.png" alt="bra"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-code-spell-checker"&gt;
  &lt;/a&gt;
  4. Code Spell Checker
&lt;/h3&gt;

&lt;p&gt;A basic spell checker that works well with camelCase code.&lt;br&gt;
The goal of this spell checker is to help catch common spelling errors while keeping the number of false positives low.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--95lsaULs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69c98888lhyecpot8hpl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--95lsaULs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69c98888lhyecpot8hpl.jpg" alt="images"&gt;&lt;/a&gt;&lt;br&gt;
Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-es7-reactreduxgraphqlreactnative-snippets"&gt;
  &lt;/a&gt;
  5. ES7 React/Redux/GraphQL/React-Native snippets
&lt;/h3&gt;

&lt;p&gt;JavaScript and React/Redux snippets in ES7+ with Babel plugin features for VS Code&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-live-server"&gt;
  &lt;/a&gt;
  6. Live Server
&lt;/h3&gt;

&lt;p&gt;Launch a local development server with live reload feature for static &amp;amp; dynamic pages.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HjIcQeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9adtf9npj5d6zf7sb29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HjIcQeN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9adtf9npj5d6zf7sb29.png" alt="live"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-material-icon-theme"&gt;
  &lt;/a&gt;
  7. Material Icon Theme
&lt;/h3&gt;

&lt;p&gt;Get the Material Design icons into your VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLuycUJ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2o74o04q71meugrevful.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLuycUJ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2o74o04q71meugrevful.png" alt="mate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-polacode2020"&gt;
  &lt;/a&gt;
  8. Polacode-2020
&lt;/h3&gt;

&lt;p&gt;Polaroid for your code üì∏.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swxNA8L2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgdex6xc7dzaaiyfpj9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swxNA8L2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgdex6xc7dzaaiyfpj9x.png" alt="polacode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=jeff-hykin.polacode-2019"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-prettier-code-formatter"&gt;
  &lt;/a&gt;
  9. Prettier - Code formatter
&lt;/h3&gt;

&lt;p&gt;Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_VB1ISgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw1f0v5hw3af01x4dan8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_VB1ISgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jw1f0v5hw3af01x4dan8.png" alt="pret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-tabnine"&gt;
  &lt;/a&gt;
  10. Tabnine
&lt;/h3&gt;

&lt;p&gt;Tabnine is the AI code completion tool trusted by millions of developers to code faster with fewer errors. Whether you are a new dev or a seasoned pro, working solo or part of a team.&lt;/p&gt;

&lt;p&gt;![tab]](&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goylocq5j8nufw8cfmsi.jpg"&gt;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goylocq5j8nufw8cfmsi.jpg&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-thunder"&gt;
  &lt;/a&gt;
  11. Thunder
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pNF0eCq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ana4wgj9f2shnlpam9yb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pNF0eCq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ana4wgj9f2shnlpam9yb.jpg" alt="thunder-client-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=Steve-DevOps.thunder-lwc"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-visual-studio-intellicode"&gt;
  &lt;/a&gt;
  12. Visual Studio IntelliCode
&lt;/h3&gt;

&lt;p&gt;The Visual Studio IntelliCode extension provides AI-assisted development features for Python, TypeScript/JavaScript and Java developers in Visual Studio Code, with insights based on understanding your code context combined with machine learning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOlWBq9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h20zql2gbh3tl6gqzsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOlWBq9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h20zql2gbh3tl6gqzsl.png" alt="vscodeinte"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link :  &lt;a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You‚ù§Ô∏èÔ∏è‚ù§Ô∏èÔ∏è&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>vscode</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Improve The Usability Of Password Fields</title>
      <author>Mishacreatrix</author>
      <pubDate>Mon, 23 Aug 2021 09:54:20 +0000</pubDate>
      <link>https://dev.to/mishacreatrix/how-to-improve-the-usability-of-password-fields-1m3f</link>
      <guid>https://dev.to/mishacreatrix/how-to-improve-the-usability-of-password-fields-1m3f</guid>
      <description>&lt;p&gt;Password fields are a necessity if you're designing a login or sign-up form for your application. &lt;/p&gt;

&lt;p&gt;As common as these types of fields are, they can be frustrating to interact with when poorly designed.&lt;/p&gt;

&lt;p&gt;I was recently tasked with improving the usability of the login page on one of our apps at my job. &lt;/p&gt;

&lt;p&gt;To learn more about how to implement these components in a user-friendly way, I spent some time researching.&lt;/p&gt;

&lt;p&gt;From my research, I created a set of mockups that the development team has since implemented across our app ecosystem.&lt;/p&gt;

&lt;p&gt;In this article, I have put together everything I've learned from my research into password fields. &lt;/p&gt;

&lt;p&gt;By reading this article and applying what you learn from it, you will dramatically improve the usability of password fields in your own designs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-components-of-a-password-field"&gt;
  &lt;/a&gt;
  The Components Of A Password Field
&lt;/h2&gt;

&lt;p&gt;Let's start by looking at the components that make up a password field.&lt;/p&gt;

&lt;p&gt;As with most form fields, a password field is made up of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A label that describes the field - Password.&lt;/li&gt;
&lt;li&gt;The input field itself where the user enters their password.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may also see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Confirm Password - An exact duplicate of the password field. By typing your password out twice you'll be sure you've typed the right password and are less likely to forget it. &lt;a href="https://uxmovement.com/forms/why-the-confirm-password-field-must-die/"&gt;Read this article to learn about why this field must die&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Password Hints + Tooltips - If you're on a sign-up screen and the password field has specific requirements, a tooltip or info panel is  displayed so the user can view this information.&lt;/li&gt;
&lt;li&gt;Validation - If the password is entered incorrectly, a validation message appears next to the password field. You may also see an icon appear and the input itself should turn red in color to indicate there is an issue.&lt;/li&gt;
&lt;li&gt;Forgot Password link - Though this is not linked to the password field itself, a forgot password link is usually located next to this field so the user can reset their password.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lHAisW5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lx9utvl5kl43g6o8l3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lHAisW5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lx9utvl5kl43g6o8l3e.png" alt="Components of a password field"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-password-masking"&gt;
  &lt;/a&gt;
  What Is Password Masking?
&lt;/h2&gt;

&lt;p&gt;If you've done some research into the world of password fields you've likely come across the term password masking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Password masking is where the password you type into a password field is 'masked' or hidden behind bullet points or asterisks.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a pretty common practice across password fields. In fact, it's done by default if you use the password input type in HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"pwd"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pwd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Masking passwords ensures your security when typing. It prevents any 'over the shoulder' spies from peeking at your password.&lt;/p&gt;

&lt;p&gt;While there are advantages to password masking, it can also cause some usability problems. We'll look at how to address this in the next section.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#improving-the-usability-of-password-fields"&gt;
  &lt;/a&gt;
  Improving The Usability Of Password Fields
&lt;/h2&gt;

&lt;p&gt;When passwords are masked, the user can't see what's being typed. &lt;/p&gt;

&lt;p&gt;If you can't see your password as you login, you'll be frustrated when you're told your password is incorrect but you're certain it was correct.&lt;/p&gt;

&lt;p&gt;The frustrations caused by this password masking may result in you choosing a simple password in the future. This might be easier to type but in the long run, it's much less secure.&lt;/p&gt;

&lt;p&gt;So how do we actually improve the usability of password fields that use this password masking technique?&lt;/p&gt;

&lt;p&gt;The answer is: we allow the user to toggle the visibility of their password.&lt;/p&gt;

&lt;p&gt;If a user has control over the visibility of their password they can easily check they've typed it correctly. &lt;/p&gt;

&lt;p&gt;This also improves the user's overall experience of using the app because it behaves how the user expects it to.&lt;/p&gt;

&lt;p&gt;What's more, this also removes the need for the confirm password field. Removing this component simplifies the UI, reduces complexity, and removes an unnecessary step for the user.&lt;/p&gt;

&lt;p&gt;OK, so we know what the solution is technically speaking, but how do we actually design and implement it? &lt;/p&gt;

&lt;p&gt;There are actually 2 ways to implement this show/hide password functionality:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;With iconography - usually an eye icon&lt;/li&gt;
&lt;li&gt;With show + hide text&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's look at each possible implementation and see how they work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-iconography-eye-icon"&gt;
  &lt;/a&gt;
  1 Iconography - Eye Icon
&lt;/h3&gt;

&lt;p&gt;This is the implementation I see the most on the websites I visit: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is an eye icon next to or inside the password field. &lt;/li&gt;
&lt;li&gt;When you press it once, your password becomes visible and the eye icon changes.&lt;/li&gt;
&lt;li&gt;When you press it again, your password is masked/hidden again and the eye icon changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While this sounds simple, it's quite surprising how much variation there is with this implementation.&lt;/p&gt;

&lt;p&gt;Take Mailchimp as an example.&lt;/p&gt;

&lt;p&gt;The eye icon is normal when the password is masked (not visible). Then it switches to a crossed-out eye icon when the password is visible. &lt;/p&gt;

&lt;p&gt;This approach indicates the action that's performed when you press the icon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ekjmUsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zm3y59646gdqtergva03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ekjmUsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zm3y59646gdqtergva03.png" alt="Mailchimp Login Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Adobe login screen has the opposite approach.&lt;/p&gt;

&lt;p&gt;In this case, the crossed-out icon is displayed when the password is masked, then it switches to the regular eye icon when the password is visible.&lt;/p&gt;

&lt;p&gt;This approach denotes the current state of the password field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9VN3t2WP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ttf6j14kk7dwe2ti3e2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9VN3t2WP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ttf6j14kk7dwe2ti3e2x.png" alt="Adobe Login Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So which implementation is the correct one?&lt;/p&gt;

&lt;p&gt;Both are correct so long as they are implemented consistently across an app or system. Pick one method and stick with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-show-hide-text"&gt;
  &lt;/a&gt;
  2 Show + Hide Text
&lt;/h3&gt;

&lt;p&gt;While the iconography approach is the most used option, the Show + Hide text approach is more user-friendly. &lt;/p&gt;

&lt;p&gt;It leaves no room for interpretation and is faster to understand.&lt;/p&gt;

&lt;p&gt;Instead of an eye icon and a crossed-out eye icon, you simply replace them with text.&lt;/p&gt;

&lt;p&gt;Google's approach on their login screen is to include a Show password checkbox under the password field. This is a very intuitive approach and probably the most straightforward to implement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JAW0fF9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu0ocdiaal663im595ts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JAW0fF9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu0ocdiaal663im595ts.png" alt="Google Login Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PayPal's approach is to use the text Show and Hide to toggle password visibility:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cSFJQVaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkl2lflbwvm8xzewk3ne.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cSFJQVaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkl2lflbwvm8xzewk3ne.png" alt="PayPal Login Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-option-is-the-best"&gt;
  &lt;/a&gt;
  Which Option Is The Best?
&lt;/h3&gt;

&lt;p&gt;Each option has pros and cons but option 2, the show + hide option, is the easiest to understand and leaves little room for interpretation.&lt;/p&gt;

&lt;p&gt;This is the best option in most cases if you are trying to design something with optimal usability in mind.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I learned a lot from researching this topic and I enjoyed putting this information together. &lt;/p&gt;

&lt;p&gt;With that said, I truly hope you found this article helpful and learned something new as a result.&lt;/p&gt;

&lt;p&gt;If you want to learn about password creation itself in more detail, here's a great article I recommend from NNGroup.com: &lt;a href="https://www.nngroup.com/articles/password-creation/"&gt;Password Creation: 3 Ways To Make It Easier&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have anything you want to add? Do you have any other examples of password fields? Let me know over on Twitter. &lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;This article was originally published over on my website: &lt;a href="https://www.mishacreatrix.com/improve-usability-of-password-fields"&gt;How To Improve The Usability Of Password Fields&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>designtips</category>
      <category>uxdesign</category>
      <category>uidesign</category>
    </item>
    <item>
      <title>5 Project to Master in Python for Beginners</title>
      <author>Ujjwal</author>
      <pubDate>Mon, 23 Aug 2021 09:40:04 +0000</pubDate>
      <link>https://dev.to/ugsep/5-project-to-master-in-python-for-beginners-4blm</link>
      <guid>https://dev.to/ugsep/5-project-to-master-in-python-for-beginners-4blm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As we all know that now a days &lt;strong&gt;Python&lt;/strong&gt; is the one of the most &lt;em&gt;demanding&lt;/em&gt; language in market. A &lt;strong&gt;Programmer&lt;/strong&gt; should learn python to get job easily. So for that you need to enhance your python skills to a good level so you may hire buy someone. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this blog I will told you about &lt;em&gt;5 Project to Master in Python for Beginners&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-data-structure-and-algorithms-visualizer"&gt;
  &lt;/a&gt;
  1. Data Structure and Algorithms Visualizer
&lt;/h2&gt;

&lt;p&gt;As we know that many people face difficulty while learning DSA at beginning. So you create create Stack, Queue, Linked List, BST, Graph, Sort and Search any one of the visualizer which helps you understand the working on the particular Data Structure. As a beginner it is a challenging project for you and after doing this you understand that how a project is developed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-paint-application-in-python"&gt;
  &lt;/a&gt;
  2. Paint Application in Python
&lt;/h2&gt;

&lt;p&gt;Now After doing the #1st Project you have some experience about that how to create project. So now it's time to move one more step forward. Now you should create a Paint application which must contain minimum 10+ 2d shapes,3+ 3d Shapes Fill, Text, Change color, Save as, Open, Pencil, Undo, Redo, Cut, Copy and Paste.&lt;br&gt;
You can add some more feature by your own. This Project help you to enhance your plotting skills + math.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ludo"&gt;
  &lt;/a&gt;
  3. Ludo
&lt;/h2&gt;

&lt;p&gt;As you have gained some more experience and now it time to create your first game. So Ludo is the best game to create in Python. You should create play with friend or play with computer 2,3,4 player&lt;br&gt;
Now this is a little bit difficult to create it because it needs accurate plotting and movement. But after completing this game you will feel proud because it's not as easy as the top two project were.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-typing-speed-tester"&gt;
  &lt;/a&gt;
  4. Typing Speed Tester
&lt;/h2&gt;

&lt;p&gt;Now you need to create a typing speed tester which gives you some paragraph and x min you need to type the each character as written &lt;br&gt;
and at the end it will show you the result. You can add some typing games which helps you increase typing speed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-chatbot"&gt;
  &lt;/a&gt;
  5. Chatbot
&lt;/h2&gt;

&lt;p&gt;Now this is the last project so It's level is insane you need to create a bot which communicate with humans. This app is very useful for you and makes your life easy. To create it you need a lot of knowledge&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e. Google assistant, Jarvis, Alexa&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;After learning this all you have a great knowledge about Python Library and you can apply for jobs too.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Start a Blog with Vim</title>
      <author>PythonBasics</author>
      <pubDate>Mon, 23 Aug 2021 09:29:44 +0000</pubDate>
      <link>https://dev.to/basicspython/how-to-start-a-blog-with-vim-1ikj</link>
      <guid>https://dev.to/basicspython/how-to-start-a-blog-with-vim-1ikj</guid>
      <description>&lt;p&gt;If Web technologies got out of the way, what would the Web be?&lt;/p&gt;

&lt;p&gt;These days JavaScript frameworks are all the rage. Long term though, will this framework be around?&lt;/p&gt;

&lt;p&gt;The answer is probably no (The Brutal Lifecycle of JavaScript Frameworks).  JavaScript frameworks come and go, who is still using ExtJS or MooTools? &lt;/p&gt;

&lt;p&gt;For a blog you want technology that lasts and you don't want your blog to turn into work. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4p41RB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhlexdnd2tfpej98q5nz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4p41RB2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhlexdnd2tfpej98q5nz.jpeg" alt="tech deprecated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use WordPress you'll quickly find it starts to become work: installing updates, updating the server, your plugins will be deprecated, (frameworks) plugins use will stop to be supported etc &lt;/p&gt;

&lt;p&gt;But what will be around in the next 10 years? Linux and bash scripting and plain HTML files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-blog-with-vim"&gt;
  &lt;/a&gt;
  Create blog with vim
&lt;/h2&gt;

&lt;p&gt;You can use &lt;a href="https://github.com/cfenollosa/bashblog"&gt;bashblog&lt;/a&gt;, a simple bash script that converts Markdown to HTML.&lt;/p&gt;

&lt;p&gt;Simply download the script then edit your post in files. And finally upload your html files to your server.&lt;/p&gt;

&lt;p&gt;I recommend using vim for text editing because it's a very powerful editor. This is an editor often used by &lt;a href="https://bsdnerds.org/what-is-linux-shell/"&gt;Linux&lt;/a&gt; users.&lt;/p&gt;

&lt;p&gt;To create your first post, first make the script executable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chmod +x bb.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./bb.sh post
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be aware that vim has a steep learning curve. For now know that you can use &lt;code&gt;ZQ&lt;/code&gt; to quit, learn vim first. There's a vim tutorial at &lt;a href="https://vim.is/"&gt;vim.is&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once you wrote your posts, upload them to your server. The neat thing is that this solution will work 10 years from now - zero work ;-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZUZ8UA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0szvmxjoq5adhe6zxlp8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZUZ8UA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0szvmxjoq5adhe6zxlp8.png" alt="blogging in vim"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another advantage besides that this will work for the next 10 (or 50?) years is the security benefit. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There is no database, the database cannot be hacked. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no login screen, nobody can hack your login (as opposed to the WordPress /wp-admin/ that's always under constant attack).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Practical tips for constructing Object diagrams from applications.</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 23 Aug 2021 09:26:27 +0000</pubDate>
      <link>https://dev.to/aatmaj/practical-tips-for-constructing-object-diagrams-from-applications-4k85</link>
      <guid>https://dev.to/aatmaj/practical-tips-for-constructing-object-diagrams-from-applications-4k85</guid>
      <description>&lt;h1&gt;
  &lt;a href="#practical-tips-for-constructing-object-diagrams-from-applications"&gt;
  &lt;/a&gt;
  Practical tips for constructing Object diagrams from applications.
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Don't begin constructing an object by merely jotting down classes and inheritance. &lt;strong&gt;Understand the problem first.&lt;/strong&gt; The content of an object model is driven by it's relevance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keep the model as simple as possible.&lt;/strong&gt; Avoid needless complications.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Carefully choose names.&lt;/strong&gt; Choosing the right name is one of the most difficult step in object oriented design. Choosing the right names not only avoids confusion but also improves the clarity in the program structure. Names should be descriptive, crisp, and unambiguous. Names should not be biased with only a certain aspect of the object, but rather have an comprehensive way of approach.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Try to avoid too deep nested generalizations&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Don't be surprised if your object diagram requires revision. &lt;strong&gt;Object models often require multiple iterations&lt;/strong&gt; to clarify names, repair errors, add details and correctly capture structural constraints.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Try to get others review your model&lt;/strong&gt;. Object models can be a focal point for stimulating the involvement of others.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Always document your object models.&lt;/strong&gt; The object diagrams specify the structure of a model but cannot describe the reasons behind it. The written explaination guides the reader through the model and explains the reason behind it. The written explaination guides the reader through the model and explains the subtle reasons why the model was structured in the particular way. The written explaination clarifies the meaning of the names in the model and should convey the reason for each class and relationship.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Adapted from the book &lt;a href="https://www.amazon.com/Object-Oriented-Modeling-Design-Uml/dp/8120330161"&gt;Object - Oriented Modeling and Design&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>design</category>
      <category>oop</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
