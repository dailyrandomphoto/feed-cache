<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building Tailwind CSS form and input components</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Tue, 12 Oct 2021 21:25:06 +0000</pubDate>
      <link>https://dev.to/themesberg/building-tailwind-css-form-and-input-components-2ang</link>
      <guid>https://dev.to/themesberg/building-tailwind-css-form-and-input-components-2ang</guid>
      <description>&lt;p&gt;I've been using Tailwind CSS quite regularly in my projects and I am getting quite fond of this utility-first approach when building web user interfaces.&lt;/p&gt;

&lt;p&gt;One problem that I did encounter is the necessity to design and code some commonly used web components every time I start a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sIGRzOWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z32ac6bkppo37vndylu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sIGRzOWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z32ac6bkppo37vndylu.png" alt="Tailwind CSS form components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's why I decided to start a tutorial series where I show you how to build some of the most commonly used web components such as buttons, dropdowns, navigation bars, and more using only the utility classes from Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Last time I showed you how to build a &lt;a href="https://dev.to/themesberg/building-a-tailwind-css-dropdown-component-ban"&gt;dropdown component with Tailwind CSS&lt;/a&gt; and today I want to show you how to design and build form input elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#form-input-elements-in-tailwind-css"&gt;
  &lt;/a&gt;
  Form input elements in Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;First of all, let's build the styles for one single text input element together with a label. Let's build the HTML first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="email"&amp;gt;Your email&amp;lt;/label&amp;gt;
&amp;lt;input type="email" id="email" placeholder="name@flowbite.com" required&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great. We still have to apply some styles. Let's add some of the basic styles both to the label and the input element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="email" class="text-sm font-medium text-gray-900 block mb-2"&amp;gt;Your email&amp;lt;/label&amp;gt;
&amp;lt;input type="email" id="email" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg block w-full p-2.5" placeholder="name@flowbite.com" required&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looking better! Let's also add some &lt;code&gt;focus&lt;/code&gt; styles as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="email" class="text-sm font-medium text-gray-900 block mb-2"&amp;gt;Your email&amp;lt;/label&amp;gt;
    &amp;lt;input type="email" id="email" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" placeholder="name@flowbite.com" required&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although this looks good, input elements are usually part of a &lt;code&gt;form&lt;/code&gt; element and there are multiple inputs.&lt;/p&gt;

&lt;p&gt;Here's an example of a simple authentication form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;form&amp;gt;
  &amp;lt;div class="mb-6"&amp;gt;
    &amp;lt;label for="email" class="text-sm font-medium text-gray-900 block mb-2"&amp;gt;Your email&amp;lt;/label&amp;gt;
    &amp;lt;input type="email" id="email" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" placeholder="name@flowbite.com" required=""&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class="mb-6"&amp;gt;
    &amp;lt;label for="password" class="text-sm font-medium text-gray-900 block mb-2"&amp;gt;Your password&amp;lt;/label&amp;gt;
    &amp;lt;input type="password" id="password" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required=""&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class="flex items-start mb-6"&amp;gt;
    &amp;lt;div class="flex items-center h-5"&amp;gt;
      &amp;lt;input id="remember" aria-describedby="remember" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" required=""&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="text-sm ml-3"&amp;gt;
      &amp;lt;label for="remember" class="font-medium text-gray-900"&amp;gt;Remember me&amp;lt;/label&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center"&amp;gt;Login&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These &lt;a href="https://flowbite.com/docs/components/forms/"&gt;Tailwind CSS form input elements&lt;/a&gt; are part of a larger and open source Tailwind CSS component library called &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Flowbite&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBzNtyj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n9e8c2gtup11i81feg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBzNtyj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n9e8c2gtup11i81feg9.png" alt="Tailwind CSS form elements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to check out more form input elements such as checkboxes, radios, success and error message styles then make sure to check out the &lt;a href="https://flowbite.com/docs/components/forms/"&gt;Tailwind CSS Forms&lt;/a&gt; section from Flowbite.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>opensource</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Vim basics for beginners</title>
      <author>Elves Sousa</author>
      <pubDate>Tue, 12 Oct 2021 20:53:17 +0000</pubDate>
      <link>https://dev.to/elvessousa/vim-basics-for-beginners-5aln</link>
      <guid>https://dev.to/elvessousa/vim-basics-for-beginners-5aln</guid>
      <description>&lt;p&gt;In the first &lt;a href="https://dev.to/en/post/vim-part-1"&gt;part of this series&lt;/a&gt;, I told why I've switched from VS Code to Neovim, but I didn't go deep into how differently Vim works. In this article I write more about these aspects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-vim-edits-texts"&gt;
  &lt;/a&gt;
  How Vim edits texts
&lt;/h3&gt;

&lt;p&gt;In other editors, you just click and start writing. To save a file, just choose "save" on the menu or using the corresponding keyboard shortcut for the action.&lt;/p&gt;

&lt;p&gt;This is completely different in Vim: the program begins in a quick edits mode, which does not enable writing text. This mode accepts navigation and commands to change text. To do this, commands are used, which can be simple as a shortcut key, or compound, where more keys are used to achieve a certain action.&lt;/p&gt;

&lt;p&gt;For those who have never used it, this sounds very difficult and intimidating, but it is not. With practice, you get used to it and see the advantages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#normal-mode"&gt;
  &lt;/a&gt;
  Normal mode
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bnFK5Zdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/936Nzmq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bnFK5Zdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/936Nzmq.jpg" alt="Normal mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the editor's default mode. To access it, always use the &lt;code&gt;ESC&lt;/code&gt; key.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigation-through-text"&gt;
  &lt;/a&gt;
  Navigation through text
&lt;/h3&gt;

&lt;p&gt;Navigation works as in most editors, arrow keys to move the cursor on the screen, &lt;code&gt;Pageup&lt;/code&gt; or&lt;code&gt;Pagedown&lt;/code&gt; to move between "pages", &lt;code&gt;Home&lt;/code&gt; or &lt;code&gt;End&lt;/code&gt; to go to the beginning or end of a line. Beside these shortcuts, there are others made just pressing normal keys like letters and symbols. Here are some of them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple commands:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;g&lt;/code&gt;:&lt;/strong&gt; moves the cursor to the end of the file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;L&lt;/code&gt;:&lt;/strong&gt; moves the cursor to the end of the screen. &lt;strong&gt;L&lt;/strong&gt; comes from the word &lt;strong&gt;Low&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;M&lt;/code&gt;:&lt;/strong&gt; moves the cursor to the middle of the screen. &lt;strong&gt;M&lt;/strong&gt; comes from the word &lt;strong&gt;Middle&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;H&lt;/code&gt;:&lt;/strong&gt; moves the cursor to the beginning of the screen. Note that this is not necessarily the beginning of the file. &lt;strong&gt;H&lt;/strong&gt; comes from the word &lt;strong&gt;High&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;0&lt;/code&gt;:&lt;/strong&gt; moves the cursor to the beginning of the line.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;w&lt;/code&gt;:&lt;/strong&gt; moves the cursor to the beginning of the next &lt;strong&gt;w&lt;/strong&gt;ord.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;b&lt;/code&gt;:&lt;/strong&gt; moves the cursor to the &lt;strong&gt;b&lt;/strong&gt;eginning of the previous word.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;e&lt;/code&gt;:&lt;/strong&gt; moves the cursor to the &lt;strong&gt;e&lt;/strong&gt;nd of the next word.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;J&lt;/code&gt;:&lt;/strong&gt; &lt;strong&gt;j&lt;/strong&gt;oins lines.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;%&lt;/code&gt;:&lt;/strong&gt; shows the corresponding scope, inside parentheses, brackets or keys.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;.&lt;/code&gt;:&lt;/strong&gt; repeats any operation done earlier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Compound commands:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;gg&lt;/code&gt;:&lt;/strong&gt; moves the cursor at the beginning of the file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;number + &lt;code&gt;g&lt;/code&gt;:&lt;/strong&gt; goes to a specific line. Ex.: &lt;code&gt;23g&lt;/code&gt; goes to line 23 of the document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;f&lt;/code&gt; + character:&lt;/strong&gt; moves the cursor to the next occurrence of the chosen character. Ex: &lt;code&gt;f(&lt;/code&gt; moves cursor to the next (.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Number + &lt;code&gt;w&lt;/code&gt;,&lt;code&gt;b&lt;/code&gt; or &lt;code&gt;e&lt;/code&gt;:&lt;/strong&gt; move the cursor to the beginning/final of the nth word after the current position. Ex: &lt;code&gt;2w&lt;/code&gt; moves the cursor to the beginning of the second word.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#text-editing"&gt;
  &lt;/a&gt;
  Text editing
&lt;/h3&gt;

&lt;p&gt;Simple editing can be made in this mode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simple commands:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;x&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt;:&lt;/strong&gt; clears the character under the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;u&lt;/code&gt;:&lt;/strong&gt; undoes latest changes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;r&lt;/code&gt;:&lt;/strong&gt; replaces the character under the cursor by the next that will be typed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Compound commands: removing content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To delete content, use the &lt;code&gt;d&lt;/code&gt; key; it works likes cutting in other editors. The way it will be deleted/cut will depend on the next letter typed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;d&lt;/code&gt;:&lt;/strong&gt; delete "the entire line. &lt;code&gt;dd&lt;/code&gt; equals &lt;code&gt;Ctrl + X&lt;/code&gt; in VS Code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Number + &lt;code&gt;d&lt;/code&gt;:&lt;/strong&gt; remove multiple lines. &lt;code&gt;2134dd&lt;/code&gt; will erase 2134 lines.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;w&lt;/code&gt;:&lt;/strong&gt; clears until the end of the word.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Number + &lt;code&gt;w&lt;/code&gt;:&lt;/strong&gt; deletes certain number of words. Ex.: &lt;code&gt;d2w&lt;/code&gt; erases two words.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;i&lt;/code&gt; + character:&lt;/strong&gt; removes the content delimited by a character. Ex.: &lt;code&gt;di{&lt;/code&gt; removes content between keys. An easy way to understand this is to remember the phrase &lt;em&gt;"delete inside {"&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;i&lt;/code&gt; + &lt;code&gt;w&lt;/code&gt;:&lt;/strong&gt; clears the whole word.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;i&lt;/code&gt; + &lt;code&gt;t&lt;/code&gt;:&lt;/strong&gt; removes everything inside an HTML tag.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;t&lt;/code&gt; + character:&lt;/strong&gt; removes content till a particular character. Ex.: &lt;code&gt;dt.&lt;/code&gt; removes content to the next full stop. Remember the expression &lt;em&gt;"delete till ."&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;$&lt;/code&gt;:&lt;/strong&gt; clears from where the cursor is up till the end of the line. The &lt;code&gt;D&lt;/code&gt; shortcut has the same effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Compound commands: copying&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Copy works basically in the same way as removal. The command used for copying is &lt;code&gt;y&lt;/code&gt;, which comes from the word &lt;strong&gt;yank&lt;/strong&gt;. The same key combinations used for deleting work here, but applied to copy content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;y&lt;/code&gt;:&lt;/strong&gt; Copies the entire line. &lt;code&gt;yy&lt;/code&gt; is equivalent to &lt;code&gt;Ctrl + C&lt;/code&gt; in VS Code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Number + &lt;code&gt;y&lt;/code&gt;:&lt;/strong&gt; Copies several lines. Ex.: &lt;code&gt;1873yy&lt;/code&gt; copies 1873 lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on, you got the idea.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pasting-content"&gt;
  &lt;/a&gt;
  Pasting content
&lt;/h4&gt;

&lt;p&gt;To &lt;strong&gt;p&lt;/strong&gt;aste the content, use the &lt;code&gt;p&lt;/code&gt; key. It is worth mentioning that all deleted content is in the clipboard. Using &lt;code&gt;p&lt;/code&gt;, will paste after the cursor and using &lt;code&gt;P&lt;/code&gt; it will paste before the cursor.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#insert-mode"&gt;
  &lt;/a&gt;
  Insert mode
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5j5vuyqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vcHKVJH.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5j5vuyqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vcHKVJH.jpg" alt="Insert mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this mode everything is quite familiar as it is like every other editor. There are several ways to access the mode to write text:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;i&lt;/code&gt;:&lt;/strong&gt; opens insertion mode and moves the cursor before the current character.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;a&lt;/code&gt;:&lt;/strong&gt; opens insertion mode and moves the cursor after current character.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;s&lt;/code&gt;:&lt;/strong&gt; opens insertion mode and erases the character under the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;i&lt;/code&gt;:&lt;/strong&gt; moves the cursor at the beginning of the line to insert content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;A&lt;/code&gt;:&lt;/strong&gt; moves the cursor at the end of the line to add content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;o&lt;/code&gt;:&lt;/strong&gt; adds a line below the cursor and enter the insert mode.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;O&lt;/code&gt;:&lt;/strong&gt; adds a line above the cursor and enter the insert mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Compound commands: changing content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another way to enter the insertion mode is to use the &lt;code&gt;c&lt;/code&gt; command, for &lt;strong&gt;change&lt;/strong&gt;. This follows the same pattern of previously described for removal and copy commands. It clips the content and opens the mode for insertion, very practical. For example, imagine that we have the following HTML markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"random-latin-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Lorem ipsum dolor sit amet, consectetur &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;adipiscing elit&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;.
  Quisque eget lobortis velit. Maecenas nec molestie eros, eu efficitur erat.
  Nunc nec congue justo, et commodo dolor. Aliquam &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;facilisis&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; urna eget
  massa pulvinar, in bibendum ante convallis.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just position the cursor in the markup and type &lt;code&gt;cit&lt;/code&gt;. The result will be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"random-latin-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;|&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "|" above represents where the cursor will be, ready to enter new text.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#replace-mode"&gt;
  &lt;/a&gt;
  Replace mode
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86JQei4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pWoaamU.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86JQei4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pWoaamU.jpg" alt="Replace mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This mode is basically the same as pressing the &lt;code&gt;Insert key&lt;/code&gt;: the typed text overwrites the previous one. It is accessed by the &lt;code&gt;R&lt;/code&gt; shortcut.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#visual-mode"&gt;
  &lt;/a&gt;
  Visual mode
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_deMuPjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HdAG14O.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_deMuPjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HdAG14O.jpg" alt="Visual mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This mode enables text selection. It's activated by the &lt;code&gt;v&lt;/code&gt; key. To select the text, just use the arrow keys. Clicking with the right mouse button also activates the mode, in case it is configured.&lt;/p&gt;

&lt;p&gt;Commands made after visual mode will only affect the selected area.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#command-mode"&gt;
  &lt;/a&gt;
  Command mode
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3IHgn4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8CcRTC2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3IHgn4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8CcRTC2.jpg" alt="Command mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This mode is one of the most used, because it is the equivalent of a toolbar. With it we can save the file a file, for example. It is activated by the key &lt;code&gt;:&lt;/code&gt;. From there just write the command desired and press &lt;code&gt;Enter&lt;/code&gt;. Below are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;w&lt;/code&gt; or&lt;code&gt;write&lt;/code&gt;:&lt;/strong&gt; saves the current file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;q&lt;/code&gt; or&lt;code&gt;quit&lt;/code&gt;:&lt;/strong&gt; closes the file. Add &lt;code&gt;!&lt;/code&gt; to force quit if it complains of changes not saved.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;x&lt;/code&gt; or &lt;code&gt;wq&lt;/code&gt;:&lt;/strong&gt; saves and closes the file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;h&lt;/code&gt; or&lt;code&gt;help&lt;/code&gt;:&lt;/strong&gt; shows the help screen.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;s&lt;/code&gt;:&lt;/strong&gt; enter find/replace mode from the current line. Ex.: &lt;code&gt;s/rong/right&lt;/code&gt; 'will replace the word "rong" for "right". &lt;code&gt;s/rong/right/g&lt;/code&gt; does the same thing, in all occurrences on the line. &lt;code&gt;s/rong/right/g 8&lt;/code&gt; make replaces the words in all occurrences for the next 8 lines.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#curiosities"&gt;
  &lt;/a&gt;
  Curiosities
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#arrow-keys"&gt;
  &lt;/a&gt;
  Arrow keys
&lt;/h3&gt;

&lt;p&gt;Despite being able to use the directional normally, Vim encourages the use of the &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;,&lt;code&gt;k&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; keys to move the cursor to the left, low, up and right, respectively. This is due to the fact that the computer used at the time by the Vi developer used a keyboard in which the directional were on that keys.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P40_gwn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GjHEa0y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P40_gwn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GjHEa0y.jpg" alt="ADM 3a"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;ADM 3A Keyboard&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some aficionados abhor the use of arrow keys. In fact, if you get used to it, you can be very productive, because the keys are closer. Personally, I don't use this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#esc-key"&gt;
  &lt;/a&gt;
  ESC key
&lt;/h3&gt;

&lt;p&gt;On the same keyboard above, the &lt;code&gt;Esc&lt;/code&gt; was in the same position as the &lt;code&gt;Caps Lock&lt;/code&gt; key. Upon knowing of this, you see the choice was not so strange, as the position of the &lt;code&gt;Caps Lock&lt;/code&gt; key is much more comfortable than that of the current &lt;code&gt;Esc&lt;/code&gt;. You can configure the editor to do that. I did not do it myself.&lt;/p&gt;




&lt;p&gt;Here I end this article! I can't teach everything, unfortunately: I don't know everything about it and a blog article is not enough for this purpose. Despite this, I believe this is the basics for you to start using this "scary" editor.&lt;/p&gt;

&lt;p&gt;I suggest that as homework, use the "Vim Tutor": it is a command available at the terminal as soon as Vim is installed on the system. When writing &lt;code&gt;vimtutor&lt;/code&gt; in the terminal, an instance of Vim opens without any plugins loaded, with a nice text that teaches more deeply every command I quoted here, with practical exercises.&lt;/p&gt;

&lt;p&gt;In the next article, I will teach you how to make Vim more useful and beautiful. Because let's get real, it is really ugly and empty at first.&lt;/p&gt;

&lt;p&gt;See you later!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.elvessousa.com.br/post/vim-parte-2"&gt;This article in Portuguese&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vim.org"&gt;Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neovim.io"&gt;Neovim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If this article helped you in some way, consider &lt;a href="https://www.buymeacoffee.com/elvessousa"&gt;donating&lt;/a&gt;. This will help me to create more content like this!&lt;/p&gt;

</description>
      <category>neovim</category>
      <category>vim</category>
      <category>editor</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to setup husky, eslint and prettier within minutes</title>
      <author>Djamaile</author>
      <pubDate>Tue, 12 Oct 2021 20:52:29 +0000</pubDate>
      <link>https://dev.to/djamaile/how-to-setup-husky-eslint-and-prettier-within-minutes-1ffd</link>
      <guid>https://dev.to/djamaile/how-to-setup-husky-eslint-and-prettier-within-minutes-1ffd</guid>
      <description>&lt;p&gt;originally posted at: &lt;a href="https://djamaile.dev/blog/how-to-setup-husky-eslint-prettier/"&gt;https://djamaile.dev/blog/how-to-setup-husky-eslint-prettier/&lt;/a&gt;&lt;br&gt;
repository: &lt;a href="https://github.com/djamaile/hep-demo"&gt;https://github.com/djamaile/hep-demo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#starting-up"&gt;
  &lt;/a&gt;
  Starting up
&lt;/h3&gt;

&lt;p&gt;Let’s first generate a simple React project by using &lt;code&gt;create-react-app&lt;/code&gt;. Execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app hep-demo &lt;span class="nt"&gt;--template&lt;/span&gt; typescript &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;hep-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start the app and see if everything is working properly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you encounter a issue with "babel-jest": "^26.6.0" add a .env file with &lt;code&gt;SKIP_PREFLIGHT_CHECK=true&lt;/code&gt; (echo 'SKIP_PREFLIGHT_CHECK=true' &amp;gt; .env )&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-packages"&gt;
  &lt;/a&gt;
  Installing packages
&lt;/h3&gt;

&lt;p&gt;Now that our app is working we can start by adding the needed packages. &lt;br&gt;
For this setup we would need prettier, husky, lint-staged, eslint-config-airbnb and spotify/prettier-config.&lt;br&gt;
The last one is optional, you can also create your own prettier config but recently&lt;br&gt;
I have been using spotify's config with pleasant results. &lt;/p&gt;

&lt;p&gt;To install the packages, execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @spotify/prettier-config @typescript-eslint/parser husky lint-staged prettier &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use the eslint config of airbnb to do that execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx install-peerdeps &lt;span class="nt"&gt;--dev&lt;/span&gt; eslint-config-airbnb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the root of your project, create a file called &lt;code&gt;.eslintrc.json&lt;/code&gt; and add the following content to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"airbnb"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint/parser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"browser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"es6"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"no-console"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"import/prefer-default-export"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@typescript-eslint/camelcase"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"camelcase"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react/jsx-props-no-spreading"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsx-a11y/no-static-element-interactions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react/prop-types"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsx-a11y/href-no-hash"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsx-a11y/click-events-have-key-events"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"import/no-unresolved"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"import/extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"no-use-before-define"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react/jsx-uses-react"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react/react-in-jsx-scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"react/jsx-filename-extension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"warn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"extensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;".js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".jsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".tsx"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".ts"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"max-len"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"warn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"comments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ignoreComments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ignoreTrailingComments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ignoreUrls"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ignoreStrings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ignoreTemplateLiterals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ignoreRegExpLiterals"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You, of course, don’t have to use the same rules as mine. Play with it and see what fits you the best!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-package-json"&gt;
  &lt;/a&gt;
  Configure package json
&lt;/h3&gt;

&lt;p&gt;Once the packages are installed, we can make some changes in our package.json. Let’s first start with some handy scripts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier:write"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prepare"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"husky install"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The prettier commands are there to check your code and the prepare script we will use in a bit to set up husky with a pre-commit hook.&lt;/p&gt;

&lt;p&gt;But first in your &lt;code&gt;package.json&lt;/code&gt; down below you can set prettier to &lt;code&gt;@spotify/prettier-config&lt;/code&gt; and under that you can specify the &lt;code&gt;lint-staged&lt;/code&gt; section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@spotify/prettier-config"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"lint-staged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.{js,jsx,ts,tsx}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"eslint --fix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.{json,md}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;lint-staged&lt;/code&gt; will execute those commands on files that are ready to be committed. Basically, it will run its specified linter on all staged git files. But before that is possible, we need to make sure that husky triggers &lt;code&gt;lint-staged&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the root of your project run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn prepare
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will create the &lt;code&gt;.husky&lt;/code&gt; folder in your project and after we can install a pre-commit hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx husky add .husky/pre-commit &lt;span class="s2"&gt;"yarn lint-staged"&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a pre-commit hook in the &lt;code&gt;.husky&lt;/code&gt; folder. If we inspect the contents of the file you can see that it will run &lt;code&gt;yarn lint-staged&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ignore-files"&gt;
  &lt;/a&gt;
  Ignore files
&lt;/h3&gt;

&lt;p&gt;Before we can test if it works, we should also create .ignore files for prettier and eslint. We don't want to end up scanning the &lt;code&gt;node_modules&lt;/code&gt; folder! Create the files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .eslintignore
&lt;span class="nb"&gt;touch&lt;/span&gt; .prettierignore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In both of the files you can add the same folders to ignore:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**/node_modules/**
**/build/**
**/dist/**
**/.git/**
**/public/**
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;Now we can actually test if our setup works! First, we’ll need to set up a git for our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"first commit"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you try to commit, you can see husky in action. It will execute &lt;code&gt;yarn lint-staged&lt;/code&gt; which in turns calls prettier and eslint for our git staged files.&lt;/p&gt;

&lt;p&gt;To see if it works on new stuff, let’s create a file called &lt;code&gt;Button.tsx&lt;/code&gt; in the src directory. Once you have done that, add the following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;big&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, this piece of code is wrong but let eslint tell us why. Add the file and try to commit it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"feat: add button component"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If eslint is working well you should receive this error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; error  Assignment to &lt;span class="k"&gt;function &lt;/span&gt;parameter &lt;span class="s1"&gt;'size'&lt;/span&gt;      no-param-reassign

 error  Missing an explicit &lt;span class="nb"&gt;type &lt;/span&gt;attribute &lt;span class="k"&gt;for &lt;/span&gt;button  react/button-has-type

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems like we have some errors, so let’s fix them before committing our button. Overwrite &lt;code&gt;Button.tsx&lt;/code&gt; with the fixed code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rightSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;big&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;small&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rightSize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code now looks good, but the styling might look a bit off. But that is okay. We are going to let prettier handle that. Let’s try again to add and commit our Button component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"feat: add button component"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we should be greeted by green light and that our component is commited! In addition, if we look at the button component we can see that prettier has rewritten our component, to make it look nicer!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rightSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;big&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;small&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rightSize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Learn to use Decorators once and for all</title>
      <author>Ivan Zadivar</author>
      <pubDate>Tue, 12 Oct 2021 20:00:52 +0000</pubDate>
      <link>https://dev.to/ivanz123/learn-to-use-decorators-once-and-for-all-4l0o</link>
      <guid>https://dev.to/ivanz123/learn-to-use-decorators-once-and-for-all-4l0o</guid>
      <description>&lt;p&gt;Hi Developers! How are you? I hope everyone is well. A few weeks ago I begin to investigate in depth how decorators really work. It's not that I've never worked with Decorators, of course I have, especially Angular and Nest, but I never bothered to understand how they work. So I decided to get down to let's do it. And the truth is, it is easier than it seems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-decorators"&gt;
  &lt;/a&gt;
  What are @Decorators?
&lt;/h2&gt;

&lt;p&gt;A decorator is nothing more than a "typical" Javascript/Typescript function what to add additional functionalities to a declaration. When we say declaration, we mean classes, methods, parameters, accessor (getter) and properties. Now, we are going to explain each one of them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You will have noticed, that at no time did we mention functions, this is so because the main problem is dealing with the elevation of functions. Any attempt to wrap one function in another function breaks the hoist.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Hs1D25v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsszv1bdwhb2n7e1uqwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Hs1D25v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsszv1bdwhb2n7e1uqwu.png" alt="Decorators is bad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the decorators we find two types, basic decorators and factories. How do we differentiate each one? I show it to you with the following image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YjKdfFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjzq7t5yn8d71dp9erv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YjKdfFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjzq7t5yn8d71dp9erv6.png" alt="Examples of types decorators"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we use factory it is because we need to pass some parameters, instead we use predefined values ​​in the other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get started!
&lt;/h2&gt;

&lt;p&gt;What we will do at this point is to create a class that will help us understand how decorators work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Note&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NoteUI&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Docker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🐳 Beautiful platform.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Firebase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🔥 Beautiful platform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect this is all we need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#class-decorators"&gt;
  &lt;/a&gt;
  Class Decorators.
&lt;/h2&gt;

&lt;p&gt;A Class Decorator is declared just before a class declaration. The class decorator is applied to the constructor of the class and can be used to observe, modify, or replace a class definition.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important Announcement&lt;/strong&gt; Should you choose to return a new constructor function, you must take care to maintain the original prototype. The logic that applies decorators at runtime will not do this for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Some considerations&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The expression for the class decorator will be called as a function at runtime, with the constructor of the decorated class as its only argument.&lt;/li&gt;
&lt;li&gt;If the class decorator returns a value, it will replace the class declaration with the provided constructor function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We build the decorator that adds a property of type &lt;code&gt;Map&lt;/code&gt; and two methods, one for insertion and the other for deletion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Set new entities in the class.&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Add method for insert new entities.&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Add method for remove entities.&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we add decorator in the class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Add decorator in the class.&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NoteStore&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NoteStore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Add new entity.&lt;/span&gt;
&lt;span class="nx"&gt;noteStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ivan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Show all entities.&lt;/span&gt;
&lt;span class="nx"&gt;noteStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Delete a entity.&lt;/span&gt;
&lt;span class="nx"&gt;noteStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Show all entities.&lt;/span&gt;
&lt;span class="nx"&gt;noteStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#method-decorators"&gt;
  &lt;/a&gt;
  Method Decorators.
&lt;/h2&gt;

&lt;p&gt;These decorators are characterized because they are declared just before our method. You have to understand that the declaration will be executed at runtime and receives the following parameters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;target&lt;/code&gt;: The first parameter contains the class where this method lives.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;key&lt;/code&gt;: Name of the member (method)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;descriptor&lt;/code&gt;: The Property Descriptor for the member.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Taking the previous class (NoteController) we add the following method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create method decorator.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Confirm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NoteUI&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Confirm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This item will be removed. Are you sure?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;: The function of this decorator is to show a confirmation window with the message that we have passed as a parameter, if the user accepts, it removes the element, otherwise, nothing happens.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#parameter-decorators"&gt;
  &lt;/a&gt;
  Parameter Decorators.
&lt;/h2&gt;

&lt;p&gt;A Parameter Decorator is declared just before a parameter declaration. The parameter decorator is applied to the function for a class constructor or method declaration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Considerations&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A parameter decorator cannot be used in a declaration file, an overload, or in any other ambient context (such as in a declare class).&lt;/li&gt;
&lt;li&gt;A parameter decorator can only be used to observe that a parameter has been declared on a method. So the return value of the parameter decorator is ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this case I did not find an example that was entirely useful, so I did not add anything. I'm sorry buddy. But if you have any good ones, feel free to comment on them, please.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#property-decorators"&gt;
  &lt;/a&gt;
  Property Decorators.
&lt;/h2&gt;

&lt;p&gt;A Property Decorator is declared just before a property declaration.&lt;/p&gt;

&lt;p&gt;Receives the following parameters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Target: Either the constructor function of the class for a static member, or the prototype of the class for an instance member&lt;/li&gt;
&lt;li&gt;Key: property name in string format.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CapitalizeForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CapitalizeForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Get value of the property.&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Assign getter.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// Capitalize first letter.&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Assign setter.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Capitalize all first letter of a word by each space&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// Capitalize only first letter.&lt;/span&gt;
      &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// Define property.&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NoteUI&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Capitalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi developers!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteUI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NoteUI&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// @Capitalize("First")&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noteUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hi developers!&lt;/span&gt;

&lt;span class="c1"&gt;// @Capitalize("All")&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noteUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hi Developers!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: A property decorator cannot be used in a declaration file, or in any other ambient context (such as in a declare class).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What this decorator does is capitalize a text string. I already know the first letter or all the content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessor-decorators"&gt;
  &lt;/a&gt;
  Accessor Decorators.
&lt;/h2&gt;

&lt;p&gt;An Accessor Decorator is declared just before an accessor declaration.  The accessor decorator is applied to the Property Descriptor for the accessor and can be used to observe, modify, or replace an accessor’s definitions. You have to understand that accessor is nothing more than a getter of our class.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: An accessor decorator cannot be used in a declaration file, or in any other ambient context (such as in a declare class).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//  Create a decorator.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyDescriptor&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NoteUI&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteUI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NoteUI&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// { 1: { id: 1, title: "A title", text: "A description" } }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Explanation: This decorator have the responsibility of transform an array to object or directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, this is the end of this article. There is still a long way to go to be a pro with decorators, but it is only a matter of practice. Any questions or suggestions are welcome in your comments. I hope I have helped you friend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-on-social-networks"&gt;
  &lt;/a&gt;
  Follow me on social networks.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;🎉 Twitter: &lt;a href="https://twitter.com/ToSatn2"&gt;https://twitter.com/ToSatn2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💡 Github: &lt;a href="https://github.com/IvanZM123"&gt;https://github.com/IvanZM123&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>How you can use WebSockets with Flutter</title>
      <author>vibalijoshi</author>
      <pubDate>Tue, 12 Oct 2021 19:43:41 +0000</pubDate>
      <link>https://dev.to/vibalijoshi/how-you-can-use-websockets-with-flutter-ipn</link>
      <guid>https://dev.to/vibalijoshi/how-you-can-use-websockets-with-flutter-ipn</guid>
      <description>&lt;p&gt;WebSockets are clearly taking the industry by storm. With Google's Flutter framework on the rise too, it would give you a big boost knowing how to integrate both of these technologies. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-websockets"&gt;
  &lt;/a&gt;
  What are WebSockets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYdPtUO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enqzo6avfi1bykppcadf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYdPtUO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enqzo6avfi1bykppcadf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WebSockets represent a long-awaited evolution in the client/server web technology. It defines a fully duplex bi-directional communication channel between the client and server. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Related: &lt;br&gt;
&lt;a href="https://www.pcmag.com/encyclopedia/term/clientserver#:~:text=An%20architecture%20in%20which%20the,WAN%29%20such%20as%20the%20Internet."&gt;What do you mean by client and a server?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simple words, once after the initial handshake where the server and the client agree to upgrade to WebSockets, (from HTTP) the client and the server can talk in real time without having to continuously make requests (like loading the page again and again). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Only the client-side problems of developing a dependable WebSocket-based solution for realtime Flutter apps are discussed in this article. On the server side, you must determine which solution you wish to utilise. You can use an open-source library like &lt;a href="https://ably.com/topic/socketio"&gt;Socket.IO&lt;/a&gt; if you haven't already.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-connect-to-a-websocket-server-with-flutter"&gt;
  &lt;/a&gt;
  How to connect to a WebSocket server with Flutter
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-websocketchannel-endraw-package"&gt;
  &lt;/a&gt;
  &lt;a href="https://pub.dev/packages/web_socket_channel"&gt;&lt;code&gt;web_socket_channel&lt;/code&gt;&lt;/a&gt; package
&lt;/h3&gt;

&lt;p&gt;We will use this package to acquire the tools we need to connect to a WebSocket server. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyJY2a2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y4379cj5cgz0xqr1h7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyJY2a2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y4379cj5cgz0xqr1h7w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;web_socket_channel&lt;/code&gt; basically works with the &lt;strong&gt;&lt;em&gt;StreamChannel&lt;/em&gt;&lt;/strong&gt; class, which is an abstract class representing a two-way communication channel (as in the case for WebSockets)&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;StreamChannel&lt;/code&gt; exposes a &lt;code&gt;Stream&lt;/code&gt; for &lt;strong&gt;receiving data&lt;/strong&gt;. A &lt;code&gt;Stream&lt;/code&gt;  is like a pipe, you put a value on the one end and if there’s a listener on the other end that listener will receive that value.&lt;/li&gt;
&lt;li&gt;It also exposes &lt;code&gt;StreamSink&lt;/code&gt; used to push messages to the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short words, the package allows you to both listen for messages from the server and push messages to the server i.e &lt;strong&gt;&lt;em&gt;fully duplex bi-directional communication channel&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;
Follow the installation given here: &lt;br&gt;
&lt;a href="https://pub.dev/packages/web_socket_channel/install"&gt;https://pub.dev/packages/web_socket_channel/install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-idea"&gt;
  &lt;/a&gt;
  Basic Idea
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--twUS13MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a36fwmllw3dfmptr35ae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twUS13MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a36fwmllw3dfmptr35ae.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We'd have a textfield in our app where the user could type a message. The data that we input would be displayed on the screen after pressing a button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data displayed comes from the server response, which is an echo server in this case, meaning it sends back what it receives. These servers are used to determine whether or not a connection to a server is successful. Here we would be using them to maintain simplicity for this example. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the boiler plate we will be using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#how-to-connect-to-server"&gt;
  &lt;/a&gt;
  How to connect to server
&lt;/h3&gt;

&lt;p&gt;First let us connect to a WebSocket server. As discussed above we will be using an echo webSocket server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;WebSocketChannel&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IOWebSocketChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"wss://ws.ifelse.io/"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;WebSocketChannel&lt;/code&gt;: A &lt;em&gt;StreamChannel&lt;/em&gt; (class representing a two-way communication) that communicates over a WebSocket.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;IOWebSocketChannel&lt;/code&gt;: A &lt;a href="https://docs-flutter-io.firebaseapp.com/flutter/package-web_socket_channel_web_socket_channel/WebSocketChannel-class.html"&gt;WebSocketChannel&lt;/a&gt; that communicates using a &lt;code&gt;dart:io&lt;/code&gt;  &lt;a href="https://docs-flutter-io.firebaseapp.com/flutter/dart-io/WebSocket-class.html"&gt;WebSocket&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;IOWebSocketChannel.connect&lt;/code&gt;: Creates a new WebSocket connection and connects to  &lt;code&gt;url&lt;/code&gt;  using  &lt;a href="https://api.dart.dev/stable/2.14.2/dart-io/WebSocket/connect.html"&gt;WebSocket.connect&lt;/a&gt;  and returns a channel that can be used to communicate over the resulting socket. &lt;/li&gt;
&lt;li&gt;Here &lt;code&gt;wss://ws.ifelse.io/&lt;/code&gt; is an echo WebSocket server. Please note that the mostly used echo server &lt;code&gt;ws://echo.websocket.org&lt;/code&gt; is no longer in service. &lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-listen-to-the-server"&gt;
  &lt;/a&gt;
  How to listen to the server
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oUtTbDAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx4kcdw8mkh3gtk6jq09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oUtTbDAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx4kcdw8mkh3gtk6jq09.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now that we’ve established a connection, let us listen to messages from the server.&lt;/li&gt;
&lt;li&gt;After sending a message to the test server, it sends the same message back (echo). &lt;/li&gt;
&lt;li&gt;We will use a  &lt;a href="https://api.flutter.dev/flutter/widgets/StreamBuilder-class.html"&gt;&lt;code&gt;StreamBuilder&lt;/code&gt;&lt;/a&gt;  widget to listen for new messages, and a  &lt;code&gt;Text&lt;/code&gt; widget to display them.&lt;/li&gt;
&lt;li&gt;A StreamBuilder:

&lt;ol&gt;
&lt;li&gt;Can listen to exposed streams.&lt;/li&gt;
&lt;li&gt;Return widgets&lt;/li&gt;
&lt;li&gt;Catch snapshots of got stream information.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;StreamBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  
  &lt;span class="nl"&gt;stream:&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;  
  &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;  
      &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;  
  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasData&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;${snapshot.data}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;  
  &lt;span class="o"&gt;);&lt;/span&gt;  
  &lt;span class="o"&gt;},&lt;/span&gt;  
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Watch &lt;a href="https://youtu.be/MkKEWHfy99Y"&gt;this&lt;/a&gt; video to get a better idea about StreamBuilder:   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-to-send-data-to-the-server"&gt;
  &lt;/a&gt;
  How to Send data to the server
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uStuBkcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yq8ec511lodh34sfenkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uStuBkcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yq8ec511lodh34sfenkl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will add a function &lt;code&gt;sendData()&lt;/code&gt; responsible for sending data to the stream whenever the floating button is pressed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
    &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sink&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;  
  &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;channel.sink.add()&lt;/code&gt;: for sending values to the other endpoint of the stream (i.e the server) using the sink property of the WebSocketChannel. &lt;/li&gt;
&lt;li&gt;To make sure we are printing not empty data we add a &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#how-to-close-the-connection"&gt;
  &lt;/a&gt;
  How to close the connection?
&lt;/h3&gt;

&lt;p&gt;Using the close method we can disconnect from the server.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  
  &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sink&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
 &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dispose&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final Code
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;If you successfully connected to the server then you would see this on the emulator. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--le92O2SX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8q2ko45qfno56jsjbui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--le92O2SX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8q2ko45qfno56jsjbui.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how your app should would look at the end:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fk62VfHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzcjif83d03h38382sjw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fk62VfHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzcjif83d03h38382sjw.gif" alt="Animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-can-you-use-it"&gt;
  &lt;/a&gt;
  Where can you use it?
&lt;/h3&gt;

&lt;p&gt;The realtime web existed before WebSockets, but it was difficult to accomplish, often slower, and based on hacking web technologies that weren't built for realtime applications. The WebSocket protocol paved the path for a genuinely real-time web and expanded the possibilities of Internet communication.&lt;/p&gt;

&lt;p&gt;USE CASES: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web-based games&lt;/li&gt;
&lt;li&gt;Chatting Applications&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flutter</category>
      <category>tutorial</category>
      <category>mobile</category>
      <category>android</category>
    </item>
    <item>
      <title>How To Format Dates In JavaScript</title>
      <author>Oyinkansola Awosan</author>
      <pubDate>Tue, 12 Oct 2021 19:29:54 +0000</pubDate>
      <link>https://dev.to/oyinkansola/how-to-format-dates-in-javascript-41nj</link>
      <guid>https://dev.to/oyinkansola/how-to-format-dates-in-javascript-41nj</guid>
      <description>&lt;p&gt;If you are a developer who uses JavaScript, you’re going to have to format dates often. Date formatting may seem complex and overwhelming for beginners, but it is pretty simple as you will agree after reading through this article.&lt;br&gt;
JavaScript’s &lt;code&gt;Date()&lt;/code&gt; function object can easily be used to display date, time, even specific to time zones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above is probably the easiest, most common way the date function is used, and since I didn’t assign another function to it, the date and time will be printed in a localized format.&lt;br&gt;
There are other simple date formatting methods available in JavaScript, one of which is the &lt;code&gt;toLocaleDateString&lt;/code&gt; method.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-tolocaledatestring-method"&gt;
  &lt;/a&gt;
  The toLocaleDateString Method
&lt;/h3&gt;

&lt;p&gt;This method lets you customize your date with a specific location of your choice and exactly the way you want it to appear. It allows you to add a locale(a language code) and an option, takes both as arguments, and gives you the time and date in your specified locale and format.&lt;br&gt;
You can use the &lt;code&gt;toLocaleDateString&lt;/code&gt; method without a locale and option. You can also use it without an option or with both a locale and an option present. The syntax for each is listed below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using locales, you need to remember the language code you want to use. For the USA, we have &lt;code&gt;en-US&lt;/code&gt;; for the United Kingdom, we have &lt;code&gt;en-UK&lt;/code&gt;, and it goes on like that. You can find the appropriate language code by searching it up.&lt;br&gt;
Using locales only, we would have the syntax in this format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;US&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;UK&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;zh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;CN&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, using locales with options gives us more room to customize so the syntax is usually like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;short&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;numeric&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;long&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;numeric&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;UK&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My preferred way of writing the same syntax is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;en&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;UK&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;weekday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;short&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;numeric&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;numeric&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;long&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both ways get the job done and allow you to customize as you want to. While weekday, day, month, year are the basic options commonly used, you can also add &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, and &lt;code&gt;second&lt;/code&gt; options if you also want to customize your time.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;weekday&lt;/code&gt; option specifies how you want your weekday to appear. You can have it abbreviated(short) or in full(long).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;month&lt;/code&gt; option specifies how you want your month to appear. You can have it abbreviated(short) or in full(long).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, and &lt;code&gt;second&lt;/code&gt; options are usually numeric, meaning they appear as numbers.&lt;/p&gt;

&lt;p&gt;There are other ways to format dates, one of which is the &lt;code&gt;Intl.DateTimeFormat&lt;/code&gt; This method is similar to the &lt;code&gt;toLocaleDateString&lt;/code&gt; and I will be covering it in my next article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you found this useful. I would like to hear from you so feel free to drop a comment or connect with me via &lt;a href="https://twitter.com/tire_nii"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/oyinawosan/"&gt;LinkedIn&lt;/a&gt;, or you can check out my &lt;a href="https://github.com/OyinOlamide"&gt;Github&lt;/a&gt; page for some cool projects.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Glitch monthly newsletter, October edition 🎃🎸</title>
      <author>jenn schiffer</author>
      <pubDate>Tue, 12 Oct 2021 19:26:33 +0000</pubDate>
      <link>https://dev.to/glitch/glitch-monthly-newsletter-october-edition-4hhc</link>
      <guid>https://dev.to/glitch/glitch-monthly-newsletter-october-edition-4hhc</guid>
      <description>&lt;p&gt;[&lt;em&gt;Hi Dev.to community! This is our monthly newsletter, published here for the community to be able to share. You can get this in your inbox for free at the start of every month by signing up for an account on &lt;a href="https://glitch.com"&gt;Glitch.com&lt;/a&gt;! And read to the end for a discount on Glitch Pro!&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;🎃 🎸 🍁 🤘 🎃 🎸 🍁 🤘 🎃 🎸 🍁 🤘 🎃 🎸 🍁 🤘&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy October, aka “beginning of Q4”, aka “Spooky season.”&lt;/em&gt; It’s one of my favorite times of the year: the weather is crisp and cool, the squirrels have pumpkins with faces to snack on well before Halloween even arrives, turtlenecks in public are more acceptable, and there are free domains.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yes, that’s right, free domains.&lt;/strong&gt; A couple of weeks ago, we &lt;a href="https://blog.glitch.com/post/introducing-playlists-the-best-way-to-curate-and-share"&gt;launched Playlists&lt;/a&gt; – a creative and fun way to curate and share your favorite Glitch apps with the world. To celebrate curation on Glitch &lt;em&gt;and&lt;/em&gt; the importance of creators being able to represent and express themselves on the Web, we partnered with Google Registry to give out 50 domains each week in October to our community’s greatest curators - which could include you! &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSf3YiZ_3kiTjMikyWVsW_2s0p6NLuESQqLeHWU6ePK8Bw3shA/viewform"&gt;Submit a playlist through this form&lt;/a&gt; for a chance at getting a free domain to claim your own wonderful space on the Web.&lt;/p&gt;

&lt;p&gt;Keep scrolling to discover the rad apps &lt;em&gt;and playlists&lt;/em&gt; the Glitch community created last month, I hope they inspire you to create and curate, too. 🎃🎸&lt;/p&gt;

&lt;p&gt;See you on &lt;a href="https://glitch.com"&gt;glitch.com&lt;/a&gt;!&lt;br&gt;
👽 Jenn, Director of Community&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS. I want to give a shout out to &lt;a href="https://glitch.com/@n1ckfg"&gt;n1ckfg&lt;/a&gt; for responding to last month’s newsletter to let me know about their app &lt;a href="https://lightningloops.glitch.me/"&gt;~lightningloops&lt;/a&gt;. It’s a multiplayer draw-to-make-sound experience made with Node, Three.js, Magenta.js, and a training set of 164 MIDI files of their piano playing – some dating back to the 90s!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;🎃 🎸 🍁 🤘 🎃 🎸 🍁 🤘 🎃 🎸 🍁 🤘 🎃 🎸 🍁 🤘&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-month-on-glitch"&gt;
  &lt;/a&gt;
  Last Month on Glitch
&lt;/h3&gt;

&lt;p&gt;Check out the &lt;a href="https://blog.glitch.com/post/last-month-on-glitch-the-september-2021-edition"&gt;September edition of Last Month on Glitch&lt;/a&gt;, which includes remixable gems like an &lt;a href="https://glitch.com/edit/#!/bubo-rss"&gt;RSS and JSON reader&lt;/a&gt;, a &lt;a href="https://elo-ranker.glitch.me"&gt;ranking tool that would be great meetings&lt;/a&gt;, &lt;a href="https://infinite-dinos.glitch.me/"&gt;an infinite supply of dinosaurs&lt;/a&gt; and more.&lt;/p&gt;

&lt;p&gt;We want to feature your creations! Share with us in the comments any links to apps you’ve made and you just might see them on Glitch.com or in your inbox very soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remix-of-the-month"&gt;
  &lt;/a&gt;
  Remix of the Month
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D2JyxRnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq9lzd73mecx4jw2o3lf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2JyxRnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq9lzd73mecx4jw2o3lf.png" alt='small screenshot of the date tracker app, "eversince"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://glitch.com/edit/#!/remix/eversince"&gt;~eversince&lt;/a&gt; - Track big dates and milestones!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-fresh-glitch-playlists-with-no-skips"&gt;
  &lt;/a&gt;
  3 Fresh Glitch Playlists with no skips!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0o85RTuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s16k1ts3g7qhjqcp37f5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0o85RTuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s16k1ts3g7qhjqcp37f5.png" alt="graphic collage of the playlists about to be mentioned"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Want to get started with Machine Learning in the browser? Check out &lt;a href="https://glitch.com/@TensorFlowJS/official-tutorials-templates"&gt;TensorFlowJS Official Tutorials and Templates&lt;/a&gt;, brought to you by the TensorFlow.js team at Google!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;...and if you need some Machine Learning inspiration, the playlist to check out is &lt;a href="https://glitch.com/@monolesan/ai-and-creativity"&gt;monolesan’s AI and Creativity&lt;/a&gt;. Her apps display the fun and surreal intersection of body movement and machine learning, with apps that disappear as you blink, punish you for poor posture, and more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Looking to go super low-res? &lt;a href="https://glitch.com/@aTylerRobertson/favicon-adventures"&gt;aTylerRobertson’s Favicon Adventures&lt;/a&gt; show you different ways to take advantage of SVGs in the app Favicon, including a chat app that I will be moving Glitch HQ to next time Slack is down.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Feeling inspired to create your own Playlists? Curate to your heart’s content and &lt;a href="https://forms.gle/uDpUiz5vbymcspJA7"&gt;submit your best Playlist&lt;/a&gt; for a chance to win a free .app or .dev domain this month!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FdubqaLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg45q8ahdrxe47hvv617.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FdubqaLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg45q8ahdrxe47hvv617.gif" alt="animated gif of our glitch pro gem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sign up for Glitch Pro with the code &lt;strong&gt;GLITCHLOVESDEVTO&lt;/strong&gt; and get 25% off. You’ll get 100% of [the superpowers Glitch Pro gives you](&lt;a href="https://glitch.com/pricing"&gt;https://glitch.com/pricing&lt;/a&gt; – like project access controls, always-on apps, and more – feel free to share this post and code with your friends, and we'll see you on Glitch.com!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>glitch</category>
      <category>newsletter</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 12 Oct 2021 19:23:15 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-mi6</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-mi6</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-it-away-tech-twitter"&gt;
  &lt;/a&gt;
  Take it away, Tech Twitter!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pascavld"&gt;@pascavld&lt;/a&gt;
 came through with a great reminder that DEV is a great place to share both in-depth articles &lt;em&gt;and&lt;/em&gt; easily digestible resources — like this roundup of favorite recent tech-related tweets. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pascavld" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lImPY2jB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iHDMKTZo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/385674/cc64d3e9-c7b5-4558-90ea-51d5de9cd14a.jpg" alt="pascavld"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pascavld/my-10-favorite-tech-twitter-tweets-from-the-past-week-3ab2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My 10 favorite Tech Twitter tweets from the past week:&lt;/h2&gt;
      &lt;h3&gt;Pasca Vlad ・ Oct 5 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-pyramid-of-challenge"&gt;
  &lt;/a&gt;
  The Pyramid of Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/theworstdev"&gt;@theworstdev&lt;/a&gt;
 says that distributing challenges across a team is one of their personal top priorities when managing. Here's why...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theworstdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwlSNxEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uIo76ojL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/59436/e2ebdd84-f763-4874-9384-3c487d854058.jpg" alt="theworstdev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theworstdev/distributing-challenge-on-building-highly-engaged-teams-2d3c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Distributing Challenge: On Building Highly Engaged Teams&lt;/h2&gt;
      &lt;h3&gt;Kurt Kemple ・ Oct 5 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#management&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#teambuilding&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#leadership&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-responsibility-of-accessibility"&gt;
  &lt;/a&gt;
  The Responsibility of Accessibility
&lt;/h2&gt;

&lt;p&gt;"Many times, I've tried to find a comprehensive, yet, not too detailed technical first-temps guide to accessibility for the team. So I decided to put together this one." &lt;br&gt;
Great job with this, &lt;a class="mentioned-user" href="https://dev.to/alenanik"&gt;@alenanik&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alenanik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WP8EhbGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--i3zBUTgY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/135491/54c8854e-48fb-4e49-9379-526061ad7edc.jpg" alt="alenanik"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alenanik/accessibility-a-gentle-introduction-1398" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;✨ Accessibility: a gentle introduction ✨ &lt;/h2&gt;
      &lt;h3&gt;Alena Nik ・ Oct 7 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#inclusive&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-friendly-breakdown-of-rest-amp-api"&gt;
  &lt;/a&gt;
  A friendly breakdown of REST &amp;amp; API
&lt;/h2&gt;

&lt;p&gt;If you caught &lt;a class="mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt;
's &lt;a href="https://community.codenewbie.org/whitep4nth3r/on-demand-talk-this-box-will-change-your-life-1jb5"&gt;talk at CodeLand 2021&lt;/a&gt;, you know that they have a knack for breaking down complex topics into fun and engaging lessons. This post is no exception!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/whitep4nth3r" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFhxX9YI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--89x-qD1I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/d64f2cf8-616d-4a73-af1c-17273b0c8545.png" alt="whitep4nth3r"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whitep4nth3r/what-is-a-rest-api-51h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is a REST API?&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor ・ Oct 5 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#api&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#informed-vsc-opinions"&gt;
  &lt;/a&gt;
  (Informed) VSC Opinions
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/neer17"&gt;@neer17&lt;/a&gt;
's hot takes on Visual Studio Code may or may not accord with your own thoughts. Either way, this post is worth a read!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/neer17" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--49K8sxmf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--krlM6unm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/591905/5aaa876f-96ba-443c-8a3b-48a7ce17f0f7.jpeg" alt="neer17"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/neer17/opinionated-guide-on-tweaking-vs-code-for-productivity-1o53" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Opinionated guide on tweaking VS Code for productivity&lt;/h2&gt;
      &lt;h3&gt;Neeraj Sewani ・ Oct 6 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#aria-first-development-approach"&gt;
  &lt;/a&gt;
  ARIA First Development Approach
&lt;/h2&gt;

&lt;p&gt;"In order to understand the tangled web of ARIA that is being seen in web development," says &lt;a class="mentioned-user" href="https://dev.to/steady5063"&gt;@steady5063&lt;/a&gt;
 "we must first understand the first rule of ARIA."&lt;/p&gt;

&lt;p&gt;Let's do it! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/steady5063" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BdwDBszY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FBhoIlZl--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/595171/c35104f3-1dc2-4747-94ab-88dd5e9574b3.png" alt="steady5063"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/steady5063/a-tangled-web-of-aria-50nk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Tangled Web of ARIA&lt;/h2&gt;
      &lt;h3&gt;Mark Steadman ・ Oct 9 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#game-on"&gt;
  &lt;/a&gt;
  Game on
&lt;/h2&gt;

&lt;p&gt;Video games are often what spark a software developer's interest in the field but the path of game development is often shrouded in mystery and misinformation. &lt;a class="mentioned-user" href="https://dev.to/unitybuddy"&gt;@unitybuddy&lt;/a&gt;
 is taking steps to change that with this article.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/unitybuddy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvRSC38G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DO5OoUcD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/591960/6633f01a-43b1-4df8-bfe2-1e05cb4587b8.png" alt="unitybuddy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/unitybuddy/become-a-game-designer-step-by-step-guide-90a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Become a Game Designer: Step by Step Guide&lt;/h2&gt;
      &lt;h3&gt;Mr. Unity Buddy ・ Oct 8 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#gamedev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>How to practice Javascript?</title>
      <author>Duomly</author>
      <pubDate>Tue, 12 Oct 2021 19:19:15 +0000</pubDate>
      <link>https://dev.to/duomly/how-to-practice-javascript-4lii</link>
      <guid>https://dev.to/duomly/how-to-practice-javascript-4lii</guid>
      <description>&lt;p&gt;This article was originally published at &lt;a href="https://www.blog.duomly.com/how-to-practice-javascript/"&gt;https://www.blog.duomly.com/how-to-practice-javascript/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#intro-on-how-to-practice-javascript"&gt;
  &lt;/a&gt;
  Intro on How to Practice Javascript?
&lt;/h2&gt;

&lt;p&gt;Javascript is a programming language that has been used for decades. It's how you make interactive websites, how you build mobile apps. And it's how most of us interact with our smartphones' virtual assistants like Siri and Alexa.&lt;/p&gt;

&lt;p&gt;Javascript is now everywhere in software development, which makes it one of the most in-demand skills on the market. That's also the reason why many people start learning Javascript. It's  very often chosen as a first coding language.&lt;/p&gt;

&lt;p&gt;To become proficient in any coding language, one needs to be familiar with the concepts of the particular language as well as syntax and algorithms- but when you already read many books and did lots of courses or one big course, you have to start getting experience and practice your new skills. &lt;/p&gt;

&lt;p&gt;Practicing Javascript is very important, because it can help you to understand everything that may seem complicated in theory. And it works the other way, when you start practicing you understand how important it is to know the theory.&lt;/p&gt;

&lt;p&gt;When I started learning how to code in Javascript objects and inheritance seemed difficult to understand, and I couldn’t imagine when I can use it in real project, but when I started to write the projects, I realized how important is to know the theory of the programming language to be able to provide a high-quality solution for the problem.&lt;/p&gt;

&lt;p&gt;Many people don't have an idea how to sharpen your Javascript skills. I already went through this stage, and I'd like to share with you my ideas on how to practice Javascript online and offline.&lt;/p&gt;

&lt;p&gt;P.S. I prepared a Youtube video about the ways I’m going to describe here, so feel free to watch it and leave me your feedback.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/U56dGJP2bxU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-build-javascript-projects"&gt;
  &lt;/a&gt;
  1. Build Javascript Projects
&lt;/h3&gt;

&lt;p&gt;Building projects as Javascript exercise is probably the most obvious point in this list, but it’s important. &lt;/p&gt;

&lt;p&gt;Don’t worry if you are a beginner and you don't know how to write the whole app. You don’t have to start from anything advanced, you can create a simple piece of code, like a function changing the colors of the button. &lt;/p&gt;

&lt;p&gt;The most important in the process is to create a code and understand how it works. This will help you to understand the theory that you already know from books, and teach you how to choose the best solutions. &lt;/p&gt;

&lt;p&gt;If you don't want to start with setting all the environment by yourself, and just want to start coding, try to use ready playgrounds, like CodePen for example.&lt;/p&gt;

&lt;p&gt;Besides experience which you can get by writing the code, you can gather all this in the repository and create your programming portfolio, which is very important when you apply for a job.&lt;/p&gt;

&lt;p&gt;Here you can find lists of projects that you can do as an exercise for practicing Javascript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projects"&gt;
  &lt;/a&gt;
  Projects:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/9-javascript-project-ideas-for-beginners-that-help-you-to-build-an-amazing-coding-portfolio/"&gt;Javascript projects for portfolio&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/9-react-js-projects-for-beginners-that-will-help-you-to-build-an-amazing-portfolio-and-get-hired/"&gt;React projects for portfolio&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/vue-js-project-ideas-for-beginners/"&gt;VueJS projects for portfolio&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/node-js-project-ideas-for-beginners/"&gt;NodeJS projects for beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-improve-existing-projects"&gt;
  &lt;/a&gt;
  2. Improve Existing Projects
&lt;/h3&gt;

&lt;p&gt;As the first point, I wrote about creating projects. The next thing you can do to train your Javascript knowledge is to improve the program you created. It's a really good exercise. &lt;/p&gt;

&lt;p&gt;If you've learned some more advanced things and have an idea how you can change what you created, do it. Try different ways to solve the same problems, measure the performance and pay attention to the coding best practices, then you are able to learn to build a high-quality solutions. &lt;/p&gt;

&lt;p&gt;The other approach is expand your projects, and adding another functionalities.&lt;/p&gt;

&lt;p&gt;For example, if you were learning HTML and CSS first and you build a layout, you can add functionality in Javascript later, or you created a listing of products, try to add a basket and make e-commerce. If you created a simple function, try to write some simple app, using that function.&lt;/p&gt;

&lt;p&gt;Remember that the main goal of the project is to learn, get some experience and improve Javascript skills. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-complete-code-challenges"&gt;
  &lt;/a&gt;
  3. Complete Code Challenges
&lt;/h3&gt;

&lt;p&gt;It may happen that you won’t be able to find an idea for a project to build, or maybe you are more advanced and would like to solve more advanced problems. &lt;/p&gt;

&lt;p&gt;Than a good idea may be to find some groups or website where you can solve code challenges. It’s also possible to find those kinds of challenges in blog posts, articles, forums, online applications and website, etc. &lt;/p&gt;

&lt;p&gt;Solving more advances issues will bring you a lot of fun and can be helpful during a technical interview as you may be asked to explain something similar. &lt;/p&gt;

&lt;p&gt;Some websites provide even real examples from interviews in such companies as Google, Amazon, or Uber. &lt;/p&gt;

&lt;p&gt;Another advantage of solving coding challenges is that you often don’t have to build an entire application to practice solving a particular issue, especially if you are solving it in a ready platform with ready test cases. It also teaches you best practices in coding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-join-an-open-source-project"&gt;
  &lt;/a&gt;
  4. Join an Open Source Project
&lt;/h3&gt;

&lt;p&gt;Joining an open source project is an advice for those who have the junior level knowledge at least. Joining to the existing, open-source project will allow you to learn on a real-life application, and learn from other developers who work with you on the project. It’s also a huge plus in your resume.&lt;/p&gt;

&lt;p&gt;Joining an open source project will teach you the way development is done. You can  get experience with tools and practices used in many jobs, like git, code reviews, etc.&lt;/p&gt;

&lt;p&gt;Besides that, collaborating with others on a project makes you learn the process of development as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-join-the-coding-community"&gt;
  &lt;/a&gt;
  5. Join the Coding Community
&lt;/h3&gt;

&lt;p&gt;Javascript, as one of the most popular programming languages, has a huge, friendly community, and you can become a part of if. There are a lot of forums, groups, or even live meetups where you can participate, read interesting content, and try solving different programming problems. &lt;/p&gt;

&lt;p&gt;This is a great way to learn from other programmers in real-life situations, and it’s always a great thing to listen to advice and tips from people with more significant experience. &lt;/p&gt;

&lt;p&gt;Also, you can start sharing your knowledge with those who start learning and need some help or advice, which will give you the feeling of achieving the next level. &lt;/p&gt;

&lt;p&gt;You can start building your profile on StackOverflow, and answer some questions, or help beginners on Reddit, or Quora as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-share-your-javascript-learning-journey-with-others"&gt;
  &lt;/a&gt;
  6. Share your Javascript Learning Journey with Others
&lt;/h3&gt;

&lt;p&gt;Nowadays, media like blogs or vlogs are really popular, and people share their everyday life with others. Why couldn’t you share your learning journey? &lt;/p&gt;

&lt;p&gt;I think it’s a great idea to start documenting what you’ve learned. It’s motivating while you get the community around your content of people who keep fingers crossed for your progress.&lt;/p&gt;

&lt;p&gt;Besides writing blog posts, or vlogging, you can start building a coding Instagram profile as well.&lt;/p&gt;

&lt;p&gt;Besides it, you can create blog posts about some Javascript programming concepts, and tips to help others, and explain it in your own way. Or do a video tutorial on how you practice your knowledge and build the application, or do a live coding stream.&lt;/p&gt;

&lt;p&gt;Possibilities are really huge, and by doing content you are learning new things as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-write-coding-articles-and-share-knowledge"&gt;
  &lt;/a&gt;
  7. Write Coding Articles and Share Knowledge
&lt;/h3&gt;

&lt;p&gt;Besides sharing your coding journey, your successes and failures, you can aslo share tips and tricks about coding. &lt;/p&gt;

&lt;p&gt;There are a number of ways you share your Javascript articles without setting up your own blog. One option is to set up an account on Medium and start sharing knowledge with people who may really need it while going through the process as well! Writing about syntax errors, parent function, arrow functions, object oriented programming can also teach you a lot. &lt;/p&gt;

&lt;p&gt;Sometimes it happens, that a Medium blog with big audience will reach out to you, and ask you to publish your content on their blog. It will give you huge visibility, and can also be a great achievement in your resume.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-you-need-to-start-practicing-javascript"&gt;
  &lt;/a&gt;
  What do you need to start practicing Javascript?
&lt;/h3&gt;

&lt;p&gt;You already know a few methods on how you can train your Javascript skills. Now, let's clarify what exactly do you need to start.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code-editor"&gt;
  &lt;/a&gt;
  Code editor
&lt;/h4&gt;

&lt;p&gt;If you decided to create your own project, you can set up your own code editor, like Visual Studio Code with plugins that will help you a lot with writing project.&lt;/p&gt;

&lt;p&gt;To start coding without big preparation, you can use any online playground.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browser"&gt;
  &lt;/a&gt;
  Browser
&lt;/h4&gt;

&lt;p&gt;Good browser with nice developer tools will be requiered as well, because with Javascript you can easily debug by console.log a lot of things. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#list-of-code-challenges-resources"&gt;
  &lt;/a&gt;
  List of code challenges resources
&lt;/h4&gt;

&lt;p&gt;Creating a list of websites or mobile apps with coding challenges, will be another step in your career.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#list-of-community-resources"&gt;
  &lt;/a&gt;
  List of community resources
&lt;/h4&gt;

&lt;p&gt;Setting accounts on platforms with Javascript communities, like StackOverflow or Reddit is something what you should do as well. &lt;/p&gt;

&lt;p&gt;Of course all steps depend on which methods you decide to select for yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion-on-how-to-practice-javascript"&gt;
  &lt;/a&gt;
  Conclusion on How to Practice Javascript
&lt;/h3&gt;

&lt;p&gt;In this article, I went through the six ideas on how to train Javascript online and offline, but most of the ideas may be used to improve different programming languages skills as well.&lt;/p&gt;

&lt;p&gt;If you need some help with building your first projects, you can join an e-learning platform where you will get a ready environment and some instructions to start, like in some of the &lt;a href="https://www.duomly.com"&gt;Duomly&lt;/a&gt; practice courses.&lt;/p&gt;

&lt;p&gt;I hope you will find this list helpful, and I encourage everyone who started learning the theory of programming to practice it as much as possible because it’s a great way to remember everything you already know in theory, and become a better programmer.&lt;/p&gt;

&lt;p&gt;Thank you for reading,&lt;br&gt;
Anna from Duomly&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Clock | CSS Neumorphism Working Analog Clock UI Design</title>
      <author>ziontutorial</author>
      <pubDate>Tue, 12 Oct 2021 19:00:41 +0000</pubDate>
      <link>https://dev.to/ziontutorial/javascript-clock-css-neumorphism-working-analog-clock-ui-design-5037</link>
      <guid>https://dev.to/ziontutorial/javascript-clock-css-neumorphism-working-analog-clock-ui-design-5037</guid>
      <description>&lt;p&gt;In this article we will design a very beautiful neumorphism Analog Clock UI design using javascript css &amp;amp; html. I am Daman sure you all are familiar with this type of design. However i think there are many beginner who do not know  &lt;a href="https://ziontutorial.com/"&gt;How to create a Working Analog Clock UI Design using html css and javascript&lt;/a&gt;. Hopefully this article will help you. &lt;/p&gt;

&lt;p&gt;So lets understand the concepts of what is basically a neumorhism design .&lt;/p&gt;

&lt;p&gt;Neumorphism is a modern design that is currently in great demand. It is much more beautiful and attractive than the general design. &lt;/p&gt;

&lt;p&gt;If you want you can &lt;a href="https://ziontutorial.com/"&gt;you can watch the live demo&lt;/a&gt; with this link  .&lt;/p&gt;

&lt;p&gt;if you are a beginner do follow my steps what i am doing to create this beautiful Analog Clock UI Design using html css and javascript. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Basic HTML Code&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
First of all add the basic html code to create this Analog Clock UI Design using html css and javascript .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;The Best clocking system using css&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shape"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shape"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"clock"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hour hand"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hour"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"minute hand"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"minute"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"seconds hand"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"seconds"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2: Basic CSS Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#080710&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.background&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;430px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;520px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="nc"&gt;.shape&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;240px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;240px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.shape&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="m"&gt;#84fab0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#8fd3f4&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-90px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.shape&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#e6b980&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="m"&gt;#eacda3&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.clock&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.07&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;320px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;320px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.07&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hand&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.hour&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.minute&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#84fab0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.seconds&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f8fc30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3: JavaScript Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hour&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;minute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;seconds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;set_clock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date_now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date_now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date_now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calc_hr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calc_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;calc_sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;  &lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;calc_hr&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;calc_min&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;calc_sec&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4: Detail explanation of some code&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. setInterval() function&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The setInterval() method, offered on the Window and Worker interfaces, repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. new Date() function&lt;/strong&gt;&lt;br&gt;
When called as a function, returns a string representation of the current date and time, exactly as new Date().toString() does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you like this design and you have learned how to make it from this article. You can watch the live demo of this design if you want and download the source code if necessary. You can also see the designs I have made many more.&lt;br&gt;
If there is any difficulty, of course you can comment.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://ziontutorial.com/"&gt;https://ziontutorial.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Five Reasons I'm Excited about Astro</title>
      <author>Sean C Davis</author>
      <pubDate>Tue, 12 Oct 2021 18:56:24 +0000</pubDate>
      <link>https://dev.to/seancdavis/five-reasons-im-excited-about-astro-129c</link>
      <guid>https://dev.to/seancdavis/five-reasons-im-excited-about-astro-129c</guid>
      <description>&lt;p&gt;When &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt; first appeared on the scene, I rolled my eyes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Another static site generator. Really? Don't we already have enough to choose from?&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#astro-fills-in-the-gaps"&gt;
  &lt;/a&gt;
  Astro Fills in the Gaps
&lt;/h2&gt;

&lt;p&gt;At first, it felt like it could have been an &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt; plugin (similar to what &lt;a href="https://slinkity.dev/"&gt;Slinkity&lt;/a&gt; is doing). I was frustrated that the Astro team felt like they needed to add a whole new thing to the ecosystem.&lt;/p&gt;

&lt;p&gt;But then I started tinkering with it and realized that Astro fills in the gaps that I've found in the other tools I've been working with recently. And that's when I got super excited!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-right-amount-of-opinion"&gt;
  &lt;/a&gt;
  The Right Amount of Opinion
&lt;/h2&gt;

&lt;p&gt;For me, what it boils down to is that I feel like Astro brings the right degree of opinion to its framework. It knows that there are widespread preferences for lower-level tooling, and so it leaves options. But it provides a solid framework for implementing those options.&lt;/p&gt;

&lt;p&gt;Now, granted, I've only built a few proofs of concept, but these are the five reasons I'm so excited about Astro:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Static-first, with progressive enhancement&lt;/li&gt;
&lt;li&gt;Supporting multiple component frameworks&lt;/li&gt;
&lt;li&gt;Native markdown support&lt;/li&gt;
&lt;li&gt;A foundation for styling&lt;/li&gt;
&lt;li&gt;Reduced boilerplate code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's take a quick look at each of these ideas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-progressive-enhancement-partial-hydration"&gt;
  &lt;/a&gt;
  1. Progressive Enhancement / Partial Hydration
&lt;/h2&gt;

&lt;p&gt;Astro lets you build your website with modern front-end component frameworks, like React and Vue, but it doesn't assume you want to run JavaScript in the browser.&lt;/p&gt;

&lt;p&gt;That's my struggle with frameworks like Gatsby and Next.js. They are super powerful, but they assume interactivity and always include JavaScript files in your built site.&lt;/p&gt;

&lt;p&gt;Astro assumes the opposite. It makes you, the developer, tell it when you &lt;em&gt;need&lt;/em&gt; interactivity. Otherwise it renders static HTML. That means that even though there is &lt;em&gt;some&lt;/em&gt; magic that happens during the build, you are still in control of your HTML code &lt;em&gt;for the most part&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-bring-your-own-framework-byof"&gt;
  &lt;/a&gt;
  2. Bring Your Own Framework (BYOF)
&lt;/h2&gt;

&lt;p&gt;It's unlikely we're going to see one component framework to rule them all. React is hugely popular, yes, but Vue and Svelte have a major following that isn't going away.&lt;/p&gt;

&lt;p&gt;Astro doesn't just say you can choose one of these frameworks, but that you can use any of them at any point. Meaning you could have a Vue component &lt;em&gt;and&lt;/em&gt; a React component in the same project. That's not necessarily a great idea, but it leaves the developer to make that decision. Astro just provides the foundation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-native-markdown-support"&gt;
  &lt;/a&gt;
  3. Native Markdown Support
&lt;/h2&gt;

&lt;p&gt;Pages can be &lt;a href="https://docs.astro.build/core-concepts/astro-components"&gt;&lt;code&gt;.astro&lt;/code&gt; components&lt;/a&gt; or &lt;a href="https://docs.astro.build/guides/markdown-content"&gt;&lt;code&gt;.md&lt;/code&gt; (markdown) files&lt;/a&gt;. It also provides &lt;a href="https://docs.astro.build/guides/markdown-content#astros-markdown-component"&gt;a markdown component&lt;/a&gt; for use in Astro components, when you only need a little markdown in a larger component.&lt;/p&gt;

&lt;p&gt;This feels like an inspiration from Eleventy — which will render markdown pages right out of the box, with the option to inject plugins as necessary.&lt;/p&gt;

&lt;p&gt;I like this in comparison to Gatsby, which requires a clunky GraphQL query and custom JavaScript code to be able to render markdown pages. Or Next.js, which intentionally takes no opinion on data fetching or page content and requires that you do all the work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-a-foundation-for-css"&gt;
  &lt;/a&gt;
  4. A Foundation for CSS
&lt;/h2&gt;

&lt;p&gt;Like BYOF, Astro provides an array of options for &lt;a href="https://docs.astro.build/guides/styling"&gt;implementing styles in the project&lt;/a&gt;, including directly in a component, using CSS modules, PostCSS, Tailwind, Sass, and more.&lt;/p&gt;

&lt;p&gt;This is great because, well, CSS is hard. And everyone has their own way of staying organized. And yet, in comparison to Eleventy, which makes no opinion on styling, a foundation of the popular options today is available for you in Astro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-reduced-boilerplate-code"&gt;
  &lt;/a&gt;
  5. Reduced Boilerplate Code
&lt;/h2&gt;

&lt;p&gt;I love that all the logic for Astro components lives in the component. I'm not a Vue guy, and I've only tinkered with Svelte, so the concept was a bit odd to me at first.&lt;/p&gt;

&lt;p&gt;But after playing around with it, I'm in love. With support for &lt;a href="https://docs.astro.build/guides/data-fetching#top-level-await"&gt;top-level await&lt;/a&gt;, you can write only the JavaScript you need within a component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-place-for-eleventy"&gt;
  &lt;/a&gt;
  A Place for Eleventy
&lt;/h2&gt;

&lt;p&gt;While it originally felt to me like Astro used Eleventy as a basis and then built something else on top of it, I'm looking at the relationship of the two differently after working with both.&lt;/p&gt;

&lt;p&gt;Eleventy is very much about reducing the amount of code you have to write in general. It supports a number of &lt;a href="https://www.11ty.dev/docs/languages/"&gt;server-side templating languages&lt;/a&gt;, and does not go after front-end component frameworks. There's a lot of power in this simplicity. It makes it a little easier to focus on the content.&lt;/p&gt;

&lt;p&gt;But the big remaining benefit of Eleventy is that you have 100% control over the HTML that is rendered to the page. You, the developer, are in absolute control of the performance of your site. And that can't be understated. You'll have to do a bit of work to maintain that and to stay organized as your site grows, but you have the control.&lt;/p&gt;

&lt;p&gt;Will I settle on one over the other? Maybe. But I think both have their place for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#power-in-developers-hands"&gt;
  &lt;/a&gt;
  Power in Developers' Hands
&lt;/h2&gt;

&lt;p&gt;So that's it. Astro provides a foundation that combines popular opinions today. It shows developers what those options are, and then asks the developer to pick one, or more. It says, "Here are three different hammers. You can pick the one that feels right, or you can use all three at different times. You just have to tell me what you want to do."&lt;/p&gt;

&lt;p&gt;And that is really exciting!&lt;/p&gt;

</description>
      <category>astro</category>
      <category>javascript</category>
      <category>jamstack</category>
      <category>ssg</category>
    </item>
    <item>
      <title>Colorize your CLI output in Node.js</title>
      <author>coder4life</author>
      <pubDate>Tue, 12 Oct 2021 18:31:51 +0000</pubDate>
      <link>https://dev.to/coder4_life/colorize-your-cli-output-in-nodejs-2c1p</link>
      <guid>https://dev.to/coder4_life/colorize-your-cli-output-in-nodejs-2c1p</guid>
      <description>&lt;p&gt;Tired of the same boring console.log output? Need to highlight some output in cli app? Here you will get some examples for red, yellow, and green colored output.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/m56GZTSXcKs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
