<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Awesome card hover effect with CSS, HTML.</title>
      <author>Modern Web</author>
      <pubDate>Sat, 10 Jul 2021 14:48:36 +0000</pubDate>
      <link>https://dev.to/kunaal438/awesome-card-hover-effect-with-css-html-3eol</link>
      <guid>https://dev.to/kunaal438/awesome-card-hover-effect-with-css-html-3eol</guid>
      <description>&lt;p&gt;Hello, I am kunaal, glad you are here Today we'll learn to create this awesome card hover effect with HTML, CSS and JS. You can see the demo below in the video tutorial.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sawVK7GATIQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;Subscribe my youtube channel&lt;/a&gt;, &lt;a href="https://www.instagram.com/modern_web_channel/"&gt;My Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>uiweekly</category>
      <category>ux</category>
    </item>
    <item>
      <title>Elixir phoenix - Render Ecto schema to json with relationships</title>
      <author>Dung Nguyen</author>
      <pubDate>Sat, 10 Jul 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/bluzky/elixir-phoenix-render-ecto-schema-to-json-with-relationships-3blj</link>
      <guid>https://dev.to/bluzky/elixir-phoenix-render-ecto-schema-to-json-with-relationships-3blj</guid>
      <description>&lt;p&gt;When writing API with Phoenix and render json to client,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;For some fields I want to keep it original value.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;For some fields, I want to do some calculation or format data before returning.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And I want to render Ecto association too.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An while working on an project at &lt;a href="https://www.onpoint.vn/"&gt;OnPoint&lt;/a&gt; I have build a little module that helps to do this easier.&lt;/p&gt;

&lt;p&gt;I have extract that module and release as a package named &lt;code&gt;JsonView&lt;/code&gt;. Its source code is hosted on github:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bluzky/json_view"&gt;https://github.com/bluzky/json_view&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use it with Phoenix.View or use it independently. It helps to manipulate data, and handle rendering association automatically.&lt;/p&gt;

&lt;p&gt;Let's take a look.&lt;/p&gt;

&lt;p&gt;First define view modules&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;  &lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;UserView&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;JsonView&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"user.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;user:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;render_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:vatar&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;PostView&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;JsonView&lt;/span&gt;

      &lt;span class="c1"&gt;# define which fields return without modifying&lt;/span&gt;
      &lt;span class="nv"&gt;@fields&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:excerpt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:cover&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="c1"&gt;# define which fields that need to format or calculate, you have to define `render_field/2` below&lt;/span&gt;
      &lt;span class="nv"&gt;@custom_fields&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:like_count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="c1"&gt;# define which view used to render relationship&lt;/span&gt;
      &lt;span class="nv"&gt;@relationships&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;author:&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;UserView&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"post.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;post:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="c1"&gt;# 1st way if `use JsonView`&lt;/span&gt;
          &lt;span class="n"&gt;render_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@custom_fields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@relationships&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;render_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:like_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="c1"&gt;# load like_count from some where&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then use it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;title:&lt;/span&gt; &lt;span class="s2"&gt;"Hello JsonView"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;excerpt:&lt;/span&gt; &lt;span class="s2"&gt;"Now you can render Json easier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;content:&lt;/span&gt; &lt;span class="s2"&gt;"Install and put it to work"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;cover:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;inserted_at:&lt;/span&gt; &lt;span class="sx"&gt;~N[2021-07-05 00:00:00]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;updated_at:&lt;/span&gt; &lt;span class="sx"&gt;~N[2021-07-09 00:00:00]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;author:&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;first_name:&lt;/span&gt; &lt;span class="s2"&gt;"Daniel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;last_name:&lt;/span&gt; &lt;span class="s2"&gt;"James"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;email:&lt;/span&gt; &lt;span class="s2"&gt;"daniel@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;avatar:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;inserted_at:&lt;/span&gt; &lt;span class="sx"&gt;~N[2021-06-30 00:00:00]&lt;/span&gt;
        &lt;span class="ss"&gt;updated_at:&lt;/span&gt; &lt;span class="sx"&gt;~N[2021-07-02 00:00:00]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;PostView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"post.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;post:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;# or invoke from PostController&lt;/span&gt;
&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"post.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;post:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the result that you can use to return from PhoenixController&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="p"&gt;%{&lt;/span&gt;
    &lt;span class="ss"&gt;title:&lt;/span&gt; &lt;span class="s2"&gt;"Hello JsonView"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;excerpt:&lt;/span&gt; &lt;span class="s2"&gt;"Now you can render Json easier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;content:&lt;/span&gt; &lt;span class="s2"&gt;"Install and put it to work"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;cover:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;like_count:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;author:&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;
        &lt;span class="ss"&gt;first_name:&lt;/span&gt; &lt;span class="s2"&gt;"Daniel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;last_name:&lt;/span&gt; &lt;span class="s2"&gt;"James"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have any feedback, please comment or &lt;a href="https://github.com/bluzky/json_view/issues/new"&gt;create an issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post I will go through step by step to write this library.&lt;/p&gt;

</description>
      <category>elixir</category>
    </item>
    <item>
      <title>Learning Python- Basic course: Day 13, Summary of the week and Stack implementation</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 10 Jul 2021 13:04:54 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-13-summary-of-the-week-and-stack-implementation-1b56</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-13-summary-of-the-week-and-stack-implementation-1b56</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-generate-multidimensional-collatz-lists-simulate-stacks-and-queues-and-write-out-biggest-piece-of-code-yet"&gt;
  &lt;/a&gt;
  Today let us generate multidimensional Collatz lists, simulate Stacks and Queues and write out biggest piece of code yet...
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#summary-of-the-week"&gt;
  &lt;/a&gt;
  Summary of the week-
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-10-lists-in-python-1hcb"&gt;Day 10&lt;/a&gt; We learnt about lists in Python, and various list functions like popping, appending, copying and much more. We then used these functions for creating a program for dynamic generation of lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-11-multidimensional-lists-and-tuples-3bfl"&gt;Day 11&lt;/a&gt; We learnt about multidimensional lists, dynamic generation of multidimensional lists and had an introduction to tuples. We learnt that tuples were non mutable lists.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/aatmaj/learning-python-basic-course-day-12-basic-algorithms-1edc"&gt;Day 12&lt;/a&gt; We used lists to make algorithms like bubble sorting, binary searching and sequential searching.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sample-questions"&gt;
  &lt;/a&gt;
  Sample questions
&lt;/h2&gt;

&lt;p&gt;Before going to stacks and queues, let us first check out an application of the dynamic generation of multidimensional lists.&lt;br&gt;
1) Make a multidimensional list which stores the sequence of the Collatz conjecture for integers 1-10.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="c1"&gt;#Append an empty list into a list
&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;#int() to prevent trailing  decimal 0. eg 5.0 will be written as 5
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[1], [2, 1], [3, 10, 5, 16, 8, 4, 2, 1], [4, 2, 1], [5, 16, 8, 4, 2, 1], [6, 3, 10, 5, 16, 8, 4, 2, 1], [7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1], [8, 4, 2, 1], [9, 28, 14, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) &lt;strong&gt;Implementation of a Stack&lt;/strong&gt; -&lt;/p&gt;

&lt;p&gt;Implement a stack, with LIFO (Last in first out). The user can push, pop, and print the stack anytime. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is the largest program we have ever written so far. See those nesting levels? But do not worry, everything is properly explained in the comments beside the code. For those new to LIFO and FIFO, please visit the &lt;a href="https://www.geeksforgeeks.org/stack-data-structure"&gt;Stack data structure&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter 'pop' for popping, 'push' for pushing, print to print and end to terminate the program....."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;#make a list named 'stack'
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#get input from the user
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'push'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#To check if the input is a number or not
&lt;/span&gt;         &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Which number to push?... "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#check 
&lt;/span&gt;            &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#push the number
&lt;/span&gt;            &lt;span class="k"&gt;break&lt;/span&gt; 
&lt;span class="c1"&gt;#if the input is number, then terminate the nested while loop, 
# else continue the loop until numeric value is obtained
&lt;/span&gt;         &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter only numbers "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#error return
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'pop'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;#pop, ie. remove and return
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'print'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#print the list
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'end'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;  &lt;span class="c1"&gt;#terminate the while loop
&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unknown command "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Thank you"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter 'pop' for popping, 'push' for pushing, print to print and end to terminate the program.....
...push
Which number to push?... 3
...poppp
Unknown command 
...pop
3
...push
Which number to push?... 4
...push
Which number to push?... k
Please enter only numbers 
Which number to push?... l
Please enter only numbers 
Which number to push?... 5
...print
['4', '5']
...pop
5
...print
['4']
...push
Which number to push?... 3
...end
Thank you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;









&lt;h2&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises-
&lt;/h2&gt;

&lt;p&gt;1) Write a program to make a list of prime numbers in an effective way. First store prime numbers in an list, then next prime number is the one which is not divisible by the previous prime numbers.&lt;/p&gt;

&lt;p&gt;2) Our stack implementation program has many hitches. Some error handling will be covered later on, but now we will focus particularly  on this error-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter 'pop' for popping, 'push' for pushing, print to print and end to terminate the program.....
...push
Which number to push?... 3
...push
Which number to push?... 2
...pop
2
...pop
3
...pop
Traceback (most recent call last):
  File "main.py", line 16, in &amp;lt;module&amp;gt;
    print(stack.pop()) #pop, ie. remove and return
IndexError: pop from empty list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This error is caused by popping from an empty list. Modify the program to error check this, and gove this output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter 'pop' for popping, 'push' for pushing, print to print and end to terminate the program.....
...push
Which number to push?... 2
...pop
2
...pop
Cannot pop from an empty list 
...

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Answer is in the learning Python repo, but I would like everyone to fork the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/4eefd0ae6e52bda6cb99360d3a0ae254e00bff1a/Basic/Day%2013/Sample%20questions/Sample%20question%202.py"&gt;sample program&lt;/a&gt; we did earlier and open a 'pull request' for this modification. For those new with Pull requests, &lt;a href="https://opensource.com/article/19/7/create-pull-request-github"&gt;here&lt;/a&gt; is a guide.&lt;/p&gt;

&lt;p&gt;3) Write a program for implementation of queue FIFO data structure. &lt;a href="https://www.geeksforgeeks.org/difference-between-stack-and-queue-data-structures/"&gt;Hint modify the Stack implementation.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sample output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter 'Add' for Adding, 'Remove' for removing, print to print and end to terminate the program.....
...Add
Which number to Add?... 4
...Add
Which number to Add?... 5
...Add
Which number to Add?... 6
...remove
Unknown command 
...Remove
4
...print
['5', '6']
...Remove
5
...Remove
6
...print
[]
...Remove
Cannot Remove from an empty list 
...end
Thank you
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, answer is in the repo, but please fork it and try on your own🙂&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;We all know that neither me nor you have ever seen each other. Learning in remote environment is a difficult, and teaching is perhaps even more difficult. Teaching is never a one-way process.
I request everyone to participate actively in this course, either through comments below or forking on Github &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt;
😃 😃 😃&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For those who have not yet made account in Dev.to, you can have a free easy sign-up using your mail or GitHub accounts. I would suggest the budding developers to create your GitHub free account right away. You would require to register sooner or later anyways&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥&lt;br&gt;
Next day will begin from Tuesday📅, Monday is reserved for the &lt;a href="https://dev.to/aatmaj/launching-matlab-mondays-a-crash-course-nb1"&gt;MATLAB MONDAY crash course&lt;/a&gt;&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>lil-csv, a 1k JS module to parse and generate CSV files </title>
      <author>Vasyl Boroviak</author>
      <pubDate>Sat, 10 Jul 2021 12:43:06 +0000</pubDate>
      <link>https://dev.to/koresar/lil-csv-a-1k-js-module-to-parse-and-generate-csv-files-471h</link>
      <guid>https://dev.to/koresar/lil-csv-a-1k-js-module-to-parse-and-generate-csv-files-471h</guid>
      <description>&lt;p&gt;I was struggling to find a small JavaScript module to parse CSV (Comma Separated Values) files. All the existing modules have one or more shortcomings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not work in browsers;&lt;/li&gt;
&lt;li&gt;Large (all I found are at least 10kb min.js.gz).&lt;/li&gt;
&lt;li&gt;Cannot parse to deep objects.&lt;/li&gt;
&lt;li&gt;Cannot generate CSV from deep objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm pretty sure CSV parsing can be implemented in less than 1Kb min.js.gz. So I did it.&lt;/p&gt;

&lt;p&gt;Please meet the powerful &lt;a href="https://www.npmjs.com/package/lil-csv"&gt;&lt;code&gt;lil-csv&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's how large it is (v1.3.1):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       1465 B: lil-csv.js.gz
       1313 B: lil-csv.js.br
       1315 B: lil-csv.modern.js.gz
       1201 B: lil-csv.modern.js.br
       1480 B: lil-csv.module.js.gz
       1327 B: lil-csv.module.js.br
       1524 B: lil-csv.umd.js.gz
       1359 B: lil-csv.umd.js.br
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are tradeoffs though.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It doesn't accept streams but only the full CSV file content as a single string. (Also remember: &lt;a href="https://stackify.com/premature-optimization-evil/"&gt;Premature optimisation is the root of all evil&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;...you tell me...&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#simple-example"&gt;
  &lt;/a&gt;
  Simple example
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#csv-to-javascript-objects"&gt;
  &lt;/a&gt;
  CSV to JavaScript objects
&lt;/h3&gt;

&lt;p&gt;Let's say you have a CSV like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name,address,course
John Smith,"123 John St, CARLTON",Advanced Calculus
Any Newman,"4a/3a Church Ave, CROYDON",Advanced Calculus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parse it to objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lil-csv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
[
  {
    "name": "John Smith",
    "address": "123 John St, CARLTON",
    "course": "Advanced Calculus"
  },
  {
    "name": "Any Newman",
    "address": "4a/3a Church Ave, CROYDON",
    "course": "Advanced Calculus"
  }
]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And stringify them back to CSV string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lil-csv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
name,address,course
John Smith,"123 John St, CARLTON",Advanced Calculus
Any Newman,"4a/3a Church Ave, CROYDON",Advanced Calculus
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, in essence stringifying plus parsing is an idempotent operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deepEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#csv-to-javascript-array-of-arrays"&gt;
  &lt;/a&gt;
  CSV to JavaScript array of arrays
&lt;/h3&gt;

&lt;p&gt;If you just need arrays of strings (not objects) then here is how you do it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
[
  ["name","address","course"],
  ["John Smith","123 John St, CARLTON","Advanced Calculus"],
  ["Any Newman","4a/3a Church Ave, CROYDON","Advanced Calculus"]
]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stringyfing back to CSV is simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
name,address,course
John Smith,"123 John St, CARLTON",Advanced Calculus
Any Newman,"4a/3a Church Ave, CROYDON",Advanced Calculus
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complex-example"&gt;
  &lt;/a&gt;
  Complex example
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#parsing-numbers-dates-booleans"&gt;
  &lt;/a&gt;
  Parsing numbers, dates, booleans
&lt;/h3&gt;

&lt;p&gt;In real world the data is rarely all strings. Often your objects have to have numbers, dates, booleans, etc. Here is how to parse CSV with all kind of data.&lt;/p&gt;

&lt;p&gt;Let's parse some strings, dates, numbers and booleans from the following CSV file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firstName,lastName,dob,price,completed
John,Smith,1999-01-15,123.00,Y
Alice,Dwarf,1991-11-24,123.00,N
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Converting custom string to the JS objects, and leaving all other data as strings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
[
  {
    "firstName": "John",
    "lastName": "Smith",
    "dob": "1999-01-15T00:00:00.000Z",
    "price": 123.00,
    "completed": true
  },
  {
    "firstName": "Alice",
    "lastName": "Dwarf",
    "dob": "1991-11-24T00:00:00.000Z",
    "price": 123.00,
    "completed": false
  }
]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generating-custom-csv"&gt;
  &lt;/a&gt;
  Generating custom CSV
&lt;/h3&gt;

&lt;p&gt;Here is how you can convert booleans to strings like "Y" and "N", and also convert JS &lt;code&gt;Date&lt;/code&gt; to calendar dates like "YYYY-MM-DD", and add custom formatting to numbers like "123.00" instead of the default "123":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;N&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
firstName,lastName,dob,price,completed
John,Smith,1999-01-15,123.55,Y
Alice,Dwarf,1991-11-24,123.55,N
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#renaming-column-headers"&gt;
  &lt;/a&gt;
  Renaming column headers
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#converting-csv-column-headers-to-js-property-names"&gt;
  &lt;/a&gt;
  Converting CSV column headers to JS property names
&lt;/h3&gt;

&lt;p&gt;Of course people rarely use JavaScript property names for column headers. You would likely see "Date of birth" in CSV file header instead of "dob". The &lt;a href="https://www.npmjs.com/package/lil-csv"&gt;&lt;code&gt;lil-csv&lt;/code&gt;&lt;/a&gt; is little but powerful. It can can handle that too.&lt;/p&gt;

&lt;p&gt;That's how you can rename headers during CSV file parsing and CSV file generation.&lt;/p&gt;

&lt;p&gt;You file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;First name,Last name,Date of birth,Price in dollars,Completed
John,Smith,1999-01-15,123.00,Y
Alice,Dwarf,1991-11-24,123.00,N
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Renaming each column to a JS object property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Last name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Date of birth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Price in dollars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;Completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
[
  {
    "firstName": "John",
    "lastName": "Smith",
    "dob": "1999-01-15T00:00:00.000Z",
    "price": 123.00,
    "completed": true
  },
  {
    "firstName": "Alice",
    "lastName": "Dwarf",
    "dob": "1991-11-24T00:00:00.000Z",
    "price": 123.00,
    "completed": false
  }
]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#renaming-js-properties-to-real-world-column-headers"&gt;
  &lt;/a&gt;
  Renaming JS properties to real world column headers
&lt;/h3&gt;

&lt;p&gt;I hope this code is easy to read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Last name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Date of birth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Price in dollars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;N&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
First name,Last name,Date of birth,Price in dollars,Completed
John,Smith,1999-01-15,123.00,Y
Alice,Dwarf,1991-11-24,123.00,N
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deep-objects-support"&gt;
  &lt;/a&gt;
  Deep objects support!
&lt;/h2&gt;

&lt;p&gt;Here comes the true powers of &lt;a href="https://www.npmjs.com/package/lil-csv"&gt;&lt;code&gt;lil-csv&lt;/code&gt;&lt;/a&gt;. You can parse CSV rows &lt;strong&gt;directly&lt;/strong&gt; to deep objects like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="err"&gt;order_id:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;51234&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="err"&gt;recipient:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="err"&gt;firstName:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="err"&gt;lastName:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="err"&gt;dob:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1999-01-15T00:00:00.000Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="err"&gt;address:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="err"&gt;street:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"123 John St, CARLTON"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="err"&gt;country:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"AU"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parsing-csv-rows-as-js-deep-objects"&gt;
  &lt;/a&gt;
  Parsing CSV rows as JS deep objects
&lt;/h3&gt;

&lt;p&gt;Let's parse this CSV to the above object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ID,First name,Last name,Date of birth,Address,Country
51234,John,Smith,1999-01-15,"123 John St, CARLTON",AU
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All you need is to &lt;strong&gt;rename headers with dot notation&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;order_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Last name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Date of birth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.dob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.address.street&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.address.country&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works similar when generating a CSV file from deep data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;order_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Last name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.dob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Date of birth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.address.street&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recipient.address.country&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Country&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*
ID,First name,Last name,Date of birth,Address,Country
51234,John,Smith,1999-01-15,"123 John St, CARLTON",AU
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code the "Date of birth" column gets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;deeply set/accessed within an object.&lt;/li&gt;
&lt;li&gt;parsed/stringified in a custom way;&lt;/li&gt;
&lt;li&gt;renamed;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#afterword"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h2&gt;

&lt;p&gt;You get all that power from 1 TCP packet, meaning less than &lt;a href="https://stackoverflow.com/questions/2613734/maximum-packet-size-for-a-tcp-connection"&gt;1460 bytes&lt;/a&gt;. Or even fewer bytes if you are using only one of the two functions (treeshaking is supported by &lt;a href="https://www.npmjs.com/package/lil-csv"&gt;&lt;code&gt;lil-csv&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you need additional features from &lt;code&gt;lil-csv&lt;/code&gt; then feel free open an issue here: &lt;a href="https://github.com/flash-oss/lil-csv/issues"&gt;https://github.com/flash-oss/lil-csv/issues&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>csv</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>All about HTTPS (part-4)</title>
      <author>Akash Kumar Sikarwar</author>
      <pubDate>Sat, 10 Jul 2021 12:35:54 +0000</pubDate>
      <link>https://dev.to/akashkumarsikarwar/all-about-https-part-4-22ga</link>
      <guid>https://dev.to/akashkumarsikarwar/all-about-https-part-4-22ga</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-differences-between-https-ssl-and-tls"&gt;
  &lt;/a&gt;
  The differences between HTTPS, SSL and TLS
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/akashkumarsikarwar/all-about-https-part-3-1pd7"&gt;previous post&lt;/a&gt; we talked about the handshake process between browser and the server. There we mentioned various terms like HTTPS, SSL and TLS.&lt;/p&gt;

&lt;p&gt;It's easy to confuse these terms and use them interchangeably. Let's look into each one and see how they differ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#https"&gt;
  &lt;/a&gt;
  HTTPS
&lt;/h3&gt;

&lt;p&gt;HTTPS is the secured version of HTTP: HyperText Transfer Protocol. It is the protocol used by your browser and web servers to communicate and exchange information. When that exchange of data is encrypted with SSL/TLS, then we call it HTTPS. The 'S' stands for Secure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssl"&gt;
  &lt;/a&gt;
  SSL
&lt;/h3&gt;

&lt;p&gt;SSL stands for 'Secure Sockets Layer'. A protocol created by Netscape. It is a dinosaur by Internet standards.&lt;br&gt;
Netscape developed it in the year 1994. It was envisioned as a system that will ensure secure communication between client and server systems on the web. Gradually, the IETF (the Internet Engineering Task Force) picked up the protocol and standardized it as a protocol. Two versions of SSL followed that ironed out the vulnerabilities found in version 1. The current SSL version is SSL 3.0. &lt;/p&gt;

&lt;p&gt;If we look at below history, we can assume that IETF seriously attempted to secure online data with robust security at its best.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SSL 1.0&lt;/strong&gt; - Due to security flaw, SSL 1.0 was never released.&lt;br&gt;
&lt;strong&gt;SSL 2.0&lt;/strong&gt; - First public release of it by Netscape in February 1995 but there were design flaws that compelled Netscape to release SSL v.3. However, SSL v.2.0 was deprecated in 2011.&lt;br&gt;
&lt;strong&gt;SSL 3.0&lt;/strong&gt; - SSL v3 was an upgrade version of earlier version SSL v2.0 that fixed few security design flaws of SSL v2.0 However, SSL v3.0 deemed insecure in 2004 due to the POODLE attack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#tls"&gt;
  &lt;/a&gt;
  TLS
&lt;/h3&gt;

&lt;p&gt;TLS means Transport Layer Security, which is a cryptographic protocol successor of SSL 3.0, which was released in 1999.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TLS 1.0&lt;/strong&gt; - TLS 1.0 which was upgrade of SSL v.3.0 released in January 1999 but it allows connection downgrade to SSL v.3.0.&lt;br&gt;
&lt;strong&gt;TLS 1.1&lt;/strong&gt; - After that, TLS v1.1 was released in April 2006, which was an update of TLS 1.0 version. It added protection against CBC (Cipher Block Chaining) attacks. In March 2020, Google, Apple, Mozilla and Microsoft has announced for deprecation of TLS 1.0 and 1.1 versions.&lt;br&gt;
&lt;strong&gt;TLS 1.2&lt;/strong&gt; - TLS v1.2 was released in 2008 that allows the specification of hash algorithm used by the client and server. It allows authenticated encryption, which added more support with extra data modes. TLS 1.2 was able to verify length of data based on cipher suite.&lt;br&gt;
&lt;strong&gt;TLS 1.3&lt;/strong&gt; - TLS v1.3 was released in August 2018 and had major features that differentiate it with its earlier version TLS v1.2 like removal of MD5 and SHA-224 support, require digital signature when earlier configuration used, compulsory use of Perfect forward secrecy in case of public-key based key exchange, handshake messages will now be encrypted after “Server Hello”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In nutshell, SSL is obsolete and TLS is the new  SSL protocol as modern encryption standard being used by everybody. Technically, TLS is more accurate, but everyone knows SSL.&lt;/p&gt;

&lt;p&gt;Thanks for reading this. Until next time.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>https</category>
    </item>
    <item>
      <title>SQL, NoSQL and beyond</title>
      <author>Julien Maury</author>
      <pubDate>Sat, 10 Jul 2021 12:04:01 +0000</pubDate>
      <link>https://dev.to/jmau111/sql-nosql-and-beyond-19kf</link>
      <guid>https://dev.to/jmau111/sql-nosql-and-beyond-19kf</guid>
      <description>&lt;p&gt;SQL stands for &lt;strong&gt;S&lt;/strong&gt;tructure &lt;strong&gt;Q&lt;/strong&gt;uery &lt;strong&gt;L&lt;/strong&gt;anguage. You use it to create, update and delete data in a relational database where available data is organized into related tables.&lt;/p&gt;

&lt;p&gt;While SQL databases are the most common ones, NoSQL databases can be a great alternative and make more sense for your next project, but be careful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;It's not an exhaustive guide but an introduction with simple words. I want to focus on using the suitable model according to your project's context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-relational-model"&gt;
  &lt;/a&gt;
  The relational model
&lt;/h2&gt;

&lt;p&gt;Relational databases contain tables that consist of rows and columns. You can see columns (also called "fields") as generic labels for elements in rows and rows as individual records with values:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;first_name&lt;/th&gt;
&lt;th&gt;last_name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1001001&lt;/td&gt;
&lt;td&gt;Kobe&lt;/td&gt;
&lt;td&gt;Bryant&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We have a database called "NBA" that contains all games, players, and teams. The amount of information is pretty massive.&lt;/p&gt;

&lt;p&gt;We need a model that scales, a database where we can store, update and cross-check data. To achieve that, we must &lt;strong&gt;structure the information&lt;/strong&gt;. Otherwise, we'll have many &lt;strong&gt;duplicates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Tables, also called "relations" in the relational model, allow for categorizing data. For example, our NBA database could have five tables: &lt;code&gt;player&lt;/code&gt;, &lt;code&gt;team&lt;/code&gt;, &lt;code&gt;game&lt;/code&gt;, &lt;code&gt;player_stats&lt;/code&gt;, and &lt;code&gt;team_stats&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All data in the same table have the same columns, and in records (rows), the data must be normalized. In other words, the data follow the same &lt;strong&gt;schema&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Besides, there are relations between tables. In our example, a player belongs to a team, and each game is a sports meeting between two teams. Each player generates various statistics (&lt;code&gt;player_stats&lt;/code&gt;) during a game.&lt;/p&gt;

&lt;p&gt;People often use the word &lt;strong&gt;cardinality&lt;/strong&gt; to describe those relationships. The most common terms are &lt;strong&gt;One-to-One&lt;/strong&gt;, &lt;strong&gt;One-to-Many&lt;/strong&gt;, and &lt;strong&gt;Many-to-Many&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One or several fields can be connected to one or several fields of another table. That is why the relational model is handy to cross data with queries. It's easy to merge data with the same columns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nosql-model"&gt;
  &lt;/a&gt;
  The NoSQL model
&lt;/h2&gt;

&lt;p&gt;The relational model has been the most popular model for decades, and it's still widely used, but it's not the only approach.&lt;/p&gt;

&lt;p&gt;Not all applications need a relational database. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://redis.io/%5D"&gt;Redis&lt;/a&gt;, &lt;a href="https://www.elastic.co/elasticsearch/"&gt;Elasticsearch&lt;/a&gt; or &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; are practical examples of NoSQL systems. For our example, you could have only two columns, &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;, and almost all data inside the column &lt;code&gt;value&lt;/code&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1001001&lt;/td&gt;
&lt;td&gt;{ "first_name": "Kobe", "last_name": "Bryant", "age": 37 }&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;N.B.: This key-value database is not the only type of NoSQL system, but that should give you a hint.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The need for &lt;strong&gt;horizontal scalability&lt;/strong&gt; is essential nowadays. Websites and applications rarely need full server capacity all the time. There are peaks.&lt;/p&gt;

&lt;p&gt;NoSQL systems allow for &lt;strong&gt;distributing&lt;/strong&gt; the database (~ pool), which is extremely hard with relational systems that usually scale-up (vertically, so you need to increase the server capacity).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-careful-with-nosql"&gt;
  &lt;/a&gt;
  Be careful with NoSQL
&lt;/h2&gt;

&lt;p&gt;While modern architectures love NoSQL databases, it does not come without technical challenges and some maintenance issues. &lt;/p&gt;

&lt;p&gt;Information is often stored in a "JSON-like" format or as a key-value pair of serialized data, without any pre-defined schema, which is handy.&lt;/p&gt;

&lt;p&gt;However, it's sometimes harder to maintain, and it's not uncommon to write more and more complex queries in the successive iterations of the project. It can lead to worse performances, which is unfortunate because you expect high performance and low latency from a NoSQL system.&lt;/p&gt;

&lt;p&gt;Besides, it's not uncommon to see &lt;em&gt;non-standard&lt;/em&gt; usages, with relational queries in a non-relational system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-when-to-use-sql-and-nosql"&gt;
  &lt;/a&gt;
  So when to use SQL and NoSQL?
&lt;/h2&gt;

&lt;p&gt;As we saw, you don't need to respect a pre-predefined schema with NoSQL. If your application requires many structural changes, so it's a dynamic model, then NoSQL makes sense.&lt;/p&gt;

&lt;p&gt;If your priority is &lt;strong&gt;Low latency and Availability over Consistency&lt;/strong&gt;, it makes sense too. They call it "eventual consistency", because it takes time to replicate the data on all servers, and each server returns its copy of the data even if it does not have the latest version.&lt;/p&gt;

&lt;p&gt;When you read about SQL and NoSQL, you often stumble upon two acronyms: &lt;strong&gt;ACID&lt;/strong&gt; and &lt;strong&gt;BASE&lt;/strong&gt;. ACID stands for "atomicity, consistency, isolation, and durability". BASE stands for "Basically Available, soft state and eventual consistency".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The BASE approach according to Brewer forfeits the ACID properties of consistency and isolation in favor of "availability, graceful degradation, and performance"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ACID&lt;/th&gt;
&lt;th&gt;BASE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Strong consistency&lt;/td&gt;
&lt;td&gt;Weak consistency – stale data OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Isolation&lt;/td&gt;
&lt;td&gt;Availability first&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focus on "commit"&lt;/td&gt;
&lt;td&gt;Best effort&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nested transactions&lt;/td&gt;
&lt;td&gt;Approximate answers OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Availability?&lt;/td&gt;
&lt;td&gt;Aggressive (optimistic)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Conservative (pessimistic)&lt;/td&gt;
&lt;td&gt;Simpler!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Difficult evolution (e. g. schema)&lt;/td&gt;
&lt;td&gt;Faster, Easier evolution&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://www.christof-strauch.de/nosqldbs.pdf"&gt;Source: NoSQL Databases - Christof Strauch&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Do not believe that "NoSQL is for large scale and SQL is for low scale". That would be a dangerous oversimplification.&lt;/p&gt;

&lt;p&gt;SQL does make sense for low-scale projects, but the large scale does not necessarily mean NoSQL, especially when you need to run relational queries. Amazon and other giants of the cloud have solutions for that with low-latency read replicas.&lt;/p&gt;

&lt;p&gt;Beyond that, it's not uncommon to combine the two approaches with a relational database for CRUD operations (create, read, update, delete), a NoSQL system as an object cache like Redis, and another NoSQL as a search engine like Elasticsearch.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@possessedphotography?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Possessed Photography&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/chain?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>database</category>
    </item>
    <item>
      <title>Create a simple number guessing game in python</title>
      <author>Code_Jedi</author>
      <pubDate>Sat, 10 Jul 2021 11:45:27 +0000</pubDate>
      <link>https://dev.to/code_jedi/create-a-simple-number-guessing-game-in-python-41l</link>
      <guid>https://dev.to/code_jedi/create-a-simple-number-guessing-game-in-python-41l</guid>
      <description>&lt;p&gt;Hey everyone👋, in this beginner tutorial, I'll show how you can make a super simple number guessing game in python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started!
&lt;/h3&gt;




&lt;p&gt;First, you will need to require the "random" library in order to generate random numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, print the conditions of the game at the beginning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random

print("Pick a number from 1 to 9")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then define the function in which you will be writing your main code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random

print("Pick a number from 1 to 9")

def game():
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first things you'll need to put in this function are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random

print("Pick a number from 1 to 9")

def game():
    random_number = random.randrange(1, 10)
    typed_number = int(input("Type your number here: "))
    print(random_number)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Using the "randrange()" function, you will randomly generate a number ranging from 1 to 9, then you will ask the player to type a number using the "input()" function and finally print the randomly generated number to let the player compare the random number with his/her typed number.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-final-part-of-your-function-should-look-like-this"&gt;
  &lt;/a&gt;
  The final part of your function should look like this:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int_rand = int(random_number)
if (int_rand == typed_number):
  print("You win!!!")
else:
  print("Try again")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#let-me-explain-each-line-of-code"&gt;
  &lt;/a&gt;
  Let me explain each line of code:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;1. "int_rand" will convert "random_number" into an integer using the "int()" function.&lt;/li&gt;
&lt;li&gt;2, 3, 4. This will compare "int_rand" with "typed_number", if both numbers are equal to each other, "You win!!!" will be printed on the screen.&lt;/li&gt;
&lt;li&gt;5, 6. if both numbers aren't equal to each other, "Try again" will be printed on the screen.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;At this point, your code should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random

print("Pick a number from 1 to 9")

def game():
    random_number = random.randrange(1, 10)
    typed_number = int(input("Type your number here: "))
    print(random_number)
    int_rand = int(random_number)
    if (int_rand == typed_number):
      print("You win!!!")
    else:
      print("Try again")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Lastly, you need to put this function in an infinite while loop so that the game won't stop until the player guesses correctly, you will also need to put a "break" function inside the if statement so that once the player guessed correctly, the function would break out of the while loop, therefor stopping the guessing game, and as a last step, put the "game()" function at the end of the file to execute the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import random

print("Pick a number from 1 to 9")

def game():
    while 1 &amp;lt; 100:
        random_number = random.randrange(1, 10)
        typed_number = int(input("Type your number here: "))
        print(random_number)
        int_rand = int(random_number)
        if (int_rand == typed_number):
          print("You win!!!")
          break
        else:
          print("Try again")

game()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#thats-it-for-this-beginner-python-tutorial-if-you-have-any-problems-with-the-code-let-me-know-in-the-comments"&gt;
  &lt;/a&gt;
  That's it for this beginner python tutorial, if you have any problems with the code, let me know in the comments.
&lt;/h3&gt;

&lt;p&gt;Byeeeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>projects</category>
      <category>random</category>
    </item>
    <item>
      <title>Impress hiring managers by presenting your React projects like a pro - Part 2</title>
      <author>Johannes Kettmann</author>
      <pubDate>Sat, 10 Jul 2021 11:41:53 +0000</pubDate>
      <link>https://dev.to/profydev/impress-hiring-managers-by-presenting-your-react-projects-like-a-pro-part-2-3eje</link>
      <guid>https://dev.to/profydev/impress-hiring-managers-by-presenting-your-react-projects-like-a-pro-part-2-3eje</guid>
      <description>&lt;p&gt;In part 1 of this series we saw how you can build impressive portfolio projects by working like a professional developer in a real team. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The idea in a nutshell:&lt;/strong&gt; you build your project with a structured approach. You start with designs, create tasks, and only then write the code. You use the tools, workflows, and libraries that also real companies use. You write custom and responsive CSS. Your app contains state and business logic. You write concise yet descriptive Git commit messages and work on branches.&lt;/p&gt;

&lt;p&gt;And if you really want to stand out, write automated tests with React Testing Library. That will put you way ahead of a typical Junior candidate.&lt;/p&gt;

&lt;p&gt;Now it's time for part 2 of this series.&lt;/p&gt;




&lt;p&gt;Let's say you built your portfolio project. You used all the advice from part 1. The code quality is alright. In short: You're a great candidate for a Junior React position.&lt;/p&gt;

&lt;p&gt;Finally, you take the leap and send out job applications. You're confident that you'll get some interviews soon.&lt;/p&gt;

&lt;p&gt;But nothing happens. Nada. No replies. No interviews. Just crickets...&lt;/p&gt;

&lt;p&gt;If only somebody could tell you what's going on. &lt;/p&gt;

&lt;p&gt;The thing is, you need to understand how the hiring process works. Entry-level positions get swamped with applications. And the people reviewing the applications on a technical level (e.g. team leads or developers) have other things to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;See for yourself. Let's switch sides for a moment.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's pretend you're a developer at a company. A Junior dev applied for an open position. And &lt;strong&gt;you're the one who has to review the portfolio projects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You have a busy day. You're in-between meetings and need to finish a feature you've been working on. Not much time to spend on this candidate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now try to observe yourself:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How do you scan the information in this repository?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CcKrtjJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/WUQMDFNJTByeBibYZdDW" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CcKrtjJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/WUQMDFNJTByeBibYZdDW" alt="Untitled 3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My eyes quickly scan the folders and files. The folder structure looks pretty standard for a React project at first glance.&lt;/p&gt;

&lt;p&gt;In a matter of split seconds, they arrive at the bottom where we can see the content of the README file.&lt;/p&gt;

&lt;p&gt;This project obviously was created using create-react-app. The README wasn't changed, so we can dismiss it. Not much information there.&lt;/p&gt;

&lt;p&gt;If we were carefully investigating the repository we'd see that there are open issues, pull requests as well as a dozen branches. This might indicate a good workflow. &lt;/p&gt;

&lt;p&gt;But let's face it. We're in a hurry, so probably we won't even notice these details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what would you being the reviewer do next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You only have a few options. The most likely ones are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start opening files more or less randomly.&lt;/li&gt;
&lt;li&gt;Have a look at the commit history.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My guess: Most people would start opening files.&lt;/p&gt;

&lt;p&gt;Now it all depends on how much time you invest and how quickly you get bored. In any case, you are likely to miss some impressive code hidden in the file structure.&lt;/p&gt;

&lt;p&gt;You (the reviewer) have to decide &lt;em&gt;by chance&lt;/em&gt; if I'm a great candidate for that Junior position.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can we fix this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me show you another version of the same repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azApRTLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/PyVKEOdWTiCN3cnm71s3" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azApRTLn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/PyVKEOdWTiCN3cnm71s3" alt="Untitled 4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the same repository. I only changed the README and the About section at the top right.&lt;/p&gt;

&lt;p&gt;As a reviewer, my eyes again would quickly arrive at the README content at the bottom. But instead of dismissing it right away, I'd stop and start reading the section &lt;strong&gt;"How I worked on this project"&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Oh wow, this guy knows his sh... On his resume, I saw he has no job experience. But that's pretty much how we work in our team. I bet he'd quickly be productive." - Made-up conversation with myself&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next section &lt;strong&gt;"How to navigate this project"&lt;/strong&gt; points me to the most important parts of the application. If the code behind these links looks OK, I'm ready to give this candidate a go.&lt;/p&gt;

&lt;p&gt;The section &lt;strong&gt;"Why I built the project this way"&lt;/strong&gt; reveals information about the reasoning behind some technical decisions. That's really great because it allows the reviewer to tap into your thought process.&lt;/p&gt;

&lt;p&gt;A final section &lt;strong&gt;"If I had more time I would change this"&lt;/strong&gt; shows that you can take a step back and self-reflect. Very important for working in a team.&lt;/p&gt;

&lt;p&gt;Only at the very bottom, you can see the available scripts. These almost don't matter anymore. Probably nobody will download the project and run it anyway. But it's good documentation practice to have them.&lt;/p&gt;

&lt;p&gt;There's one final advantage of writing such a README that I didn't mention yet:&lt;/p&gt;

&lt;p&gt;By writing all this documentation you not only guide the reviewer through the project. &lt;strong&gt;You also prove your communication skills.&lt;/strong&gt; Any experienced hiring manager knows how important yet rare these are among engineers.&lt;/p&gt;

&lt;p&gt;So invest some time into writing a clear and descriptive README. Write it. Let it rest. Then return a couple of days later to review it with a fresh pair of eyes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-2-summary"&gt;
  &lt;/a&gt;
  Part 2: Summary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;the README might be the most important page of your project&lt;/li&gt;
&lt;li&gt;you can make sure that the reviewer sees what they need to see&lt;/li&gt;
&lt;li&gt;you can impress the hiring manager with your communication skills&lt;/li&gt;
&lt;li&gt;you will appear a lot more professional&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short: a clean and informative README will let you stand out from other candidates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://profy.dev/article/react-projects-for-your-portfolio#nl-4385926o3k2j5"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--flpZl0un--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7bmn3fug68k0frmbwyt.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next days I'll release part 3 here on dev.to. I'll share 3 project ideas that will make a great impression on your React portfolio. If you don't want to wait you can read the whole series on a single page on &lt;a href="https://profy.dev/article/react-projects-for-your-portfolio"&gt;Profy.dev&lt;/a&gt; already now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Illustration based on &lt;a href="https://www.drawkit.io/"&gt;drawkit.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>career</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Responsive Website Design Using HTML CSS and JavaScript with Animation and Smooth Scrolling</title>
      <author>Kishan Sheth</author>
      <pubDate>Sat, 10 Jul 2021 11:31:41 +0000</pubDate>
      <link>https://dev.to/koolkishan/responsive-website-design-using-html-css-and-javascript-with-animation-and-smooth-scrolling-jf</link>
      <guid>https://dev.to/koolkishan/responsive-website-design-using-html-css-and-javascript-with-animation-and-smooth-scrolling-jf</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/92D0phDyWIA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-find-the-source-code-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  You can find the source code in the description of the video.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#subscribe-to-the-channel-if-you-like-the-design"&gt;
  &lt;/a&gt;
  Subscribe to the channel if you like the design.
&lt;/h2&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>15 Custom Hooks to Make your React Component Lightweight</title>
      <author>Nilanth</author>
      <pubDate>Sat, 10 Jul 2021 11:12:32 +0000</pubDate>
      <link>https://dev.to/nilanth/15-custom-hooks-to-make-your-react-component-lightweight-17cd</link>
      <guid>https://dev.to/nilanth/15-custom-hooks-to-make-your-react-component-lightweight-17cd</guid>
      <description>&lt;p&gt;Here are the 15 custom hooks to make your React component lightweight&lt;/p&gt;

&lt;p&gt;React hooks is the trending word in the React community. I hope every React developer knows what hooks are. In simple words, hooks give the advantage to use lifecycle methods in functional components and also encourages us to write functional components.&lt;/p&gt;

&lt;p&gt;Let’s dive into custom hooks! Custom hooks let you extract component logic into a reusable function, which increases component splitting and reliability. Here we will see 15 &lt;a href="(https://github.com/streamich/react-use)"&gt;react-use&lt;/a&gt; package custom hooks that make our component lightweight.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-useidle"&gt;
  &lt;/a&gt;
  1. useIdle
&lt;/h2&gt;

&lt;p&gt;The useIdle hook tracks if the user on the page is idle. You can pass two params — one is time to consider idle and initialState, which allows the setting user is idle initially.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useIdle} from 'react-use';
const Demo = () =&amp;gt; {
  const isIdle = useIdle(3e3);
return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;User is idle: {isIdle ? 'Yes 😴' : 'Nope'}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-useinterval"&gt;
  &lt;/a&gt;
  2. useInterval
&lt;/h2&gt;

&lt;p&gt;This hook to use for interval-related functionalities. Which handles &lt;code&gt;clearInterval&lt;/code&gt; on component unmount automatically. It also allows pausing the interval by setting the delay to null.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as React from 'react';
import {useInterval} from 'react-use';
const Demo = () =&amp;gt; {
  const [count, setCount] = React.useState(0);
  const [delay, setDelay] = React.useState(1000);
  const [isRunning, toggleIsRunning] = useBoolean(true);
useInterval(
    () =&amp;gt; {
      setCount(count + 1);
    },
    isRunning ? delay : null
  );
return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;
        delay: &amp;lt;input value={delay} onChange={event =&amp;gt; setDelay(Number(event.target.value))} /&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;h1&amp;gt;count: {count}&amp;lt;/h1&amp;gt;
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={toggleIsRunning}&amp;gt;{isRunning ? 'stop' : 'start'}&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-usescroll"&gt;
  &lt;/a&gt;
  3. useScroll
&lt;/h2&gt;

&lt;p&gt;This hook is used to listen to the scroll event of the element and rerenders on scrolling. No required to add the JavaScript event listeners manually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useScroll} from 'react-use';
const Demo = () =&amp;gt; {
  const scrollRef = React.useRef(null);
  const {x, y} = useScroll(scrollRef);
return (
    &amp;lt;div ref={scrollRef}&amp;gt;
      &amp;lt;div&amp;gt;x: {x}&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;y: {y}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-usetoggle"&gt;
  &lt;/a&gt;
  4. useToggle
&lt;/h2&gt;

&lt;p&gt;This hook is used to toggle between two states like TRUE, FALSE. This approach reduces the manual logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useToggle} from 'react-use';
const Demo = () =&amp;gt; {
  const [on, toggle] = useToggle(true);
return (
    &amp;lt;div&amp;gt;
      &amp;lt;div&amp;gt;{on ? 'ON' : 'OFF'}&amp;lt;/div&amp;gt;
      &amp;lt;button onClick={toggle}&amp;gt;Toggle&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; toggle(true)}&amp;gt;set ON&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; toggle(false)}&amp;gt;set OFF&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-usetitle"&gt;
  &lt;/a&gt;
  5. useTitle
&lt;/h2&gt;

&lt;p&gt;This hook is used to set the page title.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useTitle} from 'react-use';
const Demo = () =&amp;gt; {
  useTitle('Hello world!');
return null;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-useprevious"&gt;
  &lt;/a&gt;
  6. usePrevious
&lt;/h2&gt;

&lt;p&gt;This hook is used to get the previous state. We might not require to write custom logic to get the previous state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {usePrevious} from 'react-use';
const Demo = () =&amp;gt; {
  const [count, setCount] = React.useState(0);
  const prevCount = usePrevious(count);
return (
    &amp;lt;p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;+&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setCount(count - 1)}&amp;gt;-&amp;lt;/button&amp;gt;
      &amp;lt;p&amp;gt;
        Now: {count}, before: {prevCount}
      &amp;lt;/p&amp;gt;
    &amp;lt;/p&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-usesetstate"&gt;
  &lt;/a&gt;
  7. useSetState
&lt;/h2&gt;

&lt;p&gt;This hook is used to merge objects into their current state, similar to the &lt;code&gt;this.setState&lt;/code&gt; in the class component. If you are using multiple states, it can be brought down to a single object state using &lt;code&gt;useSetState&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useSetState} from 'react-use';
const Demo = () =&amp;gt; {
  const [state, setState] = useSetState({});
return (
    &amp;lt;div&amp;gt;
      &amp;lt;pre&amp;gt;{JSON.stringify(state, null, 2)}&amp;lt;/pre&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setState({hello: 'world'})}&amp;gt;hello&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; setState({foo: 'bar'})}&amp;gt;foo&amp;lt;/button&amp;gt;
      &amp;lt;button 
        onClick={() =&amp;gt; {
          setState((prevState) =&amp;gt; ({
            count: (prevState.count || 0) + 1,
          }))
        }}
      &amp;gt;
        count
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-usecookie"&gt;
  &lt;/a&gt;
  8. useCookie
&lt;/h2&gt;

&lt;p&gt;This hook is used to return the current value of a cookie, a callback to update the cookie and a callback to delete the cookie.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useCookie } from "react-use";
const Demo = () =&amp;gt; {
  const [value, updateCookie, deleteCookie] = useCookie("my-cookie");
  const [counter, setCounter] = useState(1);
useEffect(() =&amp;gt; {
    deleteCookie();
  }, []);
const updateCookieHandler = () =&amp;gt; {
    updateCookie(`my-awesome-cookie-${counter}`);
    setCounter(c =&amp;gt; c + 1);
  };
return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;Value: {value}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={updateCookieHandler}&amp;gt;Update Cookie&amp;lt;/button&amp;gt;
      &amp;lt;br /&amp;gt;
      &amp;lt;button onClick={deleteCookie}&amp;gt;Delete Cookie&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-usepermission"&gt;
  &lt;/a&gt;
  9. usePermission
&lt;/h2&gt;

&lt;p&gt;This hook is used to get the permission status of the browser API. Pass the API name to get the permission status.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {usePermission} from 'react-use';
const Demo = () =&amp;gt; {
  const state = usePermission({ name: 'microphone' });
return (
    &amp;lt;pre&amp;gt;
      {JSON.stringify(state, null, 2)}
    &amp;lt;/pre&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-usedebounce"&gt;
  &lt;/a&gt;
  10. useDebounce
&lt;/h2&gt;

&lt;p&gt;This hook is used to delay the event until the wait time is completed. In the blew code the setState is performed after the wait time is completed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Demo = () =&amp;gt; {
  const [state, setState] = React.useState('Typing stopped');
  const [val, setVal] = React.useState('');
  const [debouncedValue, setDebouncedValue] = React.useState('');
const [, cancel] = useDebounce(
    () =&amp;gt; {
      setState('Typing stopped');
      setDebouncedValue(val);
    },
    2000,
    [val]
  );
return (
    &amp;lt;div&amp;gt;
      &amp;lt;input
        type="text"
        value={val}
        placeholder="Debounced input"
        onChange={({ currentTarget }) =&amp;gt; {
          setState('Waiting for typing to stop...');
          setVal(currentTarget.value);
        }}
      /&amp;gt;
      &amp;lt;div&amp;gt;{state}&amp;lt;/div&amp;gt;
      &amp;lt;div&amp;gt;
        Debounced value: {debouncedValue}
        &amp;lt;button onClick={cancel}&amp;gt;Cancel debounce&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#11-usegeolocation"&gt;
  &lt;/a&gt;
  11. useGeolocation
&lt;/h2&gt;

&lt;p&gt;This hook is used to get the user geolocation. useGeolocation returns latitude, longitude, altitude, and more info.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useGeolocation} from 'react-use';
const Demo = () =&amp;gt; {
  const state = useGeolocation();
return (
    &amp;lt;pre&amp;gt;
      {JSON.stringify(state, null, 2)}
    &amp;lt;/pre&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#12-usenetworkstate"&gt;
  &lt;/a&gt;
  12. useNetworkState
&lt;/h2&gt;

&lt;p&gt;This hook is used to get the network status of the browser. useNetworkState can be used the show the connection status to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useNetworkState} from 'react-use';
const Demo = () =&amp;gt; {
  const state = useNetworkState();
return (
    &amp;lt;pre&amp;gt;
      {JSON.stringify(state, null, 2)}
    &amp;lt;/pre&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#13-usecopytoclipboard"&gt;
  &lt;/a&gt;
  13. useCopyToClipboard
&lt;/h2&gt;

&lt;p&gt;useCopyToClipboard hook is used to copy the text to the clipboard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Demo = () =&amp;gt; {
  const [text, setText] = React.useState('');
  const [state, copyToClipboard] = useCopyToClipboard();

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;input value={text} onChange={e =&amp;gt; setText(e.target.value)} /&amp;gt;
      &amp;lt;button type="button" onClick={() =&amp;gt; copyToClipboard(text)}&amp;gt;copy text&amp;lt;/button&amp;gt;
      {state.error
        ? &amp;lt;p&amp;gt;Unable to copy value: {state.error.message}&amp;lt;/p&amp;gt;
        : state.value &amp;amp;&amp;amp; &amp;lt;p&amp;gt;Copied {state.value}&amp;lt;/p&amp;gt;}
    &amp;lt;/div&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#14-usefavicon"&gt;
  &lt;/a&gt;
  14. useFavicon
&lt;/h2&gt;

&lt;p&gt;The useFavicon hook is used to set the favicon of the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {useFavicon} from 'react-use';
const Demo = () =&amp;gt; {
  useFavicon('https://cdn.sstatic.net/Sites/stackoverflow/img/favicon.ico');
return null;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#15-useerror"&gt;
  &lt;/a&gt;
  15. useError
&lt;/h2&gt;

&lt;p&gt;useError hook is used to dispatch errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useError } from 'react-use';
const Demo = () =&amp;gt; {
  const dispatchError = useError();
const clickHandler = () =&amp;gt; {
    dispatchError(new Error('Some error!'));
  };
return &amp;lt;button onClick={clickHandler}&amp;gt;Click me to throw&amp;lt;/button&amp;gt;;
};
// In parent app
const App = () =&amp;gt; (
  &amp;lt;ErrorBoundary&amp;gt;
    &amp;lt;Demo /&amp;gt;
  &amp;lt;/ErrorBoundary&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are some more custom hooks in the &lt;a href="https://github.com/streamich/react-use"&gt;react-use&lt;/a&gt; package, I hope you have found this useful. Thank you for reading.&lt;/p&gt;

&lt;p&gt;Need to learn more? Feel free to connect on &lt;a href="https://twitter.com/Nilanth"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Habits Of A Successful Programmer</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Sat, 10 Jul 2021 11:09:02 +0000</pubDate>
      <link>https://dev.to/unitybuddy/5-habits-of-a-successful-programmer-4lco</link>
      <guid>https://dev.to/unitybuddy/5-habits-of-a-successful-programmer-4lco</guid>
      <description>&lt;p&gt;Hello, buddies! Every successful programmer has their own habits. So today we are going to see what are the habits of &lt;strong&gt;successful programmer&lt;/strong&gt;. Wait, how do you define &lt;strong&gt;&lt;em&gt;successful&lt;/em&gt;&lt;/strong&gt;? &lt;a href="https://lo-victoria.com/soft-skills-every-successful-developer-should-have"&gt;In this article,&lt;/a&gt; &lt;a href="https://dev.to@victoria"&gt;Victoria Lo&lt;/a&gt; has defined "being successful" as &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To me personally, being successful is to be respected by others. And to be respected is to respect others&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before reading that article, I have read multiple articles which define success as Rich, Cars, Houses etc. But I agree with Victoria's saying.&lt;/p&gt;

&lt;p&gt;Anyway, back to the topic. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-write-reusable-readable-and-clean-code"&gt;
  &lt;/a&gt;
  1. Write Reusable, Readable and Clean Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3C_dS502--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622160900208/57zxDk5dH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3C_dS502--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622160900208/57zxDk5dH.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
There are various ways to write clean code that is easy to test, read, and use, but it is an increasingly important aspect of high-quality software development regardless of the method. Successful programmers give only one goal to each function.&lt;/p&gt;

&lt;p&gt;When you begin coding, you usually start writing line by line into an increasingly larger function or method. It may seem at first simpler, but it causes other problems. The code is difficult to test, more difficult to use again, and more difficult to read. One thing and one thing only should be done by a function. You don’t focus if it does more than one thing.&lt;/p&gt;

&lt;p&gt;It’s a common practice to give specific and valuable names to variables and functions, which should be easier if you write each function for a specific purpose. Use a code beautifier to make your code more easily readable. It is important to understand quickly and easily what you are supposed to do when you come back to your code weeks after you write it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-listen-carefully-rather-than-speaking"&gt;
  &lt;/a&gt;
  2. Listen Carefully Rather Than Speaking
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfTGh5GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622160983440/t9v3IAWdO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfTGh5GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622160983440/t9v3IAWdO.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
If you’re with other developers in a meeting, first listen, then speak about it because this is the easiest way to learn.&lt;/p&gt;

&lt;p&gt;Humility is needed, especially when you believe you are the most intelligent person in the room. Good developers are able and happy to confess if they don’t know.&lt;/p&gt;

&lt;p&gt;You should not be the programmer who sprays a lot of technical jargon instead of acknowledging that he may not be aware of the solution to a certain question.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-discipline"&gt;
  &lt;/a&gt;
  3. Discipline
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PUP9I3zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622161015955/iuEsYSRkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUP9I3zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622161015955/iuEsYSRkk.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Talent is not everything, except perhaps in vast numbers. Talent or ability is indeed only part of the performance process. Another part is discipline. A professional software engineer or programmer without discipline is like a veteran navigator without a map.&lt;/p&gt;

&lt;p&gt;Quality should not be sacrificed for speed. But you are mindful of the technological obligations you generate and seek to repay in the future if you sacrifice the quality for speed.&lt;/p&gt;

&lt;p&gt;You should take steps, as you know, that you have been set up to help developers achieve. During code analysis, you should be fully involved. The importance of time for development work should also be understood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-focus-on-the-right-thing-at-the-right-time"&gt;
  &lt;/a&gt;
  4. Focus on The Right Thing At The Right Time
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wh8_I4bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622161079491/iVRwJgJ8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wh8_I4bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622161079491/iVRwJgJ8g.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Successful programmers have the willingness to concentrate on the common goal of a specific project without being sidetracked by lazy optimism that doesn’t really get them closer to their goal.&lt;/p&gt;

&lt;p&gt;Many programmers work on different things even if they know the proper solution is something else. You might know when you step back a little that you are putting a lot of effort into something which really isn’t important to the larger objective that everyone tries to achieve.&lt;/p&gt;

&lt;p&gt;It is certainly good to look ahead at times, as long as you can focus on what you know, you need to do over what you may need to do. Much of this is to ensure that your wavelength is the same as the rest of the team.&lt;/p&gt;

&lt;p&gt;Effective programmers acknowledge that teamwork leads to innovation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-acquire-new-skills-with-time"&gt;
  &lt;/a&gt;
  5. Acquire New Skills with Time
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ld_ta0wj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622161129656/IY18J0Vp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ld_ta0wj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622161129656/IY18J0Vp5.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
A further condition is to be flexible and to embrace new things if necessary. Highly successful developers and programmers actively read about and apply new developments happening in the market.&lt;/p&gt;

&lt;p&gt;New frameworks, methodologies, and languages are constantly being developed, which are being filtered with by successful software engineers, which enable them to do their best and to evolve.&lt;/p&gt;

&lt;p&gt;The key to a successful software engineer is undoubtedly the ability to acquire new skills.&lt;/p&gt;

&lt;p&gt;With the completion of a computer science degree or a specific language course, the learning process doesn’t stop. It doesn’t stop if you get hired. A successful programmer should be learning whenever he can and whenever necessary.&lt;/p&gt;

&lt;p&gt;You should not focus on learning only one language. You should equip yourself with the latest frameworks and languages that are trending in the market.&lt;/p&gt;

&lt;p&gt;So buddies, these are the common and good habits of successful programmers/developers. Hope you learnt something! Happy Coding!&lt;/p&gt;

&lt;p&gt;Originally published on &lt;a href="//hashnode.com"&gt;Hashnode&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Efficient Learning - The full guide with principles, science and techniques</title>
      <author>Abhinav Pandey</author>
      <pubDate>Sat, 10 Jul 2021 09:58:46 +0000</pubDate>
      <link>https://dev.to/abh1navv/efficient-learning-the-full-guide-with-principles-science-and-techniques-59i</link>
      <guid>https://dev.to/abh1navv/efficient-learning-the-full-guide-with-principles-science-and-techniques-59i</guid>
      <description>&lt;p&gt;As individuals who take initiatives to improve our abilities and become a better version of ourselves, our learning can become much more effective and faster if we develop an efficient learning process. Below is a list of principles, scientific studies and techniques which will help us in defining such processes:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-principles"&gt;
  &lt;/a&gt;
  The Principles
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Learning vs Winning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prioritize long-term learning over short term results&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://paulgraham.com/lesson.html"&gt;The Lesson to Learn&lt;/a&gt; by Paul Graham&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In theory you shouldn't have to prepare for a test in a class any more than you have to prepare for a blood test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Success and obstacles&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you need drive and persistence&lt;/li&gt;
&lt;li&gt;embrace the early obstacles&lt;/li&gt;
&lt;li&gt;everyone was once a beginner&lt;/li&gt;
&lt;li&gt;important topics are not easy to learn&lt;/li&gt;
&lt;li&gt;failures are progress&lt;/li&gt;
&lt;li&gt;keep a positive perspective. E.g. I'm not there yet but I will get there (by doing this).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Enjoy sucking at something at first&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Quitting is ok&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is possible that the path is not for you&lt;/li&gt;
&lt;li&gt;it is important to know when to quit in order to find the things better suited to you&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Sometimes we have to know when to turn around and pick the right path in order to use our resources efficiently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Compound learning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;learn in small chunks every day&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you improve by 1% every day, in 70 days you're twice as good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Your failures don't count against you&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People will not remember how many times you failed in the process.&lt;/li&gt;
&lt;li&gt;They only care about what you are now.&lt;/li&gt;
&lt;li&gt;You don't have to be successful a lot of times.&lt;/li&gt;
&lt;li&gt;Nobody cares about how many interviews you failed. They only care about the one you passed.&lt;/li&gt;
&lt;li&gt;Do not avoid doing things because of fear of failure.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The more failures we have, the more feedback we will have for improvement&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Choice vs Chore&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"I want to do this" over "I have to do this"&lt;/li&gt;
&lt;li&gt;learning is a choice like watching a tv show and not a chore like washing clothes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pareto principle&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;80/20 principle - 80% success comes from doing 20% of the work.&lt;/li&gt;
&lt;li&gt;achieve initial 80% as fast as possible&lt;/li&gt;
&lt;li&gt;define the 20% you need to do for it&lt;/li&gt;
&lt;li&gt;ask yourself the below question&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Is this the best use of my time?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Skill stacking - Career strategy&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;don't lose your curiosity &lt;/li&gt;
&lt;li&gt;value learning in your decisions and practices&lt;/li&gt;
&lt;li&gt;gather and combine skills in unique ways&lt;/li&gt;
&lt;li&gt;develop many skills that work well together&lt;/li&gt;
&lt;li&gt;develop combinations that make you stand out &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Happiness factors&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To be a good learner, first focus on being happy&lt;/li&gt;
&lt;li&gt;identify areas that make you feel happy . Examples:

&lt;ul&gt;
&lt;li&gt;physical and mental health &lt;/li&gt;
&lt;li&gt;good sleep - to feel energetic&lt;/li&gt;
&lt;li&gt;learning everyday - gives a sense of achievement at the end of the day and keeps me motivated&lt;/li&gt;
&lt;li&gt;getting enough leisure time - to relax my mind&lt;/li&gt;
&lt;li&gt;having control over my work - stress management&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Productivity time&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find time of the day when you're most productive.&lt;/li&gt;
&lt;li&gt;Learn during that time.&lt;/li&gt;
&lt;li&gt;Do not start learning at that time of the day when you were otherwise not doing anything productive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#method-of-loci"&gt;
  &lt;/a&gt;
  Method of Loci
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Memory palace technique&lt;/li&gt;
&lt;li&gt;Memorize objects in sequence by creating a narrative out of them.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#lies"&gt;
  &lt;/a&gt;
  Lies
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Follow your passion&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;you don’t need to be passionate to become good at something and enjoy improving your craft&lt;/li&gt;
&lt;li&gt;being passionate about something does not mean building a career is the only way to pursue it&lt;/li&gt;
&lt;li&gt;aim for creativity, control and impact instead&lt;/li&gt;
&lt;li&gt;sometimes passion arises after learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You can avoid risk&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;risk is part of the process&lt;/li&gt;
&lt;li&gt;to succeed at something, enjoy taking risks&lt;/li&gt;
&lt;li&gt;do not hesitate from trying new things once in a while&lt;/li&gt;
&lt;li&gt;get out of your comfort zone and stop playing safe&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Your mentor is always right&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;a mentor's opinions and knowledge are bounded by their own experience&lt;/li&gt;
&lt;li&gt;don't always agree with one person or one  source of information&lt;/li&gt;
&lt;li&gt;form your own opinions and techniques&lt;/li&gt;
&lt;li&gt;nobody knows everything completely&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mastery needs 10000 hours&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;practice matters but there are many factors involved&lt;/li&gt;
&lt;li&gt;your intelligence and learning capability matters&lt;/li&gt;
&lt;li&gt;your current level decides how tough or easy the path is for you&lt;/li&gt;
&lt;li&gt;you don't always have to be a hard worker&lt;/li&gt;
&lt;li&gt;focus on efficient learning and not on how much time you put into it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#pillars"&gt;
  &lt;/a&gt;
  Pillars
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Everything is a game&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;growth mindset - intelligence and capabilities can grow&lt;/li&gt;
&lt;li&gt;locus of control - internal (you are in control of your life's outcomes) vs external (your life's outcomes depend on external factors like fate)&lt;/li&gt;
&lt;li&gt;if you believe you are in control of your life, you believe that you can improve your skills rather than blaming external factors&lt;/li&gt;
&lt;li&gt;you are a player in a game who gains XP with each challenge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feynman Technique&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;To understand something well, you need to be able to teach it.&lt;/li&gt;
&lt;li&gt;good way to learn and test your knowledge&lt;/li&gt;
&lt;li&gt;be able to answer questions about it&lt;/li&gt;
&lt;li&gt;do not hide behind jargons - use simple terms to explain concepts&lt;/li&gt;
&lt;li&gt;take notes in a way that is shareable to others (or create a blog like me)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Trunk based knowledge&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;start from the root - fundamentals&lt;/li&gt;
&lt;li&gt;build a knowledge tree where the root is ever-relevant and even if the leaves become irrelevant in short-term, it is possible to learn something new because of strong root knowledge&lt;/li&gt;
&lt;li&gt;makes it easier to adapt to the future&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Efficiency trumps grit&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;improve work efficiency and avoid working too hard&lt;/li&gt;
&lt;li&gt;being busy all the time indicates bad time management skills&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#science"&gt;
  &lt;/a&gt;
  Science
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Focus vs Diffuse mode&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Focus - concentrate on one thing. No multitasking.&lt;/li&gt;
&lt;li&gt;Diffuse - let the brain wander freely. E.g. exercise, sleep, going out.&lt;/li&gt;
&lt;li&gt;Go back and forth. Focus for a while and diffuse for a while.&lt;/li&gt;
&lt;li&gt;Grows your brain just like exercise and rest grows your muscles&lt;/li&gt;
&lt;li&gt;taking breaks is good for high performance&lt;/li&gt;
&lt;li&gt;&lt;a href="https://delanceyplace.com/view-archives.php?p=3150"&gt;The science behind it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sleep&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Sleep clears toxins from the brain&lt;/li&gt;
&lt;li&gt;Long deep sleep is important. Toxin cleaning is an energy intensive process. It does not happen unless body is at rest for a long time.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nih.gov/news-events/news-releases/brain-may-flush-out-toxins-during-sleep"&gt;Check out this article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Procrastination&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you don't want to do something right now because is isn't going to feel good. You brain automatically suggests something more positive - like watching YT videos or playing games&lt;/li&gt;
&lt;li&gt;it is &lt;em&gt;an issue with managing our emotion and not our time&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;you could be a good time manager but still not feel like doing some tasks (I relate strongly)&lt;/li&gt;
&lt;li&gt;Understand that by delaying an important task we are just delaying the mental pain&lt;/li&gt;
&lt;li&gt;Best way to tackle this is to be strong and do that important task right away - Get rid of the pain and feel better.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.deprocrastination.co/blog/3-tricks-to-start-working-despite-not-feeling-like-it"&gt;Some tricks&lt;/a&gt; for the affected. &lt;strong&gt;Must read&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Screw it, let's do it&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Richard Branson&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Brain training&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Practice something to create strong memory &lt;/li&gt;
&lt;li&gt;exercise your brain by repeating what you learn&lt;/li&gt;
&lt;li&gt;give your brain enough diffuse mode&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3191246/"&gt;Too much biology to prove it&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Regular Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prevents depression and anxiety&lt;/li&gt;
&lt;li&gt;elevates mood&lt;/li&gt;
&lt;li&gt;gives rest to the brain (diffuse mode)&lt;/li&gt;
&lt;li&gt;Here's a &lt;a href="https://www.apa.org/monitor/2011/12/exercise"&gt;study&lt;/a&gt; to back it up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feedback&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;negative -&amp;gt; "You're doing this wrong" (criticism)&lt;/li&gt;
&lt;li&gt;positive -&amp;gt; "If you do this, I will give you this" or "I like how you did this" (motivation)&lt;/li&gt;
&lt;li&gt;criticism is usually more actionable - enjoy criticism when you are in the middle of your learning or towards a high career stage&lt;/li&gt;
&lt;li&gt;motivation is important at the beginning - gives you power to battle the obstacles&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5239721/"&gt;Some science&lt;/a&gt; for the nerds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Long term vs Short term memory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;long term - created by repeated learning - like faces of your friends, flag of your country, driving skills, etc.&lt;/li&gt;
&lt;li&gt;put fundamental concepts and principles in long term memory by practicing them at regular intervals&lt;/li&gt;
&lt;li&gt;short term - things you memorize for a short term purpose - like a small list of tasks you have to do today or .&lt;/li&gt;
&lt;li&gt;goal - move important concepts from short term memory to long term using spaced repetition - repeat a concept after a few days or once a day&lt;/li&gt;
&lt;li&gt;associate a short term memory with a long term memory to speed up the process - E.g. Associate the name of an Egyptian God (new learning) with the mental image of pyramids (something you never forget).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2657600/"&gt;Here's the science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Active vs passive learning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;watching other people demonstrate things or reading a book - passive (easy and inefficient)&lt;/li&gt;
&lt;li&gt;taking notes, practicing, problem solving, tests - active (difficult but stronger)&lt;/li&gt;
&lt;li&gt;Some &lt;a href="https://makeitstick.net/"&gt;passive resources&lt;/a&gt; to explore further&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Motivation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extrinsic - money, fame, new job - getting recognized for your efforts&lt;/li&gt;
&lt;li&gt;Intrinsic - autonomy(control), mastery, purpose - having an internal drive to do something&lt;/li&gt;
&lt;li&gt;Long term learning motivation is always intrinsic. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kaizen - continuous, small, incremental improvement&lt;/li&gt;
&lt;li&gt;small steps compound over a long term&lt;/li&gt;
&lt;li&gt;S - Specific

&lt;ul&gt;
&lt;li&gt;Get Healthy &amp;lt; Lose weight &amp;lt; Lose 10 Pounds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;M - Measurable

&lt;ul&gt;
&lt;li&gt;Reliable way of measuring progress&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A - Actionable

&lt;ul&gt;
&lt;li&gt;Clarity of actions required to achieve it&lt;/li&gt;
&lt;li&gt;If actions are not clear, break down the main goal into actionable sub-goals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;R - Relevant

&lt;ul&gt;
&lt;li&gt;Should add value when achieved&lt;/li&gt;
&lt;li&gt;Prioritize Low Effort and High Value goals&lt;/li&gt;
&lt;li&gt;Use 80/20 Pareto principle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;T - Time-bound

&lt;ul&gt;
&lt;li&gt;Lose 10 pounds in 10 weeks&lt;/li&gt;
&lt;li&gt;Define milestones and assign a date to it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Goal setting is an ongoing process of action, evaluation and revision. &lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.youtube.com/watch?v=1-SvuFIQjK8&amp;amp;ab_channel=DecisionSkills"&gt;small video&lt;/a&gt; to summarize this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pays not to be busy&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be surrounded by people you like to relax your brain.&lt;/li&gt;
&lt;li&gt;Healthy leisurely time is key to better functioning of the brain.&lt;/li&gt;
&lt;li&gt;Learn with ease and do not rush through it&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.calnewport.com/blog/2011/11/11/if-youre-busy-youre-doing-something-wrong-the-surprisingly-relaxed-lives-of-elite-achievers/"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chunking&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;learn in chunks - fundamental pieces of knowledge&lt;/li&gt;
&lt;li&gt;combine chunks to fill the missing pieces and complete your learning&lt;/li&gt;
&lt;li&gt;bottom up approach of learning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Solving problems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sequential problems - focus mode&lt;/li&gt;
&lt;li&gt;Intuition or creative solutions - diffuse mode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deliberate practice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you can have temporary frustration when you think you are not growing in a area&lt;/li&gt;
&lt;li&gt;Deliberate practice needs:

&lt;ol&gt;
&lt;li&gt;Specific goals - push yourself to the edge of your limits&lt;/li&gt;
&lt;li&gt;Intense focus - work towards it in focused mode&lt;/li&gt;
&lt;li&gt;Immediate feedback - from mentors or peers&lt;/li&gt;
&lt;li&gt;Frequent discomfort - when you are not moving forward&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Start with a discomfort zone and try to bridge the gap. Once you reach a comfort zone, get feedbacks for improvement and define the next step.&lt;/li&gt;
&lt;li&gt;The better you get at something, the more enjoyable it becomes.&lt;/li&gt;
&lt;li&gt;Feedback and discomfort will keep you motivated to get even better.&lt;/li&gt;
&lt;li&gt;Turns your potential into your reality&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tofugu.com/japan/kendo/"&gt;Some help from Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Spaced repetition and habits&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;learn in small sessions&lt;/li&gt;
&lt;li&gt;repeat periodically to make your concepts stronger&lt;/li&gt;
&lt;li&gt;forming habits allows you to learn effortlessly&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;saves you a lot of mental energy&lt;/em&gt; required to 

&lt;ul&gt;
&lt;li&gt;decide what to do when&lt;/li&gt;
&lt;li&gt;focus on how to do it. E.g. How much focus do you need to brush your teeth?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Form habits which help you learn so that you do not have to answer the same questions everyday 

&lt;ul&gt;
&lt;li&gt;Where to sit while I learn?&lt;/li&gt;
&lt;li&gt;What time should I start?&lt;/li&gt;
&lt;li&gt;How much time should I give it?&lt;/li&gt;
&lt;li&gt;Where should I take notes?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Be Adventurous&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try new and exciting things regularly to keep your mind active&lt;/li&gt;
&lt;li&gt;Do not get into a monotonous mode. It kills your creativity&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Have an endpoint&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When you're doing something with focus, have an idea of when you are going to stop and take a break.&lt;/li&gt;
&lt;li&gt;Also applies to when to stop working each day.&lt;/li&gt;
&lt;li&gt;Learn to get bored - gives your brain a pause.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#techniques"&gt;
  &lt;/a&gt;
  Techniques
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pomodoro&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;25 mins of focus, 5 mins of rest - together known as 1 Pomodoro (no hard rule, go slightly longer if it suits you but not too long)&lt;/li&gt;
&lt;li&gt;use a timer/stopwatch to repeat like &lt;a href="http://www.tomato.es/"&gt;Tomatoes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;good way to prevent procrastination as its difficult to lose focus in 25 mins&lt;/li&gt;
&lt;li&gt;start with the hardest task in every Pomodoro and then move on to easier tasks&lt;/li&gt;
&lt;li&gt;Rest time means you do not do anything brain intensive. Do not look at your phone or read articles on the web. Maybe close your eyes or get something to eat or walk around in the house. Try to avoid pen, paper and screen at all costs.&lt;/li&gt;
&lt;li&gt;You do not have to do Pomodoro all day. You only do it when you need to work and its fine to do other stuff in between. E.g. you can work for 1 hour doing 2 rounds of Pomodoro -&amp;gt; watch an episode of your favorite show -&amp;gt; get back to work&lt;/li&gt;
&lt;li&gt;Just know that 25 mins of focus and 5 mins of complete rest is your strategy whenever you sit down to work.&lt;/li&gt;
&lt;li&gt;Sometimes your brain will not stop thinking about the work in those 5 mins. Its fine. Practice will make it perfect.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chunk the subject&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn in chunks to keep them into your memory.&lt;/li&gt;
&lt;li&gt;Using chunks together gives you meaningful knowledge.&lt;/li&gt;
&lt;li&gt;Same as habits - gets you to auto-pilot mode.&lt;/li&gt;
&lt;li&gt;Divide and conquer the subject&lt;/li&gt;
&lt;li&gt;Learn most commonly used chunks first. It helps you quick started on new things and builds a base for stronger concepts&lt;/li&gt;
&lt;li&gt;When starting on a subject, break it down into a page of chunks&lt;/li&gt;
&lt;li&gt;Prefer books/courses with small chapters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Spaced Repetition&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;forgetting curve - the more times a concept is repeated, the longer it takes to forget it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deliberate Practice&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a Pomodoro each day for something unique(+1)&lt;/li&gt;
&lt;li&gt;Write down this special achievement in an excel&lt;/li&gt;
&lt;li&gt;Define the +1 for the next day&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Long term roadmap for specific achievements&lt;/li&gt;
&lt;li&gt;Take special time out to create the roadmap before starting to learn&lt;/li&gt;
&lt;li&gt;Have a well-defined purpose&lt;/li&gt;
&lt;li&gt;Could change on the way but you are at least not starting blind&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coggle.it"&gt;Coggle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interleaving&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;different problems in sessions for variety&lt;/li&gt;
&lt;li&gt;shift between 3 or more skills/techniques to learn them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Einstellung Effect&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is the habit of brain to solve problems in a specific way even if better ways exist to solve it.&lt;/li&gt;
&lt;li&gt;rigid mindset&lt;/li&gt;
&lt;li&gt;keep up with the trends and continue learning to avoid this.&lt;/li&gt;
&lt;li&gt;you are no longer a master if you're set in your ways&lt;/li&gt;
&lt;li&gt;integrative complexity - willingness to accept different perspectives&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to cheer/correct/grow&lt;/li&gt;
&lt;li&gt;things to learn from others&lt;/li&gt;
&lt;li&gt;get immediate feedback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Habit&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cue - what triggers the habit&lt;/li&gt;
&lt;li&gt;Routine - the ritual that is triggered by the cue&lt;/li&gt;
&lt;li&gt;Reward - doing the ritual has some benefits&lt;/li&gt;
&lt;li&gt;Belief - that the habit is important&lt;/li&gt;
&lt;li&gt;Obvious - very relevant &lt;/li&gt;
&lt;li&gt;Easy to do&lt;/li&gt;
&lt;li&gt;Attractive outcome&lt;/li&gt;
&lt;li&gt;Satisfying&lt;/li&gt;
&lt;li&gt;Capture your streaks at dontbreakthechain.com&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;System vs Goals&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;System - do something regularly with the objective that you are improving&lt;/li&gt;
&lt;li&gt;Goal - end result - rigid objective - define a deadline and an objective to achieve by that deadline&lt;/li&gt;
&lt;li&gt;Balance out both techniques&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Senses&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Imagery in your mind helps&lt;/li&gt;
&lt;li&gt;writing &amp;gt; typing&lt;/li&gt;
&lt;li&gt;images, diagrams, infographics&lt;/li&gt;
&lt;li&gt;strong neural connections are made when more senses are involved.&lt;/li&gt;
&lt;li&gt;learn well in places that stimulate your senses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pareto Principle&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Good way to remove what not to learn and prioritize what to learn first&lt;/li&gt;
&lt;li&gt;Find your most important 20% and start with it.&lt;/li&gt;
&lt;li&gt;Define effort vs impact graph&lt;/li&gt;
&lt;li&gt;Start with the low effort high impact quadrant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Parkinson's law&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;work expands so as to fill the time available for its completion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;the more time you give yourself to finish a task, the longer it is going to take&lt;/li&gt;
&lt;li&gt;set small targets and define an optimal deadline&lt;/li&gt;
&lt;li&gt;practice deep work - use Pomodoro technique for small targets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deep work&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dedicated workspace&lt;/li&gt;
&lt;li&gt;Power offs are well executed&lt;/li&gt;
&lt;li&gt;Avoid procrastination and form a habit of learning&lt;/li&gt;
&lt;li&gt;Schedule work time and set exact end time for each day&lt;/li&gt;
&lt;li&gt;Find ways to get feedback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stakes and rewards&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your learning needs to be tied to a positive outcome to maintain motivation&lt;/li&gt;
&lt;li&gt;Something should be on the line to give you drive&lt;/li&gt;
&lt;li&gt;Strategy - decide on a goal and announce it - put something on the stake if you fail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Concepts vs Facts&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build concepts by revision&lt;/li&gt;
&lt;li&gt;Test your recalling capability when you revise&lt;/li&gt;
&lt;li&gt;Read the full book in first run -&amp;gt; read highlighted parts/notes in next run -&amp;gt; read less and recall more as you move forward&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test yourself&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quiz yourself periodically to test your knowledge&lt;/li&gt;
&lt;li&gt;Write summaries of things you just learned to check if you are able to recall information&lt;/li&gt;
&lt;li&gt;If you get something wrong, write down why you got it wrong and learn from your mistakes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The First 20 hours&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Things that we can do in the first 20 hours can help us on our path to mastery&lt;/li&gt;
&lt;li&gt;Create a roadmap&lt;/li&gt;
&lt;li&gt;Define Practice drills or tests&lt;/li&gt;
&lt;li&gt;Attach stakes/rewards to it&lt;/li&gt;
&lt;li&gt;Use Pomodoro technique&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;These are notes from the course &lt;a href="https://www.udemy.com/course/learning-to-learn-efficient-learning-zero-to-mastery/"&gt;Learning to Learn [Efficient Learning] : Zero to Mastery&lt;/a&gt; diluted with my own interpretation of the subject. Do check out the course for the complete experience.&lt;/p&gt;

&lt;p&gt;You can also find these notes at &lt;a href="https://github.com/abh1navv/learning-notes/blob/master/LearningToLearn.md#learning-to-learn--zero-to-mastery"&gt;Github&lt;/a&gt; - more notes coming soon in the repo.&lt;/p&gt;

&lt;p&gt;Happy Learning!!&lt;/p&gt;

&lt;p&gt;You can connect with me at  &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/abh1navv"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.twitter.com/abh1navv"&gt;Twitter/@abh1navv&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>learning</category>
      <category>career</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
