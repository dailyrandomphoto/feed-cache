<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>It's out now - Berry Free React Admin Template</title>
      <author>Rakesh S Nakrani</author>
      <pubDate>Mon, 10 May 2021 06:28:03 +0000</pubDate>
      <link>https://dev.to/rakesh_nakrani/it-s-out-now-berry-free-react-admin-template-hk3</link>
      <guid>https://dev.to/rakesh_nakrani/it-s-out-now-berry-free-react-admin-template-hk3</guid>
      <description>&lt;p&gt;It's finally here. Berry open-source react admin template is available to download. &lt;/p&gt;

&lt;p&gt;If you don't know about Berry - Here is my post on &lt;a href="https://dev.to/rakesh_nakrani/all-you-need-to-know-about-berry-react-li6"&gt;Everything about Berry&lt;/a&gt;. This product is minimal yet beautiful for your next React backend project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Berry is managed by team &lt;a class="mentioned-user" href="https://dev.to/codedthemes"&gt;@codedthemes&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have made lots of design Iteration and usability testing to overcome the customer’s pain points. Our customer-first approach gives us the motivation towards the Berry journey. You feel amazed after seeing the Berry User Interface.&lt;/p&gt;

&lt;p&gt;It is build using Material-UI a top-rated Material design React component library. For newcomers React is an open-source library, the most popular at this moment which actively supported by Facebook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-berry"&gt;Why Berry?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#technology-stack"&gt;Technology Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-berry"&gt;
  &lt;/a&gt;
  Why Berry?
&lt;/h3&gt;

&lt;p&gt;Berry brings everything you need for dashboard development. We have added the following features in the initial release.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modern aesthetics UI design&lt;/li&gt;
&lt;li&gt;Material UI components&lt;/li&gt;
&lt;li&gt;Fully Responsive, all modern browser supported&lt;/li&gt;
&lt;li&gt;Easy to use code structure&lt;/li&gt;
&lt;li&gt;Flexible &amp;amp; High-Performance code&lt;/li&gt;
&lt;li&gt;Easy Documentation Guide&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#free-version"&gt;
  &lt;/a&gt;
  Free version
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Preview&lt;/li&gt;
&lt;li&gt;Download from &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#pro-version"&gt;
  &lt;/a&gt;
  Pro version
&lt;/h5&gt;

&lt;p&gt;Berry is soon available to purchase. Expected to launch on mid of May-2021&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://berrydashboard.io"&gt;Preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Purchase from Material UI Store&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;Clone from GitHub&lt;br&gt;
&lt;code&gt;git clone https://github.com/codedthemes/berry-free-react-admin-template.git&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;Berry documentation helps you out in all aspects from installation to deployment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technology-stack"&gt;
  &lt;/a&gt;
  Technology Stack
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://material-ui.com"&gt;Material-UI&lt;/a&gt; Component library.&lt;/li&gt;
&lt;li&gt;Built with React Hooks API.&lt;/li&gt;
&lt;li&gt;Redux &amp;amp; React Context API for State Management.&lt;/li&gt;
&lt;li&gt;React Router for Navigation Routing.&lt;/li&gt;
&lt;li&gt;Support of react-script.&lt;/li&gt;
&lt;li&gt;Code Splitting.&lt;/li&gt;
&lt;li&gt;CSS-in-JS where CSS is composed using JavaScript instead of defined in external files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h3&gt;

&lt;p&gt;Please generate a &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template/issues"&gt;GitHub issue&lt;/a&gt; if you found a bug in any version. We love to resolve any issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Free&lt;/strong&gt; version cover under &lt;a href="https://github.com/codedthemes/datta-able-bootstrap-dashboard/blob/master/LICENSE"&gt;MIT&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-us"&gt;
  &lt;/a&gt;
  Follow us
&lt;/h3&gt;

&lt;p&gt;Website &lt;a href="https://berrydashboard.io"&gt;https://berrydashboard.io&lt;/a&gt;&lt;br&gt;
Blog &lt;a href="https://blog.berrydashboard.io"&gt;https://blog.berrydashboard.io&lt;/a&gt;&lt;br&gt;
CodedThemes &lt;a href="https://codedthemes.com"&gt;https://codedthemes.com&lt;/a&gt;&lt;br&gt;
Dribbble &lt;a href="https://dribbble.com/codedthemes"&gt;https://dribbble.com/codedthemes&lt;/a&gt;&lt;br&gt;
Facebook &lt;a href="https://www.facebook.com/codedthemes"&gt;https://www.fb.com/codedthemes&lt;/a&gt;&lt;br&gt;
Twitter &lt;a href="https://twitter.com/codedthemes"&gt;https://twitter.com/codedthemes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Static Code Analyses - Terrascan, Terraform and Azure DevOps</title>
      <author>James Cook</author>
      <pubDate>Mon, 10 May 2021 06:27:17 +0000</pubDate>
      <link>https://dev.to/officialcookj/static-code-analyses-terrascan-terraform-and-azure-devops-3690</link>
      <guid>https://dev.to/officialcookj/static-code-analyses-terrascan-terraform-and-azure-devops-3690</guid>
      <description>&lt;p&gt;In my &lt;a href="https://jamescook.dev/codeanalyses-checkov-terraform-azuredevops"&gt;previous post&lt;/a&gt; I looked at Static Code Analyses with two of the three tools I am going to use in this post. We are now going to look at &lt;a href="https://github.com/accurics/terrascan"&gt;Terrascan&lt;/a&gt; as our analyses tool and have it running from CI/CD platform Azure DevOps which will also host the Terraform code we want to review.&lt;/p&gt;

&lt;p&gt;To follow with the post in configuring this setup, you will need the above mentioned tools with permissions on Azure DevOps to be able to create a Pipeline, add extensions from a marketplace and commit to a repository.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;

&lt;p&gt;As per my previous post, I will be reusing the example Terraform configuration file which contains bad practices like password in plain text. This will allow me to test the tool as it should flag some of these bad practices.&lt;/p&gt;

&lt;p&gt;This is the code example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OJOo-MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619359048086/_nMzNoobR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OJOo-MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619359048086/_nMzNoobR.png" alt="code.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my example, this is stored in a Azure DevOps repository but you can use a third party repository like GitHub as an alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pipeline-configuration"&gt;
  &lt;/a&gt;
  Pipeline Configuration
&lt;/h2&gt;

&lt;p&gt;We will create a separate pipeline within Azure DevOps rather than use the same one we used in the previous post (you can combine them but I will cover this later). This will be used to run Terrascan to analyse the code. You will want to open your project within Azure DevOps and go into &lt;strong&gt;Pipelines&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V2qLk6yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363601470/3IVJn3d6C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V2qLk6yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363601470/3IVJn3d6C.png" alt="1-pipelines.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you want to create a pipeline for this. Select the new pipeline option and within the new window select &lt;strong&gt;Use the classic editor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5Rx9LwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363733896/_vfeOLXBz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5Rx9LwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363733896/_vfeOLXBz.png" alt="2-classiceditor.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you want to select the repository where the configuration file is stored. I have stored it in an Azure DevOps repository so will select this as my location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fmqCKOeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363876562/LKhvYUEUo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fmqCKOeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363876562/LKhvYUEUo.png" alt="3-demorepo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once selected, you will then need to select &lt;strong&gt;Empty job&lt;/strong&gt; as the template option for this pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBE_mOlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363999506/38kKmnKic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBE_mOlo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619363999506/38kKmnKic.png" alt="4-emptyjob.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first fields will appear asking you to give the pipeline a name and select the agent pools you want to use. For this demo, I have selected to use Hosted Agents where I will run Terrascan on an Ubuntu OS. Below are the configurations I set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBjxGB1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457346436/3glSyAWc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBjxGB1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457346436/3glSyAWc1.png" alt="devops_name.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After all fields are filled, you want to select the &lt;strong&gt;Run on agent&lt;/strong&gt; option and configure the agent job name. I opted to calling the agent &lt;strong&gt;Terrascan Analyses&lt;/strong&gt; as it seemed appropriate for what it is doing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qZtJ0BWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457500596/KIm_E0CA0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZtJ0BWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620457500596/KIm_E0CA0.png" alt="agent_name.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are going to select the &lt;strong&gt;plus icon&lt;/strong&gt; on the run on agent field to add a job. You will be asked to select something from your currently installed extensions or from the marketplace. We will initially need to install Terraform as this is a prerequisite of Terrascan, so we will need to use the &lt;strong&gt;Terraform extension&lt;/strong&gt; from the marketplace (you may have this already so skip this step).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k1HzvMme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364620421/3xN2AXqZ9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k1HzvMme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364620421/3xN2AXqZ9.png" alt="7-terraformgetmarket.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once acquired from the marketplace you can then select to &lt;strong&gt;install Terraform&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYNW-hI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364882704/3_XNaLmon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYNW-hI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364882704/3_XNaLmon.png" alt="8-installterraform.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within the Terraform configuration window of the extension, select the version of Terraform you want to run on the Hosted Agent (as of writing this, v0.15.0 of Terraform has a bug that stops the initialisation, this may cause Terrascan not to function so use an earlier version).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0-041XxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364981261/atDE04-A2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-041XxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619364981261/atDE04-A2.png" alt="terraformconfigversion.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;plus icon&lt;/strong&gt; on the &lt;strong&gt;Run on agent&lt;/strong&gt; and select the &lt;strong&gt;Bash&lt;/strong&gt; extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_trCmfqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365206606/Hb3hZ4zKm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_trCmfqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365206606/Hb3hZ4zKm.png" alt="9-bash.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you want to install Terrascan using the inline function. Here is what I used to install the software.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4nrc57T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459155102/H4WpSzuXf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4nrc57T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459155102/H4WpSzuXf.png" alt="terrascan install.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repeat the process of adding another &lt;strong&gt;Bash&lt;/strong&gt; extension to the pipeline and this time we are configuring the inline so Terrascan can run the analyses and output the results into an xml file. Make sure to also tick under &lt;strong&gt;Control Options&lt;/strong&gt; heading the &lt;strong&gt;Continue on error&lt;/strong&gt; option or it will fail the pipeline run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XO-3ku3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459328127/oScV4vWyI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XO-3ku3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459328127/oScV4vWyI.png" alt="terrascan.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, select the &lt;strong&gt;plus icon&lt;/strong&gt; on &lt;strong&gt;Run on agent&lt;/strong&gt; and select the &lt;strong&gt;Publish Test Results&lt;/strong&gt; extension.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ekSeNcyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365705659/EsZfM8LO7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ekSeNcyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619365705659/EsZfM8LO7.png" alt="11-publishtestresult.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are importing the xml output from Terrascan into the test results feature in Azure DevOps. Here is the configurations I used to import.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyAwu0AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459414733/NEBbmSqNs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyAwu0AM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459414733/NEBbmSqNs.png" alt="results config.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once all configured, select &lt;strong&gt;Save&lt;/strong&gt; on the Pipeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pipeline-run"&gt;
  &lt;/a&gt;
  Pipeline Run
&lt;/h2&gt;

&lt;p&gt;You are now ready to run the pipeline. All you need to do is select the &lt;strong&gt;Run&lt;/strong&gt; option under the three dotted icon next to the pipeline name. The pipeline will report a failure if Terrascan flags something in its analyses, if nothing is flagged the pipeline will succeed.&lt;/p&gt;

&lt;p&gt;In my code, I have been flagged by Terrascan which has set the status of the pipeline build as failed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EksqImqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459759523/mwnD7Beq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EksqImqG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459759523/mwnD7Beq6.png" alt="status.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-analyses-report"&gt;
  &lt;/a&gt;
  Code Analyses Report
&lt;/h2&gt;

&lt;p&gt;Now we have the pipeline running and the report being published into the Azure DevOps test reports, we can review these reports in two location. The first is within the pipeline build, select the pipeline job and open the tab &lt;strong&gt;Tests&lt;/strong&gt;. Here you will see the tests than was ran by Terrascan, what passed and failed and reasons for this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rwhn0vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459874390/YYoRycEzH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Rwhn0vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459874390/YYoRycEzH.png" alt="pipeline results.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the flagged test failure, you will see more details as to why it failed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOgxuDcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459955423/PDNw1-No7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOgxuDcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620459955423/PDNw1-No7.png" alt="results details.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can view the test reports via the side menu under &lt;strong&gt;Test Plans&lt;/strong&gt; and &lt;strong&gt;Runs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-MY_8Il--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620460084653/n_vVCe5xV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-MY_8Il--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620460084653/n_vVCe5xV.png" alt="runs results.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do more with Terrascan but this will not be covered in this post but future posts on the topic. In the meantime, checkout the &lt;a href="https://github.com/accurics/terrascan"&gt;Terrascan GitHub&lt;/a&gt; page for more information.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>devops</category>
      <category>security</category>
    </item>
    <item>
      <title>Como personalizar tu terminal utilizando oh-my-zsh con powerlevel10k 👨‍💻</title>
      <author>Christopher Montero D'oleo</author>
      <pubDate>Mon, 10 May 2021 06:06:22 +0000</pubDate>
      <link>https://dev.to/christopherjael/como-personalizar-tu-terminal-utilizando-oh-my-zsh-con-powerlevel10k-4bdi</link>
      <guid>https://dev.to/christopherjael/como-personalizar-tu-terminal-utilizando-oh-my-zsh-con-powerlevel10k-4bdi</guid>
      <description>&lt;p&gt;Siempre llega el momento donde queremos personalizar nuestra terminal ya sea porque nos parece poco &lt;strong&gt;atractiva&lt;/strong&gt; o queremos mayor &lt;strong&gt;funcionalidad&lt;/strong&gt; para aumentar la productividad a la hora de utilizarla. Aunque el punto fuerte de las &lt;strong&gt;Terminales&lt;/strong&gt; no sea su apartado estético ni las extensas utilidades. Pero eso no quiere decir, que no podamos hacer algo al respecto 🙋.&lt;/p&gt;

&lt;p&gt;Para darle un &lt;strong&gt;powerup&lt;/strong&gt; 💯 a la terminal solo necesitaremos los &lt;strong&gt;siguientes requisitos&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Equipo con &lt;strong&gt;Sistema linux&lt;/strong&gt; 🐧

&lt;ul&gt;
&lt;li&gt;Fedora&lt;/li&gt;
&lt;li&gt;Debian&lt;/li&gt;
&lt;li&gt;Ubuntu&lt;/li&gt;
&lt;li&gt;Arch Linux&lt;/li&gt;
&lt;li&gt;openSUSE&lt;/li&gt;
&lt;li&gt;Mint&lt;/li&gt;
&lt;li&gt;Etc...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Git&lt;/strong&gt; 🗄️🌐&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Distribución&lt;/th&gt;
&lt;th&gt;Comando&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Debian/Ubuntu&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apt-get install git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fedora&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;yum install git&lt;/code&gt; o &lt;code&gt;dnf install git&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arch Linuz&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pacman -S git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;openSUSE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;zypper install git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FreeBSD&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pkg install git&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Curl&lt;/strong&gt; 📂🌐&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Distribución&lt;/th&gt;
&lt;th&gt;Comando&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Debian/Ubuntu&lt;/td&gt;
&lt;td&gt;&lt;code&gt;apt-get install curl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fedora&lt;/td&gt;
&lt;td&gt;&lt;code&gt;yum install curl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arch Linux&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pacman -Sy curl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;openSUSE&lt;/td&gt;
&lt;td&gt;&lt;code&gt;zypper install curl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Si ya cumples con todos los requisitos, puedes seguir con el tutorial.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#instalar-zsh"&gt;
  &lt;/a&gt;
  Instalar ZSH
&lt;/h2&gt;

&lt;p&gt;Para instalar zsh solo tienes que abrir la terminal y escribir las siguientes líneas de comandos &lt;strong&gt;(si no usas ubuntu/debian recuerda cambiar el comando para el administrador de paquetes de la distro que utilizas)&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instalar ZSH:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Comprobar la instalación de ZSH:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;zsh&lt;/span&gt; &lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;

&lt;span class="c1"&gt;//zsh 5.8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Establecer ZSH como predeterminado:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chsh -s $(which zsh)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Cierre y vuelva abrir la terminal para verificar que ZSH este como predeterminado:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;SHELL&lt;/span&gt;

&lt;span class="c1"&gt;///usr/bin/zsh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si todo va bien y no se han presentado errores, podemos seguir con el siguiente paso, instalar el administrador de &lt;strong&gt;frameworks&lt;/strong&gt; de código abierto &lt;strong&gt;Oh-my-zsh&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#instalar-ohmyzsh"&gt;
  &lt;/a&gt;
  Instalar oh-my-zsh
&lt;/h2&gt;

&lt;p&gt;Ejecute este comando para instalar oh-my-zsh:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se mostrar la siguiente pantalla:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca6ktv1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpq6ut4sopy0gl6mgp03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca6ktv1G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpq6ut4sopy0gl6mgp03.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bueno ahora podemos hacer muchas cosas con oh-my-zsh instalado, una de ellas es cambiar el tema e instalar plugins.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para acceder a la configuración de ZSH ejecutamos la siguiente línea de comando:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Se abrirá el siguiente documento.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--if_lERnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3ccgrhd8u3x2lkfueq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--if_lERnq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3ccgrhd8u3x2lkfueq1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para cambiar el tema solo hay que cambiar el valor de  &lt;code&gt;ZSH_THEME&lt;/code&gt;, para saber la lista de temas puedes visitar el siguiente link &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes"&gt;zsh-themes&lt;/a&gt;. Solo tienes que copiar el nombre del tema y pegarlo. &lt;code&gt;ZSH_THEME = "[Nombre del tema]"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jX_cyqjV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04rsdcvb192xwkx5cxqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jX_cyqjV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04rsdcvb192xwkx5cxqe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La lista de los plugins está más abajo en el documento, por defecto solo trae el plugin de git pero más adelante veremos cómo instalarlos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--724kC4yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/haqhmfv5wy04bqjfdzgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--724kC4yv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/haqhmfv5wy04bqjfdzgm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#descargar-powerlevel10k"&gt;
  &lt;/a&gt;
  Descargar Powerlevel10k
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ejecutar la siguiente línea de comandos:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Para una buena experiencia utilizando &lt;code&gt;powerlevel10k&lt;/code&gt; se recomienda la instalación de una fuente &lt;code&gt;font-nerd&lt;/code&gt;, la más adecuada es la fuente &lt;code&gt;Meslo Nerd Font&lt;/code&gt;. Para descargar la fuente entre a este link &lt;a href="https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Meslo"&gt;Meslo-Nerd-Font&lt;/a&gt;. Yo recomiendo descargar la fuente media, tipo regular, completa y compatible con sistemas windows y linux. La ruta es: &lt;code&gt;nerd-fonts/patched fonts/Meslo/M/Regular/complete/&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIFfxHZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uymwr2ha5s5ks9hl48q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIFfxHZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uymwr2ha5s5ks9hl48q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para cambiar la fuente de la terminal a la nueva, Abra Terminal → Preferencias y haga clic en el perfil seleccionado en Perfiles . Marque Fuente personalizada en Apariencia del texto y seleccione &lt;code&gt;MesloLGS NF Regular&lt;/code&gt;. &lt;strong&gt;(Para ver algun cambio talvez tenga que reiniciar el equipo)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#configurar-powerlevel10k"&gt;
  &lt;/a&gt;
  Configurar Powerlevel10k
&lt;/h2&gt;

&lt;p&gt;Hay dos formas de iniciar el proceso de configuración de &lt;code&gt;powerlevel10k&lt;/code&gt;, la primera es escribiendo en la terminal &lt;code&gt;pk10 configure&lt;/code&gt; y la segunda reiniciando el equipo y abriendo una terminal.&lt;/p&gt;

&lt;p&gt;Cuando inicia con la configuración se mostrará una ventana como esta:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--og2rGHyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko6f0ve2k9khkj8e2761.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--og2rGHyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko6f0ve2k9khkj8e2761.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZscdIKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mn40c4g6powl36ufawl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZscdIKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mn40c4g6powl36ufawl9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solo tiene que seguir las instrucciones y continuar con la configuración. Escoja las opciones que desee y a disfrutar 😄.&lt;/p&gt;

&lt;p&gt;Al final de todo le puede aparecer una terminal a esta:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOTdcnJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zubgkgu2ufi5iyq53nb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOTdcnJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zubgkgu2ufi5iyq53nb5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pero esa no es la única configuración que puedes tener, eso es solo el comienzo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDcimbRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sky9omaaoaptne7jtl3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDcimbRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sky9omaaoaptne7jtl3n.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#instalar-plugins-para-zsh"&gt;
  &lt;/a&gt;
  Instalar Plugins para ZSH
&lt;/h2&gt;

&lt;p&gt;Para instalar plugins en ZSH primero hay que descargarlos e instalarlos, para ver la lista de plugins que hay disponibles visita el siguiente link &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins"&gt;zsh-plugins&lt;/a&gt;. Yo recomiendo instalar 2 plugins muy útiles: &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt; y &lt;code&gt;zsh-autosuggestions&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#zshsyntaxhighlighting"&gt;
  &lt;/a&gt;
  zsh-syntax-highlighting
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;zsh-syntax-highlighting&lt;/code&gt; te muestra qué comandos están bien escritos o si existen y también los que están mal escritos o no existen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oSblI6ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6edb8in9c7lmjfl3rhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oSblI6ZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6edb8in9c7lmjfl3rhd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zshautosuggestions"&gt;
  &lt;/a&gt;
  zsh-autosuggestions
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;zsh-autosuggestions&lt;/code&gt; te muestra sugerencias y predice los que quieres hacer en base a los comandos más utilizados.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WV8lzAyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anm4039oqgbq4f2km0ir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WV8lzAyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anm4039oqgbq4f2km0ir.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Abra el documento de configuracion de ZSH:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Añada el nombre del plugin a la lista.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;plugins=( 
[plugins...]
zsh-syntax-highlighting
zsh-autosuggestions
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NoBwKAER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmdmfrwlumra8vfxfg4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NoBwKAER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmdmfrwlumra8vfxfg4p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El  mismo proceso se hace con la mayoría de plugins aunque hay algunos donde la instalación se realiza de otras maneras.&lt;/p&gt;




&lt;p&gt;Ya has llegado al final de este tutorial, espero haberte ayudado en algo y no olvides dejar sus agradecimientos. bayy 🙋🙋&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lema:&lt;/strong&gt; &lt;em&gt;Don't be the spectator of your life, be the main character.&lt;/em&gt; 🚀🌟&lt;/p&gt;

&lt;p&gt;Instagram 📷: &lt;a href="https://www.instagram.com/reakine.rd/"&gt;@reakine.net&lt;/a&gt;&lt;br&gt;
Github 💻: &lt;a href="https://github.com/christopherjael"&gt;christopherjael&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Para más información del tema:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/ohmyzsh/ohmyzsh"&gt;oh-my-zsh&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/romkatv/powerlevel10k"&gt;Powerlevel10k&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/ryanoasis/nerd-fonts"&gt;Nerd Fonts&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ux</category>
      <category>bash</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Why do you need Helmet in NodeJs ? </title>
      <author>Siddharth Udeniya</author>
      <pubDate>Mon, 10 May 2021 05:27:49 +0000</pubDate>
      <link>https://dev.to/sid__/why-do-you-need-helmet-in-nodejs-h1b</link>
      <guid>https://dev.to/sid__/why-do-you-need-helmet-in-nodejs-h1b</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Helmet helps you secure your Express apps by setting various HTTP headers. It's not a silver bullet, but it can help!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are the lines written on top of the npm's helmet page.&lt;/p&gt;

&lt;p&gt;Most of you might have come across this code &lt;code&gt;app.use(helmet())&lt;/code&gt; in your codebase/boilerplates. Let's dive deep into helmet today.&lt;/p&gt;

&lt;p&gt;In simple words, Helmet adds/secures HTTP headers returned by your express app.&lt;/p&gt;

&lt;p&gt;Most of the newbie devs tend to ignore this (secured HTTP headers).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;helmet()&lt;/code&gt; is a wrapper around 15 middlewares, 11 of them are used by default with preset settings.&lt;/p&gt;

&lt;p&gt;Let's see those 11 headers in detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-contentsecuritypolicy-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Content-Security-Policy&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Used for mitigating XSS Attacks. Helps control what domain/subdomain, which protocol, what kind of media should talk to the server. &lt;br&gt;
&lt;code&gt;helmet.contentSecurityPolicy();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xdnsprefetchcontrol-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-DNS-Prefetch-Control&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;As the name of this header suggests, the browser tries to resolve DNS while (in parallel) loading the page content. DNS resolution for what? - For the links, images, etc referenced on the page which is being loaded. Prefetching occurs in the background. Helps reduce latency. By default, helmet sets this as &lt;code&gt;off&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;helmet.dnsPrefetchControl(options)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-expectct-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Expect-CT&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;CT in this header stands for &lt;strong&gt;Certificate Transparency&lt;/strong&gt;. Catch that misissued certificate on that site.&lt;br&gt;
&lt;code&gt;helmet.expectCt()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xframeoptions-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Frame-Options&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;A well-known header to prevent clickjacking up to a certain extent. Gets overridden by &lt;code&gt;frame-ancestors&lt;/code&gt; directive of Content Security Policy header.&lt;br&gt;
&lt;code&gt;helmet.frameguard();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xpoweredby-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Powered-By&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This headers makes very less difference even if turned off. Set to &lt;code&gt;express&lt;/code&gt; by default in Express framework.&lt;br&gt;
&lt;code&gt;helmet.hidePoweredBy()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-stricttransportsecurity-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Strict-Transport-Security&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;or HSTS in short, tells browsers that the website should only be accessible via HTTP(S) protocol. No HTTP please! Takes one mandatory param &lt;em&gt;max-age&lt;/em&gt; (which is 180 days in helmet) and 2 optional params &lt;em&gt;includeSubDomains&lt;/em&gt; (defaults to true) &amp;amp; &lt;em&gt;preload&lt;/em&gt; (defaults to false) in options. &lt;br&gt;
&lt;code&gt;helmet.hsts(options)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xdownloadoptions-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Download-Options&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Specific to Internet Explorer, this header forces potentially unsafe files and instead downloads them directly, thus preventing script injections since the file is no longer opened in the security context of the site.&lt;br&gt;
&lt;code&gt;helmet.ieNoOpen()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xcontenttypeoptions-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Content-Type-Options&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;helmet.noSniff sets the X-Content-Type-Options header to nosniff. Browsers in some cases try to guess the MIME types by looking at bytes of resources shared by the server. Hey Browser! Don't do that. That's MIME sniffing. Let me give you a nosniff in the Content Type Options.&lt;br&gt;
&lt;code&gt;helmet.noSniff()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xpermittedcrossdomainpolicies-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-Permitted-Cross-Domain-Policies&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Ah! That's a little tricky. Check this &lt;a href="https://owasp.org/www-project-secure-headers/#x-permitted-cross-domain-policies"&gt;article&lt;/a&gt; for a detailed description.&lt;br&gt;
&lt;code&gt;helmet.permittedCrossDomainPolicies(options)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-referrerpolicy-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Referrer-Policy&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Server dictates what all referrer information it needs in the &lt;code&gt;Referer&lt;/code&gt; (Oh yeah! That's a misspell) header via &lt;code&gt;Referrer-Policy&lt;/code&gt; header. It defaults to no-referrer in case of using helmet.&lt;br&gt;
helmet.referrerPolicy(options)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2&gt;
  &lt;a href="#-raw-xxssprotection-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;X-XSS-Protection&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Oh, Stop! I detected an xss attack.&lt;br&gt;
If it's 0 - Disables XSS filtering.&lt;br&gt;
If it's 1 - Enables XSS filtering. sanitize and then load if XSS is detected.&lt;br&gt;
If it's 1; mode=block - Enables XSS filtering. Do not sanitize, just stop the rendering altogether.&lt;br&gt;
&lt;code&gt;helmet.xssFilter()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that was all about the 11 default headers Helmet sets. A snippet from Helmet's &lt;a href="https://www.npmjs.com/package/helmet"&gt;NPM Page&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yEYmFkpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3grhv8ts3fk1y92b7c29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yEYmFkpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3grhv8ts3fk1y92b7c29.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introducing: Mint UI 🎉</title>
      <author>Szikszai Gusztáv</author>
      <pubDate>Mon, 10 May 2021 05:14:38 +0000</pubDate>
      <link>https://dev.to/gdotdesign/introducing-mint-ui-l7</link>
      <guid>https://dev.to/gdotdesign/introducing-mint-ui-l7</guid>
      <description>&lt;p&gt;Finally after months (and months) of work, I'm proud to present: &lt;a href="https://ui.mint-lang.com"&gt;Mint UI&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/JqDeI2yjpSRgdh35oe/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/JqDeI2yjpSRgdh35oe/giphy.gif" alt="TA-DA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that was a bit anticlimactic 😅 you probably don't know what the hell I am talking about so let me show you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ui.mint-lang.com"&gt;Mint UI&lt;/a&gt; is a component library written in &lt;a href="https://www.mint-lang.com"&gt;Mint&lt;/a&gt; - a programming language specifically designed for &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;Single Page Applications&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep on reading, to see some of it's features - in video!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components-galore"&gt;
  &lt;/a&gt;
  Components Galore
&lt;/h2&gt;

&lt;p&gt;Mint UI has &lt;strong&gt;60+ components&lt;/strong&gt; that you can use to build your next great application (or side project 🙂).&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544021674" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That was just a taste, you can play around with all the components on the &lt;a href="https://ui.mint-lang.com/components"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seamless-sizing"&gt;
  &lt;/a&gt;
  Seamless Sizing
&lt;/h2&gt;

&lt;p&gt;The size of components are completely fluid, controlled by the &lt;code&gt;font-size&lt;/code&gt; property - &lt;code&gt;em&lt;/code&gt; is used everywhere - so you can make them as large or as small as you want! As a bonus any children will be sized accordingly as well!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544015375" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobile-support"&gt;
  &lt;/a&gt;
  Mobile Support
&lt;/h2&gt;

&lt;p&gt;Most components adapt to the screen size by using media queries, but some change based on available space.  &lt;/p&gt;

&lt;p&gt;For example the &lt;a href="https://ui.mint-lang.com/components/ui-table"&gt;table&lt;/a&gt; changes into a &lt;a href="https://ui.mint-lang.com/components/ui-definition-list"&gt;definition list&lt;/a&gt; if it's width goes below a defined number.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544017739" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keyboard-support"&gt;
  &lt;/a&gt;
  Keyboard Support
&lt;/h2&gt;

&lt;p&gt;All interactive elements besides can be interacted with with mouse and keyboard.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544168530" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#light-and-dark-modes"&gt;
  &lt;/a&gt;
  Light and Dark modes
&lt;/h2&gt;

&lt;p&gt;Mint UI supports light and dark modes and even has a &lt;a href="https://ui.mint-lang.com/components/ui-dark-mode-toggle"&gt;component to toggle them&lt;/a&gt; built in!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544016909" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#themeable-with-css-variables"&gt;
  &lt;/a&gt;
  Themeable with CSS variables
&lt;/h2&gt;

&lt;p&gt;All components can be themed with design tokens by using CSS variables.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/544213488" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Currently only colors can be changed but in future versions there will be all kinds of tokens (paddings, spacing, etc...). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#powered-by-mint"&gt;
  &lt;/a&gt;
  Powered by Mint
&lt;/h2&gt;

&lt;p&gt;Mint UI is written in Mint and that means that you can't use in JavaScript projects (yet) only in Mint projects, but that's a good thing! Mint as everything you need to create production ready applications. &lt;/p&gt;

&lt;p&gt;If you are looking to learn Mint, I have a series on it here &lt;a href="https://dev.to/gdotdesign/series/836"&gt;https://dev.to/gdotdesign/series/836&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;Mint UI is hosted on &lt;a href="https://github.com/mint-lang/mint-ui"&gt;Github&lt;/a&gt; and its source code is public but it's licensed differently than other open source projects: it is free (even for commercial use) for individuals and small companies but a paid license is required for bigger companies (4 or more employees).&lt;/p&gt;

&lt;p&gt;With the release there is a special 25% discount for the first 50 companies who purchase using these links:&lt;br&gt;
&lt;a href="https://gum.co/mint-ui-license/u5bjba8"&gt;https://gum.co/mint-ui-license/u5bjba8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://gum.co/mint-ui/dbspk6a"&gt;https://gum.co/mint-ui/dbspk6a&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Let me know what do you think in the comments below! &lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>news</category>
      <category>mintlang</category>
    </item>
    <item>
      <title>7 Useful JavaScript Tricks and Tips</title>
      <author>Michael Karén</author>
      <pubDate>Mon, 10 May 2021 05:11:30 +0000</pubDate>
      <link>https://dev.to/this-is-learning/7-useful-javascript-tricks-and-tips-4lp1</link>
      <guid>https://dev.to/this-is-learning/7-useful-javascript-tricks-and-tips-4lp1</guid>
      <description>&lt;p&gt;&lt;em&gt;You Will Be Surprised By Number 9!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, I gathered some JavaScript tips and tricks that I believe can make you a better JavaScript developer. In no particular order, here are seven (?) JavaScript tricks!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-converting-to%C2%A0numbers"&gt;
  &lt;/a&gt;
  1. Converting to numbers
&lt;/h2&gt;

&lt;p&gt;JavaScript is a &lt;strong&gt;loosely typed language&lt;/strong&gt;, meaning we don't have to explicitly specify types of variables. JavaScript also freely type-converts values into a type depending on the context of their use.&lt;/p&gt;

&lt;p&gt;Converting values to numbers, especially strings to numbers, is a common requirement and many methods can be used. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unary-operator"&gt;
  &lt;/a&gt;
  Unary + operator
&lt;/h3&gt;

&lt;p&gt;The most concise method for type-converting strings into numbers is the &lt;strong&gt;unary &lt;code&gt;+&lt;/code&gt; operator&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A unary operation is an operation with only one operand. This operand comes either before or after the operator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;The unary plus operator&lt;/em&gt; precedes its operand and evaluates to its operand but attempts to convert it into a number if it isn't already. Here are a few more examples of how it behaves:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;  &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, what if we want to be more explicit in our code?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#number"&gt;
  &lt;/a&gt;
  Number
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"&gt;Number&lt;/a&gt; is a primitive wrapper object used to represent and manipulate numbers. When used as a function, &lt;code&gt;Number(value)&lt;/code&gt; converts a string or other value to the Number type. If the value can't be converted, it returns &lt;code&gt;NaN&lt;/code&gt; (Not a Number).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// 1.3&lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tax&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parseint"&gt;
  &lt;/a&gt;
  parseInt
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt"&gt;parseInt()&lt;/a&gt; takes a String as a first argument and a base to which that String will be converted to. This method always returns an integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;// 1234&lt;/span&gt;
&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;11 players&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 11&lt;/span&gt;
&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;player 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;// NaN&lt;/span&gt;
&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10.81&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;parseInt()&lt;/code&gt; tries to get a number from a string that does not only contain a number, but if the string does not start with a number, you’ll get &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parsefloat"&gt;
  &lt;/a&gt;
  parseFloat
&lt;/h3&gt;

&lt;p&gt;If we want to retain the decimal part and not just the integer part, we can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat"&gt;parseFloat()&lt;/a&gt; that takes a String as an argument and returns the Float point number equivalent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10.42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10.42&lt;/span&gt;
&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10.00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few more ways to convert to numbers but these are the more common ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-managing-objects"&gt;
  &lt;/a&gt;
  2. Managing objects
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Destructuring&lt;/strong&gt; is a huge part of ES6 and something you're probably going to be using often. It allows us to extract data from objects, and assigning the extracted data into variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can rename the variables if we want to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another handy thing we could do is to destructure the returned object by a function and pick and choose what values we want to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Max&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Best&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPerson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, with destructuring, we can return multiple values from a function by returning an object and choosing the pieces we want to be returned.&lt;/p&gt;

&lt;p&gt;Removing a property in an immutable way requires a little trick provided by spread’s counterpart, the &lt;strong&gt;rest&lt;/strong&gt; operator, which is written with three dots (...) like spread. However, in this case, we spread the remaining properties into a new object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPerson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {firstName: "Max", lastName: "Best"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;person&lt;/code&gt; object holds all properties from the original person object except &lt;code&gt;age&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-swapping-two-variables"&gt;
  &lt;/a&gt;
  3. Swapping two variables
&lt;/h2&gt;

&lt;p&gt;Using what we learned in the last trick makes swapping variables as easy as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;happy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// me = 'sad', you = 'happy'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code creates an array of [you, me] and immediately destructures them into the opposite variables.&lt;/p&gt;

&lt;p&gt;No need for temp variables anymore!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-setting-defaults"&gt;
  &lt;/a&gt;
  4. Setting defaults
&lt;/h2&gt;

&lt;p&gt;We have all seen them. The endless if statements checking if the values have been set. What if I said there was a better way? Well, that's exactly what I'm saying, default values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;nullish coalescing operator (&lt;code&gt;??&lt;/code&gt;)&lt;/a&gt; is a logical operator that returns its right-hand side operand when its left-hand side operand is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; and otherwise returns its left-hand side operand.&lt;br&gt;
We can use this to set default values, for example when we receive a list that has not been set to an array yet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;receivedBooks&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;We could use the &lt;em&gt;null coalescing operator&lt;/em&gt; to set defaults for variables in functions but there is a better way, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters"&gt;default parameters&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculateArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;calculateArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we set the default value for &lt;code&gt;height&lt;/code&gt; to 100 and calculate the area by only sending in the &lt;code&gt;width&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h3&gt;

&lt;p&gt;Another trick when destructruring objects is setting default values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;750&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rectangle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 400 - comes from rectangle object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 500 - fallback to default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ES6 destructuring default values only kick in if the value is &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-random-number-from-interval"&gt;
  &lt;/a&gt;
  5. Random number from interval
&lt;/h2&gt;

&lt;p&gt;There are times when we need a random number to be generated within a range. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"&gt;&lt;code&gt;Math.random()&lt;/code&gt;&lt;/a&gt; function helps us generate a random number, and then we can transform it to the range we want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomIntFromInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's another trick baked into this one if you look at how the function is constructed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-remove-array-duplicates"&gt;
  &lt;/a&gt;
  6. Remove array duplicates
&lt;/h2&gt;

&lt;p&gt;The Set object type introduced in ES6 lets you store unique values. Together with the spread operator (&lt;code&gt;...&lt;/code&gt;), we can use it to create a new array with only the unique values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uniqueArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a Set from an array and because each value in the Set has to be unique we remove all duplicates. We then convert the Set back to a new array using the spread operator.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-dynamic-property%C2%A0names"&gt;
  &lt;/a&gt;
  7. Dynamic property names
&lt;/h2&gt;

&lt;p&gt;ES6 brought us computed property names that allow property keys of object literals to use expressions. By surrounding the key with brackets [], we can use variables as property keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kiwi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {fruit: "kiwi"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is useful in a situation where you want the key to be created on the fly.&lt;/p&gt;

&lt;p&gt;We can access the value with bracket notation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;   &lt;span class="c1"&gt;// "kiwi"&lt;/span&gt;
&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// "kiwi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or with dot notation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "kiwi"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-bonus-trick"&gt;
  &lt;/a&gt;
  8. Bonus trick
&lt;/h2&gt;

&lt;p&gt;If we want to add a new item to an array &lt;strong&gt;without mutation&lt;/strong&gt; (which we usually want to avoid), we can create a new array using the ES6 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;spread operator&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"&gt;slice&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;insert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// first half of array&lt;/span&gt;
  &lt;span class="nx"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="c1"&gt;// new item&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;// rest of array&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;L&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;E&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["S", "L", "I", "C", "E"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9"&gt;
  &lt;/a&gt;
  9.
&lt;/h2&gt;

&lt;p&gt;Why was 6 afraid of 7?&lt;/p&gt;

&lt;p&gt;Because 7 ate 9.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope you find some of these JavaScript tricks useful and worth adding to your everyday arsenal.&lt;br&gt;
And remember, being responsible is far more important than being efficient.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>UML diagram for GoF design pattern examples in Python</title>
      <author>Takaaki Teshima</author>
      <pubDate>Mon, 10 May 2021 04:47:47 +0000</pubDate>
      <link>https://dev.to/takaakit/uml-diagram-for-gof-design-pattern-examples-in-python-4j40</link>
      <guid>https://dev.to/takaakit/uml-diagram-for-gof-design-pattern-examples-in-python-4j40</guid>
      <description>&lt;p&gt;This post lists UML diagrams of GoF design pattern examples written in Python.  The UML diagrams are displayed using &lt;em&gt;Diagram Map&lt;/em&gt;. If you want to know about &lt;em&gt;Diagram Map&lt;/em&gt;, see &lt;a href="https://dev.to/takaakit/diagram-map-tracing-uml-sysml-elements-across-diagrams-49i7"&gt;this post&lt;/a&gt;. Also, you can get UML model data and Python code of the examples from &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python"&gt;here&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavioral Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chain-of-responsibility"&gt;Chain of Responsibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command"&gt;Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interpreter"&gt;Interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#iterator"&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mediator"&gt;Mediator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memento"&gt;Memento&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#observer"&gt;Observer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#state"&gt;State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strategy"&gt;Strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-method"&gt;Template Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visitor"&gt;Visitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Creational Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#abstract-factory"&gt;Abstract Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#builder"&gt;Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#factory-method"&gt;Factory Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prototype"&gt;Prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#singleton"&gt;Singleton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Structural Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#adapter"&gt;Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bridge"&gt;Bridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#composite"&gt;Composite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#decorator"&gt;Decorator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#facade"&gt;Facade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flyweight"&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#proxy"&gt;Proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#chain-of-responsibility"&gt;
  &lt;/a&gt;
  Chain of Responsibility &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A trouble is turned around among supporters, and the trouble will be handled by the supporter who can handle it. There are four types of supporters below:

&lt;ul&gt;
&lt;li&gt;LazySupporter doesn't handle any trouble&lt;/li&gt;
&lt;li&gt;MoodySupporter handles odd ID troubles&lt;/li&gt;
&lt;li&gt;SpecialSupporter handles a trouble of the target ID.&lt;/li&gt;
&lt;li&gt;LimitedSupporter handles troubles below the limit ID.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ikjlVPXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5xiis69so9sk5azpjtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ikjlVPXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5xiis69so9sk5azpjtf.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/chain_of_responsibility"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/kcLa7su0/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/chain_of_responsibility/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Encapsulate a request as an object, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Simple drawing application:

&lt;ul&gt;
&lt;li&gt;Draw a path with points by dragging the mouse.&lt;/li&gt;
&lt;li&gt;Revert to one previous drawing by pressing the Undo button.&lt;/li&gt;
&lt;li&gt;Erase all drawing by pressing the Clear button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Mx_KcRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2xb1c94nu070snwyiob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Mx_KcRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2xb1c94nu070snwyiob.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/command"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/r8b3g7sv/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/command/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#interpreter"&gt;
  &lt;/a&gt;
  Interpreter &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
An interpreter for mini language to operate radio controlled car. It parses the following syntax composed of "forward", "left", "right", and "repeat" commands:&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;program&amp;gt;      ::= program &amp;lt;command list&amp;gt;
&amp;lt;command list&amp;gt; ::= &amp;lt;command&amp;gt;* end
&amp;lt;command&amp;gt;      ::= &amp;lt;repeat&amp;gt; | &amp;lt;action&amp;gt;
&amp;lt;repeat&amp;gt;       ::= repeat &amp;lt;number&amp;gt; &amp;lt;command list&amp;gt;
&amp;lt;action&amp;gt;       ::= forward | right | left
&amp;lt;number&amp;gt;       ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--01aEUwoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjrnadi6jjz2asqico53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--01aEUwoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjrnadi6jjz2asqico53.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/interpreter"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/n1L23exs/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/interpreter/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#iterator"&gt;
  &lt;/a&gt;
  Iterator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Add books in a bookshelf and display the names of the book in turn.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IA3GrPc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yr0x6tiffjv536rtjvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IA3GrPc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yr0x6tiffjv536rtjvr.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/iterator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/skmxbufq/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/iterator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#mediator"&gt;
  &lt;/a&gt;
  Mediator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Show a login dialog for entering a username and password. The dialog has the following elements:

&lt;ul&gt;
&lt;li&gt;"Guest" and "Login" radio buttons&lt;/li&gt;
&lt;li&gt;"Username" and "Password" text fields&lt;/li&gt;
&lt;li&gt;"OK" and "Cancel" buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And change the editable properties of the elements depending on the state of the radio buttons and text fields.&lt;/p&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8yyJIQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yx7sqhqrywki2op6sid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8yyJIQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yx7sqhqrywki2op6sid.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/mediator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/xdykgenz/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/mediator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#memento"&gt;
  &lt;/a&gt;
  Memento &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Without violating encapsulation, capture and externalize an object's internal state so that the object can be returned to this state later (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A dice game in which money increases and decreases:

&lt;ul&gt;
&lt;li&gt;A gamer shakes a dice and the number determine the next state.&lt;/li&gt;
&lt;li&gt;If the number of dice is even, gamer's money doubles, and if it is odd, gamer's money is halved.&lt;/li&gt;
&lt;li&gt;If the gamer's money is less than half of the highest amount, it returns to the highest amount.&lt;/li&gt;
&lt;li&gt;The game is repeated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UXf0KWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv6syu2we3h3lvgkqx28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UXf0KWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv6syu2we3h3lvgkqx28.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/memento"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/pr6Lnxhy/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/memento/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#observer"&gt;
  &lt;/a&gt;
  Observer &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Observers observe a Subject object holding a numerical value and display the value. The display formats are digits and bar charts.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_G4-Kqf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ldugdlkjj8n88nauoam.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_G4-Kqf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ldugdlkjj8n88nauoam.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/observer"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/ucg97a86/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/observer/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Allow an object to alter its behavior when its internal state changes. The object will appear to change its class (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Safe security system that the security status changes with time. When you press a button in a dialog, the message displayed will change depending on whether the time is day or night. The internal time of the dialog advances one hour for every second of real time.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9BkXZqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viegibktpwo18ph1pzkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9BkXZqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/viegibktpwo18ph1pzkg.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/state"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/L9wnbjea/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/state/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#strategy"&gt;
  &lt;/a&gt;
  Strategy &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from the clients that use it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A game of rock-scissors-paper. Two strategies are available:

&lt;ul&gt;
&lt;li&gt;Random Strategy: showing a random hand signal.&lt;/li&gt;
&lt;li&gt;Mirror Strategy: showing a hand signal from the previous opponent's hand signal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IB1Sloey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gay063tj1ehf5cnc6zvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IB1Sloey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gay063tj1ehf5cnc6zvi.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/strategy"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/axzt2whr/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/strategy/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#template-method"&gt;
  &lt;/a&gt;
  Template Method &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define the skeleton of an algorithm in an operation, deferring some steps to client subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a character or string repeatedly 5 times.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pfbBIr0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faag0u42e4j1kcs0arxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pfbBIr0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faag0u42e4j1kcs0arxr.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/template_method"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/Lpct80wd/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/template_method/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#visitor"&gt;
  &lt;/a&gt;
  Visitor &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Visitor visits the file system composed of files and directories, and displays a list of files/directories.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--beDO4OGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk95xbeucjann8tezcvo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--beDO4OGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk95xbeucjann8tezcvo.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/behavioral_patterns/visitor"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/yt6bh847/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/behavioral_patterns/visitor/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#abstract-factory"&gt;
  &lt;/a&gt;
  Abstract Factory &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide an interface for creating families of related or dependent objects without specifying their concrete classes (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create a hierarchical link collection as an HTML file. It can be created in either tabular or list format.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VN-lBJ47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv6oqw0vypj1oit2qh4o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VN-lBJ47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv6oqw0vypj1oit2qh4o.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/abstract_factory"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/bdf83h10/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/abstract_factory/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#builder"&gt;
  &lt;/a&gt;
  Builder &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Separate the construction of a complex object from its representation so that the same construction process can create different representations (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create documents in HTML format and text format. It is possible to create different documents in the same construction process.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UxYHpI7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t1ea1eai78pxx576gga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UxYHpI7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t1ea1eai78pxx576gga.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/builder"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/z4asqhc1/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/builder/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#factory-method"&gt;
  &lt;/a&gt;
  Factory Method &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
The subject is a factory to make credit cards. The Factory defines how to create an credit card, but the actual credit card is created by the CreditCardFactory. The "createProduct()" is called a Factory Method, and it is responsible for manufacturing an object.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVpYoHT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4z0n3qgmvpbsl6iei1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVpYoHT1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4z0n3qgmvpbsl6iei1a.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/factory_method"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/e0ymt21f/1//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/factory_method/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#prototype"&gt;
  &lt;/a&gt;
  Prototype &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string enclosed with a frame line, or drawn with an underline. The Client (Main) registers instances of the Display subclass in the Manager class. When necessary, the Manager class asks those registered instances to return a clone. The Client (Main) requires the returned clones to display.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbKMB-0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f26n923f53g6rg78mgwx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbKMB-0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f26n923f53g6rg78mgwx.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/prototype"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/dzy73nk4/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/prototype/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#singleton"&gt;
  &lt;/a&gt;
  Singleton &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Ensure a class has only one instance, and provide a global point of access to it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Check whether the same instance is obtained.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6CpEpJZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoqi1uig68ooc5ct9yyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6CpEpJZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoqi1uig68ooc5ct9yyq.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/creational_patterns/singleton"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/71m0ucy5/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/creational_patterns/singleton/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adapter"&gt;
  &lt;/a&gt;
  Adapter &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display the given string as follows&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-- Nice to meet you --
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or display it as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[ Nice to meet you ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5iuVQRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmwsz4nd3fiw4q7r4we6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5iuVQRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmwsz4nd3fiw4q7r4we6.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/adapter"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/utp3mbjo/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/adapter/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#bridge"&gt;
  &lt;/a&gt;
  Bridge &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Decouple an abstraction from its implementation so that the two can vary independently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display only one line or display the specified number of lines.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWKKngSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/it5s9sjkfnyckhi4yfzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWKKngSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/it5s9sjkfnyckhi4yfzf.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/bridge"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/g7dphf6e/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/bridge/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#composite"&gt;
  &lt;/a&gt;
  Composite &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Compose objects into tree structures to represent whole-part hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Represents a file system composed of files and directories. FileSystemElement makes it possible to treat File and Directory uniformly.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XFdyYe73--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mujxvdmu313bc2rq6jmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XFdyYe73--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mujxvdmu313bc2rq6jmp.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/composite"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/q8hudxfm/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/composite/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#decorator"&gt;
  &lt;/a&gt;
  Decorator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string with decorative frames. The frames can be combined arbitrarily.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJw5s5y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lybgbpaugqweps0kx3gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJw5s5y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lybgbpaugqweps0kx3gd.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/decorator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/2sko5rwy/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/decorator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#facade"&gt;
  &lt;/a&gt;
  Facade &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create a simple homepage through a Facade (PageCreator). The Facade gets info from the DataLibrary and uses the info to create an HTML file.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUwfqOks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiq6tw5qknj1tc30z3tb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUwfqOks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xiq6tw5qknj1tc30z3tb.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/facade"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/nfh5kmge/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/facade/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#flyweight"&gt;
  &lt;/a&gt;
  Flyweight &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Use sharing to support large numbers of fine-grained objects efficiently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string consisting of large characters (0-9 digits only). Large character objects are not created until they are needed. And the created objects are reused.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ksO8a6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2bysm3corkh4q1miofx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ksO8a6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2bysm3corkh4q1miofx.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/flyweight"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/d680tLjr/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/flyweight/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#proxy"&gt;
  &lt;/a&gt;
  Proxy &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a surrogate or placeholder for another object to control access to it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Print on a named printer. Setting and changing the printer name is done by Proxy (ProxyPrinter). At the time of printing, create an instance of the RealSubject (RealPrinter) for the first time.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YflZ4azN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aajt7bycb23312bmo2x3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YflZ4azN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aajt7bycb23312bmo2x3.png" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-python/tree/master/structural_patterns/proxy"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/k72xzr49/7//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-python-design-pattern-examples/blob/master/structural_patterns/proxy/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Gamma, E. et al. Design Patterns: Elements of Reusable Object-Oriented Software, Addison-Wesley, 1994&lt;/li&gt;
&lt;li&gt;Hiroshi Yuki. Learning Design Patterns in Java [In Japanese Language], Softbank publishing, 2004&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/takaakit/diagram-map-tracing-uml-sysml-elements-across-diagrams-49i7"&gt;Diagram Map: tracing UML/SysML elements across diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takaakit/design-pattern-examples-in-python"&gt;Design Pattern Examples in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>uml</category>
      <category>gof</category>
      <category>designpatterns</category>
      <category>python</category>
    </item>
    <item>
      <title>Basics of Java #10</title>
      <author>Chathu Rashmini</author>
      <pubDate>Mon, 10 May 2021 04:39:20 +0000</pubDate>
      <link>https://dev.to/chathurashmini/basics-of-java-10-lb2</link>
      <guid>https://dev.to/chathurashmini/basics-of-java-10-lb2</guid>
      <description>&lt;p&gt;In this article we are going to learn about how to read user inputs in java.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#read-user-inputs"&gt;
  &lt;/a&gt;
  Read user inputs
&lt;/h1&gt;

&lt;p&gt;To read user inputs first you need to import &lt;code&gt;java.util.Scanner&lt;/code&gt;. Here &lt;code&gt;scanner&lt;/code&gt; is a predefined java class. Let's see how we can read inputs from the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Age: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 01&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 02&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Line 01 prints 'Age: ' in the terminal for the user to input his age. Line 02 has created an object named &lt;code&gt;inputAge&lt;/code&gt; which belongs to &lt;code&gt;Scanner&lt;/code&gt; class. You can see that I have used &lt;code&gt;new&lt;/code&gt; to create the object. Then within the parenthesis I have entered &lt;code&gt;System.in&lt;/code&gt;. This is to get inputs into the system. Think it in the same way as &lt;code&gt;System.out&lt;/code&gt;. So line 02 reads the user input (age that user enters) and assigns it to &lt;code&gt;inputAge&lt;/code&gt;.&lt;br&gt;
Now try to print &lt;code&gt;inoutAge&lt;/code&gt;. If you run the following command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputAge&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you will see that the program does not print the inputted age, but a long sentence. So how can you print the age? For this you have to use &lt;code&gt;nextByte()&lt;/code&gt; predefined method from &lt;code&gt;Scanner&lt;/code&gt; class. It scans the next token of the input as a byte. Check the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Age: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 01&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 02&lt;/span&gt;
        &lt;span class="kt"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputAge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextByte&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// line 03&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 04&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in line 03 we have declared a new variable &lt;code&gt;age&lt;/code&gt; which is of type &lt;code&gt;byte&lt;/code&gt;. Then we have applied &lt;code&gt;nextByte()&lt;/code&gt; method to the &lt;code&gt;inputAge&lt;/code&gt;. Then when you print the &lt;code&gt;age&lt;/code&gt; in line 04 you can see the output as expected. Also in line 04 'implicit casting' takes place and &lt;code&gt;age&lt;/code&gt; is converted into a string by java itself.&lt;/p&gt;

&lt;p&gt;Try to enter a number like 10.5 (with decimal digits) and check whether the code will run smoothly.&lt;br&gt;
No right? You will definitely get an error. This is because we have declared &lt;code&gt;age&lt;/code&gt; as a &lt;code&gt;byte&lt;/code&gt; type variable. So it does not accept any floating point numbers. For that there is another predefined method &lt;code&gt;nextFloat()&lt;/code&gt; in the &lt;code&gt;Scanner&lt;/code&gt; class. By using it you can take numbers with floating points as user inputs. Go through the code given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Height in meters: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputHeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextFloat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;  &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"m tall."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's see how can we ask the user to input a string and then to print that string in the terminal. Look at the code given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter your name: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 01&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 02&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// line 03&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;userName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 04&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in line 01 we are asking the user to input his name. Probably he will enter his full name (which means more than one word). Let's assume that he has entered as "Edward Cullen". This name is read by line 02. Now we have to convert this &lt;code&gt;Scanner&lt;/code&gt; object &lt;code&gt;name&lt;/code&gt; into a string. For that here I have used the predefined method &lt;code&gt;next()&lt;/code&gt;. However, when the line 04 prints the output you will only see 'Hello Edward'. Why is that? That is because the &lt;code&gt;next()&lt;/code&gt; method reads only one token. Which means it does not read the whole line. If you want to read the full line use method &lt;code&gt;nextLine()&lt;/code&gt; as shown in the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.company&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Scanner&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;inputName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Full Name: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inputName&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Oh hey "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;nextLine()&lt;/code&gt; method reads the full name and assign it to the string &lt;code&gt;fullName&lt;/code&gt;. We have used &lt;code&gt;trim()&lt;/code&gt; method just to eliminate any unnecessary white spaces that might be there in the user input. Using &lt;code&gt;trim()&lt;/code&gt; is not mandatory. If you input name as '        Jacob Black     ', you will get the output as 'Oh hey Jacob Black' without any unnecessary spaces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Ask the user to enter his name (empName) and salary (salary). Then add a 20,000 bonus to his salary (salWithBonus) and print the line "Hi  your total salary with bonus is ".&lt;br&gt;
Ex: &lt;br&gt;
Input-:&lt;br&gt;
Full Name:      Charlie Swan&lt;br&gt;
Basic Salary: 100000&lt;br&gt;
Expected output-:&lt;br&gt;
Hi Charlie Swan your total salary with bonus is 120000.0&lt;/p&gt;

&lt;p&gt;With that we can wrap up this article. Head to the next article to learn more about java :P&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Let's Build ML Application using Streamlit and Azure in 5mins!!</title>
      <author>SILVOJ RAJESH KUMAR</author>
      <pubDate>Mon, 10 May 2021 04:12:24 +0000</pubDate>
      <link>https://dev.to/rajeshsilvoj/let-s-build-ml-application-using-streamlit-and-azure-in-5mins-477p</link>
      <guid>https://dev.to/rajeshsilvoj/let-s-build-ml-application-using-streamlit-and-azure-in-5mins-477p</guid>
      <description>&lt;p&gt;&lt;strong&gt;Cognitive Services brings AI within reach of every developer—without requiring machine-learning expertise. All it takes is an API call to embed the ability to see, hear, speak, search, understand and accelerate decision-making into your apps. Enable developers of all skill levels to easily add AI capabilities to their apps&lt;/strong&gt;-Microsoft.&lt;/p&gt;

&lt;p&gt;Microsoft has become a cloud-based provider of AI capabilities, machine learning capabilities and sentimental analysis.&lt;br&gt;
we can use the azure cognitive services to build intelligent applications &lt;br&gt;
Step-1: Create a &lt;a href="////portal.azure.com"&gt;Microsoft Azure Account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Step-2:Create a new resource&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tHvmyG6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx0d2xz6t9jacrunirst.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHvmyG6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx0d2xz6t9jacrunirst.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;br&gt;
 Step-3: Search for Translator in resources&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0r1J_i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxhsphszhsqcgg888s0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0r1J_i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nxhsphszhsqcgg888s0b.png" alt="Screenshot 2021-05-08 212716"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   -&amp;gt;Give resource name
   -&amp;gt;Select region as eastus
   -&amp;gt;Select free subscription in the pricing tier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cFBtmtRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezfa32c7g5yybomtr3q2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFBtmtRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezfa32c7g5yybomtr3q2.png" alt="123"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you can see your API keys for the translator app.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CzLCNStW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kllwxld3m60uywuk4ybu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CzLCNStW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kllwxld3m60uywuk4ybu.png" alt="get-cog-serv-keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step-4: Let's set up Streamlit.&lt;br&gt;
Step-5:Open your command line install them&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZzFF8Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjlq5vq41b827duopmtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZzFF8Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjlq5vq41b827duopmtf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step-6: There is a good &lt;em&gt;&lt;a href="https://www.udemy.com/course/python-streamlit-for-making-web-applications/"&gt;Streamlit course&lt;/a&gt;&lt;/em&gt; on Udemy. It is a free course for beginners.&lt;br&gt;
Let's set up our application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-LbjuA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dwj1z1chpk2rwauoyv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-LbjuA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8dwj1z1chpk2rwauoyv2.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Explore the &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/translator/quickstart-translator?tabs=python"&gt;quick start&lt;/a&gt; guide on the Azure page and get the code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUO5mlL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq3tesberp2h7201ln0b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUO5mlL5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mq3tesberp2h7201ln0b.PNG" alt="py code"&gt;&lt;/a&gt;&lt;br&gt;
Step-7: let's change some of the parameters and then our code will be ready. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btrZKFul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5c123y25u2yjm1jeks5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btrZKFul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5c123y25u2yjm1jeks5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step-8: Run application:- streamlit run .py in command line.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#try-out-a-working-application-here-httpssharestreamlitiorajeshsilvojscripterappmainapp1py"&gt;
  &lt;/a&gt;
  Try out a working application here: &lt;a href="https://share.streamlit.io/rajeshsilvoj/scripter_app/main/app1.py"&gt;https://share.streamlit.io/rajeshsilvoj/scripter_app/main/app1.py&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Input&lt;/em&gt;:"&lt;br&gt;&lt;br&gt;
The probosci's monkey (Nasalis larvatus) is endemic to the island of Borneo, where it is found predominantly in coastal areas, near rivers and in swamp forests. It is perhaps the most aquatic of the primates and is a fairly good swimmer, capable of swimming underwater; apart from this, it is largely arboreal. This photograph is a composite of three images and shows a probosci's monkey jumping between trees in Labuk Bay in the Malaysian state of Sabah."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Translated to Italian&lt;/strong&gt;👇:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hTzLUN_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6z3nyow09ap9wdpq5iuz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hTzLUN_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6z3nyow09ap9wdpq5iuz.PNG" alt="output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Translated to Hindi&lt;/strong&gt;👇:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lhBtGUPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vimqkqpcts4pt9ewugdq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lhBtGUPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vimqkqpcts4pt9ewugdq.PNG" alt="ot_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href="https://github.com/rajeshsilvoj/Scripter-Article"&gt;https://github.com/rajeshsilvoj/Scripter-Article&lt;/a&gt;&lt;br&gt;
Contact me :&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/silvoj-rajesh-kumar-ba655b1a7/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://www.instagram.com/rajesh_silvoj/"&gt;Instagram&lt;/a&gt;,&lt;a href="https://github.com/rajeshsilvoj"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>nlp</category>
      <category>machinelearning</category>
      <category>microsoft</category>
    </item>
    <item>
      <title>Project Work: How to Create More in Less Time</title>
      <author>Kirsty Brewster</author>
      <pubDate>Mon, 10 May 2021 03:46:38 +0000</pubDate>
      <link>https://dev.to/kirstybrews/project-work-how-to-create-more-in-less-time-3mg1</link>
      <guid>https://dev.to/kirstybrews/project-work-how-to-create-more-in-less-time-3mg1</guid>
      <description>&lt;p&gt;While working on my final project at the Flatiron School, everything seemed to be in place to allow for a productive experience. My classmates and I would meet everyday for SCRUM, where we would discuss our goals for the day. At the end of every day, we would go over what we had accomplished, so as to keep ourselves accountable. Finally, we had deadlines for when our MVP should be finished, as well as when our entire project would be wrapped up. &lt;/p&gt;

&lt;p&gt;However, there are two major concepts that would have helped me in creating a project that I would have really been proud of after my time at Flatiron. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-8020-rule"&gt;
  &lt;/a&gt;
  The 80/20 Rule
&lt;/h3&gt;

&lt;p&gt;Several times while working on my final project, I would get caught up in small details that really didn't matter that much to the overall vision I set. Worrying a bit too much about the color scheme, line spacing, the inclusion of icons, creating a landing page. While these might have been good to add at some point, there were definitely more important things to focus on first. These smaller tasks were more of a distraction. As a result, I didn't end up including some of the stretch goals I had for my project.&lt;/p&gt;

&lt;p&gt;So what is the 80/20 rule? This is the concept that 20% of our efforts get us 80% of our results. This concept, also called the "Pareto Principle", comes from Vilfredo Pareto, an Italian economist and philosopher from the 1800's. He observed this phenomenon in a few different areas. First, he noticed that 20% of the pea plants in his garden were producing 80% of the healthy pea pods. He also noticed in his home country of Italy, that 80% of the land was owned by 20% of the population. And finally, he noticed that 20% of the companies in his country were generating 80% of total production.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-8020-rule-in-action"&gt;
  &lt;/a&gt;
  The 80/20 rule in action.
&lt;/h4&gt;

&lt;p&gt;When it comes to our personal projects, the 80/20 rule is about prioritization. First, break your project down into steps that lead to the final product. From there, identify the most important steps. This is where you need to put the majority of your focus. You could argue that "the devil's in the details", but trying to give 110% into every little detail in your project is more rooted in perfectionism. Sometimes it's even a tactic we use to procrastinate on a problem we deem too difficult in the moment. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parkinsons-law"&gt;
  &lt;/a&gt;
  Parkinson's Law
&lt;/h3&gt;

&lt;p&gt;Parkinson's Law is the idea that work expands to fill the time allotted. After I finished the MVP on my final project, I didn't really feel like I added any significant features. In all honesty, I was a little aimless and probably gave myself too much time to do things like add form validations and error messages. While these were useful features, I feel like I could have taken less time to finish them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parkinsons-law-in-action"&gt;
  &lt;/a&gt;
  Parkinson's Law in action.
&lt;/h4&gt;

&lt;p&gt;Set time limits for each task that you tackle on your project. If you give yourself a full day to implement a feature, you'll probably take all day. If you find yourself comfortably finishing a task in your given time frame, maybe try to cut that length of time in half the next time you try that task. If you find yourself stretched thin in a given time frame, increase it the next time around. There's a happy middle ground somewhere. It's all about experimentation.&lt;/p&gt;

&lt;p&gt;Even with deadlines, it's probably inevitable that you'll find yourself stuck on a task. If you've spent a lot of time on such a task, go back to the 80/20 rule and ask yourself if what you're stuck on is really that important to the overall goal. If it's not, maybe it's time to move on. &lt;/p&gt;

&lt;p&gt;In my case, I should have done this for a lot of design related tasks. However, we can't really throw design completely out of the window. People care about the look of a site or app. In that case, make design it's own category in the larger picture of your project. Now go back to the 80/20 rule: Out of the steps we could take for designing our project, what are the most important? Got it? Okay, maybe...we don't need a landing page all that bad? Or maybe we don't need to worry so much about the design of our buttons? However, if you're someone who wants to do more UX type of work, maybe it's beneficial for you to spend a little more time on design. Use your best judgement based on what your broader goals are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;While you might be thinking that each project you make needs to be the absolute best it can be, remember that knowledge comes with practice. You could spend your whole life trying to create the best app and never achieve it. You have to experiment and learn through trial and error. &lt;strong&gt;In the arena of creation, quantity leads to quality.&lt;/strong&gt; Even if you create something and think it could be better, take that thought and apply it to the next thing you create.&lt;/p&gt;

&lt;p&gt;Hopefully these concepts can help you prioritize and get more done in less time. I wish I had thought of them while I was still working on my final project at Flatiron! I'll definitely be taking what I learned from the experience and applying it to future projects. Heck, I even applied these concepts to this blog post.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.forbes.com/sites/kevinkruse/2016/03/07/80-20-rule/?sh=6efb4f563814"&gt;The 80/20 Rule And How It Can Change Your Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lifehack.org/articles/featured/how-to-use-parkinsons-law-to-your-advantage.html"&gt;How to Use Parkinson's Law to Get More Done in Less Time&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Supabase Schema Visualizer - No installation/login</title>
      <author>zernonia</author>
      <pubDate>Mon, 10 May 2021 03:45:51 +0000</pubDate>
      <link>https://dev.to/zernonia/supabase-schema-visualizer-no-installation-login-49kg</link>
      <guid>https://dev.to/zernonia/supabase-schema-visualizer-no-installation-login-49kg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-idea-and-inspiration"&gt;
  &lt;/a&gt;
  The Idea and Inspiration 💡
&lt;/h1&gt;

&lt;p&gt;Recently, I got addicted to &lt;a href="https://supabase.io/"&gt;Supabase ⚡&lt;/a&gt; as an &lt;strong&gt;Open-Source Firebase Alternative&lt;/strong&gt;, and I'm having so much fun with it. It has such wonderful UI, and well-written documentation, that allows me to spin up a project easily.&lt;/p&gt;

&lt;p&gt;Because of that, I've started to learn &lt;strong&gt;PostgreSQL&lt;/strong&gt;, which Supabase built on top of. I quickly realized that how great would it be if I can easily visualize all my tables, and the relationship with one another (since PostgreSQL is a relational DB), and there's when I found out about &lt;strong&gt;Database Schema&lt;/strong&gt;🔥.&lt;/p&gt;

&lt;p&gt;😥 Unfortunately I found many Database Schema Visualizer online which either requires me to install database software, or login with email, which I do not want to . Thus, this gave me the idea to code it myself, since I'm a Web Developer💻.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#showcase"&gt;
  &lt;/a&gt;
  Showcase 🌟
&lt;/h1&gt;

&lt;p&gt;If you are Supabase user, or interested in using the visualizer, here's the link to it: &lt;a href="https://supabase-schema.vercel.app/"&gt;Supabase Schema Visualizer&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zernonia"&gt;
        zernonia
      &lt;/a&gt; / &lt;a href="https://github.com/zernonia/supabase-schema"&gt;
        supabase-schema
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/zernonia/supabase-schema"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YVjvrFcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zernonia/supabase-schema/master/src/assets/logo.svg" alt="Logo" width="80" height="80"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h3&gt;
Supabase Schema&lt;/h3&gt;
  &lt;p&gt;
    Secured &amp;amp; Simple &lt;strong&gt;&lt;a href="https://supabase.io/" rel="nofollow"&gt;Supabase&lt;/a&gt; Schema Visualizer.&lt;/strong&gt;
    &lt;br&gt;
    No installations • No Database password required
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://supabase-schema.vercel.app/" rel="nofollow"&gt;View Demo&lt;/a&gt;
    ·
    &lt;a href="https://github.com/zernonia/supabase-schema/issues"&gt;Report Bug&lt;/a&gt;
    ·
    &lt;a href="https://github.com/zernonia/supabase-schema/issues"&gt;Request Feature&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/zernonia/supabase-schema/master/images/main.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hRUW2JSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zernonia/supabase-schema/master/images/main.png" alt="Supabase Schema"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
🚀 Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
🔨 No installations&lt;/li&gt;
&lt;li&gt;
🔒 Persistent State in LocalStorage&lt;/li&gt;
&lt;li&gt;
🚪 Login-less&lt;/li&gt;
&lt;li&gt;
👀 No Sensitive info required&lt;/li&gt;
&lt;li&gt;
🤚 Moveable Schema for own design&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
📇 About The Project&lt;/h2&gt;
&lt;p&gt;I look around the internet and found many Database Schema Visualizers that require me to either download the software, or login to view my Database Schema. I feel like there's too many unneccessary steps, just to view the schema.&lt;/p&gt;
&lt;p&gt;Thus, I've decided to take this opportunity to build this &lt;strong&gt;Open Source, Free, Login-less and Secured&lt;/strong&gt; Supabase Schema Visualizer 🔥&lt;/p&gt;
&lt;h3&gt;
🔨 Built With&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://v3.vuejs.org/" rel="nofollow"&gt;Vue 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vitejs.dev/" rel="nofollow"&gt;Vite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windicss.org/" rel="nofollow"&gt;WindiCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
🐾 Instructions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://app.supabase.io/" rel="nofollow"&gt;Supabase App&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Select your Project&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;Settings&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In Settings tab, Go to &lt;code&gt;API&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;Config&lt;/code&gt;, copy &lt;code&gt;URL&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Under &lt;code&gt;API Keys&lt;/code&gt;, copy &lt;code&gt;anon&lt;/code&gt; &lt;code&gt;public&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Paste both value into…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zernonia/supabase-schema"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;If you find this useful, remember to 🌟 it on Github&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lend-me-a-hand"&gt;
  &lt;/a&gt;
  Lend me a Hand ✋
&lt;/h1&gt;

&lt;p&gt;When you navigate through the App, you might notice some bugs or possible improvement, feel free to contribute to this project.💘 &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ultimate-hope"&gt;
  &lt;/a&gt;
  Ultimate Hope 🔮
&lt;/h1&gt;

&lt;p&gt;My Vision for this project is hopefully that it might be absorbed  into official &lt;a href="https://app.supabase.io/"&gt;Supabase App&lt;/a&gt;, where developer can quickly manage their project's schema visually without leaving the app. So if you find it helpful and wish to have this features, a star on Github would be very much appreciated.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me 🐤
&lt;/h1&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3jMu1t9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1174236220626472962/nl2d4B7Z_normal.jpg" alt="Zernonia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zernonia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/zernonia"&gt;@zernonia&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I've build a &lt;a href="https://twitter.com/supabase_io"&gt;@supabase_io&lt;/a&gt; Schema Visualizer so that you and I can quickly visualize schema without installing additional software.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/uh532J3L2a"&gt;supabase-schema.vercel.app&lt;/a&gt;&lt;br&gt;&lt;br&gt;Build with:&lt;br&gt;&lt;a href="https://twitter.com/vuejs"&gt;@vuejs&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/vite_js"&gt;@vite_js&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/windi_css"&gt;@windi_css&lt;/a&gt;&lt;br&gt;&lt;a href="https://twitter.com/vueuse"&gt;@vueuse&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:31 PM - 09 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1391430752462508042" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1391430752462508042" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1391430752462508042" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h1&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you 🙏
&lt;/h1&gt;

</description>
      <category>showdev</category>
      <category>vue</category>
      <category>vite</category>
      <category>supabase</category>
    </item>
    <item>
      <title>When Success is an Exception</title>
      <author>Vikas Solegaonkar</author>
      <pubDate>Mon, 10 May 2021 03:41:28 +0000</pubDate>
      <link>https://dev.to/aws-builders/when-success-is-an-exception-1pmk</link>
      <guid>https://dev.to/aws-builders/when-success-is-an-exception-1pmk</guid>
      <description>&lt;p&gt;&lt;em&gt;"Everything fails all the time"&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;The famous words of Werner Vogels, remind us again and again - never take things for granted. &lt;/p&gt;

&lt;p&gt;Every experienced IT professional has hurt herself at some time or other. All the experts across the globe have reminded us in many different ways. Everyone knows that error handling is absolutely important. Yet, this understanding does not translate into code. It is unfortunate that most of our applications have a very bad error handling mechanism - if any.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#root-cause"&gt;
  &lt;/a&gt;
  Root Cause
&lt;/h2&gt;

&lt;p&gt;I have seen new developers learn from a variety of tutorials. And I feel the root of the problem is right there. Most of the introductory tutorials and videos available to us (developed by well meaning experts), do not talk about errors. Somehow, the error handling is left out - to be learnt "when you grow up". Unfortunately, we never grow up and our code does not handle errors.&lt;/p&gt;

&lt;p&gt;Due to this mindset, we think only in the space of the happy scenarios - anything else is an error. Our user stories, design, test cases and the code - all focus on the happy scenario. Because of our limited training, this "anything else" is too wide to be conceived or handled appropriately. So it is ignored. And the outcome is that our applications do what they should not, fail when they should not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developing-for-errors"&gt;
  &lt;/a&gt;
  Developing for Errors
&lt;/h2&gt;

&lt;p&gt;As they say, the greatest hurdle in exception handling is that we call it an exception. We have to understand that error is not an exception. Error is the normal behavior. Success is an exception. &lt;/p&gt;

&lt;p&gt;That also does not mean going overboard with flooding the code with error handling. That would leave the business logic buried under unmanageable debris. Each line of code cannot check all the errors all over again. That is not the point.&lt;/p&gt;

&lt;p&gt;Error handling has to be delegated. But we should know what we are doing when we do so. I think the right way to do it is by defining the error space properly. If we are clear on that, the error handling will naturally show up in our design and code.&lt;/p&gt;

&lt;p&gt;This is an attempt to enumerate the different aspects and types of errors that can trouble the application. This is based on what I have faced and what I remember over the years of my experience. &lt;strong&gt;I know this is incomplete.&lt;/strong&gt; Request you to please add more to the comments so that we can have a good collection here.&lt;/p&gt;

&lt;p&gt;Primarily, we can have four types of errors. Let's check them one by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input Errors&lt;/li&gt;
&lt;li&gt;Dependency Errors&lt;/li&gt;
&lt;li&gt;Internal Errors&lt;/li&gt;
&lt;li&gt;System Errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#input-errors"&gt;
  &lt;/a&gt;
  Input Errors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ACXWcnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620484107616/PfRhV5uDE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ACXWcnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620484107616/PfRhV5uDE.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
A typical microservice gets an input request from another service. It reacts to such an input, processes it and perhaps returns a response. This input may or may not be what we expect. It could be the &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wrong data&lt;/li&gt;
&lt;li&gt;wrong format &lt;/li&gt;
&lt;li&gt;wrong source of data&lt;/li&gt;
&lt;li&gt;out of sequence &lt;/li&gt;
&lt;li&gt;delayed data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, it could also be what we really need there. But as we said, that is an exception. We can check that later.&lt;/p&gt;

&lt;p&gt;We cannot pack all the resilience into a single microservice. That will defeat the microservice architecture. A service has to depend upon its neighbors - to provide what it needs. It is not wrong to believe in the authorization/authentication service for ensuring security, or in the caller service to provide the right data in the right format. But, we should know that these services can fail. They can have errors, and we have to break the chain when that happens.&lt;/p&gt;

&lt;p&gt;There is a fine line between the two. There is a difference between implementing the complete authorization/authentication in every service, and ensuring that the services are resilient when the authorization/authentication service fails. There is a difference between verifying the input data, and rebuilding the input data within the service.&lt;/p&gt;

&lt;p&gt;Each architect has to identify this line in the context of the given service. However, from my experience, it is always better push very hard towards the safer side of the line. Some lazy developers and irrational managers are going to drain it down anyway.&lt;/p&gt;

&lt;p&gt;People tend to ignore the time and sequence of events. In a live system, data coming late or out of sequence is as bad as wrong data. This can be a major problem when inputs come in from two different services. We have to ensure the correct sequence. It is not enough to just hope for it. The time and sequence validation has to be a part of input validation. So it has to be a part of the data architecture itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependency-errors"&gt;
  &lt;/a&gt;
  Dependency Errors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wYMYPeq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620483453317/IyRWG2TPz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYMYPeq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620483453317/IyRWG2TPz.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
A microservice rarely does all the job by itself. Often it has to invoke API's in other services. It is possible that those services are not stable. In such a case, the response from that service may not be what we want it to be. Such a response has to be validated. &lt;/p&gt;

&lt;p&gt;Response validation could mean a simple error code check, or validating the response body itself. This depends upon the overall architecture, and the logical distance between the two services. Of course, it makes no sense to rebuild the entire response in order to validate it. I don't want to mention the other extreme. But that is what most developers do.&lt;/p&gt;

&lt;p&gt;But the point is that any service should not take other services for granted. They are going to fail at some time. Our service should be able to discover this and break the chain when that happens. Any API call has to be made with the understanding that it will fail - and it could also succeed.&lt;/p&gt;

&lt;p&gt;When a downstream service fails, it could result in several problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data Loss&lt;/li&gt;
&lt;li&gt;Incorrect response&lt;/li&gt;
&lt;li&gt;Service down&lt;/li&gt;
&lt;li&gt;Delay&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have to make sure we minimize these for our service - when a downstream service fails. The input request may be important. Even if we are not able to fulfil it, the contents of the request may be important. Is it relevant after some time? Should we save it or discard it? The architect has to answer these questions - to decide the right approach based on the context of the service. &lt;/p&gt;

&lt;p&gt;If an error in the downstream service is not identified, our service will end up returning an incorrect response. This error can potentially cascade through the entire system, causing havoc. As we saw before, validating the response does not mean building the response all over again. But, the data architecture should provide a way to accurately verify the response of any API. This is important for breaking the chain.&lt;/p&gt;

&lt;p&gt;Now what do we do when we find out that the downstream is not stable and will not process our requests? Pull down yourself? That is certainly not the solution. A microservice should be resilient. It should be able to survive, stay alive and resume when the downstream system is back. The service should have the ability to sense when the other service is back. It should have a way to handle the requests when the other service is not available. It should be able to give a meaningful response to any request.&lt;/p&gt;

&lt;p&gt;Any microservice should follow the principle of "Fail Fast and Fail Safe". Any failure should not result in delay. In fact, it should mean an instant error response. This could mean adding timeouts, liveliness checks, or any of those patterns. But one service should not delay a response just because a downstream service is going slow. This chain has to be broken. In the ideal scenario, we should try our best to avoid synchronous chaining. But when it is essential, this error has to be handled and managed with all caution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#system-errors"&gt;
  &lt;/a&gt;
  System Errors
&lt;/h2&gt;

&lt;p&gt;Everything can fail - not just my code. Services can fail for a variety of reasons. An upgraded OS could throw tantrums. A network connection can fail. A nerd may push in the wrong version of code... anything can go wrong! &lt;br&gt;
The world around may not stop with this. Will our code continue? It should.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internal-errors"&gt;
  &lt;/a&gt;
  Internal Errors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tu7q3MZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620484265407/-XTn55YU-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tu7q3MZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620484265407/-XTn55YU-.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Enough of blaming. We tried blaming the downstream service, and also the input data. Then we blamed the OS, network, and all that we could. Nothing helped. The problem is in our own service! That is when we try to look within. Isn't that too late? The errors should be checked when we code. &lt;/p&gt;

&lt;p&gt;Any microservice should be split into components that work in smaller chunks of tasks. These independent logical blocks should be guarded against each other - with strong error handling. The data and command flow among these components should be validated. &lt;/p&gt;

&lt;p&gt;The business logic we have developed worked for the inputs that we had imagined. Of course, we have missed scenarios. What will happen when those inputs are fed into our code? Will it go wrong? How wrong can it go? How can we restrict the potential harm caused by a code error in this service? &lt;/p&gt;

&lt;p&gt;The architect and developer should continuously ask these questions. This cannot be done in a dummy code review held on last day of the sprint. It has to be an integral part of the thought process. Error handling should become a habit. Then it will naturally seep into each line of our code. &lt;/p&gt;

&lt;p&gt;Until then, it is limited to blogs and conferences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The whole idea in error handling is that we should doubt everything. It may be a well established S3 service on the AWS cloud or it could be a code written by the newly hired intern. Potentially, anything can fail.&lt;/p&gt;

&lt;p&gt;Some errors have a higher probability than others. And some errors have a higher cost than others. Usually, the actual cost and probability are much higher than we imagine.&lt;/p&gt;

&lt;p&gt;It is impossible to plan for, and handle all possible errors. We have to identify the ones that we can ignore. And even if we decide to ignore some errors, we should have a detailed analysis of what errors we are planning to ignore.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>cloud</category>
      <category>exception</category>
      <category>resilience</category>
    </item>
  </channel>
</rss>
