<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Clean Code with React Context</title>
      <author>Aaron Garvey</author>
      <pubDate>Mon, 01 Feb 2021 03:31:50 +0000</pubDate>
      <link>https://dev.to/aarongarvey/clean-code-with-context-j0l</link>
      <guid>https://dev.to/aarongarvey/clean-code-with-context-j0l</guid>
      <description>&lt;p&gt;Over the holidays I had some time up my sleeve and decided to give &lt;a href="https://www.amazon.com.au/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;Uncle Bob's Clean Code&lt;/a&gt; a thorough read through to see what, if any principles of clean code architecture can be applied to some of the React projects I've been working on.  &lt;/p&gt;

&lt;p&gt;Not too far into the book, Uncle Bob starts talking about the total number of parameters that a function could take as inputs before it no longer appears 'clean'. The aim here is to make sure that the functions we write as developers are easy to read, and logical to use. So the argument is that having to input 3 or more parameters for a given function increases the complexity of the function, slowing down the speed in which a developer can read and understand its purpose, as well as increasing the risk of incorrect usage (especially for the vanilla JS / non-typescript projects out there).&lt;/p&gt;

&lt;p&gt;This sparked me into thinking about how I regularly handle user alerts within my React applications, and how perhaps a little help from Uncle Bob I could clean my code up a little.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-original-approach" class="anchor"&gt;
  &lt;/a&gt;
  The Original Approach
&lt;/h2&gt;

&lt;p&gt;So here's what we are working on.  A simple React application with an AlertContext component that wraps the entire application. This AlertContext component would control the state of alerts generated, and render out a snackbar/toast style alert object at the bottom of the screen.  &lt;/p&gt;

&lt;p&gt;Because this component uses Reacts Context each of the child components within the AlertContext provider would have the ability to use the alert context and generate success, warning, or error alerts for the user as needed.  To keep things simple, I'm just using three buttons in their own component.  Each of which generates a different type of alert.&lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/react-alertcontext-1-szyy7"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's a snapshot of the original AlertContext component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AlertContext.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core/Snackbar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MuiAlert&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/lab/Alert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AlertContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAlertContext&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AlertProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAlertState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SyntheticEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AlertContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;setAlertState&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MuiAlert&lt;/span&gt; &lt;span class="nx"&gt;onClose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClose&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;severity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MuiAlert&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Snackbar&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/AlertContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AlertContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AlertProvider&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here you can see I have a simple Alert being rendered using the Material-UI Snackbar, and MuiAlert components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AlertContext.ts&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AlertContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;alertSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alertError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alertWarning&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MuiAlert&lt;/span&gt; &lt;span class="nx"&gt;onClose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClose&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;severity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MuiAlert&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Snackbar&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/AlertContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is then controlled by the &lt;code&gt;alertState&lt;/code&gt; object which determines whether the alert is &lt;code&gt;visible&lt;/code&gt;, the &lt;code&gt;severity&lt;/code&gt; of the alert, and the &lt;code&gt;message&lt;/code&gt; that should be displayed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AlertContext.ts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAlertState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The AlertContext component then provides access to the &lt;code&gt;setAlertState&lt;/code&gt; method, allowing any child component that uses the AlertContext to show success, warning, and error type alert messages.  For example, here we have a component with three buttons.  Each of which when clicked will generate a different type of alert with a different message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AlertButtons.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AlertContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AlertContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AlertButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setAlertState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AlertContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSuccessClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Successfull alert!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleWarningClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Warning alert!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleErrorClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error alert!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contained&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSuccessClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Success&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contained&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleWarningClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Warning&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contained&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleErrorClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AlertButtons&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To show an alert we must first access the setAlertState method from our context provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AlertButtons.tsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setAlertState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AlertContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can now use this method inside of our onClick functions for each button, or inside any other function, we create.  Here, any time a user clicks on the Success Button we will simply generate a success style alert with the message "Successful alert!"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AlertButtons.tsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSuccessClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Successfull alert!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-cleaner-approach" class="anchor"&gt;
  &lt;/a&gt;
  The cleaner approach
&lt;/h2&gt;

&lt;p&gt;Honestly, there probably isn't much of a problem with the initial approach.  Technically, the setAlertState method only requires one parameter... it just happens to be an object with three distinct properties. And if you look closely, you'd see that one of the properties, 'open', isn't actually changing each time we invoke it to show a new alert state.  Still, this approach might be just fine if it's just me working on the project, and I understand how to call this method each time.  But what if I collaborate with another developer?   How clean does the method setAlertState(params: {...}) appear to a new set of eyes?&lt;/p&gt;

&lt;p&gt;So my attempt at a cleaner approach then is to change the way we'd set a new alert from the AlertContext component.  Instead of giving each of the child components direct access to the setAlertState function of the context, I will give instead provide access to 3 separate methods for each alert type being generated.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/react-alertcontext-2-e8sd8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AlertContext.tsx&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IAlertContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;alertSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alertError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alertWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These methods will only take one single parameter, the message, and completely abstracts away the need to remember to set the alert state to open, and to utilize the correct severity type for the alert. Below you can see that we have created the 3 respective methods to &lt;code&gt;alertSuccess()&lt;/code&gt;, &lt;code&gt;alertWarning()&lt;/code&gt;, and &lt;code&gt;alertError()&lt;/code&gt;.  Each of which takes a simple message as its input, and internally each function will call &lt;code&gt;setAlertState&lt;/code&gt; with the appropriate open state and severity type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// AlertContext.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core/Snackbar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MuiAlert&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/lab/Alert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IAlertState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IAlertContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;alertSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alertError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alertWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AlertContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAlertContext&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;alertSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;alertError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;alertWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AlertProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAlertState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SyntheticEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alertSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alertError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alertWarning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setAlertState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AlertContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;alertSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alertError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alertWarning&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Snackbar&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MuiAlert&lt;/span&gt; &lt;span class="nx"&gt;onClose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClose&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;severity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alertState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MuiAlert&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Snackbar&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/AlertContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AlertContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AlertProvider&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now back inside our button component, we no longer access the original setAlertState method. Instead, we can access our new &lt;code&gt;alertSuccess()&lt;/code&gt;, &lt;code&gt;alertWarning()&lt;/code&gt;, and &lt;code&gt;alertError()&lt;/code&gt; functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;alertSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alertError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alertWarning&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;AlertContext&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then updating each of the respective onClick handlers to call the newly imported functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSuccessClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alertSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Successfull alert!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleWarningClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alertWarning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Warning alert!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleErrorClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alertError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error alert!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#was-it-worth-it" class="anchor"&gt;
  &lt;/a&gt;
  Was it worth it?
&lt;/h2&gt;

&lt;p&gt;To me, the second approach does seem a lot cleaner and is something I'll more than likely stick with in the future. Using the second approach allows me to simply extend the AlertContext to include more severity types than I already have implemented without affecting my implementations throughout any child components.  The second approach is surely much easier for any developer who stumbled across the codebase to understand the purpose and use of a method like &lt;code&gt;alertSuccess(message: string)&lt;/code&gt; as opposed to a method called &lt;code&gt;setAlertState(params: {...})&lt;/code&gt;.  &lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>cleancode</category>
    </item>
    <item>
      <title>Using the useCallback React hook</title>
      <author>saransh kataria</author>
      <pubDate>Mon, 01 Feb 2021 01:34:53 +0000</pubDate>
      <link>https://dev.to/saranshk/using-the-usecallback-react-hook-54b0</link>
      <guid>https://dev.to/saranshk/using-the-usecallback-react-hook-54b0</guid>
      <description>&lt;p&gt;The useCallback React hook is a useful hook that can help in optimizing the rendering performance of our functional React components. It is used to memoize functions which means it caches the return value of a function given a set of input parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-syntax" class="anchor"&gt;
  &lt;/a&gt;
  The syntax
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const memoizedCallback = useCallback(
  () =&amp;gt; {
    functionToBeMemoized(arg);
  },
  [arg],
);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As we can see, the useCallback React hook takes in an inline function and its dependencies as parameters and returns a memoized version of the function. The returned memoized function changes only when one of the passed dependencies has changed. Therefore it is guaranteed to have the same reference value if the input arguments are the same.&lt;/p&gt;

&lt;p&gt;This is useful when we want to pass callbacks as props to children components and want to optimize the components to avoid re-rendering since React relies on reference equality of props. A memoized function will have the same reference for a given set of parameters, thus avoiding re-rendering.&lt;/p&gt;

&lt;p&gt;Before we get into the applications of the useCallback React hook, we should know that React itself is fairly fast and we should avoid any premature optimizations and only use this hook when we need to.&lt;/p&gt;

&lt;p&gt;As with the &lt;a href="https://www.wisdomgeek.com/development/web-development/react/understanding-the-useref-react-hook/"&gt;useEffect&lt;/a&gt; dependencies, if we pass in an empty array of dependencies, the memoized function is computed only once. It will store the same reference throughout the lifecycle of the component then.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-usecallback-react-hook" class="anchor"&gt;
  &lt;/a&gt;
  Using the useCallback React hook
&lt;/h2&gt;

&lt;p&gt;Let us consider a component that has a lot of computation involved and is expensive to re-render:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const ExpensiveToComputeComponent = () =&amp;gt; {
 // expensive computation
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If this component were taking in a handler function as a prop, and the parent component was providing in the handler to it:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const App = () =&amp;gt; {
  const handler = () =&amp;gt; {
  // do something
  };
  return &amp;lt;ExpensiveToComputeComponent handler = {handler} /&amp;gt;;
}
const ExpensiveToComputeComponent = ({handler}) =&amp;gt; {
 // expensive computation
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Any time the App is re-rendered, then the expensive to compute component would get re-rendered as well. This would happen because of the callback function that we are providing in the form of handler. The reference to it would change every time the App is re-rendered.&lt;/p&gt;

&lt;p&gt;Even if we used &lt;a href="https://www.wisdomgeek.com/development/web-development/react/using-react-memo-in-react-16-6/"&gt;React.memo&lt;/a&gt; to memoize the expensive component:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const ExpensiveToComputeComponent = React.memo(({handler}) =&amp;gt; {
 // expensive computation
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The result will be the same. The re-render happens because the handler function is changing and memo will not change that. To keep the handler callback function the same, we will need to use the useCallback React hook.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const App = () =&amp;gt; {
  const handler = useCallback(() =&amp;gt; {
  // do something
  }, [dependencies]);
  return &amp;lt;ExpensiveToComputeComponent handler = {handler} /&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;It is also important to note that if the dependencies are also dynamic (reference types), then the return value of the useCallback React hook will also be dynamic. So we either want to have them as value types, or again use useCallback on them. Though it is recommended to avoid the nesting of callbacks and there are better ways to handle this. It is also recommended to install the &lt;a href="https://www.npmjs.com/package/eslint-plugin-react-hooks"&gt;eslint-plugin-react-hooks plugin&lt;/a&gt; to avoid such problems and enforce best practices.&lt;/p&gt;

&lt;p&gt;To conclude, the useCallback React hook is useful in memoizing functions. It is useful to obtain performance gains but should be used wisely. We should use the profiler before getting into optimizing. As we have seen, it shines when combined with the React Memo API.&lt;/p&gt;

&lt;p&gt;If you have any queries, or have any suggestions about what we should cover next, drop a comment below and let us know!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://www.wisdomgeek.com/development/web-development/react/using-the-usecallback-react-hook/"&gt;https://www.wisdomgeek.com&lt;/a&gt; on January 28, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Typical reasons why developers fail to complete side projects</title>
      <author>Fum</author>
      <pubDate>Sun, 31 Jan 2021 23:02:02 +0000</pubDate>
      <link>https://dev.to/funbeedev/5-typical-reasons-why-developers-fail-to-complete-side-projects-57g8</link>
      <guid>https://dev.to/funbeedev/5-typical-reasons-why-developers-fail-to-complete-side-projects-57g8</guid>
      <description>&lt;p&gt;&lt;em&gt;Quick note: I'm creating a brand new community for developers focusing on building programming skills through a welcoming online collaboration environment. We need developers like you so consider &lt;a href="https://community.inspirezone.tech/"&gt;joining us&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-importance-of-side-projects" class="anchor"&gt;
  &lt;/a&gt;
  The importance of side projects
&lt;/h1&gt;

&lt;p&gt;Outside of day to day jobs developers are often known for having projects on the side. This is common because working on side projects is a good way for developers to accelerate growth of their existing skills or expand into other areas of interest. &lt;/p&gt;

&lt;p&gt;However, developers are also known for abandoning such projects and never seeing them through to completion. The reason why developers fail to complete side projects is down to several factors. &lt;/p&gt;

&lt;p&gt;Since personal side projects are optional, some developers will not take it as seriously as their day to day jobs. Due to the non-urgent nature of the task, they are also less likely to set up the proper measures in place for the project to succeed.&lt;/p&gt;

&lt;p&gt;When interviewing for development jobs, it’s not uncommon to be asked if you’ve completed any side projects. Having a GitHub profile is also expected in many cases and potential employers may ask to see your profile.&lt;/p&gt;

&lt;p&gt;While I don’t believe it’s absolutely essential for everyone to be working on side projects all the time, working on a personal project will help to enhance your skills in numerous ways. It also provides a great opportunity to explore fields of programming you have a personal interest in. Not to mention, it’s also fun to develop a project from the ground up on an idea you came up with!&lt;/p&gt;

&lt;p&gt;Let’s address some typical reasons why developers fail to complete side projects. If you’ve tried a side project before, you’re probably guilty of at least one, if not all of these reasons. Have these points in mind the next time you’re starting your next side project and avoid falling for them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-not-having-a-good-enough-motivation" class="anchor"&gt;
  &lt;/a&gt;
  1. Not having a good enough motivation
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8YrKYFM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p1u2jeqoftuu7un508gt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8YrKYFM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p1u2jeqoftuu7un508gt.png" alt="motivation-loading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If anyone decides to work on a project in their spare time it’s probably something that at least interests them. For programmers, the idea of working on a side project can come up for several reasons. &lt;/p&gt;

&lt;p&gt;Perhaps your reason is to grow a portfolio of projects to showcase to potential employers. Or you might want to use a project to develop an application that you know will be useful for others.&lt;/p&gt;

&lt;p&gt;What you don’t want your motivation to be is something that appears forced on you. &lt;/p&gt;

&lt;p&gt;If you don’t have a good enough reason to be working on the side project, you’ll likely lose motivation and give up on it early. Ask yourself the following questions to determine if you have a good enough reason to be spending time on a side project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you working on this project because it’s something you’re genuinely interested in? &lt;/li&gt;
&lt;li&gt;Will you be working with a technology that excites you?&lt;/li&gt;
&lt;li&gt;Are you keen to see the end results?&lt;/li&gt;
&lt;li&gt;Will you be learning skills that will benefit you in the future?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your reasons are genuine, you’re more likely to stay motivated throughout the project and won’t give up easily!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-lack-of-planning" class="anchor"&gt;
  &lt;/a&gt;
  2. Lack of planning
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pFajhI9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j6ouw7qv87kvy764jjb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pFajhI9S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j6ouw7qv87kvy764jjb2.png" alt="planning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you’re motivated to kick off this project. You’re excited and just want to start writing code and seeing some results! But slow down a bit…&lt;/p&gt;

&lt;p&gt;First, do you have a plan for your project? Like the old saying &lt;strong&gt;failing to plan is planning to fail&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Planning is critical if you want your project to be completed successfully and to be something that will turn out useful for yourself or others. &lt;/p&gt;

&lt;p&gt;Your plan doesn’t have to be anything too complex either. A simple plan detailing the goal of the project, milestones and dates to achieve those milestones can be drawn up easily. This means you can at least start off with a basic plan that you can refer back to throughout the development of the project.&lt;/p&gt;

&lt;p&gt;It’s also advisable your plan goes further into the details of tasks that need to be completed. This can include research due to be carried out, how you want to structure your project, list of tools and resources you’ll need, testing plans and so on. &lt;/p&gt;

&lt;p&gt;It’s your project, so it can be as detailed as you want it to be. &lt;/p&gt;

&lt;p&gt;I personally like to use &lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt; for organising my projects. Trello is an online planning and organisation tool that uses a concept similar to using sticky notes on white boards as a way to layout your information. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kZSZvlTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/72aqu8vmkpvb566lansb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kZSZvlTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/72aqu8vmkpvb566lansb.png" alt="Trello_sample_board"&gt;&lt;/a&gt;&lt;/p&gt;
An example of a Trello board. Trello is a great platform for organising your projects. You can view this public template from Trello &lt;a href="https://trello.com/b/qhQ4j8bT/daily-tasks-planner"&gt;here&lt;/a&gt;



&lt;p&gt;This can be used to detail stages of your projects, plan out a checklist of tasks and to keep all information relating to your project in an easily accessible location.&lt;/p&gt;

&lt;p&gt;Whatever method you use for planning, just make sure you do actually have a plan before you kick off the development work of your project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-overengineering" class="anchor"&gt;
  &lt;/a&gt;
  3. Over-Engineering
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-MowMe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vsch4juxsha9d3lwlnsf.png" alt="over-engineering"&gt;
&lt;/h1&gt;

&lt;p&gt;Over-engineering refers to scaling an idea beyond its original scope to the point where it becomes a lot more complex and difficult to complete. A shortcoming that many developers will struggle to avoid! &lt;/p&gt;

&lt;p&gt;Your side project idea may start off with a simple concept, straightforward design, nothing overly complex. Then over time as you plan it out more, the project evolves in complexity. &lt;/p&gt;

&lt;p&gt;You just can’t stop yourself coming up with new features and functionality that will make the project even more awesome than you originally planned!&lt;/p&gt;

&lt;p&gt;While it’s very common to get carried away with our ideas, it’s important to keep things under control or your project will end up incomplete.&lt;/p&gt;

&lt;p&gt;As discussed in the previous point, planning out your project is essential to have an idea of what you want to accomplish, your key milestones and dates to achieve them by. Naturally, over time you’ll want to evolve these ideas. However, instead of constantly changing your original plan, the suggestion is to create a separate list reserved for future functionalities or “Nice to haves”.&lt;/p&gt;

&lt;p&gt;The idea is to keep your original project plan as simple as possible so you stick to the main goal of the project. In project management theory, this is equivalent to having a &lt;strong&gt;Minimum Viable Product (MVP)&lt;/strong&gt;. An MVP is a product that has just the minimum features needed for it to accomplish its basic purpose.&lt;/p&gt;

&lt;p&gt;Defining an MVP is more difficult for a personal side project. After all, it’s your project and no one is pushing you to complete it (most of the time). However, having a list of features that defines your minimum requirements and treating new ideas as extras on a separate list is a good way to prevent over-engineering.&lt;/p&gt;

&lt;p&gt;Following this advice will prevent your growing plans affecting the outcome of your side project. If the functionality and features of your project continue to evolve indefinitely, you’ll never complete it. However, you can always go back and enhance it when its basic functionality is complete.&lt;/p&gt;

&lt;p&gt;Over-engineering can be more dangerous than you think to the outcome of your project. It’s a very common reason why developers fail to complete side projects and not have anything to show for the efforts they put into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-stopping-at-obstacles" class="anchor"&gt;
  &lt;/a&gt;
  4. Stopping at obstacles
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7vrNIiS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1sdmt7hcax1signcuhon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vrNIiS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1sdmt7hcax1signcuhon.png" alt="obstacles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Completing a project from start to finish takes time, effort and dedication. Along the way, you’ll likely face obstacles that slow you down or halt your progress.&lt;/p&gt;

&lt;p&gt;What you don’t want to do is give up when this happens.&lt;/p&gt;

&lt;p&gt;Sure, it might be easy to make excuses like &lt;em&gt;"well it’s only a side project anyway"&lt;/em&gt; and throw in the towel when it gets tough. But where’s your original motivation?? Again, point 1 of having a good enough motivation plays a major role when you do face obstacles. Without the motivation, you’ll likely give up when things get tough.&lt;/p&gt;

&lt;p&gt;Giving up when a challenge arises is also not a good trait for developers, or &lt;em&gt;anyone&lt;/em&gt;. An important attitude developers need is to persevere through difficult tasks, being patient and solving problems.&lt;/p&gt;

&lt;p&gt;Don’t use the excuse that &lt;em&gt;"it’s just a side project"&lt;/em&gt; to alter your attitude towards your own projects. If anything, coming across obstacles and taking the time to resolve them will help grow your problem solving skills.&lt;/p&gt;

&lt;p&gt;So when you face obstacles, make sure you face them head on!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-abandoning-the-project-for-another-one" class="anchor"&gt;
  &lt;/a&gt;
  5. Abandoning the project for another one
&lt;/h1&gt;

&lt;p&gt;This comic says it all:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wF0VrDxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ljyoqnllhi5gsvnjmjob.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wF0VrDxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ljyoqnllhi5gsvnjmjob.jpeg" alt="Strip-Side-project-650-finalenglish" width="500"&gt;&lt;/a&gt;&lt;/p&gt;
Complete your dev projects and don't be like this guy! (&lt;a href="https://www.commitstrip.com/en/2014/11/2/west-side-project-story/"&gt;Comic Source&lt;/a&gt;)



&lt;p&gt;We can all get distracted with shiny new project ideas and as a result abandon our current efforts. While some may have the intention of coming back to the project, it will likely lead to it becoming stale and remaining that way.&lt;/p&gt;

&lt;p&gt;I believe the best way to combat the tendency to abandon projects for another is to simply be aware that doing so will likely cause all your projects, present and future, to fail. With this information, it’s now down to your willpower to not abandon your current projects.&lt;/p&gt;

&lt;p&gt;Another way to combat this is to have a dedicated place to list your ideas for future projects as you come up with them. This will give you a way to begin planning out your future projects without actually executing the ideas yet.&lt;/p&gt;

&lt;p&gt;It’s more of a mental exercise, to allow you to clear your mind from ideas for projects by writing them down or even beginning to plan it out. Although you might be tempted to start on the new idea right away, you can just document them for now and use your notes later to kick start the new project when you’ve completed your current one.&lt;/p&gt;

&lt;p&gt;So the advice is, don’t start a new project till you’ve completed a current project. Otherwise, you will have a series of incomplete and failed projects.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Developers who enjoy coding in their spare time often take on side projects. However, it’s a common scenario that many of these side projects will fail with nothing to show for in the end. &lt;/p&gt;

&lt;p&gt;The next time you’re starting a project, remember these reasons why developers fail to complete side projects and prevent yours from being just another failure!&lt;/p&gt;

&lt;p&gt;Are you a developer who is guilty of not completing your side projects? Have you noticed any other major reasons why developers fail to complete side projects? Leave a comment below.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;If you found this helpful check out more posts on developer tips and coding productivity on my &lt;a href="https://inspirezone.tech/blog"&gt;blog&lt;/a&gt; :)&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>productivity</category>
      <category>sideprojects</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My freelancing workflow, from cold leads to paid invoices</title>
      <author>Sam Tanoak Sycamore</author>
      <pubDate>Sun, 31 Jan 2021 19:32:39 +0000</pubDate>
      <link>https://dev.to/tanoaksam/my-freelancing-workflow-from-cold-leads-to-paid-invoices-38hd</link>
      <guid>https://dev.to/tanoaksam/my-freelancing-workflow-from-cold-leads-to-paid-invoices-38hd</guid>
      <description>&lt;p&gt;In January 2021, I made a sudden and somewhat unexpected transition to freelance web development.&lt;/p&gt;

&lt;p&gt;I had been headed in this direction since I started learning web dev in the fall of 2020, but an unforeseeable injury forced me to resign from my job in landscape construction at the start of the new year. I wasn't sure if I was ready to seek work as a developer, but the universe said:&lt;/p&gt;

&lt;p&gt;"It's now or never."&lt;/p&gt;

&lt;p&gt;After reviewing over 500 websites in my vertical (more on that momentarily), I selected 100 businesses to cold-email with a pitch offering my services. &lt;/p&gt;

&lt;p&gt;Eight got back to me: five were retired, three were interested. I walked away from one of those interested after receiving a low-ball offer, and the other two requested proposals outlining the scope of work and my rates.&lt;/p&gt;

&lt;p&gt;This was the point where I realized,&lt;/p&gt;

&lt;p&gt;"Oh snap! I have a real business here. Now I actually have to figure out the logistics of seeing these projects through!"&lt;/p&gt;

&lt;p&gt;Google wasn't much help on this topic - content in this genre tends to be heavy on fluff and light on actionable advice.&lt;/p&gt;

&lt;p&gt;So I forged my own path based on what I could find and what I know from previous business endeavors and work experience. It ain't perfect but it's good enough to get started.&lt;/p&gt;

&lt;p&gt;Please keep in mind that I am anything but an expert! And nothing here constitutes legal or business advice. &lt;/p&gt;

&lt;p&gt;My results here are definitely not statistically significant, and I look forward to gaining more experience so that I might be able to share more accurate numbers in the future in terms of what others might expect. I just want to help mellow out the learning curve so other people can get up and running quickly.&lt;/p&gt;

&lt;p&gt;Ideally, some of y'all will take this and improve upon what I've laid out here! Please let me know if you have a better solution than what I suggest!&lt;/p&gt;

&lt;p&gt;Also: some of the services I will recommend are &lt;em&gt;not&lt;/em&gt; free. I wish I had free alternatives, but often the "alternative" is just to invest countless hours of tedious labor into something that would otherwise cost like $20 to automate in an instant.&lt;/p&gt;

&lt;p&gt;That said, as someone who's been self-employed in other industries, I can say that web development requires exceptionally low startup costs relative to the return on your investment. If you are willing to part with $50-100 in your first month, you'll be fully equipped to efficiently land deals worth thousands of bucks.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-freelancing-workflow-marketing-amp-sales" class="anchor"&gt;
  &lt;/a&gt;
  My Freelancing Workflow - Marketing &amp;amp; Sales
&lt;/h1&gt;

&lt;p&gt;My freelancing pal &lt;a href="//twitter.com/natmiletic"&gt;@natmiletic&lt;/a&gt; pointed this out, and I really believe it has been crucial to my early wins: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have been very intentional about who I am targeting and what's unique about what I offer.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pick-a-vertical" class="anchor"&gt;
  &lt;/a&gt;
  Pick a Vertical
&lt;/h3&gt;

&lt;p&gt;Your vertical market is the clientele that you will target who all serve similar clients themselves; think gyms, restaurants, plumbers, barber shops. &lt;/p&gt;

&lt;p&gt;You need to "niche down," to borrow from online marketing terminology, and specialize in serving a specific market.&lt;/p&gt;

&lt;p&gt;I worked in skilled trades for the last five years, so I speak the language of that industry. I know how to describe things like exterior hardscapes, kitchen renovations, and hardwood flooring. When I decided to start freelancing in web dev, I knew right away that my target clients would be residential contractors in my region.&lt;/p&gt;

&lt;p&gt;Picking a vertical might not be as simple for you as it was for me. Things to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What can &lt;em&gt;you&lt;/em&gt; offer to business owners in this field that is unique? (Being able to speak competently about their industry is a huge plus - one of my landscaper clients really appreciates that I am also an avid gardener.)&lt;/li&gt;
&lt;li&gt;What are the profit margins in this industry? Does anyone have a budget for your services?&lt;/li&gt;
&lt;li&gt;What are businesses in this field using their websites for? If they just need an "online business card," your job as a developer will be much simpler than if they need some kind of database or e-commerce functionality. &lt;/li&gt;
&lt;li&gt;What are the demographics of the clientele your prospects are serving? High-end businesses will have bigger budgets for branding and marketing expenses, but smaller and newer businesses might have a greater need to generate new leads for themselves through their online presence.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What services can you upsell your clients on? After all, if you're planning to build a business's website from start to finish, you're not &lt;em&gt;just&lt;/em&gt; a developer. You're also taking on the roles of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;designer&lt;/li&gt;
&lt;li&gt;copywriter &amp;amp; editor&lt;/li&gt;
&lt;li&gt;SEO strategist&lt;/li&gt;
&lt;li&gt;content &amp;amp; multimedia manager&lt;/li&gt;
&lt;li&gt;publisher &amp;amp; technical support&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...and you should be charging for each of these services in your proposals, commensurate with your experience! More on proposals as we dig deeper.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generate-leads" class="anchor"&gt;
  &lt;/a&gt;
  Generate Leads
&lt;/h3&gt;

&lt;p&gt;I use &lt;a href="//d7leadfinder.com"&gt;d7leadfinder&lt;/a&gt; to generate lists of businesses in my vertical from the cities in my region. S/o to &lt;a href="//twitter.com/PaikCapital"&gt;@PaikCapital&lt;/a&gt; for making me aware of this tool.&lt;/p&gt;

&lt;p&gt;It costs $25/month and can potentially give you more prospects in a single day than you would be able to handle in a year.&lt;/p&gt;

&lt;p&gt;You select a keyword (choosing from a predefined list) like "Plumbing", "Hair Salons", etc. and a city. It will work its magic scraping the internet for a few minutes, then spit out a spreadsheet with contact info for all of the relevant businesses that match your query.&lt;/p&gt;

&lt;p&gt;Your mileage may vary, but when I search "Landscaping" in "Santa Cruz, CA" for example, I get about 100 relevant listings.&lt;/p&gt;

&lt;p&gt;Here's where you're gonna invest a lot of time, and I don't know a good way around it:&lt;/p&gt;

&lt;p&gt;You have to go through this list and look at every. single. website. &lt;/p&gt;

&lt;p&gt;one &lt;/p&gt;

&lt;p&gt;at &lt;/p&gt;

&lt;p&gt;a &lt;/p&gt;

&lt;p&gt;time.&lt;/p&gt;

&lt;p&gt;It's going to take a long time. &lt;/p&gt;

&lt;p&gt;Put something on in the background that will keep you in a good mood. I like old &lt;em&gt;Simpsons&lt;/em&gt; reruns.&lt;/p&gt;

&lt;p&gt;After I reviewed about 500 websites of businesses from 3 or 4 cities in my region, I was able to narrow my spreadsheets down to roughly 100 prospects.&lt;/p&gt;

&lt;p&gt;What was my criteria?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First and foremost: is the existing site mobile-responsive? With half of all web traffic now happening online, a smartphone-friendly website is a must for all businesses.&lt;/li&gt;
&lt;li&gt;Is it broken or difficult to use in some way? Is it inaccessible or crazy-slow due to technical issues, poor design choices, or outdated practices?&lt;/li&gt;
&lt;li&gt;Is it on a WYSIWYG platform ("what you see is what you get" i.e. Wix, Weebly, Squarespace, GoDaddy)? Small biz owners sometimes think they can save money by going DIY with their site, only to discover that it's actually a much bigger undertaking than they anticipated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once I had 100 prospects that I identified as genuinely in need of a new website, I moved them all to a new spreadsheet and started getting my marketing materials ready.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#craft-a-pitch" class="anchor"&gt;
  &lt;/a&gt;
  Craft a Pitch
&lt;/h3&gt;

&lt;p&gt;The best clients will be the ones who already know that they need your services. You don't need to convince them of the value of your work, and you will be solving a big problem for them by reaching out with your services. &lt;/p&gt;

&lt;p&gt;That's how you need to approach the cold sales process: as though every single person you're contacting genuinely &lt;em&gt;needs&lt;/em&gt; what you're offering, and perceives it as valuable. This is a big part of the mindset you need in order to communicate with confidence through the sales process.&lt;/p&gt;

&lt;p&gt;I'll share my first email template with you, but first I want to say that, after doing some research on the topic, I realize that &lt;strong&gt;this email is pretty bad.&lt;/strong&gt; Go ahead and read it, and then I'll explain:&lt;/p&gt;




&lt;p&gt;Hi (person),&lt;/p&gt;

&lt;p&gt;I recently came across your website and was curious if you would be interested in help with your web presence.&lt;/p&gt;

&lt;p&gt;As a landscaper in Santa Cruz myself — I’ve been in the industry for several years now — I know how to reach the kinds of clientele you serve, and how to build websites that bring in more leads.&lt;/p&gt;

&lt;p&gt;If you’ve been thinking about upgrading your site, I can offer a sleek, stylish, lightning-fast design that’s mobile-responsive and indexed properly for Google and other search engines to improve your rankings.&lt;/p&gt;

&lt;p&gt;Over 50% of all web traffic happens on smartphones these days, and if your website is not optimized for small screens then you’re losing out on the majority of visitors.&lt;/p&gt;

&lt;p&gt;You can see a sample of the kinds of sites I build here:&lt;br&gt;
&lt;a href="https://restoretheredwoods.netlify.app/"&gt;https://restoretheredwoods.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you want to learn more you can check out my portfolio:&lt;br&gt;
&lt;a href="https://www.samuelsycamore.com/"&gt;https://www.samuelsycamore.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re interested, let’s schedule a time to chat about this. I look forward to hearing from you!&lt;/p&gt;

&lt;p&gt;Happy new year,&lt;/p&gt;

&lt;p&gt;Sam Sycamore&lt;br&gt;
// web developer &amp;amp; designer&lt;br&gt;
&lt;a href="http://www.samuelsycamore.com"&gt;www.samuelsycamore.com&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Woof.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, it's way too long!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Who would want to read this? Good golly, man. What were you thinking?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Second, as Nat once again so astutely points out, I'm not "a landscaper who moonlights in web development as a side hustle." I'm "a web expert who specializes in online marketing for contractors and small business owners."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the difference?&lt;/p&gt;

&lt;p&gt;One says "I'm just some guy who's doing this for fun in his free time."&lt;/p&gt;

&lt;p&gt;The other says "I'm the best choice for you because I'm a professional who knows how to solve your business's specific problems."&lt;/p&gt;

&lt;p&gt;Who would you rather hire?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Third - and this was something else Nat pointed out - this email has no clear call to action. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If anyone actually bothered to read it, would they be compelled to do anything? If so, what would that be?&lt;/p&gt;

&lt;p&gt;There are three links here, one repeated twice. Go there? Then what?&lt;/p&gt;

&lt;p&gt;The final line of the email very passively asks for a quick chat, but it's hella vague and noncommittal. Nobody is going to go out of their way to make time for you.&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;must&lt;/strong&gt; have &lt;strong&gt;one&lt;/strong&gt; clear call to action in the form of a request for a phone conversation at &lt;strong&gt;a discrete time&lt;/strong&gt; that you suggest.&lt;/p&gt;

&lt;p&gt;Not sure what times to suggest? Here's the secret:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It doesn't really matter!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If the prospect is interested but the time you offer doesn't work, they will work with you to find a time. But part of playing the game is directly asking for what you want: a phone call. By suggesting a time, you convey your professionalism with regards to time management: you respect the value of their time, and you present as though your schedule is neatly partitioned and organized like a professional's should be.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fourth, the sample website is a poorly disguised fake organization that I made up and didn't bother to finish fleshing out (as you can see with the Lorem ipsum text near the bottom). If anybody bothered to look at it, it's not going to win them over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fifth, my portfolio website kind of sucks! It's all over the place in terms of tone because when I made it I wasn't totally sure if I was trying to be a freelancer or an employee. And it was made with a template, so it's not even an original design of mine.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I took Nat's advice and rewrote the email after I'd sent out like 25 of these. And I replaced the obvious mockup sample with one that was specifically targeted to my vertical: a real-looking website for a landscaping company that could theoretically be operating in my region.&lt;/p&gt;

&lt;p&gt;But otherwise, the content didn't change much, and it was still just way too long.&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://mailshake.com/masterclass/"&gt;Cold Email Masterclass from Mailshake&lt;/a&gt; has some fantastic advice about crafting the perfect cold pitch. For my next marketing campaign, I plan to keep it to 3-4 pithy lines, and A/B test the "AIDA" and "BAB" structures here.&lt;/p&gt;

&lt;p&gt;Something like this:&lt;/p&gt;




&lt;p&gt;Hi (person),&lt;/p&gt;

&lt;p&gt;Did you know that (name of business)'s website is really tough to use on a phone?&lt;/p&gt;

&lt;p&gt;I ask because solving this problem is what I do best - crafting smart-phone friendly websites that will impress your visitors for many years to come, no matter the screen size.&lt;/p&gt;

&lt;p&gt;My clients get overwhelmingly positive feedback from their customers when my sites deploy.&lt;/p&gt;

&lt;p&gt;I'd love to set up a time to talk more about this. Are you free next Monday or Tuesday at 11?&lt;/p&gt;

&lt;p&gt;Best,&lt;br&gt;
Sam Sycamore&lt;br&gt;
&lt;em&gt;Founder, Sycamore Design&lt;/em&gt;&lt;br&gt;
&lt;a href="http://www.sycamore.design"&gt;www.sycamore.design&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Better, right? I think so anyway. Please don't steal this wholesale! But feel free to tweak it to suit your needs.&lt;/p&gt;

&lt;p&gt;Another upgrade coming in my next round: &lt;a href="https://www.gmass.co/"&gt;GMass for Gmail&lt;/a&gt;. For my first 100 emails I sent each one out individually and it took many hours. For $20/month, GMass will enable me to send potentially thousands of &lt;em&gt;individualized&lt;/em&gt; emails with a single click, then track open and click-thru rates, and auto-send follow-ups a few days later to those who don't open the first message - all directly through Gmail! I am really excited to use it after doing it the long way first!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sell-your-services" class="anchor"&gt;
  &lt;/a&gt;
  Sell Your Services
&lt;/h3&gt;

&lt;p&gt;Once you have a few leads who are interested in your services, you need to set up a phone call with them to determine if the project is a good fit, explain how the process works, and answer any questions they have.&lt;/p&gt;

&lt;p&gt;Remember: &lt;em&gt;you&lt;/em&gt; are interviewing &lt;em&gt;them&lt;/em&gt; to decide if &lt;em&gt;you&lt;/em&gt; want to take on their project. They are not doing you a favor by hiring you - exactly the opposite. &lt;/p&gt;

&lt;p&gt;They have a problem, and you are here to solve it. But first you have to figure out if it's a problem that you truly want to take on.&lt;/p&gt;

&lt;p&gt;Again, this is a mindset thing. Your perspective will inform how you communicate about your services when your carefully memorized script flies out the window.&lt;/p&gt;

&lt;p&gt;Sales is a whole thing unto itself that is beyond the scope of this post, but this I know for sure:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't name prices during your intro phone call!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your goal here is to not to get the client to say: &lt;/p&gt;

&lt;p&gt;"Yes I want to give you $XXXX for this service," &lt;/p&gt;

&lt;p&gt;but instead to say: &lt;/p&gt;

&lt;p&gt;"Yes I agree that this is a good fit, please send me your quote for all of the things we've discussed today."&lt;/p&gt;

&lt;p&gt;Over the course of the call, even if you never talk numbers, you will get a sense of what your prospect's budget might be, and whether they're looking for "good enough" or if they might be willing to pay a premium for something better.&lt;/p&gt;

&lt;p&gt;If the client forces the price question, you need to deflect by any means necessary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ask what their budget is, as you are happy to accommodate a wide range of budgets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain that you offer many related services and want to be able to craft a proposal that is perfectly suited to their specific needs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Offer ballpark numbers as a last resort ("My rates begin at $XXXX for the basic package") to avoid wasting time on prospects who you suspect may try to lowball you&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be prepared to justify your price! Your clients are paying for your expertise, not the number of hours it takes to complete the project. They are paying for the countless hours you've invested in the skills that enable you to deliver on these kinds of projects. Those skills are valuable, and the industry as a whole is better off if we all push back against the race to the bottom that takes place on sites like Fiverr, Upwork et al. (No disrespect if you earn a living on these platforms- that is a serious accomplishment!)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the end of this call, you should have a clear understanding of what the client is looking for. If you're a solid salesperson, they should be excited to receive an email proposal from you after the call, outlining the scope of the work and the fees for each service you provide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-a-proposal" class="anchor"&gt;
  &lt;/a&gt;
  Write a Proposal
&lt;/h3&gt;

&lt;p&gt;This part is possibly even more terrifying than the sales call, because at this point you feel like you're on the right track but now you actually have something to lose - a warm lead who's going to be turned off by your price!&lt;/p&gt;

&lt;p&gt;Unless.&lt;/p&gt;

&lt;p&gt;If you've done your work as a competent salesperson, you should already have a general idea of the price point this client will be comfortable with, and you've conveyed a level of professionalism that reflects the rates you feel you deserve.&lt;/p&gt;

&lt;p&gt;You've already won them over personally and professionally during the phone call by being kind and friendly and assuring them that you are the best person for the job because you have the expertise to meet their specific needs.&lt;/p&gt;

&lt;p&gt;Your prospect won't be scared off by the price if you demonstrate the kind of authority that they would expect to see at that price point.&lt;/p&gt;

&lt;p&gt;Here's an example of a proposal that led to a sale for me:&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design &amp;amp; Development: $1500&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bold, sharp, mobile-responsive design&lt;/li&gt;
&lt;li&gt;Content management system (CMS) configuration&lt;/li&gt;
&lt;li&gt;Technical search engine optimization (SEO)&lt;/li&gt;
&lt;li&gt;Pages

&lt;ul&gt;
&lt;li&gt;Landing page&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Photo gallery&lt;/li&gt;
&lt;li&gt;Testimonials&lt;/li&gt;
&lt;li&gt;About&lt;/li&gt;
&lt;li&gt;Contact&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Copywriting: $500&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I will provide you with a brief questionnaire to help me fill in the details and take on the tone and branding of your business&lt;/li&gt;
&lt;li&gt;Adheres to Google’s best practices for SEO&lt;/li&gt;
&lt;li&gt;Includes one round of revisions&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Setup &amp;amp; Deployment: $200&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Site deployment to web host, I recommend dreamhost.com&lt;/li&gt;
&lt;li&gt;Setup of CMS&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Total: $2200&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Optional Technical Support: $100/month or $75/hour&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you would like help managing your CMS or addressing minor technical issues, I am available for tech support on a monthly basis, or by the hour as needed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This format seemed to work fine for me, but next time around I plan to bill for SEO separately as I feel more competent about my skills now, and I think it's something distinct from design &amp;amp; dev. Speaking of which, I may also separate out those two categories in the future as well.&lt;/p&gt;

&lt;p&gt;How the heck did I arrive at these rates?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#set-your-price" class="anchor"&gt;
  &lt;/a&gt;
  Set Your Price
&lt;/h4&gt;

&lt;p&gt;The reason it's so hard to find concrete advice about how to set your rates is that &lt;em&gt;it's mostly up to you to decide how to do it.&lt;/em&gt; There is no secret formula, and what the market can bear will vary wildly between industries, demographics, regions, and continents.&lt;/p&gt;

&lt;p&gt;I won't go too deep here into pricing strategies, but I will share my thought process.&lt;/p&gt;

&lt;p&gt;When I did my review of 500 sites in my vertical, I paid close attention whenever I found a link to a developer's site at the bottom of an existing site. I would always scope out their sites to see how they pitch their services and find out if they share any pricing info.&lt;/p&gt;

&lt;p&gt;The pricing that I found in my region started at around $1000 for simple template solutions, and upwards of $3-5000 for custom designs, Wordpress blogs, and SEO. I decided I should try to set my rates a little lower than the competition, at least to start.&lt;/p&gt;

&lt;p&gt;I didn't want to charge an hourly rate, but when all was said and done I wanted to earn $100/hr for my time investment, so I set my flat fees based on my estimated number of hours multiplied by the target of $100/hr. &lt;/p&gt;

&lt;p&gt;But I would be perfectly happy with $50/hr, and this target range gave me a lot of wiggle room: even if the project took twice as long as I estimated, I'd still earn a solid wage.&lt;/p&gt;

&lt;p&gt;My first project clocked in at about $75/hr, so I feel really good about this pricing strategy going into my next round of sales.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sign-a-contract" class="anchor"&gt;
  &lt;/a&gt;
  Sign a Contract
&lt;/h3&gt;

&lt;p&gt;Before you fire up Figma or write a single line of code, &lt;em&gt;you need both parties to sign a contract that clearly lays out the scope of work and what happens if either party fails to meet their obligations.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="//www.leonnoel.com"&gt;Leon Noel&lt;/a&gt; recommends the &lt;a href="https://stuffandnonsense.co.uk/projects/contract-killer"&gt;Stuff &amp;amp; Nonsense Contract Killer&lt;/a&gt; open-source contract, and while I appreciate the framework, the cheeky British humor doesn't really jive with my style.&lt;/p&gt;

&lt;p&gt;So I revised that contract for American English and &lt;a href="https://github.com/samuelsycamore/contract-killer"&gt;posted it to my Github here&lt;/a&gt; - please feel free to use it if it's helpful to you!&lt;/p&gt;

&lt;p&gt;(None of this has been reviewed by anyone I know in any legal capacity. If I'm able to land a few more clients then I intend to seek legal advice from a CPA - I would recommend that you do the same if you are serious about being self-employed.)&lt;/p&gt;

&lt;p&gt;I insert the relevant details into this template and upload it to HelloSign.com, which enables you and your client to register legally binding e-signatures online - no need for paper documents or faxing. This service is free for the first few, but you have to pay after you reach a certain number of contracts per month.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#determine-a-payment-schedule" class="anchor"&gt;
  &lt;/a&gt;
  Determine a Payment Schedule
&lt;/h4&gt;

&lt;p&gt;One key element of the contract is the payment schedule, which should clearly define how much your client owes you and when. I've tried two different schedules, and one has immediately emerged as the clear winner:&lt;/p&gt;

&lt;p&gt;50% upfront, 50% when all work is completed but &lt;em&gt;before&lt;/em&gt; the site is deployed to its host. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO NOT WORK FOR FREE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I repeat:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-not-work-for-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;DO NOT WORK FOR FREE&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You must have a down payment in hand before you start the work. And you need to be paid in full before your completed site is deployed to the host. This is to prevent a bad-faith client from taking your work and using it without paying you.&lt;/p&gt;

&lt;p&gt;And you need to make this payment schedule crystal clear to your client. If not, there's a good chance that this could lead to headaches when you send an invoice that your client isn't expecting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#receive-payments" class="anchor"&gt;
  &lt;/a&gt;
  Receive Payments
&lt;/h3&gt;

&lt;p&gt;I currently use Stripe.com to receive payments from my clients. I like that it enables me to send out professional invoices that my clients can pay using any payment method that works for them. I don't love that it takes a 3% cut off the top. If you know a better solution, I'd love to hear about it.&lt;/p&gt;

&lt;p&gt;I request payment within 7 days of sending out the invoice. So far my clients have paid within the day every time, perhaps because I alerted them to the fact that the invoice would be on its way, and that it needed to be paid in order for me to continue with the work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-get-to-work" class="anchor"&gt;
  &lt;/a&gt;
  Now Get to Work!
&lt;/h2&gt;

&lt;p&gt;And there ya go, that's essentially everything that I know about the process of finding cold prospects, pitching my services, landing deals, and securing payments.&lt;/p&gt;

&lt;p&gt;I sincerely hope you find this helpful. If you have a question that isn't answered in here somewhere, then I probably don't have a good answer to offer, honestly!&lt;/p&gt;

&lt;p&gt;Best of luck to you! Let me know how you fare out there - we can trade notes.&lt;/p&gt;

</description>
      <category>career</category>
      <category>freelancing</category>
      <category>100devs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build Pluggable Apps with Lenny the Duck 🦆</title>
      <author>Oranda</author>
      <pubDate>Sun, 31 Jan 2021 18:10:19 +0000</pubDate>
      <link>https://dev.to/codalreef/pluggable-apps-with-lenny-the-duck-2oj3</link>
      <guid>https://dev.to/codalreef/pluggable-apps-with-lenny-the-duck-2oj3</guid>
      <description>&lt;p&gt;Unlike many apps, "Pluggable" apps can be extended with self-contained pockets of code called "Plugins".&lt;/p&gt;

&lt;p&gt;These apps tend to be modular by design, resulting in manageable, loosely-coupled code.&lt;/p&gt;

&lt;p&gt;Today, let's learn how to build pluggable apps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Every day, you probably use pluggable apps:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTb5Tzau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bo7kfomrpsoxdgyj00v5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTb5Tzau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bo7kfomrpsoxdgyj00v5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your favorite development tools are probably pluggable too:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPwiAGoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f2sy21072ld1qhg2h8my.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPwiAGoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f2sy21072ld1qhg2h8my.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem is, there are too many problems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With Plugins, you don’t need to solve every problem.  Users solve their own problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With plugins, feature logic can be centralized instead of spread throughout the codebase.  This leads to modularized, loosely-coupled features.&lt;/p&gt;

&lt;p&gt;When you build your entire app as a “Tree of Plugins”, these benefits extend to the whole codebase.  Ultimately, this benefits you, your team, and your customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-nonpluggable-systems" class="anchor"&gt;
  &lt;/a&gt;
  Building Non-Pluggable Systems
&lt;/h2&gt;

&lt;p&gt;Imagine you're a duck named Lenny (🦆), and you love to quack.  Most of your friends love to quack too, except Lonnie (🍗).&lt;/p&gt;

&lt;p&gt;Anyways... you live in a park and people like to throw food at you (despite the litany of signs indicating not to).&lt;/p&gt;

&lt;p&gt;One day, you notice you’ve become quite plump.  So, you build a web service to track your consumption:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//  food-service.ts&lt;/span&gt;

&lt;span class="c1"&gt;//  Log of Foods Eaten&lt;/span&gt;
&lt;span class="c1"&gt;//  Example:  [{ name: "lenny", food: "waffle", calories: 5 }]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;//  Function to Log a Food (by Duck Name)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;calories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;foods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;calories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//  Function to Get Log (by Duck Name)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;foods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c1"&gt;//  JS Module Exports&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;logFood&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getLog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Congratulations, tracking has given you the &lt;em&gt;bill&lt;/em&gt;-power to lose 3 ounces!&lt;/p&gt;

&lt;p&gt;That's great, but your friend Mack (🐦) has no self control.  So, he asks you to scare the humans with a horn once he exceeds his 300 calorie daily limit.&lt;/p&gt;

&lt;p&gt;Then your friend Jack (🐤) asks if you can also track protein.  He’s already fit, so he’s more concerned with staying jacked than losing fat.&lt;/p&gt;

&lt;p&gt;Before you know it, Abby (🦀), Tabby(🐢) and Doug (🐠) are asking for features.  Even Larry (🐊) wants something, and you're pretty sure he's the one who ate Lonnie (🍗)!&lt;/p&gt;

&lt;p&gt;The whole pond descends upon you, the backlog is full, and now the app is so complex that you're losing customers talking about "the good old days" when things were simple.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--trgFuX6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vmzb4pfet05dl816inlv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--trgFuX6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vmzb4pfet05dl816inlv.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you wake up... "Are you ok honey?", asks your wife Clara (🦆) as she waddles in with a basket of breadcrumbs.&lt;/p&gt;

&lt;p&gt;"I had the nightmare again...", you reply in an anxious tone.&lt;/p&gt;

&lt;p&gt;“Silly goose”, Clara chuckles and says: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The pain of feature creep, non-modular code, and tightly coupled functionality can be largely avoided with plugin-oriented design (POD).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looking up to meet her gaze you say, "You're right dear.  let's recap the basics of plugin oriented design so we never forget."&lt;/p&gt;

&lt;p&gt;With a warm embrace Clara replies, "I can't think of a better way to spend our Sunday =)"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-pluggable-systems" class="anchor"&gt;
  &lt;/a&gt;
  Building Pluggable Systems
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A fundamental characteristic of plugin-oriented design is the ability to alter functionality without altering the existing system definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, to make your Food Service "pluggable", you decide to do two things: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Register&lt;/strong&gt;:  Allow users to register custom functions.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Invoke&lt;/strong&gt;:  Run the registered functions when a condition is met.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this, other developers can “inject” functionality into your app.&lt;/p&gt;

&lt;p&gt;These registration points are called &lt;a href="https://github.com/webpack/tapable"&gt;Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We see this pattern everywhere:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Wordpress&lt;/strong&gt;:  &lt;a href="https://github.com/WordPress/WordPress/blob/37662df05e948eaf77b17e6fd27d519987f179db/wp-includes/class-wp-hook.php#L73"&gt;"Filters"&lt;/a&gt; and &lt;a href="https://github.com/WordPress/WordPress/blob/37662df05e948eaf77b17e6fd27d519987f179db/wp-includes/plugin.php#L409"&gt;"Actions (&lt;em&gt;gasp&lt;/em&gt; it's just another Filter)"&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Babel&lt;/strong&gt;: &lt;a href="https://github.com/babel/babel/blob/main/packages/babel-core/src/config/plugin.js#L23"&gt;Visitor Plugin Function&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Webpack&lt;/strong&gt;:  &lt;a href="https://github.com/webpack/tapable"&gt;Tapable&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;I recommend taking a look at &lt;code&gt;tapable&lt;/code&gt;.  This is the small module underlying every Webpack Plugin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's the Food Service code updated to use Hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//  pluggable-food-service.ts&lt;/span&gt;

&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//  Define the Hook&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;LogFoodFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;calories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//  List of Functions Registered to this "Hook"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LogFoodFunction&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;//  Add a Function to the Hook&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LogFoodFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//  Build the Food Service&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;

&lt;span class="c1"&gt;//  List of Foods Eaten&lt;/span&gt;
&lt;span class="c1"&gt;//  Example:  [{ name: "lenny", food: "bread", calories: 5 }]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;//  Add the Core Function&lt;/span&gt;
&lt;span class="nx"&gt;addFunction&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;calories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;foods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;calories&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//  Function to Log a Food (by Duck Name)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logFood&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;calories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//  Trigger Functions in the Register&lt;/span&gt;
  &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;calories&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//  Function to Get Log (by Duck Name)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;foods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="c1"&gt;//  JS Module Exports&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;logFood&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getLog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, anyone can extend this JS Module by calling &lt;code&gt;addFunction&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s Macks’s (🐦) Plugin to scare humans with a horn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//  macks-plugin.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;FoodService&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pluggable-food-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Horn&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;horn-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//  Set Calorie Limit&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calorieLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;FoodService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFunction&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;//  Get Total Calories&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eatenCalories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FoodService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calories&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//  Check Condition&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eatenCalories&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;calorieLimit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Horn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, all you need to do is import Mack's Plugin, and the feature will be integrated.&lt;/p&gt;

&lt;p&gt;However, building a system with “Hooks” is just one way to implement “POD” principles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hook-alternatives" class="anchor"&gt;
  &lt;/a&gt;
  Hook Alternatives
&lt;/h2&gt;

&lt;p&gt;Hooks (and their variants) are fairly common.  Probably because they're simple:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Build a way to register code, and invoke the code when a condition is met.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But, they're not the only way to build a pluggable system.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#primitive-domain" class="anchor"&gt;
  &lt;/a&gt;
  Primitive Domain
&lt;/h4&gt;

&lt;p&gt;In the code above, we register "primitive" code with a Hook.  Fundamentally, primitive code is just an &lt;em&gt;encoding&lt;/em&gt; of intent.  In this case, it's then &lt;em&gt;decoded&lt;/em&gt; by the JS runtime.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#application-domain" class="anchor"&gt;
  &lt;/a&gt;
  Application Domain
&lt;/h4&gt;

&lt;p&gt;However, intent can be &lt;em&gt;encoded&lt;/em&gt; in other ways too.  For example, you can build your own language.  It sounds complicated, but it's exactly what you do when you define classes or build an API.  Your application logic is then responsible for managing and &lt;em&gt;decoding&lt;/em&gt; entities in this domain.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#external-domain" class="anchor"&gt;
  &lt;/a&gt;
  External Domain
&lt;/h4&gt;

&lt;p&gt;In some cases, you may want to externalize the entire process.  For example, you can trigger &lt;em&gt;external&lt;/em&gt; code with Webhooks, Websockets, and tools like IFTTT, Zapier, and Shortcuts.  &lt;/p&gt;

&lt;p&gt;Regardless of the implementation, it helps to remember this &lt;em&gt;golden&lt;/em&gt; principle:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep it simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;a.k.a. don't do more than reasonably necessary&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This applies to you, your team, your functions, modules, app, and everything you touch.  If something is too complex, try to break it up.  Refactor, rework, and fundamentalize as necessary. &lt;/p&gt;

&lt;p&gt;Plugin-Oriented Design (POD) can help achieve this goal, especially as logic becomes complex.  By modeling each feature as a Plugin, complexity only bubbles up when necessary, and in a predictable, modularized container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hook-concerns" class="anchor"&gt;
  &lt;/a&gt;
  Hook Concerns
&lt;/h2&gt;

&lt;p&gt;There are several concerns with the hook implementation we built above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Centrality&lt;/strong&gt;:  You're responsible for loading Plugins.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Trust&lt;/strong&gt;:  You're responsible for auditing code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Conflicts&lt;/strong&gt;:  Users may disagree on the feature set.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dependencies&lt;/strong&gt;:  No management system for complex dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;More&lt;/strong&gt;:  A whole lot more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These concerns can be addressed using various strategies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;External Plugins&lt;/strong&gt;:  Dynamically inject code from an external resource (like a URL) at runtime.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Contextual Activation&lt;/strong&gt;:  Dynamically activate features based on the current context (logged in users, application state, etc...)&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Plugin Managers&lt;/strong&gt;:  Coordinates feature extension, even in a complex network of dependencies.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;More&lt;/strong&gt;:  A whole lot more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope to cover "External Plugins", "Contextual Activation", and related topics in future articles.&lt;/p&gt;

&lt;p&gt;To learn about "Plugin Managers" and how our new tool "Halia" can help you build Pluggable JS / TS systems, see our blog post:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/codalreef/building-apps-as-a-tree-of-plugins-with-halia-1e5o"&gt;Plugin Oriented Design with Halia&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The concepts discussed here are just the start.  We've opened a can of worms, but for now, let's put the worms back in the can. We've already overfed the park animals.&lt;/p&gt;

&lt;p&gt;Speaking of which, we found Lonnie (🦆)!  It turns out she was just across the pond learning plugin-oriented architecture (like all good ducks do).&lt;/p&gt;

&lt;p&gt;In closing, there are plenty of ways to cook your goose, so you might as well be a duck (🦆).&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
CR&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more articles like this, follow me on:  &lt;a href="https://github.com/CodalReef"&gt;Github&lt;/a&gt;, &lt;a href="https://dev.to/codalreef"&gt;Dev&lt;/a&gt;, &lt;a href="https://twitter.com/CodalReef"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.reddit.com/user/CodalReef"&gt;Reddit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Node js modules simplified: The Path module. </title>
      <author>Siradji Awoual</author>
      <pubDate>Sun, 31 Jan 2021 17:56:39 +0000</pubDate>
      <link>https://dev.to/siradji/node-js-modules-simplified-the-path-module-28g6</link>
      <guid>https://dev.to/siradji/node-js-modules-simplified-the-path-module-28g6</guid>
      <description>&lt;p&gt;The path module is one of the most used at the same time misunderstood modules in node js. Node js has a bunch of modules that ease our lives as developers. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-the-path-module-in-node" class="anchor"&gt;
  &lt;/a&gt;
  What is the Path module in node?
&lt;/h4&gt;

&lt;p&gt;From the node js docs, The path module provides utilities for working with file and directory paths. It can be accessed using. Yes, a module that will ease your life when working with files and directories. &lt;/p&gt;

&lt;p&gt;Like any other modules in Node, the &lt;strong&gt;Path&lt;/strong&gt; module has quite a several methods. Today, I will be discussing the five  methods of the path module. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-pathjoin" class="anchor"&gt;
  &lt;/a&gt;
  1. Path.join()
&lt;/h3&gt;

&lt;p&gt;This method, in my opinion, is one if not the most used method of the path module. It is sometimes confused by beginners with the &lt;strong&gt;resolve&lt;/strong&gt; method. &lt;/p&gt;

&lt;p&gt;The join method joins (as its name says) all the path chunks passed and returns a path string. so something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;work&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-project&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;work&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I know you might be wondering why to use the path method when you can just type out the path. Well, the join method does just more than joining path segments. It joins the segments with a platform-specific separator as a delimiter, then normalizes the resulting path. The delimiter of a macOS is different from that of windows. The join module joins these path segments with a platform-specific delimiter.&lt;/p&gt;

&lt;p&gt;That is good. Imagine you work in a team of many developers and some of them are using Mac while you are on windows. Specifying a path explicitly will result in your program breaking on your team members' computers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-pathresolve" class="anchor"&gt;
  &lt;/a&gt;
  2. Path.resolve()
&lt;/h3&gt;

&lt;p&gt;This is an important path method that this article will be incomplete if missing. This method is also confused with the join method. True, both of them return a path, but the resolve method resolves the path segments that are passed as arguments and returns an absolute URL. &lt;/p&gt;

&lt;p&gt;Confusing? Let take a look at what resolve method will return passing the same argument we had above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;work&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-project&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home/kraken/projects/personal/community/dev.to/nest_one/home/work/my-project&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, the path returned now is an absolute URL using your home directory as the base. I use this most of the time if I need to point to a file for example a png file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3pathextname" class="anchor"&gt;
  &lt;/a&gt;
  3.Path.extname()
&lt;/h3&gt;

&lt;p&gt;Honestly, the names of these methods are quite self-explanatory. At a glance, you know that this method has something to do with the extension name. If you think so, then you are right. This method returns the extension of a given file. Let us take a look&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileExtension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/foo/bar/node.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileExtension&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Keep in mind, this method returns the extension of the path, from the last occurrence of the. (period) character to the end of the string in the last portion of the path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileExtension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/foo/bar/node.js.md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileExtension&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I recently used this method to filter out images that a program I was writing does not support. A user uploads a png file and my program (as per the client's instruction) wants only a jpeg file. You can see how easy it is for me to do that. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4pathisabsolute" class="anchor"&gt;
  &lt;/a&gt;
  4.Path.isAbsolute()
&lt;/h3&gt;

&lt;p&gt;This method takes a string path as an argument and returns a boolean. It is the only path method that returns a boolean. &lt;br&gt;
This method is used to check if a given path (passed as an argument) is an absolute path. &lt;/p&gt;

&lt;p&gt;What is an absolute path? &lt;br&gt;
 An absolute path always contains the root element and the complete directory list required to locate the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isValidPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAbsolute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/foo/bar/node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileExtension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myfile.pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//false&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;if you want to validate a path, you can use this method to do so. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-pathparse" class="anchor"&gt;
  &lt;/a&gt;
  5. Path.parse()
&lt;/h3&gt;

&lt;p&gt;Last but not least, the parse method. This method is, in my opinion. very cool. The parse method accepts a path as an argument and returns an object with the "information" about the path. The 'information' returned as dir, ext, name, base, root. It is very helpful when you want to extract information about a path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pathProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/foo/bar/node.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/foo/bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That is it, guys! I hope you have learned something out of this. I would write follow-up articles on other modules like the Event, FS, and OS modules.  &lt;/p&gt;

&lt;p&gt;Cheers and happy coding!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>node</category>
    </item>
    <item>
      <title>Higher Order Array Methods in JavaScript</title>
      <author>Shrihan Kumar Padhy</author>
      <pubDate>Sun, 31 Jan 2021 17:50:45 +0000</pubDate>
      <link>https://dev.to/shrihankp/higher-order-array-methods-in-javascript-14e7</link>
      <guid>https://dev.to/shrihankp/higher-order-array-methods-in-javascript-14e7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Higher order functions are functions that operate on other functions, either by receiving them as arguments or by returning them. It is a function that accepts a function as a parameter or returns a function as the output.&lt;/p&gt;

&lt;p&gt;In this article, I am going to show you the most commonly used such methods when it comes to arrays.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-arrayprototypemap-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.map&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is one of the simplest functions you are going to use while working with Arrays. It forms a new array by calling the function passed into it as an argument, &lt;strong&gt;on each and every element of the Array. It will &lt;code&gt;map&lt;/code&gt; each of the return values of the callback and create a new array&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The callback passed to the &lt;code&gt;map()&lt;/code&gt; function can accept any of the three arguments: &lt;code&gt;item&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-1" class="anchor"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h4&gt;

&lt;p&gt;Given an array of integers, create a new array in which the double of each integer in the first array is stored, and log it to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;477&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8914&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40461&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;599148&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: [954, 17828, 80922, 1198296]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example-2" class="anchor"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h4&gt;

&lt;p&gt;Given an array of singular nouns, create a new array that stores the plural noun of each of the words in the first array, and log it to the console (assume that the singular nouns can be made plural by adding a 's').&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;book&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: ['pens', 'books', 'codes']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-arrayprototypefilter-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.filter&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; function is what you'd use if you're creating a search bar from a given list of items, for example. The &lt;code&gt;filter()&lt;/code&gt; method also creates a new array by executing the passed callback &lt;strong&gt;on every element of the array&lt;/strong&gt;, and keeps it in the resulting array &lt;strong&gt;IF and ONLY IF the element passes the Boolean test returned by the callback&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The callback passed into the &lt;code&gt;filter()&lt;/code&gt; method accepts any of the three arguments: &lt;code&gt;item&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt;; same as the &lt;code&gt;map()&lt;/code&gt; method.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-1" class="anchor"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h4&gt;

&lt;p&gt;Given an array of costs of different products, create a new array with the costs from the input array if the cost is &amp;lt;= $350, and print it to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;390&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;190&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;311.85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19048&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;670&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// console: [190, 311.85, 67];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example-2" class="anchor"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h4&gt;

&lt;p&gt;Given an array of objects with the city name and population, create an array of integers with objects from the first array if the population of that particular city is &amp;gt;= 5 million.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Shanghai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24300000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Los Angeles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3792621&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New Delhi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;21800000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mumbai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18400000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chicago&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2695598&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Houston&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;population&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2100263&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;population&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;population&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: [{name: "Shanghai", population: 24300000}, {name: "New Delhi", population: 21800000}, {name: "Mumbai", population: 18400000}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-arrayprototypereduce-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.reduce&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method creates a new array, executing the callback passed into it on every element, and outputs a single value. It does something on every element and keeps a record of the calculations in an accumulator variable and when no more elements are left, it returns the accumulator.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; function itself takes two inputs: (a) the reducer function or callback; (b) an optional starting point or &lt;code&gt;initialValue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The reducer function or the callback accepts 4 arguments: &lt;code&gt;accumulator&lt;/code&gt;, &lt;code&gt;currentItem&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the optional &lt;code&gt;initialValue&lt;/code&gt; is given, the &lt;code&gt;accumulator&lt;/code&gt; at the first iteration will be equal to the &lt;code&gt;initialValue&lt;/code&gt; and the &lt;code&gt;currentItem&lt;/code&gt; will be equal to the first element in the array. Otherwise, the &lt;code&gt;accumulator&lt;/code&gt; would be equal to the first item in the input array, and the &lt;code&gt;currentItem&lt;/code&gt; will be equal to the second item in the array.&lt;/p&gt;

&lt;p&gt;Sounds confusing? Let's have a look at two examples:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-1" class="anchor"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h4&gt;

&lt;p&gt;(i) Given an array of numbers, find the sum of every element in the array, and log it to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's have a look at the accumulator and the current value...:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;at the first iteration: &lt;code&gt;acc=1&lt;/code&gt;&lt;code&gt;(givenArray[0])&lt;/code&gt;, &lt;code&gt;curr=2&lt;/code&gt;&lt;code&gt;(givenArray[1])&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;at the second iteration: &lt;code&gt;acc=3&lt;/code&gt;&lt;code&gt;(givenArray[0] + givenArray[1])&lt;/code&gt;, &lt;code&gt;curr=3&lt;/code&gt;&lt;code&gt;(givenArray[2])&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;at the third iteration: &lt;code&gt;acc=6&lt;/code&gt;&lt;code&gt;(givenArray[0] + givenArray[1] + givenArray[2])&lt;/code&gt;, &lt;code&gt;curr=4&lt;/code&gt;&lt;code&gt;(givenArray[3])&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;at the fourth iteration: &lt;code&gt;acc=10&lt;/code&gt;&lt;code&gt;(givenArray[0] + givenArray[1] + givenArray[2] + givenArray[3])&lt;/code&gt;, &lt;code&gt;curr=5&lt;/code&gt;&lt;code&gt;(givenArray=[4])&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;finally: &lt;code&gt;acc=15&lt;/code&gt; (sum of all elements) (array iteration ended)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can view this yourself by running a &lt;code&gt;console.log&lt;/code&gt; inside the function like so: &lt;code&gt;console.log("iteration: acc="+acc+" curr="+curr);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(ii) Given an array of numbers, find the sum of every element in the array, starting with 8, and log the result to the console&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: 23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note: Here, we are passing the optional &lt;code&gt;initialValue&lt;/code&gt; parameter to the &lt;code&gt;reduce()&lt;/code&gt; function, saying that we want to start with 8 and do whatever we want inside the callback.&lt;br&gt;
Again, you can test the values of &lt;code&gt;acc&lt;/code&gt; and &lt;code&gt;curr&lt;/code&gt; and by adding a &lt;code&gt;console.log&lt;/code&gt; like above.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#example-2" class="anchor"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h4&gt;

&lt;p&gt;Given an array of numbers, find the average of them, and log it to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;108115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;45909.15154&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1988.1545&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;145&lt;/span&gt;&lt;span class="nx"&gt;e8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;average&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;average&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: 1812519559.288255&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you're confused from the third line, it basically calculates the sum first, and divides the return value by the length of &lt;code&gt;givenArray&lt;/code&gt;. You could also use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;108115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;45909.15154&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1988.1545&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;145&lt;/span&gt;&lt;span class="nx"&gt;e8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;average&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;average&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: 1812519559.288255&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a complete no-no for readability and for the KISS principle, but I ain't a cop, use whichever method you like 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-arrayprototypeforeach-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.forEach&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;forEach&lt;/code&gt; method is similar to the &lt;code&gt;for(let i = 0; i &amp;lt; array.length, i++){}&lt;/code&gt; syntax. It &lt;strong&gt;loops through the array and runs the given callback for each of the elements of the array.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The callback function passed to the &lt;code&gt;forEach&lt;/code&gt; function can accept the &lt;code&gt;currentItem&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;

&lt;p&gt;Given an array of numbers, log every number to the console(&lt;em&gt;wat?!&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="cm"&gt;/* console:
1
2
3
4
5
6
7
8
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The big difference between the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;forEach&lt;/code&gt; method is that the &lt;code&gt;map&lt;/code&gt; method creates a new array, "mapping" the return value of the callback and create a new array, while the &lt;code&gt;forEach&lt;/code&gt; method just iterates over the array.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-arrayprototypesome-endraw-and-raw-arrayprototypeevery-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.some&lt;/code&gt; and &lt;code&gt;Array.prototype.every&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;some&lt;/code&gt; method &lt;strong&gt;tests whether at least one element of the array complies with the given test in the callback, and returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The callback function passed to the &lt;code&gt;some&lt;/code&gt; function can accept the &lt;code&gt;currentItem&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-1" class="anchor"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h4&gt;

&lt;p&gt;Given two arrays of numbers, test whether each of the arrays have at least one number that is &amp;gt; 5, and log the result to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;testArray1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;testArray2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`givenArray1: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testArray1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; givenArray2: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testArray2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: givenArray1: true; givenArray2: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;every&lt;/code&gt; method is pretty similar to the &lt;code&gt;some&lt;/code&gt; method, but it &lt;strong&gt;tests whether all the elements of the array complies with the given test in the callback, and returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The callback function passed to the &lt;code&gt;every&lt;/code&gt; function can accept the &lt;code&gt;currentItem&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-2" class="anchor"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h4&gt;

&lt;p&gt;Given two arrays of numbers, test whether each of the arrays have all the numbers &amp;gt;= 5, and log the result to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;785&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;testArray1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;testArray2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;givenArray2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`givenArray1: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testArray1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; givenArray2: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;testArray2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: givenArray1: true; givenArray2: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-arrayprototypeflat-endraw-and-raw-arrayprototypeflatmap-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.flat&lt;/code&gt; and &lt;code&gt;Array.prototype.flatMap&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;flat&lt;/code&gt; method creates a &lt;strong&gt;new Array with all the elements, and if the element is an array, then it "flattens" the element and adds all the sub-array elements to the returned array.&lt;/strong&gt; By default, it will only flatten the array upto 1 level.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;flat&lt;/code&gt; method can accept only one optional argument, the level or &lt;code&gt;depth&lt;/code&gt; up till which the array will be "flattened".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-1" class="anchor"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h4&gt;

&lt;p&gt;Given an array of arrays of numbers, find the sum of every number inside the array as well as the sub-arrays, and log the sum to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="nx"&gt;givenArray&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// flattens the array&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// finds the sum&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: 2331&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;flatMap&lt;/code&gt; method is the combination of the &lt;code&gt;flat&lt;/code&gt; method and the &lt;code&gt;map&lt;/code&gt; method. &lt;strong&gt;It first "flattens" the array, runs the callback for each element and "maps" the return value to the corresponding element, and finally returns the "flattened and mapped" array.&lt;/strong&gt; If you use something like: &lt;code&gt;arr.flatMap(...)&lt;/code&gt;, its equivalent to &lt;code&gt;arr.flat().map(...)&lt;/code&gt;. But, there's one catch: you cannot flatten the array by levels more than one, for that you need to use the &lt;code&gt;.flat(...).map(...)&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;flatMap&lt;/code&gt; method accepts the same arguments as the &lt;code&gt;map&lt;/code&gt; method, and so does the callback.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-2" class="anchor"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h4&gt;

&lt;p&gt;Given an array of arrays of users, create a new array with a single list of all the first names of the users, and log it to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lorem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ipsum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dolor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Amet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Consectetur&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adipiscing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Elit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Etiam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lobortis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lorem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Elit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lorem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ipsum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dolor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Amet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Consectetur&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adipiscing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Elit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Etiam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lobortis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lorem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Elit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usersFirstNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flatMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usersGroup&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;usersGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usersFirstNames&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: ["Lorem", "Dolor", "Amet", "Adipiscing", "Etiam", "Lorem", "Lorem", "Dolor", "Amet", "Adipiscing", "Etiam", "Lorem"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-arrayprototypefind-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.find&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; method &lt;strong&gt;returns the first element of the array that satisfies the Boolean test in the callback&lt;/strong&gt;. If no element passes the Boolean test, &lt;code&gt;undefined&lt;/code&gt; is returned.&lt;/p&gt;

&lt;p&gt;The callback passed to the &lt;code&gt;find&lt;/code&gt; function can accept any of the three arguments: &lt;code&gt;item&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;

&lt;p&gt;Given an array of objects with fruits, find the 'apples' and log the corresponding object to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quantity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quantity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apples&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quantity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apples&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// console: {"name": "apples", "quantity": 80}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-arrayprototypesort-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.prototype.sort&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;sort&lt;/code&gt; method is self-explanatory: &lt;strong&gt;it "sorts" an array in place and returns a sorted the array&lt;/strong&gt;. The default sort order is ascending. &lt;/p&gt;

&lt;p&gt;Note the words "in place". It means that the original array is changed and the same reference to the array is returned. So, &lt;code&gt;originalArray===newArray&lt;/code&gt;, if nothing is sorted.&lt;/p&gt;

&lt;p&gt;It takes a Function that specifies the criteria of sorting.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-1" class="anchor"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h4&gt;

&lt;p&gt;Given an array of numbers, sort the array by ascending order and log the sorted array to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example-2" class="anchor"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h4&gt;

&lt;p&gt;Given an array of contacts, sort them in alphabetical order by name, and log the sorted array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;givenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yosha Gamuda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1234567890&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Portia Umeng&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4894759371&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yosha Gamuda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1234567890&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Portia Umeng&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4894759371&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;name1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;name2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;givenArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The way &lt;code&gt;sort()&lt;/code&gt; works is a bit different than the others. Quoting &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"&gt;this MDN doc&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If compareFunction is supplied, all non-undefined array elements are sorted according to the return value of the compare function (all undefined elements are sorted to the end of the array, with no call to compareFunction). If a and b are two elements being compared, then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If compareFunction(a, b) returns less than 0, sort a to an index lower than b (i.e. a comes first).&lt;/li&gt;
&lt;li&gt;If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAScript standard only started guaranteeing this behavior in 2019, thus, older browsers may not respect this.&lt;/li&gt;
&lt;li&gt;If compareFunction(a, b) returns greater than 0, sort b to an index lower than a (i.e. b comes first).&lt;/li&gt;
&lt;li&gt;compareFunction(a, b) must always return the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned, then the sort order is undefined.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To compare numbers instead of strings, the compare function can subtract b from a. The following function will sort the array in ascending order (if it doesn't contain Infinity and NaN).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I know this article has ABSOLUTELY LEVIATHAN AMOUNT of information. There are loads of others, but essentially, you need not know every method in &lt;code&gt;Array.prototype&lt;/code&gt; to work with arrays. Thank you for reading this article, I hope you enjoyed it. Any feedback will be much, much appreciated: good or bad ;)&lt;/p&gt;

</description>
      <category>arrays</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create a Simple Navbar with 7 Lines of CSS</title>
      <author>Supantha Paul</author>
      <pubDate>Sun, 31 Jan 2021 17:14:49 +0000</pubDate>
      <link>https://dev.to/supanthapaul/create-a-simple-navbar-with-7-lines-of-css-4h7f</link>
      <guid>https://dev.to/supanthapaul/create-a-simple-navbar-with-7-lines-of-css-4h7f</guid>
      <description>&lt;p&gt;Navbars are an essential part of any kind of website. I often see beginners write tons and tons of CSS rules to position the navbar elements, and more CSS to make that responsive. So in this article, I'm going to show how you can create a simple navbar with just 7 CSS rules and build upon that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-setup" class="anchor"&gt;
  &lt;/a&gt;
  HTML Setup
&lt;/h2&gt;

&lt;p&gt;Here's all the HTML that we're going to need to create the navbar. Note that I'm not using any classes for simplicity purposes but I recommend you to do so if you're planning to use this base for a project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Title&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this point, without any CSS, Your navbar should look something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ybzl4zAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wytzl1u88l82arlwlcw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ybzl4zAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wytzl1u88l82arlwlcw2.png" alt="Navbar unstyled"&gt;&lt;/a&gt;&lt;br&gt;
Yeah, not nice. Let's change that!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-setup" class="anchor"&gt;
  &lt;/a&gt;
  CSS Setup
&lt;/h2&gt;

&lt;p&gt;Before writing any CSS for the navbar, let's reset the padding and margin of our document and use a nicer font.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tahoma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#263238&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#styling-the-navbar" class="anchor"&gt;
  &lt;/a&gt;
  Styling the Navbar
&lt;/h2&gt;

&lt;p&gt;Let's get to a fun part! We're going to use Flexbox to align our elements. If you don't know what Flexbox is, it's a one-dimensional layout model that offers space distribution between items and powerful alignment capabilities. If you want to learn about flexbox, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox"&gt;this&lt;/a&gt; is a great resource.&lt;br&gt;
Here are the 7 magic rules that is going to give us a good base to work with,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 1 */&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 2 */&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 3 */&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cfd8dc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 4 */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 5 */&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 6 */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 7! */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's how the navbar should look now,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZDDnJYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ru3qs2hidtk77iaakfrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZDDnJYa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ru3qs2hidtk77iaakfrp.png" alt="Navbar styled 1"&gt;&lt;/a&gt;&lt;br&gt;
Does it look finished? No. Is it responsive? No. But is this a good base to work with? Absolutely. You can now follow your website's design language and make it look like what you want.  &lt;/p&gt;

&lt;p&gt;For a starter, you can make the navbar links look a lot better just by removing the text-decoration and picking a better color like so,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0d47a1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aogjF88y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/quh5078gxyah1u5ba1hn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aogjF88y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/quh5078gxyah1u5ba1hn.png" alt="navbar styled 2"&gt;&lt;/a&gt;&lt;br&gt;
Much better, right?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#making-it-responsive" class="anchor"&gt;
  &lt;/a&gt;
  Making it responsive
&lt;/h2&gt;

&lt;p&gt;Don't worry, I'm not going to leave you hanging with an unresponsive navbar. Let's make it responsive!&lt;br&gt;
Normally for mobile devices, you'd want a hamburger menu that reveals the navbar links. But for simplicity purposes, let's stack the elements on mobile devices. We can do this with a simple media query like so,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* 
  Extra small devices (phones, 600px and down) 
*/&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is how it should look on smaller devices now,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SeRj4fTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s470bpvwh21huy7pknod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SeRj4fTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s470bpvwh21huy7pknod.png" alt="navbar mobile"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;As you can see, creating a navbar and making it responsive isn't all that hard. You can now go crazy and make it look very pretty. Let me know if you make something with this base!&lt;/p&gt;

&lt;p&gt;If you'd like to chat with me about anything technology or just say hi, you can &lt;a href="https://www.linkedin.com/in/supantha-paul-5977041b8/"&gt;Connect with me on LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/supanthapaul"&gt;Find me on Twiiter&lt;/a&gt;. My DMs are open!&lt;/p&gt;

&lt;p&gt;I'm leaving the full codepen project here if you want to see it in action, hope you liked it!&lt;br&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/supanthapaul/embed/jOVEwPY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I built my first MERN Stack app... </title>
      <author>Ozair</author>
      <pubDate>Sun, 31 Jan 2021 15:58:55 +0000</pubDate>
      <link>https://dev.to/truemail785/i-built-my-first-mern-stack-app-13lb</link>
      <guid>https://dev.to/truemail785/i-built-my-first-mern-stack-app-13lb</guid>
      <description>&lt;p&gt;Hello developers!&lt;br&gt;
I have  taught myself &lt;strong&gt;MERN Stack developement&lt;/strong&gt;. And to put my skills to test, I started working on my basic full stack project. The idea was to build a &lt;strong&gt;&lt;em&gt;buy and sell&lt;/em&gt;&lt;/strong&gt; website which included &lt;strong&gt;&lt;em&gt;CRUD operations&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;user authentication&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
I am going to briefly describe my process to build the application from scratch.&lt;br&gt;
But if don't have interest in the the process, you can visit the website &lt;a href="https://ozcom.herokuapp.com"&gt;by clicking on this link&lt;/a&gt;.&lt;br&gt;
&lt;strong&gt;NOTE-&lt;/strong&gt; If you are using &lt;strong&gt;Chrome&lt;/strong&gt;, then you will face issue in user authentication(i.e, logging in) due to &lt;a href="https://www.admonsters.com/what-are-googles-new-chrome-samesite-cookie-policies/#:~:text=Google%20won't%20officially%20commit,sites%20and%20potentially%20track%20users."&gt;google's new samesite cookie policy&lt;/a&gt;. Chrome will not store  third-party cookies unless you specify the sameSite attribute to None and secure attribute to true. More on that &lt;strong&gt;below&lt;/strong&gt;. &lt;br&gt;
It will easily work on all other browsers. I'hv tested it on &lt;em&gt;FireFox&lt;/em&gt; and &lt;em&gt;UC Browser&lt;/em&gt; and it worked fine. If you really want to open this link in chrome, then here are the steps to follow.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type &lt;strong&gt;&lt;em&gt;chrome://flags&lt;/em&gt;&lt;/strong&gt; in  &lt;strong&gt;&lt;em&gt;address bar&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Type &lt;strong&gt;&lt;em&gt;sameSite&lt;/em&gt;&lt;/strong&gt; in &lt;strong&gt;Search flags&lt;/strong&gt; field.&lt;/li&gt;
&lt;li&gt;Set options for both &lt;strong&gt;&lt;em&gt;SameSite by default cookies&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Cookies without SameSite must be secure&lt;/em&gt;&lt;/strong&gt; to &lt;strong&gt;&lt;em&gt;disabled&lt;/em&gt;&lt;/strong&gt;. And press &lt;strong&gt;Relaunch&lt;/strong&gt; button.
Thats it!
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2jpL2FD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mqv0ccxtma7sbu3720yd.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a temporary solution. But I'll fix this ASAP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#process" class="anchor"&gt;
  &lt;/a&gt;
  PROCESS
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-user-authentication" class="anchor"&gt;
  &lt;/a&gt;
  1. User Authentication:
&lt;/h4&gt;

&lt;p&gt;First of all, I started to work on user authentication with passport js. I already had worked with user authentication with passport before (for the project included in the course). But I was not feeling confident in using passportjs and different strategies to authenticate user. So after almost 3 days of coding and &lt;strong&gt;&lt;em&gt;stackoverflowing&lt;/em&gt;&lt;/strong&gt;, I had build a user authentication system using &lt;strong&gt;passport-local, passport-google , and passport-facebook&lt;/strong&gt; strategies.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-posting-ad" class="anchor"&gt;
  &lt;/a&gt;
  2. Posting Ad:
&lt;/h4&gt;

&lt;p&gt;And then I started working on the front-end side to add &lt;strong&gt;post&lt;/strong&gt; functionality. The &lt;strong&gt;problem&lt;/strong&gt; I faced at that step was &lt;strong&gt;storing images&lt;/strong&gt; on the server. I considered uploading images to mongodb, but it was too complex. And I didn't wanted to waste more time on that. And I also thought that it is gonna be heavy processing on the server side(i am not sure). So after looking for other solutions, I came across a website called &lt;a href="https://cloudinary.com/documentation/node_integration"&gt;cloudinary&lt;/a&gt;. Cloudinary provides images and video upload, transformation, optimization, and delivery capabilities. And it was easy to implement in my application. And my problem was fixed :) &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-other-crud-operations" class="anchor"&gt;
  &lt;/a&gt;
  3. Other CRUD operations:
&lt;/h4&gt;

&lt;p&gt;Then I implemented CRUD operations. Now user can also &lt;em&gt;edit&lt;/em&gt; and &lt;em&gt;delete&lt;/em&gt; the ad. And I also worked on the front-end stuff. It took a while.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-hosting-the-website" class="anchor"&gt;
  &lt;/a&gt;
  4. Hosting the website:
&lt;/h4&gt;

&lt;p&gt;The real problem raised when I hosted the website online. Since I was hosting &lt;strong&gt;front-end&lt;/strong&gt; and &lt;strong&gt;backend&lt;/strong&gt; differently. I could not access data with my APIs due to cross origin policy. I fixed the issue by adding cors middleware and app started working fine on Firefox browser. But for some reason, chrome was not storing cookies sent by express session. I spent full 3 days on stackoverflow looking for the solution. Then I came to know about the google's new sameSite cookie policy, which stated that the sameSite and secure cookie attributes should be set to "none" and true in order to store third-party cookies in chrome. But it did not work for me. I also tried changing secure attribute to "auto" and other combinations. But I am not able to figure out why it isn't working. Then I disabled the sameSite setting in chrome for testing purpose and it worked fine. I'll try to fix the issue.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-search-functionality" class="anchor"&gt;
  &lt;/a&gt;
  5. Search Functionality:
&lt;/h4&gt;

&lt;p&gt;Last step was to add search functionality. I added basic and advanced search functionality. And then I did the rest of the front-end work.&lt;/p&gt;

&lt;p&gt;And here is the &lt;a href="https://ozcom.herokuapp.com"&gt;end result&lt;/a&gt;. It might not be very impressive for you but I think I did a pretty good job. I am not an experienced MERN Stack developer. And I learnt all this by myself(online). I think it is important to be around programmers community to grow  faster. It is not easy to be self taught. I quit coding a few times because I started going to college. I want to drop out of college. But it is not easy for me. I am in my first semester. I Hope I'll be able to continue my coding journey.&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Easy-Peazy Node Dependencies in AWS Lambda Using Layers</title>
      <author>Katherine</author>
      <pubDate>Sun, 31 Jan 2021 14:37:19 +0000</pubDate>
      <link>https://dev.to/krlyric/easy-breezy-lambda-dependencies-using-layers-2n3c</link>
      <guid>https://dev.to/krlyric/easy-breezy-lambda-dependencies-using-layers-2n3c</guid>
      <description>&lt;p&gt;Do &lt;code&gt;"Cannot find module Runtime.ImportModuleError"&lt;/code&gt; errors have you down?&lt;/p&gt;

&lt;p&gt;I honestly thought one of the big selling points of AWS Lambdas were that they were super fast to spin up. But what is a NodeJs method without some npm/yarn dependencies? Kidding, but I was disappointed to find out that there wasn't an easy way to run &lt;code&gt;npm install&lt;/code&gt; and keep editing my handler function in the AWS Lambda code editor.&lt;/p&gt;

&lt;p&gt;There is a way: &lt;em&gt;&lt;strong&gt;layers&lt;/strong&gt;&lt;/em&gt;. Using &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html"&gt;layers&lt;/a&gt; in Lambda functions allows for importing NodeJs dependencies via the AWS code editor UI. These are the steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-compress-dependencies"&gt;Compress Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-create-a-layer"&gt;Create a Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-attach-layer-amp-deploy-lambda"&gt;Attach Layer &amp;amp; Deploy Lambda&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#1-compress-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  1. Compress Dependencies
&lt;/h2&gt;

&lt;p&gt;The goal of this step is to end up with a zipped archive of the node_modules folder with just the dependencies you'll need for your lambda.&lt;/p&gt;

&lt;p&gt;Start by creating an empty directory named &lt;code&gt;nodejs&lt;/code&gt; and then run &lt;code&gt;npm init&lt;/code&gt; inside of it by running these commands line-by-line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;nodejs

&lt;span class="nb"&gt;cd &lt;/span&gt;nodejs

&lt;span class="nb"&gt;touch &lt;/span&gt;index.js

npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you have the directory, install dependencies that your Lambda will need using &lt;code&gt;npm i --save ...&lt;/code&gt; (I'm using &lt;code&gt;haikunator&lt;/code&gt; as an example):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save&lt;/span&gt; haikunator
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then require/export the dependencies in the main file of your project. Do this by writing &lt;code&gt;exports.exampleDependency = require('example-dependency')&lt;/code&gt; for each dependency you have in the project.&lt;/p&gt;

&lt;p&gt;You can just write the export statement in the index.js file directly, or run the below statement via CLI (of course substituting &lt;code&gt;haikunator&lt;/code&gt; for your own dependency).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; index.js
exports.haikunator &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'haikunator'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Final index.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;haikunator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;haikunator &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's the hard part! Now you need to zip up the folder with index.js/ package.json/ node_modules. This is what your directory structure should look like before it is zipped up:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyhbDfGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qjlv41o47wni3nm50rv8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyhbDfGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qjlv41o47wni3nm50rv8.PNG" alt="Index, package.json and node_modules in a folder" width="300"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-create-a-layer" class="anchor"&gt;
  &lt;/a&gt;
  2. Create a Layer
&lt;/h2&gt;

&lt;p&gt;Once you've zipped the files, go to Lambda &amp;gt; Layers in the AWS UI. Create a new layer (independent of your Lambda function - that part comes later) named whatever you want with &lt;code&gt;Node.js&lt;/code&gt; as the compatible runtime. Upload your &lt;code&gt;nodejs.zip&lt;/code&gt; archive as the layer code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJ4g-UZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/okbaba320d9qd44eislq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJ4g-UZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/okbaba320d9qd44eislq.PNG" alt="Creating a layer in AWS UI" width="100%"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-attach-layer-amp-deploy-lambda" class="anchor"&gt;
  &lt;/a&gt;
  3. Attach Layer &amp;amp; Deploy Lambda
&lt;/h2&gt;

&lt;p&gt;This is the last step and is the part that links the dependencies to your Lambda. Either create a new Lambda function or navigate to an existing one. Click on &lt;em&gt;&lt;em&gt;"layers"&lt;/em&gt;&lt;/em&gt; in the designer section of the UI and go to &lt;em&gt;&lt;em&gt;"Add a Layer."&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TOM0c53K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3txn9pm0rw8mr8zhl14t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TOM0c53K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3txn9pm0rw8mr8zhl14t.PNG" alt="Editing layers for your Lambda" width="100%"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Add Layer screen will show something like the below. Choose &lt;em&gt;&lt;em&gt;Custom Layers&lt;/em&gt;&lt;/em&gt; and the layer created in the previous step (the one where &lt;code&gt;nodejs.zip&lt;/code&gt; was uploaded) will appear in the dropdown. Click "add" and you're good to go!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QAkWrWat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xnnth6iswkawj4p4pm3k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QAkWrWat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xnnth6iswkawj4p4pm3k.PNG" alt="Add your created layer to your Lambda handler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the npm/yarn dependencies are available to use in the Lambda code editor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Quick tip:&lt;/strong&gt;&lt;/strong&gt; if you followed the steps and named the zip file as directed, dependencies can be accessed via &lt;code&gt;require('dependencyName')&lt;/code&gt;.&lt;br&gt;
Otherwise, access your dependencies via the &lt;code&gt;/opt/nameOfZip&lt;/code&gt; path. For example: if you uploaded myDir.zip, use &lt;code&gt;require('/opt/myDir')&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is my example code living in the Lambda function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;haikunator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;haikunator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// if layer has custom zip name use the below&lt;/span&gt;
&lt;span class="c1"&gt;// const { haikunator } = require('/opt/nodejs');&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;haikunator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;haikunate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;tokenLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! Update Press the &lt;em&gt;&lt;em&gt;Deploy&lt;/em&gt;&lt;/em&gt; button to your heart's content and update code in the AWS editor. Happy layering!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>lambda</category>
      <category>dependencies</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Build Good Habits and Excel as a Junior Developer Part 7</title>
      <author>J3ffJessie</author>
      <pubDate>Sun, 31 Jan 2021 14:37:00 +0000</pubDate>
      <link>https://dev.to/vetswhocode/how-to-build-good-habits-and-excel-as-a-junior-developer-part-8-4jfc</link>
      <guid>https://dev.to/vetswhocode/how-to-build-good-habits-and-excel-as-a-junior-developer-part-8-4jfc</guid>
      <description>&lt;h1&gt;
  &lt;a href="#simply-irresistible" class="anchor"&gt;
  &lt;/a&gt;
  Simply Irresistible
&lt;/h1&gt;

&lt;p&gt;We as humans are prone to fall for exaggerated versions of reality. &lt;a href="https://www.imdb.com/title/tt1677720/"&gt;Ready Player One&lt;/a&gt; is a film that portrays this very well with a few extenuating circumstances added in.  We have gotten good at pushing our buttons.  Food is the best example to use for this.  We crave all the sugary and salty foods instead of healthy foods.  Most people will not stick to any keto diets or vegetarian diets because some of the foods in those diets lack the salty sweetness of the foods that they were previously eating.  We will also choose to overeat because those foods are available.  Don't need the extra cookie, but hey it's here so why not.  This behavior is counter to our original wiring of hunting for our survival food.  Foods that are high in dynamic contrast keep the experience interesting which encourages us to eat more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#irresistible-habits" class="anchor"&gt;
  &lt;/a&gt;
  Irresistible Habits
&lt;/h2&gt;

&lt;p&gt;To increase the odds that a behavior will occur we need to make it attractive.  Now we learn how to make them &lt;em&gt;Irresistible&lt;/em&gt;.  It is &lt;em&gt;&lt;em&gt;not&lt;/em&gt;&lt;/em&gt; possible to turn every single habit into a super-powerful stimulus, but we can make any of our habits more enticing.  To do so, we have to understand what a craving is and how it works.  The first stop is a biological signature that all habits share =&amp;gt; &lt;strong&gt;The Dopamine Spike&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dopamine-spike" class="anchor"&gt;
  &lt;/a&gt;
  The Dopamine Spike
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--obG1ffis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AjKu1MAaSWGWlXch9" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--obG1ffis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AjKu1MAaSWGWlXch9" alt="The Dopamine Spike"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To put Dopamine into perspective of how vital it is, in 1954 neuroscientists James Olds and Peter Milner implanted electrodes into the brains of rats.  Using those electrodes, there were able to block the release of dopamine to the brain.  The tested rats lost all will to live.  Without Dopamine you will still enjoy things, you just won't desire to do them or want whatever it is.&lt;/p&gt;

&lt;p&gt;Our habits are a dopamine-driven feedback loop.  Every behavior that is highly habit-forming ie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;taking drugs&lt;/li&gt;
&lt;li&gt;eating junk food&lt;/li&gt;
&lt;li&gt;playing video games&lt;/li&gt;
&lt;li&gt;browsing social media&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;these habits are all associated with high levels of dopamine.  Dopamine plays a very central role in many of our neurological processes,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;motivation&lt;/li&gt;
&lt;li&gt;learning &amp;amp; memory&lt;/li&gt;
&lt;li&gt;punishment &amp;amp; aversion&lt;/li&gt;
&lt;li&gt;voluntary movement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For habits, the big thing to know is, Dopamine is released not only when you &lt;em&gt;experience&lt;/em&gt; pleasure, but also when you &lt;em&gt;anticipate&lt;/em&gt; it.  The anticipation of getting a reward, &lt;em&gt;&lt;em&gt;not&lt;/em&gt;&lt;/em&gt; actually getting the reward that gets us to take action. These insights show the importance of the 2nd Law of Behavior Change.  We make our habits attractive because the anticipation of the reward motivates us to act in the first place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#temptation-bundling" class="anchor"&gt;
  &lt;/a&gt;
  Temptation Bundling
&lt;/h2&gt;

&lt;p&gt;Temptation bundling works by linking an action you &lt;em&gt;want&lt;/em&gt; to do, with an action that you &lt;em&gt;need&lt;/em&gt; to do.  You are more likely to find a behavior attractive if you get to do one of your favorite things at the same time.  I &lt;em&gt;need&lt;/em&gt; to finish painting the living room, I &lt;em&gt;want&lt;/em&gt; to listen to the new Nickelback album (kidding...nobody listens to Nickelback). So you bundle that together and only listen to the new album while you are painting the living room.&lt;/p&gt;

&lt;p&gt;Temptation bundling is one easy way to apply a psychological theory known as &lt;a href="https://link.springer.com/referenceworkentry/10.1007%2F978-1-4419-1698-3_1165"&gt;Premack's Principle&lt;/a&gt; this principle states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;More probable behaviors will reinforce less probable behaviors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can go another step further and combine Temptation Bundling with &lt;a href="https://dev.to/vetswhocode/how-to-build-good-habits-and-excel-as-a-junior-developer-part-4-make-it-obvious-3fh5"&gt;Habit Stacking&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;After I [current habit], I will [habit I need].&lt;/p&gt;

&lt;p&gt;After [habit I need], I will [habit I want].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eventually, with enough iterations you will look forward to the new habit you &lt;em&gt;need&lt;/em&gt; because you will get to do the habit that you &lt;em&gt;want&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#up-next" class="anchor"&gt;
  &lt;/a&gt;
  Up Next
&lt;/h2&gt;

&lt;p&gt;So far this has been a very internal and solo adventure, so in the next article, we will go over the role that your family and friends can play to help you along the route of forming your new habits.  Thanks again to all of you that read my articles, please don't hesitate to comment or connect to me through social media, I am &lt;a class="comment-mentioned-user" href="https://dev.to/j3ffjessie"&gt;@j3ffjessie&lt;/a&gt;
 on Twitter. &lt;/p&gt;

</description>
      <category>junior</category>
      <category>javascript</category>
      <category>programmer</category>
      <category>habits</category>
    </item>
    <item>
      <title>Understanding Rendering in React ♻ ⚛️</title>
      <author>Mateo Garcia</author>
      <pubDate>Sun, 31 Jan 2021 14:34:20 +0000</pubDate>
      <link>https://dev.to/teo_garcia/understanding-rendering-in-react-i5i</link>
      <guid>https://dev.to/teo_garcia/understanding-rendering-in-react-i5i</guid>
      <description>&lt;p&gt;Hey there! 👋🏼&lt;/p&gt;

&lt;p&gt;I'm Mateo Garcia, I co-organize a community in Medellin, Colombia called React Medellin. This year I started a series of posts called 'Coding with Mateo'; My first post was about &lt;a href="https://dev.to/teo_garcia/6-ways-to-write-a-react-component-ts-included-2k42"&gt;6 ways to write a React component&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDImMgOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sowd5c0xwoinpbaxaza4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDImMgOG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sowd5c0xwoinpbaxaza4.png" alt="Coding with Mateo billboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I want to share with you what I have researched for a couple of weeks about how rendering works in React. To begin with, I will say that the concept of rendering in React is a little different from how we know it. Let's find out why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;p&gt;1.&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;br&gt;
2.&lt;a href="#virtualdom"&gt;VirtualDOM&lt;/a&gt;&lt;br&gt;
3.&lt;a href="#render"&gt;Render&lt;/a&gt;&lt;br&gt;
4.&lt;a href="#reconciliation"&gt;Reconciliation&lt;/a&gt;&lt;br&gt;
5.&lt;a href="#commit"&gt;Commit&lt;/a&gt;&lt;br&gt;
6.&lt;a href="#example"&gt;An example&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;You are probably here because you have worked with React, interacted with their APIs, changed the state of your components, and seen the magic happen. However, it is sometimes useful to go into a little more detail about how React does what it does. Performance problems can appear when your React application is continuously re-rendering, the application has scaled considerably and, the components are complex and expensive to represent. That's why &lt;code&gt;Understanding rendering in React&lt;/code&gt; is something that all of us who use this library should understand.&lt;/p&gt;

&lt;p&gt;To understand why React is so fast it is important to know these four concepts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Virtual DOM.&lt;/li&gt;
&lt;li&gt;Render.&lt;/li&gt;
&lt;li&gt;Reconciliation.&lt;/li&gt;
&lt;li&gt;Commit.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's get started&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#virtualdom" class="anchor"&gt;
  &lt;/a&gt;
  VirtualDOM
&lt;/h2&gt;

&lt;p&gt;The Virtual DOM was a strategy that appeared to solve the modifications or mutations that the DOM suffers when using a web or mobile application. Rendering the entire document tree is too costly as applications become more complex; by mutations, we can understand any change that the DOM can undergo: an insertion/modification/deletion of an element or its properties.&lt;/p&gt;

&lt;p&gt;Thus, the Virtual DOM came to represent the DOM tree in memory. Perform calculations using the state and props and finally decide which elements of the actual DOM (the browser one, I mean haha) should be mutated. From the &lt;a href="https://reactjs.org/docs/faq-internals.html"&gt;official React website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Initially, I said that the concept we normally know as rendering is different in React, I personally considered rendering as the procedure of synchronizing changes in the DOM. React synchronizes the changes in the DOM through three steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8w4-NrE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/csjl5onhxu99qhokbfjh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8w4-NrE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/csjl5onhxu99qhokbfjh.png" alt="Virtual DOM in a graphic"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#render" class="anchor"&gt;
  &lt;/a&gt;
  Render
&lt;/h2&gt;

&lt;p&gt;Rendering is a process that is triggered by a change of state in some component of your application, when a state change occurs React:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rulaPxWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9s7jqpadoijq32y5b1eo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rulaPxWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9s7jqpadoijq32y5b1eo.png" alt="React render phase illustration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It will collect from the root of your App all the components that requested a re-render because their state or their props changed.&lt;/li&gt;
&lt;li&gt;It will invoke these components

&lt;ol&gt;
&lt;li&gt;If you use &lt;code&gt;function components&lt;/code&gt; it will invoke the function itself, something like &lt;code&gt;Header(props)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you use &lt;code&gt;class components&lt;/code&gt; it will invoke &lt;code&gt;YourComponent.render()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even when the process's name is rendering, at this point, the DOM has not been modified or altered, which could be a little tricky if you think as I did, about the meaning of render.&lt;/p&gt;

&lt;p&gt;Since we normally use &lt;code&gt;JSX&lt;/code&gt;, the code will be transformed to &lt;code&gt;React.createElement(...)&lt;/code&gt;. The output of the &lt;code&gt;createElement&lt;/code&gt; will describe how the application should look like in the next version of the render through the next stage called:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reconciliation" class="anchor"&gt;
  &lt;/a&gt;
  Reconciliation
&lt;/h2&gt;

&lt;p&gt;Once the re-rendering has happened, React has the context of two versions of the &lt;code&gt;React.createElement&lt;/code&gt; output, the version executed before the state change occurred, and the version executed after the state has changed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WO9HqQdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b2efk1nj6yhl83jou5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WO9HqQdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5b2efk1nj6yhl83jou5i.png" alt="Reconcilier process illustration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point two objects are describing the UI, React through a heuristic algorithm of order O(n^3) will be able to determine which elements need to be represented again.&lt;/p&gt;

&lt;p&gt;Among technical details the React team tells us some aspects about how React identifies which elements were affected:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Elements that changed type must be recreated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes within the attributes of an element are replaced, without unmounting the element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upgrades within the element's children recreate all children&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updates within child elements that use &lt;code&gt;key&lt;/code&gt; as attributes are compared and only new items are represented.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#commit" class="anchor"&gt;
  &lt;/a&gt;
  Commit
&lt;/h2&gt;

&lt;p&gt;After React calculated all the changes that should be made in the application tree, &lt;code&gt;react-dom&lt;/code&gt; appears for the browser and &lt;code&gt;react-native&lt;/code&gt; for the mobile platforms, which make the modifications to the browser or mobile app API (finally! 🥳). Synchronously React will clean up the past layout effects, run the new layout effects, then the browser will paint the DOM, after that, React will clean up the past effects and mount the new ones; when I talk about effects I refer to the lifecycles method such as &lt;a href="https://reactjs.org/docs/hooks-reference.html#uselayouteffect"&gt;useLayoutEffect&lt;/a&gt; and &lt;a href="https://reactjs.org/docs/hooks-reference.html#useeffect"&gt;useEffect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWg-G05---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9pswc5zt2psdqbgiq8oa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWg-G05---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9pswc5zt2psdqbgiq8oa.png" alt="Commit phase illustration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To explain the lifecycles method part a little bit more, I bring to you this wonderful graph that Donavon West and his contributors created. This is the project &lt;a href="https://github.com/donavon/hook-flow"&gt;repo&lt;/a&gt;, check it out!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gb81aRyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rexqxdys2yzjq7m178ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gb81aRyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rexqxdys2yzjq7m178ba.png" alt="React Hooks lifecycle methods flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before moving on to the example, it is important to understand that under normal conditions, if a component calls &lt;code&gt;render&lt;/code&gt;, it will automatically do so for all its children. However it is possible to prevent certain components from being re-rendered under certain special cases, I have in my plans to talk about it, however, you can read about &lt;code&gt;React.PureComponent&lt;/code&gt;, &lt;code&gt;React.memo&lt;/code&gt;, &lt;code&gt;React.useMemo&lt;/code&gt;, and &lt;code&gt;React.useCallback&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Consider the following example.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dIMaHnGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hnrnb18jxqolmu2vuffb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dIMaHnGk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hnrnb18jxqolmu2vuffb.png" alt="Rendering example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRenderTimes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomHEX&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;16777215&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRenderTimes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Header component has re-rendered &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; times&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getRandomHEX&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRenderTimes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Footer component has re-rendered &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; times&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRenderTimes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hey, nice to see you again 👋🏼&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The App component has re-rendered &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; times&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Footer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;useRenderTimes&lt;/code&gt; is a hook that will allow us to accumulate the number of times a component is re-rendered. I saw it in a &lt;a href="https://kentcdodds.com/blog/how-to-optimize-your-context-value"&gt;post&lt;/a&gt; by Kent C Dodds, so thanks!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useRenderTimes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;renderRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;renderRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRenderTimes&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt; component has its own state, which will be changing once we start pressing the button. Let's take a look&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TtBPzwyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9fwem222jn8vn08ywsin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TtBPzwyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9fwem222jn8vn08ywsin.png" alt="Rendering example in the second render"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What just happened here is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An event in the &lt;code&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt; component triggered a state change. A render was scheduled.&lt;/li&gt;
&lt;li&gt;VirtualDOM started analyzing which components were marked as needing to be re-rendered. Only &lt;code&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt; needed it.&lt;/li&gt;
&lt;li&gt;Through the reconciliation step, it was identified that the style of the &lt;code&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;&lt;/code&gt; was changing.&lt;/li&gt;
&lt;li&gt;Dispatched a commit to DOM.&lt;/li&gt;
&lt;li&gt;Boom, we see the change of the background color.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h3&gt;

&lt;p&gt;Although rendering in React is a process that can become complex, we must recognize the excellent work done by the entire React Team to improve the day to day experience in web development. Knowing the deeper parts of a tool can be useful for people who are just starting to discover it, as well as for people who have been using it for a long time and want to understand what was going on behind the scenes.&lt;/p&gt;

&lt;p&gt;I want to thank the experts who continually strive to share all the knowledge in the most understandable way possible, some of them are &lt;a href="https://blog.isquaredsoftware.com/"&gt;Mark Erikson&lt;/a&gt; and &lt;a href="https://kentcdodds.com/blog/"&gt;Kent C Dodds&lt;/a&gt;. I leave you the link to their blogs. Each article is a gold mine and needs to be recognized.&lt;/p&gt;

&lt;p&gt;If you found this post useful and would like to see more content, you could react to this post, which would make me very happy. If you have any comments or corrections that could improve this post, I would be glad to receive them. Thank you for your time 👋🏼 💙.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>reactnative</category>
    </item>
  </channel>
</rss>
