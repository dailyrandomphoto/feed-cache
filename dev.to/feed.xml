<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>12 Tools Web Developers can Learn in 2022</title>
      <author>javinpaul</author>
      <pubDate>Fri, 03 Dec 2021 05:51:09 +0000</pubDate>
      <link>https://dev.to/javinpaul/12-tools-web-developers-can-learn-in-2022-3ia9</link>
      <guid>https://dev.to/javinpaul/12-tools-web-developers-can-learn-in-2022-3ia9</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, It's a popular saying that a craftsman is as good as his tools and the same goes for Web Developers, both frontend and backend developers. &lt;/p&gt;

&lt;p&gt;If you don't know your tools, you will struggle in your day-to-day job. At the same time, knowing your tool well can increase your productivity and help you become a star developer in your team. &lt;/p&gt;

&lt;p&gt;That's why I always in search of new tools which can make my developer life easy. Earlier, I have shared the &lt;a href="https://javarevisited.blogspot.com/2019/02/10-tools-advanced-java-developers-should-know.html"&gt;best tools for Java developers&lt;/a&gt; and In this article, I am going to share some of the most essential tools for Web developers, both frontend and backend developers. &lt;/p&gt;

&lt;p&gt;These are the tools and libraries which I use in my day-to-day life for web development, primarily backend and server side development, and there is a good chance that you may already be familiar with most of them, which is great.&lt;/p&gt;

&lt;p&gt;The point here is to learn more about those tools so that you can use them effectively and take your Web development skills to the next level. &lt;/p&gt;

&lt;p&gt;There is also a lot of articles on the internet about web development tools and technology, but most of them are filled with non-practical information like &lt;a href="https://javarevisited.blogspot.com/2019/01/10-web-development-frameworks-fullstack-developer-should-learn.html"&gt;JavaScript framework&lt;/a&gt; and &lt;a href="https://www.java67.com/2019/01/top-10-javascript-frameworks-and-libraries-for-web-developers.html"&gt;libraries&lt;/a&gt;, which are not needed in day-to-day life.&lt;/p&gt;

&lt;p&gt;In Today's world, we are really lucky to have these powerful tools which can save a lot of time while developing, testing, debugging, deploying, and even scaling your application. &lt;/p&gt;

&lt;p&gt;I have been doing web development when "View Source" on IE and JavaScript alert() was our only source for browser-based debugging. Today, you have powerful tools like Chrome Developer Tool and Firebug for such things.&lt;/p&gt;

&lt;p&gt;If you are looking to become a better Web Developer in 2022 and ready to level up your skill learning these tools will go a long way in improving both your skill and productivity. I have also shared the best resources and online courses to learn these tools and you can use them for further learning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-web-development-bootcamp%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ax2NIZe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-UJV5bk60F78/YLmuiE71sMI/AAAAAAAAoCM/-9_AQOsiYR0-SKWPrvoX6YWIhYUvNUGpgCLcBGAsYHQ/w423-h238/image.png" alt="best web development tools for beginners " width="423" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-essential-tools-for-frontend-and-backend-developers-can-learn-in-2022"&gt;
  &lt;/a&gt;
  12 Essential Tools for Frontend and Backend Developers can Learn in 2022
&lt;/h2&gt;

&lt;p&gt;I have initially planned to share just 10 tools but the list has grown and I have added two more tools to the list. To be honest, there are a lot more tools and alternatives of each tool available but learning all of them is not possible, it's not practical at all, hence learning just one tool from each category like &lt;a href="https://javarevisited.blogspot.com/2018/09/top-5-courses-to-learn-intellij-idea-java-and-android-development.html#axzz6A8Vy1sea"&gt;IDE&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/01/10-unit-testing-and-integration-tools-for-java-programmers.html"&gt;Testing tool&lt;/a&gt;, debugging tool, and &lt;a href="https://javarevisited.blogspot.com/2020/11/why-devops-engineer-learn-docker-kubernetes.html#axzz6dXsEfLvJ"&gt;containers&lt;/a&gt; are enough.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Anyway, if you come across any other handy tool which can really boost Web developer's productivity, feel free to share with us and I'll add that to this list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Without wasting any more of your time, here is my list of some of the most essential tools for frontend and backend developers to learn in 2022:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-vs-code"&gt;
  &lt;/a&gt;
  1. VS Code
&lt;/h3&gt;

&lt;p&gt;This is the single most important tool for a Web developer in 2022. I have been doing web development for quite a long and have used many IDEs and Editors like Atom, Sublime, &lt;a href="https://medium.com/javarevisited/10-best-eclipse-plugins-for-java-and-spring-boot-development-e814305831cb"&gt;Eclipse&lt;/a&gt;, and &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-intellij-idea-for-beginners-and-experienced-java-programmers-2e9aa9bb0c05"&gt;IntelliJIDEA&lt;/a&gt; but VS Code is something else. &lt;/p&gt;

&lt;p&gt;It's both lightweight and powerful. Initially, it comes with a basic feature but you can customize it for your need by downloading extensions.&lt;/p&gt;

&lt;p&gt;There are so many VS extensions available ranging from debugging, connecting to git, deploying into the cloud, like &lt;a href="https://medium.com/javarevisited/5-best-azure-fundamentals-courses-to-pass-az-900-certification-exam-in-2020-9e602aea035d"&gt;Azure&lt;/a&gt; and &lt;a href="https://medium.com/javarevisited/top-10-cloud-certification-to-aim-in-2022-aws-azure-and-google-cloud-platform-bd054fff0538"&gt;AWS&lt;/a&gt;, and much more. &lt;/p&gt;

&lt;p&gt;There is a good chance that you already familiar with VS Code but if you don't I strongly suggest you learn VS Code in 2022. And if you need a tutorial or a course, I would suggest you check this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fvisual-studio-code-tutorial%2F"&gt;Visual Studio Code Tutorial - Getting Started With VS Code&lt;/a&gt;&lt;/strong&gt; course on Udemy for more details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fvisual-studio-code-tutorial%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rW0eS2vH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-XoTFQYx5Ifs/YLmu0fJJAeI/AAAAAAAAoCY/pgdbMfxUGz8qA45mTmIrVoEvXj69Bi1QQCLcBGAsYHQ/w384-h198/logo.png" alt="best courses to learn VS code for web developers" width="384" height="198"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-chrome-developer-tools"&gt;
  &lt;/a&gt;
  2. Chrome Developer Tools
&lt;/h3&gt;

&lt;p&gt;This is another essential tool for Web Developers. It let you see what's going on in the browser. By using Chrome developer tools you can examine different HTML elements, can play with &lt;a href="https://javarevisited.blogspot.com/2020/09/top-5-css-cascading-style-sheet-courses-for-beginners.html"&gt;CSS&lt;/a&gt;, and also check JavaScript.&lt;/p&gt;

&lt;p&gt;It also lets you see a lot more details about downloaded scripts, network connections, and so on. It's a great tool for browser-based debugging, particularly for frontend developers and you should learn it in 2022.&lt;/p&gt;

&lt;p&gt;If you need a tutorial or course, check out this &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmaster-google-chrome-developer-tools%2F"&gt;&lt;strong&gt;DevTools Course on Udemy&lt;/strong&gt;&lt;/a&gt; to learn more. &lt;/p&gt;

&lt;p&gt;If you need an alternative, Firebox has firebug which is also a good tool for debugging web pages in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2020/10/best-frontend-skills-web-developer.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lYlmcLho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-KRerpQ_8jvM/YLmwfg2DoFI/AAAAAAAAoDs/ofNqVGpibMc5YNKZdKLFUERCU7sGGbcoQCLcBGAsYHQ/1904450_51db_3-750x405.jpg" alt="best course to learn Chrome Developer tool" width="512" height="276"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-postman"&gt;
  &lt;/a&gt;
  3. Postman
&lt;/h3&gt;

&lt;p&gt;Modern Web development is all about APIs and Postman is a great tool to interact with those APIs. During development, if you want to get familiar with a third-party library, you can use &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-postman-tutorials-and-courses-for-web-developers.html"&gt;Postman&lt;/a&gt; to interact with it like you can send GET and POST requests, set request headers, examine response headers, and other HTTP metadata.&lt;/p&gt;

&lt;p&gt;Postman is also very useful for REST API testing and that's why it's an essential tool for both frontend and backend developers. &lt;/p&gt;

&lt;p&gt;I strongly suggest you learn Postman in 2022 and if you need a resource, I would suggest checking this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpostman-the-complete-guide%2F"&gt;Postman: The Complete Guide - REST API Testing on Udemy&lt;/a&gt;&lt;/strong&gt; by Valentine Despa.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpostman-the-complete-guide%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3EHSp0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-eoIFbhxbiz4/YLmvoRrGhAI/AAAAAAAAoC0/ov4OJZ5h2_4KaeLP8fBN5GWbLCPOAAwLgCLcBGAsYHQ/image.png" alt="best course to learn Postman for beginners " width="512" height="295"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-docker"&gt;
  &lt;/a&gt;
  4. Docker
&lt;/h3&gt;

&lt;p&gt;Containers are essential for modern web developers. Containers not only make development easier but also makes deployment smoother. Instead of deploying your application and its dependencies separately, you deploy a container, which is both easier to manage and scale. And, any discussion of containers is incomplete without talking about &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-learn-docker-and-kubernetes-for-devops.html"&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is one of the most popular container platforms for developers and a must-know tool for Web Developers. &lt;/p&gt;

&lt;p&gt;Whether you are a frontend developer or a backend geek, I strongly suggest you learn Docker in 2022 and if you need resources this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-kubernetes-the-practical-guide%2F"&gt;Docker &amp;amp; Kubernetes: The Practical Guide&lt;/a&gt;&lt;/strong&gt; by Maximilian Schwarzmuller of AcadMind on Udemy is the best course to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-learn-docker-and-kubernetes-for-devops.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vSIGPWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-EDvEbXHka9M/YLmv6DLtCkI/AAAAAAAAoDA/proaOG-F5PgMJH8MK6Q8x5c_GiAo5bFYgCLcBGAsYHQ/w452-h226/iStock-1144628524.jpg" alt="best course to learn Docker" width="452" height="226"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-gitbash"&gt;
  &lt;/a&gt;
  5. GitBash
&lt;/h3&gt;

&lt;p&gt;There are a lot of git clients available online, both GUI and command line but if you work in Windows and love to work in the command line then there is no better than Gitbash.&lt;/p&gt;

&lt;p&gt;Though &lt;a href="https://javarevisited.blogspot.com/2021/05/favorite-courses-to-learn-visual-studio-code-f.html"&gt;VS Code&lt;/a&gt; and other IDEs already provide Github integration, sometimes you prefer to work in the command line, particularly if you are committing a large block of code or merging changes from different branches.&lt;/p&gt;

&lt;p&gt;In Linux, it's easy to execute all those git commands but in Windows, it's a bit challenging and that's where Gitbash helps. &lt;/p&gt;

&lt;p&gt;If you want to learn more about Git and Github in general then you can also check out the new &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgit-and-github-bootcamp%2F"&gt;Git &amp;amp; Github Bootcamp course&lt;/a&gt;&lt;/strong&gt; by none other than Colt Steele, one of my favorite instructors on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2019/04/top-5-courses-to-learn-git-and-github.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kK4tOMBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-FuYuhDmx9bc/YLmwKTLgy4I/AAAAAAAAoDY/29GqBT53_AM8Of0ttn2HWegTa5v0i2lwACLcBGAsYHQ/w404-h215/intro.jpg" alt="best course to learn Git and Github" width="404" height="215"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-npm-node-package-manager"&gt;
  &lt;/a&gt;
  6. NPM (Node Package Manager)
&lt;/h3&gt;

&lt;p&gt;NPM stands for Node Package manager, It's the most important tool for web developers. While working on a web development project, you need to use and import a lot of other JavaScript frameworks and libraries like &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html#axzz5r06B3egD"&gt;React.js&lt;/a&gt; for UI, or &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-online-courses-to-learn-vue.js-best.html#axzz6gKWXwaTQ"&gt;Vue.js&lt;/a&gt; for frontend, Jest library for unit testing, and many more. NPM can do all that for you.&lt;/p&gt;

&lt;p&gt;It puts modules in place so that nodes can find them, and manages dependency conflicts intelligently. Most commonly, it is used to publish, discover, install, and develop node programs. Run npm help to get a list of available commands.&lt;/p&gt;

&lt;p&gt;If you want to learn more about NPM, you can also check out the &lt;strong&gt;&lt;a href="https://javarevisited.blogspot.com/2021/06/Understanding%20NPM%20-%20Node.js%20Package%20Manager"&gt;Understanding NPM - Node.js Package Manager course&lt;/a&gt;&lt;/strong&gt; by Bogdan Stashchuk on Udemy. It's a nice course to learn about NPM or Node package manager in detail.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-nodejs-and-express-js-online-courses-for-web-developers.html#axzz5VllnxgVT"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFZDzgQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-gMNOw2mLrdM/YLmwnB6ZkNI/AAAAAAAAoD0/tWz2FdFJPykXVairAt5527b0Eqxx_hP0wCLcBGAsYHQ/86d0f5769d.jpg" alt="best courses to learn NPM" width="512" height="284"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-webpack"&gt;
  &lt;/a&gt;
  7. Webpack
&lt;/h3&gt;

&lt;p&gt;Webpack is a build tool that puts all of your assets, including Javascript, images, fonts, and &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-html-5-and-css-3-courses-for-web-developers.html"&gt;CSS&lt;/a&gt;, in a dependency graph. Webpack lets you use require() in your source code to point to local files, like images, and decide how they're processed in your final Javascript bundle, like replacing the path with a URL pointing to a CDN.&lt;/p&gt;

&lt;p&gt;If you're building a complex frontend application with many non-code static assets such as CSS, images, fonts, etc, then yes, Webpack will give you great benefits. &lt;/p&gt;

&lt;p&gt;If you want to learn more then I suggest you check out **&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fwebpack-from-beginner-to-advanced%2F"&gt;Webpack 5: The Complete Guide For Beginners&lt;/a&gt; **on 'Udemy. It's a great course to learn about WebPack, Bable, NPM, and Node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/01/10-things-web-developers-should-learn.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fY8LvIs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-hxbUfnGpxRA/YLmwtsb-ucI/AAAAAAAAoD8/nY6fjpKzuPkYH7DPfK9pGaEi0dT4DOQFgCLcBGAsYHQ/image.png" alt="best course to learn WebPack" width="225" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#8-jasmine"&gt;
  &lt;/a&gt;
  8. Jasmine
&lt;/h3&gt;

&lt;p&gt;Jasmine is a user-behavior mimicker that allows you to perform test cases similar to user behavior on your website. Jasmine is useful for a testing frontend for visibility, click clarity as well as the responsiveness of the UI in different resolutions.&lt;/p&gt;

&lt;p&gt;Jasmine allows to automate user behavior with customs delays and wait time to simulate actual user behavior. &lt;/p&gt;

&lt;p&gt;If you want to learn more Check out this brilliant &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Funit-testing-your-javascript-with-jasmine%2F"&gt;Unit testing your JavaScript with Jasmine &lt;/a&gt;&lt;/strong&gt;online course on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2021/02/udemy-course-review-web-development-bootcamp-.html#axzz6rQaZvLlb"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--52U72xpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-8QiFWOPgUKg/YLmw0wcQHaI/AAAAAAAAoEM/XL7dyLVmI-wlusR4YP2vxDHCeVaC18DQQCLcBGAsYHQ/1200px-Logo_jasmine.svg.png" alt="best courses to learn Jasmine" width="512" height="510"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-jenkins"&gt;
  &lt;/a&gt;
  9. Jenkins
&lt;/h3&gt;

&lt;p&gt;Today, there is hardly any company or organization which doesn't use DevOps and CI/CD for their software development life cycle (SDLC) process, and Jenkins is the King of CI/CD tools.&lt;/p&gt;

&lt;p&gt;As a Web developer, it's essential for you to get familiar with &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-jenkins-and-ci-cd-for-devops-engineers-and-software-developers-df2de8fe38f3"&gt;Jenkins&lt;/a&gt; and understand how the Jenkins pipeline works and how to set up one for your project.&lt;/p&gt;

&lt;p&gt;If you want to learn more about Jenkins and DevOps I suggest you take a look at this **&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjenkins-from-zero-to-hero%2F"&gt;Jenkins, From Zero To Hero: Become a DevOps Jenkins Master&lt;/a&gt; **course on Udemy. &lt;/p&gt;

&lt;p&gt;This is a great course for both web developers and DevOps Engineers who want to learn about Jenkins in depth.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2018/09/top-5-jenkins-courses-for-java-and-DevOps-Programmers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4ztFeHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-_U9YPPm6dwA/YLmw7dr2c9I/AAAAAAAAoEU/lVrvC6HvWowZ6-PnI1IcNeTFfy3iC7ABQCLcBGAsYHQ/w416-h208/image.png" alt="best courses to learn Jenkins" width="318" height="159"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-cloud-aws-azure-or-gcp"&gt;
  &lt;/a&gt;
  10. Cloud (AWS, Azure, or GCP)
&lt;/h3&gt;

&lt;p&gt;Many of you already familiar with Cloud and Cloud computing platforms like &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-amazon-web-services-aws-courses-for-beginners-and-experienced-programmers.html"&gt;AWS&lt;/a&gt; (Amazon Web Service), &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-AZ-900-exam-Azure-Fundamentals-certification-practice-tests-and-mock-exams-to.html#axzz6iNNhKZui"&gt;Microsoft's Azure&lt;/a&gt;, and GCP (&lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-google-cloud-platform-gcp-courses-certifications-online.html"&gt;Google Cloud Platform&lt;/a&gt;), if you are not, make sure you learn one of them.&lt;/p&gt;

&lt;p&gt;Ideally, you should learn the one which your company is adopting. For example, if you are company is investing in Microsoft Azure, you should learn that to excel in your team and company by pioneering in migrating your project into the cloud.&lt;/p&gt;

&lt;p&gt;Similarly, if your company is migrating into GCP or Google Cloud platform then you should spend some time learning GCP. It's a great cloud platform, particularly for Machine learning, Artificial Intelligence, and Big Data companies. If your work has anything to do with &lt;a href="https://javarevisited.blogspot.com/2019/10/top-5-courses-to-learn-pandas-for-data-analysis-python.html"&gt;Python Pandas&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-tensorflow-and-machine-learning-courses-online-programmers.html"&gt;TensorFlow&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/top-5-advanced-deep-learning-and-neural-network-courses-to-learn-in-2020-a273f5eddca5"&gt;neural network&lt;/a&gt;, etc, learn GCP.&lt;/p&gt;

&lt;p&gt;If you are a freelancer or your company is not pushing for any cloud, learn AWS, it's the best general-purpose cloud platform and I believe, every web developer should learn it. &lt;/p&gt;

&lt;p&gt;If you need a resource, I suggest you check out the **Introduction to Cloud Computing on Amazon AWS for Beginners](&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-cloud-computing-on-amazon-aws-for-beginners%2F"&gt;https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-cloud-computing-on-amazon-aws-for-beginners%2F&lt;/a&gt;) **course by Neal Davis on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-aws-certified-cloud-practitioner-exam-certification-clf-c01.html#axzz6ILbx3NC7"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QqjZ7JVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-Rtkkb6nOnic/YLmw_5X9LKI/AAAAAAAAoEc/lWyKtPiBp0IXc4snJYaU-taGdOXoLFzpACLcBGAsYHQ/image.png" alt="best courses to learn cloud computing for beginners" width="290" height="174"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#11-kubernetes"&gt;
  &lt;/a&gt;
  11. Kubernetes
&lt;/h3&gt;

&lt;p&gt;When we talk about containers and Docker, Kubernetes also comes into the picture because it can help you in managing containers. It's easy to deploy one or two containers initially but when your application grows and more instances are required, it becomes difficult to manually deploy 100s of containers.&lt;/p&gt;

&lt;p&gt;It also becomes a headache to create new containers and take off unused ones, that's when Kubernetes comes to rescue you. It's a container management tool that can create, scale and manage containers for you. &lt;/p&gt;

&lt;p&gt;Along with Docker, I suggest you learn Kubernetes and if you need a resource, I would recommend Stephen Grider's &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-and-kubernetes-the-complete-guide%2F"&gt;&lt;strong&gt;Docker and Kubernetes Complete guide&lt;/strong&gt;&lt;/a&gt; course on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/06/top-5-courses-to-learn-kubernetes-for-devops-and-certification.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tAA8u5ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-45qNDCSr8Yo/YLmwCpzbUhI/AAAAAAAAoDM/oFkkwNxNR-gCwItjeiBg6QxD6O0_G0mCwCLcBGAsYHQ/107-1072041_kubernetes-logo-png-transparent-png.jpg" alt="best kubernetes courses for beginners" width="500" height="280"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#12-sass"&gt;
  &lt;/a&gt;
  12. Sass
&lt;/h3&gt;

&lt;p&gt;We already have 10 tools right? Yes, we are done, but if you want to learn just one more tool, I would suggest making it SASS. Many of you don't know what are SAAS and some of you might be thinking that is it the same as "SaaS" (Software as a Service) like Microsoft 365?&lt;/p&gt;

&lt;p&gt;Well No, Sass is a CSS preprocessor, which adds special features such as variables, nested rules, and mixins (sometimes referred to as syntactic sugar) into regular &lt;a href="https://medium.com/javarevisited/10-best-css-online-courses-for-beginners-and-experienced-developers-54aa2e8c0253"&gt;CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We all know that writing CSS is messy. More so when reviewing the code which other people have written. I find SASS is the answer to that. It helps you to write clean code which is readable.&lt;/p&gt;

&lt;p&gt;I strongly encourage Web Designers and frontend developers to take a look at SAAS in 2022 and If you need a resource to learn Saas, I recommend &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fadvanced-css-and-sass%2F"&gt;Advanced CSS and Sass: Flexbox, Grid, Animations, and More!&lt;/a&gt;&lt;/strong&gt; course by Jonas Schmedtmann on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2020/06/top-5-courses-to-learn-advanced-css.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJEYoJbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-9Nnd16ZOb6A/YLmxDWKKAfI/AAAAAAAAoEg/UmI3CcpcHaQHu8nUJUlKVWcKMDl_etvdQCLcBGAsYHQ/image.png" alt="best courses to learn Sass CSS pre processor" width="259" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about some of the &lt;strong&gt;12 best tools every web developer can learn in 2022&lt;/strong&gt; to improve their productivity and enjoy their web development journey. These tools not only make you more productive by offering connectivity and ease of doing but also help you to make the better web developer you always wanted to be.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always remember, a craftsman is as good as their tools so always strive for learning better, more advanced tools so that you can deliver more in less time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other &lt;strong&gt;Programming and Development Articles&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/11-essential-skills-software-developers-should-learn-in-2020-1bio"&gt;11 Essential Skills for Every Software Developer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/12/10-programming-languages-to-learn-in.html"&gt;10 Programming languages to Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2018/02/10-books-java-developers-should-read-in.html"&gt;10 Books Java Developers Should Read in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2020/09/top-10-cloud-certification-you-can-aim.html"&gt;10 AWS and Cloud Certifications to Aim in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/05/10-tips-to-become-better-java-developer.html"&gt;10 Tips to become a better Java Developer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-free-courses-to-learn-java-in-2019-22d1f33a3915"&gt;My favorite free courses to learn Java in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/06/top-6-spring-framework-online-courses-Java-programmers.html"&gt;Top 5 courses to learn Spring Framework in Depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/04/10-tools-java-developers-should-learn.html"&gt;10 Tools Every Java Developer Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/06/5-best-courses-to-learn-spring-boot-in.html"&gt;Top 5 Courses to learn Spring Boot in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html"&gt;The 2022 Java Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/01/10-frameworks-java-and-web-developers-should-learn.html"&gt;10 Frameworks for Java and Web Developer in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/01/top-20-libraries-and-apis-for-java-programmers.html"&gt;20 Libraries Java developer should know&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-maven-jenkins-and-docker-for-java-developers-51fa7a1e66f6"&gt;10 Free courses to learn Maven, Jenkins, and Docker&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you find these &lt;em&gt;best web development tools&lt;/em&gt; useful, please share them with your friends and colleagues. If you have any questions or feedback, please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you want to become a frontend and backend developer in 2022, then you can also check out &lt;a href="https://javarevisited.blogspot.com/2019/02/the-2019-web-developer-roadmap.html"&gt;&lt;strong&gt;The Web Developer RoadMap&lt;/strong&gt;&lt;/a&gt;, which also contains all the tech and resources you need to become a professional web developer.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>development</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Making Your Video More Accessible</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Fri, 03 Dec 2021 04:33:40 +0000</pubDate>
      <link>https://dev.to/unicodeveloper/making-your-video-more-accessible-1he5</link>
      <guid>https://dev.to/unicodeveloper/making-your-video-more-accessible-1he5</guid>
      <description>&lt;p&gt;The only way to build the web for everyone is to make web apps, including the related media (audio, images, videos), as accessible as possible for your entire audience. &lt;/p&gt;

&lt;p&gt;Visual media is instrumental in conveying information. Images pass on information in picture format. Videos take that to the next level. Concise videos, in particular, attract attention and effectively tell stories.&lt;/p&gt;

&lt;p&gt;However, video is only partially relevant to visually impaired users. Ditto deaf and hard-of-hearing people, who can absorb only half the content, not to mention those who speak a language different from that of the content.&lt;/p&gt;

&lt;p&gt;A solution to make images accessible is to add &lt;code&gt;&amp;lt;alt&amp;gt;&lt;/code&gt; text, but what about the &lt;a href="https://cloudinary.com/blog/audio_in_video_is_crucial_here_s_how_to_produce_high_quality_audio"&gt;audio in videos&lt;/a&gt;? You add subtitles and transcripts, which would also be welcome by those who are, say, watching the video next to a sleeping partner or who don’t want to wake up a child.&lt;/p&gt;

&lt;p&gt;With Cloudinary, you can enable people with hearing or visual challenges to engage with video and audio. This tutorial shows you how. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acquiring-the-prerequisites"&gt;
  &lt;/a&gt;
  Acquiring the Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow the steps in this tutorial, you need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A grasp of the basics of JavaScript.&lt;/li&gt;
&lt;li&gt;Adeptness with Node.js and Cloudinary. &lt;/li&gt;
&lt;li&gt;An ability &lt;a href="https://cloudinary.com/documentation/how_to_integrate_cloudinary"&gt;to integrate Cloudinary into Node.js apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A Cloudinary account. &lt;a href="https://cloudinary.com/users/register/free"&gt;Sign up&lt;/a&gt; for a free account if you don’t have one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;As a start, upload a video, such as &lt;a href="https://www.youtube.com/watch?v=fLeJJPxua3E"&gt;this one&lt;/a&gt; from YouTube. Follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the video to your computer.&lt;/li&gt;
&lt;li&gt;Create a project with a basic front end and back end to support media upload to the back end, e.g., to a Node.js server with Multer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To avoid storing copies of uploaded videos, upload them to Cloudinary with the [Cloudinary upload widget(&lt;a href="https://cloudinary.com/documentation/upload_widget"&gt;https://cloudinary.com/documentation/upload_widget&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Your back end contains this Cloudinary configuration and API route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const multer = require('multer')
const express = require('express')
const cors = require('cors')
const cloudinary = require('cloudinary').v2

require('dotenv').config()
const upload = multer({ dest: 'uploads/' })

cloudinary.config({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.API_KEY,
  api_secret: process.env.API_SECRET,
})

const app = express()

app.use(cors())

app.use(express.json())
app.post('/video/upload', upload.single('video'), uploadVideo)

function uploadVideo(req, res) {
  cloudinary.uploader.upload(
    req.file.path,
    {
      public_id: 'videos/video1',
      resource_type: 'video'
    },
    () =&amp;gt; {
      res.json({ message: 'Successfully uploaded video' })
    }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies and save the correct environment variables in a &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Replace the variables &lt;code&gt;CLOUD_NAME&lt;/code&gt;, &lt;code&gt;API_KEY&lt;/code&gt;, and &lt;code&gt;API_SECRET&lt;/code&gt; with the values from your account’s dashboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the front end, send the video to Cloudinary with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file"&gt;&lt;code&gt;file&lt;/code&gt; input&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#improving-video-accessibility"&gt;
  &lt;/a&gt;
  Improving Video Accessibility
&lt;/h2&gt;

&lt;p&gt;Cloudinary supports metadata for resources, including tags and subtitles for video. You can fetch videos from Cloudinary with integrated subtitles, which must originate from existing transcripts. That’s similar to the scenario whereby, while watching a video in a media player, you must show the player where to get the subtitles.&lt;/p&gt;

&lt;p&gt;Manually generating tags and subtitles can be tedious. A much more efficient alternative is to generate through Cloudinary in these two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create transcripts in various languages to cater to those who are hearing challenged or foreign to the video’s language.&lt;/li&gt;
&lt;li&gt;Generate and display tags that relate to the video for the visually impaired, including those who determine the video’s relevance with screen readers.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#leveraging-the-google-ai-video-transcription-addon"&gt;
  &lt;/a&gt;
  Leveraging the Google AI Video Transcription Add-On
&lt;/h2&gt;

&lt;p&gt;In conjunction with Google’s Speech-to-Text API, Cloudinary’s &lt;a href="https://cloudinary.com/addons#google_speech"&gt;Google AI Video Transcription add-on&lt;/a&gt; automatically generates transcripts for videos. As a result, when uploading or updating a video with Cloudinary’s API, you can create transcripts in the same folder as the video.&lt;/p&gt;

&lt;p&gt;Here are the steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cloudinary.com/addons#google_speech"&gt;Activate the add-on for your account&lt;/a&gt;. A free plan is available.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFsdKyX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/v1638486733/Google_AI_Video_Transcription_add-on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFsdKyX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/v1638486733/Google_AI_Video_Transcription_add-on.png" alt="Google_AI_Video_Transcription_add-on" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add to the Cloudinary &lt;code&gt;upload&lt;/code&gt; method the option &lt;code&gt;raw_convert&lt;/code&gt; in the &lt;a href="https://cloudinary.com/documentation/image_upload_api_reference"&gt;Upload API reference&lt;/a&gt;. &lt;code&gt;raw_convert&lt;/code&gt; asynchronously generates a file based on the uploaded file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that file, Google creates a transcript with the &lt;code&gt;google_speech&lt;/code&gt; value for the uploaded video. Here’s how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function uploadVideo(req, res) {
  cloudinary.uploader.upload(
    req.file.path,
    {
      public_id: 'videos/video2',
      resource_type: 'video',
      raw_convert: 'google_speech'
    },
    () =&amp;gt; {
      res.json({ message: 'Successfully uploaded video' })
    }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;videos&lt;/code&gt;/&lt;code&gt;video2&lt;/code&gt; value for &lt;code&gt;public_id&lt;/code&gt; identifies the video with subtitles. Assign any value as you desire and jot it down for use later.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go back to the front end and upload the same video. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cloudinary then generates another file in your account’s Media Library:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1MX0hGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto%2Cdpr_2.0/ML_video_audio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1MX0hGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto%2Cdpr_2.0/ML_video_audio.png" alt="Media Library" width="512" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;video2.transcript&lt;/code&gt; file reads as follows in a code editor:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fOiVKzp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_2_zx2erw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOiVKzp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_2_zx2erw.png" alt="Video 2 transcript" width="512" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above JSON structure shows that the line “If you only have 24 hours in a day, your success is dependent upon how you use the 24” is displayed between 0.1 and 7.3 seconds in the video.&lt;/p&gt;

&lt;p&gt;You can also generate the following:&lt;/p&gt;

&lt;p&gt;Other standard subtitle formats like SubRip (SRT) and VITec (VTT), which are supported by other media players. &lt;br&gt;
Other transcriptions in different languages, which would make the video’s audio accessible for more viewers. French, for example, has this &lt;code&gt;raw_convert&lt;/code&gt; value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
  raw_convert: 'google_speech:fr:BE'
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That code generates a &lt;code&gt;.transcript&lt;/code&gt; file with a French translation. &lt;code&gt;fr:BE&lt;/code&gt; denotes the language and region, Belgium French in this case. Google supports numerous languages and dialects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-subtitles-to-videos"&gt;
  &lt;/a&gt;
  Adding Subtitles to Videos
&lt;/h2&gt;

&lt;p&gt;Next, add subtitles to videos on request with video transformations. To do so , add a route on the back end for the uploaded video, which the generated &lt;code&gt;.transcript&lt;/code&gt; file transforms:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/video', getVideo)

function getVideo(req, res) {
  try {
    cloudinary.api.resource('videos/video2', {}, (err, result) =&amp;gt; {
      const video = cloudinary.video('videos/video2', {
        resource_type: 'video',
        type: 'upload',
        transformation: [
          {
            overlay: {
              resource_type: 'subtitles',
              public_id: 'videos/video2.transcript',
            },
          },
          { flags: 'layer_apply' },
        ],
      })
      res.json({
        ...result,
        videoElem: video.replace(/poster=/, 'controls poster='),
      })
    })
  } catch (err) {
    console.log({ err })
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few explanations:&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;transformation&lt;/code&gt; property, you’ve added an overlay of the &lt;code&gt;subtitles&lt;/code&gt; resource type and specified the path to that transcript file.&lt;/p&gt;

&lt;p&gt;The return value of the &lt;code&gt;cloudinary.video()&lt;/code&gt; method is in this format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;video poster='http://res.cloudinary.com/dillionmegida/video/upload/l_subtitles:videos:motivational-video.transcript/fl_layer_apply/v1/videos/motivational-video.jpg'&amp;gt;
  &amp;lt;source src='http://res.cloudinary.com/dillionmegida/video/upload/l_subtitles:videos:motivational-video.transcript/fl_layer_apply/v1/videos/motivational-video.webm' type='video/webm'&amp;gt;
  &amp;lt;source src='http://res.cloudinary.com/dillionmegida/video/upload/l_subtitles:videos:motivational-video.transcript/fl_layer_apply/v1/videos/motivational-video.mp4' type='video/mp4'&amp;gt;
  &amp;lt;source src='http://res.cloudinary.com/dillionmegida/video/upload/l_subtitles:videos:motivational-video.transcript/fl_layer_apply/v1/videos/motivational-video.ogv' type='video/ogg'&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You’ve replaced&lt;code&gt;poster=&lt;/code&gt; with the string &lt;code&gt;controls poster=&lt;/code&gt; and added the &lt;code&gt;controls&lt;/code&gt; attribute to the &lt;code&gt;video&lt;/code&gt; element, as shown here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMIwUOvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_3_bzpold.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMIwUOvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_3_bzpold.png" alt="Video element" width="512" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Get Video button at the top makes a &lt;code&gt;get&lt;/code&gt; request to the back end, grabs the &lt;code&gt;video&lt;/code&gt; element, and renders it on the user interface. &lt;/p&gt;

&lt;p&gt;Your video is now more accessible, complete with subtitles. If you’ve specified a different language for the transcript, the subtitles are in that language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#capitalizing-on-googles-automatic-videotagging-capability"&gt;
  &lt;/a&gt;
  Capitalizing on Google’s Automatic Video-Tagging Capability
&lt;/h2&gt;

&lt;p&gt;Besides categorizing or grouping your resources, Cloudinary also tags displays for viewers a video’s category or related tags before the viewers start watching the video. That information greatly helps people with poor vision.&lt;/p&gt;

&lt;p&gt;To manually add tags to a video:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the video’s Manage button and then click the Metadata tab:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrcNauPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_4_whustq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrcNauPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_4_whustq.png" alt="Metadata" width="512" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input the tags:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WlinjVz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505316/unnamed_5_dx48tw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WlinjVz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505316/unnamed_5_dx48tw.png" alt="Tags" width="268" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Such a manual process is mundane and time sapping. Automate it with Google’s automatic video-tagging capability instead. Follow the steps below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Activate the Google Video Tagging add-on. A free plan is available.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9_1Fn2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_6_dki7zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9_1Fn2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_6_dki7zq.png" alt="Cloudinary video tagging plan" width="512" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;uploadVideo&lt;/code&gt; function in the back end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function uploadVideo(req, res) {
  cloudinary.uploader.upload(
    req.file.path,
    {
      public_id: 'videos/video3',
      resource_type: 'video',
      raw_convert: 'google_speech',
      categorization: 'google_video_tagging',
      auto_tagging: 0.7,
    },
    () =&amp;gt; {
      res.json({ message: 'Successfully uploaded video' })
    }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;categorization&lt;/code&gt; property sets up add-ons that automatically generate the video’s tags.&lt;/p&gt;

&lt;p&gt;The confidence level specified by you for the &lt;code&gt;auto_tagging&lt;/code&gt; property denotes the degree of assurance with which a label relates to a resource.  &lt;code&gt;auto_tagging&lt;/code&gt; accepts only tags with a higher confidence level than the one specified. Confidence level 1 yields specific keywords, but only a few. In the code above, the 0.7 level serves as a compromise between relevant tags and sufficient tags.&lt;/p&gt;

&lt;p&gt;Since the add-on generates tags asynchronously, they might take a while to appear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4YSOG7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_7_vjruhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4YSOG7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_7_vjruhf.png" alt="Video 3" width="270" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Refresh the screen after a while and you’ll see these results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qd2pYFH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_8_phkqwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qd2pYFH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_8_phkqwt.png" alt="Results" width="375" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on the video’s context, the generated tags might or might not be meaningful for a particular viewer. Nonetheless, the tags always describe the images in the video, such as “cars” and “environments.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#displaying-a-videos-related-tags"&gt;
  &lt;/a&gt;
  Displaying a Video’s Related Tags
&lt;/h2&gt;

&lt;p&gt;Now obtain the video from Cloudinary by updating the &lt;code&gt;getVideo&lt;/code&gt; function in the back end to read as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
    cloudinary.api.resource('videos/video3', {}, (err, result) =&amp;gt; {
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your browser’s Networks tab (or in Postman or any API client) looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OfG2NPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_14_olymka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OfG2NPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_14_olymka.png" alt="Postman" width="512" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can display video tags any way you desire, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4Gw0Ntl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_12_thtooq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4Gw0Ntl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_12_thtooq.png" alt="Display video tags" width="512" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tags might not be completely accurate so feel free to manually edit them in the dashboard or add other tags. For this video, you could add the tag “motivational quotes,” for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-translations-with-the-google-translation-addon"&gt;
  &lt;/a&gt;
  Adding Translations With the Google Translation Add-On
&lt;/h2&gt;

&lt;p&gt;The tags you just generated are only accessible by English-speaking viewers only. With the Google Translation add-on, which you can use during image upload or in conjunction with a video for automatic tagging, you can add translations. &lt;/p&gt;

&lt;p&gt;Follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Activate the add-on and select the free plan:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbBSTkuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_9_yk8hxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbBSTkuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_9_yk8hxj.png" alt="Google translation" width="512" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the &lt;code&gt;uploadVideo&lt;/code&gt; function to use the Google Translation add-on with the Google auto-tagging feature for video:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function uploadVideo(req, res) {
  cloudinary.uploader.upload(
    req.file.path,
    {
      public_id: 'videos/video4',
      resource_type: 'video',
      raw_convert: 'google_speech',
      categorization: 'google_video_tagging:en:fr',
      auto_tagging: 0.7,
    },
    () =&amp;gt; {
      res.json({ message: 'Successfully uploaded video' })
    }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The suffix &lt;code&gt;:en:fr&lt;/code&gt; in the &lt;code&gt;categorization&lt;/code&gt; property tells the add-on to generate tags, save them in English and French, and display them in the Cloudinary dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9M0tpD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_10_bvckea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9M0tpD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_10_bvckea.png" alt="Display them in Cloudinary dashboard" width="360" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A look at the resource details through the API yields the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diJjrrkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_11_pyjw26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diJjrrkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_11_pyjw26.png" alt="API yields" width="512" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The add-on’s data populates the &lt;code&gt;info&lt;/code&gt; property with properties in this flow:&lt;/p&gt;

&lt;p&gt;categorization → google_video_tagging → data&lt;/p&gt;

&lt;p&gt;Here, the array of generated tags contains a &lt;code&gt;tag&lt;/code&gt; object with the &lt;code&gt;en&lt;/code&gt; (for the English translation) and &lt;code&gt;fr&lt;/code&gt; (for the French translation) properties.&lt;/p&gt;

&lt;p&gt;Ultimately, by leveraging this add-on, you can display tags that match the viewer’s location or language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summing-up"&gt;
  &lt;/a&gt;
  Summing Up
&lt;/h2&gt;

&lt;p&gt;It’s crucial that web apps that contain media are accessible to all, especially your target audience.&lt;/p&gt;

&lt;p&gt;You’ve now learned how to use Cloudinary’s add-ons to improve video accessibility by adding subtitles and automatically generating and displaying the related tags—all in multiple languages as you desire.&lt;/p&gt;

&lt;p&gt;Afterwards, your video can reach a broader audience, including those who are hearing or vision handicapped, those who speak other languages, and even those who enjoy watching video with audio on mute.&lt;/p&gt;

&lt;p&gt;Cloudinary offers many other robust and effective add-ons. Do check them out.&lt;/p&gt;

</description>
      <category>video</category>
      <category>javascript</category>
      <category>programming</category>
      <category>accessible</category>
    </item>
    <item>
      <title>Advent of Code #2 (in JavaScript &amp; Haskell)</title>
      <author>Caleb Weeks</author>
      <pubDate>Fri, 03 Dec 2021 03:25:52 +0000</pubDate>
      <link>https://dev.to/sethcalebweeks/advent-of-code-2-in-javascript-haskell-2nea</link>
      <guid>https://dev.to/sethcalebweeks/advent-of-code-2-in-javascript-haskell-2nea</guid>
      <description>&lt;p&gt;Today's &lt;a href="https://adventofcode.com/2021/day/2"&gt;Advent of Code&lt;/a&gt; puzzle continues the theme of calculating a single value from a list of input, except this time, the input is text. Again, I solved the problem initially in Excel (where the hardest part was figuring out how to split a string by a delimiter...). Here is my attempt in Haskell and JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-one"&gt;
  &lt;/a&gt;
  Part One
&lt;/h2&gt;

&lt;p&gt;Given a list of course instructions as seen below, we need to find the final destination of a submarine by adding up the horizontal and depth values and multiplying the two sums. A forward instruction adds horizontal position while up and down decrease and increase the depth, respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"forward 5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"down 5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"forward 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"up 3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"down 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"forward 2"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing to do is parse out the numbers. I decided to use pattern matching to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'f'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'o'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'r'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'w'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'r'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'d'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'d'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'o'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'w'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'n'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'u'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'p'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;negate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us a tuple of horizontal and depth positions, so we just need to add them all up. Here is a helper function to add two tuples together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;sumTuples&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sumTuples&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After folding over the original course instructions with our tuple summing helper function following the instruction parser, we just multiply the final two values in the tuple together. A cool trick to do this is to uncurry the multiplication operator, which will simply pass both values of the tuple to the operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sumTuples&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach can be copied almost identically in JavaScript. A switch/case block is used instead of pattern matching for the &lt;code&gt;parseInstruction&lt;/code&gt; function, and the final multiplication of the two values is chained in another reduce.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseInstruction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;valueStr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valueStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;forward&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;down&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumTuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sumTuples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parseInstruction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-two"&gt;
  &lt;/a&gt;
  Part Two
&lt;/h2&gt;

&lt;p&gt;The second part of the puzzle revises the meaning of the instructions such that up and down actually refer to the aim of the submarine, and the depth is actually calculated by multiplying the forward value by the current aim value. This requires keeping track of an additional accumulator value during the fold. The instruction parsing function stays the same, but we'll replace the &lt;code&gt;sumTuples&lt;/code&gt; function with an &lt;code&gt;accumulator&lt;/code&gt; function that takes care of the folding procedure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Horizontal and aim are accumulated as normal, but the depth is calculated as the current aim multiplied by the horizontal value from the instruction. We'll also need to manually pick out the depth and horizontal values from the triple to get the final product:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same changes can be made in JavaScript, but we'll also have to swap out the chained reduce hack for an intermediary variable assignment since we can't have inline lambdas. We could define a function and compose it with the reduce, but it wouldn't save much.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseInstruction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;horizontal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;horizontal&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This problem had a lot of similarities to yesterday's problem, so fortunately, I didn't take quite as long coming up with these solutions. How would you implement a solution to these problems in Haskell or JavaScript? I'm particularly interested in better alternatives to the pattern matching hack for parsing the instructions in Haskell.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
      <category>javascript</category>
      <category>haskell</category>
    </item>
    <item>
      <title>Open Source news api for developers</title>
      <author>Praveen Kumar</author>
      <pubDate>Fri, 03 Dec 2021 03:23:00 +0000</pubDate>
      <link>https://dev.to/abipravi/open-source-news-api-for-developers-4pdp</link>
      <guid>https://dev.to/abipravi/open-source-news-api-for-developers-4pdp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#news-api-is-created-using-python-raw-django-rest-framework-endraw-"&gt;
  &lt;/a&gt;
  News Api is created using python &lt;code&gt;django rest framework&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PcD2akSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igt8dqtn62ksjuf3nahu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PcD2akSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igt8dqtn62ksjuf3nahu.gif" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using this the developer can get the realtime news which is scraped from different websites and sources such as &lt;code&gt;google news&lt;/code&gt; and &lt;code&gt;India today&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Api Link: &lt;a href="https://newsapi-abipravi.herokuapp.com/"&gt;VISIT_API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;github repository link: &lt;a href="https://github.com/pravee42/newsapi"&gt;View Source code&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;em&gt;Documentation&lt;/em&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;url/news&lt;/code&gt; -&amp;gt; &lt;strong&gt;To get the top news and head lines news&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;url/tech&lt;/code&gt; -&amp;gt; &lt;strong&gt;To get the Technology news&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;url/search/&amp;lt;search_keyword&amp;gt;&lt;/code&gt; -&amp;gt; &lt;strong&gt;Search News&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;like wise there are more to get the news &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-feature-is-there-is-no-need-to-register-on-owr-website-you-can-use-the-api-privately"&gt;
  &lt;/a&gt;
  Main feature is there is no need to register on owr website you can use the API privately
&lt;/h4&gt;

&lt;p&gt;For Documentation Visit: &lt;a href="https://dev.tonewsapi/docs"&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;If you like you post&lt;/strong&gt; Connect us on&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pravee42"&gt;&lt;br&gt;
Github&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/praveenkumar_abipravi/"&gt;&lt;br&gt;
  Instagram&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ABIPRAVI1"&gt;&lt;br&gt;
  Twiter&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/praveen-kumar-9b09441b7/"&gt;&lt;br&gt;
 Linked In&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abipravi.medium.com/"&gt;&lt;br&gt;
 Medium&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>python</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Open files FAST from zsh | or bash if thats your thing</title>
      <author>Waylon Walker</author>
      <pubDate>Fri, 03 Dec 2021 03:12:20 +0000</pubDate>
      <link>https://dev.to/waylonwalker/fuzzy-file-editor-from-zsh-3kl7</link>
      <guid>https://dev.to/waylonwalker/fuzzy-file-editor-from-zsh-3kl7</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PQw_is7rQSw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I am often in a set of tmux splits flying back and forth, accidentally close my editor, so when I come back to that split and hit my keybinds to edit files I enter them into zsh rather than into nvim like I intended.  Today I am going to&lt;br&gt;
sand off that rough edge and get as similar  behavior to nvim as I can with a couple of aliases.&lt;/p&gt;

&lt;p&gt;Make sure you check out the YouTube video to see all of my improvements.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-an-alias"&gt;
  &lt;/a&gt;
  what's an alias
&lt;/h2&gt;

&lt;p&gt;If you have never heard of an alias before it's essentially a shortcut to a given command.  You can pass additional flags to the underlying command and they will get passed in.  Most of the time they are just shorter versions of commands that you run often or even like in this case a common muscle memory typo that occurs for you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-new-aliass-for-fuzzy-editing-files-from-zsh"&gt;
  &lt;/a&gt;
  My new alias's for fuzzy editing files from zsh
&lt;/h2&gt;

&lt;p&gt;Here are the new aliases that I came up with to smooth out my workflow.  These give me a similar feel to how these keys work in neovim but from zsh.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# fuzzy select file to edit&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'nvim `fzf --preview="bat --color always {}"`'&lt;/span&gt;

&lt;span class="c"&gt;# give me the same syntax as edit while in neovim&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; :e&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'nvim '&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Follow the &lt;a href="https://youtube.com/waylonwalker"&gt;YouTube channel&lt;/a&gt; or the &lt;a href="https://waylonwalker/rss/"&gt;rss&lt;br&gt;
feed&lt;/a&gt; to stay up to date.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-links"&gt;
  &lt;/a&gt;
  Related links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETAj0nR_WYAxxGjd7kXch5zj"&gt;playlist for my dotfiles challenge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>zsh</category>
    </item>
    <item>
      <title>To improve your technical skills, become a concept collector!
</title>
      <author>Sabrina Koumoin</author>
      <pubDate>Fri, 03 Dec 2021 03:07:44 +0000</pubDate>
      <link>https://dev.to/brinascode/to-improve-your-technical-skills-become-a-concept-collector-p8j</link>
      <guid>https://dev.to/brinascode/to-improve-your-technical-skills-become-a-concept-collector-p8j</guid>
      <description>&lt;p&gt;One of the best pieces of engineering advice my dad ever gave me was: "𝐅𝐨𝐜𝐮𝐬 𝐨𝐧 𝐭𝐡𝐞 𝐜𝐨𝐧𝐜𝐞𝐩𝐭𝐬 𝐚𝐧𝐝 𝐛𝐞𝐜𝐨𝐦𝐞 𝐚 𝐜𝐨𝐧𝐜𝐞𝐩𝐭 𝐜𝐨𝐥𝐥𝐞𝐜𝐭𝐨𝐫. 𝐈𝐟 𝐲𝐨𝐮 𝐥𝐞𝐚𝐫𝐧 𝐡𝐨𝐰 𝐭𝐨 𝐫𝐞𝐚𝐝 𝐚 𝐦𝐚𝐩, 𝐞𝐯𝐞𝐧 𝐰𝐡𝐞𝐧 𝐭𝐡𝐞 𝐜𝐢𝐭𝐢𝐞𝐬 𝐜𝐡𝐚𝐧𝐠𝐞 𝐲𝐨𝐮 𝐜𝐚𝐧 𝐬𝐭𝐢𝐥𝐥 𝐟𝐢𝐧𝐝 𝐲𝐨𝐮𝐫 𝐰𝐚𝐲".&lt;/p&gt;

&lt;p&gt;I love this so much because it's easy to get overwhelmed in tech with all the coding languages and tools available to us. But when you think of yourself as a concept-collector you can start to identify patterns in the things you're learning.&lt;/p&gt;

&lt;p&gt;For example, I noticed that no matter what framework I use, web development is essentially made up of these building blocks:&lt;/p&gt;

&lt;p&gt;🌄 Views -&amp;gt; What's being displayed to the user&lt;/p&gt;

&lt;p&gt;🎢 Events -&amp;gt; The different things that a user 'causes to happen'&lt;/p&gt;

&lt;p&gt;🚨 Event Handling -&amp;gt; What we do after the user causes things to happen&lt;/p&gt;

&lt;p&gt;🗳 Storage -&amp;gt; Data/information needs to be stored and retrieved&lt;/p&gt;

&lt;p&gt;🚏 Routing and Controllers -&amp;gt; Allows us to create conceptual locations for where data/information should live&lt;/p&gt;

&lt;p&gt;⚒ Optimization -&amp;gt; Making things run as smoothly as possible&lt;/p&gt;

&lt;p&gt;In other words:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The user needs to see something&lt;/li&gt;
&lt;li&gt;The user needs to interact with what they see and make things happen&lt;/li&gt;
&lt;li&gt;When they cause something to happen I need to decide what occurs next&lt;/li&gt;
&lt;li&gt;My data needs to be stored somewhere, and I need to be able to access it&lt;/li&gt;
&lt;li&gt;I use routes to allow the user to access data kept in different locations&lt;/li&gt;
&lt;li&gt;I optimize to make things run smoother&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you learn something new, try to grasp the deeper meaning of what's being done. 𝘊𝘰𝘥𝘪𝘯𝘨 𝘭𝘢𝘯𝘨𝘶𝘢𝘨𝘦𝘴 𝘢𝘯𝘥 𝘴𝘺𝘯𝘵𝘢𝘹𝘦𝘴 𝘢𝘳𝘦 𝘰𝘯𝘭𝘺 𝘢 𝘮𝘦𝘢𝘯𝘴 𝘵𝘰 𝘢𝘯 𝘦𝘯𝘥, 𝘢 𝘸𝘢𝘺 𝘵𝘰 𝘢𝘤𝘤𝘰𝘮𝘱𝘭𝘪𝘴𝘩 𝘢 𝘱𝘶𝘳𝘱𝘰𝘴𝘦. If you notice these patterns you'll be able to switch between frameworks and languages much more easily and confidently!&lt;/p&gt;




&lt;p&gt;If you liked this blog post feel free to check out more of my tech content on &lt;a href="https://www.instagram.com/brinascode/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCYrIYDWuz0LZbIuOazb-5FQ"&gt;YouTube&lt;/a&gt; and &lt;a href="https://twitter.com/brinascode"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.tiktok.com/@brinascode"&gt;TikTok&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>December 2nd, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 03 Dec 2021 02:49:46 +0000</pubDate>
      <link>https://dev.to/nickytonline/december-2nd-2021-what-did-you-learn-this-week-536c</link>
      <guid>https://dev.to/nickytonline/december-2nd-2021-what-did-you-learn-this-week-536c</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lSVL6vdhdZVPW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lSVL6vdhdZVPW/giphy.gif" alt="Boss from the Office Space movie sipping his coffee in front of a cubicle" width="240" height="180"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Guide to model training: Part 4 — Ditching datetime</title>
      <author>Mage</author>
      <pubDate>Fri, 03 Dec 2021 01:09:35 +0000</pubDate>
      <link>https://dev.to/mage_ai/guide-to-model-training-part-4-ditching-datetime-2eg6</link>
      <guid>https://dev.to/mage_ai/guide-to-model-training-part-4-ditching-datetime-2eg6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Apply feature engineering by converting time series data to numerical values for training machine learning models.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Recap&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;The datetime data type&lt;/li&gt;
&lt;li&gt;Converting to date&lt;/li&gt;
&lt;li&gt;What’s next?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;In our series so far, we’ve gone over scaling data to prepare for model training. We started with a dataset filled with categorical and numerical values and scaled them so that a computer could understand them. For the remainder of our dataset, we’re almost ready to begin model training; we just need to scale our dates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;In this section, we’ll be revisiting the datatypes of numerical and categorical values. Please read &lt;a href="https://www.mage.ai/blog/qualitative-data"&gt;part 1&lt;/a&gt; and &lt;a href="https://www.mage.ai/blog/scaling-numerical-data"&gt;part 2&lt;/a&gt; before proceeding if you’re unfamiliar with those terms. We’ll be using the same &lt;a href="https://app.box.com/s/ktd1t87fl925hjxkzsclp1343eq822f1"&gt;big_data&lt;/a&gt; dataset used throughout the model training guides.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importance-of-dates"&gt;
  &lt;/a&gt;
  Importance of dates
&lt;/h2&gt;

&lt;p&gt;When collecting data to feed into machine learning models, it’s common to have data on when a user signed up. The model can use this information to find hidden correlation between users. Maybe there was a sign-up bonus or event for users when creating an account. The data would reflect on the success and failure and would be considered when reviewing the model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modern-day-standards"&gt;
  &lt;/a&gt;
  Modern day standards
&lt;/h2&gt;

&lt;p&gt;Dates are important and critical to success, especially when collaborating across different locations or countries. Dates can be written in so many ways, across multiple time zones, so the internet agreed on a standard to be used, under &lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt;, last updated in 2019. It simplifies dates into what’s known as the datetime format, to represent dates using numerical values to begin formatting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-datetime-data-types"&gt;
  &lt;/a&gt;
  The datetime data types
&lt;/h2&gt;

&lt;p&gt;Our dates are formatted as 2021–11–30 as an example. It follows a year, month, day format. But when you think about what data type it is, it’s hard to say for sure. A computer thinks of it as an object or string at first. But when humans look at it, it’s obviously a number. So what is the actual data type?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strftime-format"&gt;
  &lt;/a&gt;
  strftime format
&lt;/h3&gt;

&lt;p&gt;In Pandas, there is a to_datetime function that will convert the datatype to a datetime value. This usually requires a formatter that specifies how to parse the input by year, month, day, day of week, month name, hour, minute, second, and even account for 12 hour time or time zones. Datetimes in Pandas follow the strftime format used in UNIX.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P1hGLj1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AWzn-aj10siXS5uHX" alt="" width="880" height="331"&gt;&lt;em&gt;Datetime abbreviations and outputs cheat sheet (Source: &lt;a href="https://devhints.io/datetime"&gt;DevHints&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#converting-dates"&gt;
  &lt;/a&gt;
  Converting dates
&lt;/h2&gt;

&lt;p&gt;In our current dataset we have one datetime value, Dt_Customer, logged when a user first signs up for an account. Upon inspection, it’s a string or object data type.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCpsi9lS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7i2gsa31fmn5sxc3x3a.png" alt="Image description" width="560" height="306"&gt;&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#string-to-datetime"&gt;
  &lt;/a&gt;
  String to datetime
&lt;/h3&gt;

&lt;p&gt;Looking at the output, we see 21–08–2021, which shows that it is in month, day, year format. By comparing with the cheatsheet, to format it we’ll match it with %d-%m-%Y.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbwOCRQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zouf263stztqmzy4ixy7.png" alt="Image description" width="880" height="477"&gt;&lt;/center&gt;
&lt;em&gt;The output standard is YYY-MM-DD&lt;/em&gt;
&lt;h3&gt;
  &lt;a href="#datetime-to-integer"&gt;
  &lt;/a&gt;
  Datetime to Integer
&lt;/h3&gt;

&lt;p&gt;But we aren’t completed yet. Even though we have it in datetime format, machines still cannot understand it. To finish off the conversion, we’ll break down the datetime into their own columns for year, month, and day.&lt;/p&gt;

&lt;p&gt;The datetime format must follow the ISO, and contain functions that allow it to parse specific portions. For Pandas we’ll be using the dt.year, dt.month, and dt.day methods.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W6ile3db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lemky5terrqna5owls1p.png" alt="Image description" width="872" height="126"&gt;&lt;/center&gt;

&lt;p&gt;Once we are sure that the values match, let’s remove the original column so the dataset contains only machine readable values.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJjFczSM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oagp1jhjwewe1sq9lm70.png" alt="Image description" width="880" height="827"&gt;&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What’s next
&lt;/h2&gt;

&lt;p&gt;Now that all of our data has been modified to be so simple that a computer can understand and generate models. Throughout the series we’ve covered scaling data, filling in missing values, and now converting to datetime. For our finale, we’ll take all of our finished datasets from parts 1 thru 4, and combine them together to begin training a classification model for remarketing on whether we should send or not send another email to our customers.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>machinelearning</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
    <item>
      <title>Hoisting: Some exercises.</title>
      <author>Karen Molina</author>
      <pubDate>Fri, 03 Dec 2021 00:28:16 +0000</pubDate>
      <link>https://dev.to/voidrizoma/hoisting-some-exercises-2efd</link>
      <guid>https://dev.to/voidrizoma/hoisting-some-exercises-2efd</guid>
      <description>&lt;p&gt;Hello! &lt;/p&gt;

&lt;p&gt;This time we will review the hoisting and the scope, one more time. Previously, we check them as concepts. But now, we going to realize come exercises to see how the hoisting and scope work inside the JS engine.&lt;/p&gt;

&lt;p&gt;Remember in JS we have three ways to make a declaration: var, let and const.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Hi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, if we call the variable with the keyword "var" before the initialization, JS returns an undefined value. That's happened because, with the hoisting, anything variable with a "var" keyword has been moved at the top. So, JS moves the initialization, but not the value or the assignation. The value has been assigned in line 2. &lt;/p&gt;

&lt;p&gt;What happens if we try to call our variables with the keywords "let" and "const" before the initialization?&lt;br&gt;
Let's see below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variable2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;anotherVariable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;variable2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi, i'm a let&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anotherVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi, i'm a const&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;//ReferenceError: Cannot access anotherVariable' before initialization&lt;/span&gt;
&lt;span class="c1"&gt;//ReferenceError: Cannot access 'variable2' before initialization&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, we see that JS gives us an error, a specific error called: Reference Error, that's means that JS does not hoist the declarations with those keywords.&lt;/p&gt;

&lt;p&gt;Another issue with the hoisting happens in the functions. In this case, we must see some examples as to how the some of functions can be affected by the hoisting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//5&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//ReferenceError: Cannot access 'sum2' before initialization&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// ReferenceError: Cannot access 'sumNumbers' before initialization&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case and always all the functions as function declaration have moved at the top like the variable with "var", but with a small and important difference, in this case, the function work. Why?  The reason is that JS moves not just the initialization as a variable, JS moves the scope too. Meanwhile, a function expression and the arrow functions never will be moved at the top, and JS shows us a reference error if we invoke them before an initialization.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>100 días de código: 30, avance en The Odin Project.</title>
      <author>Daro</author>
      <pubDate>Fri, 03 Dec 2021 00:15:27 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-30-avance-en-the-odin-project-46cb</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-30-avance-en-the-odin-project-46cb</guid>
      <description>&lt;p&gt;¡Hey hey hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a este día 30 del reto. Realmente no he avanzado mucho porque practique el uso de prototipos en Javascript.&lt;/p&gt;

&lt;p&gt;Me siento realmente motivado desde que elegí la ruta a seguir en The Odin Project la cual fue Javascript Full stack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Practique 30 min de Touch Typing.&lt;/li&gt;
&lt;li&gt;Comencé a aprender TypeScript con la documentación oficial que puedes encontrar &lt;a href="https://www.typescriptlang.org/"&gt;aquí&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Termine la sección completa de Foundations de The odin project.&lt;/li&gt;
&lt;li&gt;Investigue cual era la mejor ruta para seguir como desarrollador Full stack y al final elegí JavaScript Full Stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la sección del proyecto de biblioteca en la ruta de Javascript.&lt;/li&gt;
&lt;li&gt;Practique 30 minutos de Touch Typing.&lt;/li&gt;
&lt;li&gt;Hice algunos ejercicios de Hacker Rank.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hoy no escribiré mucho porque no fue un día especialmente variado y quiero seguir avanzando en el ejercicio asi que hasta pronto!&lt;/p&gt;

&lt;p&gt;Espero que tengan mucho éxito con sus proyectos.&lt;br&gt;
Adiós mundo!&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Refactoring GitHub Actions Workflow</title>
      <author>Justin Yoo</author>
      <pubDate>Fri, 03 Dec 2021 00:00:26 +0000</pubDate>
      <link>https://dev.to/azure/refactoring-github-actions-workflow-ih5</link>
      <guid>https://dev.to/azure/refactoring-github-actions-workflow-ih5</guid>
      <description>&lt;p&gt;A while ago, I wrote a blog post about &lt;a href="https://devkimchi.com/2019/09/04/azure-devops-pipelines-refactoring-technics/"&gt;Azure DevOps Pipelines refactoring technics&lt;/a&gt;. &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt; is also suitable for building CI/CD pipelines. But, compared to &lt;a href="https://docs.microsoft.com/azure/devops/user-guide/what-is-azure-devops?view=azure-devops&amp;amp;WT.mc_id=dotnet-51099-juyooo&amp;amp;ocid=AID3035186"&gt;Azure DevOps&lt;/a&gt;, there are many spaces to achieve the same efficiency level as Azure DevOps. GitHub Actions has recently released a new feature called &lt;a href="https://docs.github.com/en/actions/learn-github-actions/reusing-workflows"&gt;"Reusable Workflows"&lt;/a&gt;, which you can reduce the refactoring concerns. Throughout this post, I'm going to refactor the existing &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-51099-juyooo&amp;amp;ocid=AID3035186"&gt;Azure Static Web Apps&lt;/a&gt; CI/CD pipeline workflows, using the "reusable workflows" feature of GitHub Actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-for-azure-static-web-apps"&gt;
  &lt;/a&gt;
  Workflow for Azure Static Web Apps
&lt;/h2&gt;

&lt;p&gt;While provisioning an &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-51099-juyooo&amp;amp;ocid=AID3035186"&gt;Azure Static Web Apps (ASWA)&lt;/a&gt; instance, GitHub Actions workflow is automatically generated by default. Here's a sample workflow. I'm pretty sure it's not that different from yours.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The problem is that once you provision the ASWA instance, you can't change the name of the auto-generated workflow file. Therefore, you are only allowed to modify the file.&lt;/p&gt;

&lt;p&gt;Let's imagine a situation. You've got a codebase that deploys to multiple Azure Static Web Apps instances – DEV, TEST and PROD, which is pretty common. In that case, you will have as many GitHub Actions workflow files as the number of ASWA instances. But all the workflow files are virtually the same as each other except their filenames. So if you refactor those workflows, the overall process would be more simplified.&lt;/p&gt;

&lt;p&gt;For the refactoring practice, you would use the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_dispatch"&gt;&lt;code&gt;workflow_dispatch&lt;/code&gt;&lt;/a&gt; event, together with the &lt;a href="https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event"&gt;webhook event&lt;/a&gt;, to call the refactored workflow. Once it's set up, unless the access token gets invalidated, you'll be able to use the workflow. But what if the access token is expired or compromised? You MUST reissue the token, which is less ideal. How can we work out this situation?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reusable-workflows-or-called-workflow"&gt;
  &lt;/a&gt;
  Reusable Workflows (or Called Workflow)
&lt;/h2&gt;

&lt;p&gt;The reusable workflows use the newly introduced event called &lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_call"&gt;&lt;code&gt;workflow_call&lt;/code&gt;&lt;/a&gt;. It reuses the workflows at the job level. Let's refactor the workflow above. Copy both &lt;code&gt;build_and_deploy_job&lt;/code&gt; and &lt;code&gt;close_pull_request_job&lt;/code&gt; jobs and paste both into a new YAML file, which is called either "reusable workflow" or "called workflow".&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;According to the workflow above, there are input variables and secret variables and other variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event Object

&lt;ul&gt;
&lt;li&gt;Event Name: &lt;code&gt;github.event_name&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Event Action: &lt;code&gt;github.event.action&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Secrets

&lt;ul&gt;
&lt;li&gt;Azure Static Web Apps API Token: &lt;code&gt;secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_XXXX_XXXX_XXXX&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;GitHub Token: &lt;code&gt;secrets.GITHUB_TOKEN&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;App Locations

&lt;ul&gt;
&lt;li&gt;Web App: &lt;code&gt;app_location&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;API App: &lt;code&gt;api_location&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Web App Artifact: &lt;code&gt;output_location&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The "called" workflow can't directly access those values defined in the "caller" workflow. Therefore, they MUST be propagated from the "caller" workflow to the "called" workflow. Let's update the variable parts in the "called" workflow like below &lt;em&gt;(line #7-8, 20-21, 23-24, 30-31, 33-34, 36-37, 43-44, 54-55)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;All values have become parameterised. Now, you need to define them in the "called" workflow, under the &lt;code&gt;workflow_call&lt;/code&gt; event. All non-secret variables go under the &lt;code&gt;inputs&lt;/code&gt; attribute &lt;em&gt;(line #6-21)&lt;/em&gt;, and all the secret variables go under the &lt;code&gt;secrets&lt;/code&gt; attribute &lt;em&gt;(line #23-27)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, the refactoring has been completed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caller-workflow"&gt;
  &lt;/a&gt;
  Caller Workflow
&lt;/h2&gt;

&lt;p&gt;Let's update the existing ASWA workflow. As both jobs defined under the &lt;code&gt;jobs&lt;/code&gt; node are no longer necessary, delete them. And define a new "reusable" workflow like below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Called Workflow &lt;em&gt;(line #14-15)&lt;/em&gt;: &lt;code&gt;&amp;lt;org_name&amp;gt;/&amp;lt;repo_name&amp;gt;/.github/workflows/&amp;lt;reusable_workflow_filename&amp;gt;@&amp;lt;branch_or_tag&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Input Variables &lt;em&gt;(line #17-22)&lt;/em&gt;: Under &lt;code&gt;with&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Secret Variables &lt;em&gt;(line #24-26)&lt;/em&gt;: Under &lt;code&gt;secrets&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, regardless of the number of "caller" workflows, update them like above. You only need to update the "called" workflow then all ASWA pipelines will get the updated workflow applied, which is really convenient!&lt;/p&gt;




&lt;p&gt;So far, I've shown how to refactor the &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-51099-juyooo&amp;amp;ocid=AID3035186"&gt;Azure Static Web Apps&lt;/a&gt; workflow with the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/reusing-workflows"&gt;reusable workflows&lt;/a&gt; feature of &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;. I'm sure that it's not just for ASWA but also can be utilised in many different scenarios.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azurestaticwebapps</category>
      <category>githubactions</category>
      <category>refactoring</category>
    </item>
    <item>
      <title>Netflix Conductor Workers in Python</title>
      <author>nvn07</author>
      <pubDate>Thu, 02 Dec 2021 23:47:17 +0000</pubDate>
      <link>https://dev.to/nvn07/netflix-conductor-workers-in-python-3a4a</link>
      <guid>https://dev.to/nvn07/netflix-conductor-workers-in-python-3a4a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-conductor"&gt;
  &lt;/a&gt;
  What is Conductor
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Netflix/conductor"&gt;Conductor&lt;/a&gt; is a Microservices orchestration platform from Netflix, released under Apache 2.0 Open Source License.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-the-python-client"&gt;
  &lt;/a&gt;
  Install the python client
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;virtualenv conductorclient
source conductorclient/bin/activate
cd ../conductor/client/python
python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implement-a-task-worker"&gt;
  &lt;/a&gt;
  Implement a Task Worker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/Netflix/conductor/blob/main/polyglot-clients/python/conductor/ConductorWorker.py#L36"&gt;ConductorWorker&lt;/a&gt; class is used to implement task workers.&lt;br&gt;
The following script shows how to bring up two task workers named &lt;code&gt;book_flight&lt;/code&gt; and &lt;code&gt;book_car&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;conductor.ConductorWorker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ConductorWorker&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;book_flight_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'COMPLETED'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'output'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'booking_ref'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2341111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'airline'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'delta'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s"&gt;'logs'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'trying delta'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'skipping aa'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;book_car_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'COMPLETED'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'output'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'booking_ref'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"84545fdfd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'agency'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'hertz'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s"&gt;'logs'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'trying hertz'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Starting Travel Booking workflows'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ConductorWorker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://localhost:8080/api'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'book_flight'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book_flight_task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'book_car'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book_car_task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-conductorworker-endraw-parameters"&gt;
  &lt;/a&gt;
  &lt;code&gt;ConductorWorker&lt;/code&gt; parameters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;server_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="n"&gt;hosting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;conductor&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'http://localhost:8080/api'&lt;/span&gt;

&lt;span class="n"&gt;thread_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;polling&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
    &lt;span class="n"&gt;executing&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;polling_interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;
    &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;polls&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;conductor&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;worker_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optional&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;worker_id&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;going&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;For&lt;/span&gt; &lt;span class="n"&gt;further&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;documentation&lt;/span&gt;
    &lt;span class="n"&gt;By&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-start-endraw-method-parameters"&gt;
  &lt;/a&gt;
  &lt;code&gt;start&lt;/code&gt; method parameters
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;taskType: str
    The name of the task that the worker is looking to execute

exec_function: function
    The function that the worker will execute. The function
    must return a dict with the `status`, `output` and `logs`
    keys present. If this is not present, an Exception will be
    raised

wait: bool
    Whether the worker will block execution of further code.
    Since the workers are being run in daemon threads, when the
    program completes execution, all the threads are destroyed.
    Setting wait to True prevents the program from ending.
    If multiple workers are being called from the same program,
    all but the last start call but have wait set to False.
    The last start call must always set wait to True. If a
    single worker is being called, set wait to True.

domain: str, optional
    The domain of the task under which the worker will run. For
    further details refer to the conductor server documentation
    By default, it is set to None
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See &lt;br&gt;
&lt;a href="https://github.com/Netflix/conductor/tree/main/polyglot-clients/python"&gt;https://github.com/Netflix/conductor/tree/main/polyglot-clients/python&lt;/a&gt;&lt;br&gt;
for the source code and follow us on GitHub for updates.&lt;/p&gt;

</description>
      <category>python</category>
      <category>microservices</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
