<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The 6 R's Of Cloud Migration</title>
      <author>Edward Allen Mercado</author>
      <pubDate>Sun, 13 Jun 2021 08:07:41 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/the-6-r-s-of-cloud-migration-2p17</link>
      <guid>https://dev.to/awscommunity-asean/the-6-r-s-of-cloud-migration-2p17</guid>
      <description>&lt;p&gt;Nowadays, a lot of companies are investing towards the migration of their on-premises applications towards the cloud.&lt;/p&gt;

&lt;p&gt;In this article, we will learn about the 6 &lt;strong&gt;R&lt;/strong&gt; that will guide  your cloud migration journey.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;6 R's&lt;/strong&gt; Of Cloud Migration are set of strategies for migrating things into the cloud, by understanding the pros and cons of each you'll be able to plan on what &lt;strong&gt;R&lt;/strong&gt; is appropriate for your application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rehost"&gt;
  &lt;/a&gt;
  Re-host
&lt;/h2&gt;

&lt;p&gt;Also known as &lt;em&gt;lift and shift&lt;/em&gt;. &lt;br&gt;
Migrate your application as is. This is the easiest path to get your on-premises application migrated to the cloud. Using this strategy, you &lt;em&gt;copy&lt;/em&gt; your application infrastructure to your cloud provider. &lt;/p&gt;

&lt;p&gt;You can use tools such as &lt;a href="https://www.cloudendure.com/"&gt;AWS Cloud Endure&lt;/a&gt; and &lt;a href="https://aws.amazon.com/ec2/vm-import/"&gt;VM Import/Export&lt;/a&gt; to automate this strategy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kA2LJIrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzz7i5e2ih78hwz7jgz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kA2LJIrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzz7i5e2ih78hwz7jgz0.png" alt="Rehost"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reduced management overhead as your cloud provider will managed the physical infrastructure on where your application be hosted also known as &lt;em&gt;Infrastructure as a Service&lt;/em&gt; (IAAS).&lt;/li&gt;
&lt;li&gt;Easier to optimize, when your application is deployed in your cloud provider it can now easily transformed to fully adopt the benefits of the cloud.&lt;/li&gt;
&lt;li&gt;Still offers cost savings as your physical infrastructure is managed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Not taking the full advantage of the cloud.&lt;/li&gt;
&lt;li&gt;It can delay things that you could do better.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-choose-this-strategy"&gt;
  &lt;/a&gt;
  When to choose this strategy?
&lt;/h3&gt;

&lt;p&gt;This fits well if you want to migrate your application without the need of code or infrastructure changes, just implement the same thing you did on-premises and if you're new in the cloud and want try things out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#replatform"&gt;
  &lt;/a&gt;
  Re-platform
&lt;/h2&gt;

&lt;p&gt;Also known as &lt;em&gt;lift, tinker, and shift&lt;/em&gt;. &lt;br&gt;
Has similarities with Re-hosting but it gradually take the advantage of the cloud offerings without having to change the core infrastructure of your application.&lt;/p&gt;

&lt;p&gt;Take this strategy as a safe point for your application. It's moving your database from &lt;em&gt;Infrastructure as a Service&lt;/em&gt; to a &lt;em&gt;Database as a Service&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6LSN4wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scwfaqwk5r9vohewc7xi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6LSN4wf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scwfaqwk5r9vohewc7xi.png" alt="Replatform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Reduced management overhead - better than rehosting.&lt;/li&gt;
&lt;li&gt;Increased resiliency.&lt;/li&gt;
&lt;li&gt;Reduced cost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No real negatives as you only allow your cloud service provider to manage more parts of your infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Provisioning &lt;a href="https://aws.amazon.com/rds/"&gt;Amazon Relational Database Service&lt;/a&gt; instead of managed database instance in &lt;a href="https://aws.amazon.com/ec2/?ec2-whats-new.sort-by=item.additionalFields.postDateTime&amp;amp;ec2-whats-new.sort-order=desc"&gt;Elastic Compute Cloud&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-choose-this-strategy"&gt;
  &lt;/a&gt;
  When to choose this strategy?
&lt;/h3&gt;

&lt;p&gt;This suits your application migration if you want to gradually adapt on cloud functionalities such as auto-scaling, managed services, etc. without committing to a large migration effort, and by doing these you can achieve benefits than rehosting can offer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refactor-or-rearchitect"&gt;
  &lt;/a&gt;
  Re-factor or Re-architect
&lt;/h2&gt;

&lt;p&gt;Review the architecture of an application and adopt to a &lt;em&gt;cloud-native&lt;/em&gt; architectures and products, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service Oriented or Microservices&lt;/li&gt;
&lt;li&gt;Serverless Architecture &lt;/li&gt;
&lt;li&gt;Event-Driven Architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This strategy is offers the best long term benefits but comes with stiff price and time consuming process. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6YiuH2Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nc8lim9xrrrcrcy8vzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6YiuH2Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nc8lim9xrrrcrcy8vzk.png" alt="Refactor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Takes the full advantages of using the cloud.&lt;/li&gt;
&lt;li&gt;Produce a much more scalable, better high availability and fault tolerant infrastructure&lt;/li&gt;
&lt;li&gt;Cost is aligned according the usage. &lt;em&gt;Pay as you use&lt;/em&gt; model.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Initially, it is expensive and time-consuming.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-choose-this-strategy"&gt;
  &lt;/a&gt;
  When to choose this strategy?
&lt;/h3&gt;

&lt;p&gt;This strategy is for those who really knows what are the full advantages of using cloud and make the most out of it. This will require you to drastically modify your application core infrastructure to be suited base on the cloud-native model, although this entails a lot of work this strategy will produce more value to your business in the long run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repurchase"&gt;
  &lt;/a&gt;
  Re-purchase
&lt;/h2&gt;

&lt;p&gt;Move from managing installed applications on-premise and consume a &lt;em&gt;Software as a Service&lt;/em&gt; (SaaS) model. Many of the common applications nowadays are available and offered as a SaaS. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tP92hKhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzxz1wsgymxuvaod436e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tP92hKhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzxz1wsgymxuvaod436e.png" alt="Re-purchase"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Move from a Customer Relationship Management (CRM) to Salesforce.com, from Microsoft Exchange to Microsoft 365, an HR system to Workday, or a content management system (CMS) to Drupal. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-choose-this-strategy"&gt;
  &lt;/a&gt;
  When to choose this strategy?
&lt;/h3&gt;

&lt;p&gt;This is for the applications that already exist with SaaS offerings that you can subscribe base on your needs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#retire"&gt;
  &lt;/a&gt;
  Retire
&lt;/h2&gt;

&lt;p&gt;In other words &lt;em&gt;If you don't need the application, switch it off&lt;/em&gt;. Remove the applications that are no longer needed, applications that are no longer produce value to you or your business. These applications are often running for no reason.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qSBmb2Ye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyhvrdca9c3401oz6qwx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qSBmb2Ye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyhvrdca9c3401oz6qwx.png" alt="Retire"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Often provides 10% - 20% cost savings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-choose-this-strategy"&gt;
  &lt;/a&gt;
  When to choose this strategy?
&lt;/h3&gt;

&lt;p&gt;You'll know, after your initial cloud migration assessment and base on the data you gathered, &lt;em&gt;"Does this application benefit me?"&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#retain"&gt;
  &lt;/a&gt;
  Retain
&lt;/h2&gt;

&lt;p&gt;Also known as &lt;em&gt;re-visit&lt;/em&gt; or &lt;em&gt;do nothing, for now&lt;/em&gt;. &lt;br&gt;
Commonly, applications fall on this criteria are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Old application that has some usage but not worth the move.&lt;/li&gt;
&lt;li&gt;Complex application that need to leave till later.&lt;/li&gt;
&lt;li&gt;Super important application and it's to risky. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0aGuuLDj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ssrmij0x5dmte5o905y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0aGuuLDj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ssrmij0x5dmte5o905y.png" alt="Retain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-choose-this-strategy"&gt;
  &lt;/a&gt;
  When to choose this strategy?
&lt;/h3&gt;

&lt;p&gt;This strategy is used when most of the applications were deployed and working properly in the cloud, you'll look back and start to plan the migration for the application that falls in this category.&lt;/p&gt;

&lt;p&gt;Using these &lt;strong&gt;6 R's&lt;/strong&gt; you'll be able to produce a table that contains your on-premises application together with the &lt;strong&gt;R&lt;/strong&gt; that fits it. This detailed assessment per application will serve as your guidebook when it's time to migrate to the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can reach me at&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://dev.to/edwardmercado"&gt;Dev.to&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/edwardmercado_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>architecture</category>
      <category>awscommunity</category>
    </item>
    <item>
      <title>Laravel Livewire pour Django? Dite bonjour à Unicorn!</title>
      <author> Eric Le Codeur</author>
      <pubDate>Sun, 13 Jun 2021 07:35:10 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/laravel-livewire-pour-django-dite-bonjour-a-unicorn-4eie</link>
      <guid>https://dev.to/ericlecodeur/laravel-livewire-pour-django-dite-bonjour-a-unicorn-4eie</guid>
      <description>&lt;p&gt;Si vous désirez plus de contenu francophone comme celui-ci, cliquer &lt;strong&gt;Follow ou &lt;a href="https://twitter.com/EricLeCodeur"&gt;suivez-moi sur Twitter&lt;/a&gt;&lt;br&gt;

&lt;br&gt;
Bonjour la communauté Django ! &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Aujourd'hui je suis très excité car j'ai une nouvelle extra pour les amoureux de Django.&lt;/p&gt;

&lt;p&gt;Un nouvel outil Django est disponible depuis peu et il s'appelle Unicorn&lt;/p&gt;

&lt;h2&gt;Qu'est-ce que Unicorn ?&lt;/h2&gt;

&lt;p&gt;Unicorn est à Django ce que Livewire est à Laravel : un framework full stack qui permet de créer une interface utilisateur réactive riche en fonctionnalités sans API et sans javascript uniquement en Django et python.&lt;/p&gt;

&lt;p&gt;En passant, je ne suis en aucun cas associé à Unicorn. Je suis juste fan de leur travail.&lt;/p&gt;

&lt;h2&gt;Exemple de l'utilisation de Unicorn&lt;/h2&gt;

&lt;p&gt;Supposons que vous souhaitiez créer une liste de tâches mais que vous ne souhaitiez pas rafraichir le navigateur lors de l'ajout ou de la suppression d'une tâche. &lt;/p&gt;

&lt;p&gt;Normalement, vous utiliserez javascript pour implémenter ce type de fonctionnalité. Pas avec Unicorn !&lt;/p&gt;

&lt;p&gt;Unicorn permet de créer un modèle Django et une vue Django qui peut faire exactement cela.&lt;/p&gt;

&lt;p&gt;Voici un exemple de modèle Django :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jinja"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- unicorn/templates/unicorn/todo.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;unicorn:submit.prevent=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;unicorn:model.defer=&lt;/span&gt;&lt;span class="s"&gt;"task"&lt;/span&gt;
      &lt;span class="na"&gt;unicorn:keyup.escape=&lt;/span&gt;&lt;span class="s"&gt;"task=''"&lt;/span&gt;
      &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"New task"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"task"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;unicorn:click=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;unicorn:click=&lt;/span&gt;&lt;span class="s"&gt;"$reset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Clear all tasks&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;tasks&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;tasks&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;task&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      No tasks 🎉
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comme vous le voyez, unicorn:model map le input à la variable task.&lt;/p&gt;

&lt;p&gt;Tandis que unicorn:click="add" appel la fonction 'add' lors du click du bouton&lt;/p&gt;

&lt;p&gt;La fonction add et la variable task se trouve définit dans le composante todo.py:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# unicorn/components/todo.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_unicorn.components&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UnicornView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnicornView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La beauté de cette fonction c'est quelle est exécuté sans rafraichir le navigateur. Seul le contenu qui à changer sera re-actualisé dans le navigateur.&lt;/p&gt;

&lt;p&gt;Comme mentionné au début du texte, c'est exactement le même principe qu'avec Livewire (Laravel)&lt;/p&gt;

&lt;h2&gt;Excité?&lt;/h2&gt;

&lt;p&gt;Mois je le suis! Unicorn peut littéralement changer le spectre de ce que nous pouvons faire avec les templates Django. &lt;/p&gt;

&lt;p&gt;Il offre la puissance d'un SPA sans quitter le confort de Django.&lt;/p&gt;

&lt;p&gt;Si vous voulez plus d'informations, vous pouvez consulter un exemple visuel sur leur site Web :&lt;br&gt;
&lt;a href="https://www.django-unicorn.com/"&gt;https://www.django-unicorn.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vous pouvez également consulter le git hub et attribuer une étoile au projet pour les encourager à continuer.&lt;br&gt;
&lt;a href="https://github.com/adamghill/django-unicorn"&gt;https://github.com/adamghill/django-unicorn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>french</category>
      <category>django</category>
      <category>python</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Importing custom font in HTML and CSS</title>
      <author>Sumeet Yadav</author>
      <pubDate>Sun, 13 Jun 2021 07:28:22 +0000</pubDate>
      <link>https://dev.to/sumeet16/importing-custom-font-in-html-and-css-4n86</link>
      <guid>https://dev.to/sumeet16/importing-custom-font-in-html-and-css-4n86</guid>
      <description>&lt;p&gt;There are many web developers who are starting out and don't know how to add custom fonts to their website! I believe you have arrived to the right place. In this blog I am going to explain you how to import custom fonts to your website.&lt;/p&gt;

&lt;p&gt;Adding a unique font to your website is a great way to make your design stand out online.&lt;/p&gt;

&lt;p&gt;In this blog, I will walk you through the step-by-step process for adding any font to your website.&lt;/p&gt;

&lt;p&gt;So, we are going to using Google Font to import custom fonts. So let's quickly go thought the steps of importing the fonts.&lt;/p&gt;

&lt;p&gt;As of April 2021, Google Fonts have 1052 font families, including 89 variable font families.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-1 Go to Google Font site&lt;/strong&gt;&lt;br&gt;
First of all you have to go to the Google Fonts website, The link for the website is here &lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt; .&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RbWQGvNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqxdpuwicz5qnz9mr1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RbWQGvNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqxdpuwicz5qnz9mr1x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-2 Search for the desired font&lt;/strong&gt;&lt;br&gt;
Then you have to type the desire font name in the search box and press enter for search.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMWzEoSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytiemcv16htnoc9f8kqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMWzEoSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytiemcv16htnoc9f8kqo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-3 Select the styles&lt;/strong&gt;&lt;br&gt;
After that you have select the style of the font. (Eg: Thin 100, Extra-Light 200 etc...).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8wfYkf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfxzvpwmiqjtjavum18i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8wfYkf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfxzvpwmiqjtjavum18i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step-4 There are 2 ways to import the font&lt;/strong&gt;&lt;br&gt;
     &lt;strong&gt;1) In HTML file&lt;/strong&gt;&lt;br&gt;
       i) You have to use link tag to import the font in HTML, else you &lt;br&gt;
       can copy the code in the box and paste that code inside you &lt;br&gt;
       html code.&lt;br&gt;
       ii) Now we have successfully added a custom font!! YAYY now we &lt;br&gt;
       just have to use in the CSS property.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpf4os0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp4aphgmlfzhnljy08il.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpf4os0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp4aphgmlfzhnljy08il.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) In CSS file&lt;/strong&gt;&lt;br&gt;
In order to import font only using CSS then you have to click on @import instead of  and copy the code inside it and paste it at the top of your CSS file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4VcAv2SM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfqtr9wwp0eqg2puwfti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4VcAv2SM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfqtr9wwp0eqg2puwfti.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Bonus Tip:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is advise to use link tag to import font in html instead of using @import in css because the html page is the first to load in the browser and so are the link tags, hence the font will load firstm but on the other hand, css file is loaded after the html file, hence decreasing the speed of importing font.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Do visit the community made by me and my friend &lt;a class="mentioned-user" href="https://dev.to/shreyazz"&gt;@shreyazz&lt;/a&gt;
 for more amazing and informative stuff, and if you wanna recommend something or give feedback, feel free to comment😇!&lt;/p&gt;

&lt;p&gt;CodeBox's handles : &lt;a href="https://linktr.ee/CodeBox"&gt;https://linktr.ee/CodeBox&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>vscode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS for large projects</title>
      <author>Neha Sharma </author>
      <pubDate>Sun, 13 Jun 2021 06:50:19 +0000</pubDate>
      <link>https://dev.to/hellonehha/css-for-large-projects-cmi</link>
      <guid>https://dev.to/hellonehha/css-for-large-projects-cmi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#css-for-large-projects"&gt;
  &lt;/a&gt;
  CSS for large projects
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the content I prepared for my youtube channel's video.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#agenda"&gt;
  &lt;/a&gt;
  Agenda:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Why CSS Architecture matter?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are the options&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to decide?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explanations&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-css-architecture-matters"&gt;
  &lt;/a&gt;
  Why CSS architecture matters?
&lt;/h2&gt;

&lt;p&gt;Most developers just focus on JavaScript or its family. As a result, they ignore the styling of the application. Yes, logic is important but look-n-feel is also equally important. As a result, developers end up with messy CSS code which is non-maintainable and non-scalable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-options"&gt;
  &lt;/a&gt;
  What are the options?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;tailwind&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://getbootstrap.com/docs/3.4/css/"&gt;Bootstrap&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://sass-lang.com/"&gt;SCSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.styled-components.com/"&gt;Styled Components&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://emotion.sh/docs/introduction"&gt;Emotion&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-decide"&gt;
  &lt;/a&gt;
  How to decide?
&lt;/h2&gt;

&lt;p&gt;In the end, all the above options produce CSS at the build time. To explain how to architect the CSS for bigger projects I will skip all the frameworks and libs such as tailwind, bootstrap, etc. otherwise I will end up offending someone :).&lt;/p&gt;

&lt;p&gt;To understand the architecture, I will go with SCSS (as developers can use SCSS in HTML/JS, Angular, React, Vue, anywhere.)&lt;/p&gt;

&lt;p&gt;So, how do decide which way to go? Look for:&lt;/p&gt;

&lt;p&gt;1) Maintainability&lt;/p&gt;

&lt;p&gt;2) Scalability&lt;/p&gt;

&lt;p&gt;3) Reusability&lt;/p&gt;

&lt;p&gt;4) Ease to learn, and setup (basically DX)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prework-before-writing-a-single-line-of-code-or-checklist"&gt;
  &lt;/a&gt;
  Pre-work before writing a single line of code (or checklist):
&lt;/h2&gt;

&lt;p&gt;[ ] Which Naming convention to followed?&lt;/p&gt;

&lt;p&gt;[ ] List of browsers with their version, operating systems, mobile and tablets  with their operating system to support&lt;/p&gt;

&lt;p&gt;[ ] List of breakpoints&lt;/p&gt;

&lt;p&gt;[ ] Which font-units: rem, em, px  to followed?&lt;/p&gt;

&lt;p&gt;[ ] Format of the color code to follow&lt;/p&gt;

&lt;p&gt;[ ] Any 3rd party style to be used for: base.css, or any other modules?&lt;/p&gt;

&lt;p&gt;[ ] What to use - flex, grids, float?&lt;/p&gt;

&lt;p&gt;[ ] How long the class name should be?&lt;/p&gt;

&lt;p&gt;[ ] How deep the SCSS nesting should be?&lt;/p&gt;

&lt;p&gt;[ ] What is the color palettes&lt;/p&gt;

&lt;p&gt;[ ] What is the font-scale&lt;/p&gt;

&lt;p&gt;[ ] What is the space-scale&lt;/p&gt;

&lt;p&gt;[ ] Identify the common patterns/components/modules. Eg: there are 2 types of buttons&lt;/p&gt;

&lt;p&gt;[ ] Identify the reusable patterns/components/modules&lt;/p&gt;

&lt;p&gt;[ ] Identify the pages&lt;/p&gt;

&lt;p&gt;Every decision should be documented and make it part of your team's onboarding process. This will help the new developers to onboard easily and understand the code guidelines.&lt;/p&gt;

&lt;p&gt;This will also give you a clear understanding of the project's UX and will bring consistency to the project. &lt;/p&gt;

&lt;p&gt;Eg: If on one page the font size of a heading is 24px but on another page the same level heading font size is 14px then it is inconsistent. &lt;/p&gt;

&lt;p&gt;Flag this to the UX team to rectify this. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With consistency developers can easily implement reusability.&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How? Let's again go back to the heading example. &lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;Due to the consistency of font size and style of the same level of headings in the application, the developer will write the code once and will reuse it. Also, in the future, if any developer will add the same level of heading the developer doesn't need to add any style code. As the style is already written for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structure-of-the-css"&gt;
  &lt;/a&gt;
  Structure of the CSS
&lt;/h2&gt;

&lt;p&gt;Always keep your style files into a dedicated folder - style/css&lt;/p&gt;

&lt;p&gt;Next, is to understand how to organise your style. It is important that instead of writing whole project's code in one file. We should organise it into multiple files (as per the requirements).&lt;/p&gt;

&lt;p&gt;Now, we will get into the details:&lt;/p&gt;

&lt;p&gt;1) Base &lt;/p&gt;

&lt;p&gt;2) variables&lt;/p&gt;

&lt;p&gt;3) mixins&lt;/p&gt;

&lt;p&gt;4) breakpoints&lt;/p&gt;

&lt;p&gt;5) layouts&lt;/p&gt;

&lt;p&gt;3) common components/modules&lt;/p&gt;

&lt;p&gt;4) pages&lt;/p&gt;

&lt;p&gt;5) themes&lt;/p&gt;

&lt;p&gt;6) vendors&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-framework-to-use"&gt;
  &lt;/a&gt;
  Which framework to use?
&lt;/h2&gt;

&lt;p&gt;Well, this depends a lot on the project ( I know you will be annoyed by this answer. But this is the fact). But a few things to consider while selecting framework/lib:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Knowledge of CSS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is your team or you has strong knowledge of CSS. If yes, then you have loads of options. But if you doesn't know CSS then you can go for the any CSS lib. It will be very helpful.&lt;/p&gt;

&lt;p&gt;PS: There are many backend developers who are responsible to make UI too for them going with CSS libs is very useful. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Timeline of project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the timeline is too tight and you are not sure about how the writing CSS form scratch will come out then anyway go with a CSS lib.&lt;/p&gt;

&lt;p&gt;(If you are confident that you can manage writing the project's CSS from scratch in tight timeline. Then go ahead.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Complexity of the project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the project is complex you need to evaluate writing the styles from scratch vs going for CSS libs. A few developers prefer to write the CSS to have total control vs going for the libs/framework. Whereas a  few developers prefer to offload the complexity to the libs/framework&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Scalability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is the solution you are going to pick is scalable or not and how easy it would be?&lt;/p&gt;

&lt;p&gt;How fast a developer can add new features? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Maintainability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, one needs to consider about maintainability. How the time-expensive it would be for a developer to fix a bug, or adding new line of code. How many files would the developer is going to change for say for adding a theme.&lt;/p&gt;

&lt;p&gt;Also, if you are going with the lib/framework do consider the future upgrades from creators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Compatibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is the Browser, OS, devices, support of libs and frameworks.&lt;/p&gt;

&lt;p&gt;Happy learning!!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Python's Collections Module: Counter </title>
      <author>Kathan Vakharia</author>
      <pubDate>Sun, 13 Jun 2021 06:40:22 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-collections-module-counter-2gn</link>
      <guid>https://dev.to/kathanvakharia/python-collections-module-counter-2gn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A Counter is a &lt;code&gt;dict&lt;/code&gt; subclass for counting &lt;strong&gt;hashable&lt;/strong&gt; objects → any object which is not mutable. &lt;/p&gt;

&lt;p&gt;It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#To use it, ofcourse we need to first import it
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-counter"&gt;
  &lt;/a&gt;
  Using Counter
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;myList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;myString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;

&lt;span class="c1"&gt;# simply pass any iterable
# Counter(iterable) returns a Counter obj
&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#How does a Counter obj look?
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;"""Output
Counter({1: 4, 2: 3, 'k': 2, 3: 2, 'a': 1})
Counter({'o': 3, 'd': 3, 'e': 2, 'C': 1, 'B': 1, 'l': 1})
""""
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡 As counter is a subclass of dictionary, it has all the methods of the dictionary. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-mostcommonn-endraw-method"&gt;
  &lt;/a&gt;
  &lt;code&gt;most_common(n)&lt;/code&gt; method
&lt;/h2&gt;

&lt;p&gt;The  &lt;code&gt;most_common(n)&lt;/code&gt; returns a list of n most common objects along with their respective counts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="n"&gt;myList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'k'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;myString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CodeBlooded"&lt;/span&gt;

&lt;span class="c1"&gt;# simply pass any iterable
# Counter(iterable) returns a Counter object
&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;count2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# If n is omitted or None, most_common()
# returns all elements in the counter.
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="s"&gt;"""Output
Counter({1: 4, 2: 3, 'k': 2, 3: 2, 'a': 1})
Counter({'o': 3, 'd': 3, 'e': 2, 'C': 1, 'B': 1, 'l': 1})
[(1, 4), (2, 3)]
[('o', 3), ('d', 3), ('e', 2)]
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#common-patterns-with-raw-counter-endraw-"&gt;
  &lt;/a&gt;
  Common Patterns with &lt;code&gt;Counter&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;For a given &lt;code&gt;Counter&lt;/code&gt; object &lt;code&gt;c&lt;/code&gt;, &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHXxJxrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4a4meg6qwxaaogw16bw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHXxJxrm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4a4meg6qwxaaogw16bw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💡 Feel free to fire up your ipython or python shell and try this commands out for better understanding :)&lt;/p&gt;

&lt;p&gt;Let's wrap up this post with a problem where Counter is very helpful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-most-frequent-word-using-counter-in-a-given-string"&gt;
  &lt;/a&gt;
  Finding most frequent word using Counter in a given string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"string with repeated word Jello So what is Jello Who cares what is Jello anyways but Jello must be repeated Jello number of Jello times"&lt;/span&gt;

&lt;span class="c1"&gt;# You can use re.split() for more complex patterns!
&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;words_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Most Occurring word is"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;words_count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;most_common&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="s"&gt;"""Output
Most Occurring word is [('Jello', 6)]
"""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;❓ if you notice, while printing the Counter object - it doesn't maintain the &lt;strong&gt;order&lt;/strong&gt; of elements present in the iterable passed. Do you know why?&lt;/p&gt;

&lt;p&gt;Try googling or duckduckgoing! I will answer this question in next post 😉&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Aloha! Welcome to .NET MAUI</title>
      <author>Melissa Houghton</author>
      <pubDate>Sun, 13 Jun 2021 06:31:53 +0000</pubDate>
      <link>https://dev.to/melissahoughton/aloha-welcome-to-net-maui-2n86</link>
      <guid>https://dev.to/melissahoughton/aloha-welcome-to-net-maui-2n86</guid>
      <description>&lt;p&gt;Aloha! Welcome to .NET MAUI! The all-new .NET Multi-platform App UI (MAUI). Announced at &lt;a href="https://news.microsoft.com/build-2020-book-of-news/"&gt;Microsoft Build 2020&lt;/a&gt;, Microsoft has evolved Xamarin.Forms and taken the next step in the &lt;a href="https://channel9.msdn.com/Events/Build/2020/BOD106"&gt;.NET unification&lt;/a&gt; to give you a cross-platform mobile-first framework for Android, iOS, macOS, and Windows. .NET MAUI will introduce new ways to build applications. Available in &lt;a href="https://dotnet.microsoft.com/download/dotnet/6.0"&gt;.NET 6&lt;/a&gt;, in preview now!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lfkkI1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://melissadevstorage.blob.core.windows.net/melissadevblob/dotnet%2520maui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lfkkI1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://melissadevstorage.blob.core.windows.net/melissadevblob/dotnet%2520maui.png" alt=".NET MAUI"&gt;&lt;/a&gt;&lt;em&gt;.NET MAUI (source: &lt;a href="https://youtu.be/GJ_PaRNDe9E"&gt;Microsoft&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-net-maui"&gt;
  &lt;/a&gt;
  What is .NET MAUI?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;.NET Multi-platform App UI (MAUI) is the evolution of Xamarin.Forms extended from mobile to desktop scenarios with UI controls rebuilt from the ground up for performance and extensibility&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Maddy Leger, Program Manager Xamarin/.NET MAUI Team "&lt;a href="https://youtu.be/fPEdgXeqhE4"&gt;The Future of Native Apps Development in .NET 6&lt;/a&gt;"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;MAUI will help you deliver high-performance, cross-platform, native desktop and mobile apps from a single codebase. With .NET MAUI, you can build your apps for any device from a single codebase and project system, using one language, one set of libraries, and one UI stack for all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-xamarin-and-xamarinforms"&gt;
  &lt;/a&gt;
  What are Xamarin and Xamarin.Forms?
&lt;/h3&gt;

&lt;p&gt;The most common descriptor for MAUI is &lt;em&gt;the evolution of Xamarin.Forms&lt;/em&gt;, but what are Xamarin and Xamarin.Forms?&lt;/p&gt;

&lt;p&gt;Xamarin is an open-source .NET platform for building iOS, Andriod, macOS, and Windows applications. Introduced in 2011, Xamarin allows you to share business logic across platforms using .NET while creating a native UI for each. Xamarin allows developers to share an average of &lt;a href="https://docs.microsoft.com/en-us/xamarin/get-started/what-is-xamarin"&gt;90% of their application across platforms&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qutvSruy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://melissadevstorage.blob.core.windows.net/melissadevblob/xamarin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qutvSruy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://melissadevstorage.blob.core.windows.net/melissadevblob/xamarin.png" alt=".NET Mobile Apps with Xamarin"&gt;&lt;/a&gt;&lt;em&gt;.NET Mobile Apps with Xamarin (source: &lt;a href="https://channel9.msdn.com/Events/Build/2020/BOD107"&gt;Microsoft&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To help with the overhead of creating native UI's for each platform, we have Xamarin.Forms.&lt;/p&gt;

&lt;p&gt;Xamarin.Forms is an open-source UI framework that allows you to combine the code for Xamarin.Android, Xamarin.iOS, Xamarin.Mac and Windows applications into a single shared codebase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GabSjhho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/xamarin/get-started/what-is-xamarin-forms-images/xamarin-forms-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GabSjhho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/xamarin/get-started/what-is-xamarin-forms-images/xamarin-forms-architecture.png" alt="Xamarin Forms Architecture"&gt;&lt;/a&gt;&lt;em&gt;What is Xamarin.Forms (source: &lt;a href="https://docs.microsoft.com/en-us/xamarin/get-started/what-is-xamarin-forms"&gt;Microsoft&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Microsoft aims to create a unified .NET platform, replacing .NET Framework, .NET Core, and Xamarin. .NET MAUI is the next step in unifying .NET, replacing Xamarin.Forms. It addresses some of the issues and downsides of Xamarin.Forms while providing an updated architecture on top of the new generation of .NET and project system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-my-xamarinforms-skills-and-applications"&gt;
  &lt;/a&gt;
  What about my Xamarin.Forms skills and applications?
&lt;/h3&gt;

&lt;p&gt;Think of .NET MAUI as a new version of Xamarin.Forms. Microsoft has assured us that our Xamarin.Forms skills are transferable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Xamarin.Forms developers will hit the ground running with new projects in .NET MAUI, using all the same controls and APIs they have grown to know and love. &lt;em&gt;&lt;a href="https://docs.microsoft.com/en-us/xamarin/get-started/what-is-xamarin-forms"&gt;source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There will also be tools and guidance to help migrate applications. The team expect to have a version of the .NET Upgrade Assistant that can migrate Xamarin and Xamarin.Forms projects to .NET 6 and .NET MAUI in the &lt;a href="https://github.com/dotnet/maui/wiki/Roadmap#net-maui-in-net-6-preview-6-july-2021"&gt;July 2021 Preview 6 release&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-different-about-maui"&gt;
  &lt;/a&gt;
  What is different about MAUI?
&lt;/h2&gt;

&lt;p&gt;If we already have Xamarin.Forms, what is so special about .NET MAUI? Microsoft is rebuilding the core of Xamarin.Forms, bringing us performance improvements, consistent design systems, and an extension from mobile to desktop.&lt;/p&gt;

&lt;p&gt;Key Improvements in MAUI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single project experience across platforms&lt;/li&gt;
&lt;li&gt;.NET Hot Reload&lt;/li&gt;
&lt;li&gt;Modern App Patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#single-project-experience"&gt;
  &lt;/a&gt;
  Single Project Experience
&lt;/h3&gt;

&lt;p&gt;.NET MAUI allows us to have a single project experience instead of one project for each target platform. A single project improves the developer experience by enabling developers to target and debug different devices without switching between projects or navigating the idiosyncrasies of each platform. We can use one language across our application to target all the supported platforms and easily share resources across while maintaining an option for platform-specific code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#net-hot-reload"&gt;
  &lt;/a&gt;
  .NET Hot Reload
&lt;/h3&gt;

&lt;p&gt;Hot reload increases productivity for .NET developers, allowing instant updates to running applications with new code changes. Removing the build and deploy interruptions saves time and allows the development flow to continue. In .NET, they are expanding Hot Reload, bringing complete support to .NET MAUI along with other workloads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modern-app-patterns"&gt;
  &lt;/a&gt;
  Modern App Patterns
&lt;/h3&gt;

&lt;p&gt;Model-View-ViewModel (MVVM) and XAML pattern, used in existing Xamarin.Forms applications, will continue to be supported and improved with the evolution. .NET MAUI will introduce further support for the Model-View-Update (MVU) development pattern, popular in C#, enabling developers to write fluent C# UI, creating a code-first development experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-from-microsoft-build-2021"&gt;
  &lt;/a&gt;
  What's new from Microsoft Build 2021?
&lt;/h2&gt;

&lt;p&gt;During Microsoft Build 2021, Microsoft announced the availability of &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-4/"&gt;.NET MAUI Preview 4&lt;/a&gt;. Each preview provides us with more features and tools with general availability scheduled for November 2021 at &lt;a href="https://www.dotnetconf.net/"&gt;.NET Conf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the release of Preview 4, you can now create functional applications across all supported platforms using .NET MAUI. In addition, they have added new capabilities to support running Blazor on desktop using .NET MAUI, allowing the reuse of Blazor UI components across native desktop and web applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3-V4oG1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/davidortinau/WeatherTwentyOne/blob/main/images/maui-weather-hero-sm.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3-V4oG1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/davidortinau/WeatherTwentyOne/blob/main/images/maui-weather-hero-sm.png%3Fraw%3Dtrue" alt="Weather Twenty One .NET MAUI Preview 4"&gt;&lt;/a&gt;&lt;em&gt;Weather Twenty One .NET MAUI Preview 4 Demo (source: &lt;a href="https://github.com/davidortinau/WeatherTwentyOne"&gt;David Ortinau&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alongside Preview 4 is the release of &lt;a href="https://visualstudio.microsoft.com/vs/preview/"&gt;Visual Studio 2019 version 16.11 Preview&lt;/a&gt;. The Visual Studio 2019 16.11 Preview enables .NET Hot Reload for MAUI and provides productivity features for developing .NET MAUI projects. A project template option for a .NET MAUI application is now available in the 16.11 Preview, encompassing the new solution format with the multi-targeted project.&lt;/p&gt;

&lt;p&gt;To see what is coming in future releases, visit the MAUI &lt;a href="https://github.com/dotnet/maui/wiki/roadmap"&gt;product roadmap&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-get-started"&gt;
  &lt;/a&gt;
  How can you get started?
&lt;/h2&gt;

&lt;p&gt;Before you get started, Microsoft has created a &lt;code&gt;dotnet tool&lt;/code&gt; called &lt;code&gt;maui-check&lt;/code&gt; that evaluates your system for development in .NET MAUI. The tool will scan for the required dependencies and try to fix any issues for you or suggest a way to fix them yourself.&lt;/p&gt;

&lt;p&gt;Tool source: &lt;a href="https://github.com/Redth/dotnet-maui-check"&gt;https://github.com/Redth/dotnet-maui-check&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet tool &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; Redth.Net.Maui.Check
maui-check
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have the complete .NET MAUI development environment setup, you can create your first app by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new maui &lt;span class="nt"&gt;-n&lt;/span&gt; AlohaMaui
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You have a new .NET MAUI application.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Check out the resources below to find out more about .NET MAUI and the exciting future in the .NET ecosystem. Mahalo!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/maui"&gt;https://github.com/dotnet/maui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/maui/wiki/Getting-Started"&gt;https://github.com/dotnet/maui/wiki/Getting-Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-4/"&gt;https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-4/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/events/build-may-2021/azure/breakouts/od485/"&gt;https://docs.microsoft.com/en-us/events/build-may-2021/azure/breakouts/od485/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/xamarin/get-started/what-is-xamarin-forms"&gt;https://docs.microsoft.com/en-us/xamarin/get-started/what-is-xamarin-forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devblogs.microsoft.com/xamarin/the-new-net-multi-platform-app-ui-maui/"&gt;https://devblogs.microsoft.com/xamarin/the-new-net-multi-platform-app-ui-maui/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://channel9.msdn.com/Events/Build/2020/BOD107?ocid=AID3012654&amp;amp;WT.mc_id=build2020-azuredevtips-micrum"&gt;https://channel9.msdn.com/Events/Build/2020/BOD107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://channel9.msdn.com/Events/Build/2020/BOD106"&gt;https://channel9.msdn.com/Events/Build/2020/BOD106&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://channel9.msdn.com/Shows/On-NET/A-Journey-to-NET-MAUI"&gt;https://channel9.msdn.com/Shows/On-NET/A-Journey-to-NET-MAUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>maui</category>
      <category>crossplatform</category>
    </item>
    <item>
      <title>Python's Collection Module: Introduction</title>
      <author>Kathan Vakharia</author>
      <pubDate>Sun, 13 Jun 2021 06:12:17 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/python-s-collection-module-introduction-4c4b</link>
      <guid>https://dev.to/kathanvakharia/python-s-collection-module-introduction-4c4b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://docs.python.org/3/library/collections.html"&gt;module&lt;/a&gt; implements specialized container datatypes providing alternatives to Python’s general purpose built-in containers, &lt;code&gt;dict, list, set, and tuple.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-types-does-it-offer"&gt;
  &lt;/a&gt;
  What types does it offer?
&lt;/h2&gt;

&lt;p&gt;Following are the  most commonly used special container types of collections module,&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;dict subclass for counting hashable objects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OrderedDict&lt;/td&gt;
&lt;td&gt;dict subclass that remembers the order entries were added&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;defaultdict&lt;/td&gt;
&lt;td&gt;dict subclass that calls a factory function to supply missing values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deque&lt;/td&gt;
&lt;td&gt;list-like container with fast appends and pops on either end&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;namedtuple&lt;/td&gt;
&lt;td&gt;factory function for creating tuple subclasses with named fields&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#and"&gt;
  &lt;/a&gt;
  And...
&lt;/h2&gt;

&lt;p&gt;We can also implement a custom container type like &lt;code&gt;OrderedCounter&lt;/code&gt; using the container types provided by collections module.&lt;/p&gt;

&lt;p&gt;The next series of posts  will dive deep into the above mentioned container types provided by collections module.&lt;/p&gt;

&lt;p&gt;Stay Tuned !&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>collections</category>
    </item>
    <item>
      <title>New Features of JavaScript 2021</title>
      <author>Animesh Dhanuk</author>
      <pubDate>Sun, 13 Jun 2021 06:09:35 +0000</pubDate>
      <link>https://dev.to/animeshdhanuk/new-features-of-javascript-2021-4p1k</link>
      <guid>https://dev.to/animeshdhanuk/new-features-of-javascript-2021-4p1k</guid>
      <description>&lt;p&gt;Nowadays we should know about some programming languages like C language, C++, CSS, JavaScript, Python, etc. Today we discuss new features of JavaScript that are very useful for programmers/ coders/ developers.&lt;/p&gt;

&lt;p&gt;JavaScript is the easiest programming language to learn for beginners. You can learn it from the tutorial by yourself.JavaScript is the front-end programming language.JavaScript gives some new features in 2021 that are very helpful for developers/ coders/ programmers. A few of the features of JavaScript given below: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-logical-operators"&gt;
  &lt;/a&gt;
  1. Logical Operators
&lt;/h2&gt;

&lt;p&gt;JavaScript have AND, OR, NOT operators but in new JavaScript updated three new logical operators are as follow: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-ampamp-operator"&gt;
  &lt;/a&gt;
  A. &amp;amp;&amp;amp;= Operator
&lt;/h2&gt;

&lt;p&gt;In the new logical operator if X variable has a specific value, then the variable should be assigned the value of variable Y. That's why we use a console.use(X), now the value of the variable of X is a change from 10 to 15.Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let X = 10;
    let Y = 15;
    X &amp;amp;&amp;amp;= Y;
    console.use(X);
    // Now, the output of variable X is 15.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#b-operator"&gt;
  &lt;/a&gt;
  B. ||= Operator
&lt;/h2&gt;

&lt;p&gt;This operator is the opposite of &amp;amp;&amp;amp;= operator. In this case value of variable X is not change. If variable X has the wrong value then variable X and variable Y will be equal. Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let X = 10;
let Y = 15;
X &amp;amp;&amp;amp;= Y;
console.use(X);
// Now, the output of variable X is 10.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#c-operator"&gt;
  &lt;/a&gt;
  C. ??= Operator
&lt;/h2&gt;

&lt;p&gt;This operator is used to check the value of the variable is NULL or not. Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let X;
    let Y = 15;
    X ??= 10;
    console.use(X);
    // Now, the output of variable X is 10.

Logic of this operator:
    if(X == NULL ||  X == undefined){
    X = 10
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-replaceall-method-using-string"&gt;
  &lt;/a&gt;
  2. replaceAll method using String
&lt;/h2&gt;

&lt;p&gt;We all use replaceAll method using string. The new JavaScript replace method to have a limitation to change the word in a string. It changes only one word at a time.If you want to replace all words at a time you can use the regular expression. Now let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// with regex
let str = "Hello World!, Hello Their;"
console.log(str.replace(/Hello/g, "Hii"));
// Output will be "Hii World!, Hii Their;"

// without regex
let str = "Hello World!, Hello Their;"
console.log(str.replace('Hello', 'Hii'));
// output will be"Hii World!, Hello Their;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-using-underscores-for-integers-as-a-separator"&gt;
  &lt;/a&gt;
  3. Using underscores for integers as a separator
&lt;/h2&gt;

&lt;p&gt;Sometimes Integers are used as a data type in a string and array. It's very difficult to find out the perfect number of elements that are in million or billion.&lt;/p&gt;

&lt;p&gt;But now in the latest JavaScript, we can easily find the number with the help of underscores(_). We can use underscores as separators in the integer. Let see the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let number = 1_000_000; // one million
    console.log(number);
    // output will be 1000000(the number will remain an integer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-promiseany"&gt;
  &lt;/a&gt;
  4. Promise.any()
&lt;/h2&gt;

&lt;p&gt;Promise.any() is a new function in JavaScript.Promise.any() takes an iterable of Promise objects and, as soon as one of the promises in the iterable fulfills, returns a single promise that resolves with the value from that promise. If no promises in the iterable fulfill, then the returned promise is rejected with an AggregateError, a new subclass of Error that groups together individual errors. This method is opposite from promis.all(). Let see the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        const promise1 = Promise.reject(0);
        const promise2 = new Promise((resolve) =&amp;gt; setTimeout(resolve, 25, 'Even'));
        const promise3 = new Promise((resolve) =&amp;gt; setTimeout(resolve, 30, 'Odd'));
        const promises = [promise1, promise2, promise3];
        Promise.any(promises).then((value) =&amp;gt; console.log(value));
        // output will be "Even" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/05/new-features-of-javascript-2021.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Benchmarking Algorithm Speed</title>
      <author>Zach</author>
      <pubDate>Sun, 13 Jun 2021 05:57:07 +0000</pubDate>
      <link>https://dev.to/zbretz/benchmarking-algorithm-speed-2h95</link>
      <guid>https://dev.to/zbretz/benchmarking-algorithm-speed-2h95</guid>
      <description>&lt;p&gt;Learning about Big O notation has helped me to understand just how shallow I've been thinking about my code. Which is fine - you don't know what you don't know. Besides, I haven't worked with humongous data sets or built speed-sensitive applications and so the world of efficient coding hasn't been, or felt, relevant to me. Obviously, that's changing.&lt;/p&gt;

&lt;p&gt;Here's one thing I've learned: searching linearly through an ordered array for a specific item in that array is less efficient than applying a binary search to that problem. The former's performance can be described as O(n), and the latter's O(log n).&lt;/p&gt;

&lt;p&gt;The theory is great. But I always like to see something work, and not just know about it. So I thought it'd be helpful -- and interesting -- to see it in action and so I wrote some very simple benchmarking tests applying two functions, linearSearch() and binarySearch() to the same data sets and comparing their performance (speed).&lt;/p&gt;

&lt;p&gt;Well, it was a big dud. Instead of watching the search time scale linearly in the linearSearch() case, the results appeared exponential. I tried quite a few approaches in debugging. Apparently Javascript's built-in benchmarking tools aren't &lt;a href="https://stackoverflow.com/a/66615742"&gt;terribly consistent&lt;/a&gt; on small time scales, so I made sure to increase the number of tests I ran for every case, and tracked the averages of those large numbers of tests. That only strengthened the exponential trend. I thought maybe the function call itself (the call embedded between the 'start' and 'stop' tools of the benchmark tools) was slowing things down. So I stripped the search down to the bare for-loop and ran that. Same results. &lt;/p&gt;

&lt;p&gt;Hm. Feeling stuck, I thought I'd conduct a sanity check. Here's what I did....&lt;/p&gt;

&lt;p&gt;....&lt;/p&gt;

&lt;p&gt;....&lt;/p&gt;

&lt;p&gt;Ok, I'll be honest here. I went back into the code so that I could copy it and paste it here. And after looking at it, I think the code I was testing was actually scaling exponentially. So maybe I was reading accurate results, and just misinterpreting. I also got some other funky results. And then eventually I got some results that matched my expectations (read: hopes).&lt;/p&gt;

&lt;p&gt;So here it is. Literally just a test to check whether the performance of an extremely bare-bones for-loop will scale linearly with its inputs. Geez I can't even call it a data set. Just the loop count. Ah well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
function sanityCheck(){

    for(let factor = 1; factor&amp;lt;122; factor+=5){
    const t0 = performance.now();
    var timeSum = 0;
    for (let x=1; x&amp;lt;501; x++){
      var zeroInteger = 0;
      for (let i = 0; i&amp;lt;10000*factor; i++){
          zeroInteger +=0;
        }
      const t1 = performance.now();
     timeSum += t1-t0;
    }
    console.log(timeSum/500);
  }
}
sanityCheck();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a reminder we were counting the time required to run through a useless loop several tens of thousands of times. The chart of the averages looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6qhDZ3IJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3tk160k54o6az1b9wcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6qhDZ3IJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3tk160k54o6az1b9wcc.png" alt="results chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks pretty linear to me. 'Looks' probably isn't the most precise term, but after the struggle I had, you look for wins wherever you can get em.&lt;/p&gt;

&lt;p&gt;This was pretty much my entire Saturday. I'd be embarrassed if I didn't expect to improve massively. And on some level I'm sure this moved me forward, as much as it feels like I have been running in place (or backwards) all day.&lt;/p&gt;

&lt;p&gt;I have a few takeaways. Make sure you know what you're testing for and test for that. Carelessness (or stupidity) in testing can really throw you off. It can throw false positives that fool you into thinking you know what you don't know. It can also have you running in loops trying to make sense of results that don't make sense. I think I got a taste of that today. &lt;/p&gt;

&lt;p&gt;Another lesson that I'm digesting as I type is that while all of this prose might be interesting to me, it sure takes up a lot of time. I mean, it might be cool to reflect on someday, but for the sake of productivity, I'm going to try to keep the narrative to myself and commit to posting code and working demonstrations of the things that I've learned.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to use Open Graph</title>
      <author>Kritebh Lagan Bibhakar</author>
      <pubDate>Sun, 13 Jun 2021 05:51:56 +0000</pubDate>
      <link>https://dev.to/kritebh/how-to-use-open-graph-2a1h</link>
      <guid>https://dev.to/kritebh/how-to-use-open-graph-2a1h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tKV4sRSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a170echpghkj0p67izy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tKV4sRSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a170echpghkj0p67izy.png" alt="Open Graph Tag Comparison"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now tell me which one more likely to be clicked by a normal user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2Wf4evHz9Yd7Y8mPNR/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2Wf4evHz9Yd7Y8mPNR/giphy-downsized.gif" alt="One"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First Link, but WHY ??&lt;/p&gt;

&lt;p&gt;Because at first glance I got what's in that link and it is more appealing than the second one.&lt;/p&gt;

&lt;p&gt;Open graph was originally developed by Facebook and now it is used by Twitter, Pinterest and LinkedIn.&lt;/p&gt;

&lt;p&gt;The benefit of Open Graph is simple, it converts any webpage into a social rich object which becomes more attractive on Social Media upon sharing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-graph-meta-tag"&gt;
  &lt;/a&gt;
  Open Graph Meta Tag
&lt;/h3&gt;

&lt;p&gt;Implementing Open Graph is very simple, You just need to write some meta tag in the head section of an HTML document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Open Graph Uses"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"http://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://ogp.me/logo.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:width"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:height"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:alt"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Open Graph logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"The Open Graph protocol enables any web page to become a rich object in a social graph."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Open Graph&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the meta property with "og" is the Open Graph Tag.&lt;/p&gt;

&lt;p&gt;There are different types of Open Graph Meta Tag which you can use as per your requirement.&lt;/p&gt;

&lt;p&gt;Some of the most commonly used meta tags are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;og:title&lt;/li&gt;
&lt;li&gt;og:image&lt;/li&gt;
&lt;li&gt;og:url&lt;/li&gt;
&lt;li&gt;og:type&lt;/li&gt;
&lt;li&gt;og:description&lt;/li&gt;
&lt;li&gt;og:locale&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whole List of Tags - &lt;a href="https://ogp.me/"&gt;Open Graph Tags&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validate-the-tags"&gt;
  &lt;/a&gt;
  Validate the Tags
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/tools/debug/"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cards-dev.twitter.com/validator"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.pinterest.com/tools/url-debugger/"&gt;Pinterest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, if you have any suggestions or feedback let me know in the comment.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>programming</category>
    </item>
    <item>
      <title>DEV COMMUNITY BADGE</title>
      <author>Ammar Mukadam</author>
      <pubDate>Sun, 13 Jun 2021 05:35:38 +0000</pubDate>
      <link>https://dev.to/ammarmukadam/dev-community-badge-29n4</link>
      <guid>https://dev.to/ammarmukadam/dev-community-badge-29n4</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ammarmukadam"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQ9x1qu_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2fltix0v2e0sb.cloudfront.net/dev-badge.svg" alt="Ammar Mukadam's DEV Community Profile"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>security</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Back to Basic: Should we use Rem, Em or Pixel?</title>
      <author>Theodorus Clarence</author>
      <pubDate>Sun, 13 Jun 2021 05:05:59 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/back-to-basic-should-we-use-rem-em-or-pixel-1hd0</link>
      <guid>https://dev.to/theodorusclarence/back-to-basic-should-we-use-rem-em-or-pixel-1hd0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Using Rem and Em units is better than using px.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we use px, it means that we hardcode the font-size to all of the users. The user can't change the value whatsoever. This actually troubles the user that wants to have a bigger font-size from the default &lt;code&gt;16px&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-rem-works"&gt;
  &lt;/a&gt;
  How do rem works?
&lt;/h2&gt;

&lt;p&gt;Rem and Em is a relative unit that many developers use to preserve accessibility.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rem (root em) stands for "root element's font-size"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usually, the default root font-size is &lt;code&gt;16px&lt;/code&gt;. So, if we see a font-size that is 1rem, we are looking at 16px&lt;/p&gt;

&lt;p&gt;Because Rem means root element's font-size, we can also override the default value by using CSS like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we changed the root font-size, now &lt;code&gt;1rem = 20px&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-we-want-to-use-value-other-than-16px"&gt;
  &lt;/a&gt;
  What if we want to use value other than 16px?
&lt;/h3&gt;

&lt;p&gt;We can get the rem value of a pixels by dividing it with 16px. For example, if we want to use a font-size of 20px, we will write &lt;code&gt;font-size: 1.25rem&lt;/code&gt;. Which is 20/16.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-its-so-annoying-"&gt;
  &lt;/a&gt;
  But it's so annoying ?!
&lt;/h3&gt;

&lt;p&gt;Yep, using rem will make the development process longer because we need to calculate the rem value. But this gives some freedom to the user, and we are not messing with the accessibility.&lt;/p&gt;

&lt;p&gt;They can change the font-size like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OUVToTBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siei13f4x98q0nxpzgun.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUVToTBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siei13f4x98q0nxpzgun.gif" alt="resize-rem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-em-works"&gt;
  &lt;/a&gt;
  How do em works?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Em stands for "parent element's font-size"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because css is &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance"&gt;cascading and inheritable&lt;/a&gt;, em will inherit font-size value from the parent element. For example, we have a parent div, and p tag inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;hi&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;8px&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;??px&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because &lt;code&gt;p&lt;/code&gt; inherit the parent element's font-size, so &lt;code&gt;1em = 8px&lt;/code&gt;. This means, that the &lt;code&gt;p&lt;/code&gt; will have &lt;code&gt;font-size: 8px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That kind of confusing right? That's why using &lt;strong&gt;em for font-size is not recommended&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always use REM for font-size to be consistent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#where-can-we-use-em-unit"&gt;
  &lt;/a&gt;
  Where can we use em unit?
&lt;/h3&gt;

&lt;p&gt;Because of the inheritable, em unit will be helpful for &lt;strong&gt;padding&lt;/strong&gt; and *&lt;em&gt;margin&lt;/em&gt;. By using em, we can make the padding and margin scale proportionately&lt;/p&gt;

&lt;p&gt;For example, we are making a button. The button can have different font-sizes in mobile and desktop view. We can see the difference between &lt;strong&gt;rem&lt;/strong&gt; and &lt;strong&gt;em&lt;/strong&gt; on this codepen:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/theodorus/embed/OJbwPow?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As we can see, by using &lt;strong&gt;em&lt;/strong&gt; the padding stays proportionate to the scaling of font-size. Whereas &lt;strong&gt;rem&lt;/strong&gt; has the same padding value on any font-sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-we-really-cant-use-px-anymore"&gt;
  &lt;/a&gt;
  Do we really can't use px anymore?
&lt;/h2&gt;

&lt;p&gt;For me, usage of rem and em will be very good on the elements that are crucial like font-size, padding, and margin. But, when giving out border-width, I do still use px value because the value we give is so small that it is almost not noticeable if we change the root font-size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There you go. Try to always use rem for font-size. And utilize the benefit of em for the proportionate padding if you need to.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://theodorusclarence.com/?ref=devto"&gt;my personal site&lt;/a&gt;, find more &lt;a href="https://theodorusclarence.com/blog?ref=devto"&gt;blog posts&lt;/a&gt; and &lt;a href="https://theodorusclarence.com/library?ref=devto"&gt;code snippets library&lt;/a&gt; I put up for easy access on my site 🚀&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
