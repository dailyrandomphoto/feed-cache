<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Complete Roadmap for Becoming a Backend Developer: Step-By-Step Instructions</title>
      <author>Creative Tim</author>
      <pubDate>Mon, 13 Dec 2021 08:30:30 +0000</pubDate>
      <link>https://dev.to/creativetim_official/the-complete-roadmap-for-becoming-a-backend-developer-step-by-step-instructions-d4j</link>
      <guid>https://dev.to/creativetim_official/the-complete-roadmap-for-becoming-a-backend-developer-step-by-step-instructions-d4j</guid>
      <description>&lt;p&gt;Interested in becoming a backend developer? You’ve come to the right place. If you’ve got some coding experience but are new to programming, this guide will teach you all about backend development. It can be overwhelming to learn everything at once, which is why we break it down into steps. This way, you can learn at your own pace and get help when you need it! &lt;/p&gt;

&lt;p&gt;As a new developer, it’s essential to know the basics before moving to more advanced topics. This roadmap will provide an overview of what you need to know as a beginner getting started with backend development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table Of Content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#1-what-is-backend-development"&gt;1. What is backend development?&lt;/a&gt;&lt;br&gt;
&lt;a href="#2-why-learn-backend-development"&gt;2. Why learn backend development?&lt;/a&gt;&lt;br&gt;
&lt;a href="#3-how-to-get-started-with-backend-development"&gt;3. How to get started with backend development&lt;/a&gt;&lt;br&gt;
&lt;a href="#4-the-roadmap-for-beginners"&gt;4. The roadmap for beginners&lt;/a&gt;&lt;br&gt;
&lt;a href="#41-basicslearn-a-language-and-database"&gt;4.1 Basics - Learn a Language and Database&lt;/a&gt;&lt;br&gt;
&lt;a href="#42-intermediatelearn-a-backend-framework"&gt;4.2 Intermediate - Learn a backend Framework&lt;/a&gt;&lt;br&gt;
&lt;a href="#43-advancedapi-caching-security-and-testing"&gt;4.3 Advanced - Api, Caching, Security, and Testing&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="#5-extra-stuffgood-to-know"&gt;5. Extra Stuff - Good to know&lt;/a&gt;&lt;br&gt;
&lt;a href="#6-next-steps"&gt;6. Next Steps&lt;/a&gt;&lt;br&gt;
&lt;a href="#7-conclusion"&gt;7. Conclusion&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-backend-development"&gt;
  &lt;/a&gt;
  1. What is backend development?
&lt;/h2&gt;

&lt;p&gt;Backend developers handle the code on the “back-end” of websites. This means that the server communicates with the database to store and retrieve information. To create a website, most of your code will be written in HTML, CSS, and JavaScript. Most people don’t know that this code is what makes your website responsive or interactive. In addition, developers use backend code to program actions on the server.&lt;/p&gt;

&lt;p&gt;For example, if you want to send an email when someone registers for your company’s newsletter, backend developers will write the code to accomplish this task. They may use PHP or Python to write the code for your website.&lt;br&gt;
Another way backend developers can help you is by optimizing the performance of your website. They can also maintain your database, write scripts in languages like Bash, and work with data. If you want to become a backend developer, these are just some of the skills you’ll need to know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-why-learn-backend-development"&gt;
  &lt;/a&gt;
  2. Why learn backend development?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eV53WLPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1467232004584-a241de8bcf5d%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2669%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eV53WLPk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1467232004584-a241de8bcf5d%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2669%26q%3D80" alt="Learn Backend Development" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to be a developer, it’s a good idea to have various skills under your belt. For example, some developers only work on the frontend, some only do the backend, and a few do a bit of both.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backend development is an important part of programming because it’s the server-side of the process.&lt;/strong&gt; Therefore, you need to know how to write code to handle the frontend requests and communicate with databases to store data.&lt;/p&gt;

&lt;p&gt;In many cases, backend developers need to understand how clients talk to servers and vice-versa, as well as how information is stored and retrieved from databases. Plus, you still need to know the basics of programming languages.&lt;/p&gt;

&lt;p&gt;So if you’re interested in backend development, &lt;strong&gt;you’ll need a solid understanding of HTML and CSS before moving on.&lt;/strong&gt; This will ensure that you have a good foundation in front end development as well. You don’t want to spend all your time learning back-end development when your knowledge is limited.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-how-to-get-started-with-backend-development"&gt;
  &lt;/a&gt;
  3. How to get started with backend development
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMaiN7mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1518770660439-4636190af475%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2670%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMaiN7mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1518770660439-4636190af475%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2670%26q%3D80" alt="Get Started Backend Dev" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be overwhelming to learn everything at once, which is why we break it down into steps. This way, you can learn at your own pace and get help when you need it! So if you’ve never coded before, don’t worry! We’ve got you covered with the basics.&lt;/p&gt;

&lt;p&gt;Here are some key areas you need to know before you start working with backend development:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internet"&gt;
  &lt;/a&gt;
  Internet
&lt;/h3&gt;

&lt;p&gt;a. How does the Internet work?&lt;br&gt;&lt;br&gt;
b. What is HTTP?&lt;br&gt;&lt;br&gt;
c. How do browsers work?&lt;br&gt;&lt;br&gt;
d. What is a domain and how does it work?&lt;br&gt;&lt;br&gt;
e. What is hosting?&lt;br&gt;&lt;br&gt;
f. DNS and how it works?  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-basics"&gt;
  &lt;/a&gt;
  Frontend Basics
&lt;/h3&gt;

&lt;p&gt;a. HTML Knowledge&lt;br&gt;&lt;br&gt;
b. Basics CSS/SCSS Knowledge&lt;br&gt;&lt;br&gt;
c. Basics Javascript Knowledge&lt;br&gt;&lt;br&gt;
d. CSS frameworks and JS frameworks basics  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#os-and-general-knowledge"&gt;
  &lt;/a&gt;
  OS and General Knowledge
&lt;/h3&gt;

&lt;p&gt;a. Terminal Usage&lt;br&gt;&lt;br&gt;
b. Memory Management&lt;br&gt;&lt;br&gt;
c. Process Management&lt;br&gt;&lt;br&gt;
d. Thread and Concurrency&lt;br&gt;&lt;br&gt;
e. Basic Terminal Commands&lt;br&gt;&lt;br&gt;
f. Version Control System (Git)  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-roadmap-for-beginners"&gt;
  &lt;/a&gt;
  4. The roadmap for beginners
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbmJYJpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1531403009284-440f080d1e12%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2670%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbmJYJpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1531403009284-440f080d1e12%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2670%26q%3D80" alt="Roadmap Backend" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a beginner, you’ll need to make sure you understand the fundamentals before moving on to more advanced topics. For example, it’s essential to know how to code before you learn how to make a REST API call.&lt;/p&gt;

&lt;p&gt;It’s also important to understand how an application is structured. &lt;strong&gt;The frontend deals with the UI, while the backend deals with the logic.&lt;/strong&gt; The frontend is what users interact with, while the backend is what creates the code behind it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.creative-tim.com/blog/educational-tech/frontend-developer-roadmap/?ref=devto"&gt;Extra Resource: The Front-end Developer Roadmap - How to Become One&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This may sound confusing, but it’s actually pretty straightforward. Think of it this way: the frontend is the person wearing the suit, while the backend is the person who makes all of the clothes. The frontend makes sure everything looks good on the outside, while the backend is making sure everything looks good on the inside.&lt;/p&gt;

&lt;p&gt;The roadmaps for each section are designed to help you understand what you should be focusing on. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-basics-learn-a-language-and-database"&gt;
  &lt;/a&gt;
  4.1 Basics - Learn a Language and Database
&lt;/h3&gt;

&lt;p&gt;A backend developer must learn a programming language to improve their coding skills. We start with the basics of a programming language: syntax, variables, data types, functions, objects, and execution. Besides these things, make sure to learn its quirks (Core details about its runtime e.g. concurrency, memory model).&lt;/p&gt;

&lt;p&gt;Among the most used programming languages for the backend part of an application are:&lt;/p&gt;

&lt;p&gt;a. Javascript&lt;br&gt;&lt;br&gt;
b. PHP&lt;br&gt;&lt;br&gt;
c. Python&lt;br&gt;&lt;br&gt;
d. Ruby&lt;br&gt;&lt;br&gt;
d. C#  &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;database&lt;/strong&gt; is an organized collection of structured information, or data, typically stored electronically in a computer system. There are two major categories of database: SQL and NoSQL. SQL databases are table-based, while NoSQL databases are document, key-value, graph, or wide-column stores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SQL Databases&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
a. PostgreSQL&lt;br&gt;&lt;br&gt;
b. MySQL&lt;br&gt;&lt;br&gt;
c. Oracle  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NoSQL Databases&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
a. Firebase&lt;br&gt;&lt;br&gt;
b. MongoDB&lt;br&gt;&lt;br&gt;
c. Cassandra&lt;br&gt;&lt;br&gt;
d. InfluxDB  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-intermediate-learn-a-backend-framework"&gt;
  &lt;/a&gt;
  4.2 Intermediate - Learn a backend Framework
&lt;/h3&gt;

&lt;p&gt;To be able to develop backend applications faster, frameworks have been developed over each programming language.&lt;/p&gt;

&lt;p&gt;a. &lt;strong&gt;Node.js&lt;/strong&gt; is a runtime environment that allows software developers to launch both the frontend and backend of web apps using JavaScript.&lt;br&gt;
b. &lt;strong&gt;Laravel&lt;/strong&gt; is considered as one of the best PHP frameworks for web application development. It helps build wonderful apps using an expressive but simple syntax.&lt;br&gt;
c. &lt;strong&gt;Django&lt;/strong&gt; is a collection of Python libs allowing you to quickly and efficiently create a quality Web application and is suitable for both frontend and backend.&lt;br&gt;
d. &lt;strong&gt;Rails or Ruby on Rails&lt;/strong&gt;, is an open-source framework based on the Ruby programming language. Using RoR, developers don’t have to rewrite every single piece of code in the process of web application development. &lt;br&gt;
e. &lt;strong&gt;ASP.NET&lt;/strong&gt; is a web application framework developed and marketed by Microsoft to allow programmers to build dynamic websites. It allows you to use a full-featured programming language such as C#  to build web applications easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#43-advanced-api-caching-security-and-testing"&gt;
  &lt;/a&gt;
  4.3 Advanced - Api, Caching, Security, and Testing
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other. Backend developers use APIs to create connections between different applications or services to improve user experience through the frontend. Some of the APIs you should know about are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REST
&lt;/li&gt;
&lt;li&gt;JSON
&lt;/li&gt;
&lt;li&gt;SOAP
&lt;/li&gt;
&lt;li&gt;GSON
&lt;/li&gt;
&lt;li&gt;XML-RPC
&lt;/li&gt;
&lt;li&gt;AES
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A cache&lt;/strong&gt; is a high-speed data storage tier that stores a subset of data, usually transient in nature so that future requests for that data can be served faster than is possible by accessing the primary location of the data. Caching allows you to reuse previously retrieved or computed data efficiently. There are three types of caching: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CDN&lt;/li&gt;
&lt;li&gt;Server Side&lt;/li&gt;
&lt;li&gt;Client Side&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Web Secutiry Knowledge&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS&lt;/li&gt;
&lt;li&gt;SSL&lt;/li&gt;
&lt;li&gt;CORS&lt;/li&gt;
&lt;li&gt;Hashing Algorithms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Backend Testing&lt;/strong&gt; is a testing method that checks the server-side or database of web applications or the software. Some of the testings you should know about are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration Testing&lt;/li&gt;
&lt;li&gt;Unit Testing&lt;/li&gt;
&lt;li&gt;Functional Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-extra-stuff-good-to-know"&gt;
  &lt;/a&gt;
  5. Extra stuff - Good to know
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQZSmLwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1503437313881-503a91226402%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D3432%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQZSmLwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1503437313881-503a91226402%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D3432%26q%3D80" alt="Good to know" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Continuous integration&lt;/strong&gt; (CI) and &lt;strong&gt;continuous delivery&lt;/strong&gt; (CD) embody a culture, set of operating principles, and collection of practices that enable application development teams to deliver code changes more frequently and reliably.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;Architectural Pattern&lt;/strong&gt;  is a general, reusable solution to a commonly occurring problem in software architecture within a given context. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;  is indeed the most recommended tool for all developers. It is a containerization platform that allows you to create, deploy, and run applications without any hassle with the help of containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web Servers&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
The &lt;strong&gt;Apache&lt;/strong&gt;, or you can say Apache HTTP Server, is an open-source cross-platform web server that was developed by the Apache Software Foundation.&lt;br&gt;
&lt;strong&gt;NGINX&lt;/strong&gt; is another open-source web server that is also being used for reverse proxying, load balancing, caching, mail proxying, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-next-steps"&gt;
  &lt;/a&gt;
  6. Next Steps
&lt;/h2&gt;

&lt;p&gt;After you've finished all these steps, it's time for practicing. You can do this through open-source projects or, we recommend you to get an entry job. This way you will gain experience easier with the help of your senior colleagues.&lt;/p&gt;

&lt;p&gt;For this, we've prepared a comprehensive guide on &lt;strong&gt;&lt;a href="https://www.creative-tim.com/blog/education/web-developer-portfolio-website/?ref=devto"&gt;How to Build Your First Web Developer Portfolio Website.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, another smart way to present yourself as a developer is by using your &lt;strong&gt;&lt;a href="https://www.creative-tim.com/blog/educational-tech/how-to-create-github-profile/?ref=devto"&gt;Github profile to create a fancy CV.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-conclusion"&gt;
  &lt;/a&gt;
  7. Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, you’ve reached the end of the frontend development roadmap! &lt;br&gt;
Becoming a web developer can be hard. It takes time, hard work, and persistence. You have to learn how to code, how to use specific frameworks, and even when you’ve mastered all of that there’s still much more to learn. &lt;/p&gt;

&lt;p&gt;Thankfully, you don’t have to do this alone! There are many resources out there, all aimed at helping you learn these skills in an organized manner. This is why we created this roadmap for becoming a backend developer. Prioritizing roadmaps ensures that you can make the most progress possible in the shortest amount of time.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>backend</category>
    </item>
    <item>
      <title>Ho ho Oh no! Where are my variables? </title>
      <author>Anders Björkland</author>
      <pubDate>Mon, 13 Dec 2021 08:13:13 +0000</pubDate>
      <link>https://dev.to/andersbjorkland/ho-ho-oh-no-where-are-my-variables-ogg</link>
      <guid>https://dev.to/andersbjorkland/ho-ho-oh-no-where-are-my-variables-ogg</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Just the Gist&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
A simple way of debugging is to use the built-in PHP function var_dump() to print out the contents of a variable. But it's not the only way to do it. Here's a short introduction to the basics of debugging in PHP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#just-outputting-the-variable"&gt;
  &lt;/a&gt;
  Just outputting the variable
&lt;/h2&gt;

&lt;p&gt;If you want to debug you code, you may want to know what value a variable has at a specific point in your code. There are a few functions in PHP that can help you do that. &lt;code&gt;var_dump()&lt;/code&gt;, &lt;code&gt;var_export()&lt;/code&gt; and &lt;code&gt;print_r()&lt;/code&gt; are some of the functions you can use to do that. They do their work in slightly different manners:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;function&lt;/th&gt;
&lt;th&gt;input&lt;/th&gt;
&lt;th&gt;output&lt;/th&gt;
&lt;th&gt;return value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;var_dump&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"1.1"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string(3) "1.1"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;var_dump&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;float(1.1)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;var_export&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"1.1"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;'1.1'&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;var_export&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print_r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;"1.1"&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print_r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;optional&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;var_dump gives us the most information by providing us information about what type of variable it is, what the value and its type is. On the other hand, it is not as flexible as &lt;code&gt;var_export&lt;/code&gt; or &lt;code&gt;print_r&lt;/code&gt; if you want to store the output of the function somewhere, as it lacks a return value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-with-a-trace"&gt;
  &lt;/a&gt;
  Debugging with a trace
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;debug_backtrace()&lt;/code&gt; is yet another function for debugging your code. It will get you a code trace of how you ended where you are. Here's an example of a simple "Hello Mark"-program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"Mark"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;debug_backtrace&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Bark"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get the following output when we run this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;array&lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt;0]&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  array&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    string&lt;span class="o"&gt;(&lt;/span&gt;54&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"path&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;o&lt;/span&gt;&lt;span class="se"&gt;\f&lt;/span&gt;&lt;span class="s2"&gt;ile&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s2"&gt;xample.php"&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"line"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    int&lt;span class="o"&gt;(&lt;/span&gt;15&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    string&lt;span class="o"&gt;(&lt;/span&gt;5&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    array&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;[&lt;/span&gt;0]&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      string&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Bark"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;[&lt;/span&gt;1]&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  array&lt;span class="o"&gt;(&lt;/span&gt;4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    string&lt;span class="o"&gt;(&lt;/span&gt;54&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"path&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;o&lt;/span&gt;&lt;span class="se"&gt;\f&lt;/span&gt;&lt;span class="s2"&gt;ile&lt;/span&gt;&lt;span class="se"&gt;\e&lt;/span&gt;&lt;span class="s2"&gt;xample.php"&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"line"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    int&lt;span class="o"&gt;(&lt;/span&gt;18&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"function"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    string&lt;span class="o"&gt;(&lt;/span&gt;8&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"sayHello"&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="o"&gt;]=&amp;gt;&lt;/span&gt;
    array&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first function is added to the stack, with the latest function call added on top. We can see that the function &lt;code&gt;hello&lt;/code&gt; was called with the argument "Bark" from line 15 in our code. That means that the function was called from the function &lt;code&gt;sayHello&lt;/code&gt;, which in turn was called from line 18. We got this trace because we had added the &lt;code&gt;debug_backtrace()&lt;/code&gt; to show how we ended up trying to greet someone not named "Mark".&lt;/p&gt;

&lt;p&gt;These are somewhat static ways of debugging. There are more interactive ways to do it too, with phpdbg or xdebug, or maybe a library such as Symfony Profiler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What about you?
&lt;/h2&gt;

&lt;p&gt;Are you using any of these functions to debug your code? Perhaps you use &lt;code&gt;echo&lt;/code&gt; statements instead? Is there a better way to debug the code, and how would you go about doing that? Comment below and let us know what you think ✍&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP Manual on &lt;code&gt;debug_backtrace&lt;/code&gt;: &lt;a href="https://www.php.net/manual/en/function.debug-backtrace.php"&gt;https://www.php.net/manual/en/function.debug-backtrace.php&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Lightweight interactive debugger: &lt;a href="https://www.php.net/manual/en/intro.phpdbg.php"&gt;https://www.php.net/manual/en/intro.phpdbg.php&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Debugging with Xdebug: &lt;a href="https://xdebug.org/"&gt;https://xdebug.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Symfony Profiler: &lt;a href="https://symfony.com/doc/current/profiler.html"&gt;https://symfony.com/doc/current/profiler.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Monitoring Performance </title>
      <author>Bernd Wechner</author>
      <pubDate>Mon, 13 Dec 2021 07:56:26 +0000</pubDate>
      <link>https://dev.to/thumbone/monitoring-performance-1l7i</link>
      <guid>https://dev.to/thumbone/monitoring-performance-1l7i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#aka-how-often-shall-we-defer-to-the-ui"&gt;
  &lt;/a&gt;
  (a.k.a. How often shall we defer to the UI?)
&lt;/h2&gt;

&lt;p&gt;In my effort to build a simple &lt;a href="https://dev.to/thumbone/copy-to-clipboard-first-cut-1j5j"&gt;clipboard copy button&lt;/a&gt;, I found the need to &lt;a href="https://dev.to/thumbone/in-lining-styles-client-side-9oi"&gt;in-line styles&lt;/a&gt; if they are to survive emailing, and that in-lining could, for very large elements be &lt;a href="https://dev.to/thumbone/html-style-in-lining-performance-and-what-to-about-it-4a55"&gt;rather costly&lt;/a&gt; (in time), of which was born a need to let UI events happen while doing the job. &lt;/p&gt;

&lt;p&gt;With all that under my belt, knowing how long it was likely to take would also be nice, a bit of UI feedback on progress of the style in-lining operation. Basically, a progress bar ...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USwsFglW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45rgp3d3h4itz35orh8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USwsFglW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45rgp3d3h4itz35orh8t.png" alt="Progress Bar" width="880" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Progress bars were once a problem in JavaScript, with lots of tips, tricks and 3rd party solutions. But no more, we now have the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress"&gt;progress&lt;/a&gt; element and it's a breeze. We can just add: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;progress value="0"/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to a button, or elsewhere, and style it as we wish, display it as needed and update it's &lt;code&gt;max&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; to suit. The default width, it seems, when we put I  on my page was around the 150 pixels mark, but it can be styled as desired.&lt;/p&gt;

&lt;p&gt;And that answers our "How often shall we defer to the UI?" question implicitly. While not a fault-free, universally-suitable answer, it's not a bad start to update no more often than it takes to advance that progress bar by one pixel (i.e to make a visible change to it). &lt;/p&gt;

&lt;p&gt;For 100,000 elements say and a 150 pixel bar that's an ominous &lt;a href="https://en.wikipedia.org/wiki/666_%28number%29"&gt;666&lt;/a&gt; elements per pixel. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDkZBRX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq37izkf5p784xhr355x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDkZBRX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq37izkf5p784xhr355x.jpg" alt="666" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we drop the frequency of deferrals to the UI to once every 666 elements they are in-lined in &lt;a href="https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#The_Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything_is_42"&gt;42&lt;/a&gt; seconds (an auspicious figure). Much improved performance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESBkhf1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/377av6uykw2oz2y4ui4s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESBkhf1I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/377av6uykw2oz2y4ui4s.jpg" alt="42" width="400" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To recap: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;30 seconds with a locked UI, &lt;/li&gt;
&lt;li&gt;11 minutes if we defer to the UI after ever element (~100,000 times - i.e. 30 seconds of style processing an 10+minutes of promise management), and &lt;/li&gt;
&lt;li&gt;42 seconds if we temper the UI deferrals to 150 times over the duration of in-lining (for a 150pixel progress bar). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Empirical tests confirm that, during those 42 seconds, the UI is admirably responsive, no noticeable lag and so we're content!&lt;/p&gt;

&lt;p&gt;But still, in 42 seconds the element being copied might change! That is, because we are deferring to the UI and maintaining responsive UI while in-lining styles, user events processed can change the element that we're copying! So we need to both know something has changed and start again if it has, but that is another chapter of &lt;a href="https://dev.to/thumbone/the-thing-is-on-awesomeness-and-motivation-2i0j"&gt;The Thing Is ...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Advent of PBT 2021 - Day 13 - Solution</title>
      <author>Nicolas DUBIEN</author>
      <pubDate>Mon, 13 Dec 2021 07:54:35 +0000</pubDate>
      <link>https://dev.to/dubzzz/advent-of-pbt-2021-day-13-solution-3bhn</link>
      <guid>https://dev.to/dubzzz/advent-of-pbt-2021-day-13-solution-3bhn</guid>
      <description>&lt;p&gt;Our algorithm was: &lt;strong&gt;nonogramSolver&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://dev.to/dubzzz/advent-of-pbt-2021-day-13-21e5"&gt;Go to the subject itself for more details&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeSandbox with a possible set of properties you may have come with: &lt;a href="https://codesandbox.io/s/advent-of-pbt-day-13-solution-2hyoz?file=/src/index.spec.ts&amp;amp;previewwindow=tests"&gt;https://codesandbox.io/s/advent-of-pbt-day-13-solution-2hyoz?file=/src/index.spec.ts&amp;amp;previewwindow=tests&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#property-1-should-respect-the-constraints-when-filling-the-grid"&gt;
  &lt;/a&gt;
  Property 1: should respect the constraints when filling the grid
&lt;/h2&gt;

&lt;p&gt;I initially wanted to check that the solver was building THE right grid. But actually there is no unicity of the solution (from time to time). So instead of checking if we get the right grid, we can check that the grid follows the requirements.&lt;/p&gt;

&lt;p&gt;In other words if the row number 1 requires: [1, 2], then I should have one "cross" then one or many "dots" then two "crosses".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for any constraints&lt;br&gt;
it should follows the constraints&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for any already filled grid&lt;br&gt;
if I compute the constraints followed by this grid&lt;br&gt;
and pass them to the solver&lt;br&gt;
then the answer of the solver should also result in the same constraints&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Written with fast-check:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should respect the constraints when filling the grid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;fc&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;numRows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
          &lt;span class="na"&gt;numColumns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;numRows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numColumns&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constantFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;minLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;numColumns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;maxLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;numColumns&lt;/span&gt;
            &lt;span class="p"&gt;}),&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;minLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;numRows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;maxLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;numRows&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialGrid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Arrange&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gridToConstraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialGrid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Act&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nonogramSolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Assert&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gridSolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gridToConstraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gridSolution&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing missing is the helper &lt;code&gt;gridToConstraints&lt;/code&gt; extracting the constraints for an already filled grid. I drafted a dummy implementation for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;gridToConstraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][];&lt;/span&gt; &lt;span class="nl"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;colIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;colIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;colIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;colIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;colIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rowIndex&lt;/span&gt;&lt;span class="p"&gt;]?.[&lt;/span&gt;&lt;span class="nx"&gt;colIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;numX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we might probably have something even simpler and less error-prone to build this one.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://dev.to/dubzzz/advent-of-pbt-2021-13ee"&gt;Back to "Advent of PBT 2021"&lt;/a&gt; to see topics covered during the other days and their solutions.&lt;/p&gt;

&lt;p&gt;More about this serie on &lt;a href="https://twitter.com/ndubien"&gt;@ndubien&lt;/a&gt; or with the hashtag &lt;a href="https://twitter.com/search?q=%23AdventOfPBT"&gt;#AdventOfPBT&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>adventofpbt</category>
      <category>testing</category>
      <category>code</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Advent of PBT 2021 - Day 13</title>
      <author>Nicolas DUBIEN</author>
      <pubDate>Mon, 13 Dec 2021 07:54:28 +0000</pubDate>
      <link>https://dev.to/dubzzz/advent-of-pbt-2021-day-13-21e5</link>
      <guid>https://dev.to/dubzzz/advent-of-pbt-2021-day-13-21e5</guid>
      <description>&lt;p&gt;Our algorithm today is: &lt;strong&gt;nonogramSolver&lt;/strong&gt;.&lt;br&gt;
It comes with the following documentation and prototype:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Solver of nonograms.
 *
 * Nonogram is a game in which the user is asked to colorize a grid
 * based on hints. A cell in the grid will be either filled or not.
 *
 * For instance, the grid below:
 *
 *        12
 *      3211
 *
 * 1 2  ????
 * 1 1  ????
 *   3  ????
 * 1 1  ????
 *
 * Will result in:
 *
 *        12
 *      3211
 *
 * 1 2  x.xx
 * 1 1  x..x
 *   3  xxx.
 * 1 1  .x.x
 *
 * To define this grid you'll have to pass:
 * - rows:    [[1,2],[1,1],[3],[1,1]]
 * - columns: [[3],[2],[1,1],[2,1]]
 *
 * @param rows - For each row, the set of hints concerning the
 *               number of filled cells
 * @param columns - For each column, the set of hints concerning
 *                  the number of filled cells
 */&lt;/span&gt;
&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nonogramSolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][],&lt;/span&gt;
  &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We already wrote some examples based tests for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should be able to solve our nonogram&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Arrange&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x.xx&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x..x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xxx.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolution&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.x.x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Act&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nonogramSolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Assert&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expectedSolution&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should be able to solve nonogram with non unique solution&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Arrange&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expectedSolutionA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolutionA&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolutionA&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expectedSolutionB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolutionB&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expectedSolutionB&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Act&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nonogramSolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Assert&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;expectedSolutionA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;expectedSolutionB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isA&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isB&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How would you cover it with Property Based Tests?&lt;/p&gt;

&lt;p&gt;In order to ease your task we provide you with an already setup CodeSandbox, with examples based tests already written and a possible implementation of the algorithm: &lt;a href="https://codesandbox.io/s/advent-of-pbt-day-13-r03cn?file=/src/index.spec.ts&amp;amp;previewwindow=tests"&gt;https://codesandbox.io/s/advent-of-pbt-day-13-r03cn?file=/src/index.spec.ts&amp;amp;previewwindow=tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You wanna see the solution? Here is the set of properties I came with to cover today's algorithm: &lt;a href="https://dev.to/dubzzz/advent-of-pbt-2021-day-13-solution-3bhn"&gt;https://dev.to/dubzzz/advent-of-pbt-2021-day-13-solution-3bhn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://dev.to/dubzzz/advent-of-pbt-2021-13ee"&gt;Back to "Advent of PBT 2021"&lt;/a&gt; to see topics covered during the other days and their solutions.&lt;/p&gt;

&lt;p&gt;More about this serie on &lt;a href="https://twitter.com/ndubien"&gt;@ndubien&lt;/a&gt; or with the hashtag &lt;a href="https://twitter.com/search?q=%23AdventOfPBT"&gt;#AdventOfPBT&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>adventofpbt</category>
      <category>testing</category>
      <category>code</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Bypassing CORS via custom proxy backend</title>
      <author>Alen Duda</author>
      <pubDate>Mon, 13 Dec 2021 07:53:07 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/bypassing-cors-via-custom-proxy-backend-2po</link>
      <guid>https://dev.to/bornfightcompany/bypassing-cors-via-custom-proxy-backend-2po</guid>
      <description>&lt;p&gt;As a frontend developer, sooner or later you will encounter a CORS error, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Access to XMLHttpRequest at 'https://...' from origin 'https://...' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WRxBh1KO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu6jrxx4qxwmart8xf7i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WRxBh1KO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xu6jrxx4qxwmart8xf7i.jpg" alt="CORS error in console" width="880" height="60"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cors-intro"&gt;
  &lt;/a&gt;
  CORS intro
&lt;/h2&gt;

&lt;p&gt;Plainly, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross-Origin Resource Sharing&lt;/a&gt; is a security mechanism which enables web browsers to access data from &lt;em&gt;domain2.com&lt;/em&gt; while browsing &lt;em&gt;domain1.com&lt;/em&gt;. It can also be used to restrict access only to predefined domains. Basically, it requires the backend and frontend to be on the same server or to specifically set allowed origins which can access the backend.&lt;/p&gt;

&lt;p&gt;CORS is disabled by default and, if you have access to the server-side code, there are &lt;a href="https://enable-cors.org/server.html"&gt;ways to enable it&lt;/a&gt;. If you are in a school group project with a backend dev, be sure to remind him/her to enable CORS or you might be stuck with mock data (speaking from experience).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h2&gt;

&lt;p&gt;I first encountered the red CORS error in the browser console on a university project one saturday night when I tried to connect to our Java Spring backend and couldn't get it to work, even though it worked from Postman. Since Java (and specifically Spring) was (and is) almost as Ancient Greek to me, I wanted to try a way to bypass this error. Since CORS is on the browser level, an idea popped up: why not build a simple(r) JS backend which does the same API request, but has CORS enabled so I could connect to it instead of the original Java backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#express-backend"&gt;
  &lt;/a&gt;
  Express backend
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt; is the first node.js web framework I encountered and is well-suited for this task. We will create a minimal node/express backend application which uses &lt;a href="https://axios-http.com/docs/intro"&gt;axios &lt;/a&gt;as the http library and the &lt;a href="https://www.npmjs.com/package/cors"&gt;cors&lt;/a&gt; package to enable CORS on our server (otherwise this whole ordeal would be pointless).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup-and-package-installation"&gt;
  &lt;/a&gt;
  Project setup and package installation
&lt;/h3&gt;

&lt;p&gt;After creating a folder for our project, open a terminal and navigate to it. We initialize the most basic package.json file with&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once done, we install the required packages:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npm i express cors axios&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before starting to code, we need a file which will be run. Common names are &lt;code&gt;server.js&lt;/code&gt; or &lt;code&gt;app.js&lt;/code&gt;. Since this project will have all the code in a single file (not the best practice, but for demonstration purposes), we can simply use &lt;code&gt;index.js&lt;/code&gt;. Create that file and modify the package.json file so the scripts key looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#coding-time"&gt;
  &lt;/a&gt;
  Coding time
&lt;/h3&gt;

&lt;p&gt;Finally, time to code! Open &lt;code&gt;index.js&lt;/code&gt; (or whatever you called it in the previous step) so we can create our server. I will copy all the code required here, along with the comments for (almost) each line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// packages import&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// enable CORS&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// set the port on which our app wil run&lt;/span&gt;
&lt;span class="c1"&gt;// important to read from environment variable if deploying&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// basic string route to prevent Glitch error&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// the route we're working with&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// replace with a custom URL as required&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backendUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// return the data without modification&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;backendUrl&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// console text when app is running&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is it! You can use the above code and upload it to &lt;a href="https://glitch.com"&gt;Glitch&lt;/a&gt;, for example, so it can be hosted and accessed if you deploy your frontend app. That's why we require reading the PORT from environment variable (if available) and set a root route to return a simple string, otherwise Glitch would belive the app has an error since nothing is returned.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;"/users"&lt;/code&gt; route contains the main code we need to connect to the backend which doesn't have CORS access enabled and returns the same, unmodified data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-bonus-data-modification"&gt;
  &lt;/a&gt;
  Additional bonus: data modification
&lt;/h3&gt;

&lt;p&gt;While you can return the data as-is, nothing stops you from modifying the original response to be more adapted to your frontend app's needs. If there is a lot of data and modifications required, that could improve the frontend app's performance on lower-end devices and slower connections, since less &lt;em&gt;noise&lt;/em&gt; data will be received and less modifications are required client-side.&lt;/p&gt;

&lt;p&gt;Example response from original backend API:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dD3AA9ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blit2ijzl5etd0vdqn43.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dD3AA9ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blit2ijzl5etd0vdqn43.jpg" alt="Original API response" width="750" height="1026"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code snippet for modifying this is pretty straightforward (assuming the response has the same data structure as above):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;backendUrl&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastEpisodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastAvailableEpisodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastEpisodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;episode&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentItemId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;caption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;audioFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;episode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
        &lt;span class="p"&gt;}));&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example custom API response after modification:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rm5a-kYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjapn34f0kzbp7ztpsav.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rm5a-kYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjapn34f0kzbp7ztpsav.jpg" alt="Custom API response" width="803" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe you agree that the second response is much cleaner and easier to follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was a very basic example of using a custom, bare-bones backend as a proxy to bypass CORS-restricted content you would generally have access to. It also follows a so-called &lt;em&gt;happy path&lt;/em&gt;, meaning there is no error handling, but that would detract from the topic. The whole process from creating the project, modifying the response and deployment to Glitch can take less than 10 minutes, which is much quicker than waiting for your backend-dev colleague to wake up the next morning when the inspiration is gone.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>cors</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Go Concurrency Patterns - Wait For Task</title>
      <author>b0r</author>
      <pubDate>Mon, 13 Dec 2021 07:39:41 +0000</pubDate>
      <link>https://dev.to/b0r/go-concurrency-patterns-wait-for-task-34de</link>
      <guid>https://dev.to/b0r/go-concurrency-patterns-wait-for-task-34de</guid>
      <description>&lt;p&gt;To improve my Go Programming skills and become a better Go engineer, I have recently purchased an excellent on-demand education from &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt;. Materials are created by an expert Go engineer, &lt;a href="https://twitter.com/goinggodotnet"&gt;Bill Kennedy&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ohpow5Jt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1349881840220450826/pGwOq5tz_normal.jpg" alt="Bill Kennedy : MIA/-5 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bill Kennedy : MIA/-5
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @goinggodotnet
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      If you've been looking for a book on &lt;a href="https://twitter.com/hashtag/golang"&gt;#golang&lt;/a&gt; and not sure what to pick, check out the Ultimate Go Notebook. &lt;br&gt;&lt;br&gt;If you want to read it first before you make a decision to buy it, send me an email.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/jHjuJQUUz4"&gt;courses.ardanlabs.com/courses/ultima…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:46 PM - 30 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1443663502808395780" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1443663502808395780" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1443663502808395780" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I have decide to record my process of learning how to write more idiomatic code, following Go best practices and design philosophies. &lt;/p&gt;

&lt;p&gt;This series of posts will describe concurrency patterns used for orchestration/signaling in Go via goroutines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-for-task-pattern"&gt;
  &lt;/a&gt;
  Wait For Task Pattern
&lt;/h2&gt;

&lt;p&gt;The main idea behind &lt;strong&gt;Wait For Task&lt;/strong&gt; pattern is to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a channel that provides a signaling semantics&lt;/li&gt;
&lt;li&gt;a goroutine that &lt;strong&gt;waits for task&lt;/strong&gt; so it can do some work &lt;/li&gt;
&lt;li&gt;a goroutine that sends work to the previous goroutine&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;In this example we have an &lt;code&gt;employee&lt;/code&gt; (&lt;code&gt;a&lt;/code&gt; goroutine) that doesn't know immediately what to do. The &lt;code&gt;employee&lt;/code&gt; waits for &lt;code&gt;manager&lt;/code&gt; to give him some work to do. &lt;br&gt;
Once &lt;code&gt;manager&lt;/code&gt; finds some work for the &lt;code&gt;employee&lt;/code&gt;, it notifies &lt;code&gt;employee&lt;/code&gt; by sending a signal (&lt;code&gt;paper&lt;/code&gt;) via communication channel &lt;code&gt;ch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to try the example on &lt;a href="https://play.golang.com/p/WUrCw1C8d7C"&gt;Go Playground&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"math/rand"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// make channel of type string which provides signaling semantics&lt;/span&gt;
    &lt;span class="c"&gt;// unbuffered channel provides a guarantee that the &lt;/span&gt;
    &lt;span class="c"&gt;// signal being sent is received&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// goroutine 'a' that waits for some work =&amp;gt; employee&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// employee waits for signal that it has some work to do&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"employee : received signal : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="c"&gt;// simulate the idea of unknown latency (do not use in production)&lt;/span&gt;
    &lt;span class="c"&gt;// e.g. manager is thinking what work to pass to the employee&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="c"&gt;// when work is ready, send signal form manager to the employee&lt;/span&gt;
    &lt;span class="c"&gt;// sender (employee) has a guarantee that the worker (employee)&lt;/span&gt;
    &lt;span class="c"&gt;// has received a signal&lt;/span&gt;
    &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;"paper"&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"manager : sent signal"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#result-1st-execution"&gt;
  &lt;/a&gt;
  Result (1st execution)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
manager : sent signal
employee : received signal :  paper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, wait for task concurrency pattern was described. In addition, simple implementation was provided.&lt;/p&gt;

&lt;p&gt;Readers are encouraged to check out excellent &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt; education materials to learn more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;Depending on the country you are coming from, &lt;a href="https://www.ardanlabs.com/education/"&gt;Ardan Labs&lt;/a&gt; education might be a little bit expensive. In that case you can always contact them and they will provide you a link to their scholarship form. &lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.ardanlabs.com/"&gt;Ardan Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pexels.com/photo/radio-telescope-against-sky-with-stars-6325001/"&gt;Cover image by Igor Mashkov from Pexels&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
      <category>programming</category>
    </item>
    <item>
      <title>HTML tags (and last) | embed</title>
      <author>Carlos Espada</author>
      <pubDate>Mon, 13 Dec 2021 07:33:28 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-and-last-embed-36o4</link>
      <guid>https://dev.to/carlosespada/html-tags-and-last-embed-36o4</guid>
      <description>&lt;p&gt;It is used to &lt;strong&gt;embed external content&lt;/strong&gt; at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in.&lt;/p&gt;

&lt;p&gt;Keep in mind that most modern browsers have deprecated and removed support for browser plug-ins, so relying upon &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt; &lt;strong&gt;is generally not wise&lt;/strong&gt; if you want your site to be operable on the average user's browser.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To &lt;strong&gt;embed a picture&lt;/strong&gt;, it is better to use the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;embed HTML&lt;/strong&gt;, it is better to use the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;To &lt;strong&gt;embed video or audio&lt;/strong&gt;, it is better to use the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; tags.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can have some &lt;strong&gt;implicit ARIA roles&lt;/strong&gt;: &lt;code&gt;application&lt;/code&gt;, &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;presentation&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#attributes"&gt;
  &lt;/a&gt;
  Attributes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#height"&gt;
  &lt;/a&gt;
  height
&lt;/h3&gt;

&lt;p&gt;The displayed height of the resource, in CSS pixels (absolute values only. NO percentages).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#src"&gt;
  &lt;/a&gt;
  src
&lt;/h3&gt;

&lt;p&gt;The URL of the resource being embedded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type"&gt;
  &lt;/a&gt;
  type
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/MIME_type"&gt;MIME type&lt;/a&gt; to use to select the plug-in to instantiate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#width"&gt;
  &lt;/a&gt;
  width
&lt;/h3&gt;

&lt;p&gt;The displayed width of the resource, in CSS pixels (absolute values only. NO percentages).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;code&gt;object-position&lt;/code&gt; property to adjust the positioning of the embedded object within the element's frame, and the &lt;code&gt;object-fit&lt;/code&gt; property to control how the object's size is adjusted to fit within the frame.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;title&lt;/code&gt; attribute on an embed element to &lt;strong&gt;label its content&lt;/strong&gt; so that people navigating with assistive technology such as a screen reader &lt;strong&gt;can understand what it contains&lt;/strong&gt;. The title's value should concisely describe the embedded content. &lt;strong&gt;Without a title, they may not be able to determine what its embedded content is&lt;/strong&gt;. This context shift can be confusing and time-consuming, especially if the embed element contains interactive content like video or audio.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;-&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;Yes&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_embed.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_embed"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_embed"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>embed</category>
    </item>
    <item>
      <title>Strategy Pattern | Design Patterns in Java</title>
      <author>coder4life</author>
      <pubDate>Mon, 13 Dec 2021 07:33:17 +0000</pubDate>
      <link>https://dev.to/coder4_life/strategy-pattern-design-patterns-in-java-me</link>
      <guid>https://dev.to/coder4_life/strategy-pattern-design-patterns-in-java-me</guid>
      <description>&lt;p&gt;Behavioral design pattern: Watch a Java implementation of the Strategy Pattern which allows us to change the behavior of an algorithm at runtime. In this example there are different payment methods - strategies - for a certain amount. The context processes the payment differently depending on the payment method. A client would at runtime be able to select between the payment methods. The implementation in Main would thereby be more dynamic in a real usecase.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GJs2Dxzvugs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Advanced TypeScript With Code Challenges: Type Guards</title>
      <author>Marius Bongarts</author>
      <pubDate>Mon, 13 Dec 2021 07:29:27 +0000</pubDate>
      <link>https://dev.to/mariusbongarts/advanced-typescript-with-code-challenges-type-guards-14lp</link>
      <guid>https://dev.to/mariusbongarts/advanced-typescript-with-code-challenges-type-guards-14lp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqaEaSyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AjUBpz0DE_5DSUvDOk_3ZJg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqaEaSyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2000/1%2AjUBpz0DE_5DSUvDOk_3ZJg.png" alt="Big elephant stating Typescript, small elephant stating Javascript" width="880" height="640"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type guards allow us to guarantee types during runtime. Learn the concept of Type Guards and apply them to practical code exercises in this article.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/@mariusbongarts11/advanced-typescript-with-code-challenges-type-guards-a5b24bb6d46b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJGecUaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/438/1%2A_3t5KaAhKLNq04FSGYPy9w.png" alt="Marius Bongarts"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/@mariusbongarts11/advanced-typescript-with-code-challenges-type-guards-a5b24bb6d46b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Advanced TypeScript With Code Challenges: Type Guards | by Marius Bongarts | Dec, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;Marius Bongarts ・ &lt;time&gt;Dec 13, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnDHPsJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium-f709f79cf29704f9f4c2a83f950b2964e95007a3e311b77f686915c71574fef2.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>6 Best Practices to secure your Continuous Deployment pipeline</title>
      <author>CloudNow Technologies</author>
      <pubDate>Mon, 13 Dec 2021 07:29:21 +0000</pubDate>
      <link>https://dev.to/cloudnowtech/6-best-practices-to-secure-your-continuous-deployment-pipeline-47o2</link>
      <guid>https://dev.to/cloudnowtech/6-best-practices-to-secure-your-continuous-deployment-pipeline-47o2</guid>
      <description>&lt;p&gt;&lt;a href="https://www.cloudnowtech.com/application-development-services.html"&gt;Continuous Integration and Continuous Deployment (CI/CD)&lt;/a&gt; is a fast, efficient iterative process. This means that, without a concentrated focus on security, there simply isn’t enough time to build in security checks and balances before go-live.&lt;/p&gt;

&lt;p&gt;A traditional &lt;a href="https://www.cloudnowtech.com/application-development-services.html"&gt;Continuous Integration and Continuous Deployment (CI/CD)&lt;/a&gt; pipeline uses a large number of tech tools. Each stage of the pipeline must be closely monitored at all times, to ensure that any irregularities are swiftly identified and addressed. &lt;/p&gt;

&lt;p&gt;Using the right code analysis tools, it's possible to automate the process of monitoring the code used at every stage of the pipeline. This guards against the possibility of vulnerabilities potentially creeping in and giving malicious actors a way into your system.&lt;/p&gt;

&lt;p&gt;To further secure your system, it is important to prevent misuse or improper access to key data like passwords, API, GitHub tokens, SSH keys, private certificates for secure communication, transmitting and receiving of data (TLS, SSL, and so on), private encryption keys for systems like PGP, and other application keys/credentials. Eliminate hard-coded credentials in &lt;a href="https://www.cloudnowtech.com/application-development-services.html"&gt;containerized applications&lt;/a&gt; and minimize broad access to credentials, data and systems.&lt;/p&gt;

&lt;p&gt;In addition to automated system security, conduct regular comprehensive audits on system and code to maintain high-level security and reduce risk of cyberattack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are 6 best practices that could help you improve security in your CI/CD processes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Remove hardcoded credentials from tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With automation, storing and keeping track of these credentials is no longer the responsibility of your team. By default, some of this data is hardcoded into Jenkins, GitHub and other &lt;a href="https://www.cloudnowtech.com/application-development-services.html"&gt;CI/CD tools&lt;/a&gt;. Remove the hardcoding from your tools before getting started, or the information could be misused.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Don’t concentrate data into a single location&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Distribute sensitive data as much as possible across a large number of Jenkinsfiles. This reduces the potential attack value of each file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Minimize access permitted to team members&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maintain highly granular access management, following the principle of ‘least privilege’. A large number of people work concurrently on each project, making access management fundamental to CI/CD security. Undertake segmentation by role, task and category to restrict access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Restrict access to non-humans as well&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once a container’s machine identity is authenticated by the system, it can access multiple resources based on defined access control policy. To secure against non-human access, destroy containers and virtual machines after use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Apply rigorous security parameters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use password managers and frequently change passwords. Verify the identity of individuals accessing resources with &lt;a href="https://www.akku.work/product/multi-factor-authentication.html"&gt;multi-factor authentication&lt;/a&gt; and OTPs to restrict access to the most sensitive tools and data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Safeguard credentials from excessive automation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ensure keys and secrets are not inadvertently passed on by default, during builds for pull requests via your &lt;a href="https://www.cloudnowtech.com/application-development-services.html"&gt;CI/CD pipelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Remember, the goal of CI/CD is not just to make communication between team members seamless and effective, but safe as well. Follow these simple steps and best practices to optimize safety, speed and quality.&lt;/p&gt;

&lt;p&gt;CloudNow brings you a cutting-edge technology stack that enables single-click deployment, &lt;a href="https://www.cloudnowtech.com/application-development-services.html"&gt;continuous integration&lt;/a&gt;, automated security alerts, easy code management and review, and on-premise, public, or hybrid cloud deployment. &lt;a href="https://www.cloudnowtech.com/contact-us.html"&gt;Contact us&lt;/a&gt; today to know more.&lt;/p&gt;

&lt;p&gt;This blog originally published at &lt;a href="https://www.cloudnowtech.com/blog/"&gt;CloudNow Blog&lt;/a&gt;. Link to the &lt;a href="https://www.cloudnowtech.com/blog/6-best-practices-to-secure-your-continuous-deployment-pipeline/"&gt;original blog&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Launch Your DeFi Exchange Plaform Like Uniswap</title>
      <author>bellabardot</author>
      <pubDate>Mon, 13 Dec 2021 07:23:04 +0000</pubDate>
      <link>https://dev.to/bellabardot/launch-your-defi-exchange-plaform-like-uniswap-529d</link>
      <guid>https://dev.to/bellabardot/launch-your-defi-exchange-plaform-like-uniswap-529d</guid>
      <description>&lt;p&gt;&lt;strong&gt;Uniswap-An Overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uniswap is the trending defi exchange protocol in the defi exchange ecosystem. Uniswap has its own cryptocurrency UNI and it also works as the best-decentralized exchange through its breathtaking features and benefits to crypto traders. Uniswap clone works with the primary mechanism of constant product market maker which is completely unique from other exchanges.&lt;br&gt;
This constant product formula x*y=k helps to set the price through which the end-users can swap their tokens for the equivalent value of ETH. Even though uniswap faces many liquidity issues it creating its own arena in the near future and will be experiencing high monetary growth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Uniswap Clone Script-A White Label Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maticz.com/uniswap-clone-script"&gt;Uniswap clone script&lt;/a&gt; is a defi exchange script to create a defi exchange protocol like uniswap. It focuses on 100% decentralized exchange of tokens which enables the traders to customize their trading fee and incites the liquidity providers to invest more in liquidity pools. &lt;br&gt;
Our uniswap clone script is a cent-percent white label solution that helps you in the active swapping of your ETH tokens. Our Clone script provides end-to-end features as per your business requirement which operates deftly with sequential updates in the protocol. &lt;br&gt;
Our skilled developers at maticz offer multi-tested uniswap clone script to launch your DeFi exchange platform without any bugs. Avail of our uniswap clone script solution and launch your Defi Exchange Protocol like uniswap to boost your revenue by earning passive incentives. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Uniswap Clone Script Works?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uniswap is the highly traded defi exchange in the crypto marketplace. &lt;a href="https://maticz.com/uniswap-clone-script"&gt;Uniswap clone&lt;/a&gt; works with the design of Automated Market Maker which is a smart contract interface that holds liquidity pools for the crypto traders to trade against it. Here is a simple guide to help you trade with uniswap. &lt;br&gt;
The primary thing required to trade with uniswap is you should hold an ETH or ERC-20 token which can be traded with the its compatible wallets. You can start your trading on uniswap with less than four steps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Wallet Connection&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Get Your Token&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. Swap Your Token&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wallet Connection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The important requirement to trade your token on uniswap is you should be connected with a compatible crypto wallet. A suitable wallet to swap or trade your token is MetaMask or TrustWallet which allows interaction with DApps. Follow these steps to connect your wallet with uniswap.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Visit the uniswap interface and click the “Connect Wallet” option.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the wallet from the list displayed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm your wallet connection, Once confirmed you will be connected with uniswap.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can start your trade by swapping and exchanging tokens from your wallet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get Your Token&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You can get your first token once you get connected with the wallet. If you are a new user then you should purchase your first token from the connected Ethereum wallet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Purchase your token with fiat currency from your bank account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Users should hold ETH token in their wallet to execute their trade and it is mandatory since gas fee should be paid with ETH.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Swap Your Token&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you have completed connecting your wallet with uniswap and purchased your first token in your wallet, you are ready to swap your token in the exchange. Follow these simple steps to swap your tokens.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Choose the token you wish to swap from the tokens list displayed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the Swap option,  if you are trading for the first time then you have to approve your token to swap from your wallet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the swap option is clicked a pop-up window will be displayed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, enter the amount of token you wish to swap and set the gas fee.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now Click “Confirm swap” to confirm your transaction in the wallet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your transaction is confirmed now and you can review your transaction status from your account.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Why Build DeFi Exchange Protocol Like Uniswap?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Uniswap is the largest exchange platform in the defi exchange ecosystem. Uniswap brought updates to its protocol and launched Uniswap V2 and Uniswap V3 which has experienced monetary growth in the defi exchange space. It helps you in earning more passive income through its various trading options and scalability. Its attractive user interface and smart contract help to make your transactions smoothly. It will be witnessing a huge growth in the near feature through its trading volume. Build Your DeFi Exchange Platform like Uniswap and gain more revenue. &lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>opensource</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
