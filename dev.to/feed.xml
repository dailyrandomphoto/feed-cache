<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fazendo ciência de dados com docker</title>
      <author>Edinei Cavalcanti</author>
      <pubDate>Thu, 09 Sep 2021 21:22:05 +0000</pubDate>
      <link>https://dev.to/edinei_dev/fazendo-ciencia-de-dados-com-docker-1l3i</link>
      <guid>https://dev.to/edinei_dev/fazendo-ciencia-de-dados-com-docker-1l3i</guid>
      <description>&lt;p&gt;Supondo que você já tenha &lt;a href="https://docs.docker.com/get-docker/"&gt;docker instalado e devidademente configurado seja Windows/Linux/Mac&lt;/a&gt;. Temos uma &lt;a href="https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html"&gt; documentação sobre as imagens do Jupyter&lt;/a&gt; se quiser uma outra configuração vamos usar a &lt;code&gt;jupyter/datascience-notebook&lt;/code&gt; mas temos diversas outras.&lt;/p&gt;

&lt;p&gt;Usando o &lt;code&gt;docker run&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --rm -p 10000:8888 -e JUPYTER_ENABLE_LAB=yes -v .\my-notebook:/home/jovyan/work jupyter/datascience-notebook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fobdq6r4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo48b43mkv8sis8ytgo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fobdq6r4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yo48b43mkv8sis8ytgo6.png" alt="Veja que o token do jupyter será exposto e será usado a porta 8888 mas vamos usar 10000"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ficando no final &lt;a href="http://127.0.0.1:10000/?token=6f2fa7151f0fa43cd17af52a830bb76114e20e9b3cd31078"&gt;http://127.0.0.1:10000/?token=6f2fa7151f0fa43cd17af52a830bb76114e20e9b3cd31078&lt;/a&gt; ao acessar:&lt;/p&gt;

&lt;p&gt;Imagem do launcher do jupyter&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JevwLVww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdndhbqjt3wgv98w0ysz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JevwLVww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdndhbqjt3wgv98w0ysz.png" alt="Imagem do launcher do jupyter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos selecionar a pasta work&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-iis-sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jgpbrrkjgf8qvz0nj5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-iis-sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jgpbrrkjgf8qvz0nj5j.png" alt="Vamos selecionar a pasta work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E escolher Python 3 no Notebook&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QPhPWxsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ovbs4i5bib0ll2l9c42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QPhPWxsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ovbs4i5bib0ll2l9c42.png" alt="E escolher Python 3 no Notebook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Escrever &lt;code&gt;!python — version&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6EHoHWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h8jkexyesg3ahdapk64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6EHoHWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h8jkexyesg3ahdapk64.png" alt="Escrever !python — version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos notar que o nosso arquivo Untitled.ipynb do jupyter foi para nosso host.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFnI6Unx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szlhedvngezcqiu6hb7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFnI6Unx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szlhedvngezcqiu6hb7h.png" alt="Vamos notar que o nosso arquivo Untitled.ipynb do jupyter foi para nosso host."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>devops</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Light Bulb 💡: Machine learning made easy</title>
      <author>Mage</author>
      <pubDate>Thu, 09 Sep 2021 21:04:26 +0000</pubDate>
      <link>https://dev.to/mage_ai/light-bulb-machine-learning-made-easy-ink</link>
      <guid>https://dev.to/mage_ai/light-bulb-machine-learning-made-easy-ink</guid>
      <description>&lt;p&gt;Light Bulb is a tool to help you label, train, test and deploy machine learning models without any coding.&lt;/p&gt;

&lt;p&gt;Go directly to the Github project &lt;a href="https://github.com/czhu12/light_bulb"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s say you want to build a photo-sharing app called SnapCat, that only allows users to send pictures of cats, and nothing else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tJ5fayQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iz1lal99rcz63ylg91e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tJ5fayQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iz1lal99rcz63ylg91e.jpeg" alt='"Snapcat"'&gt;&lt;/a&gt;&lt;em&gt;Snapcat&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How would you go about starting this? It’ll probably looks something like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Collect a large set of cat and not cat photos.&lt;/li&gt;
&lt;li&gt;Manually label the posts as cat or not cat.&lt;/li&gt;
&lt;li&gt;Split the dataset into train, test, and validation sets.&lt;/li&gt;
&lt;li&gt;Train some model (lets say a convolutional neural network) on the dataset.&lt;/li&gt;
&lt;li&gt;Look at the accuracy on the test set, if it’s not good enough, then go back and rethink each step.&lt;/li&gt;
&lt;li&gt;Save the model weights, and load them into some web backend, to start classifying new posts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s see how Light Bulb can help you with all of this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-light-bulb"&gt;
  &lt;/a&gt;
  Introducing: Light Bulb 💡
&lt;/h2&gt;

&lt;p&gt;Light Bulb is a service that will integrate this end to end, from labeling, all the way through to production. First define this config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# config/cat_not_cat.ymltask:
  title: Is this a cat?
dataset:
  directory: dataset/cat_not_cat/
  data_type: images
  judgements_file: outputs/cat_not_cat/labels.csv
label:
  type: classification
  classes:
    - Cat
    - Not Cat
model:
  directory: outputs/cat_not_cat/models/
user: chris
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then from the root of the app run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;make
make dataset/cat_not_cat
.virt/bin/python code/server.py --config config/cat_not_cat.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will start a server on &lt;code&gt;http://localhost:5000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vo5POR5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcns4h4km112a2blqwum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vo5POR5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcns4h4km112a2blqwum.png" alt="Start Labeling"&gt;&lt;/a&gt;&lt;em&gt;Start Labeling&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you label a few entries, you’ll see the Training icon change from No to Yes. This means that a model is actively training on the newly labeled posts. As you label more posts, the model gets smarter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rzcFeuCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cztrrm1icvytbhjcoqul.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzcFeuCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cztrrm1icvytbhjcoqul.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Light Bulb is getting smarter!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After labeling more images (and giving the model some time to train), you’ll see an Accuracy statistic, that shows you how well the model is doing. In this case our model is getting about 87% accuracy, which is pretty amazing since we only labeled 78 images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nAK0FPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib8mghcy1nt0oyynw2yg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nAK0FPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib8mghcy1nt0oyynw2yg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#labeling-2000-images-in-15-minutes"&gt;
  &lt;/a&gt;
  Labeling 2000 images in 15 minutes
&lt;/h2&gt;

&lt;p&gt;Now that our model is trained, it’ll start helping us label more data 😲. Light Bulb will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go through the dataset, and labeling images that it feels fairly confident about (97% confident in fact).&lt;/li&gt;
&lt;li&gt;Store the labels the model assigns and present them to you in batches. All you have do is confirm the labels are correct.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Nd1Mf6a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyfemzqse8i2imi5b27s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Nd1Mf6a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyfemzqse8i2imi5b27s.gif" alt="Verifying the automatically labeled images"&gt;&lt;/a&gt;&lt;em&gt;Verifying the automatically labeled images&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With this batch labeling feature, I managed to label all 2000 images in just 15 minutes.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-serving"&gt;
  &lt;/a&gt;
  Model Serving
&lt;/h2&gt;

&lt;p&gt;Light Bulb also exposes an API for your model. You can easily issue API requests to the server, and score new images. Let’s see what our model thinks about &lt;a href="https://github.com/czhu12/light-bulb/raw/master/docs/images/cat-image-1.jpg"&gt;this image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQKziwD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xkm330zgwk2tpt21etr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQKziwD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xkm330zgwk2tpt21etr.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --header "Content-Type: application/json" \
     --request POST \
     --data '{"type": "images","urls": ["https://github.com/czhu12/light-bulb/raw/master/docs/images/cat-image-1.jpg"]}' \ http://localhost:5000/score
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which returns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "labels": [
    "Cat",
    "Not Cat"
  ],
  "scores": [
    [
      0.9971857666969299, # Our model thinks its 99% a cat!
      0.0028141846414655447
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now lets try something thats &lt;a href="https://raw.githubusercontent.com/czhu12/light-bulb/master/docs/images/not-cat-image-1.jpg"&gt;not a cat&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYIjLCc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9tunno54ubwtmyvxgfy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYIjLCc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9tunno54ubwtmyvxgfy.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --header "Content-Type: application/json" \
     --request POST \
     --data '{"type": "images","urls": ["https://raw.githubusercontent.com/czhu12/light-bulb/master/docs/images/not-cat-image-1.jpg"]}' \ http://localhost:5000/score
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our model returns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "labels": [
    "Cat",
    "Not Cat"
  ],
  "scores": [
    [
      0.007293896283954382,
      0.9927061200141907 # Our model thinks this is 99.2% not a cat!
    ]
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Encoder-Decoder&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most deep learning tasks can be framed as an encoder — decoder architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h2&gt;

&lt;p&gt;For all image tasks we use a &lt;a href="https://arxiv.org/abs/1602.07360"&gt;Squeeze Net&lt;/a&gt; encoder pre-trained on &lt;a href="http://www.image-net.org/"&gt;Image Net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Image Classification: Image classification is done with a CNN based encoder, that is fed into a multi-layer perceptron decoder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bWbRlra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sd8y3r0tzxgwm1zks0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bWbRlra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sd8y3r0tzxgwm1zks0i.png" alt="Image Classification"&gt;&lt;/a&gt;&lt;em&gt;Image Classification&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Object Detection (work in progress): Object detection can be framed as a CNN based encoder, that is fed into a regression decoder. For object detection, the decoder will be a pre-trained &lt;a href="https://arxiv.org/abs/1804.02767"&gt;YOLOv3&lt;/a&gt; head.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cgyg-WRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cicicinrnkvwz3u4uflc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cgyg-WRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cicicinrnkvwz3u4uflc.jpeg" alt="Object detection example"&gt;&lt;/a&gt;&lt;em&gt;Object detection example&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  Text
&lt;/h2&gt;

&lt;p&gt;For all text tasks, we use a 3 layer LSTM encoder pre-trained as a language model on Wikitext-103.&lt;br&gt;
Text Classification: Text classification can be framed as an LSTM encoder that outputs into a logistic regression decoder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15vWoPR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw9lfs9vra6v9ykprp4y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15vWoPR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iw9lfs9vra6v9ykprp4y.png" alt="Sentiment classification is a classic text classification problem"&gt;&lt;/a&gt;&lt;em&gt;Sentiment classification is a classic text classification problem&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sequence Tagging (work in progress): Sequence tagging can be framed as an LSTM encoder, where at each time-step, the output is fed into a CRF model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BiqIOzM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgxjqynnqaf5vvlqq3tz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BiqIOzM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgxjqynnqaf5vvlqq3tz.png" alt="Named entity recognition is a sequence tagging problem."&gt;&lt;/a&gt;&lt;em&gt;Named entity recognition is a sequence tagging problem.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#secret-sauce"&gt;
  &lt;/a&gt;
  Secret Sauce
&lt;/h2&gt;

&lt;p&gt;Light Bulb uses a few tricks to train a model as fast as efficiently as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#active-learning"&gt;
  &lt;/a&gt;
  Active Learning
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--482iKkMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yirkpslhk733lg75en53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--482iKkMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yirkpslhk733lg75en53.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When Light Bulb decides which post to show you to label next, it chooses based on a process known as maximum entropy sampling. Before Light Bulb shows you an image to label, it’ll first try to make a prediction. Let's say one image was scored as 95% cat, 5% not cat, and another image was scored as 50% cat, 50% not cat. Which one should Light Bulb show you next? Intuitively, the second image should be labelled next, since that seems to be the one the model isn’t quite sure about. This way, we don’t waste any of your labels!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pretraining"&gt;
  &lt;/a&gt;
  Pre-training
&lt;/h2&gt;

&lt;p&gt;Light Bulb will leverage state of the art semi supervised learning, and pre-training. One of the reasons why deep learning is so powerful, is because of its unique ability to transfer knowledge from one task to another (see: &lt;a href="https://blog.acolyer.org/2016/04/21/the-amazing-power-of-word-vectors/"&gt;word vectors&lt;/a&gt;, &lt;a href="https://machinelearningmastery.com/transfer-learning-for-deep-learning/"&gt;transfer learning&lt;/a&gt;). For instance, a model that is good at predicting the next word in a sentence, ie: a language model, will also be good at classifying the sentiment of the sentence. Likewise, a model that is good at the &lt;a href="https://en.wikipedia.org/wiki/ImageNet"&gt;ImageNet dataset&lt;/a&gt;, will also be good at predicting cat vs not cat, with small tweaks of course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#semi-supervised-learning"&gt;
  &lt;/a&gt;
  Semi Supervised Learning
&lt;/h2&gt;

&lt;p&gt;Light Bulb also leverages semi supervised learning techniques to learn as much as possible from the dataset you provide. In the cat vs not cat dataset above, there were around 2000 images, but we only labeled about 80 of them. But that doesn’t mean that we can’t learn from the other 1920 images! Light Bulb uses all the images in the dataset, even if you haven’t labeled them, to train the model, by fine-tuning an auto-encoder, which will essentially learn the general properties of all the 2000 images.&lt;/p&gt;

&lt;p&gt;For full details check out the &lt;a href="https://github.com/czhu12/light-bulb"&gt;Github project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Any questions, suggestions, bugs, or just want to reach out, PM me on &lt;a href="https://twitter.com/chriszhu12"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Happy Labeling!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A Typewriter, but using a New HTML Tag</title>
      <author>Timothy Foster</author>
      <pubDate>Thu, 09 Sep 2021 19:55:08 +0000</pubDate>
      <link>https://dev.to/auroratide/a-typewriter-but-using-a-new-html-tag-60i</link>
      <guid>https://dev.to/auroratide/a-typewriter-but-using-a-new-html-tag-60i</guid>
      <description>&lt;p&gt;So last time, I made a &lt;a href="https://dev.to/auroratide/a-typewriter-but-with-no-html-css-or-js-1bgd"&gt;typewriter animation without HTML, CSS, nor Javascript&lt;/a&gt;. What happens if instead of using nothing, we allow ourselves to use... &lt;em&gt;everything&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/MWoJdda?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;All this is achieved with a fancy new HTML tag, &lt;code&gt;&amp;lt;typewritten-text&amp;gt;&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;This is a &lt;span class="nt"&gt;&amp;lt;typewritten-text&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;typewriter effect!&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&amp;lt;/typewritten-text&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Find out how to install and use it here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Auroratide"&gt;
        Auroratide
      &lt;/a&gt; / &lt;a href="https://github.com/Auroratide/typewritten-text"&gt;
        typewritten-text
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-new-html-tag"&gt;
  &lt;/a&gt;
  A New HTML Tag?
&lt;/h2&gt;

&lt;p&gt;The HTML standard allows developers to define &lt;strong&gt;custom elements&lt;/strong&gt; through &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;Web Components&lt;/a&gt;. Making a new element just requires a handful of Javascript, from there letting you define as much or as little functionality as needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyElement&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code for how the element looks and behaves&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;typewritten-text&lt;/code&gt; element is one such web component, designed to provide a semantic, flexible, and reusable typewriter component!&lt;/p&gt;

&lt;p&gt;Since web components are native browser technology, they are meant to work with most of our &lt;a href="https://custom-elements-everywhere.com/"&gt;beloved frameworks&lt;/a&gt; out of the box &lt;small&gt;(looking at you, &lt;em&gt;React&lt;/em&gt;...)&lt;/small&gt;. That's one of my favorite things about them!&lt;/p&gt;

&lt;p&gt;Granted, the developer experience can be... painful sometimes. This innocent little element turned out to be &lt;em&gt;much much harder&lt;/em&gt; than I originally thought in order to achieve all my goals for it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-raw-typewrittentext-endraw-element"&gt;
  &lt;/a&gt;
  The &lt;code&gt;typewritten-text&lt;/code&gt; Element
&lt;/h2&gt;

&lt;p&gt;Once Javascript enters the arena, basically anything becomes possible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No need for monospace requirements! The inner text can be of any font or size; in fact, it can mix fonts if you want.&lt;/li&gt;
&lt;li&gt;Built-in multiline support, for if you want to type out a longer sentence or two.&lt;/li&gt;
&lt;li&gt;A very simple interface; you can basically use it like any standard HTML tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, I put in the effort to make it as &lt;strong&gt;accessible&lt;/strong&gt; as possible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It represents its textual content regardless of current typed state, especially useful for those using Assistive Technologies.&lt;/li&gt;
&lt;li&gt;The blinking cursor animation is disabled for people who &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;prefer reduced motion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;No content-shifting either! The element's size is always the size of its content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perhaps the most interesting feature is its &lt;strong&gt;events&lt;/strong&gt;. The element dispatches events when characters are typed or the phrase is finished. By listening to those events, you can use the magic of code to make the typewriter do any custom behaviour that's desired!&lt;/p&gt;

&lt;p&gt;For example, starting another typewritten text:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typewritten-text:phrasetyped&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#showcasing"&gt;
  &lt;/a&gt;
  Showcasing
&lt;/h2&gt;

&lt;p&gt;Here's a couple of nifty things you can do with the &lt;code&gt;typewritten-text&lt;/code&gt; component!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typewriter-cycle"&gt;
  &lt;/a&gt;
  Typewriter Cycle
&lt;/h3&gt;

&lt;p&gt;Using &lt;strong&gt;events&lt;/strong&gt;, it's simple to cycle through different texts to type out.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/BaZWWwQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;small&gt;The &lt;code&gt;typewritten-text&lt;/code&gt; element is designed to be very basic so it can be used in as many ways as possible, which is why the cycle effect is not built-in. A different web component could be made to encapsulate the effect, though!&lt;/small&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#character-dialog"&gt;
  &lt;/a&gt;
  Character Dialog
&lt;/h3&gt;

&lt;p&gt;Characters tend to talk with a typewriter animation also!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Hit &lt;code&gt;Rerun&lt;/code&gt; at the bottom of the frame to see the animation again.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/auroratide/embed/rNwyYyW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#find-out-more"&gt;
  &lt;/a&gt;
  Find out more
&lt;/h2&gt;

&lt;p&gt;All information on how to install and use the &lt;code&gt;typewritten-text&lt;/code&gt; component can be found on github!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Auroratide"&gt;
        Auroratide
      &lt;/a&gt; / &lt;a href="https://github.com/Auroratide/typewritten-text"&gt;
        typewritten-text
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I may soon write a little more about the process of actually making (&lt;em&gt;and testing&lt;/em&gt;) a web component.&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Sharpen your Ruby: Part 5</title>
      <author>Eric The Coder</author>
      <pubDate>Thu, 09 Sep 2021 19:53:25 +0000</pubDate>
      <link>https://dev.to/ericchapman/sharpen-your-ruby-part-5-2l8c</link>
      <guid>https://dev.to/ericchapman/sharpen-your-ruby-part-5-2l8c</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP, and Ruby. By far Ruby is my favorite programming language. &lt;/p&gt;

&lt;p&gt;Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;Classic Loop&lt;/h2&gt;

&lt;p&gt;In Ruby like any other programming language we can iterate a number of fix or variable times. Here are a classic infinite loop that will execute until the program crash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;While loop&lt;/h2&gt;

&lt;p&gt;It is possible loop while a condition is meet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Will print numbers from 0 to 99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Loop until&lt;/h2&gt;

&lt;p&gt;It is possible loop until a condition is meet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
  &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Will print numbers from 0 to 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Loop x number of times&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# print numbers from 1 to 19&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or also&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Loop through each element&lt;/h2&gt;

&lt;p&gt;By far, the most use loop is the 'each' iteration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Array of names&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Peter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Iterate the names list&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;  
   &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# or shorthand version&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Break and Continue&lt;/h2&gt;

&lt;p&gt;It is possible to stop the loop before the end. It is also possible to skip one iteration and go to the next one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;  
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt; 
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Peter &lt;/span&gt;
&lt;span class="c1"&gt;# John&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The iteration will skip the puts statement if the name is equal to Mike&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;  
  &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt; 
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# Peter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The iteration will stop if the name is equal to Mike. &lt;/p&gt;

&lt;h1&gt;Exercise&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a loop with 10 iterations (from number 1 to 10)&lt;/li&gt;
&lt;li&gt;Each iteration will print only if the iteration number is even. Odd number will be skip.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Number &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Best JavaScript coding projects for beginners! 👨🏻‍💻</title>
      <author>Paul Dunz</author>
      <pubDate>Thu, 09 Sep 2021 19:45:49 +0000</pubDate>
      <link>https://dev.to/pauld103/javascript-coding-projects-for-beginners-3fj0</link>
      <guid>https://dev.to/pauld103/javascript-coding-projects-for-beginners-3fj0</guid>
      <description>&lt;p&gt;If you started coding in JavaScript and want to know some awesome project ideas, to practice this language on its fullest, here are the best JavaScript coding projects for beginners!!&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weather-app"&gt;
  &lt;/a&gt;
  Weather App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FeOjhGSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvt17rziihrxeorrn21t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FeOjhGSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tvt17rziihrxeorrn21t.png" alt="Weather App"&gt;&lt;/a&gt;&lt;br&gt;
This project will help you to learn, how to deal with API's and the JS-fetch function.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shopping-cart"&gt;
  &lt;/a&gt;
  Shopping Cart
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9L4KGYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfcq7ictx3bcjd73zneu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9L4KGYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfcq7ictx3bcjd73zneu.png" alt="Shopping Cart"&gt;&lt;/a&gt;&lt;br&gt;
A shopping cart teaches you how to deal with API's or databases. It allows you to deal with a lot of data. Furthermore you have the possibility to add some filters.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#portfolio-page"&gt;
  &lt;/a&gt;
  Portfolio Page
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJK9-Dxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fezn5rpf95zijkvndyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJK9-Dxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fezn5rpf95zijkvndyg.png" alt="Portfolio Page"&gt;&lt;/a&gt;&lt;br&gt;
This project is extremely simple. You don't have to use any API's or databases for this. There is no need for any backend! Just make some kind of landing pages and add interesting information about you! For more, just add a simple contact page!&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tic-tac-toe"&gt;
  &lt;/a&gt;
  Tic Tac Toe
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KA1am3Uq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z66t5d7tt138gt6pg3o5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KA1am3Uq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z66t5d7tt138gt6pg3o5.png" alt="Tic Tac Toe"&gt;&lt;/a&gt;&lt;br&gt;
With this game, you'll get a small view into game development. Especially for games where you and your partner have to play in alternating order.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-list"&gt;
  &lt;/a&gt;
  To-Do List
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bZiuOYbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oulcwttfgt9qu6x7y7ov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZiuOYbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oulcwttfgt9qu6x7y7ov.png" alt="To-Do List"&gt;&lt;/a&gt;&lt;br&gt;
With this project you will go deeper into the thematic "removing and adding" elements. You will learn how to deal with "Drag and Drop" and way more!&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-clock"&gt;
  &lt;/a&gt;
  Digital Clock
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JK-EPts8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bc0sxpsz7w73n2w86pv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JK-EPts8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bc0sxpsz7w73n2w86pv.png" alt="Digital Clock"&gt;&lt;/a&gt;&lt;br&gt;
The digital clock is a very basic project to get to know the built in function for time. Beside to that you'll learn some CSS skills.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-your-turn"&gt;
  &lt;/a&gt;
  It's your turn!
&lt;/h3&gt;

&lt;p&gt;Comment down below other awesome projects for beginners, that you already coded. Let me know!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Project Management with GitHub</title>
      <author>Status Hero Editorial Staff</author>
      <pubDate>Thu, 09 Sep 2021 19:38:50 +0000</pubDate>
      <link>https://dev.to/statushero/project-management-with-github-33g5</link>
      <guid>https://dev.to/statushero/project-management-with-github-33g5</guid>
      <description>&lt;p&gt;&lt;em&gt;Struggling to manage projects in GitHub? Learn how to use its features alongside third party tools to get organized and effectively run a project.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When people think of GitHub, they think of a global, collaborative platform for developers to store and share their code. And—especially in the early days—that's what it was. Nowadays GitHub offers more, including a fully-fledged project management solution.&lt;/p&gt;

&lt;p&gt;GitHub allows teams of developers to work together—and run entire projects alongside project managers—right from the GitHub interface itself. These tools, especially when augmented by third-party tools that add additional features on top, allow you to run your project right where your code lives—all in one interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firstparty-github-tools"&gt;
  &lt;/a&gt;
  First-Party GitHub Tools
&lt;/h2&gt;

&lt;p&gt;There are many existing tools within the GitHub interface that you can use to manage your projects, from simple note-taking and commenting to complex solutions. However, at the core of managing projects on GitHub are issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h3&gt;

&lt;p&gt;Issues can be considered the atomic unit of GitHub project management. If there's something you want to track in a GitHub project management workflow, there’s likely an issue about it. &lt;/p&gt;

&lt;p&gt;Despite the name, issues can be used for anything, from tracking bug reports to more long-term feature requests. Each issue can have a discussion about it, which includes screenshots and video functionality. When work has started on a particular issue, anyone in the thread can mention a pull request. Pull requests allow other users in the thread to directly click through to the code at the heart of the issue.&lt;/p&gt;

&lt;p&gt;Issues aren’t perfect. If they’re left as just their base unit, they can quickly become disorganized on a project of reasonable scale. An infinite list of issues doesn't help anyone know what to work on next, what's important, or even what issues relate to which part of the project. Luckily, issues aren’t the only tool GitHub project management offers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#labels"&gt;
  &lt;/a&gt;
  Labels
&lt;/h3&gt;

&lt;p&gt;Labels help prevent issues and pull requests from becoming an unorganized list. They’re often used to tag an issue as a bug, feature request, enhancement, or simply a discussion. Likewise, labels can distinguish different pull requests with tags such as ready to merge, blocked, and so on. &lt;/p&gt;

&lt;p&gt;Compared to a list of pull requests that all look the same, it's much easier for a senior engineer to filter all the pull requests labeled as "ready to merge" and work on those. The same goes for issues. If you have an open-source maintainer whose job is to prioritize issues and make sure they get assigned correctly, it’s useful to see which issues are unlabeled and need to be addressed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xzh18qFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/iKCTapo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xzh18qFR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/iKCTapo.png" alt="Some examples of GitHub Labels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Labels are color-coded and visual, which makes issues and pull requests easier to scan and sort quickly. For example, once you’re familiar with the color of bug reports, it becomes easy to identify them. But while labels are helpful, they don’t help with prioritization or confirmation of what features should be deployed together. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#milestones"&gt;
  &lt;/a&gt;
  Milestones
&lt;/h3&gt;

&lt;p&gt;Milestones allow you to group issues together and are usually related to a specific version of software. For example, let’s say you’ve identified a group of features to complete before you release version 1.1. You can then create a version 1.1 milestone and assign that to all of those features. Doing so allows you to filter the list of issues to identify those prioritized for that version. Plus, you’ll have a visual indicator as to how many issues are left before you can ship that new version.&lt;/p&gt;

&lt;p&gt;Milestones are especially helpful for software products that do scheduled releases (as opposed to continuous delivery). They help ensure that key issues are grouped together, which also helps project managers know how development teams are progressing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-boards-and-tables"&gt;
  &lt;/a&gt;
  Project Boards and Tables
&lt;/h3&gt;

&lt;p&gt;List views aren’t always the most organized, and this is where boards and tables come in. Board and table views organize your issues (with labels and milestones applied) into a traditional Kanban board layout. You can also use a table layout, particularly if you're familiar with &lt;a href="https://airtable.com/"&gt;Airtable&lt;/a&gt; or &lt;a href="https://monday.com/"&gt;monday.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TW5O2Xxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ZCoErFY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TW5O2Xxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ZCoErFY.png" alt="An example of GitHub issues organized in a table view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By structuring your board and giving each team their own column (Ready for Development, QA, etc.), these views can make even large backlogs accessible. Boards and tables work across any size team, too, from a single member to a mature development team at a large company. These tools are built right into GitHub, meaning projects already on the platform are much easier to manage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thirdparty-tools"&gt;
  &lt;/a&gt;
  Third-Party Tools
&lt;/h2&gt;

&lt;p&gt;While GitHub’s own project management tools work great, software that builds on top of it can help make you even more productive. Let’s take a look at some effective third-party tools:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zapier"&gt;
  &lt;/a&gt;
  Zapier
&lt;/h3&gt;

&lt;p&gt;Zapier is a tool that helps users connect their apps and automate workflows. It connects most apps to any other app, which allows you to create workflows that even the apps themselves don't offer natively.&lt;/p&gt;

&lt;p&gt;By connecting GitHub to Zapier, you can help data from GitHub flow into other apps you might use for communication, time tracking, and more. For example, if you want to get a Slack notification when someone opens a new GitHub issue, you can set that up with Zapier—without writing any additional code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3bH096m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/E8uhHY2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3bH096m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/E8uhHY2.png" alt="An example of some of the GitHub workflows you can enable with Zapier"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While lots of tools have APIs that allow you to connect them, it can get very tedious to maintain these different API connections without anything breaking. With a tool like Zapier, your systems can talk to each other without the need to write and maintain code outside your core codebase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#status-hero"&gt;
  &lt;/a&gt;
  Status Hero
&lt;/h3&gt;

&lt;p&gt;Having information about code and issues in GitHub is great, but there’s more to an individual contributor's typical workday. Issues get blocked by other issues, organizations change, and other unpredictable events occur. Your team may be struggling with morale, or slowly fading into the background. All these things are difficult to track with only a GitHub board. This is where Status Hero comes in. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://statushero.com/integrations/github"&gt;Status Hero&lt;/a&gt; is a tool that allows you to get a more holistic view of your team, including GitHub participation, JIRA and Trello issues, or even their mood on any given day. It prompts your teammates to check in and provide updates (similar to what you might do in a standup), which are then aggregated to help understand the health of your team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BIaO7zXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/C5Vm12t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BIaO7zXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/C5Vm12t.png" alt="The Status Hero dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Status Hero isn't a substitute for checking in on your team regularly, but an instant data summary of all your various tools can be very helpful to ensure projects stay on track and under budget.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As projects continue to get more complicated, determining the right toolset for your team is more critical than it’s ever been. Many team projects rely on GitHub, so managing those projects from its platform directly represents a seamless, effective option. &lt;/p&gt;

&lt;p&gt;While GitHub works, third-party project management tools like &lt;a href="https://statushero.com/"&gt;Status Hero&lt;/a&gt; can provide that extra insight to help keep your team on track. As GitHub continues to build out its project management offering, it will become the cornerstone of more and more development teams. By getting familiar with GitHub’s tools and using third-party tools to augment them, you can help ensure your project team is a well-oiled machine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By Keanan Koppenhaver. Keanan is the CTO at Alpha Particle where he helps publishers modernize their technology platforms and build their developer teams.&lt;/em&gt; &lt;/p&gt;

</description>
      <category>agile</category>
      <category>github</category>
      <category>management</category>
    </item>
    <item>
      <title>Building a Dictionary app in React js</title>
      <author>Desi-Codes</author>
      <pubDate>Thu, 09 Sep 2021 18:48:13 +0000</pubDate>
      <link>https://dev.to/desicodes/building-a-dictionary-app-in-react-js-27mi</link>
      <guid>https://dev.to/desicodes/building-a-dictionary-app-in-react-js-27mi</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SLE3SAi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/tyfldsi6ql9s/dictionary-app-ss_Aw7chCnr34.png%3FupdatedAt%3D1631212915008" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLE3SAi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/tyfldsi6ql9s/dictionary-app-ss_Aw7chCnr34.png%3FupdatedAt%3D1631212915008" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#in-this-series-we-will-build-a-dictionary-app-from-scratch-the-features-include-using-public-api-playing-the-pronunciationaudio-bookmarking-any-word-using-local-storage-to-save-it-and-navigation"&gt;
  &lt;/a&gt;
  In this series, we will build a dictionary app from scratch, the features include, using Public API, playing the pronunciation(audio), bookmarking any word (using local storage to save it) and navigation.
&lt;/h5&gt;

&lt;p&gt;It's a beginner's level React app, in order to get started you just need to know the basics of React (components, JSX, props).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dictionary-rho.vercel.app/"&gt;View live &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.desicodes.io/projects/dictionary"&gt;Learn more + Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLmA3URVkjqnmwxdT6GtkfaGVQ4Wm8hnPo"&gt;Youtube Playlist&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Guide on Transforming an Idea into a Website</title>
      <author>Sean C Davis</author>
      <pubDate>Thu, 09 Sep 2021 18:42:32 +0000</pubDate>
      <link>https://dev.to/stackbit/a-guide-on-transforming-an-idea-into-a-website-4oco</link>
      <guid>https://dev.to/stackbit/a-guide-on-transforming-an-idea-into-a-website-4oco</guid>
      <description>&lt;p&gt;At its core, Jamstack was a revolution. It took the best part of the first 25+ years of website development and combined them into a powerful pattern that is used widely today. It has created an explosion of ideas and innovations that have helped developers across the world build websites that are more performant, more secure, less expensive, easier to scale, and (most importantly) fun to build!&lt;/p&gt;

&lt;p&gt;Instead of taking you on a theoretical journey and digging into the technical nuances of the Jamstack, we're going someplace else. We'll take a more tangible journey, as we step through the entire process of building a Jamstack website, from the little light bulb in your brain all the way to a physical website that real people can visit.&lt;/p&gt;

&lt;p&gt;These are the stops we'll make along the way:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bring the design to life&lt;/li&gt;
&lt;li&gt;Find a developer&lt;/li&gt;
&lt;li&gt;Build the site (write the code)&lt;/li&gt;
&lt;li&gt;Review and test the site&lt;/li&gt;
&lt;li&gt;Deploy, edit, and repeat, repeat, repeat&lt;/li&gt;
&lt;li&gt;Or ... do it the Stackbit way!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Buckle up. Here we go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-1-design"&gt;
  &lt;/a&gt;
  Stop #1: Design
&lt;/h2&gt;

&lt;p&gt;The first stop on the Jamstack journey is design — the process of visually representing your ideas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-spec-to-delivery"&gt;
  &lt;/a&gt;
  From Spec to Delivery
&lt;/h3&gt;

&lt;p&gt;The way this typically works is that you provide some form of &lt;em&gt;spec&lt;/em&gt; to a designer. The designer then takes that spec and turns it into one or more design files that show what should be built. That can include page layouts, individual components, or global patterns like colors, fonts, and typography.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delivering-a-good-spec"&gt;
  &lt;/a&gt;
  Delivering a Good Spec
&lt;/h3&gt;

&lt;p&gt;The “spec” you provide the designer should be more then, “I need a website.” Before you bring a designer into your project, consider spending time to gather the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A list of pages on the site, along with the purpose of each page. Bonus points if you also include content, as you'll reduce the variability of the design when it is transformed into code.&lt;/li&gt;
&lt;li&gt;  Brand assets or other visual specifications you have — logos, colors, typography, etc.&lt;/li&gt;
&lt;li&gt;  A list of websites that you really like and why you like them. The designer will want you to be happy, and the more you can tell them what you like, the higher the chance that they will deliver on your vision.&lt;/li&gt;
&lt;li&gt;  A list of competitors. Even if the designer doesn't use inspiration from your competitors' sites, it's nice for them to know where the competition stands and what it'll take to be noticed in the crowd.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The designer may ask you for more information, but this is a good start to get the conversation rolling.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#locating-the-right-designer"&gt;
  &lt;/a&gt;
  Locating the Right Designer
&lt;/h3&gt;

&lt;p&gt;If you have a designer already working with you, that's a bonus! If not, the cost and abilities of designers vary &lt;em&gt;widely&lt;/em&gt;. You could use a service like &lt;a href="https://www.fiverr.com/"&gt;Fiverr&lt;/a&gt; and have a decent-sized website designed for a few hundred dollars (USD). Or you could hire a fancy agency and spend tens of thousands of dollars.&lt;/p&gt;

&lt;p&gt;Generally speaking, cost tends to be &lt;em&gt;somewhat&lt;/em&gt; proportional to experience and the quality you're going to get back. But that doesn't mean the inexpensive designer is going to provide an awful design. This is how I usually think about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If I hire a designer on the cheap, I'm going to have to do more work if I want to get something worthwhile out of it. I'll have to drive the process. I'll have to deliver a super tight spec so that they give me exactly what I'm looking for.&lt;/li&gt;
&lt;li&gt;  If I hire a fancy and expensive firm, I should expect to still have to put in time and effort, but should be led through the process and be left with something truly great.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#looking-toward-development"&gt;
  &lt;/a&gt;
  Looking Toward Development
&lt;/h3&gt;

&lt;p&gt;What's interesting about this process is that while design tends to be a fraction of the cost of development, it's also largely responsible for determining the complexity of the build. Granted, a developer can spend your money in a silly way and &lt;em&gt;over-engineer&lt;/em&gt; a website for you. But, &lt;em&gt;most of the time&lt;/em&gt;, the time a developer is going to spend building your site is determined by &lt;em&gt;their specification&lt;/em&gt; — the design files.&lt;/p&gt;

&lt;p&gt;The more interactive the design, the more it's going to cost to develop. The more unique each page is from the others, the more it's going to cost to develop.&lt;/p&gt;

&lt;p&gt;You don't have to be a fortune teller. Instead, leave a little room in your budget for going back to the designer after consulting with your developer. If the developer says you can save a thousand dollars by changing a feature, maybe you'd want to spend another hundred to have the designer reimagine and simplify it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-deliverable"&gt;
  &lt;/a&gt;
  The Deliverable
&lt;/h3&gt;

&lt;p&gt;After going through the design phase, you're left with the &lt;em&gt;deliverables&lt;/em&gt; — artifacts you can pass on to the developer as their specification. &lt;a href="https://github.com/seancdavis/stackbit-jamstack-journey/tree/main/01-design"&gt;Here's an example for a simple site&lt;/a&gt; that includes just four files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--homepage--desktop.png"&gt;Home page for large screens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--homepage--mobile.png"&gt;Home page for small screens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--content-page.png"&gt;Interior pages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--style-tiles.png"&gt;Style tiles&lt;/a&gt; (i.e. global style definitions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is an example of what a style tiles spec might look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n8_3hyU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--style-tiles.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n8_3hyU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/seancdavis/stackbit-jamstack-journey/main/01-design/unmute--style-tiles.png" alt="An example of style tiles — styles that apply to all (or most) pages on the site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(This example is from &lt;a href="https://www.unmutedstories.com/"&gt;Unmute&lt;/a&gt;, a side project I'm involved with.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stops-24-development"&gt;
  &lt;/a&gt;
  Stops #2-4: Development
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Toot toot!&lt;/em&gt; This train keeps on rolling. The next several steps encompass the development phase of the project. Our Jamstack train makes three stops here because there are &lt;em&gt;usually&lt;/em&gt; three steps in this process, though the amount to which you are involved in each will vary depending on the developer you hire.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-process"&gt;
  &lt;/a&gt;
  The Process
&lt;/h3&gt;

&lt;p&gt;This process itself is similar to the design process in that it goes through these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Locate &amp;amp; Estimate:&lt;/strong&gt; Developer provides estimate based on specification.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build:&lt;/strong&gt; Developer &lt;em&gt;builds&lt;/em&gt; the site.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review:&lt;/strong&gt; The developer delivers the code and you review to make sure it works.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#locate-a-developer"&gt;
  &lt;/a&gt;
  Locate a Developer
&lt;/h3&gt;

&lt;p&gt;You can go through much the same process as you did with design. If you have an in-house developer, great! If not, you can use a service like Fiverr and hire devs on the cheap. Or you can look to a more formal agency or dev shop to suit your needs.&lt;/p&gt;

&lt;p&gt;In this case, you don't have to build a spec for the developer. You already did that! The design files are your specification.&lt;/p&gt;

&lt;p&gt;Finding the right developer is crucial to this process, as well. And that's why I've broken out the build portion (below) as three steps. Some developers (usually those you hire on the cheap) may only complete the first step in the process. But for you to truly achieve a useful and powerful Jamstack site, you'll want someone who can take you through all three.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-build"&gt;
  &lt;/a&gt;
  The Build
&lt;/h3&gt;

&lt;p&gt;These are the steps in the process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Static build&lt;/li&gt;
&lt;li&gt;Templatizing the code&lt;/li&gt;
&lt;li&gt;Separating content from presentation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can spend very little on web development and still get something that you can deploy out of it. Often, that means the developer only went through the first step and gave you static files. That's totally fine, but it will make adding new pages or editing existing content super difficult.&lt;/p&gt;

&lt;p&gt;The second step — &lt;em&gt;templatizing&lt;/em&gt; — aims to take the static code and turn it into modular pieces that can be reused. This process is explained in great length and technical detail &lt;a href="https://www.stackbit.com/blog/jamstack-journey-templatize-static-html/"&gt;in this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the code has been modularized, it can be further adjusted to extract all the content and put it in a single place, such as a content management system. This process is explained in great length &lt;a href="https://www.stackbit.com/blog/jamstack-journey-separate-content/"&gt;in this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And the end of these three steps, you'll be left with a system that you can use to edit content without worrying about messing up the code. In fact, you ought to be able to edit the content without even &lt;em&gt;seeing&lt;/em&gt; the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reviewing-the-site"&gt;
  &lt;/a&gt;
  Reviewing the Site
&lt;/h3&gt;

&lt;p&gt;While the review process for design was more conceptual, with development, it's up to you to actually test that the website behaves as you'd expect. In other words, you're &lt;em&gt;trying to break it&lt;/em&gt;. The developer should respond by fixing any bugs discovered within a certain timeframe.&lt;/p&gt;

&lt;p&gt;While the developer may not &lt;em&gt;deploy&lt;/em&gt; the code for you, they ought to be able to help you get it running so that you can test and send notes back to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-5-deploy-amp-use"&gt;
  &lt;/a&gt;
  Stop #5: Deploy &amp;amp; Use!
&lt;/h2&gt;

&lt;p&gt;At this point you have a site that is ready to go to production, so that's the next step. I recommend using that same developer to help you through that process, but I've broken it out here because it tends to require more effort from you than the development phase of the project.&lt;/p&gt;

&lt;p&gt;Here are a few of the crucial steps in this process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Choose a host and setup an account&lt;/li&gt;
&lt;li&gt;  Buy and/or configure a domain name&lt;/li&gt;
&lt;li&gt;  Add analytics tooling&lt;/li&gt;
&lt;li&gt;  Add SEO content&lt;/li&gt;
&lt;li&gt;  Use it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at each of these briefly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h3&gt;

&lt;p&gt;The term "Jamstack" was coined by a startup called &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;. And they continue to lead the way in terms of deploying and hosting Jamstack websites. But there are other great tools out there, like &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;, &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/app-service/static/"&gt;Azure Static Web Apps&lt;/a&gt;, and many more.&lt;/p&gt;

&lt;p&gt;Whatever you choose, you'll want to set up an account for yourself. Most of these services have a free (or low cost) tier that is enough to accommodate small websites.&lt;/p&gt;

&lt;p&gt;Once you have an account, you can add your developer, and they will hook it up so that the code is deployed. And then you will have a working website!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain"&gt;
  &lt;/a&gt;
  Domain
&lt;/h3&gt;

&lt;p&gt;You'll want a domain name for your site, otherwise you'll be left with default names from your hosting provider. If you already have one, that's great!&lt;/p&gt;

&lt;p&gt;Your developer can tell you what you need to do to point the domain to your host, and then you'll be able to use your domain name to access your new website!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#analytics"&gt;
  &lt;/a&gt;
  Analytics
&lt;/h3&gt;

&lt;p&gt;Analytics is a crucial piece of the puzzle, because you want to know who is visiting your website. Some hosting providers (like Netlify) offer what they call server-side analytics, which tend to be the most accurate, though there are limitations to them. But if you're just getting started, it's easy enough to start with &lt;a href="https://marketingplatform.google.com/about/analytics/"&gt;Google Analytics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tell your developer you want to install Google Analytics and they can help you through that process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo"&gt;
  &lt;/a&gt;
  SEO
&lt;/h3&gt;

&lt;p&gt;Of all these pre-launch steps, perhaps the trickiest to deal with is SEO. Usually I'd expect a developer to prepare my site to support SEO. That means automatically generating a sitemap file and providing the ability to customize SEO meta values for any given page. (It would be worthwhile to mention this when first setting up the arrangement with the developer so that they are prepared.)&lt;/p&gt;

&lt;p&gt;You'll want to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register your site (and sitemap) with &lt;a href="https://developers.google.com/search"&gt;Google Search Console&lt;/a&gt;. This will help provide you with analytics on where you land in search results. It'll also help Google know where your site is and what its pages are.&lt;/li&gt;
&lt;li&gt;Add custom SEO values for every page on your site, including adding an image.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you don't feel confident in this step, you can also hire an SEO expert to help you through the process. These types of consultants also have a huge price range, from Fiverr to big agency. If you're just getting started, I recommend toward the cheaper option — just have someone give you a quick audit and make the changes they suggest.&lt;/p&gt;

&lt;p&gt;(Insider secret: Mostly what these SEO pros are doing is using some expensive tool, hooking up your site, running a report, and giving you the output of that report. The funny thing is, some of the people are often less expensive than buying the tools and doing the work yourself.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editing"&gt;
  &lt;/a&gt;
  Editing
&lt;/h3&gt;

&lt;p&gt;When all of those last bits are in place, you should have a live site and it's time to start promoting it and keeping it up to date. Make a few changes to the content. Tell the world about it. and give yourself a pat on the back.&lt;/p&gt;

&lt;p&gt;BUT WAIT! Before we wrap this up, I want to spend a little time giving you what I think is a better way to get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stop-6-an-easier-approach"&gt;
  &lt;/a&gt;
  Stop #6: An Easier Approach
&lt;/h2&gt;

&lt;p&gt;If you're new to the world of creating websites, I think you should take a look at &lt;a href="https://www.stackbit.com/"&gt;Stackbit&lt;/a&gt;! (Of course I do, I work there and am writing on their blog.)&lt;/p&gt;

&lt;p&gt;Stackbit is a site builder that specializes in Jamstack websites.&lt;/p&gt;

&lt;p&gt;Instead of going through that entire process (the first five stops on the Jamstack journey), you could do it all yourself in much less time for much less money. After &lt;a href="https://app.stackbit.com/login"&gt;creating an account&lt;/a&gt;, Stackbit will give you a list of templates from which you can build your site. You'll then walk through the process of customizing it just for you.&lt;/p&gt;

&lt;p&gt;The catch here is that Stackbit isn't just another WordPress or Squarespace, even though it may feel like it at first. Stackbit works to be super transparent about where your code and content live. What that means is that you can start this journey on your own, without a designer or a developer, at no cost other than your time. And you'll still have access to the code and content that powers your site. Once you're up and running, if you need a little help, &lt;em&gt;that's&lt;/em&gt; when you can bring in a designer, developer, or SEO expert to make some suggestions or additions to your new site.&lt;/p&gt;

&lt;p&gt;If that sounds like a walk in the park, &lt;a href="https://app.stackbit.com/create"&gt;give it a try&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;In any case, I hope you've enjoyed your ride, and I'd love to learn more about your &lt;em&gt;Jamstack Journey&lt;/em&gt;. &lt;a href="https://twitter.com/seancdavis29"&gt;Let's chat&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>design</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Routing on the Edge</title>
      <author>Danielle Heberling</author>
      <pubDate>Thu, 09 Sep 2021 18:23:09 +0000</pubDate>
      <link>https://dev.to/koan/routing-on-the-edge-3pn</link>
      <guid>https://dev.to/koan/routing-on-the-edge-3pn</guid>
      <description>&lt;p&gt;At &lt;a href="https://www.koan.co/?utm_campaign=edgerouter&amp;amp;utm_medium=blog&amp;amp;utm_source=medium"&gt;Koan&lt;/a&gt;, our application’s frontend is a &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA"&gt;Single Page Application&lt;/a&gt; running in two distinct environments (Staging and Production).&lt;/p&gt;

&lt;p&gt;In addition to viewing the Staging and Production versions of our frontend, we also need to serve up a version of the frontend based off of a git commit in our Staging environment. Doing this gives Koan developers a “live preview” URL to review what the frontend looks like after committing changes but before they’re merged.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-solution"&gt;
  &lt;/a&gt;
  Our Solution
&lt;/h3&gt;

&lt;p&gt;Our solution has the following high level steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code changes are merged into our &lt;code&gt;main&lt;/code&gt; branch. This action kicks off our &lt;a href="https://circleci.com/"&gt;CI system&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The CI builds the code and places the build artifacts (static HTML/JavaScript/CSS files) into S3 buckets&lt;/li&gt;
&lt;li&gt;A CloudFront CDN is in front of one of those S3 buckets&lt;/li&gt;
&lt;li&gt;Our staging app domain is pointed at this CloudFront CDN&lt;/li&gt;
&lt;li&gt;On all origin requests to the staging app domain → a Lambda@Edge function serves a build-specific &lt;code&gt;index.html&lt;/code&gt; with static references to the rest of the build&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Li0dG661--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3o4w9nq3nphde65ai4wg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Li0dG661--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3o4w9nq3nphde65ai4wg.png" alt="edge-router"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-details-on-build-artifacts"&gt;
  &lt;/a&gt;
  More Details on Build Artifacts
&lt;/h3&gt;

&lt;p&gt;Our CI process delivers build artifacts into S3 at &lt;code&gt;/commit/[commit sha]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When a developer wants to “live preview” their recent commit, they need to add &lt;code&gt;/commit/&amp;lt;their commit SHA&amp;gt;&lt;/code&gt; to the end of our staging app domain.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;index.html&lt;/code&gt; file in this S3 bucket references static assets (CSS/JS files) hosted on a separate &lt;code&gt;frontend-builds subdomain&lt;/code&gt;. This domain pointed at a second CloudFront CDN with a second S3 bucket as its origin. Serving these as CDN-friendly, immutable assets saves significant compute (money) for resources that don't need Lambda@Edge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inside-the-lambda-router-function"&gt;
  &lt;/a&gt;
  Inside the Lambda "router" function
&lt;/h3&gt;

&lt;p&gt;Whenever that developer requests a specific version of the app, the request hits CloudFront as an &lt;code&gt;origin-request&lt;/code&gt;. Our Lambda@Edge function receives a &lt;a href="https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html#example-origin-request"&gt;message event&lt;/a&gt; from CloudFront and then proceeds to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gets the git commit hash from the pathname in the request. If there isn’t a commit hash in the URL, then we assume we want the latest version.&lt;/li&gt;
&lt;li&gt;Gets the requested index file&lt;/li&gt;
&lt;li&gt;Returns the index file as the body for our response&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-some-code"&gt;
  &lt;/a&gt;
  Let's see some code
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Gets the git commit hash from the pathname in the request&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Whenever someone makes an HTTP request to the CDN, the CDN then sends an event object to our Lambda@Edge function. The shape looks something like &lt;a href="https://docs.amazonaws.cn/en_us/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html#example-origin-request"&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We then pull the &lt;code&gt;pathname&lt;/code&gt; off of that event object:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now that we have our &lt;code&gt;pathname&lt;/code&gt; (including the optional &lt;code&gt;commit/&amp;lt;commit sha&amp;gt;&lt;/code&gt; fragment), we can extract our git commit hash by calling a &lt;code&gt;getHash&lt;/code&gt; helper function.&lt;/p&gt;

&lt;p&gt;If there isn’t a hash present in the &lt;code&gt;pathname&lt;/code&gt; this means that we just want to serve up the latest version of the app, so we'll return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gets the requested index file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we have our git commit hash (or the &lt;code&gt;null&lt;/code&gt; default) from the &lt;code&gt;pathname&lt;/code&gt;, let's pass that commit hash into another helper function to get the desired index file from our S3 bucket.&lt;/p&gt;

&lt;p&gt;The variables that start with &lt;code&gt;process.env&lt;/code&gt; are NodeJS's way of referencing environment variables on the Lambda function. We set these variables when the function was provisioned.&lt;/p&gt;

&lt;p&gt;If the S3 object (index.html file) is missing, we handle that in the &lt;code&gt;catch&lt;/code&gt; and log the error.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;A possible next step to improve this might be using Lambda@Edge memory. Since the index file is immutable, we should only need to retrieve it from S3 once (or if Edge memory is dumped). &lt;a href="https://aws.amazon.com/blogs/networking-and-content-delivery/leveraging-external-data-in-lambdaedge/"&gt;https://aws.amazon.com/blogs/networking-and-content-delivery/leveraging-external-data-in-lambdaedge/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Returns the index file as the body for our response &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All together the function's code will look something like this&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h3&gt;

&lt;p&gt;While there are opportunities for improvement, this setup works well for our team, and we thought that sharing this approach might give you and your team some ideas to iterate on.&lt;/p&gt;

&lt;p&gt;More recently, AWS released &lt;a href="https://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale/"&gt;CloudFront Functions&lt;/a&gt;. Stay tuned as we evaluate if that’s a good solution for us to use instead of our existing Lambda@Edge functions. It’s highly possible we could re-architect this to completely bypass the S3 GET and/or further utilize the edge caching.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks to &lt;a href="https://dev.to/danielkaczmarczyk"&gt;Daniel Kaczmarczyk&lt;/a&gt; and &lt;a href="https://dev.to/rjz"&gt;RJ Zaworski&lt;/a&gt; for reviewing drafts of this article. &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>aws</category>
      <category>cloudskills</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to use ZeroMQ Pipeline Pattern in Golang</title>
      <author>Francisco Mendes</author>
      <pubDate>Thu, 09 Sep 2021 18:19:10 +0000</pubDate>
      <link>https://dev.to/franciscomendes10866/how-to-use-zeromq-pipeline-pattern-in-golang-4fid</link>
      <guid>https://dev.to/franciscomendes10866/how-to-use-zeromq-pipeline-pattern-in-golang-4fid</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;I bet many of us have thought about decopulating a backend and splitting it into microservices. Let's say you have a monolithic backend and then you decide to add something like file processing and you'd rather have a microservice that has the sole function of processing files.&lt;/p&gt;

&lt;p&gt;But let's assume that you want to process several files simultaneously instead of one at a time, in this case I believe it would be ideal to distribute the work among several microservices responsible solely and exclusively for processing files.&lt;/p&gt;

&lt;p&gt;To distribute the work among the different applications we will need an intermediary and the most popular solution is the use of a &lt;a href="https://en.wikipedia.org/wiki/Message_broker"&gt;message broker&lt;/a&gt;. However, not all of us need a solution as advanced as the use of a message broker, it is in these specific cases (smaller applications) that I like to use &lt;a href="https://zeromq.org/"&gt;ZeroMQ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don't know ZeroMQ, that's okay because it's a technology that isn't widely shared in the community, so if you want to know more about ZeroMQ, I recommend reading &lt;a href="https://intelligentproduct.solutions/technical-software/introduction-to-zeromq/"&gt;this&lt;/a&gt; article, which will give you a better introduction than me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todays-example"&gt;
  &lt;/a&gt;
  Today's example
&lt;/h2&gt;

&lt;p&gt;The idea of today's example is to create a simple application (&lt;strong&gt;server&lt;/strong&gt;) that will send multiple messages to another application/s (&lt;strong&gt;worker&lt;/strong&gt;) that will be responsible for just logging those same messages.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;As you may have already understood, we are going to have two backends. One of the backends we will call a &lt;strong&gt;server&lt;/strong&gt;, which will be our message sender. The other backend will be the worker, which will be our small microservice.&lt;/p&gt;

&lt;p&gt;First and foremost, let's install our dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go get github.com/pebbe/zmq4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start working on our server but first I have to explain the pattern we are going to use today. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://zeromq.org/socket-api/?language=go&amp;amp;library=zmq4#pipeline-pattern"&gt;Pipeline&lt;/a&gt; pattern, also known as Push/Pull, allows you to distribute tasks among several workers evenly, which are arranged in a certain pipeline.&lt;/p&gt;

&lt;p&gt;Now that you have a little idea we can start by importing our client and configuring it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// @/server/server.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;zmq&lt;/span&gt; &lt;span class="s"&gt;"github.com/pebbe/zmq4"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;zctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;zctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PUSH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://*:5555"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's create a for loop to send a total of one hundred messages to our worker/s. First let's log which message is being sent, then we'll send that same message using the &lt;code&gt;s.Send()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;But before sending the message we have to convert the integer number to string. Finally, to delay the sending of messages, let's add a timeout of five hundred milliseconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// @/server/server.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="n"&gt;zmq&lt;/span&gt; &lt;span class="s"&gt;"github.com/pebbe/zmq4"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;zctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;zctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PUSH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://*:5555"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sending Job %d...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Job "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Itoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Millisecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start working on our &lt;strong&gt;worker&lt;/strong&gt;. First let's import our client and configure it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// @/worker/worker.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;zmq&lt;/span&gt; &lt;span class="s"&gt;"github.com/pebbe/zmq4"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;zctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;zctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://localhost:5555"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our worker we are going to add an infinite for loop so that it never stops its execution and what we are going to do is receive the messages from our server using the &lt;code&gt;s.Recv()&lt;/code&gt; function. Finally, let's log each of the messages that our worker receives.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// @/worker/worker.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;

    &lt;span class="n"&gt;zmq&lt;/span&gt; &lt;span class="s"&gt;"github.com/pebbe/zmq4"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;zctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;zctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp://localhost:5555"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way we are going to test our project is very simple, we will have three windows in the terminal open and only one will be to start the server and the rest will be used by our workers. Like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z-zstBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1631211403/Kapture_2021-09-09_at_19.15.24-min_awcyt5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z-zstBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1631211403/Kapture_2021-09-09_at_19.15.24-min_awcyt5.gif" alt="testing article example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the gif, the workers ran at different times but the tasks were evenly distributed between them.&lt;/p&gt;

&lt;p&gt;In the same way as when I stopped the execution of one of the workers and then started it again, the tasks were evenly distributed again without any problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As always, I hope you found it interesting. If you noticed any errors in this article, please mention them in the comments. 🧑🏻‍💻&lt;/p&gt;

&lt;p&gt;Hope you have a great day! ✌️&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is Roblox Studio and How to Become a Roblox Developer?</title>
      <author>mattonw</author>
      <pubDate>Thu, 09 Sep 2021 18:09:41 +0000</pubDate>
      <link>https://dev.to/mattonw/what-is-roblox-studio-and-how-to-become-a-roblox-developer-3gc9</link>
      <guid>https://dev.to/mattonw/what-is-roblox-studio-and-how-to-become-a-roblox-developer-3gc9</guid>
      <description>&lt;p&gt;At this post, I will try to cover some information about Roblox, why you should use the Studio Creator and which programming languages you need to use in order to become a successful developer at this gaming creation platform. Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-roblox"&gt;
  &lt;/a&gt;
  What is Roblox?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Roblox"&gt;Roblox &lt;/a&gt; is one of the most popular online multiplayer gaming platforms in the world. Beside only playing games, the users might create their own games. Furthermore, it was developed and published by the Roblox Corporation on September 1, 2006. This platform is compatible with various operating systems such as Windows, Android, iOS, Xbox One, macOS, Macintosh and few other. This platform has million of players and developers from different ages and different countries around the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roblox-studio-overview"&gt;
  &lt;/a&gt;
  Roblox Studio Overview
&lt;/h2&gt;

&lt;p&gt;Roblox Studio is a great free game development program that can be also used on different operating systems. Further, in order to start using it, the user must register for a new Roblox account and download the Studio launcher from the official website. &lt;br&gt;
This program have a lot of great features that users might find useful. For example, there is an option for adding plugins, adding objects or even adding pre-made templates from the marketplace. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-users-create-using-the-roblox-studio"&gt;
  &lt;/a&gt;
  What Users Create using the Roblox Studio
&lt;/h3&gt;

&lt;p&gt;It is mostly used for creating games and in-game items. For example, the users create such a lot of in-game items using this platform such as clothes, hats, hair templates etc. Some of them even create their own unique &lt;a href="https://www.tornadocodes.com/roblox-hair-codes-ids/"&gt;Roblox hair codes&lt;/a&gt; and &lt;a href="https://www.tornadocodes.com/roblox-clothes-codes-outfit-ids/"&gt;Roblox outfits ids&lt;/a&gt; for their games. Each of the items has its own unique code/id which usually contains unique numbers (characters).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-become-a-roblox-developer"&gt;
  &lt;/a&gt;
  How to Become a Roblox Developer?
&lt;/h3&gt;

&lt;p&gt;The Roblox Studio is necessary along with the Lua programming language, so I can recommend you to start with mastering these two. Since it is a web-based drag-and-drop code builder, you will learn them in a very short period of time. Just try to avoid copying other games. Try to make something unique and your game can become popular with million of players overnight. There is no doubt that this platform can make you famous in a very short time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#are-developers-geting-paid-by-roblox"&gt;
  &lt;/a&gt;
  Are developers geting paid by Roblox?
&lt;/h3&gt;

&lt;p&gt;To sum up the developers don't get paid by Roblox for creating the games. However, they earn money whenever the player purchase a different kind of virtual in-game item. This is even better, since your earnings can be unlimited and you can always create a new virtual items which will be premium and the users must pay in order to get them.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>android</category>
      <category>quide</category>
      <category>development</category>
    </item>
    <item>
      <title>VPN (Virtual Private Network) Nedir?</title>
      <author>VPN Programları</author>
      <pubDate>Thu, 09 Sep 2021 17:58:54 +0000</pubDate>
      <link>https://dev.to/vpnprogramlari/vpn-virtual-private-network-nedir-20m7</link>
      <guid>https://dev.to/vpnprogramlari/vpn-virtual-private-network-nedir-20m7</guid>
      <description>&lt;p&gt;VPN, Sanal özel ağlar olarak tanımlanır. &lt;strong&gt;Virtual Private Network&lt;/strong&gt; kelimelerinin kısaltması olarak kullanılır. Genel olarak şirketlerin şubeleri arasındaki iletişimi şifreleyerek güvenli iletişim sağlamasını amaçlamaktadır. &lt;a href="https://vpnbedava.com/vpn-nedir"&gt;VPN&lt;/a&gt;, birçok farklı protokol ve teknolojiyi bir arada kullanmaktadır. Bir bilgisayardan karşı taraftaki diğer bilgisayar arasındaki iletişim kriptolama yapılarak güvenli bir tünel kurulması sağlanır. Bu tünel içerisinden geçen veri şifrelendiği için araya giren veya girmeye çalışan kişiler yalnızca kriptolu veriyi görebileceği için güvenliğiniz sağlanmıştır. Bu kriptolama seviyesi ne kadar iyiyse gizliliğiniz de o kadar güvenli olur. Aynı zamanda tüm veri akışınızı (DNS istekleriniz de dahil olmak üzere) bu tünel içerisine aldığınız takdirde tam bir koruma sağlamış olursunuz. Virtual Private Network (Sanal Özel Ağ) teriminin kısaltılmış halidir ve en temel anlamıyla internete başka bir IP adresi üzerinden bağlanmanızı sağlayan hizmettir. Bu özel bilgisayar ağı, örneğin yerel bir ağa fiziksel erişimi bulunmayan, dışarıdaki bir kişi tarafından ağ kaynaklarına erişmekte kullanılabilir. VPN'ler, güvenilmeyen ağlara bağlanırken bağlantıyı şifrelemek ve güvenli hale getirmek için de kullanılır. Bunun yanında VPN'ler, farklı konumlarda bulunabildiğinden, sizi ülkelerin kısıtlamalarından (yasaklı web siteleri ve IP'ler gibi) da kurtarırlar. VPN'ler (Virtual Private Network) basit bir şekilde açıklamak gerekirse internete şifreli bağlantı üzerinden daha güvenli biçimde bağlanmanızı sağlarlar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#neden-vpn-kullan%C4%B1l%C4%B1r"&gt;
  &lt;/a&gt;
  Neden VPN kullanılır?
&lt;/h2&gt;

&lt;p&gt;VPN, internet bağlantınızı güvenli hale getirir ve herhangi bir siteye bağlanırken sizin bağlantınızı şifreler, kimliğinizin bulunamamasını sağlar. VPN programları gönderdiğiniz ve aldığınız tüm verileri kendisi şifrelediğinden 3. şahısların ne yaptığınızı asla görmesine izin vermeyen bir güvenlik sistemi olarakda kullanılabilir. Bu nedenledir ki şirketler ve bankalar, farklı mekânlardaki çalışanlarıyla/ofisleriyle bağlantı kurmak için VPN hizmetini kullanırlar. Böylelikle, kilometrelerce ötedeki kişilerle bile, şirket içerisinde kurdukları ağ kadar güvenli bir şekilde bağlanırlar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vpnbedava.com/vpn-nedir"&gt;https://vpnbedava.com/vpn-nedir&lt;/a&gt;&lt;/p&gt;

</description>
      <category>privacy</category>
      <category>devops</category>
      <category>vpn</category>
    </item>
  </channel>
</rss>
