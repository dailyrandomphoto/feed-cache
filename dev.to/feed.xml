<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>C++ Best Practices by Jason Turner</title>
      <author>Sandor Dargo</author>
      <pubDate>Sat, 05 Jun 2021 17:59:25 +0000</pubDate>
      <link>https://dev.to/sandordargo/c-best-practices-by-jason-turner-4bj1</link>
      <guid>https://dev.to/sandordargo/c-best-practices-by-jason-turner-4bj1</guid>
      <description>&lt;p&gt;&lt;a href="https://leanpub.com/cppbestpractices"&gt;This is a book&lt;/a&gt; that I've been waiting for to finally read for a long time. I could have bought it, but I decided that it'll be the first book that I buy from the royalties I earned with &lt;a href="https://leanpub.com/cppconst"&gt;How to use const in C++&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;My hard-earned money was well invested. Though I was a little bit surprised in the beginning and I was not completely convinced that it was worth the money.&lt;/p&gt;

&lt;p&gt;I attended the talk of &lt;a href="https://cppnow2021.sched.com/event/hhlq"&gt;Jason at C++Now&lt;/a&gt; where among others he talked about his journey of writing this book. He shared his experience with &lt;a href="https://leanpub.com/"&gt;Leanpub&lt;/a&gt; and the reactions he and his book received.&lt;/p&gt;

&lt;p&gt;Leanpub has a 45-day money-back guarantee meaning that you can read any book for free. I say for free because 45 days is enough for most of the books and at the same time, they cannot ask you to return a PDF copy... Despite this generous money-back guarantee, only a few people asked for a refund and their complaints were always about the length of the book. It's 130 pages and it's listed on the page of the book. Anyone can see it as Jason said.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RA4Xke-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3e2fqhtyb63jaqn1ogj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RA4Xke-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3e2fqhtyb63jaqn1ogj.png" alt="C++ Best Practices on 130 pages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's right. Anyone can see that number, yet I also had the same idea when I finally bought my (digital) copy a few days before I &lt;em&gt;"went"&lt;/em&gt; to his talk. Maybe I didn't pay attention to the number of pages at all. But the number of pages is not everything. I found that even those pages have plenty of whitespace on them.&lt;/p&gt;

&lt;p&gt;It's not added in purpose to pump up the number of the pages, it's just a consequence of the structure. Around 45 tips in 50 chapters including listings, section headings etc.&lt;/p&gt;

&lt;p&gt;I was a bit puzzled.&lt;/p&gt;

&lt;p&gt;And then an idea struck me. It came in form of a story. Probably you know the story of the expert who has been called to fix a big broken machine in the factory that nobody could fix. He looks at it, examines it for a few minutes, then he replaces a $2 screw. Everyone is amazed and even more when he charges $10,000.&lt;/p&gt;

&lt;p&gt;When the factory manager indignantly asks how can he ask for $10,000 for a few minutes of work and a $2 piece, the expert said that you don't pay for the time it took him to fix, but for the years he learnt how to fix it so easily.&lt;/p&gt;

&lt;p&gt;In the case of this book, you also don't pay for the pages. You pay for the wisdom, the experience, the guiding.&lt;/p&gt;

&lt;p&gt;This guy knows what he talks about. Probably he also knows about the Pareto principle. He knows exactly what matters the most.&lt;/p&gt;

&lt;p&gt;And he listed those items, cutting out all the rest. He doesn't have to &lt;a href="https://quoteinvestigator.com/2012/04/28/shorter-letter/"&gt;apologize that he didn't have time to write a short book so he wrote a long one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With his experience and reputation, Jason Turner doesn't have to write long books just to make them "thick" enough.&lt;/p&gt;

&lt;p&gt;And here comes the interesting part which some might consider a weak point of the book. I'd say it's challenging and motivating.&lt;/p&gt;

&lt;p&gt;You'll find relatively few and short explanations directly in the book. Instead, it gives you several exercises, some instructions and lots of references. Instead of giving you know knowledge on a silver spoon, the author decided to show you where the find it. If you prefer, we might say that he teaches the reader to fish, instead of giving us the fish.&lt;/p&gt;

&lt;p&gt;It depends on you if you like this approach. Nevertheless, a book of 130 pages that is easy to read and you can finish it in a half afternoon, might easily give you months of research and exercises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-recommendations"&gt;
  &lt;/a&gt;
  Some recommendations
&lt;/h2&gt;

&lt;p&gt;That's about the book in general, let's see a couple of examples of the recommendations he lists.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on-constness"&gt;
  &lt;/a&gt;
  On constness
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/lefticus"&gt;Lefticus&lt;/a&gt; dedicates two chapters to the importance of using &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;constexpr&lt;/code&gt;, but it is mentioned in multiple places after.&lt;/p&gt;

&lt;p&gt;His point is that everything that is known at compile-time should be declared as &lt;code&gt;constexpr&lt;/code&gt; and the rest should be &lt;code&gt;const&lt;/code&gt; whenever possible.&lt;/p&gt;

&lt;p&gt;These changes make the developer think about the lifetime of objects and it also communicates some meaning, some intentions to the reader.&lt;/p&gt;

&lt;p&gt;If you're looking for more details on constness, check out my book on &lt;a href="https://leanpub.com/cppconst/"&gt;How to use &lt;code&gt;const&lt;/code&gt; in C++&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prefer-raw-auto-endraw-in-many-cases"&gt;
  &lt;/a&gt;
  Prefer &lt;code&gt;auto&lt;/code&gt; in many cases
&lt;/h2&gt;

&lt;p&gt;The author shares that he is not a follower of the &lt;a href="https://herbsutter.com/2013/08/12/gotw-94-solution-aaa-style-almost-always-auto/"&gt;Almost Always Auto "movement"&lt;/a&gt; that was propagated by Herb Sutter, but he does think that &lt;code&gt;auto&lt;/code&gt; should be preferred in many cases.&lt;/p&gt;

&lt;p&gt;The reason behind this is that often you should not be concerned by the type of something, such as the return type of &lt;code&gt;std::count&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;auto&lt;/code&gt;, we can spare unnecessary conversions and even data loss!&lt;/p&gt;

&lt;p&gt;Besides, with &lt;code&gt;auto&lt;/code&gt; it's easier to write generic code. C++11 made a big step towards that, but with a better type deduction and generic lambdas, C++14 made an extra leap towards this direction. By the way, the author also suggests skipping C++11 and go directly to C++14 if you haven't migrated yet from old C++.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beware-of-undefined-behaviour"&gt;
  &lt;/a&gt;
  Beware of undefined behaviour
&lt;/h2&gt;

&lt;p&gt;Undefined behaviour (UB) is something we should avoid as it's dangerous. As such it appears in the book in a couple of places.&lt;/p&gt;

&lt;p&gt;One recommendation of Jason is to treat warnings as errors and to use different sanitisers, such as UBSan and ASan. They will point out most of the UB.&lt;/p&gt;

&lt;p&gt;But that's not everything. He mentions a form of UB that I didn't know about before and I hadn't seen. Checking for &lt;code&gt;this&lt;/code&gt; to be a &lt;code&gt;nullptr&lt;/code&gt; is UB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// removed by the compiler, it would be UB&lt;/span&gt;
    &lt;span class="c1"&gt;// if this were ever null&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's impossible for the check to ever fail, compilers nowadays remove this check, yet this is technically UB. I don't see any reason to write such code, but I look around in the codebases I have access to and... I don't want to continue that phrase... If you find any, just remove that code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you're afraid of too lengthy books, but you also don't want something shallow, if you are ready to delve yourself into further research and experimentation, &lt;a href="https://leanpub.com/cppbestpractices"&gt;this is your book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jason Turner is probably among the most known C++ developers nowadays with &lt;a href="https://www.youtube.com/watch?v=zBkNBP00wJE"&gt;iconic talks&lt;/a&gt; and a &lt;a href="https://www.youtube.com/channel/UCxHAlbZQNFU2LgEtiqd2Maw"&gt;popular YouTube channel&lt;/a&gt; and this book is the distilled version of what he learned about C++ development during the last 15 years. Most of us have definitely a lot to learn from his experience, but it doesn't come for free.&lt;/p&gt;

&lt;p&gt;I don't mean &lt;a href="https://leanpub.com/cppbestpractices"&gt;the $10 that is the initial price&lt;/a&gt;, but the work you have to put in. Take it the other way, he doesn't sell you dogmas and believes, he shares his best practices and asks you to do your research and decisions. It's the best way to grow.&lt;/p&gt;

</description>
      <category>books</category>
      <category>watercooler</category>
      <category>cpp</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Introduction React-Redux using Hooks (useSelector &amp;&amp; useDispatch)</title>
      <author>Muhammad Bilal Bangash</author>
      <pubDate>Sat, 05 Jun 2021 17:59:21 +0000</pubDate>
      <link>https://dev.to/bangash1996/introduction-react-redux-using-hooks-useselector-usedispatch-26ch</link>
      <guid>https://dev.to/bangash1996/introduction-react-redux-using-hooks-useselector-usedispatch-26ch</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;Before reading this article you should know about React &amp;amp; Redux, its working.&lt;/p&gt;

&lt;p&gt;This article is about React-Redux Hooks. We will go through below main points in this article:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-hooks-for-redux"&gt;
  &lt;/a&gt;
  * Hooks for Redux.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-how-to-use-raw-usedispatch-endraw-hook"&gt;
  &lt;/a&gt;
  * How to use &lt;code&gt;useDispatch&lt;/code&gt; Hook.
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#-how-to-use-raw-useselector-endraw-hook"&gt;
  &lt;/a&gt;
  * How to use &lt;code&gt;useSelector&lt;/code&gt; Hook.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#1-hooks-for-redux"&gt;
  &lt;/a&gt;
  1. Hooks for Redux
&lt;/h3&gt;

&lt;p&gt;Before Hooks, we always used a &lt;code&gt;connect()&lt;/code&gt; which is a higher-order component and wrapper to our component, &lt;code&gt;connect()&lt;/code&gt; read values from the Redux store.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;connect()&lt;/code&gt; takes two arguments, both optional:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mapStateToProps&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapDispatchToProps&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mapStateToProps:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;called every time the store state changes. It receives the entire store state and should return an object of data this component needs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mapDispatchToProps:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This parameter can either be a function, or an object. If it’s a function, it will be called once on component creation. It will receive dispatch as an argument and should return an object full of functions that use dispatch to dispatch actions.&lt;/p&gt;

&lt;p&gt;more about &lt;a href="https://react-redux.js.org/api/connect"&gt;connect()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's move towards react-redux hooks. React-Redux now offers a set of hook APIs as an alternative to existing &lt;code&gt;connect()&lt;/code&gt; Higher-Order Component. These APIs allow you to subscribe to the Redux store and dispatch actions, without having to wrap your components in &lt;code&gt;connect()&lt;/code&gt;. By using the Hook API with Function components, components are kept small and the code remains clean.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks:
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#2-usedispatch"&gt;
  &lt;/a&gt;
  2. useDispatch():
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useDispatch()&lt;/code&gt; hook is equivalent of &lt;code&gt;mapDispatchToProps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will invoke &lt;code&gt;useDispatch&lt;/code&gt; and store it to a variable, &lt;code&gt;dispatch&lt;/code&gt;. This hook returns a &lt;code&gt;reference&lt;/code&gt; to the &lt;code&gt;dispatch function&lt;/code&gt; from the Redux store. You may use it to dispatch actions as needed.&lt;br&gt;
And we dispatch it by calling dispatch passing in the return value from the action creator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Below is the small component where using &lt;code&gt;useDispatch&lt;/code&gt; and &lt;code&gt;useSelector&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
//import useDispatch from react-redux
import { useDispatch} from "react-redux";
//these are actions define in redux&amp;gt;actions folder
import { updateFirstName } from "../redux/actions"; 

const Form = () =&amp;gt; {

  const dispatch = useDispatch();

  const handleFirstName = () =&amp;gt; {
    //dispatching the action
    dispatch(updateFirstName("Jason"));
  };

  return (
    &amp;lt;React.Fragment&amp;gt;
      &amp;lt;div className="container"&amp;gt;
        &amp;lt;button onClick={handleFirstName}&amp;gt;Update First 
        Name&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/React.Fragment&amp;gt;
  );
};

export default Form;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;complete code in &lt;a href="https://github.com/Bilal-Bangash/redux-hooks"&gt;GITHUB redux-hooks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3useselector"&gt;
  &lt;/a&gt;
  3.useSelector():
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useSelector()&lt;/code&gt; hook is equivalent of &lt;code&gt;mapStateToProps&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useSelector&lt;/code&gt; is a function that takes the current state as an argument and returns whatever data you want from it and it allows you to store the return values inside a variable within the scope of you functional components instead of passing down as props&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import { useDispatch, useSelector } from "react-redux";
import { updateFirstName } from "../redux/actions";

const Form = () =&amp;gt; {
  const dispatch = useDispatch();
  const nameObj = useSelector((state) =&amp;gt; state.nameReducer);
  const { firstName } = nameObj;
  const handleFirstName = () =&amp;gt; {
    dispatch(updateFirstName("Jason"));
  };

  return (
    &amp;lt;React.Fragment&amp;gt;
      &amp;lt;div className="container"&amp;gt;
        &amp;lt;label&amp;gt;First Name : {firstName}&amp;lt;/label&amp;gt;
        &amp;lt;button onClick={handleFirstName}&amp;gt;Update First Name&amp;lt;/button&amp;gt;

        &amp;lt;label&amp;gt;Last Name : {lastName}&amp;lt;/label&amp;gt;
        &amp;lt;button type="submit" onClick={handleLastName}&amp;gt;
          Update First Name
        &amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/React.Fragment&amp;gt;
  );
};

export default Form;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;complete code in &lt;a href="https://github.com/Bilal-Bangash/redux-hooks"&gt;GITHUB redux-hooks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#usestore"&gt;
  &lt;/a&gt;
  useStore():
&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;useStore()&lt;/code&gt; hook returns a reference to the same Redux store that was passed into &lt;code&gt;Provider&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;This hook should probably not be used frequently. Prefer useSelector() as your primary choice. However, this may be useful for less common scenarios that do require access to the store, such as replacing reducers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { useStore } from 'react-redux'

export const ExampleComponent = ({ value }) =&amp;gt; {
  const store = useStore()

  // EXAMPLE ONLY! Do not do this in a real app.
  // The component will not automatically update if the store state changes
  return &amp;lt;div&amp;gt;{store.getState().obj.name}&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;complete code in &lt;a href="https://github.com/Bilal-Bangash/redux-hooks"&gt;GITHUB redux-hooks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you wanna learn more about &lt;code&gt;useDispatch&lt;/code&gt; and &lt;code&gt;useSelector&lt;/code&gt; here it's official link &lt;a href="//react-redux.js.org/api/hooks"&gt;React Redux Hooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Further improvement, suggestion or help. Welcome :) &lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Potty Training Shaped My Tech Teaching Style</title>
      <author>Shaundai Person</author>
      <pubDate>Sat, 05 Jun 2021 17:56:07 +0000</pubDate>
      <link>https://dev.to/shaundai/how-potty-training-shaped-my-tech-teaching-style-29e2</link>
      <guid>https://dev.to/shaundai/how-potty-training-shaped-my-tech-teaching-style-29e2</guid>
      <description>&lt;p&gt;&lt;em&gt; This post was inspired by my interview on &lt;a href="https://www.hanselminutes.com/"&gt;Hanselminutes podcast&lt;/a&gt;, to be released June 10 2021)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the first few days, my son and I were both pretty frustrated with the idea of potty training.  After Lysoling and mopping the floor for the billionth time, I remember trying to explain to him once again that he needed to stay seated until he “went.”  He wanted to go play.  He stood up again.  I could tell from the tired look in his round eyes he just wanted things to go back to the way they were before.  I did too.&lt;/p&gt;

&lt;p&gt;“Forget it,” I sighed.  I exhaustedly put down the empty paper towel roll in my hand, turned up the sound on the TV, and quietly walked into my closet and shut the door behind me - jaw clenched the whole way.  Confident that my baby wouldn’t hear me, I screamed at the top of my lungs until I ran out of breath.&lt;/p&gt;




&lt;p&gt;I used a potty training method from a book that promised to have him trained in 3 days. It came highly recommended from parents I trusted.  They swore the method worked like magic.  Instead, I was emotionally drained and ready to quit on day 2.&lt;/p&gt;

&lt;p&gt;Feeling defeated, I called my mom for advice.  “I’m following these instructions &lt;em&gt;exactly&lt;/em&gt; and there’s &lt;em&gt;absolutely&lt;/em&gt; no way he’ll be potty trained by tomorrow.  Maybe it’s just too early to be trying this.  We’ll try again in 6 months.”&lt;/p&gt;

&lt;p&gt;I could almost hear her shaking her head through the phone.  “No. He’s ready now,” she said.  “Remember, all of this is completely new for him.  Think about what you’re doing.  You’re giving him a tool he’s &lt;em&gt;&lt;strong&gt;never seen before&lt;/strong&gt;&lt;/em&gt;, language he’s &lt;em&gt;&lt;strong&gt;never heard before&lt;/strong&gt;&lt;/em&gt;, and expecting him to just put it together to ‘instinctively’ do something he’s &lt;em&gt;&lt;strong&gt;never done before&lt;/strong&gt;&lt;/em&gt;.  &lt;em&gt;You&lt;/em&gt; need to rethink the way you’re trying to teach him.” &lt;/p&gt;

&lt;p&gt;As usual, my mother was right.  With small changes to my teaching style, my kiddo was potty trained in a day.&lt;/p&gt;

&lt;p&gt;When it came to teaching programming, I wanted to avoid the mistakes I’d made when I first started to potty train my toddler.  Often, I hear stories from students whose learning starts out the same way.  They’re given:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tools they’ve &lt;strong&gt;never seen before&lt;/strong&gt; (ex. VS Code, new libraries)&lt;/li&gt;
&lt;li&gt;language they’ve &lt;strong&gt;never used before&lt;/strong&gt; (new technical terminology),&lt;/li&gt;
&lt;li&gt;...and an unfair expectation to ‘instinctively’ put these together to do something they’ve &lt;strong&gt;never done before&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, both the teacher and student end up frustrated or just giving up because the concepts just aren’t clicking for the student.  Though the teacher means well, there’s a huge piece missing here - the part where the teacher closes the gap in understanding by providing &lt;b&gt;context&lt;/b&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#giving-context"&gt;
  &lt;/a&gt;
  Giving Context
&lt;/h2&gt;

&lt;p&gt;Initially as a potty training teacher &lt;em&gt;(potty trainer?? Potty coach?? Potty sherpa.)&lt;/em&gt;, I let the &lt;a href="https://en.wikipedia.org/wiki/Curse_of_knowledge"&gt;curse of knowledge&lt;/a&gt;] get in the way of my ability to be effective.  I’d forgotten what it was like to be an absolute beginner at this.  After empathy, context is the most important resource I could provide to my little student.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Context is the language before and after a statement that helps you to understand its meaning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it comes to teaching, providing context involves relating the new concept to something they’re familiar with.  Making the connection between difficult and already-familiar topics helps the student to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand concepts quickly &lt;em&gt;and&lt;/em&gt; thoroughly&lt;/li&gt;
&lt;li&gt;Retain information for longer periods of time&lt;/li&gt;
&lt;li&gt;Apply learning effectively and accurately (because they have a deep understand)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me, this translates to using a lot of analogies and storytelling.  Here’s an example of using analogies to &lt;a href="https://dev.to/shaundai/state-and-setstate-explained-with-emotion-110k"&gt;explain React state and setState&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Analogies don’t have to be an elaborate 1-to-1 metaphor.  Stories can be silly.  In fact, I’d argue that if silliness is what captures your students’ attention and makes a difficult topic more approachable, silly content is &lt;strong&gt;that&lt;/strong&gt; much better.  Just because it’s technical doesn’t mean it needs to be complicated!&lt;/p&gt;

&lt;p&gt;When building educational content for a large demographic, providing context also involves setting upfront expectations with people who consume your content to make sure that you are meeting them at their current level of understanding (well, getting them to meet you at the right starting point).&lt;/p&gt;

&lt;p&gt;Here are some examples of how to set expectations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“This course requires a fundamental knowledge of JavaScript”&lt;/li&gt;
&lt;li&gt;“This is a course about CSS for JavaScript developers”&lt;/li&gt;
&lt;li&gt;“This post assumes the reader has a working knowledge of AWS”&lt;/li&gt;
&lt;li&gt;“If you don’t yet know what recursion is, here’s a link to a blog post that explains more.  Read this first!”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#saving-the-jargon"&gt;
  &lt;/a&gt;
  Saving the Jargon
&lt;/h2&gt;

&lt;p&gt;Potty training also helped me to realize that simply “spewing a bunch of technical jargon” is not the same thing as teaching.  Words are, after all, just symbols we use to represent thoughts and actions.  Without the actual concepts behind the words, words are meaningless.&lt;/p&gt;

&lt;p&gt;With my 2-year-old, a mistake I made was trying to use too much vocabulary (ex: “you need to tell me when you need to use the potty”) when he hadn’t gotten the actual concept (connecting a feeling to an action) down yet.   Once I instead focused on limiting my use of vocabulary and SHOWING him what I wanted him to do, I saw a night-and-day difference in his understanding.&lt;/p&gt;

&lt;p&gt;This doesn’t mean technical terms aren’t important.  It &lt;strong&gt;does&lt;/strong&gt; mean that the technical jargon shouldn’t be the only thing we’re teaching.  I’d argue that in most cases, technical terms shouldn’t even be the first thing we teach.  If we effectively teach the &lt;em&gt;how&lt;/em&gt;, the &lt;em&gt;what&lt;/em&gt; can come so much more easily afterward.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt; But Shaundai - how can I teach technical concepts without starting with the technical terminology?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's an example explaining how heat is transferred from one object to another:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jargon Last&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Let’s say you’re cooking food on the stove in a big pot.  A metal spoon is sitting inside the pot.  When you touch the spoon, you realize that it’s hot.  The pot is warmed by the fire on the stove, but how did the spoon get hot?  This happens through &lt;b&gt;convection&lt;/b&gt;, where the solid spoon is warmed by the hotter solid pot it is touching.  This is 1 of 3 methods of &lt;b&gt;heat transfer&lt;/b&gt; between objects.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The two technical terms I wanted you to learn were “convection” and “heat transfer”.  Both came later in the paragraph, &lt;strong&gt;after&lt;/strong&gt; I’d described a scenario you were familiar with.  What if I instead gave you the definitions upfront?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jargon First&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;b&gt;Convection&lt;/b&gt; is the movement caused within a fluid by the tendency of hotter and therefore less dense material to rise, and colder, denser material to sink under the influence of gravity, which consequently results in &lt;b&gt;heat transfer&lt;/b&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most people would check out after reading the first few words.  Instead of putting such a strong emphasis on teaching the technical terms, put an emphasis on teaching the concepts and what the code is &lt;em&gt;doing&lt;/em&gt;.  The jargon can always be injected at the end.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm currently working on a course - TypeScript for JavaScript Developers&lt;/em&gt;!  &lt;b&gt;Sign up for updates &lt;a href="https://www.tsforjs.com"&gt;here&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;...or find me on &lt;a href="https://twitter.com/shaundai"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>todayilearned</category>
      <category>techtalks</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Mobile friendly website design</title>
      <author>Rezaul karim🇧🇩</author>
      <pubDate>Sat, 05 Jun 2021 17:34:46 +0000</pubDate>
      <link>https://dev.to/rezaulkarim014/mobile-friendly-website-design-305o</link>
      <guid>https://dev.to/rezaulkarim014/mobile-friendly-website-design-305o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-5O9dOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622913130945/HZb_atf4F.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-5O9dOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622913130945/HZb_atf4F.jpeg" alt="Mobile friendly website.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobile-friendly-website"&gt;
  &lt;/a&gt;
  Mobile friendly website
&lt;/h2&gt;

&lt;p&gt;Are you reading this article on a monitor or in the smartphone?Do you know what is Mobile friendly website?&lt;/p&gt;

&lt;p&gt;There is over 50% probability that your answer is going to be a smartphone.since in recent years over 50% of web traffic has been generated by mobile devices.&lt;/p&gt;

&lt;p&gt;This means that half of the people who visit your website will be viewing it via mobile. And it makes up Are certain challenges for the designer such as the necessity to create device specific layouts for you will need to change the order in positioning and sometimes even the contents of your sections.&lt;/p&gt;

&lt;p&gt;So the scalar which element is appropriate for a specific device. This means that your grave has to adjust the width of the device screen.The best solution to that is reducing the number of columns. Your layout has one. Non tablet devices or place in your sections in one column when viewed on a smartphone. But is a result you might end up with some pretty lengthy pages in some cases.&lt;/p&gt;

&lt;p&gt;It is recommended that you get rid of some sections to benefit your mobile layout by using the heat map. You can determine which sections on your side in bulk the most interest and just remove the rest from the Way out. Another tip to reduce the length of your website is instead of putting elements of the same type in a list or in a grid throw them together in a council.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XLiJvOiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622912765699/0pYwGvAsn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XLiJvOiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622912765699/0pYwGvAsn.jpeg" alt="smartphone-application-design-templates-set-flat-isolated-vector-illustration_1284-16060.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-should-consider"&gt;
  &lt;/a&gt;
  Things Should Consider:
&lt;/h2&gt;

&lt;p&gt;So users can view them by scrolling through the Carousel. And then move on to exploring the rest of your layout as for the navigation you want to make sure that you hide all the extra stuff you have on your header inside of the knee.&lt;/p&gt;

&lt;p&gt;Meat hamburger menu, if it’s a store of blog a news portal or side with booking functionality. Make sure you include the search icon in your header or inside the hamburger menu. So users can try and what they want straight away. If you need to place a primary city a somewhere on your page. There is no better place than the hero section.&lt;/p&gt;

&lt;p&gt;So it’s right in the users view once they open the page. I’m not able to perform this action straight away. Another option could be placing it in the hats. If you have enough room in there now tax picking the wrong font size can seriously compromised readability.&lt;/p&gt;

&lt;p&gt;So the text elements on your mobile friendly website layout should be 12 to 16 pixels for the main body copy and one or two pixels smaller for secondary elements such as captions and And tags while your age wants should be two and a half size of your base font. Headings should fit on two to three lines on average. So it doesn’t take up half of the users screen as for the clickable interactive elements such as buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5z_ah8Ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622912908731/L5dvAd2ii.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5z_ah8Ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622912908731/L5dvAd2ii.jpeg" alt="social-media-marketing-mobile-phone-concept-with-people-together_23-2148439384.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-notes"&gt;
  &lt;/a&gt;
  Important Notes:
&lt;/h2&gt;

&lt;p&gt;And Fields make sure that their size is bigger than the average touch Target. Which is ten by ten millimetres and talking about Mine’s even better for make sure you don’t make it too long and too confusing go for a form which can fit in the screen dimensions and has it comprehensible and friendly UI whoop starts with some heavyweight functionality like online stores. For example, also require a lot of UI elements to be present on the pages. So don’t dismiss mobile users need to access all of those. Walter’s buttons and options, but do let these elements breathe and organize them in a way that is not intrusive and confusing but comfortable and intuitive to use.&lt;/p&gt;

&lt;p&gt;Well, it was pretty much it for this brief beginner’s guide to Mobile friendly website design Layout. And if your web designer, developer or side only yourself you might be interested in what some butt monster. Marketplace has to To offer in terms of risk. So excite some plus e-commerce templates and WordPress themes. And also other assets for website building such as plugins illustrations fonts and much more make sure to follow the link in the description to explore template monster Marketplace yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mrezaulkarim.com/why-should-we-use-dark-mode/"&gt;Read this article on my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more exciting tips and tricks please read our  &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="//instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>ux</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Setup Function In Vue 3 Composition API</title>
      <author>oyedeletemitope</author>
      <pubDate>Sat, 05 Jun 2021 17:25:57 +0000</pubDate>
      <link>https://dev.to/oyedeletemitope/setup-function-in-vue-3-composition-api-1fkf</link>
      <guid>https://dev.to/oyedeletemitope/setup-function-in-vue-3-composition-api-1fkf</guid>
      <description>&lt;p&gt;In Vue.js 2, Component objects could have data, computed, methods, and watch options. We will be using these options to write component functional logic. But when our component grows bigger, the functional logic also grows. So we end up writing the same logic in different options. Meaning that we have to write some parts in the data options, some parts in the methods, and others(computed, watch) also. So it will be difficult to understand the component core logics Since it has been written in different places.&lt;/p&gt;

&lt;p&gt;Finally, Vue.js 3 introduced a Composition API where we can solve such problems. In Composition API, we can write or composite all options logics(data, computed, methods, watch) in a single place.&lt;br&gt;
In Composition API, we call this place the setup. We can composite or write all component core logics in the setup function. In this we can organize single-core logics even for the complex components. It will be very helpful to read about Single File Components in Vue 3 before moving to setup functions in this session. Let’s take a look.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setup-function-in-composition-api"&gt;
  &lt;/a&gt;
  Setup function in Composition API
&lt;/h4&gt;

&lt;p&gt;Setup function is the entry point in the Composition API. It will be called before the component is created and after the props are prepared. Meaning that, before compiling and processing its template into a render object. Setup function is called before the beforeCreate hook. Note that this reference won’t be available inside the setup function. Because the component is not created yet.&lt;br&gt;
Next we are going to see how to use the setup function. The setup is the function with two arguments(props and context). Anything returned from the setup function will be available throughout our component. In Addition to that It will be accessible inside the template also. Let me explain the same with the below example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;
      {{label}}
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
   &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;pros&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//{label:''}&lt;/span&gt;
   &lt;span class="c1"&gt;//write component core logics here&lt;/span&gt;
   &lt;span class="c1"&gt;//anything returned from setup function will be&lt;/span&gt;
   &lt;span class="c1"&gt;//available throughout our component&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="c1"&gt;//return object from setup function accessible here&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-function-in-composition-api-arguments"&gt;
  &lt;/a&gt;
  Setup function in Composition API — Arguments
&lt;/h2&gt;

&lt;p&gt;Setup function has two arguments,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;props&lt;/li&gt;
&lt;li&gt;context
Let’s see how these arguments are being used in the components.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#props"&gt;
  &lt;/a&gt;
  Props
&lt;/h2&gt;

&lt;p&gt;Props are the first argument of setup functions, which are reactive by nature. So while we update the props, the component will be updated. The basic example as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#props-with-es6-destructive"&gt;
  &lt;/a&gt;
  Props with ES6 Destructive
&lt;/h2&gt;

&lt;p&gt;Note that props are reactive by default. So we can not use Object destructuring since it will remove reactive property. We can solve such problems using toRefs. toRefs is useful when the reactive objects are being destructured/spread.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toRefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that, if the label is an optional prop, then toRefs will not create a reactive reference for the label. Here we are in need to use toRef instead of toRefs. Let me show the same with the below example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toRefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Context is the second argument of the setup function which is not reactive by nature. This is the normal JavaScript object. It has three component properties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;attrs — Attributes (Non-Reactive)&lt;/li&gt;
&lt;li&gt;slots — Slots (Non-Reactive)&lt;/li&gt;
&lt;li&gt;emit — Method (Emit events)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// non reactive&lt;/span&gt;

&lt;span class="nx"&gt;consoole&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slots&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// non reactive&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// emit events&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that context is not reactive. So we can use Object destructuring here as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;emit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//write logics here&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-function-with-template"&gt;
  &lt;/a&gt;
  Setup function with Template
&lt;/h2&gt;

&lt;p&gt;Properties of props and anything returned from the setup function will be accessible in the component’s template. Let me explain with the below example:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custombuttonvue"&gt;
  &lt;/a&gt;
  CustomButton.vue
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{counterMsg.msg}}.{{counter}}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"()=&amp;gt; counter++"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//props properties accessible to template&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterMsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click the button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="c1"&gt;// object accessible to templates&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;counterMsg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example counter, counterMsg are from setup function and label from props which are accessible in the template. Note that when we access the ref inside the template, it will unwrap the inner value automatically. No need to append .value in the template.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-function-with-render-raw-h-endraw-"&gt;
  &lt;/a&gt;
  Setup function with render &lt;code&gt;{ h }&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;As same as with the template, we can use setup with render functions also. Here we will be using h instead of template in the component. Let me explain with the below example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//props properties accessible to template&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterMsg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click the button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="c1"&gt;// Note that we have to give  ref value in render function&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the same component has been implemented using the render function. We can convert our template into render function (h) using Template Compilation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So we have learned about setup functions today. Composition API is the fundamental concept of Vue3. The ultimate goal of composition API is to organize the complex component logics in a single place. Typically the place is nothing but the setup function. Another important point is this won’t be available here unlike other options in the component.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Roadmap to Become a MERN Stack developer</title>
      <author>rafikadir</author>
      <pubDate>Sat, 05 Jun 2021 17:10:57 +0000</pubDate>
      <link>https://dev.to/rafikadir/roadmap-to-become-a-mern-stack-developer-3mf9</link>
      <guid>https://dev.to/rafikadir/roadmap-to-become-a-mern-stack-developer-3mf9</guid>
      <description>&lt;p&gt;MERN stands for MongoDB, Express, ReactJS, and NodeJS. MERN stack is one of the powerful and demandable stacks in Javascript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow the steps below to become a MERN  developer:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Learn HTML &amp;amp; CSS - HTML for markup and CSS for design.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then you have to learn JavaScript - Javascript for dynamic functionality in web applications. If you learn Javascript you can develop the front end and back end also. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After learning Javascript you should learn DOM - It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects. That way, programming languages can connect to the page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start learning ReactJS: React is a front-end javascript library. &lt;br&gt;
Next step to learn Node JS with express framework.&lt;br&gt;
After learning the node you can start learning MongoDB &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulation ! you are now a MERN stack developer. &lt;/p&gt;

&lt;p&gt;So, what after you have learned MERN stack development. Look you have learned only the basics now.  You can start making some small projects. Then gradually start learning advance and make intermediate project also Portfolio website.&lt;/p&gt;

&lt;p&gt;Next post I will share some tools that need to know as a developer.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Hamburger Icon</title>
      <author>Dezigner Bay</author>
      <pubDate>Sat, 05 Jun 2021 17:04:35 +0000</pubDate>
      <link>https://dev.to/baydezigner/hamburger-icon-18j6</link>
      <guid>https://dev.to/baydezigner/hamburger-icon-18j6</guid>
      <description>&lt;p&gt;&lt;a href="https://youtu.be/YURgKce25Ig"&gt;Demo&lt;/a&gt;&lt;br&gt;
Hi guys, in this short tutorial, you're going to learn how to create a Hamburger Icon with HTML,CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;The hamburger menu icon can also be referred to as a &lt;strong&gt;Three-line menu, a Menu button, or a Hotdog menu&lt;/strong&gt;. The hamburger icon is very useful for responsive designing or mobile views with smaller screen sizes. The icon which is consisting of three horizontal bars. Its function is to toggle a menu or navigation etc. &lt;/p&gt;

&lt;p&gt;It is easy to create this hamburger menu icon with only &lt;code&gt;HTML&lt;/code&gt;,&lt;code&gt;CSS&lt;/code&gt; and &lt;code&gt;JavaScript&lt;/code&gt;. OK let's start then.&lt;/p&gt;

&lt;p&gt;At first create a index.html page. Today I am going to create a hamburger icon with two horizontal bars but when you've learned this, I hope you'll try making a three-bar hamburger icon.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hum_toggle"&lt;/span&gt;  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hum-toggle"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"togglehum()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;index.html&lt;/code&gt; ,I have created &lt;strong&gt;two spans tags&lt;/strong&gt; within an outer div. The &lt;code&gt;onclick&lt;/code&gt; event is used to trigger a function when an element is clicked on. When you click the &lt;code&gt;.hum_toggle&lt;/code&gt; div element, &lt;code&gt;togglehum()&lt;/code&gt; function will be triggered. The &lt;code&gt;togglehum()&lt;/code&gt; function has declared in &lt;code&gt;main.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;style.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.hum_toggle&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.hum_toggle&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;300ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.hum_toggle&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hum_toggle&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.hum_toggle.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.hum_toggle.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JOYjLdxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/xg821apxfzpgxbhc6bpf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JOYjLdxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/xg821apxfzpgxbhc6bpf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So,let's see how &lt;code&gt;span:nth-child(1)&lt;/code&gt; and &lt;code&gt;span:nth-child(2)&lt;/code&gt; child selectors are working.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cXgHa5lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/fur4zwbi435i4o79utzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cXgHa5lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/fur4zwbi435i4o79utzq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;togglehum&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hum-toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;hum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the togglehum function triggered, the &lt;code&gt;active&lt;/code&gt; class adds to the &lt;code&gt;hum_toggle&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WnTBTRyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/uhi1op3v806xxeppb9eh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WnTBTRyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/uhi1op3v806xxeppb9eh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQKguggO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/razp1t56jaa27tdzw8od.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQKguggO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/razp1t56jaa27tdzw8od.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/YURgKce25Ig"&gt;Demo&lt;/a&gt;&lt;br&gt;
Hope you will enjoy this article. See you in the next one and don't forget to subscribe my channel😊😊&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>css</category>
    </item>
    <item>
      <title>HandWritten Digit Recognizer || Tensorflow || Keras ||  OpenCV</title>
      <author>Gaurav Singh</author>
      <pubDate>Sat, 05 Jun 2021 16:55:17 +0000</pubDate>
      <link>https://dev.to/gauravsingh9356/handwritten-digit-recognizer-1j0f</link>
      <guid>https://dev.to/gauravsingh9356/handwritten-digit-recognizer-1j0f</guid>
      <description>&lt;p&gt;Hello Devs! I have completed 𝐇𝐚𝐧𝐝𝐰𝐫𝐢𝐭𝐭𝐞𝐧 𝐃𝐢𝐠𝐢𝐭 𝐑𝐞𝐜𝐨𝐠𝐧𝐢𝐭𝐢𝐨𝐧. It is my first work with TensorFlow and OpenCV together. Had a very nice experience while working on this project.&lt;br&gt;
This indeed has given me insights into the never-ending potential of the machine learning domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Emyy2dcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/234luedyp2v8me3l3dni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Emyy2dcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/234luedyp2v8me3l3dni.png" alt="computer_vision"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;𝐍𝐞𝐭𝐰𝐨𝐫𝐤 𝐮𝐬𝐞𝐝 : 𝐂𝐨𝐧𝐯𝐨𝐥𝐮𝐭𝐢𝐨𝐧𝐚𝐥 𝐍𝐞𝐭𝐰𝐨𝐫𝐤&lt;br&gt;
𝐃𝐚𝐭𝐚𝐬𝐞𝐭 : 𝐌𝐍𝐈𝐒𝐓 𝐃𝐚𝐭𝐚𝐬𝐞𝐭&lt;br&gt;
𝐅𝐫𝐚𝐦𝐞𝐰𝐨𝐫𝐤 𝐮𝐬𝐞𝐝 : 𝐓𝐞𝐧𝐬𝐨𝐫𝐟𝐥𝐨𝐰&lt;br&gt;
𝐀𝐏𝐈 𝐮𝐬𝐞𝐝 : 𝐊𝐞𝐫𝐚𝐬&lt;br&gt;
𝐂𝐨𝐦𝐩𝐮𝐭𝐞𝐫 𝐕𝐢𝐬𝐢𝐨𝐧 𝐥𝐢𝐛𝐫𝐚𝐫𝐲 𝐮𝐬𝐞𝐝 : 𝐨𝐩𝐞𝐧𝐂𝐕&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/GauravSingh9356/Computer-Vision"&gt;GitHub link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>deeplearning</category>
      <category>machinelearning</category>
      <category>devops</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Let's Dive into React! (Pt. 1)</title>
      <author>ShafSpecs</author>
      <pubDate>Sat, 05 Jun 2021 16:52:49 +0000</pubDate>
      <link>https://dev.to/shafspecs/let-s-dive-into-react-pt-1-4i7b</link>
      <guid>https://dev.to/shafspecs/let-s-dive-into-react-pt-1-4i7b</guid>
      <description>&lt;p&gt;React is one of the most popular JavaScript Libraries out there and is growing in terms of recognition. If you just wanted to get started and don't know where to start, you've come to the right place.&lt;/p&gt;

&lt;p&gt;Let's dive into the prerequisites of React. First thing, JavaScript is essential, a &lt;strong&gt;must&lt;/strong&gt;. If you haven't learned it, you will have a ton of issues understanding React. There are some great courses out there on Udemy, freecodecamp and YouTube that discusses React in detail. ES6 in JavaScript is essential, you will meet concepts used in ES6 a lot here in React. You have learned that already? Good. Let's move on.&lt;/p&gt;

&lt;p&gt;Next, you need NPM, if you don't have that head over to &lt;a href="https://nodejs.org/en/download"&gt;NodeJS official download site&lt;/a&gt; and download Node for your OS, run the setup and NPM should come with it.&lt;/p&gt;

&lt;p&gt;We are also going to be using Snowpack, a JavaScript build tool that takes advantage of the browser support for ESM so that you can build and ship individual files to the browser. In short, we are going the fast way from the start and skipping the old, slow way that tutorials still come with. To install, we need NPM which we installed earlier. Run the command in terminal (or command prompt): &lt;code&gt;npm install --save-dev snowpack&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vEg-QmM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um4l5szvx1lxxhfyflbc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vEg-QmM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um4l5szvx1lxxhfyflbc.png" alt="Installed Snowpack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, how do we create a React project? Is it like JavaScript where we just add a &lt;code&gt;.js&lt;/code&gt; to the end of the filename? Or is there something else? Yes, there is a different procedure.&lt;/p&gt;

&lt;p&gt;To create a react project, first navigate to the folder you want to create the project. This can be done manually or by using &lt;code&gt;cd&lt;/code&gt; in the Terminal (or Command Prompt, if Windows).&lt;br&gt;
&lt;em&gt;'cd' means change directory&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K77i8Ra4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgzc59tldyne1qjsyhu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K77i8Ra4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgzc59tldyne1qjsyhu6.png" alt="Terminal Window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am using Linux Ubuntu, and have navigated to a folder in Documents called 'React'. If you are using windows, then you will be using Command Prompt, or alternatively, you can just head to your Files and open terminal(pardon me window users) from there.&lt;/p&gt;

&lt;p&gt;In the terminal, run the command: &lt;code&gt;npx create-snowpack-app &amp;lt;react-snowpack&amp;gt; --template @snowpack/app-template-minimal&lt;/code&gt;, where you change  to the name of your project (&lt;strong&gt;Your project name shouldn't have capital letters&lt;/strong&gt;). It will take a while depending on your PC and connection, it will automatically create a folder with all the basic required things to start. &lt;/p&gt;

&lt;p&gt;Then run the command(trust me, the commands usage will reduce): &lt;code&gt;cd &amp;lt;your-project-name&amp;gt;&lt;/code&gt;, where  is the name of your project. Enter command: &lt;code&gt;cd &amp;lt;project-name&amp;gt;&lt;/code&gt; to navigate to project directory, then the command: &lt;code&gt;npm install&lt;/code&gt;. If you are using vscode as your code editor, simply type: &lt;code&gt;code .&lt;/code&gt; to automatically open your project in VSCode, another way to open your project is by going to your Files and selecting: &lt;em&gt;open in &lt;/em&gt;, or opening your code editor, selecting &lt;em&gt;Open Folder&lt;/em&gt;, then selecting your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VN0YsC0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r598ax8wtm52zw6uqaa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VN0YsC0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r598ax8wtm52zw6uqaa8.png" alt="Welcome page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's run some final commands to round up the preparation, run the command: &lt;code&gt;npm install react react-dom --save&lt;/code&gt; to install the final pieces of React needed. After that, run: &lt;code&gt;mv index.js index.jsx&lt;/code&gt;, this will change the index.js to index.jsx (This is only done for using packages like snowpack). Run these commands one after the other&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir src
mkdir public
mv index.jsx src/index.jsx
mv index.html public/index.html
mv index.css public/index.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
.&lt;br&gt;
The first one creates a directory called &lt;code&gt;src&lt;/code&gt;, the second one create a directory called &lt;code&gt;public&lt;/code&gt; (&lt;code&gt;mkdir&lt;/code&gt; &lt;em&gt;means make directory&lt;/em&gt;), the third one moves &lt;code&gt;index.jsx&lt;/code&gt; to the &lt;code&gt;src&lt;/code&gt; folder, the fourth one moves &lt;code&gt;index.html&lt;/code&gt; to the &lt;code&gt;public&lt;/code&gt; folder, and the fifth one does the same for the &lt;code&gt;index.css&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0uFY7CZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh7ivs8rz5dwaysukec2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0uFY7CZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh7ivs8rz5dwaysukec2.png" alt="What we should have now"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we have setup the basic of our React project, we still have a teeny-weeny left to do, so let's get right to it.&lt;/p&gt;

&lt;p&gt;Open your &lt;code&gt;snowpack.config.mjs&lt;/code&gt; and head to the mount config:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ojfbxWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f362ry6s5lj8olqdhl8y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ojfbxWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f362ry6s5lj8olqdhl8y.png" alt="Mount config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make the changes like below: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_vYkMal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tsxqdvj8kn71dme9x1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_vYkMal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tsxqdvj8kn71dme9x1i.png" alt="Mount config changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, that's all the main things. Now, you might ask, why do I need to go through this stress, when there is a shorter way with just one or two commands? Well, the answer is, when you keep building, and keep compiling your code (from &lt;code&gt;jsx&lt;/code&gt; to &lt;code&gt;js&lt;/code&gt;), it becomes hellish as you upscale your app each time you save and need to preview the app (which is, a lot of times) and packages like this, saves you a lot of time.&lt;/p&gt;

&lt;p&gt;Okay, can we start coding now? Yes and no, let's touch the basics, run our app and end  it here. Head into your HTML file and change your code as below(&lt;strong&gt;Don't forget to add the &lt;code&gt;div&lt;/code&gt; tag above the script tag!&lt;/strong&gt;):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bN95ed_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63bb4nl2flaheisht9bx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bN95ed_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63bb4nl2flaheisht9bx.png" alt="HTML File"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, head to the &lt;code&gt;index.jsx&lt;/code&gt; and make the following changes:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n8hKaI4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4she89cutu1pwxu5qruv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n8hKaI4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4she89cutu1pwxu5qruv.png" alt="index.jsx"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it, run the command: &lt;code&gt;npm run start&lt;/code&gt; and it should open in the browser!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zpBcMDts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kknx38kccgzufh0r4u1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zpBcMDts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kknx38kccgzufh0r4u1.png" alt="Page Opened"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Part 2, we will explain the things we did in detail and our first code. Till next time!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create your Live Real Time Clock and Date in "React.js", no 3rd Party Hassle </title>
      <author>Ahmed Sarhan</author>
      <pubDate>Sat, 05 Jun 2021 16:30:48 +0000</pubDate>
      <link>https://dev.to/ahmedsarhan/create-your-live-watch-and-date-in-react-js-no-3rd-party-hassle-1oa4</link>
      <guid>https://dev.to/ahmedsarhan/create-your-live-watch-and-date-in-react-js-no-3rd-party-hassle-1oa4</guid>
      <description>&lt;p&gt;Have you worked on a project and you wanted to display the date and time live maybe in your navbar or something? &lt;/p&gt;

&lt;p&gt;Seems like a long shot? you will be surprised to know it is not,&lt;br&gt;
If you are creating a system for a company - a bank in my case, a school or a hospital, you will find yourself in need of that little trick&lt;/p&gt;

&lt;p&gt;But who needs a clock, there's one in every Pc and mobile phone right? well sometimes websites like to fancy themselves right&lt;/p&gt;

&lt;p&gt;So let's just get into it&lt;/p&gt;

&lt;p&gt;We will start by cloning the small demo I have already created for you&lt;/p&gt;

&lt;p&gt;In your terminal make sure you are in the right directory and run those following lines&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#first-step-clone-the-repo-in-your-directory"&gt;
  &lt;/a&gt;
  First Step: Clone the repo in your directory
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git clone https://github.com/AhmedSarhan/live-watch.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you should have a basic CRA with some additional styles and icons as follow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSwWvTZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf0vmgx7rk50ub1vfypu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSwWvTZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf0vmgx7rk50ub1vfypu.png" alt="File Structure"&gt;&lt;/a&gt;&lt;br&gt;
The code should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';

import { ReactComponent as ClockIcon } from './icons/clock.svg';
import { ReactComponent as CalenderIcon } from './icons/calendar.svg';

function App() {
    return (
        &amp;lt;div className="App"&amp;gt;
            &amp;lt;CalenderIcon /&amp;gt;
            &amp;lt;p&amp;gt;date&amp;lt;/p&amp;gt;
            &amp;lt;ClockIcon /&amp;gt;
            &amp;lt;p&amp;gt;time&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see a basic React app function component with just the two icons and the styles we need imported and applied&lt;/p&gt;

&lt;p&gt;In this article we will change those two &lt;strong&gt;p&lt;/strong&gt; tags with real time date and time using only Js and React Hooks&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#second-step-move-to-the-project-directory"&gt;
  &lt;/a&gt;
  Second Step: move to the project directory
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;cd live-watch&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#third-step-install-npm-packages-the-repo-in-your-directory"&gt;
  &lt;/a&gt;
  Third Step: Install npm packages the repo in your directory
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fourth-step-run-the-application"&gt;
  &lt;/a&gt;
  Fourth Step: Run the application
&lt;/h4&gt;

&lt;p&gt;This step should open your localhost on port 3000 by default&lt;/p&gt;

&lt;p&gt;Your website should look like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wuV33sUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41z6qmxk8183c41awfpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuV33sUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41z6qmxk8183c41awfpd.png" alt="First Look live time web app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's get to work&lt;/p&gt;

&lt;p&gt;First of all make sure to import &lt;strong&gt;React&lt;/strong&gt; and both &lt;strong&gt;useState, useEffect&lt;/strong&gt; hooks at the top of your app component with the following line of code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import React, {useState, useEffect} from 'react';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we are set to do the magic&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#create-our-app-state"&gt;
  &lt;/a&gt;
  Create our app state
&lt;/h5&gt;

&lt;p&gt;We are going to make a dateState using the useState hook as follow:&lt;br&gt;
&lt;code&gt;const [dateState, useDateState] = useState(new Date())&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;Now by default the dateState initial value will be right now date but it won't update unless the user reloads the page so we need to work with that ... But first let's show the date to the user&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#displaying-the-date-and-time"&gt;
  &lt;/a&gt;
  Displaying the Date and Time
&lt;/h5&gt;

&lt;p&gt;As you can see all the user can see is 📆 Date 🕒 Clock&lt;/p&gt;

&lt;p&gt;But won't it be better to show the user the real date and time;&lt;/p&gt;

&lt;p&gt;So there are many ways to do this but since this is a small application I would like to do it all in one state hook&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="App"&amp;gt;
            &amp;lt;CalenderIcon /&amp;gt;
            &amp;lt;p&amp;gt;
                {' '}
                {dateState.toLocaleDateString('en-GB', {
                    day: 'numeric',
                    month: 'short',
                    year: 'numeric',
                })}
            &amp;lt;/p&amp;gt;
            &amp;lt;ClockIcon /&amp;gt;
            &amp;lt;p&amp;gt;
                {dateState.toLocaleString('en-US', {
                    hour: 'numeric',
                    minute: 'numeric',
                    hour12: true,
                })}
            &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this is how your app should look like right now&lt;br&gt;
as you can see using &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString"&gt;toLocalString JavaScript method&lt;/a&gt;&lt;/strong&gt; which is a standard built in object in JavaScript, we can change the date of this moment to view it in a variety of ways&lt;/p&gt;

&lt;p&gt;As you can see in the first &lt;strong&gt;&lt;em&gt;paragraph tag&lt;/em&gt;&lt;/strong&gt; I am using &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString"&gt;toLocalString&lt;/a&gt;&lt;/strong&gt; to view the date of today in the format &lt;code&gt;D MMM YYYY&lt;/code&gt; which should show on the date of this article release 5 Jun 2021&lt;/p&gt;

&lt;p&gt;In the second paragraph, I'm displaying the time of this moment in the format &lt;code&gt;h:mm a&lt;/code&gt; using the 12 hour system&lt;/p&gt;

&lt;p&gt;Of course there are variety of ways to display the same date and you can play around  with &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString"&gt;toLocalString&lt;/a&gt;&lt;/strong&gt; method more and find a bit more of them.&lt;/p&gt;

&lt;p&gt;Now we have made it two thirds of the way, the user can see the time and date of right now, but I bit it's not exactly &lt;strong&gt;right now&lt;/strong&gt; any more, I would bet it is a minute or two late from your  devices watch unless your refresh the page. &lt;/p&gt;

&lt;p&gt;This leads us to our final step&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#making-our-watch-realtime"&gt;
  &lt;/a&gt;
  Making Our watch Real-Time
&lt;/h5&gt;

&lt;p&gt;In this step we will use the second hook we imported at the beginning of this article; the &lt;strong&gt;useEffect&lt;/strong&gt; hook;&lt;/p&gt;

&lt;p&gt;We will make the magic happen with one simple line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    useEffect(() =&amp;gt; {
      setInterval(() =&amp;gt; setDateState(new Date()), 30000);
    }, []);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in this useEffect, we update the date every 30000 milliseconds which means that the dateState useState hook will be updated every half a minute &lt;strong&gt;30 seconds&lt;/strong&gt; and our app will rerender the DOM accordingly&lt;/p&gt;

&lt;p&gt;Now if you take a look at your app and wait for one minute to pass, you should see the clock updated smoothly just like your native device watch.&lt;br&gt;
It might be a long wait, but it's worth it 😂🔥&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Now your final app component code should look something like that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from 'react';
import './App.css';
import { ReactComponent as ClockIcon } from './icons/clock.svg';
import { ReactComponent as CalenderIcon } from './icons/calendar.svg';

function App() {
    const [dateState, setDateState] = useState(new Date());
    useEffect(() =&amp;gt; {
           setInterval(() =&amp;gt; setDateState(new Date()), 30000);
    }, []);
    return (
        &amp;lt;div className="App"&amp;gt;
            &amp;lt;CalenderIcon /&amp;gt;
            &amp;lt;p&amp;gt;
              {' '}
              {dateState.toLocaleDateString('en-GB', {
                 day: 'numeric',
                 month: 'short',
                 year: 'numeric',
              })}
            &amp;lt;/p&amp;gt;
            &amp;lt;ClockIcon /&amp;gt;
            &amp;lt;p&amp;gt;
             {dateState.toLocaleString('en-US', {
                hour: 'numeric',
                minute: 'numeric',
                hour12: true,
            })}
            &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also compare your code to the final result of mine through the &lt;a href="https://github.com/AhmedSarhan/live-watch/tree/final/src"&gt;Final branch&lt;/a&gt; on the same &lt;a href="https://github.com/AhmedSarhan/live-watch"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Node.js Morgan Guide</title>
      <author>Paras 🧙‍♂️</author>
      <pubDate>Sat, 05 Jun 2021 16:26:54 +0000</pubDate>
      <link>https://dev.to/paras594/node-js-morgan-guide-431o</link>
      <guid>https://dev.to/paras594/node-js-morgan-guide-431o</guid>
      <description>&lt;p&gt;Any server or application needs some kind of logging system. It is common to skip logging in personal or practice project. But it is a must to have a fairly robust logging system in production ready servers and apps. &lt;/p&gt;

&lt;p&gt;Benefits of a logging system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logs are used by product managers and UX designers for planning &amp;amp; design.&lt;/li&gt;
&lt;li&gt;It helps marketers track performance of various features related to advertising campaigns.&lt;/li&gt;
&lt;li&gt;It gives us the idea of how much traffic is the application getting.&lt;/li&gt;
&lt;li&gt;Track errors, attacks and unsuccessful requests in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-morgan"&gt;
  &lt;/a&gt;
  Getting started with Morgan
&lt;/h2&gt;

&lt;p&gt;Morgan is a logging package for node.js. It can generate log files for all the traffic that comes to your server. It has some cool tricks to help us in both development and production. So let's get started. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install Morgan&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;morgan &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Basic Morgan Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Adding morgan to middlewares in express is enough to get you started.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;morgan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// import morgan&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// setup morgan&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;morgan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App listening on :3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above setup will start logging requests in console. You can see, I have specified &lt;code&gt;dev&lt;/code&gt; in morgan setup. There are many presets available in morgan and one them is &lt;code&gt;dev&lt;/code&gt;. Some other presets are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tiny&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;short&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;common&lt;/code&gt; : Follows Apache like log format&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#logging-requests-to-file"&gt;
  &lt;/a&gt;
  Logging requests to file
&lt;/h2&gt;

&lt;p&gt;Now we will learn how to output logs to a file. Instead of creating simple logging to file, we will create rotating logs. Rotating logs are logs that covers a part of activity on the server in a file and then creates a new log file. This way we can keep track of past activities. We don't have to keep one single log file open for continuous logging. So, let's setup this.&lt;/p&gt;

&lt;p&gt;For rotating logs, we will install a package named &lt;code&gt;rotating-file-stream&lt;/code&gt;. It will help us automate log rotation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;rotating-file-stream &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Setup Morgan&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;morgan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// import morgan&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rfs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rotating-file-stream&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// MORGAN SETUP&lt;/span&gt;
&lt;span class="c1"&gt;// create a log stream&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rfsStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;log.txt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10M&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// rotate every 10 MegaBytes written&lt;/span&gt;
   &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// rotate daily&lt;/span&gt;
   &lt;span class="na"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gzip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// compress rotated files&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// add log stream to morgan to save logs in file&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;morgan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rfsStream&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// another logger to show logs in console as well&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;morgan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App listening on :3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was enough to setup our logging system but we can add environment variables to make it more intuitive to enable and disable logging to file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding environment variables to our setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You will need &lt;code&gt;dotenv&lt;/code&gt; package to load environment variables in nodejs from &lt;code&gt;.env&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;dotenv &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a &lt;code&gt;.env&lt;/code&gt; file in the root directory of project and add the following variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LOG_FILE=log.txt
LOG_FORMAT=common
LOG_SIZE=10M
LOG_INTERVAL=1d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's change our configuration to use these variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// load variables from .env file&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;morgan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// import morgan&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rfs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rotating-file-stream&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// MORGAN SETUP&lt;/span&gt;
&lt;span class="c1"&gt;// create a log stream&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rfsStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOG_FILE&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;log.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOG_SIZE&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10M&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOG_INTERVAL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;compress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gzip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// compress rotated files&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// if log file defined then use rfs stream else print to console&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;morgan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOG_FORMAT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOG_FILE&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;rfsStream&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// if log file is defined then also show logs in console&lt;/span&gt;
&lt;span class="c1"&gt;// else it will use the previous process.stdout to print to console&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOG_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;morgan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LOG_FORMAT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App listening on :3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With above configuration we can relax and let morgan handle the job of logging. Whenever an error occurs, visit the log file and you can track where things went wrong. &lt;/p&gt;

&lt;p&gt;I hope this article helped you understand why it important to have a good logging system and how to add one in express.&lt;/p&gt;

</description>
      <category>node</category>
      <category>tutorial</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Best Practices for Building a Microservices Architecture</title>
      <author>Srajan Gupta</author>
      <pubDate>Sat, 05 Jun 2021 16:25:26 +0000</pubDate>
      <link>https://dev.to/srajangupta__/best-practices-for-building-a-microservices-architecture-2076</link>
      <guid>https://dev.to/srajangupta__/best-practices-for-building-a-microservices-architecture-2076</guid>
      <description>&lt;p&gt;In this video, we shall be looking into some best practices that will help us build great microservices.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Mvejt9kopI0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>systemdesign</category>
      <category>architecture</category>
      <category>node</category>
    </item>
  </channel>
</rss>
