<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to deploy an application to AWS EC2 Instance using Terraform and  Ansible.</title>
      <author>Mariam Adedeji</author>
      <pubDate>Wed, 21 Apr 2021 22:46:55 +0000</pubDate>
      <link>https://dev.to/mariehposa/how-to-deploy-an-application-to-aws-ec2-instance-using-terraform-and-ansible-3e78</link>
      <guid>https://dev.to/mariehposa/how-to-deploy-an-application-to-aws-ec2-instance-using-terraform-and-ansible-3e78</guid>
      <description>&lt;p&gt;I had an opportunity to work on this recently, and I had to I had an opportunity to work on this recently, and I had to combine different tutorials and articles before I was able to set this up successfully.&lt;/p&gt;

&lt;p&gt;So, I’m writing this article in hopes that it will make someone’s work easier and make things clearer for beginners who wish to learn this.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-infrastructure-as-code"&gt;
  &lt;/a&gt;
  What is Infrastructure as Code?
&lt;/h2&gt;

&lt;p&gt;Infrastructure as Code (IaC) is the process of setting up and managing cloud infrastructure through machine-readable files as opposed to manually setting up the required infrastructure.&lt;/p&gt;

&lt;p&gt;After the files have been written, you run them using IaC tools to build and configure the cloud infrastructure. Needless to say, this is a much more palatable and easier process than manual setup.&lt;/p&gt;

&lt;p&gt;IaC tools include; Terraform, Ansible, Chef, AWS cloud formation, Puppet, Vagrant, and many others.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-infrastructure-as-code"&gt;
  &lt;/a&gt;
  Benefits of Infrastructure as Code
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;With IaC, infrastructure configuration and setup is much faster: all you do is run a script.&lt;/li&gt;
&lt;li&gt;Scripts can be easily reused at any time.&lt;/li&gt;
&lt;li&gt;It is also easier to make small modifications between different but similar setups.&lt;/li&gt;
&lt;li&gt;It increases site reliability.&lt;/li&gt;
&lt;li&gt;It reduces the possibility of errors in infrastructure set up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial, you will learn how to provision a server(AWS EC2) for a React app using Terraform and then configure them with necessary packages using Ansible.&lt;/p&gt;

&lt;p&gt;Let’s start by highlighting all the steps needed and then explaining them in detail below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#aws"&gt;Configure AWS CLI and AWS vault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#key-pair"&gt;Create a Key-pair for the server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker"&gt;Dockerize a React app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#terraform"&gt;Provision the server using terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#security-group"&gt;Create a security group for the server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ansible"&gt;Configure the  server using Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-folder-structure"&gt;
  &lt;/a&gt;
  My folder structure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JGELeUti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115626986-2fa61480-a2f6-11eb-985c-4cab8690d897.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JGELeUti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115626986-2fa61480-a2f6-11eb-985c-4cab8690d897.png" alt="folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;If you’d like to follow this tutorial, please make sure the following requirements are met before doing so.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS account. You can create one &lt;a href="https://aws.amazon.com/"&gt;here&lt;/a&gt; if you haven't already, and follow this &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;tutorial&lt;/a&gt; in setting it up.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html"&gt;AWS CLI&lt;/a&gt; and &lt;a href="https://github.com/99designs/aws-vault#readme"&gt;AWS vault&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.docker.com/get-started/#download-and-install-docker"&gt;Docker&lt;/a&gt; and &lt;a href="https://hub.docker.com/"&gt;Dockerhub&lt;/a&gt; account.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learn.hashicorp.com/tutorials/terraform/install-cli"&gt;Terraform&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#selecting-an-ansible-version-to-install"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A demo React app. You can create one with this &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app"&gt;tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s get to it!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-configure-aws-cli-and-aws-vault"&gt;
  &lt;/a&gt;
  Step 1 — Configure AWS CLI and AWS vault &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We’ll need to create a user on our AWS account to be able to configure the AWS CLI.&lt;/p&gt;

&lt;p&gt;To do this, login to your AWS account, go to &lt;strong&gt;Services&lt;/strong&gt;, then click on &lt;strong&gt;IAM&lt;/strong&gt;.  Click on &lt;strong&gt;User&lt;/strong&gt;, then &lt;strong&gt;Add a user&lt;/strong&gt;. Type in a &lt;strong&gt;Username&lt;/strong&gt;, then select &lt;strong&gt;Programmatic access&lt;/strong&gt; for AWS access type.&lt;/p&gt;

&lt;p&gt;Next, we’ll need to create a group for our user. Click on &lt;strong&gt;Create group&lt;/strong&gt; and give it &lt;strong&gt;Administrator access&lt;/strong&gt;. You can add &lt;strong&gt;Tags&lt;/strong&gt; (optional), click &lt;strong&gt;Next&lt;/strong&gt; to review the user details and then click on &lt;strong&gt;Create user&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k5c-f4o3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115628260-49e0f200-a2f8-11eb-87dd-429f01b39a8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k5c-f4o3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115628260-49e0f200-a2f8-11eb-87dd-429f01b39a8f.png" alt="user"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this, a new screen would be displayed to download the user security credentials. Click on &lt;strong&gt;Download.csv&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, go back to the terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws-configure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the user &lt;strong&gt;Access key ID&lt;/strong&gt; and &lt;strong&gt;Secret Access Key&lt;/strong&gt; as prompted. Then enter your preferred &lt;strong&gt;AWS region&lt;/strong&gt; and &lt;strong&gt;Output&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Run the following command and make sure to replace &lt;code&gt;username&lt;/code&gt; with the user created previously from the AWS console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws-vault add &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the user &lt;strong&gt;Access key ID&lt;/strong&gt; and &lt;strong&gt;Secret Access Key&lt;/strong&gt; as prompted. This is done to store your AWS credentials in your machine local keystore.&lt;/p&gt;

&lt;p&gt;Then run the following command to authenticate yourself for a session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws-vault exec &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-a-keypair-for-the-server"&gt;
  &lt;/a&gt;
  Step 2 — Create a Key-pair for the server &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We need a key pair to run our instance.&lt;/p&gt;

&lt;p&gt;To create one, go to your AWS console, select &lt;strong&gt;EC2&lt;/strong&gt; from &lt;strong&gt;Services&lt;/strong&gt; drop-down, click on &lt;strong&gt;Key pairs&lt;/strong&gt;, then click on &lt;strong&gt;Create key pair&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Enter a &lt;strong&gt;Name&lt;/strong&gt; for your key, select &lt;strong&gt;pem&lt;/strong&gt; for openSSH or &lt;strong&gt;ppk&lt;/strong&gt; for Putty and then click on &lt;strong&gt;Create key pair&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fYvOcNin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115628196-2b7af680-a2f8-11eb-8361-775ee38d8420.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fYvOcNin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115628196-2b7af680-a2f8-11eb-8361-775ee38d8420.png" alt="key pair"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download the key and move it to your machine’s &lt;strong&gt;.ssh&lt;/strong&gt; folder. For Ubuntu and MacOS, this will most likely be &lt;strong&gt;~/.ssh&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-dockerize-the-app"&gt;
  &lt;/a&gt;
  Step 3 — Dockerize the app &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In the root directory of the &lt;strong&gt;react-app&lt;/strong&gt; folder, create a &lt;strong&gt;Dockerfile&lt;/strong&gt; and add the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:12.18.3

LABEL version="1.0"

LABEL description="This is the base docker image for my React app"

LABEL maintainer="abc@mail.com"

WORKDIR /usr/src/app

COPY ["package.json", "yarn.lock", "./"]

RUN yarn

COPY . .

EXPOSE 3000

CMD ["yarn", "start"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is an overview of the commands:&lt;br&gt;
&lt;strong&gt;FROM&lt;/strong&gt; defines the image we’re using for our container. In this context, we’re using node:12.18.3&lt;br&gt;
&lt;strong&gt;LABEL&lt;/strong&gt; indicates the version, description and maintainer of the Dockerfile.&lt;br&gt;
&lt;strong&gt;WORKDIR&lt;/strong&gt; sets the working directory for the app, and create it if the directory did not exists.&lt;br&gt;
&lt;strong&gt;COPY&lt;/strong&gt; is used to copy file(s) from one destination to another. The last path is always the destination to copy the file(s) to.&lt;br&gt;
&lt;strong&gt;RUN&lt;/strong&gt; defines the command to be run by Docker. I used yarn here because I installed my React app with yarn, you can change yours to npm if it’s more applicable.&lt;br&gt;
&lt;strong&gt;EXPOSE&lt;/strong&gt; tells docker which port it should listen to when running the container.&lt;br&gt;
&lt;strong&gt;CMD&lt;/strong&gt; defines the command to start the container. I used yarn start as specified from my React app’s start script, you should make sure yours also correlates to your app’s start script.&lt;/p&gt;



&lt;p&gt;Now, you need to build a docker image from the Dockerfile. To achieve this, run the following command in the root directory of the &lt;strong&gt;react-app&lt;/strong&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t &amp;lt;image-name&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you replace &lt;code&gt;image-name&lt;/code&gt; with the app’s image name.&lt;/p&gt;

&lt;p&gt;Now, run the following command to spin up a container from the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -it -p 3000:3000 &amp;lt;image-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in your browser to view the app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nk-7lLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115626849-f8cffe80-a2f5-11eb-9f7d-ebbab37120c5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nk-7lLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115626849-f8cffe80-a2f5-11eb-9f7d-ebbab37120c5.png" alt="deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go back to your terminal and add a tag to the image using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker tag &amp;lt;image-name&amp;gt; &amp;lt;docker_hub_username&amp;gt;/&amp;lt;repo-name&amp;gt;:&amp;lt;tag-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be sure to replace all variables with appropriate values.&lt;/p&gt;

&lt;p&gt;Next, login to your DockerHub account from your terminal using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Docker login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt; as prompted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BH0QFmwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115626915-10a78280-a2f6-11eb-9c4f-4db9115999f9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BH0QFmwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115626915-10a78280-a2f6-11eb-9c4f-4db9115999f9.png" alt="docker login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then run the following command to push the image to Dockerhub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker push &amp;lt;docker_hub_username&amp;gt;/&amp;lt;repo-name&amp;gt;:&amp;lt;tag-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is complete, you should see your docker image in the repo created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U3QKbNRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115630118-629ed700-a2fb-11eb-8317-d9f3583f145d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U3QKbNRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115630118-629ed700-a2fb-11eb-8317-d9f3583f145d.png" alt="dockerhub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-provision-the-server-using-terraform"&gt;
  &lt;/a&gt;
  Step 4 — Provision the server using terraform &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In the root directory of the project folder, create a folder called &lt;strong&gt;terraform&lt;/strong&gt;. Inside the terraform folder, create a new folder and call it &lt;strong&gt;frontend&lt;/strong&gt;. We’ll be adding all the config files for our frontend in here. Next,  create a file called &lt;strong&gt;main.tf&lt;/strong&gt; inside the frontend folder.&lt;/p&gt;

&lt;p&gt;Put the following code inside the &lt;strong&gt;main.tf&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;provider "aws" {
    region = "us-east-1"
}

variable "name" {
    description = "Name the instance on deploy"
}

resource "aws_instance" "admin_frontend" {
    ami = "ami-042e8287309f5df03"
    instance_type = "t2.micro"
    key_name = "admin"

    tags = {
            Name = var.name
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we’re creating an AWS ec2 instance using ubuntu server image (&lt;strong&gt;ami-042e8287309f5df03&lt;/strong&gt;), &lt;strong&gt;t2.micro&lt;/strong&gt; as our instance type and &lt;strong&gt;admin&lt;/strong&gt; as the name of the key-pair we created earlier. Make sure you replace &lt;strong&gt;region&lt;/strong&gt;, &lt;strong&gt;ami&lt;/strong&gt;, &lt;strong&gt;instance_type&lt;/strong&gt;, and &lt;strong&gt;key.name&lt;/strong&gt; with values from your setup.&lt;/p&gt;

&lt;p&gt;In your terminal, &lt;code&gt;cd&lt;/code&gt; into the &lt;strong&gt;frontend&lt;/strong&gt; folder and run the following command to initialize a working directory containing terraform configuration files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;terraform init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gchsrt8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627324-ba870f00-a2f6-11eb-8128-b62a2f15b9f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gchsrt8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627324-ba870f00-a2f6-11eb-8128-b62a2f15b9f1.png" alt="terraform init"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, run the following command to verify that we've set it up correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;terraform plan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will later prompt for a value, enter the instance name, &lt;code&gt;frontend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcogH_HP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627285-a3e0b800-a2f6-11eb-8de8-b778d95284f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcogH_HP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627285-a3e0b800-a2f6-11eb-8de8-b778d95284f0.png" alt="terraform plan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, run the following command to spin up your ec2 instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should also prompt for a value, enter the instance name as &lt;code&gt;frontend&lt;/code&gt; again and at the next prompt,  enter &lt;code&gt;yes&lt;/code&gt; to confirm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xml8gr-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627239-8ad80700-a2f6-11eb-8964-5ec98cd6ea39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xml8gr-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627239-8ad80700-a2f6-11eb-8964-5ec98cd6ea39.png" alt="terraform apply"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if you check your running instances on AWS console, it should be there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MbQAavqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627155-6e3bcf00-a2f6-11eb-9611-a9efd9176dfd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbQAavqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627155-6e3bcf00-a2f6-11eb-9611-a9efd9176dfd.png" alt="running instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-create-a-security-group-for-the-server"&gt;
  &lt;/a&gt;
  Step 5 — Create a security group for the server &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now we need to create a  security group for our &lt;strong&gt;frontend&lt;/strong&gt; instance.&lt;/p&gt;

&lt;p&gt;Go to AWS console, select &lt;strong&gt;EC2&lt;/strong&gt; from &lt;strong&gt;Services&lt;/strong&gt; dropdown, then click on &lt;strong&gt;Security groups&lt;/strong&gt;.  Click on &lt;strong&gt;Create security group&lt;/strong&gt;, then add &lt;strong&gt;Security group name&lt;/strong&gt; and &lt;strong&gt;Description&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Scroll down to the &lt;strong&gt;Inbound rules&lt;/strong&gt;, and click &lt;strong&gt;Add rule&lt;/strong&gt;. Select &lt;strong&gt;HTTP&lt;/strong&gt; for Type and &lt;strong&gt;Anywhere&lt;/strong&gt; for Source. Once that’s done, create yet another inbound rule with Type as  &lt;strong&gt;All TCP&lt;/strong&gt; and &lt;strong&gt;Anywhere&lt;/strong&gt; for Source. Create a last inbound rule with &lt;strong&gt;SSH&lt;/strong&gt; as Type and &lt;strong&gt;My IP&lt;/strong&gt; for Source. This makes a total of &lt;strong&gt;three&lt;/strong&gt; inbound rules&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_DBYWgDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627422-dee2eb80-a2f6-11eb-9ba4-98e3ea49dc3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_DBYWgDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627422-dee2eb80-a2f6-11eb-9ba4-98e3ea49dc3c.png" alt="inbound rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave the Outbound rule as &lt;strong&gt;All traffic&lt;/strong&gt; for Type and &lt;strong&gt;0.0.0.0/0&lt;/strong&gt; for Destination. Then click on &lt;strong&gt;Create security group&lt;/strong&gt;. You can read this &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html"&gt;article&lt;/a&gt; if you’re interested in learning more about security groups.&lt;/p&gt;

&lt;p&gt;Now, go back to the &lt;strong&gt;frontend&lt;/strong&gt; instance and attach the security group created to it. To do this,  select the &lt;strong&gt;frontend&lt;/strong&gt; instance, then  &lt;strong&gt;Actions&lt;/strong&gt; &amp;gt; &lt;strong&gt;Security&lt;/strong&gt; &amp;gt; &lt;strong&gt;Change security groups&lt;/strong&gt; &amp;gt; click on the &lt;strong&gt;search field&lt;/strong&gt; and choose the &lt;strong&gt;security group&lt;/strong&gt;, remove the &lt;strong&gt;default&lt;/strong&gt; security group, then &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2aX6rtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627468-f326e880-a2f6-11eb-8570-3c73fba171df.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2aX6rtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627468-f326e880-a2f6-11eb-8570-3c73fba171df.png" alt="security groups"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can try and ssh into your server using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh -i "~/.ssh/&amp;lt;your_KeyPair&amp;gt;.pem" &amp;lt;ec2-user&amp;gt;@&amp;lt;public_IPv4_DNS&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to replace &lt;code&gt;ec2-user&lt;/code&gt; with AMI username, &lt;code&gt;public_IPv4_DNS&lt;/code&gt; with the instance public domain name, and &lt;code&gt;your_KeyPair&lt;/code&gt; with your key file name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xIPF6HiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627791-83fdc400-a2f7-11eb-8aaa-9475ac307af2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xIPF6HiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627791-83fdc400-a2f7-11eb-8aaa-9475ac307af2.png" alt="login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-configure-the-server-using-ansible"&gt;
  &lt;/a&gt;
  Step 6 — Configure the server using Ansible &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have our instance running, we need to install the necessary packages using Ansible. Before we do that, let’s add some settings to our ansible config file.&lt;/p&gt;

&lt;p&gt;Go to your terminal and run the following command to open up the config file. I use &lt;strong&gt;vim&lt;/strong&gt;  but feel free to use any editor of your choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo vim /home/&amp;lt;username&amp;gt;/.ansible.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be sure to replace &lt;code&gt;username&lt;/code&gt; with your own username.&lt;/p&gt;

&lt;p&gt;Then insert the following, making sure to replace &lt;code&gt;your_KeyPair&lt;/code&gt; with your key name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[defaults]
host_key_checking = False
private_key_file=~/.ssh/&amp;lt;your_KeyPair&amp;gt;.pem
inventory=/etc/ansible/hosts
remote_user = ubuntu

[ssh_connection]
control_path=%(directory)s/%%h-%%r
control_path_dir=~/.ansible/cp
#pipelining = True
scp_if_ssh = True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now save and exit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXf1bJ8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627864-9d067500-a2f7-11eb-8af0-e2326a75cdea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXf1bJ8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627864-9d067500-a2f7-11eb-8af0-e2326a75cdea.png" alt="config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also need to add our host into the ansible host file. To achieve that, open the ansible hosts file by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo vim /etc/ansible/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add these lines to the file. Make sure to replace &lt;code&gt;ec2-user&lt;/code&gt; with AMI username, &lt;code&gt;public_IPv4_DNS&lt;/code&gt; with the instance public domain name, and &lt;code&gt;your_KeyPair&lt;/code&gt; with your key name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[frontend]                                                                                                                                                                                                                                                                                         ec2-user@public_IPv4_DNS ansible_ssh_private_key_file=~/.ssh/your_KeyPair.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and exit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PoLdvH1_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627966-c3c4ab80-a2f7-11eb-82a3-6e55bfec891e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PoLdvH1_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115627966-c3c4ab80-a2f7-11eb-82a3-6e55bfec891e.png" alt="host"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, make sure your managed node can be reached by pinging it  using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ansible all -m ping
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it cannot be reached, then you may have connectivity issues that need some debugging. If you get a green blob of json however, then you’re good to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--di-dQuae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115628115-04242980-a2f8-11eb-9d10-063e690cedb0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--di-dQuae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115628115-04242980-a2f8-11eb-9d10-063e690cedb0.png" alt="ping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, go to the root of your project folder, create a folder and call it &lt;strong&gt;ansible&lt;/strong&gt;. Inside this &lt;strong&gt;ansible&lt;/strong&gt; folder, create a file and call it &lt;strong&gt;provision_frontend.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the following lines into the &lt;strong&gt;provision_frontend.yaml file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
- hosts: frontend
  become: yes
  become_method: sudo

  tasks:

  - name: Install pip
    apt:
      update_cache: yes
      name: python3-pip

  - name: Install aptitude using apt
    apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

  - name: Install required system packages
    apt: name={{ item }} state=latest update_cache=yes
    loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Update apt and install docker-ce
    apt: update_cache=yes name=docker-ce state=latest

  - name: install docker-py
    pip: name=docker-py

  - name: enable Docker services
    service:
      name: "docker"
      state: started
      enabled: yes

  - name: Check if container is running
    shell: docker ps

  - name: run docker image
    shell: docker run -dit --name &amp;lt;repo-name&amp;gt; -p 3000:3000 &amp;lt;docker_hub_username&amp;gt;/&amp;lt;repo-name&amp;gt;:&amp;lt;tag-name&amp;gt;

  - name: show running images
    shell: docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to edit the shell command for running the docker image, to match your setup. &lt;/p&gt;

&lt;p&gt;Then save.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hosts&lt;/strong&gt; defines host upon which commands in a playbook operate.&lt;br&gt;
&lt;strong&gt;become_method&lt;/strong&gt; sets to root user.&lt;br&gt;
&lt;strong&gt;package&lt;/strong&gt; is for installing packages.&lt;br&gt;
&lt;strong&gt;service&lt;/strong&gt; is for controlling services on remote hosts.&lt;br&gt;
&lt;strong&gt;shell&lt;/strong&gt; is for running commands.&lt;/p&gt;

&lt;p&gt;In the terminal, navigate to the &lt;strong&gt;ansible&lt;/strong&gt; folder and run the playbook using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible-playbook provision_frontend.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o610SRXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115628003-d50db800-a2f7-11eb-8cc5-64e37ec0e1eb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o610SRXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33374159/115628003-d50db800-a2f7-11eb-8cc5-64e37ec0e1eb.png" alt="ansible"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, open your browser and enter the public address of the instance with &lt;strong&gt;3000&lt;/strong&gt; at the end.&lt;/p&gt;

&lt;p&gt;Yay! That’s it! This might have been a lot, but I hope it was able to help you along in your journey.&lt;/p&gt;

&lt;p&gt;If you would like to set up CI/CD for your app using &lt;strong&gt;Jenkins&lt;/strong&gt;, you can check out one of my other articles &lt;a href="https://dev.to/mariehposa/achieving-continuous-integration-and-deployment-with-jenkins-4d6k"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve found this article helpful, please leave a heart or a comment. If you have any questions or constructive feedback, please let me know in the comment section.&lt;br&gt;
Also, don’t forget to follow me for more articles. Thank you!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>terraform</category>
      <category>ansible</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Font loading strategies: FOIT and FOUT</title>
      <author>Abdulqudus Abubakre</author>
      <pubDate>Wed, 21 Apr 2021 22:37:02 +0000</pubDate>
      <link>https://dev.to/ibn_abubakre/font-loading-strategies-foit-and-fout-393b</link>
      <guid>https://dev.to/ibn_abubakre/font-loading-strategies-foit-and-fout-393b</guid>
      <description>&lt;p&gt;Flash Of Invisible Text and Flash Of Unstyled Text are two font loading strategies used in major browsers. This post looks at what they are and how they affect your website.&lt;/p&gt;

&lt;p&gt;Custom web fonts have been around for a while now but sadly web browsers still don't have an optimal way of loading them. Web fonts are usually large files and they take quite some time to load on your web page. Different browsers have different ways of handling this delay. While some browsers would show a system font pending when the custom font gets loaded (&lt;em&gt;Flash Of Unstyled Text&lt;/em&gt;), some browsers would show blank text until the font has been loaded (&lt;em&gt;Flash Of Invisible Text&lt;/em&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flash-of-invisible-text-foit"&gt;
  &lt;/a&gt;
  Flash Of Invisible Text (FOIT)
&lt;/h2&gt;

&lt;p&gt;When a custom font is not ready to be loaded, some browsers would hide the text completely while others would only hide it for a few seconds. Browsers like Chrome and Firefox would hide the text for 3 seconds and if the font doesn't get loaded by then, a system font would be loaded. Other browsers like Safari completely hides the text until the font is ready to be loaded. The image below is a screenshot of a lighthouse audit that shows what happens when you don't account for FOIT in your application&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nox56IO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/ibnabubakre/image/upload/v1619036990/lighthouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nox56IO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/ibnabubakre/image/upload/v1619036990/lighthouse.png" alt="Screenshot of lighthouse test showing effect of FOIT"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flash-of-unstyled-text-fout"&gt;
  &lt;/a&gt;
  Flash Of Unstyled Text (FOUT)
&lt;/h2&gt;

&lt;p&gt;In this case, before the custom font is loaded, a system font is loaded by default and swapped out as soon as the custom font is ready. This is the preferred behavior because showing a &lt;em&gt;flash of invisible text&lt;/em&gt; has a significant effect on your websites overall performance.&lt;/p&gt;

&lt;p&gt;In this article, we will look at two ways to avoid showing the invisible text. The first option, which is quite simple and straightforward is to add the &lt;code&gt;font-display: swap&lt;/code&gt; rule to our CSS. Such that when you want to setup your custom font, we tell the browser to load a system font and swap it out when our font is done loading. Here's how that would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Poppins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;font-display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is quite straightforward but sadly, not supported by all browsers, So, if you're looking to account for all browsers, this might not work for you.&lt;/p&gt;

&lt;p&gt;Another method, though involves more code but can work across all browsers involve the use of an external library called &lt;a href="https://github.com/bramstein/fontfaceobserver"&gt;FontFaceObserver&lt;/a&gt;. To make this work, you have to;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure you don't use the custom font in your CSS on initial page load.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;FontFaceObserver&lt;/code&gt; library to detect when the font is loaded.&lt;/li&gt;
&lt;li&gt;Update the page styling to use the custom font.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's a &lt;a href="https://web.dev/codelab-avoid-invisible-text/"&gt;codelab&lt;/a&gt; by google that helps understand how to use the &lt;code&gt;FontFaceObserver&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;FOIT and FOUT are font loading strategies used by browsers to load custom fonts.&lt;/li&gt;
&lt;li&gt;FOIT shows an invisible text while FOUT uses a system font until the font is loaded.&lt;/li&gt;
&lt;li&gt;FOUT should be preferred over FOIT.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Browser&lt;/th&gt;
&lt;th&gt;Default behavior&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Edge;&lt;/td&gt;
&lt;td&gt;Uses system font until the custom font is ready (FOUT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Safari;&lt;/td&gt;
&lt;td&gt;Hides text until the custom font is ready (FOIT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Firefox;&lt;/td&gt;
&lt;td&gt;Initially hides text for 3 seconds. Uses system font after that until the custom font is ready (FOIT &amp;amp; FOUT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chrome;&lt;/td&gt;
&lt;td&gt;Initially hides text for 3 seconds. Uses system font after that until the custom font is ready (FOIT &amp;amp; FOUT)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>performance</category>
      <category>css</category>
    </item>
    <item>
      <title>What was the hardest concept for you to grasp when learning Object-Oriented Programming?</title>
      <author>Erik W</author>
      <pubDate>Wed, 21 Apr 2021 22:26:28 +0000</pubDate>
      <link>https://dev.to/erikwhiting88/what-was-the-hardest-concept-for-you-to-grasp-when-learning-object-oriented-programming-1ja</link>
      <guid>https://dev.to/erikwhiting88/what-was-the-hardest-concept-for-you-to-grasp-when-learning-object-oriented-programming-1ja</guid>
      <description>&lt;p&gt;I would say about 99% of developers use OOP in their day-to-day programming and perhaps even a higher percentage than that &lt;em&gt;learn&lt;/em&gt; OOP at the very least.&lt;/p&gt;

&lt;p&gt;I'm curious to see if there is a concept or idea specific to OOP that many people agree was hard for them to learn at first.&lt;/p&gt;

&lt;p&gt;For me, understanding the difference between class variables/methods and instance variables/methods was a bit of stumbling block to me. I used to not understand why you'd want to make a method &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How about you? When you learned OOP or if you're currently learning it, what concepts did/do you find most challenging to understand?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>oop</category>
    </item>
    <item>
      <title>I'm getting into making ecommerce apps.  I need help and advice on Payment forms!!</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Wed, 21 Apr 2021 22:05:14 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/i-m-getting-into-making-ecommerce-apps-i-need-help-and-advice-on-payment-forms-2a1j</link>
      <guid>https://dev.to/leviathanprogramming/i-m-getting-into-making-ecommerce-apps-i-need-help-and-advice-on-payment-forms-2a1j</guid>
      <description>&lt;p&gt;I have just started freelancing and before accepting any payments, I'm going to make ten free websites for people.&lt;/p&gt;

&lt;p&gt;Someone wants me to make a basic ecommerce site for them where payments take place online.&lt;br&gt;
I need some advice on this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How do you embed a checkout form in your site?&lt;br&gt;
I've looked all over the place and I couldn't really find a way.  I personally don't have a credit card/bank account since I'm only fifteen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I transfer the payment to the owner of the website?&lt;br&gt;
The setup of a Paypal account seems super complicated.  What if someone is not familliar with technology?  How will I link the checkout form to their bank account?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Any advice on the subject will be appreciated.  I need help fast and urgently.  Thanks!&lt;/p&gt;

</description>
      <category>help</category>
      <category>career</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Is it possible to make an OS using VERY DUMB languages like TS/JS, Python, etc...?</title>
      <author>Calin Baenen</author>
      <pubDate>Wed, 21 Apr 2021 21:55:01 +0000</pubDate>
      <link>https://dev.to/baenencalin/is-it-possible-to-make-an-os-using-very-dumb-languages-like-ts-js-python-etc-1fdk</link>
      <guid>https://dev.to/baenencalin/is-it-possible-to-make-an-os-using-very-dumb-languages-like-ts-js-python-etc-1fdk</guid>
      <description></description>
      <category>watercooler</category>
      <category>python</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Where You Stand Depends On Where You Sit</title>
      <author>Ania Gajecka</author>
      <pubDate>Wed, 21 Apr 2021 21:48:51 +0000</pubDate>
      <link>https://dev.to/annadayl/where-you-stand-depends-on-where-you-sit-54n3</link>
      <guid>https://dev.to/annadayl/where-you-stand-depends-on-where-you-sit-54n3</guid>
      <description>&lt;p&gt;Let us come back for a moment to my &lt;a href="https://dev.to/annadayl/weird-testing-job-interview-questions-1o42"&gt;previous post&lt;/a&gt;, where I shared "weird" questions that I was asked on job interviews for software testing role.&lt;/p&gt;

&lt;p&gt;Yesterday, during our late evening walk, I asked my partner, a .NET programmer, how he would test a soda machine. Without giving it much thought, he started spilling questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;does it make soda?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;is it refillable, like in Pizza Hut (or any kind of fast food chain place)?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;what kind of flavours are there?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;when you push the button, does it give you the soda you requested?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;is the soda sufficiently sparkly?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;is the soda cold?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He didn't even think of a &lt;em&gt;vending machine&lt;/em&gt;. I asked him other questions, about the pen, the paper cup and the clock, and his train of thought was slightly different from mine in each case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To build a shared understanding about the product, that the development team has to deliver, we need different perspectives.&lt;/strong&gt; &lt;br&gt;
Imagine a simple user story that is two sentences long. Everyone &lt;em&gt;seems to get it&lt;/em&gt;, but often it turns out there were some misconceptions, because everyone interprets those sentences differently. &lt;br&gt;
It is important for the team to consists of a diverse people - men and women, people with various cultural background, ethnicity or geographical location, etc. They bring their own perspective, knowledge, insides and experiences to the table. &lt;/p&gt;

</description>
      <category>testing</category>
      <category>agile</category>
      <category>5days5blogposts</category>
    </item>
    <item>
      <title>Add meta tags for social media with HtmlWebpackPlugin</title>
      <author>Dezmerean Robert</author>
      <pubDate>Wed, 21 Apr 2021 21:10:42 +0000</pubDate>
      <link>https://dev.to/robert96/add-meta-tags-for-social-media-with-htmlwebpackplugin-21h2</link>
      <guid>https://dev.to/robert96/add-meta-tags-for-social-media-with-htmlwebpackplugin-21h2</guid>
      <description>&lt;p&gt;Social media meta tags are &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your web page that control how URLs &lt;br&gt;
are displayed when shared on social media. &lt;/p&gt;

&lt;p&gt;If you are using &lt;a href="https://webpack.js.org/"&gt;&lt;code&gt;webpack&lt;/code&gt;&lt;/a&gt; you can use the &lt;code&gt;meta&lt;/code&gt; option from the &lt;a href="https://github.com/jantimon/html-webpack-plugin"&gt;&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;&lt;/a&gt; to add the &lt;br&gt;
social meta meta tags to your web page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// webpack.config.js&lt;/span&gt;

&lt;span class="c1"&gt;// ... &lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;contnet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keywords&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;website&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter:card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter:card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;summary_large_image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter:title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter:title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter:description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter:description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter:image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter:image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>webpack</category>
      <category>html</category>
    </item>
    <item>
      <title>🚧 The Einstellung Effect 🚧</title>
      <author>Kasper Mróz</author>
      <pubDate>Wed, 21 Apr 2021 21:01:19 +0000</pubDate>
      <link>https://dev.to/kaspermroz/the-einstellung-effect-3c0p</link>
      <guid>https://dev.to/kaspermroz/the-einstellung-effect-3c0p</guid>
      <description>&lt;p&gt;Hello everyone, welcome to my very first blog post! I hope it will provide you some value, and what's more important, a bit of reflection. 🧠&lt;/p&gt;

&lt;p&gt;Today I'll briefly cover the Einstellung effect, something I recently discovered while progressing &lt;a href="https://www.coursera.org/learn/learning-how-to-learn"&gt;Learn how to Learn course&lt;/a&gt; by dr Barbara Oakley. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-it-mean"&gt;
  &lt;/a&gt;
  What does it mean? 🤔
&lt;/h2&gt;

&lt;p&gt;The German word &lt;em&gt;Einstellung&lt;/em&gt; can be loosely translated as &lt;strong&gt;mindset&lt;/strong&gt; or &lt;strong&gt;attitude&lt;/strong&gt;. In terms of problem solving, it means to create sort of an automated state of mind. 🤖 This can be useful, especially when we want to master a repetitive manual task - see this &lt;a href="https://youtu.be/Kki-cUV_FCs?t=303"&gt;takoyaki master&lt;/a&gt;. In case of a software engineer however, it can sometimes make our life harder!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-it-matter"&gt;
  &lt;/a&gt;
  Why does it matter? 🤷
&lt;/h2&gt;

&lt;p&gt;The Einstellung can be also referenced as a problem solving set. It determines our predisposition to handle given problem in specific way, often ignoring better or more appropriate solutions. Think of a last time when you solved an issue that you found relatively easy, maybe even trivial - depending on your experience it can be related to implementation, design or architecture. You didn't give it much thought, did you? Yeah, and neither did I! &lt;/p&gt;

&lt;p&gt;Our brains have this amazing superpower to create &lt;strong&gt;neural patterns&lt;/strong&gt;, kind of paths that our mind follows step by step after initial thought. It takes time and repetition to create such patterns, otherwise they faint and disappear. When we learn something new and keep repeating this thing over and over, it strengthens our neural pattern and leads us to automaticity - this is exactly what Einstellung is all about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-we-prevent-it-from-affecting-us-%F0%9F%9B%A1"&gt;
  &lt;/a&gt;
  How can we prevent it from affecting us? 🛡
&lt;/h2&gt;

&lt;p&gt;The best way to make sure we don't fall for our mind's traps is stopping for a while and simply asking yourself a question - is this really the best way to do it? Try a different approach from time to time, always keep doing your research. Look for current state-of-art solutions, compare it with yours. Simply put, give it another thought!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up-%F0%9F%8E%97"&gt;
  &lt;/a&gt;
  Wrap up 🎗
&lt;/h2&gt;

&lt;p&gt;Today we learned about The Einstellung, a of mechanised way of thinking. We discovered how this negative effect of previous experience can influence our problem solving effects, and how to handle falling for it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading! 🙇
&lt;/h2&gt;

&lt;p&gt;Consider giving me a feedback on how to improve in writing, I will be grateful for life. 🙏&lt;br&gt;
Also, follow me here and on Twitter (&lt;a href="https://twitter.com/kasper_mroz"&gt;@kasper_mroz&lt;/a&gt;) if you found my post interesting and/or want to connect!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>watercooler</category>
      <category>todayilearned</category>
      <category>programming</category>
    </item>
    <item>
      <title>How To Choose Which JavaScript Libraries To Use (Part 1)</title>
      <author>Nico Zerpa (he/him)</author>
      <pubDate>Wed, 21 Apr 2021 20:54:11 +0000</pubDate>
      <link>https://dev.to/nicozerpa/how-to-choose-which-javascript-libraries-to-use-part-1-13c2</link>
      <guid>https://dev.to/nicozerpa/how-to-choose-which-javascript-libraries-to-use-part-1-13c2</guid>
      <description>&lt;p&gt;So you want to create a JavaScript project? Great! Which library or framework are you going to use, React? Maybe Vue.js? Maybe you prefer using just Vanilla JS? Heck, even jQuery might be an option!&lt;/p&gt;

&lt;p&gt;OK, let's say you choose React. Now, how will you do the state management? Redux, maybe MobX? Or maybe I rely just on React Hooks and the Context API?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choosing the right tools is one of the most important decisions that you'll have to make when you start a new JavaScript project.&lt;/strong&gt; These decisions have long-term consequences, good and bad, for your project. And they play a crucial role in the success (or failure) of it.&lt;/p&gt;

&lt;p&gt;In this four-article series, I'll give you my tips and tactics so you can choose the best libraries for your JS project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-into-account-project-size"&gt;
  &lt;/a&gt;
  Take Into Account Project Size
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In smaller projects, you should prefer tiny libraries&lt;/strong&gt; (or even Vanilla JS) with little boilerplate code. On the other hand, larger, more &lt;strong&gt;complex libraries are better suited for larger projects&lt;/strong&gt; that might be worked on by many people.&lt;/p&gt;

&lt;p&gt;One of the advantages of (some) complex libraries is that make the code easier to maintain (if you use them properly, of course.) at the cost of more boilerplate code, increased build times, and larger bundle sizes.&lt;/p&gt;

&lt;p&gt;However, small codebases are easier to maintain. That means, if you add complex tools you'll get the disadvantages, but not the benefits (because you already had the benefit of maintainability.)&lt;/p&gt;

&lt;p&gt;It doesn't necessarily mean that you should use only larger frameworks and libraries on big projects. Size still matters and &lt;strong&gt;if you find a smaller library that does the same thing and does it well, it can be a good option&lt;/strong&gt;, as long as they meet the other requirements in this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-next-article-of-this-series-ill-talk-about-comparing-new-and-shiny-libraries-vs-popular-and-safer-ones-and-when-to-choose-one-over-the-other"&gt;
  &lt;/a&gt;
  In the next article of this series, I'll talk about comparing new and shiny libraries vs. popular and "safer" ones, and when to choose one over the other.
&lt;/h2&gt;

&lt;p&gt;p.s. Did you like what you've read? Every week I send an email with free tips and insights to become a better JavaScript dev. If you're interested, &lt;a href="https://nicozerpa.com/newsletter/"&gt;click here to subscribe&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What happened to my &lt;meta&gt; OG image?</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Wed, 21 Apr 2021 20:31:43 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/what-happened-to-my-meta-og-image-4ap9</link>
      <guid>https://dev.to/leviathanprogramming/what-happened-to-my-meta-og-image-4ap9</guid>
      <description>&lt;p&gt;I was developing a website for my dad and was adding the OG meta information.  I don't know what happened to the image, but it was super small.  I was testing the outcome on Discord and it seems like I coded something seriously wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QI9HV4qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2dr7iu7q50xbp6du7jx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QI9HV4qK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2dr7iu7q50xbp6du7jx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look at github's OG data, it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pucOikyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y60mt483f0mq6q1vrvyf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pucOikyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y60mt483f0mq6q1vrvyf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is my OG data code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Agape-TX Chiropractic"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Agape Chiropractic is your neighborhood clinic situated on a small ranch in Whitewright, TX.  Bring your family and animals for an adjustment and enjoy the beautiful scenery in the coutryside."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://github.com/Conner1115/Conner1115/blob/main/portfolio-images/Screen%20Shot%202021-04-12%20at%2012.13.54%20PM.png?raw=true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:width"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"1200"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:height"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"630"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://agapechiro-tx.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"copyright"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"2021"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you can provide me with an answer, I will greatly appreciate it.  Thanks!&lt;/p&gt;

</description>
      <category>html</category>
      <category>help</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>What is the most interesting place in the backyard? Make yourself a heatmap 🐕‍🦺</title>
      <author>Kuba</author>
      <pubDate>Wed, 21 Apr 2021 20:00:36 +0000</pubDate>
      <link>https://dev.to/kuba_szw/what-is-the-most-interesting-place-in-the-backyard-make-yourself-a-heatmap-2k7b</link>
      <guid>https://dev.to/kuba_szw/what-is-the-most-interesting-place-in-the-backyard-make-yourself-a-heatmap-2k7b</guid>
      <description>&lt;h3&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h3&gt;

&lt;p&gt;Obviously if we talk about heatmaps, we talk about displaying some data. Today it is about displaying heatmap on an image. In this case it will be dog position in the garden. You can read how to obtain such position &lt;a href="https://jakubszwajka.github.io/Maping-coordinates-from-frame-to-flat-space/"&gt;here&lt;/a&gt;. Connect the dots, and you will have some cool system in your garden 😎.&lt;/p&gt;

&lt;p&gt;First, I have to admit that I don't have a dog. Data will be generated randomly X and Y positions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# 100 random pairs of x and y in range from 0 to 20
&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#image-to-put-heatmap-on-it"&gt;
  &lt;/a&gt;
  Image to put heatmap on it
&lt;/h3&gt;

&lt;p&gt;Now I will use my talent a bit 😎. Hope you can see a garden here. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HVNZ0ZB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/garden.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVNZ0ZB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/garden.png%3Fraw%3Dtrue" alt="garden"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#load-image-and-put-data-strait-forward-on-it"&gt;
  &lt;/a&gt;
  Load image and put data strait forward on it
&lt;/h3&gt;

&lt;p&gt;Let's use OpenCV and add some dots. Assume that our garden is 20 m long. Scale coordinates to shape of our image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; 

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;map_img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HERE PUT PATH TO IMG ON DISC"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map_img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt; 

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;coord&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;coord&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;map_img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;map_img&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroyAllWindows&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7a4M9J35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/garden_2.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7a4M9J35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/garden_2.png%3Fraw%3Dtrue" alt="garden"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hmm. There is some data, but it's hard to analyze it. Let's dig deeper.&lt;/p&gt;

&lt;p&gt;Let's make second image, blank one. We will put our data on it, manipulate a bit and then overlay on target image. &lt;/p&gt;

&lt;p&gt;Blank image is quite easy in OpenCV. Just matrix with zeros.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;heatmap_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting data on it is the same as above. Use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
. You should be able to display such dots.

![garden](https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/garden_3.png?raw=true)

### Manipulate them

Use ``cv2.distanceTransform()`` for all pixels. It changes pixels value based on distance to the nearest pixel with value 0. So if there is a lot of points in one place, value will be higher.




```python
heatmap_image = cv2.distanceTransform(heatmap_image, cv2.DIST_L2, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3MCO3zI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/garden_5.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3MCO3zI7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/garden_5.png%3Fraw%3Dtrue" alt="garden"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quite good! Now let's add some color. To make in more readable, in this example I'm multiplying every pixel by 2.5. Change this value and see what happens. 😉&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# here I make those points a bit bigger
&lt;/span&gt;&lt;span class="n"&gt;heatmap_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;heatmap_image&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;
&lt;span class="n"&gt;heatmap_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heatmap_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;heatmap_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;applyColorMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heatmap_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLORMAP_JET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that &lt;code&gt;cv2.distanceTransform( )&lt;/code&gt; change type of data a bit. We have to change it back to &lt;code&gt;np.uint8&lt;/code&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overlay"&gt;
  &lt;/a&gt;
  Overlay
&lt;/h3&gt;

&lt;p&gt;Final step. Overlay those two images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fin_img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addWeighted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heatmap_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;map_img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z7LO-AS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/garden_4.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z7LO-AS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/garden_4.png%3Fraw%3Dtrue" alt="Garden"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see the data now! We can assume where our dog spends most of the time. 👍&lt;/p&gt;

&lt;p&gt;Try to connect this with this &lt;a href="https://jakubszwajka.github.io/Maping-coordinates-from-frame-to-flat-space/"&gt;post&lt;/a&gt;, and you can make quite interesting camera system 🤔.  You can try changing values in &lt;code&gt;distanceTransform( )&lt;/code&gt; too. For example try different &lt;a href="https://docs.opencv.org/3.4/d7/d1b/group__imgproc__misc.html#gaa2bfbebbc5c320526897996aafa1d8eb"&gt;distance types&lt;/a&gt;. They will change your heatmap a bit. &lt;/p&gt;

</description>
      <category>python</category>
      <category>5days5blogposts</category>
      <category>opencv</category>
      <category>imageprocessing</category>
    </item>
    <item>
      <title>Handling Falsy Values Emitted from Observables in Angular</title>
      <author>ng-conf</author>
      <pubDate>Wed, 21 Apr 2021 20:00:32 +0000</pubDate>
      <link>https://dev.to/ngconf/handling-falsy-values-emitted-from-observables-in-angular-17a</link>
      <guid>https://dev.to/ngconf/handling-falsy-values-emitted-from-observables-in-angular-17a</guid>
      <description>&lt;p&gt;Preston Lamb | ng-conf | Sep 2020&lt;/p&gt;

&lt;p&gt;In the last year or so, I’ve been fully embracing reactive programming in my Angular apps. That means goodbye &lt;code&gt;subscribe&lt;/code&gt; and hello &lt;code&gt;async&lt;/code&gt; pipe! It’s been great, but there have been a couple times where the &lt;code&gt;async&lt;/code&gt; pipe, in conjunction with the &lt;code&gt;*ngIf&lt;/code&gt; structural directive, have not worked as I needed them to. The issue arises when the emitted value from the observable is falsy. When the emitted value is falsy, the &lt;code&gt;*ngIf&lt;/code&gt; doesn’t output the content on the screen. I understand why that happens, but many times the falsy value is a valid result and should be displayed. In this post, we’ll cover an easy way to still use the &lt;code&gt;async&lt;/code&gt; pipe and &lt;code&gt;*ngIf&lt;/code&gt; while still outputting falsy values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-issue-explained"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The Issue Explained&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Recently, I was working on an application at work where we needed to output the emitted value of an observable. The value was a number with zero being a valid result. We also wanted to display a loading spinner while waiting on data from the API. We did that with the &lt;code&gt;*ngIf&lt;/code&gt; structural directive and the &lt;code&gt;else&lt;/code&gt; option that goes along with it. Here’s a brief sample of what that looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div 
  *ngIf=”observableValue$ | async as value; else backupLoader”&amp;gt;
    {{ value }}
&amp;lt;/div&amp;gt;
&amp;lt;ng-template #backupLoader&amp;gt;
  &amp;lt;app-loader&amp;gt;&amp;lt;/app-loader&amp;gt;
&amp;lt;/ng-template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This worked in most situations. Before the observable emitted the response from the API, the loader would show up on the screen. As soon as the value came back, it replaced the loader. The only time it didn’t work was when the emitted value was 0. The loader would stay on the screen and 0 would never show up. The reason for that is that 0 is a falsy value, and thus the &lt;code&gt;*ngIf&lt;/code&gt; never stopped showing the loader.&lt;/p&gt;

&lt;p&gt;One solution to get around this was to convert the returned value to a string and not a number. I didn’t want to have to alter the value though to get my desired result. &lt;a href="https://twitter.com/prestonjlamb/status/1305538951936057356"&gt;I turned to Twitter&lt;/a&gt; for a little bit of help and came up with the following solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-observable-values-in-objects"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Wrapping Observable Values in Objects&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The easiest way to solve this issue is to turn the emitted value from the observable into an attribute on an object. You can do this in the component class file, or directly in the HTML. I’m going to do this directly in the HTML. Here’s what that looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ng-container 
  *ngIf=”{ observableValue: observableValue$ | async } as data”&amp;gt;
    &amp;lt;div&amp;gt;{{ data.observableValue }}&amp;lt;/div&amp;gt;
&amp;lt;/ng-container&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we’ve done here is subscribed to the observable with the &lt;code&gt;async&lt;/code&gt; pipe, and put the value into the &lt;code&gt;observableValue&lt;/code&gt; attribute of an object. Notice the curly brackets inside the &lt;code&gt;*ngIf&lt;/code&gt; structural directive. We then use the &lt;code&gt;as&lt;/code&gt; syntax, which renames the variable for use in the template. Inside the double curly brackets, the result is output by accessing the &lt;code&gt;observableValue&lt;/code&gt; attribute of the &lt;code&gt;data&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;*ngIf&lt;/code&gt; directive on the &lt;code&gt;ng-container&lt;/code&gt; element will now always evaluate to &lt;code&gt;true&lt;/code&gt; because we have created that object. So, no matter what value is emitted from the observable, we will output it to the screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-the-loader"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What About the Loader?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Wrapping the observable in an object was nice, and now we can output falsy values. But if we stop with the example in the previous section we’ll have lost our loader element. So the last part to figure out is how to combine wrapping the observable in an object with showing the loader element before the data is loaded. We can do that by using a second &lt;code&gt;*ngif&lt;/code&gt; inside the &lt;code&gt;ng-container&lt;/code&gt;, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ng-container 
  *ngIf=”{ observableValue: observableValue$ | async } as data”&amp;gt;
    &amp;lt;div *ngIf=”
      data.observableValue !== null &amp;amp;&amp;amp; 
      data.observableValue !== undefined; 
      else backupLoader”
    &amp;gt;
      {{ data.observableValue }}
    &amp;lt;/div&amp;gt;
    &amp;lt;ng-template #backupLoader&amp;gt;
      &amp;lt;app-loader&amp;gt;&amp;lt;/app-loader&amp;gt;
    &amp;lt;/ng-template&amp;gt;
&amp;lt;/ng-container&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;ng-container&lt;/code&gt; is the same here as it was before. But the &lt;code&gt;div&lt;/code&gt; that wraps the &lt;code&gt;data.observableValue&lt;/code&gt; output now has a new &lt;code&gt;*ngIf&lt;/code&gt; placed on it. The two checks added here are that the &lt;code&gt;observableValue&lt;/code&gt; attribute value is not &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. If the value is null or undefined, then the loader is shown. Otherwise, the value is output (including if it’s falsy).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I have been working with Angular for a long time at this point, and am really bummed that I hadn’t figured this out years ago. This is a great way to output falsy values while using the &lt;code&gt;async&lt;/code&gt; pipe and the &lt;code&gt;*ngIf&lt;/code&gt; structural directive. I will be using this a lot going forward, and hope that this will be useful for you as well.&lt;/p&gt;

&lt;p&gt;I also want to give credit to &lt;a href="https://twitter.com/maxime1992"&gt;Maxime Robert&lt;/a&gt; for writing &lt;a href="https://dev.to/maxime1992/angular-easily-extract-a-falsy-value-from-an-observable-using-the-async-pipe-112g"&gt;this great article&lt;/a&gt; and to &lt;a href="https://twitter.com/aaronfrost"&gt;Aaron Frost&lt;/a&gt; for &lt;a href="https://twitter.com/aaronfrost/status/1305542975087288328?s=20"&gt;the suggestion on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ngconf-the-musical-is-coming"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ng-conf: The Musical is coming&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;ng-conf: The Musical is a two-day conference from the ng-conf folks coming on April 22nd &amp;amp; 23rd, 2021. Check it out at &lt;a href="https://www.2021.ng-conf.org/"&gt;ng-conf.org&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#thanks-to-steven-guitar"&gt;
  &lt;/a&gt;
  Thanks to Steven Guitar.
&lt;/h6&gt;

</description>
      <category>angular</category>
      <category>rxjs</category>
      <category>observables</category>
      <category>falsyvalues</category>
    </item>
  </channel>
</rss>
