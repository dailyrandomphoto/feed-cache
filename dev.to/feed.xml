<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Flask Material Kit - Open-source Template</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 03 Jan 2022 19:25:41 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-material-kit-open-source-template-30ce</link>
      <guid>https://dev.to/sm0ke/flask-material-kit-open-source-template-30ce</guid>
      <description>&lt;p&gt;Hello Coders &amp;amp; Happy new year!&lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;code&gt;Flask Template&lt;/code&gt; crafted with authentication, database, and Docker support on top of &lt;a href="https://appseed.us/apps/flask-apps/flask-material-kit"&gt;Material Kit&lt;/a&gt; Design, a modern and colorful Bootstrap 5 design. The product can be used to code faster a presentation website without much effort or simply for eLearning activities. For newcomers, &lt;strong&gt;Flask&lt;/strong&gt; is a leading framework written in &lt;code&gt;Python&lt;/code&gt; used to code simple websites, APIs, or complex eCommerce solutions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/apps/flask-apps/flask-material-kit"&gt;Flask Material Kit&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-material-kit.appseed-srv1.com/"&gt;Flask Material Kit&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The product can be compiled and started in a local environment using two techniques: Docker setup (faster &amp;amp; easier) or a classic manual build in case Docker is not an option.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone/download the &lt;a href="https://github.com/app-generator/flask-material-kit"&gt;sources&lt;/a&gt; from Github&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-material-kit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-material-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all the above commands are executed, we should be able to access the app in the browser, register new users, and authenticate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggHptGj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agx38pcc6f4mmnqy6nx5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggHptGj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agx38pcc6f4mmnqy6nx5.png" alt="Flask Material Kit - Login Page." width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Material Kit 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, which you can easily modify using SASS files and classes.&lt;/p&gt;

&lt;p&gt;If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJQawd8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n5cz3qanvx4my4mwyng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJQawd8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n5cz3qanvx4my4mwyng.png" alt="Flask Material Kit - User Profile Page." width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask Material Kit - Team Section&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86NfBDmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36kgzo2j0eelje96z42e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86NfBDmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36kgzo2j0eelje96z42e.png" alt="Flask Material Kit - Team Section." width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask Material Kit - About US Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d-fWoheC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbsxbd24ydfvi67xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d-fWoheC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbsxbd24ydfvi67xz.png" alt="Flask Material Kit - About US Page." width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deploy-in-production"&gt;
  &lt;/a&gt;
  ✨ Deploy in production
&lt;/h2&gt;

&lt;p&gt;Once the local development is done, we can push the project into the wild and share our work using a public deployment.&lt;/p&gt;

&lt;p&gt;Might be a good idea, before going LIVE to enable compression for pages and projects assets (JS, CSS files). This goal can be easily achieved via an open-source Flask module: &lt;code&gt;Flask-Minify&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #1&lt;/strong&gt; - Add &lt;code&gt;Flask-Minify&lt;/code&gt; to the product requirements&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Flask-Minify==0.35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #2&lt;/strong&gt; - Update codebase to enable compression&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Contents of apps/__init__.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Import the module
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_minify&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Minify&lt;/span&gt;                     &lt;span class="c1"&gt;# &amp;lt;-- NEW Line
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Inject the module into the Flask APP object
&lt;/span&gt;&lt;span class="n"&gt;Minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cssless&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;-- NEW Line 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the app should serve compressed pages and assets (JSS, CSS).&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #3&lt;/strong&gt; - Execute the &lt;code&gt;Docker&lt;/code&gt; set up on the production host&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
// App runs on port -&amp;gt; http://localhost:85
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Step #4&lt;/strong&gt; - Configure webserver to forward requests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apache and Nginx are super popular webservers that we can configure to route the external received from our users to the local port &lt;code&gt;85&lt;/code&gt; server exposed by Docker.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;✨ &lt;strong&gt;Apache&lt;/strong&gt; - Reverse PROXY configuration&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:*&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ProxyPreserveHost On

    # Servers to proxy the connection, or;
    # List of application servers:
    # Usage:
    # ProxyPass / http://[IP Addr.]:[port]/
    # ProxyPassReverse / http://[IP Addr.]:[port]/
    # Example:
    ProxyPass / http://0.0.0.0:85/
    ProxyPassReverse / http://0.0.0.0:85/

    ServerName localhost
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;✨ &lt;strong&gt;Nginx&lt;/strong&gt; - reverse PROXY configuration&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;server {&lt;/span&gt;
        &lt;span class="s"&gt;listen 80;&lt;/span&gt;               
        &lt;span class="s"&gt;server_name my-site.com;&lt;/span&gt;

        &lt;span class="s"&gt;location / {&lt;/span&gt;
                &lt;span class="s"&gt;proxy_pass http://127.0.0.1:85;&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;👉 AppSeed for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via eMail and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/product/django-material-kit"&gt;Django Material Kit&lt;/a&gt; - &lt;code&gt;open-source&lt;/code&gt; version for &lt;strong&gt;Django&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>material</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Joining Replay.io</title>
      <author>Cecelia Martinez</author>
      <pubDate>Mon, 03 Jan 2022 18:10:56 +0000</pubDate>
      <link>https://dev.to/ceceliacreates/joining-replayio-1j3n</link>
      <guid>https://dev.to/ceceliacreates/joining-replayio-1j3n</guid>
      <description>&lt;p&gt;Today is my first day as Community Lead at &lt;a href="https://replay.io"&gt;Replay.io&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;I am incredibly excited about this new adventure for many reasons, but primarily because of Replay’s mission to make software easier to understand, more accessible, and more inclusive.&lt;/p&gt;

&lt;p&gt;Replay is a time travel debugger that lets you record and replay web applications with familiar browser dev tools along for the ride. Replay lets you see what’s happening with your software at any point in time, add print statements to existing recordings, and share and comment for easy collaboration. &lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/605204613" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://www.replay.io/"&gt;Check it out here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More than just being cool tech, Replay is built on a philosophy strongly aligned with my core values as a developer and community member.&lt;/p&gt;

&lt;p&gt;Demystifying how applications work and what happens when they don’t work helps reduce the barrier to entry for software development. Creating a culture of sharing and working on bugs collaboratively reduces the fear and stigma around making “mistakes” with code.&lt;/p&gt;

&lt;p&gt;I’m also so excited to focus more on community. Understanding developer challenges, building solutions and then sharing that knowledge with others has always been the most rewarding part of my professional and volunteer work. &lt;/p&gt;

&lt;p&gt;Through mentoring and volunteering with Out in Tech and Women Who Code, I’ve seen how a lack of support and unnecessary technical hurdles can prevent developers from thriving as they should. Creating approachable — even exciting! — developer experiences is necessary to fostering an inclusive industry where all developers can build software that goes on to power an inclusive world.&lt;/p&gt;

&lt;p&gt;Replay does this by helping communities collaborate around a shared understanding of their software. The opportunity to focus full time on helping developers thrive with Replay is incredible, and I can’t wait to see the impact this will have on communities like these.&lt;/p&gt;

&lt;p&gt;Thank you for being a part of this journey with me! If this mission resonates with you, I welcome you to join us in the &lt;a href="https://replay.io/discord"&gt;Replay Discord&lt;/a&gt;. We’d love to see how Replay can help your team or community. We all go farther when we go together, so let’s see how far we can go!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>peviitor.ro - scraper[3]</title>
      <author>Boga Sebastian Nicolae</author>
      <pubDate>Mon, 03 Jan 2022 18:01:25 +0000</pubDate>
      <link>https://dev.to/sebiboga/peviitorro-scraper3-1fml</link>
      <guid>https://dev.to/sebiboga/peviitorro-scraper3-1fml</guid>
      <description>&lt;p&gt;Pasii care vor trebui implementati pentru a realiza un scraper pentru o companie, sunt:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sterge datele din index&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extrage locurile de munca din website-ul companiei&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pregateste datele pentru a putea fi trimise prin API&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;trimite datele&lt;/code&gt;= locurile de munca spre index&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Acesta este algoritmul care va trebui scris pentru fiecare companie in parte. In ce limbaj scri scraperul nu este important, insa ce e important?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;scraperul trebuie sa fie cat mai rapid&lt;/li&gt;
&lt;li&gt;scraperul nu are voie sa preia de foarte multe ori pe zi date de pe website (acceptabil o data pe zi sau de doua ori pe zi)&lt;/li&gt;
&lt;li&gt;datele care se trimit spre index trebuie sa aibe sens, si aici ne referim la faptul ca oamenii de HR s-ar putea sa introduca date gresite sau care nu au corespondent la noi in index.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#validarea-datelor"&gt;
  &lt;/a&gt;
  Validarea datelor
&lt;/h4&gt;

&lt;p&gt;Ne propunem ca inainte de a pune scraperul la lucru zilnic sa ne validam aceste locuri de munca pe un environment de test. &lt;/p&gt;

&lt;p&gt;Nu are sens ca datele din productie sa fie partial valide sau in proces de a fi corectate, astfel pana cand nu suntem siguri ca scraperul extrage corect datele, toate datele vor fi trimise catre un server de test.&lt;br&gt;
Odata ce scraperul este validat, putem sa il programam printr-un proces sa se ruleze zilnic sau de doua ori pe zi.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#propunere-de-implementare-scraper"&gt;
  &lt;/a&gt;
  Propunere de implementare scraper
&lt;/h4&gt;

&lt;p&gt;Propunem spre implementare scraper cu tehnologiile: &lt;code&gt;JMeter&lt;/code&gt;, &lt;code&gt;RegEx&lt;/code&gt;, &lt;code&gt;JSON extractor&lt;/code&gt; si pentru automatizarea de a se instantia o data pe zi: &lt;code&gt;GitHUB Actions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In articolul urmator venim cu o solutie in care am implementat un scraper pentru o anumita firma. &lt;/p&gt;

</description>
      <category>peviitor</category>
      <category>job</category>
      <category>scraper</category>
      <category>locuridemunca</category>
    </item>
    <item>
      <title>Built-In Angular Pipes - DatePipe - Part 2 </title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Mon, 03 Jan 2022 17:39:37 +0000</pubDate>
      <link>https://dev.to/this-is-angular/built-in-angular-pipes-datepipe-part-2-46a2</link>
      <guid>https://dev.to/this-is-angular/built-in-angular-pipes-datepipe-part-2-46a2</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will continue to learn the remaining built-in pipes available in Angular.&lt;br&gt;
If you are not familiar with Angular Pipes I would suggest you to go through this &lt;a href="https://dev.to/this-is-angular/built-in-angular-pipes-part-1-23ec"&gt;post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DatePipe&lt;/code&gt;&lt;br&gt;
The &lt;code&gt;DatePipe&lt;/code&gt; formats the date value and displays in a human readable form (as per the locale).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value | date [ : format [ : timezone [ : locale ] ] ] }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is exported from the Common Module (I will talk about it in the module section coming very soon).&lt;/p&gt;

&lt;p&gt;You can pass the value in the form of a &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; or as &lt;code&gt;date object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parameter the pipe accepts&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;format&lt;/code&gt; - &lt;br&gt;
The way you want to display the date.&lt;br&gt;
It is of string type.&lt;br&gt;
It is optional.&lt;br&gt;
Default value is &lt;code&gt;mediumDate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;br&gt;
The time zone what you want to display.&lt;br&gt;
It is of type string type.&lt;br&gt;
It is optional.&lt;br&gt;
Default is undefined&lt;/p&gt;

&lt;p&gt;&lt;code&gt;locale&lt;/code&gt;&lt;br&gt;
It represents the locale format rule&lt;br&gt;
It is of type string.&lt;br&gt;
It is optional.&lt;br&gt;
Default is the project locale.&lt;/p&gt;

&lt;p&gt;Now lets see in practice - &lt;/p&gt;

&lt;p&gt;Lets open the component.ts file -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5MYyQVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/243r85gxkmtbaypdhb4i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5MYyQVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/243r85gxkmtbaypdhb4i.PNG" alt="Image description" width="509" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And lets add the following code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  // Date in String
  dateInString = '01/05/2022';

  // Date in Number
  dateInNumber = Date.now();;

  // Date Object
  dateInObject = new Date();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets open the component template file and paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h3&amp;gt;Date Pipe Demo&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ dateInNumber | date }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ dateInObject | date }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the below output - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nW4oVR40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxy7b336luo6dug54nc9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nW4oVR40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxy7b336luo6dug54nc9.PNG" alt="Image description" width="314" height="212"&gt;&lt;/a&gt;&lt;br&gt;
Here in the above code we are using the date Pipe to format the date or we can say we are passing the value to the date pipe to get it formatted. By default it is displayed in &lt;code&gt;medium&lt;/code&gt; format.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;format&lt;/code&gt; example&lt;br&gt;
There are 12 different formats available by default - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;medium&lt;/li&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;li&gt;full&lt;/li&gt;
&lt;li&gt;shortDate&lt;/li&gt;
&lt;li&gt;mediumDate&lt;/li&gt;
&lt;li&gt;longDate&lt;/li&gt;
&lt;li&gt;fullDate&lt;/li&gt;
&lt;li&gt;shortTime&lt;/li&gt;
&lt;li&gt;mediumTime&lt;/li&gt;
&lt;li&gt;longTime&lt;/li&gt;
&lt;li&gt;fullTime&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets paste in the below code in the template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;short:&amp;lt;/b&amp;gt; {{ dateInString | date: "short" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;medium:&amp;lt;/b&amp;gt;{{ dateInString | date: "medium" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;long:&amp;lt;/b&amp;gt;{{ dateInString | date: "long" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;full:&amp;lt;/b&amp;gt;{{ dateInString | date: "full" }}&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;shortDate:&amp;lt;/b&amp;gt;{{ dateInString | date: "shortDate" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;mediumDate:&amp;lt;/b&amp;gt;{{ dateInString | date: "mediumDate" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;longDate:&amp;lt;/b&amp;gt;{{ dateInString | date: "longDate" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;fullDate:&amp;lt;/b&amp;gt;{{ dateInString | date: "fullDate" }}&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;shortTime:&amp;lt;/b&amp;gt;{{ dateInString | date: "shortTime" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;mediumTime:&amp;lt;/b&amp;gt;{{ dateInString | date: "mediumTime" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;longTime:&amp;lt;/b&amp;gt;{{ dateInString | date: "longTime" }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;fullTime:&amp;lt;/b&amp;gt;{{ dateInString | date: "fullTime" }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the below output once you run the application -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5IzRqOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk7iw4c9g1admr6nbggh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5IzRqOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gk7iw4c9g1admr6nbggh.PNG" alt="Image description" width="453" height="439"&gt;&lt;/a&gt;&lt;br&gt;
Here you can see all the different forms of Date available.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;timezone&lt;/code&gt; example&lt;br&gt;
Apart from adding the format you can also pass the timezone. For example IST (Indian Standard Time) or UTC. Two ways you can pass the timezone -&lt;br&gt;
Lets paste the below code in the template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;b&amp;gt;Form 1&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date: "short":"IST" }}&amp;lt;/p&amp;gt;
&amp;lt;b&amp;gt;Form 2&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date: "short":"+0530" }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above cases in the first example we are passing the timezone name (like IST) and in second we are passing how much ahead or behind compared to the UTC. In both the cases you will see the same output.&lt;br&gt;
If it is behind you should use '-' (negative) sign.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jTheFAwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i12kaf7kpo1q2buezp8d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTheFAwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i12kaf7kpo1q2buezp8d.PNG" alt="Image description" width="214" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to show the UTC time zone then you should use the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;b&amp;gt;UTC Form 1&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date: "short":"UTC" }}&amp;lt;/p&amp;gt;
&amp;lt;b&amp;gt;UTC Form 2&amp;lt;/b&amp;gt;
&amp;lt;p&amp;gt;{{ dateInString | date: "short":"+0000" }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;locale&lt;/code&gt; example&lt;br&gt;
The third parameter is the locale which I will show in details when covering localization part.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post.&lt;/p&gt;

&lt;p&gt;If yes do like comment and share.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Baloonza IT newsletters weekly digest #18</title>
      <author>Dmitry Magunov</author>
      <pubDate>Mon, 03 Jan 2022 17:30:52 +0000</pubDate>
      <link>https://dev.to/dimamagunov/baloonza-it-newsletters-weekly-digest-18-1ib</link>
      <guid>https://dev.to/dimamagunov/baloonza-it-newsletters-weekly-digest-18-1ib</guid>
      <description>&lt;p&gt;Happy New Year!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-design"&gt;
  &lt;/a&gt;
  CSS, design
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11021?baloon_issue_id=18"&gt;CSS Animation Weekly #281&lt;/a&gt; &lt;br&gt;
Some scroll animations, explore daylight cycles and lots of other inspiration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11039?baloon_issue_id=18"&gt;📝 [CSS-Tricks] 283: Happy Holidays!&lt;/a&gt;&lt;br&gt;
:has() is :here(), cool things you can do with CSS and text,  new spelling and grammatical tools.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#product-hunt-daily"&gt;
  &lt;/a&gt;
  Product Hunt Daily
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11028?baloon_issue_id=18"&gt;Most upvoted&lt;/a&gt;&lt;br&gt;
2021’s most upvoted products, Volume I&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11055?baloon_issue_id=18"&gt;Killing it&lt;/a&gt;&lt;br&gt;
2021’s most upvoted products, Volume II&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11081?baloon_issue_id=18"&gt;Up and away&lt;/a&gt;&lt;br&gt;
2021’s most upvoted products, Volume III&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11116?baloon_issue_id=18"&gt;Top 10&lt;/a&gt;&lt;br&gt;
2021’s most upvoted products, Volume IV&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11164?baloon_issue_id=18"&gt;5,4,3,2,1&lt;/a&gt;&lt;br&gt;
The 5 most upvoted products of 2021&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hacker-newsletter"&gt;
  &lt;/a&gt;
  Hacker Newsletter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.baloonza.com/issues/11155?baloon_issue_id=18"&gt;Hacker Newsletter #584&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#frontend-javascript-react"&gt;
  &lt;/a&gt;
  Frontend, javascript, React
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11085?baloon_issue_id=18"&gt;Frontend Weekly - Issue 286&lt;/a&gt;&lt;br&gt;
6 hidden JavaScript gems that you probably miss, top 30 Git Command, React Chat Tutorial and other&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Awesome Javascript Newsletter&lt;/code&gt; &lt;a href="https://app.baloonza.com/issues/11139?baloon_issue_id=18"&gt;💻 Issue 293 - PrinceJS: Prince of Persia&lt;/a&gt;&lt;br&gt;
New in Node.js: "node:" protocol imports, Auto-Currying In TypeScript, Lessons Learned Achieving 100% Test Coverage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Awesome React Newsletter&lt;/code&gt; &lt;a href="https://app.baloonza.com/issues/11142?baloon_issue_id=18"&gt;💻 Issue 211 - 5 Best Online Courses to learn React.js with Hooks in 2022&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-science-weekly-newsletter"&gt;
  &lt;/a&gt;
  Data Science Weekly Newsletter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.baloonza.com/issues/11150?baloon_issue_id=18"&gt;Data Science Weekly - Issue 423&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




</description>
      <category>javascript</category>
      <category>react</category>
      <category>startup</category>
      <category>css</category>
    </item>
    <item>
      <title>Best Python resources from beginner to advanced </title>
      <author>Juan Benitez </author>
      <pubDate>Mon, 03 Jan 2022 17:23:09 +0000</pubDate>
      <link>https://dev.to/juanbenitezdev/best-python-resources-from-beginner-to-advanced-c9a</link>
      <guid>https://dev.to/juanbenitezdev/best-python-resources-from-beginner-to-advanced-c9a</guid>
      <description>&lt;p&gt;Hey there, I made this compilation of websites, courses, youtube videos for learning Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-courses"&gt;
  &lt;/a&gt;
  1. Courses
&lt;/h2&gt;

&lt;p&gt;Couple of free courses to learn Python from scratch&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/_uQrJ0TkZlc"&gt;Python Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/rfscVS0vtbw"&gt;Python Crash Course FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/introduction-to-computer-science-and-programming-7"&gt;FREE MIT Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-programming-language/"&gt;Geeks for Geeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  2. Algorithms and Data structures.
&lt;/h2&gt;

&lt;p&gt;Videos, texts, repositories about algorithms and data structures, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/8hly31xKli0"&gt;Data structures and Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/"&gt;Geeks for Geeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bigocheatsheet.com/"&gt;BigO Cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tayllan/awesome-algorithms"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-websites"&gt;
  &lt;/a&gt;
  3. Websites
&lt;/h2&gt;

&lt;p&gt;Websites all about Python&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.learnpython.org/"&gt;Learn Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.pythontips.com/en/latest/index.html"&gt;Python Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testdriven.io/guides/complete-python/"&gt;Test Driven&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-web-frameworks"&gt;
  &lt;/a&gt;
  4. Web frameworks.
&lt;/h2&gt;

&lt;p&gt;Some of the best Python web frameworks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wsvincent/awesome-django"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/juanbenitezdev/django-rest-framework-crud"&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/F5mRW0jo-U4"&gt;Django tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/Z1RJmh_OqeA"&gt;Flask Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-books"&gt;
  &lt;/a&gt;
  5. Books
&lt;/h2&gt;

&lt;p&gt;For those who likes to read&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.packtpub.com/product/clean-code-in-python/9781788835831"&gt;Clean Code in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.oreilly.com/library/view/python-cookbook-3rd/9781449357337/"&gt;Python CookBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.packtpub.com/product/expert-python-programming-fourth-edition/9781801071109"&gt;Expert Python Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.feldroy.com/books/two-scoops-of-django-3-x"&gt;Two Scoops of Django 3.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-advanced-topics"&gt;
  &lt;/a&gt;
  6. Advanced topics.
&lt;/h2&gt;

&lt;p&gt;Some advanced topics, from metaclasses to machine learning&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/cKPlPJyQrt4"&gt;Be a Python Expert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/BRn6UCw35og"&gt;Python Advanced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/learn/machine-learning-with-python/"&gt;Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find helpful this list and can start your Python journey.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/juanbenitezdev"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/juanbenitezdev"&gt;GitHub&lt;/a&gt; to be up to date with all my projects and content.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding Docker in a visual way (in 🎥 video): part 5 – Registry</title>
      <author>Aurélie Vache</author>
      <pubDate>Mon, 03 Jan 2022 17:10:16 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-in-a-visual-way-in-video-part-5-registry-2397</link>
      <guid>https://dev.to/aurelievache/understanding-docker-in-a-visual-way-in-video-part-5-registry-2397</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker, then I've auto-published a book and since now I've started a new serie of video! :-)&lt;/p&gt;

&lt;p&gt;I imagined a serie of short videos with a mix of sketchnotes and speech.&lt;/p&gt;

&lt;p&gt;I think it could be a good way, more visual, with audio &amp;amp; video to explain Docker (and others technologies).&lt;/p&gt;

&lt;p&gt;The fourth episode is focused on another very important Docker object: Dangling images.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Fs_Yo4W8dw0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The video is in French BUT I done the subtitles in english (and french too).&lt;/p&gt;

&lt;p&gt;And the bonus of this article, here you can find all the sketchnotes and illustrations of the video:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5a0HaPuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzja0s68jtn7wl56p9fx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5a0HaPuT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzja0s68jtn7wl56p9fx.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1U2yr9GP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99qa25ivkkgrpxiw9ymz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1U2yr9GP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99qa25ivkkgrpxiw9ymz.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8muaESI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8wxmivdi44mh9g8248.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8muaESI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8wxmivdi44mh9g8248.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ClkkSpBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hraadv8q9rl6ejvpo2wp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClkkSpBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hraadv8q9rl6ejvpo2wp.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSHGn_DQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78n15bnwwtsrp56c2m79.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSHGn_DQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78n15bnwwtsrp56c2m79.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79Qkm-Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka7lydneq6sfyxij0mcc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79Qkm-Ez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka7lydneq6sfyxij0mcc.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmPf9t96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63nhsr302t9o5shtiie4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmPf9t96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/63nhsr302t9o5shtiie4.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---tv6p9_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80i5932dqtotzkkis6ac.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---tv6p9_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80i5932dqtotzkkis6ac.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5M9h0Lwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5ccc10gt7444we7oo7s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5M9h0Lwz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5ccc10gt7444we7oo7s.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mgbFTVZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j0nisbu1qilwpnp64w7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgbFTVZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j0nisbu1qilwpnp64w7.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cy-xdTzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrs932m3r5c8v470yeqi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cy-xdTzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrs932m3r5c8v470yeqi.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjaz12gS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vr8xmidyc84rg82s7pb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjaz12gS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vr8xmidyc84rg82s7pb.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MbEFUr6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jost6kjubfnd6fr4vz9d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MbEFUr6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jost6kjubfnd6fr4vz9d.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6HIaCaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvin709ojrnlkhfmf6cd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6HIaCaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvin709ojrnlkhfmf6cd.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9I50ei6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdj64b1y3irncm2s14lz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9I50ei6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdj64b1y3irncm2s14lz.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-J-7O-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si59wzxmyzlsswterr4o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-J-7O-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si59wzxmyzlsswterr4o.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b5GJdBH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm23beleugs5xhx0z784.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5GJdBH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm23beleugs5xhx0z784.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4raYHYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q90edleip4zc0maxi07l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4raYHYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q90edleip4zc0maxi07l.jpg" alt="Image description" width="880" height="1139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you liked the video and are interested to watch another ones, please give me some feedbacks (and you can also subscribe to &lt;a href="https://www.youtube.com/c/AurelieVache"&gt;my Youtube channel&lt;/a&gt;, if you want to ❤️).&lt;/p&gt;

&lt;p&gt;I can also give you, in an article, the full english transcript and sketchnotes in high quality, about this video, if you are interested.&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Docker (and new ones!) to make a "book" of 120 pages: &lt;a href="https://aurelievache.gumroad.com/l/understanding-docker-visual-way"&gt;"Understanding Docker in a visual way"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like theses sketchnotes, you can follow me, I will publish others sketchs shortly :-).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>containers</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#01)</title>
      <author>martin krause</author>
      <pubDate>Mon, 03 Jan 2022 16:55:36 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-01-29bi</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-01-29bi</guid>
      <description>&lt;p&gt;A curated list of the top five web development must-reads from last week. Don't miss out on the latest web development stories and insights. Read all about the cutting edge in web development, working in tech and the new tools and frameworks while learning a few new tricks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-accessibility-tree-in-chrome-devtools"&gt;
  &lt;/a&gt;
  Full accessibility tree in Chrome DevTools
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Chrome DevTools is launching a full accessibility tree making it easier for developers to get an overview of the whole tree. In this post find out how this tree is created and how to use it in your work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/blog/full-accessibility-tree/"&gt;https://developer.chrome.com/blog/full-accessibility-tree/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#add-a-service-worker-to-your-site"&gt;
  &lt;/a&gt;
  Add a Service Worker to Your Site
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the best things you can do for your website in 2022 is add a service worker, if you don’t have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/add-a-service-worker-to-your-site/"&gt;https://css-tricks.com/add-a-service-worker-to-your-site/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#responsive-css-border-radius-with-the-fab-four-technique"&gt;
  &lt;/a&gt;
  Responsive CSS border radius with the Fab Four technique
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You are probably already familiar with media-queries, which apply styling based on the browser viewport or the screen resolution, but sometimes we might need container-queries, which are still only available under feature flags for some browsers.&lt;br&gt;
Today we will implement the Fab Four technique to apply a border-radius to an element depending on its container dimension, rather than the screen width.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/responsive-css-border-radius-fab-four-technique/"&gt;https://blog.logrocket.com/responsive-css-border-radius-fab-four-technique/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-price-projects-and-manage-scope-creep"&gt;
  &lt;/a&gt;
  How To Price Projects And Manage Scope Creep
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Scoping, estimating, and running digital projects can often feel like an exercise in futility. In this article, Paul Boag explains why you need to start breaking your projects down into manageable phases and why that’s the best way to achieve significant benefits.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/12/how-price-projects-manage-scope-screep/"&gt;https://www.smashingmagazine.com/2021/12/how-price-projects-manage-scope-screep/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-not-my-burnout"&gt;
  &lt;/a&gt;
  That’s Not My Burnout
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If, like many folks during the pandemic, you’ve begun confusing burnout for achievement, Donna Bungard will show you how to recognize that you’re low on fuel and give you a map of rest stops where you can refill your tank.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://alistapart.com/article/thats-not-my-burnout/"&gt;https://alistapart.com/article/thats-not-my-burnout/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>A Brief Introduction to Hotwire</title>
      <author>Akshay Khot</author>
      <pubDate>Mon, 03 Jan 2022 16:53:38 +0000</pubDate>
      <link>https://dev.to/software_writer/a-brief-introduction-to-hotwire-5fja</link>
      <guid>https://dev.to/software_writer/a-brief-introduction-to-hotwire-5fja</guid>
      <description>&lt;p&gt;This post introduces &lt;a href="https://hotwired.dev/"&gt;Hotwire&lt;/a&gt;, the suite of front-end frameworks shipped with Rails 7. It starts with a brief overview of the existing approaches to building web applications, introduces Hotwire, and wraps up with a short description of the different sub-frameworks that make Hotwire. We'll also see how these frameworks fit together to provide a cohesive solution for the front-end ecosystem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traditional-web-architecture"&gt;
  &lt;/a&gt;
  Traditional Web Architecture
&lt;/h3&gt;

&lt;p&gt;To understand Hotwire, we first need to know how a typical request-response cycle works when a browser requests a web page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdMwrQqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6b0dpnuw924do8rmb71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdMwrQqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6b0dpnuw924do8rmb71.png" alt="original web architecture" width="767" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you go to a website in the browser or click a link on a page, it makes a GET request to the server, which sends an HTML response to the requesting browser. The browser then parses the HTML text and displays the web page.&lt;/p&gt;

&lt;p&gt;The advantage of this simple architecture is that most of the application logic stays on the back-end, where you're free to choose any language you like, including JavaScript. When you need some client-side interactivity, you use some JavaScript to get the job done. The page loads faster, as the browser only renders an HTML response without loading and parsing big JavaScript files.&lt;/p&gt;

&lt;p&gt;However, a disadvantage of traditional web applications is that the browser reloads the whole page when you click a link, throwing away the existing HTML. It also fetches the assets listed in the HTML, such as JavaScript, CSS, and images again.&lt;/p&gt;

&lt;p&gt;Now, these assets are cached on the browser most of the time, which makes this process relatively fast, but the basic idea remains the same. The browser has to parse and interpret the whole HTML again. So the web application doesn't get a native application-like feeling. It still feels like a website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-page-applications"&gt;
  &lt;/a&gt;
  Single Page Applications
&lt;/h3&gt;

&lt;p&gt;This was the original web architecture (that made the web popular and successful), and many web applications still work that way. However, a new category of web applications became popular in the last ten years, known as Single-Page Applications, or SPAs for short. These applications make heavy use of JavaScript, using frameworks like React, Vue, or Ember.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The original page that first loads contains all the JavaScript to make the application work, and it behaves like a desktop application. Hence these websites are called Single-Page Applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of fetching an HTML response from the server, these JavaScript frameworks ask for the JSON data, interpreting and rendering the JSON on the front-end. The browser doesn't have to reload the whole page; JavaScript does all the work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab3yV4re--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9zy7yukjzcs4d4gpp58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab3yV4re--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9zy7yukjzcs4d4gpp58.png" alt="Single-Page Applications" width="725" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An example is the &lt;a href="https://discuss.rubyonrails.org/"&gt;Rails forum&lt;/a&gt; powered by &lt;a href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;, a Single Page Application. When you click on a message on the forum, the browser doesn't reload the whole page, unlike a link on the MDN documentation &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML"&gt;page&lt;/a&gt;.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Single Page Applications get a lot of their speed and responsiveness from not constantly reloading the browser, tearing down the application process, only to reinitialize it on the very next page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages of SPAs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SPAs have a few disadvantages, such as when you first load the application, it is slow, as you have to load a big JavaScript bundle. To solve that, you have to compress and link together all JavaScript using a bundling tool like Webpack, which is not easy.&lt;/p&gt;

&lt;p&gt;Also, you might have to duplicate the view templates both on the front-end and back-end. Managing and sharing links also becomes tricky, as you are always on the same page. SPAs are also not very SEO - friendly. As Barry Adams explains in his &lt;a href="https://medium.com/@badams/another-very-late-response-youre-confusing-googlebot-the-crawler-with-caffeine-google-s-b9ef24d81524"&gt;post&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What happens when you use React without server-side rendering is that the crawler halts on the very first page because it can’t see any hyperlinks to follow. It sends the page to the indexer, which then has to render the page and extracts the hyperlinks, which will then be added to the crawler’s queue. Then the crawler will eventually crawl the next set of pages, and again will stop there because all the links are invisible until the JavaScript is rendered. So it has to wait for the indexer to come back with a new set of URLs to crawl. Etc.&lt;/p&gt;

&lt;p&gt;It makes the crawl process incredibly slow and inefficient.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my experience, most of these "modern" apps are fragile, poorly implemented, have terrible first-load times, don't work well with the browser's back and forward buttons, and cause a bad user experience.&lt;/p&gt;

&lt;p&gt;To be fair, Single Page Applications do try to address these concerns using various techniques, but that's a big topic in itself. Some SPAs are even a pleasure to use, especially if implemented well. A good example is &lt;a href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To be honest, many web applications just don't need the SPA technology, with big, honking JavaScript frameworks and specialized teams. They'd work just as well, if not better, using plain, boring, old web architecture. As Stefan Tilkov explains in his 2016 post &lt;a href="https://www.freecodecamp.org/news/why-i-hate-your-single-page-app-f08bb4ff9134/"&gt;Why I hate your Single Page App&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Maybe your single page app is different, but the ones that I know break most of my browser’s features, such as the back and forward buttons, page refresh, bookmarking, sending a link, or opening a link in a new window or tab. They offer no way to link to something that I look at. (Oh, I know there are exceptions to this rule, but they typically require effort — a lot more than many developers are prepared to invest). They are bloated and slow to load, even though the actual information they display and the interaction they offer is very simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After working with and using many poorly implemented SPAs, I couldn't agree more. I was so frustrated with the front-end and the onslaught of JavaScript frameworks over the past decade, I almost gave up on JavaScript and tried to stick to the back-end until I came across Hotwire.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-hotwire"&gt;
  &lt;/a&gt;
  Introducing Hotwire
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://hotwired.dev/"&gt;Hotwire&lt;/a&gt; stands for &lt;em&gt;HTML over the wire&lt;/em&gt;. It is a collection of techniques that tries to get the best of both worlds, keeping the original, simple web architecture of sending HTML over the wire, while not losing the performance benefits of Single Page Applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NWT699k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8kh07z5xu01ivgr25by.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NWT699k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8kh07z5xu01ivgr25by.png" alt="Hotwire" width="880" height="596"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now I've been playing with Hotwire for the past few days, and working on a Hotwire application is just fun. There's no complexity associated with setting up the framework like React or having to configure Webpack, which I never enjoyed. &lt;/p&gt;

&lt;p&gt;You write Ruby and as little JavaScript as possible, and your application just works. It's also much simpler and easier to reason about and understand the whole application instead of maintaining separate front-end and back-end teams.&lt;/p&gt;

&lt;p&gt;Hotwire is not a single framework; it's a suite of different frameworks. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Turbo&lt;/strong&gt; uses different techniques to reduce the amount of JavaScript most web applications have to write. This is the most important framework of Hotwire.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stimulus&lt;/strong&gt;, a JavaScript framework when you absolutely need to use JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Strada&lt;/strong&gt; (not yet released) works with native applications, making it easy to progressively level-up web interactions with native replacements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Turbo uses the following techniques to provide a SPA-like experience, while still keeping the simplicity of traditional web applications, i.e. sending HTML over the wire. We will learn about them in the following posts in this series.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Turbo Drive&lt;/strong&gt; accelerates links and form submissions. It listens for link clicks or form submissions, performs them in the background, and updates the page without a full reload.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Turbo Frames&lt;/strong&gt; divides pages into independent contexts called frames (not &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"&gt;iframe&lt;/a&gt;). Turbo captures link clicks and form submissions inside a frame, automatically updating the frame contents after receiving a response.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Turbo Streams&lt;/strong&gt; delivers page changes over WebSocket, SSE, or in response to form submissions using just HTML and a set of CRUD-like actions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If all these different frameworks and techniques are already sounding confusing, &lt;strong&gt;don't worry&lt;/strong&gt;. You won't be using all of them equally, all the time. Here's a diagram that might help you understand how it all fits together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDqVEDMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdgmp7x6pc087nhj9ucz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDqVEDMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdgmp7x6pc087nhj9ucz.png" alt="Hotwire stack" width="771" height="646"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turbo makes the majority of Hotwire.&lt;/strong&gt; When you need to work with some JavaScript, you use &lt;strong&gt;Stimulus&lt;/strong&gt;, and you only need &lt;strong&gt;Strada&lt;/strong&gt; when your application needs to have native apps on Android and iOS.&lt;/p&gt;

&lt;p&gt;Inside Turbo, &lt;strong&gt;Turbo Drive&lt;/strong&gt; will satisfy most of your needs of fast performance. When you need additional responsiveness, you use &lt;strong&gt;Turbo Frames&lt;/strong&gt;, and finally, a few cases where you need to bring your application alive, such as sending live updates from the server, you will use &lt;strong&gt;Turbo Streams&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will learn about all these techniques in future posts (as I learn them myself 😅 ). For now, I hope this brief introduction helped you get a big-picture overview of Hotwire and understand how different parts of it fit together to provide a cohesive solution for the front-end ecosystem. &lt;/p&gt;

&lt;p&gt;Let me know what you think in the comments. I look forward to your feedback. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>rails</category>
      <category>hotwire</category>
    </item>
    <item>
      <title>Testing Stubbed Functionality in Code</title>
      <author>bob.ts</author>
      <pubDate>Mon, 03 Jan 2022 16:48:56 +0000</pubDate>
      <link>https://dev.to/rfornal/testing-stubbed-functionality-in-code-15bj</link>
      <guid>https://dev.to/rfornal/testing-stubbed-functionality-in-code-15bj</guid>
      <description>&lt;p&gt;One of the first things I do when writing Unit Tests is to stub out &lt;code&gt;console.debug&lt;/code&gt; and &lt;code&gt;console.log&lt;/code&gt;. I do this on the off chance that I leave one in the code. This way, there aren't extraneous console's showing in the terminal when the tests are run.&lt;/p&gt;

&lt;p&gt;Don't get me wrong. I do not do this to be lazy. I take good care of my code and generally do not leave &lt;code&gt;console.log&lt;/code&gt; all over the place. I use this code to keep things clean in the display, pure and simple.&lt;/p&gt;

&lt;p&gt;Pure and simple that is until I realized that I had a new case for a slightly improved form of my stubbed-code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#original-code"&gt;
  &lt;/a&gt;
  Original Code
&lt;/h2&gt;

&lt;p&gt;Here is the original code in the &lt;code&gt;helper.ts&lt;/code&gt; file ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see there is nothing more done here than stubbing out the two console options.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;karma.conf.js&lt;/code&gt;, this is included ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/app/shared/_spec-tools/helper.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#handling-code"&gt;
  &lt;/a&gt;
  Handling Code
&lt;/h2&gt;

&lt;p&gt;I mentioned in the title, handling console while testing and the code below is a simple endpoint for code I intend to write as this function gets fully fleshed out (it's a stub, conceptually ... not a Unit Test sub). I am generating the visuals that will eventually be used, but there is no backend to connect to at this point in time.&lt;/p&gt;

&lt;p&gt;I am using &lt;code&gt;console.log&lt;/code&gt; in this case to ensure I understand the values passed in and available that I intend to use some time in the future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleFunctionality&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the same time ...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I don't want this code displaying a &lt;code&gt;console.log&lt;/code&gt; every time tests are run.&lt;/li&gt;
&lt;li&gt;I do want a Unit Test against this function so that when I do change the code, this test will fail "spectacularly" as Test Driven Development says it should.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#improved-code"&gt;
  &lt;/a&gt;
  Improved Code
&lt;/h2&gt;

&lt;p&gt;So, here's the code that ensures the stubs are in place AND calls are reset after each test is run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;consoleDebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;consoleLog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;consoleDebug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;consoleDebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;consoleLog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;consoleLog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;afterEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;consoleDebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;consoleLog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;I've always blocked &lt;code&gt;console.log&lt;/code&gt; when my Unit Tests run.&lt;/li&gt;
&lt;li&gt;This scenario showed me that the Unit Tests can be used to ensure the "stubbed" code will break the tests when the real functionality gets put in place.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>testing</category>
      <category>frontend</category>
      <category>typescript</category>
      <category>angular</category>
    </item>
    <item>
      <title>DevObserver - App You Should Have!</title>
      <author>Eduard Pochtar 👨‍💻</author>
      <pubDate>Mon, 03 Jan 2022 16:05:59 +0000</pubDate>
      <link>https://dev.to/iamfrntdv/devobserver-app-you-should-have-this-app-3df0</link>
      <guid>https://dev.to/iamfrntdv/devobserver-app-you-should-have-this-app-3df0</guid>
      <description>&lt;p&gt;DevObserver is the app I was working on for a while and finally it has been released on the AppStore. &lt;/p&gt;

&lt;p&gt;DevObserver is a mobile app for developers where anyone can stay tuned with the latest news, articles, tutorial, etc. Currently it's available on the iPhone, but iPad and Android version are also coming.&lt;/p&gt;

&lt;p&gt;I also plan to share my experience of developing mobile app and it's backend. So a lot of interesting is yet to come.&lt;/p&gt;

&lt;p&gt;Download it today, it's free! &lt;a href="https://apps.apple.com/us/app/devobserver/id1575198748"&gt;AppStore&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;P.S. enjoy!&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Dkb7RYxAy9s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>ios</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Create React App | Day 4</title>
      <author>Web.Developer.io</author>
      <pubDate>Mon, 03 Jan 2022 15:53:14 +0000</pubDate>
      <link>https://dev.to/developerioweb/create-react-app-day-4-2ldh</link>
      <guid>https://dev.to/developerioweb/create-react-app-day-4-2ldh</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Create React App(CRA)&lt;/strong&gt; is a command line tool which setups the React Application for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fElsdu7y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nefedg63zem2sqg7fzuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fElsdu7y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nefedg63zem2sqg7fzuk.png" alt="Create React App" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h3&gt;

&lt;p&gt;Starting new React Project is Complicated u have to include a lot of files to be able to write code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create React App&lt;/strong&gt; simplify it using 1 line of code , it setup the React Application for us.&lt;/p&gt;

&lt;p&gt;It will automatically download all the files and all the dependencies. &lt;strong&gt;Like Babel and &lt;code&gt;Webpack&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Webpack 🤔 ?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It is a Module bundler.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It will take all your files (JavaScript , CSS etc) and combine them into Single JavaScript file and Single CSS File.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;When all the files are combined it is easier for the user to download the website faster.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also React uses some new Features of the JavaScript which are in-compatible to the Browser so &lt;strong&gt;webpack&lt;/strong&gt; convert it in that browser understand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like&lt;/strong&gt; JSX code into plain JavaScript and &lt;strong&gt;Import Syntax&lt;/strong&gt; into what browser understand*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;To set up the React Application u first have to install the node.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/download/"&gt;Download | Node.js&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this A new browser window will pop up with your newly created React App! If not, open your browser and type &lt;code&gt;localhost:3000&lt;/code&gt; in the address bar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skeleton"&gt;
  &lt;/a&gt;
  Skeleton
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ptJ4aYNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndqf5o63nua82n0p6w6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ptJ4aYNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndqf5o63nua82n0p6w6c.png" alt="React" width="736" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Generally we only make changes in the &lt;code&gt;src folder&lt;/code&gt; (in this we define all our Component) rest we leave as it is.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pTWEmadU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2hhewnhttgga4phmdi4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTWEmadU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2hhewnhttgga4phmdi4.png" alt="Modules" width="880" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ES &lt;strong&gt;Modules have 2 types of statements → Export and Import&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Export&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;we can export a function or a variable from a file.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There are 2 types of Exports → named and Default.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let’s Suppose we have 2 files in &lt;code&gt;src folder&lt;/code&gt; , &lt;code&gt;index.js&lt;/code&gt; and &lt;code&gt;helpers.js&lt;/code&gt; and we want to export from helpers.js and import to index.js.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Helpers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;How can I Help you?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;                                          &lt;span class="c1"&gt;//**We have this Function to export**&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="c1"&gt;//This means that when this file is exported this is the main thing that has to exported.&lt;/span&gt;

&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./helpers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;       &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="c1"&gt;//U can import it by any name if u are using the Default&lt;/span&gt;
                                  &lt;span class="nx"&gt;Export&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Named Export&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;How can I Help you?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;                                         

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Sing&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sing a Song&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;                               &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="c1"&gt;// We have these Function to Export.&lt;/span&gt;

&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Sing&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./helpers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;//**We have used named Export so we have &lt;/span&gt;
                                              &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;specify&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Sing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Mixed (default + named both at one time)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Helper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;How can I Help you?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;                                         

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Sing&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sing a Song&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Let"s play a Game&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Sing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  

&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Sing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Play&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./helpers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="c1"&gt;// Deafult we don't have to include in the curly braces and named we have to include in the curly braces**&lt;/span&gt;
&lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Sing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;Play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/modules-export-and-import-o5vot"&gt;Try this on Codesandbox 👆&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kElAGTqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0darn3c85x9dj770aypt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kElAGTqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0darn3c85x9dj770aypt.png" alt="Default or not" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-conventions-%E2%86%92"&gt;
  &lt;/a&gt;
  Some Conventions →
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfgd_ZcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0wgk4lrq4xz6c9i2ijs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfgd_ZcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0wgk4lrq4xz6c9i2ijs.png" alt="Styling" width="880" height="476"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;Like&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;//So now we don't have to write like React.Component&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Components&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//This will also work.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Including CSS file in the js file&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0Bzj-0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvek55smldws2pt5qbyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0Bzj-0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvek55smldws2pt5qbyl.png" alt="CSS" width="880" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;If u have a CSS file named &lt;code&gt;House.css&lt;/code&gt; u can import in the House.js file like this&lt;/strong&gt; 👇
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./House.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;including image in the Js file&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---k1NBUHq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wao4cskf2ql0wyf7xbkb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---k1NBUHq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wao4cskf2ql0wyf7xbkb.png" alt="Image" width="880" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!☺️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>react</category>
    </item>
  </channel>
</rss>
