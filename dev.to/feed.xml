<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>just like and unicorn</title>
      <author>Coder rudra</author>
      <pubDate>Wed, 29 Sep 2021 14:24:28 +0000</pubDate>
      <link>https://dev.to/coderrudra/just-like-and-unicorn-3pcm</link>
      <guid>https://dev.to/coderrudra/just-like-and-unicorn-3pcm</guid>
      <description>&lt;p&gt;LIKE AND UNICORN THIS POST NOW&lt;/p&gt;

&lt;p&gt;(also pls follow me)&lt;/p&gt;

</description>
      <category>unicorn</category>
    </item>
    <item>
      <title>How To Write Integration Tests Easily Using Trace-Based Testing</title>
      <author>Tom Zach</author>
      <pubDate>Wed, 29 Sep 2021 14:19:29 +0000</pubDate>
      <link>https://dev.to/aspecto/how-to-write-integration-tests-easily-using-trace-based-testing-3lm2</link>
      <guid>https://dev.to/aspecto/how-to-write-integration-tests-easily-using-trace-based-testing-3lm2</guid>
      <description>&lt;p&gt;This article is part of the &lt;strong&gt;&lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;Aspecto&lt;/a&gt; Hello World series&lt;/strong&gt;, where we tackle microservices-related topics for you. Our team searches the web for common issues, then we solve them ourselves and bring you complete how-to guides. Aspecto is an OpenTelemetry-based distributed tracing platform for developers and teams of distributed applications.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Integration tests are never fun to write.&lt;/p&gt;

&lt;p&gt;Setting up an environment, finding a way to reproduce the needed state of it, populating it with relevant data, etc – It’s all work no play.&lt;/p&gt;

&lt;p&gt;In this blog post, I will show you how to write an integration test and talk about why you want to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-motivation-for-writing-an-integration-test"&gt;
  &lt;/a&gt;
  The motivation for writing an integration test
&lt;/h2&gt;

&lt;p&gt;Let’s begin by talking about why we even want to write one.&lt;/p&gt;

&lt;p&gt;So you finished writing all of the code of your task and everything is working.&lt;/p&gt;

&lt;p&gt;How do you make sure it stays this way and does not break when another developer changes just one tiny thing that happens to break your feature? (Not on purpose of course, or so we hope).&lt;/p&gt;

&lt;p&gt;The solution: Instead of moving onto the next feature right away, you can write an integration test to make sure that your team gets notified if something breaks (by running it in a CI/CD pipeline that alerts you). &lt;/p&gt;

&lt;p&gt;The role of the integration test is to verify that not only does each function you wrote works as a standalone (that’s unit tests), but also to verify that all of the functions play out well together.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Spoiler alert: in this guide, I will also show you how to make sure that a database received the relevant params.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What we will build:&lt;/p&gt;

&lt;p&gt;I like to keep everything as simple as possible, giving you only what you need to get on with your day.&lt;/p&gt;

&lt;p&gt;Therefore, I will build a simple to-do app: a nodejs express service that authenticates the user, with endpoints for creating &amp;amp; viewing his tasks.&lt;/p&gt;

&lt;p&gt;The integration test will verify the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login&lt;/li&gt;
&lt;li&gt;Create a new TODO item&lt;/li&gt;
&lt;li&gt;Verify the todo item was saved with the relevant email &amp;amp; todo text was saved to the database&lt;/li&gt;
&lt;li&gt;Fetch all todo items&lt;/li&gt;
&lt;li&gt;Verify that the relevant email was used to query the database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The tools I will be using:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NodeJS + Express&lt;/li&gt;
&lt;li&gt;Jest – a framework for authoring and executing nodejs tests&lt;/li&gt;
&lt;li&gt;Malabi – a Trace-Based Testing library that lets me make assertions on real data passed to moving parts like mongodb / elasticsearch and more (I will further elaborate on this below).&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#part-1-setting-up-the-tested-microservice"&gt;
  &lt;/a&gt;
  Part 1 – Setting up the tested microservice
&lt;/h1&gt;

&lt;p&gt;Note: If you already have a service you wish to test, feel free to skip to part 2 where I show how to write the actual integration test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-set-up-the-project"&gt;
  &lt;/a&gt;
  Step 1 – Set up the project
&lt;/h2&gt;

&lt;p&gt;Let’s use express-generator to generate the initial code for our express app, with the pug view engine.&lt;/p&gt;

&lt;p&gt;Also, let’s install the packages we will be using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator -v pug
npm i --save jsonwebtoken mongoose passport passport-jwt axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be storing the data in a MongoDB database, which you can run locally using docker like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull mongo
docker run -d -p 27017:27017 mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-create-the-views"&gt;
  &lt;/a&gt;
  Step 2 – create the views
&lt;/h2&gt;

&lt;p&gt;We’ll add a very simple UI for our imaginary users to add TODO items.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;login.pug&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extends layout

block content
 body
   form(action='/auth/login?redirectToTodos=true', method='POST')
     p
       | username:
       input(type='text', name='username', value='tom@a.com')
       |          &amp;lt;br/&amp;gt;password:
       input(type='password', name='password', value='password')
     input(type='submit', value='Submit')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;app.pug&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extends layout

block content
   p Welcome to the app screen &amp;lt;b&amp;gt;#{user}&amp;lt;/b&amp;gt;
   form(action='/todos/', method='POST')
       p
           | new todo text:
           input(type='text', name='username', value='hi')
       input(type='submit', value='Submit')
   ul
     each val in todos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-adding-routes"&gt;
  &lt;/a&gt;
  Step 3 – Adding routes
&lt;/h2&gt;

&lt;p&gt;In the routes folder, let’s delete the users’ file, we won’t be using it.&lt;/p&gt;

&lt;p&gt;Now place the following code in the index.js file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const var express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const TOKEN_SECRET = 'SECRET';

router.get('/login', function(req, res, next) {
 res.render('login', { title: 'Express' });
});

router.post('/auth/login', function(req, res, next) {
 const email = req.body.username;
 const token = jwt.sign({ email }, TOKEN_SECRET, {
   expiresIn: 60 * 60,
 });
 res.cookie('auth', token, { httpOnly: true });
 req.query.redirectToTodos ? res.redirect('/todos') : res.json({ success: true });
});


module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have two endpoints – one for rendering the login view for our users, and the other one for performing the login with a username &amp;amp; password. We’re not verifying passwords here, as authentication is not the focus of the blog.&lt;/p&gt;

&lt;p&gt;The way it works in general: login, sign a JWT token with email, send to client with the response.&lt;/p&gt;

&lt;p&gt;I added a small modification here – redirectToTodos param, to avoid writing client-side code.&lt;/p&gt;

&lt;p&gt;In real life, I would not add it and have the client handle the JSON response. For the purpose of this post, it’s good enough.&lt;/p&gt;

&lt;p&gt;Let’s add another routes file called todos.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const router = express.Router();
const passport = require('passport');
const mongoose = require('mongoose');

async function connectToMongoose() {
 await mongoose.connect('mongodb://localhost:27017/test');
}

connectToMongoose().catch(err =&amp;gt; console.log(err));

const todoSchema = new mongoose.Schema({
 text: String,
 email: String
});

const Todo = mongoose.model('Todo', todoSchema);

router.get('/',
 (req, res, next) =&amp;gt; {
   passport.authenticate('jwt', { session: false },  async (err, user, info) =&amp;gt; {
     if (err) {
       console.log('error is', err);
       res.status(500).send('An error has occurred, we cannot greet you at the moment.');
     }
     else {
       console.log('user is', user);
       console.log('info is', info);
       const { email } = user;
       const todos = await Todo.find({ email });

       res.render('app',{ success: true, user: email, todos });
     }
   })(req, res, next);
 });

router.post('/',
 (req, res, next) =&amp;gt; {
   passport.authenticate('jwt', { session: false },  async (err, user, info) =&amp;gt; {
     if (err) {
       console.log('error is', err);
       res.status(500).send('An error has occurred, we cannot greet you at the moment.');
     }
     else {
       console.log('user is', user);
       console.log('info is', info);
       const todo = new Todo({ text: 'Hey that is my new todo', email: user.email });
       await todo.save();
       res.json({ success: true });
     }
   })(req, res, next);
 });


module.exports = router;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file I define the mongoose Todo model and add two endpoints: GET for retrieving all todos for the current user, and POST for creating one.&lt;/p&gt;

&lt;p&gt;I use the passport-jwt strategy to decode the user’s email (which is sent with the request as a cookie)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-adding-appjs"&gt;
  &lt;/a&gt;
  Step 4 – Adding app.js
&lt;/h2&gt;

&lt;p&gt;The app.js file contains different setups for authentication &amp;amp; routing. I won’t dive into this deeply. If you’re curious feel free to &lt;a href="https://www.aspecto.io/blog/microservices-authentication-strategies-theory-to-practice/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;check out my guide to microservices authentication strategies&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var todoRouter = require('./routes/todos');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

const passport = require('passport');
const JwtStrategy = require('passport-jwt').Strategy,
 ExtractJwt = require('passport-jwt').ExtractJwt;

app.use(passport.initialize());
app.use(passport.session());

app.use('/', indexRouter);
app.use('/todos', todoRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
 next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
 // set locals, only providing error in development
 res.locals.message = err.message;
 res.locals.error = req.app.get('env') === 'development' ? err : {};

 // render the error page
 res.status(err.status || 500);
 res.render('error');
});

const cookieExtractor = function(req) {
 let token = null;
 if (req &amp;amp;&amp;amp; req.cookies)
 {
   token = req.cookies['auth'];
 }
 return token;
};

const TOKEN_SECRET = 'SECRET';

const opts = {
 jwtFromRequest: ExtractJwt.fromExtractors([cookieExtractor]),
 secretOrKey: TOKEN_SECRET,
};

passport.use(
 'jwt',
 new JwtStrategy(opts, (jwt_payload, done) =&amp;gt; {
   try {
     console.log('jwt_payload', jwt_payload);
     done(null, jwt_payload);
   } catch (err) {
     done(err);
   }
 }),
);

module.exports = app;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-5-running-the-app"&gt;
  &lt;/a&gt;
  Step 5 – Running the app
&lt;/h1&gt;

&lt;p&gt;Now you can simply run the app using and go to localhost:3000/login, login and submit the form to create a todo item and see that it is working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#part-2-writing-an-integration-test"&gt;
  &lt;/a&gt;
  Part 2: Writing an integration test
&lt;/h1&gt;

&lt;p&gt;In this part, we will be using jest &amp;amp; Malabi to write our integration test.&lt;/p&gt;

&lt;p&gt;Jest is a library that lets you author and execute tests for nodejs. &lt;/p&gt;

&lt;p&gt;As for Malabi – an explanation follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aspecto-io/malabi?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;Malabi&lt;/a&gt; is an open-source Javascript framework based on OpenTelemetry that allows you to leverage trace data and improve assertion capabilities. This library introduces a new way of testing services: Trace-based testing (TBT).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;Here’s a quick tutorial on Malabi and how it works:&lt;/em&gt;&lt;/em&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UWtnqGA6E44"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trace-based-testing"&gt;
  &lt;/a&gt;
  Trace based testing
&lt;/h2&gt;

&lt;p&gt;So what is Trace Based Testing anyway? Good thing you ask.&lt;/p&gt;

&lt;p&gt;It is a new approach that utilizes &lt;a href="http://opentelemtry.io/"&gt;OpenTelemetry&lt;/a&gt; to our advantage in testing.&lt;/p&gt;

&lt;p&gt;Opentelemetry gives us SDKs that let us instrument our application, meaning to create data of what calls are being made to endpoints, databases and essentially is aimed at giving us visibility on our microservices.&lt;/p&gt;

&lt;p&gt;You can read more about Malabi and Trace-based testing in &lt;a href="https://www.aspecto.io/blog/trace-based-testing-with-opentelemetry-meet-open-source-malabi/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;this blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By instrumenting our tested microservice, we’re able to make assertions on what API calls were made, with what parameters. &lt;/p&gt;

&lt;p&gt;We can also assert how a database was queried – in our case, which exact parameter did Mongo receive when it was asked for all todos by the current user. We want to assert the current user and know we don’t have a bug causing us to log in with one user but query another user’s data. &lt;/p&gt;

&lt;p&gt;Malabi wraps the opentelemetry SDK, creates spans (actions performed in the service), and exposes an HTTP endpoint for you to query &amp;amp; assert on.&lt;/p&gt;

&lt;p&gt;Enough theory for now – Let’s begin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-perform-installs"&gt;
  &lt;/a&gt;
  Step 1 – perform installs
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev jest malabi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following lines at the top of our app.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const malabi = require('malabi');
malabi.instrument();
malabi.serveMalabiFromHttpApp(18393);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Malabi to create spans for us (actions we can assert on, for example – a MongoDB query and an HTTP request are 2 examples of possible spans).&lt;/p&gt;

&lt;p&gt;It also tells malabi to expose an API endpoint at port 18393 that lets the test runner get these spans and then assert on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-a-new-folder-amp-test-file-testsintegspecjs"&gt;
  &lt;/a&gt;
  Step 2- add a new folder &amp;amp; test file: tests/integ.spec.js
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const axios = require('axios').default;
const { fetchRemoteTelemetry, clearRemoteTelemetry } = require('malabi');
const getMalabiTelemetryRepository = async () =&amp;gt; await fetchRemoteTelemetry({ portOrBaseUrl: 18393 });

describe('testing service-under-test remotely', () =&amp;gt; {
 beforeEach(async () =&amp;gt; {
   // We must reset all collected spans between tests to make sure span aren't leaking between tests.
   await clearRemoteTelemetry({ portOrBaseUrl: 18393 });
 });

 it('successful /todo request', async () =&amp;gt; {
   // simulate login
   const loginRes = await axios.post(`http://localhost:3000/auth/login`, { username: 'tom@a.com', password: 'password' });
   const authCookie = loginRes.headers['set-cookie'];

   // Create a new todo item
   const newTodoRes = await axios.post(`http://localhost:3000/todos`, {}, { headers: {
       Cookie: authCookie
   } });
   // console.log('newTodoRes', newTodoRes);

   // call to the service under test - internally it will call another API to fetch the todo items.
   await axios(`http://localhost:3000/todos/`, { headers: {
       Cookie: authCookie
   } });

   // Get instrumented spans
   const repo = await getMalabiTelemetryRepository({ portOrBaseUrl: 13893 });

   // This is the span that holds data from the creation of the new todo item
   const postTodoSpan = repo.spans.mongo().first;
   const emailUsedForCreatingNewTodo = JSON.parse(postTodoSpan.dbStatement).document.email;
   console.log('emailUsedForCreatingNewTodo', emailUsedForCreatingNewTodo);
   // Assert the email was saved equals the email we logged in with
   expect(emailUsedForCreatingNewTodo).toEqual("tom@a.com")

   // This is the span that holds data from the fetching of todos from mongo for current user
   const getTodosSpan = repo.spans.mongo().second;
   const emailUsedInMongoQuery = JSON.parse(getTodosSpan.dbStatement).condition.email;

   // Assert the email was used for querying equals the email we logged in with
   expect(emailUsedInMongoQuery).toEqual("tom@a.com")
 });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few things to note about the above file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getMalabiTelemetryRepository&lt;/code&gt; – fetches spans created in the current run, from the malabi endpoint.&lt;/p&gt;

&lt;p&gt;We can then use the received object to query for specific span types, like all Mongo spans, all http requests, etc.&lt;/p&gt;

&lt;p&gt;We also have clearRemoteTelemetry that cleans up the in-memory cache of spans between test runs. This helps maintain our test clean &amp;amp; not polluted between test runs.&lt;/p&gt;

&lt;p&gt;Notice we have made 2 assertions: one that the post request saved the todo item with the relevant email (the one we logged in with), and the second one verifies that we fetched only todos that belong to that user.&lt;/p&gt;

&lt;p&gt;You can now run the test using the “jest” command, and see that everything is working as expected.&lt;/p&gt;

&lt;p&gt;As you can see, this is a very simple and clean way we can make sure the connections between our different functions and moving parts are working as expected.&lt;/p&gt;

&lt;p&gt;Of course, in production, you would most likely set this up as part of a CI/CD workflow, but this is not the focus of this guide.&lt;/p&gt;

&lt;p&gt;That’s basically it, I hope this guide was useful for you, feel free to reach out to me &lt;a href="https://twitter.com/magnificoder"&gt;@magnificoder&lt;/a&gt; for any questions you may have!&lt;/p&gt;




&lt;p&gt;Feel free to check out some of my other articles, like this one: &lt;a href="https://www.aspecto.io/blog/how-to-deploy-jaeger-on-aws-a-comprehensive-step-by-step-guide/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=write-integration-tests-trace-based-testing"&gt;How to Deploy Jaeger on AWS: a Comprehensive Step-by-Step Guide&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>microservices</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>State of Solid - September 2021</title>
      <author>Ryan Carniato</author>
      <pubDate>Wed, 29 Sep 2021 14:10:05 +0000</pubDate>
      <link>https://dev.to/ryansolid/state-of-solid-september-2021-4mi2</link>
      <guid>https://dev.to/ryansolid/state-of-solid-september-2021-4mi2</guid>
      <description>&lt;p&gt;A lot of exciting things have been going in the Solid in the last few months since the 1.0 release.&lt;/p&gt;

&lt;p&gt;Let's start with some big news.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#netlify-joins-up-as-an-official-deployment-partner"&gt;
  &lt;/a&gt;
  Netlify joins up as an Official Deployment Partner
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WSxcnxhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w00wmhamyf0r5ek6b901.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSxcnxhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w00wmhamyf0r5ek6b901.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are super excited to announce that Netlify has come on board as a Deployment partner and sponsor for the project. They will be contributing &lt;a href="https://opencollective.com/solid"&gt;$500 a month&lt;/a&gt; towards the development and growth of Solid.&lt;/p&gt;

&lt;p&gt;We will be adding the &lt;a href="https://www.netlify.com/blog/2016/11/29/introducing-the-deploy-to-netlify-button/"&gt;Deploy with Netlify&lt;/a&gt; to our official &lt;a href="https://github.com/solidjs/templates"&gt;starter templates&lt;/a&gt; to make it easier than ever to deploy Solid applications.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-release-and-response"&gt;
  &lt;/a&gt;
  1.0 Release and Response
&lt;/h2&gt;

&lt;p&gt;We've had an incredible response to the 1.0 release. It is great to see years of work come to fruition. See what some of the voices in the industry have been saying about Solid:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPA7btCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/754886061872979968/BzaOWhs1_normal.jpg" alt="🧁🍨 Mark Dalgleish profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        🧁🍨 Mark Dalgleish
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/markdalgleish"&gt;@markdalgleish&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Wow, I didn't expect this—a React alternative that actually looks convincing to me.&lt;br&gt;&lt;br&gt;Also, looks like vanilla-extract would be a perfect fit with this.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/JeusgXwojH"&gt;solidjs.com&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:50 AM - 29 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409811453696118786" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409811453696118786" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409811453696118786" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkIzey0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/619677584805208064/RwwbnNpi_normal.jpg" alt="David K. 🎹 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        David K. 🎹
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/davidkpiano"&gt;@davidkpiano&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Solid has the reactivity that React should have had, and the impressive performance benefits that come with it. This is going to be a framework well worth exploring.&lt;br&gt;&lt;br&gt;(Also, XState example in the release! 💯) &lt;a href="https://t.co/yOn2c5sHbD"&gt;twitter.com/solid_js/statu…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:19 PM - 28 Jun 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            SolidJS
          &lt;/span&gt;
          @solid_js
        &lt;/div&gt;
        🚀 We are so happy to announce Solid is 1.0!! 🎉 

@RyanCarniato #DEVCommunity #solidjs #javascript #webdev https://t.co/CkK9UoWZOJ
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409592349370560513" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409592349370560513" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409592349370560513" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--N4NYLqAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1192174732189339649/NYGFeR-K_normal.jpg" alt="Michel Weststrate profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Michel Weststrate
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @mweststrate
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Not a revolution, but really solid (pun) evolution; clean component model, really efficient run-time model, deeply embedded reactivity. Definitely think it's worth giving it a shot in fresh new, limited scope projects! &lt;a href="https://t.co/iOiE30T2fz"&gt;twitter.com/solid_js/statu…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:47 PM - 28 Jun 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            SolidJS
          &lt;/span&gt;
          @solid_js
        &lt;/div&gt;
        🚀 We are so happy to announce Solid is 1.0!! 🎉 

@RyanCarniato #DEVCommunity #solidjs #javascript #webdev https://t.co/CkK9UoWZOJ
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409599364838920200" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409599364838920200" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409599364838920200" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JD7T770--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1284159487453081601/P0IRO1B9_normal.jpg" alt="Dominic Gannaway profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dominic Gannaway
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @trueadm
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      After reading through the source of SolidJS and understanding some of the design constraints, I'm really excited about its future. You can see lots of inspiration taken from other libraries, and lots of innovation too.&lt;br&gt;&lt;br&gt;I recommend checking it out too: &lt;a href="https://t.co/xZhTrMBMP3"&gt;github.com/solidjs/solid&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:25 PM - 10 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1413972672342528017" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1413972672342528017" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1413972672342528017" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--47T0nuZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8YtWoJVoBkgRx0.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--MHwNG1SN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1272979356529221632/sxvncugt_normal.jpg" alt="fks profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        fks
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/fredkschott"&gt;@fredkschott&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm not sure I fully appreciated how fast &lt;a href="https://twitter.com/solid_js"&gt;@solid_js&lt;/a&gt; is until I checked out this benchmark. Awesome job &lt;a href="https://twitter.com/RyanCarniato"&gt;@RyanCarniato&lt;/a&gt; and team.&lt;br&gt;&lt;a href="https://t.co/4Lgubv4doi"&gt;krausest.github.io/js-framework-b…&lt;/a&gt;&lt;br&gt;&lt;br&gt;raw javascript &amp;gt; solid &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; svelte &amp;gt; preact &amp;amp; vue &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; react 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:33 PM - 09 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1424876545823318020" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1424876545823318020" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1424876545823318020" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#expanding-the-team"&gt;
  &lt;/a&gt;
  Expanding the Team
&lt;/h2&gt;

&lt;p&gt;I started this project and ran it on my own for many years but it had definitely grown beyond me. We've been expanding the team. Since I've never formally introduced the rest of the team I will take the opportunity now:&lt;/p&gt;

&lt;p&gt;David Di Biase - Web Site/Community Manager&lt;/p&gt;

&lt;p&gt;Alexandre Mouton Brady - Templates/Integrations&lt;/p&gt;

&lt;p&gt;Milo M. - Tooling&lt;/p&gt;

&lt;p&gt;Ryan Turnquist - Router/Libraries&lt;/p&gt;

&lt;p&gt;Dan Jutan - Documentation/Training&lt;/p&gt;

&lt;p&gt;There are also a small group of contributors making some great adds to Solid's ecosystem. You can see &lt;a href="https://www.solidjs.com/contributors"&gt;bios here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#growing-ecosystem"&gt;
  &lt;/a&gt;
  Growing Ecosystem
&lt;/h2&gt;

&lt;p&gt;Every day it seems like new libraries are coming out that showcase what you can do with Solid. So I thought I'd highlight a few of them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davedbase/solid-primitives"&gt;Solid Primitives&lt;/a&gt; - Our "React Use". A set of high-quality reusable primitives.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/otonashixav/solid-flip"&gt;Solid Flip&lt;/a&gt; - A new animation library that makes it easier than ever to do flip animations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thisbeyond/solid-dnd"&gt;Solid DND&lt;/a&gt; - Drag and drop port of dnd-kit made to leverage Solid's fine-grained reactivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pablo-abc/felte/blob/main/packages/solid/README.md"&gt;@felte/solid&lt;/a&gt; - A port of the Felte form library for Svelte available in Solid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Acidic9/solid-urql"&gt;Solid URQL&lt;/a&gt; - A URQL wrapper to make using GraphQL in Solid easier than ever.&lt;/p&gt;

&lt;p&gt;While not complete, there are several Component libraries currently being worked on:&lt;br&gt;
&lt;a href="https://github.com/LXSMNSYC/solid-headless"&gt;Solid Headless&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/atk/solid-blocks"&gt;Solid Blocks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And recently with the question of DSL a few projects have been attempting to bring Svelte-like syntax into Solid:&lt;br&gt;
&lt;a href="https://github.com/LXSMNSYC/babel-plugin-solid-labels"&gt;Babel Plugin Solid Labels&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/orenelbaum/babel-plugin-solid-undestructure"&gt;Babel Plugin Undestructure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interested in seeing more. Check out the &lt;a href="https://www.solidjs.com/resources"&gt;Resources section&lt;/a&gt; of the website or the community-driven &lt;a href="https://github.com/one-aalam/awesome-solid-js"&gt;Awesome Solid&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#translations"&gt;
  &lt;/a&gt;
  Translations
&lt;/h2&gt;

&lt;p&gt;We could have never anticipated the interest in translations right out the gate but so much great work being done by contributors. We now have documentation on &lt;a href="https://solidjs.com"&gt;solidjs.com&lt;/a&gt; available in 10 languages.&lt;/p&gt;

&lt;p&gt;The full tutorials are being translated as well and are currently available in English, Japanese, and Chinese.&lt;/p&gt;

&lt;p&gt;Thanks so much to:&lt;br&gt;
Gaving Cong 🇨🇳&lt;br&gt;
Jun Shindo 🇯🇵&lt;br&gt;
David Di Biase 🇮🇹&lt;br&gt;
Candido Sales Gomez 🇧🇷&lt;br&gt;
Steven Yung 🇫🇷&lt;br&gt;
Mehdi (MidouWebDev) 🇫🇷&lt;br&gt;
Athif Humam 🇮🇩&lt;br&gt;
Alex Lohr 🇩🇪&lt;br&gt;
Pheianox 🇷🇺&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#content-explosion"&gt;
  &lt;/a&gt;
  Content Explosion
&lt;/h2&gt;

&lt;p&gt;In a similar vein, the amount of new Solid content that has been pouring in has been amazing. Honestly, there is so much between featured on &lt;a href="https://www.youtube.com/watch?v=cuHDQhDhvPE"&gt;Fireship&lt;/a&gt;, to the many independent streams and interviews/podcasts I participated in. But here's a couple that really stood out:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#articles"&gt;
  &lt;/a&gt;
  Articles
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/introduction-to-the-solid-javascript-library/"&gt;Introduction to the Solid JavaScript Library by Charlie Gerard&lt;/a&gt; - CSS-Tricks&lt;br&gt;
One of the best introductions we've seen written to date. A really good overview of all the core features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://segmentfault.com/a/1190000040275257/en"&gt;SolidJS said stiffly: I am more react than React by Kasong&lt;/a&gt; - Segment Fault&lt;br&gt;
Despite the translation, you can get the humor of this article which provides some great examples to illustrate Solid's approach.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  Podcasts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://podrocket.logrocket.com/solidjs"&gt;SolidJS with Ryan Carniato&lt;/a&gt; - PodRocket&lt;br&gt;
We talk about a lot more than just Solid but trends in frontend in general.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://show.nikoskatsikanis.com/episodes/ryan-carniato"&gt;React vs Svelte vs Solid &amp;amp; MicroFrontends | Ryan Carniato&lt;/a&gt; - Nikos Show&lt;br&gt;
This podcast talks about developments in compilers and in server-side rendering in JavaScript Frameworks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OqcHoLWyyIw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/StLjM0Ki6iA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And if you haven't seen it yet check out my talk at React Finland which is a great introduction to SolidJS for those coming from a React background.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2iK9zzhSKo4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I've also started streaming on &lt;a href="https://www.youtube.com/channel/UCLLVlcmcCP4CUe7xSqVEnxw"&gt;my Youtube channel&lt;/a&gt;. So if you are interested in the inner workings of the framework could be worth checking out.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#current-development"&gt;
  &lt;/a&gt;
  Current Development
&lt;/h2&gt;

&lt;p&gt;New things are coming down the pipeline for Solid in the coming months. Mostly we want to make it easier for people to approach using Solid. For that reason, there are 3 things we are working on that we feel will aid in that process a lot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;While my tireless nights writing those over a couple months in the spring got us here, we can do better. Dan Jutan has been doing a great job focusing on the language to make the tutorials more accessible to developers with all levels of familiarity. We are also working on more beginner-focused, long-form tutorials to help onboarding people newer to web development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#server-side-rendering"&gt;
  &lt;/a&gt;
  Server Side Rendering
&lt;/h3&gt;

&lt;p&gt;Consolidating and generalizing on use cases to make it easier to use Solid in a variety of projects. This will include better documentation and rounding out a lot of the rough edges. The flagship experience for Single Page App SSR will be present through our new &lt;a href="https://github.com/solidjs/solid-start"&gt;Solid Start&lt;/a&gt; project which is an official minimal Meta-Framework built on top of &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; with support of deploying to various platforms. But this work will also include better support for integration with &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt; for those interested in Multi-Page Apps. So no matter what type of web application you are building we have you covered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactive-performance"&gt;
  &lt;/a&gt;
  Reactive Performance
&lt;/h3&gt;

&lt;p&gt;Finally, I'm personally doing a rework and optimization of our core reactive system. The last time I gave it a good tune was back in February 2020. We've added a lot of features since then and it's time to streamline out the edge cases and improve performance. This is especially important as we look to support custom renderers, for things like WebGL or native.&lt;/p&gt;




&lt;p&gt;And that's it for now. We're going to be doing these updates more often in the future. So much incredible stuff has been going on and I can only imagine what more we will have to share next time.&lt;/p&gt;

</description>
      <category>solidjs</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>news</category>
    </item>
    <item>
      <title>Different features on DEV and FOREM?</title>
      <author>dezuhan</author>
      <pubDate>Wed, 29 Sep 2021 14:02:18 +0000</pubDate>
      <link>https://dev.to/dezuhan/different-features-on-dev-and-forem-k20</link>
      <guid>https://dev.to/dezuhan/different-features-on-dev-and-forem-k20</guid>
      <description>&lt;p&gt;I recently discovered &lt;strong&gt;FOREM&lt;/strong&gt; and it turns out that &lt;strong&gt;FOREM&lt;/strong&gt; is like a same thing with &lt;strong&gt;DEV&lt;/strong&gt;, but I'm still confused about what the difference is? Which is better in terms of features, community and more?&lt;/p&gt;

&lt;p&gt;Because it's not appropriate if a programmer / community / organization has many blog sites with all the same posts, I think instead of wasting time writing / recopying, it's better to focus on 1 platform, but maximized in creating content.&lt;/p&gt;

&lt;p&gt;I still don't know much about &lt;strong&gt;FOREM&lt;/strong&gt; and &lt;strong&gt;DEV&lt;/strong&gt; which is better, built first and how big is the community between them? I hope someone can help me with this problem and from this article it can help our friends who are still confused about which one is better.&lt;/p&gt;

</description>
      <category>forem</category>
      <category>dev</category>
      <category>qna</category>
      <category>compare</category>
    </item>
    <item>
      <title>I made a CLI tool in Rust to play mechanical keyboard sound effects globally</title>
      <author>Kunal Bagaria</author>
      <pubDate>Wed, 29 Sep 2021 13:58:54 +0000</pubDate>
      <link>https://dev.to/kb24x7/i-made-a-cli-tool-in-rust-to-play-mechanical-keyboard-sound-effects-globally-23a8</link>
      <guid>https://dev.to/kb24x7/i-made-a-cli-tool-in-rust-to-play-mechanical-keyboard-sound-effects-globally-23a8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#rustyvibes"&gt;
  &lt;/a&gt;
  Rustyvibes
&lt;/h3&gt;

&lt;p&gt;A Rust CLI that makes mechanical keyboard sound effects on every key press. It was a collaborative effort that took months to make, is now finally releasing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#macos"&gt;
  &lt;/a&gt;
  macOS:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install kb24x7/rustyvibes/rustyvibes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#windows-linux"&gt;
  &lt;/a&gt;
  Windows / Linux:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo install rustyvibes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rustyvibes &amp;lt;soundpack_path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTIA12H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev05z1ps2ojcdyd4kahh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTIA12H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev05z1ps2ojcdyd4kahh.png" alt="Screen Shot 2021-09-29 at 7.23.10 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-soundpacks-here"&gt;
  &lt;/a&gt;
  Download Soundpacks: &lt;a href="https://drive.google.com/file/d/1LQEQ9aOVQAs_wgVecXkjaA9K4LXnCdp_/view?usp=sharing"&gt;Here&lt;/a&gt;
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#mechvibes-vs-rustyvibes"&gt;
  &lt;/a&gt;
  Mechvibes vs. Rustyvibes
&lt;/h3&gt;

&lt;p&gt;How does Rustyvibes compare to its competitors like Mechvibes? Mechvibes uses Electron and Chromium which is very resource intensive. Rustyvibes on the other hand is made with Rust and can be upto 10x-100x more resource efficient.&lt;/p&gt;

&lt;p&gt;Mechvibes Soundpacks: &lt;a href="https://docs.google.com/spreadsheets/d/1PimUN_Qn3CWqfn-93YdVW8OWy8nzpz3w3me41S8S494/edit#gid=0"&gt;Here&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#privacy"&gt;
  &lt;/a&gt;
  Privacy
&lt;/h3&gt;

&lt;p&gt;Rustyvibes is a fully open-sourced project and never uses any network activity at all.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>showdev</category>
      <category>sound</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Solidity Basics for JavaScript Devs</title>
      <author>K</author>
      <pubDate>Wed, 29 Sep 2021 13:48:24 +0000</pubDate>
      <link>https://dev.to/fllstck/solidity-basics-for-javascript-devs-57c</link>
      <guid>https://dev.to/fllstck/solidity-basics-for-javascript-devs-57c</guid>
      <description>&lt;p&gt;With all the NFT hype around, it happened that I got tasked to write an article about NFTs and serverless. So, last three weeks, I dived into books, courses, and videos about tokens and smart contracts.&lt;/p&gt;

&lt;p&gt;It's an exciting topic, and I think despite the downsides of the token economy, it can be the next step for the internet, being a solution to many problems we currently face.&lt;/p&gt;

&lt;p&gt;But in this blog post, I won't go deeper into my opinions about all this and teach you something. I will explain smart contracts written in Solidity with JavaScript equivalents to clear things up a bit and explain some main differences between these languages. I won't go deep here; I want to explain the basics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-vs-dynamic-typing"&gt;
  &lt;/a&gt;
  Static vs. Dynamic Typing
&lt;/h2&gt;

&lt;p&gt;The main difference between JavaScript and Solidity is typing. Solidity is statically typed at build time, and JavaScript is dynamically typed. &lt;/p&gt;

&lt;p&gt;The reasoning being that the Ethereum Virtual Machine (EVM) is very nitpicky about the costs of calculations and storage. Everything has to be accounted for so you can be charged accordingly.&lt;/p&gt;

&lt;p&gt;JavaScript's goal was a bit more ease of use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, Solidity is a bit like Java or C in that regard.&lt;/p&gt;

&lt;p&gt;You also have to type your function arguments and return values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have more complex types like arrays or structs, the typing system requires you to define the memory location the data will be live. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;calldata&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int256&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I defined the first argument &lt;code&gt;a' as an array of&lt;/code&gt;int256&lt;code&gt;and said it should be stored in the&lt;/code&gt;calldata&lt;code&gt;location.&lt;/code&gt;calldata&lt;code&gt;isn't persistent and can't be modified, and I only read&lt;/code&gt;a' and never write it in the function.&lt;/p&gt;

&lt;p&gt;The other variables are either explicitly stored in the &lt;code&gt;memory&lt;/code&gt; location or have basic types that don't require defining the location.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integers-vs-numbers"&gt;
  &lt;/a&gt;
  Integers vs. Numbers
&lt;/h2&gt;

&lt;p&gt;Another fundamental difference between the two languages is their default number type. JavaScript uses &lt;code&gt;number&lt;/code&gt;, which is always a floating-point number. Solidity uses various sizes of &lt;code&gt;int&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The idea behind this is that Solidity, deep down at its core, is about payments, and if you have a currency that is worth thousands of dollars per one whole unit, it could get costly to have rounding errors, which are the norm with JavaScript's &lt;code&gt;number&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;It's a bit like working with the dollar and using 1234 cents as storage type instead of 12,34 dollars.&lt;/p&gt;

&lt;p&gt;Also, Solidity programmers like the &lt;code&gt;int256&lt;/code&gt; type as their default type, which can't be mapped 1:1 to JavaScript's &lt;code&gt;number&lt;/code&gt;. Luckily JavaScipt got a new number type some time ago called &lt;code&gt;BigInt&lt;/code&gt;, which can store all Solidity numbers with no problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999999999999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// will become 10,000,000,000,000,000&lt;/span&gt;
&lt;span class="c1"&gt;// because the number type can't store that big numbers reliably&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999999999999999&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// will become 9,999,999,999,999,999&lt;/span&gt;
&lt;span class="c1"&gt;// because the n at the end tells JS that this is a BigInt and not a number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999999999999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#contract-vs-class"&gt;
  &lt;/a&gt;
  Contract vs Class
&lt;/h2&gt;

&lt;p&gt;Solidity's contracts are similar to JavaScript classes, but they are different. These contracts are why Solidity applications are called smart contracts.&lt;/p&gt;

&lt;p&gt;Solidity is a bit like Java in the regard that a contract is the entry point of a Solidity application. Contracts look like classes in JavaScript, but the difference lies in the instance creation. &lt;/p&gt;

&lt;p&gt;When you create an object from a class in JavaScript, that is a relatively straightforward task. You use the &lt;code&gt;new&lt;/code&gt; keyword with the class name and be done with it.&lt;/p&gt;

&lt;p&gt;This can be done with contracts too. Using the &lt;code&gt;new&lt;/code&gt; keyword on a contract name also leads to a new instance deployed to the blockchain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;this&lt;/code&gt; is implied in contract methods. So, the attributes of the contract are always in scope in all methods.&lt;/p&gt;

&lt;p&gt;The contracts instance, the object, so to say, and its data live on the blockchain and not just inside your Solidity applications memory. &lt;/p&gt;

&lt;p&gt;When you deploy a contract to the Ethereum blockchain, you're essentially instancing the contract, and then you can call it from other contracts or a blockchain Client like Ethers.js.&lt;/p&gt;

&lt;p&gt;The contract gets an address which you can use later to interact with it. If you deploy the contract multiple times, you have multiple addresses to interact with the different instances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// creates a new instance
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// uses an existing instace
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In JavaScript, the objects you create are done if you close the application; in Solidity, the contract instances are persistent on the blockchain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h3&gt;

&lt;p&gt;You need the contract's code to use an already deployed contract, which isn't always available. That's why Solidity also has interfaces, which you can define and use as the type when loading an existing contract.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="n"&gt;MyInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int256&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// uses an existing instace
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are many standardized interfaces for contracts. For example, fungible and non-fungible tokens are standardized, which means we can look in the standard, copy the function signatures we need, and create an interface to call them inside our contracts. Projects like &lt;a href="https://docs.openzeppelin.com/contracts/4.x/"&gt;OpenZeppelin&lt;/a&gt; also supply us with libraries that already include these well-known interfaces; we don't have to create them ourselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm-for-package-management"&gt;
  &lt;/a&gt;
  NPM for Package Management
&lt;/h2&gt;

&lt;p&gt;Solidity uses the NPM package manager we already know from JavaScript; this way, we can reuse many of the skills we already have.&lt;/p&gt;

&lt;p&gt;With the following command, we get a library with all the interfaces that are out in the wild:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i @openzeppelin/contracts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#global-variables-and-raw-payable-endraw-"&gt;
  &lt;/a&gt;
  Global Variables and &lt;code&gt;payable&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Some hidden global variables are available in every function. Just like the &lt;code&gt;window&lt;/code&gt; object in JavaScript, there is a &lt;code&gt;msg&lt;/code&gt; object in Solidity that contains the data of the caller of the function.&lt;/p&gt;

&lt;p&gt;Here is an example in JavaScript that loads data from the global &lt;code&gt;window&lt;/code&gt; object into a private attribute of a class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same in Solidity, but this time, the contract owner will be set from the global &lt;code&gt;msg&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solidity&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;paybale&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;msg&lt;/code&gt; variable contains information about the sender of a message. In this case, the address that was used to deploy the contract.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;constructor&lt;/code&gt; is called automatically when a new instance of a contract is created, just with new objects from classes in JavaScript. Someone had to create the instance, so their blockchain address ended up in the &lt;code&gt;msg.sender&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;In the example, all these functions and variables are defined as &lt;code&gt;payable&lt;/code&gt;, which means a caller can send Ether to them.&lt;/p&gt;

&lt;p&gt;This is pretty awesome because it allows us to use payments for our Solidity application standardized for the whole Ethereum eco-system right in at language level. There isn't an equivalent in JavaScript; we would have to program it on our own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Solidity is a straightforward language, and its baked-in payment mechanisms are probably the killer feature that will propel it in the long run.&lt;/p&gt;

&lt;p&gt;JavaScript developers should be very familiar with most of the syntax, and the few differences that exist can be learned relatively quickly. The fact that the eco-system also uses NPM makes things even more excellent for JavaScript devs.&lt;/p&gt;

&lt;p&gt;This guide isn't exhaustive and talks about a few basics that I saw. I'm by no means a Solidity pro since I only played around with it for three weeks or so.&lt;/p&gt;

&lt;p&gt;If you are interested in more content in that direction, let me know!&lt;/p&gt;

&lt;p&gt;Also, let me know if I got something wrong :D&lt;/p&gt;

</description>
      <category>solidity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Color Flipper App ==&gt;&gt; Basic DOM Project</title>
      <author>Gaurav Singh Mehra</author>
      <pubDate>Wed, 29 Sep 2021 13:46:24 +0000</pubDate>
      <link>https://dev.to/thegolumehra/color-flipper-app-basic-dom-project-52je</link>
      <guid>https://dev.to/thegolumehra/color-flipper-app-basic-dom-project-52je</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QfH9B0jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkave5iltwutijaqvdtu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QfH9B0jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkave5iltwutijaqvdtu.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction*&lt;/li&gt;
&lt;li&gt;What is this Project?*&lt;/li&gt;
&lt;li&gt;Concepts used*&lt;/li&gt;
&lt;li&gt;Notes and Syntax*&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;It is said that for getting into Web Development , one must have a good hand in JavaScript. Learning JS can be very challenging if your approach is not project based. The most likely route of Full Stack Web Development goes through DOM Scripting.&lt;/p&gt;

&lt;p&gt;And for the sake of learning DOM, i am making these posts on Projects i made while learning DOM and VanillaJS.&lt;br&gt;
Concepts used in projects are kind of explained here.&lt;/p&gt;

&lt;p&gt;Here is the link of very basic level DOM Project &lt;br&gt;
--&amp;gt; &lt;a href="https://basic-vanillajs-project-color-flipper.netlify.app/"&gt;colorflipper.live&lt;/a&gt;&lt;br&gt;
and here is its code in Github &lt;br&gt;
--&amp;gt; &lt;a href="https://github.com/thegolumehra/color-flipper"&gt;colorflipper.source&lt;/a&gt;&lt;br&gt;
and here is the link of tutorial video i am learning from&lt;br&gt;
--&amp;gt;&lt;a href="https://www.youtube.com/watch?v=3PHXvlpOkf4&amp;amp;t=421s"&gt;freecodecamp.projects&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-is-this-project"&gt;
  &lt;/a&gt;
  What is this Project?
&lt;/h2&gt;

&lt;p&gt;This is basic level DOM Project to make you familiar with writing code using JS. In this project we learn how can we get random background color with just a click by user. Plus the color will that is new background color displays on screen each time we click.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#concepts-used-"&gt;
  &lt;/a&gt;
  Concepts used :
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;arrays&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;array.length&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;document.getElementById()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;document.querySelector()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;addEventListener()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;document.body.style.backgroundColor&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Math.floor()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Math.random&lt;/em&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#notes-and-syntax"&gt;
  &lt;/a&gt;
  Notes and Syntax
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;p&gt;An array is a data structure, which can store a fixed-size collection of elements of the same data type.&lt;br&gt;
Example of an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let fruits = ['PineApple', 'Guava','Banana','Mango']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also,Arrays are list-like objects whose prototype has methods to perform traversal and mutation operations.🥵&lt;br&gt;
For example, if we use some methods on 'fruits' array we made earlier, we wil get this on console.😃 :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;accesing the array item using its index number
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(fruits[0])
// PineApple

console.log(fruits[fruits.length - 1])
// Mango

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For knowing more array methods in JS , read from here &lt;br&gt;
--&amp;gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;array-js-mdn&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#arraylength"&gt;
  &lt;/a&gt;
  array.length
&lt;/h3&gt;

&lt;p&gt;Obviously array.length is method to get length of an array.&lt;br&gt;
Using 'fruits' array from last topic we can find out how to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(fruits.length)

// 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#documentgetelementbyid"&gt;
  &lt;/a&gt;
  document.getElementById()
&lt;/h3&gt;

&lt;p&gt;The Document method returns an Element object representing the element whose id property matches the specified string.&lt;br&gt;
Syntax :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var element = document.getElementById('id');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we know, id’s should be unique, so it’s a very helpful method to get only the element you want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentqueryselector"&gt;
  &lt;/a&gt;
  document.querySelector()
&lt;/h3&gt;

&lt;p&gt;The Document method returns the first Element within the document that matches the specified CSS selector.&lt;br&gt;
Syntax :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var element = document.querySelector('selectors');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#eventtargetaddeventlistener"&gt;
  &lt;/a&gt;
  EventTarget.addEventListener()
&lt;/h3&gt;

&lt;p&gt;The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.This looks tough right thats why you should read about it more to understand more.Also it seems like i am talking to me by saying you.&lt;br&gt;
Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;target.addEventListener(type, listener);
target.addEventListener(type, listener, options);
target.addEventListener(type, listener, useCapture);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you want to know more in detail--&amp;gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"&gt;addEventListener-mdn&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentbodystylebackgroundcolor"&gt;
  &lt;/a&gt;
  document.body.style.backgroundColor
&lt;/h3&gt;

&lt;p&gt;Very easy to guess no, it changes background Color of the body. That's why i don't think its syntax is needed here😃.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mathfloor"&gt;
  &lt;/a&gt;
  Math.floor
&lt;/h3&gt;

&lt;p&gt;This function returns the largest integer less than or equal to a given number.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(Math.floor(5.95));
// 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mathrandom"&gt;
  &lt;/a&gt;
  Math.random
&lt;/h3&gt;

&lt;p&gt;This function returns a floating-point, pseudo-random number in the range 0 to less than 1. Basicallly this provides a random number between 0 to 1. And do you how many numbers are posssible between zero to one. Comment Below.&lt;/p&gt;

&lt;p&gt;Know more about this function from here--&amp;gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"&gt;math.random-mdn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's it for today.&lt;br&gt;
Thank you for reading till here.&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 10 Cloud Computing Virtual Events to Attend in October 2021</title>
      <author>Didicodes</author>
      <pubDate>Wed, 29 Sep 2021 13:41:56 +0000</pubDate>
      <link>https://dev.to/didicodes/top-10-cloud-computing-virtual-events-to-attend-in-october-2021-3f3h</link>
      <guid>https://dev.to/didicodes/top-10-cloud-computing-virtual-events-to-attend-in-october-2021-3f3h</guid>
      <description>&lt;p&gt;One of the fastest and most enjoyable ways to keep learning as a developer is to attend an event or conference. It can broaden your horizon, expand your network, strengthen your existing skillset, and more!&lt;/p&gt;

&lt;p&gt;But with so many virtual events, how do you find the right one to attend?&lt;/p&gt;

&lt;p&gt;In this article, I highlight the top 10 Cloud Computing virtual events that are worth attending in October. I bet you will find one or more events that will be beneficial for you. 😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-kubecon-cloudnativecon-na"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/"&gt;KubeCon + CloudNativeCon NA&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwRdDZXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crk0a0wdsq42ecsf6bnx.png" alt="KubeCon + CloudNativeCon NA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are in the Cloud Native space, then you most likely know about the most talked-about KubeCon event happening in a few weeks. KubeCon is a Cloud Native Computing Foundation’s flagship conference that gathers adopters and technologists from leading open source and cloud native communities worldwide. &lt;/p&gt;

&lt;p&gt;This year’s version will be an &lt;a href="https://en.wikipedia.org/wiki/Hybrid_event"&gt;hybrid event&lt;/a&gt;, so you’d get a chance to attend even if you are not in Los Angeles. This conference will include keynotes, breakout sessions and provide an opportunity for you to further the education and advancement of cloud native computing. &lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/register/"&gt;Learn more and register&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dev-house"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.getambassador.io/dev-house/"&gt;Dev House&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.getambassador.io/dev-house/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgiOkye3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg4dboge0os8sg1h372z.png" alt="Dev House"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dev House is a virtual Kubernetes event for application developers looking to improve how they code, ship, and run their applications. Whether you’re new to Kubernetes or a seasoned veteran, Dev House will supercharge your cloud-native developer experience through a series of tech talks, expert panels, and a &lt;a href="https://www.getambassador.io/dev-house/workshop/registration/"&gt;four-hour Kubernetes hands-on training course&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Best part? It is 100% free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-container-orchestration"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.devopsinstitute.com/co-2021/"&gt;Container Orchestration&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.devopsinstitute.com/co-2021/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMoyyyTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6miwkl6vqcfuj2lbz8w.png" alt="Container Orchestration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Container Orchestration is the automation of much of the operational effort required to run containerized workloads and services. This event will help you get up to speed with all things Container orchestration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-hashiconf-global"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://hashiconf.com/global/"&gt;HashiConf Global&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hashiconf.com/global/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zViHM6V1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnvuklzlmeh0h3hcoc0t.png" alt="HashiConf Global"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HashiConf is an interactive digital experience organized for the HashiCorp community. In this conference, you will hear keynotes and product updates, dive deep with hands-on labs and technical sessions and make connections around the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-microservices-world"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://microservicesworld.co/"&gt;Microservices World&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://microservicesworld.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qqwRzsC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/be9p7lreghb8fbxoxipf.png" alt="Microservices World"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microservices World is one of the world’s largest virtual microservices conferences. You will get to learn about the technologies and best practices in microservices architecture and DevOps engineering. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-google-cloud-next-21"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://cloud.withgoogle.com/next"&gt;Google Cloud Next '21&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloud.withgoogle.com/next"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sqVn6Fr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t0b2rr14brfvvslh16v.png" alt="Google Cloud Next"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Cloud Next '21 will help you explore dynamic content across all learning levels and dive deep into technologies and solutions spanning the Google Cloud and Google Workspace portfolio through breakout sessions, demos, and hands-on training. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-a-beginners-guide-to-containers"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://developer.ibm.com/events/crowdcast-virtual-event-container-101-a-beginners-guide-to-containers-1629721814469/"&gt;A beginners guide to Containers&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.ibm.com/events/crowdcast-virtual-event-container-101-a-beginners-guide-to-containers-1629721814469/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QAE4lxRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnq1o92nts3adjlexojb.png" alt="A beginners guide to Containers&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are starting your journey into the containerized world, the first thing you’ll come across is Docker. This Webinar will give you a quick start: it will provide you with the tools to play with Docker. You will also get a glimpse of orchestration solutions like Kubernetes and Openshift.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-dash"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.dashcon.io/"&gt;Dash&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.dashcon.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q_8EKMuk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz4av6x2espskzjlz0hs.png" alt="Dash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dash is an annual conference about building and scaling the next generation of applications, infrastructure, and technical teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-vmworld-2021"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.vmware.com/vmworld/en/index.html"&gt;VMworld 2021&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.vmware.com/vmworld/en/index.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IMKqycuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwsf7p8ydxztbwkoyg1c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before you can build and evolve what comes next, you have to imagine it–even as the world seems to shift on its axis. VMworld can help make this world a reality. &lt;/p&gt;

&lt;p&gt;VMworld is a can't-miss learning experience for developers interested in multi-cloud, Security, Edge, and Networking.&lt;br&gt;
​&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-open-networking-amp-edge-summit-kubernetes-on-edge-day"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.lfnetworking.org/event/open-networking-edge-forum-north-america/"&gt;Open Networking &amp;amp; Edge Summit + Kubernetes on Edge Day&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.lfnetworking.org/event/open-networking-edge-forum-north-america/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGK6ByBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fist3dehnwprs8n9x1qd.png" alt="Kubernetes on Edge Day"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open Networking &amp;amp; Edge Summit + Kubernetes on Edge Day is the industry’s premier open networking event now expanded to cover Edge Computing, Edge Cloud &amp;amp; IoT comprehensively. This event enables the collaborative development necessary to shape the future of networking and edge computing.&lt;/p&gt;




&lt;p&gt;Thanks for reading up to this point. I hope you discovered a fantastic event to attend in October. 😀&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Jaeger distributed tracing - complete guide</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Wed, 29 Sep 2021 13:08:25 +0000</pubDate>
      <link>https://dev.to/signoz/jaeger-distributed-tracing-complete-guide-117m</link>
      <guid>https://dev.to/signoz/jaeger-distributed-tracing-complete-guide-117m</guid>
      <description>&lt;p&gt;Distributed tracing has become critical for application performance monitoring in microservice-based architecture. Jaeger is a popular open-source tool used for distributed tracing. With distributed tracing, engineering teams get a central overview of how user requests perform across multiple services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jaeger"&gt;
  &lt;/a&gt;
  What is Jaeger?
&lt;/h2&gt;

&lt;p&gt;Jaeger is an open-source distributed tracing tool meant to monitor and troubleshoot transactions in distributed systems. It was built by teams at Uber and then open-sourced in 2015. Jaeger is also a Cloud Native Computing Foundation graduate project.&lt;/p&gt;

&lt;p&gt;In a microservice architecture, you can use Jaeger to track transactions across multiple services. The process of tracking transactions across different services is called distributed tracing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jaeger is a fantastic open-source tool for distributed tracing. But for effective resolution of production issues, engineering teams need both metrics and traces. &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;, a full-stack open-source tool, provides a unified UI for both metrics and traces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;In the world of microservices, a user request travels through hundreds of services before serving a user what they need. To make a business scalable, engineering teams are responsible for particular services with no insight into how the system performs as a whole. And that's where distributed tracing comes into the picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" alt="Microservices architecture"&gt;&lt;/a&gt;Microservice architecture of a fictional e-commerce application&lt;/p&gt;

&lt;p&gt;Distributed tracing gives you insight into how a particular service is performing as part of the whole in a distributed software system. There are two essential concepts involved in distributed tracing: &lt;strong&gt;Spans&lt;/strong&gt; and &lt;strong&gt;trace context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace. Thus, it represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;strong&gt;trace context&lt;/strong&gt; is passed along when requests travel between services, which tracks a user request across services. Thus, you can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" alt="Trace context is passed to track user requests across services"&gt;&lt;/a&gt;A trace context is passed when user requests pass from one service to another&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-jaeger-accomplish-distributed-tracing"&gt;
  &lt;/a&gt;
  How does Jaeger accomplish distributed tracing?
&lt;/h2&gt;

&lt;p&gt;There are four key components to a distributed tracing tool. These components together capture transactions into spans and then correlate those spans to form a trace.&lt;/p&gt;

&lt;p&gt;The four key components of a distributed tracing tool are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instrumentation&lt;/li&gt;
&lt;li&gt;Data pipeline&lt;/li&gt;
&lt;li&gt;Backend Storage&lt;/li&gt;
&lt;li&gt;Web UI/Visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPD4rjIu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/Jaeger_architecture-min.jpg" alt="Jaeger architecture"&gt;&lt;/a&gt;Jaeger architecture (Source: Jaeger Website)&lt;/p&gt;

&lt;p&gt;Let us see in detail what these components are and how these components come together to monitor a microservice architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instrumentation"&gt;
  &lt;/a&gt;
  Instrumentation
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What is instrumentation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instrumentation is the process of generating telemetry data(logs, metrics, and traces) from your application code. It is essentially writing code that enables your application code to emit telemetry data, which can be used later to investigate issues.&lt;/p&gt;

&lt;p&gt;Most distributed tracing tools offer clients libraries, agents, and SDKs to instrument application code. Jaeger's client libraries for instrumentation are based on &lt;a href="https://opentracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTracing APIs&lt;/b&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;OpenTracing was an open-source project aimed at providing vendor-neutral APIs and instrumentation for distributed tracing. It later got merged into &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt;. Jaeger has official client libraries in the following languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a service is instrumented, it generates spans for incoming transactions and attaches trace context to outgoing transactions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-pipeline"&gt;
  &lt;/a&gt;
  Data pipeline
&lt;/h3&gt;

&lt;p&gt;Once the trace data is collected with the help of client libraries, it can be directly sent to the storage backends for storage and visualization. But it's a good practice to have a tracing pipeline for data buffering as the application scales. The pipeline enables receiving data in multiple formats, manipulation, batching, indexing, and queueing.&lt;/p&gt;

&lt;p&gt;Jaeger provides Jaeger collectors, as seen in the architecture diagram. The collectors validate traces, index them and perform any transformation before storing the trace data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#backend-storage"&gt;
  &lt;/a&gt;
  Backend Storage
&lt;/h3&gt;

&lt;p&gt;Jaeger ships with simple in-memory storage for testing setups. Jaeger supports two popular open-source NoSQL databases as trace storage backends:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-uivisualization"&gt;
  &lt;/a&gt;
  Web UI/Visualization
&lt;/h3&gt;

&lt;p&gt;Jaeger's UI is basic but comprehensive when it comes to distributed tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-distributed-tracing-in-jaeger-sample-app"&gt;
  &lt;/a&gt;
  Implementing distributed tracing in Jaeger - Sample App
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#sample-hotrod-application"&gt;
  &lt;/a&gt;
  Sample HotRod application
&lt;/h3&gt;

&lt;p&gt;The sample HotRod application is a demo ride-sharing application. It shows four locations and by clicking on a location you call a ride to that location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xQTlLmji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/hotrod_application_ui-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xQTlLmji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/hotrod_application_ui-min.jpg" alt="HotRod application webUI"&gt;&lt;/a&gt;HotRod application webUI&lt;/p&gt;

&lt;p&gt;The sample HotRod application is a demo ride-sharing application. It shows four locations, and by clicking on a location, you call a ride to that location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DYdrm61T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/hotrod_app_customer_call-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DYdrm61T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/hotrod_app_customer_call-min.jpg" alt="Backend responses"&gt;&lt;/a&gt;When you click a customer button, the backend responds with a license plate number and ETA&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-to-get-started-with-jaeger-distributed-tracing"&gt;
  &lt;/a&gt;
  Steps to get started with Jaeger distributed tracing
&lt;/h3&gt;

&lt;p&gt;In order to see how Jaeger is used for distributed tracing, let's run the demo application HotRod  and see its traces using Jaeger.&lt;/p&gt;

&lt;p&gt;Steps to run HotRod application with Jaeger:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The recommended way to run Jaeger is with a Docker image. If you don't have docker installed, install it from the &lt;a href="https://docs.docker.com/engine/install/"&gt;official Docker website&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The HotRod application is implemented in Go, so you need to &lt;a href="https://golang.org/doc/install"&gt;install Go&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run Jaeger backend as an all-in-one Docker image with the following command:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;p6831&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6831&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;udp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;p16686&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16686&lt;/span&gt; &lt;span class="nx"&gt;jaegertracing&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the container starts, you will be able to access Jaeger's UI at &lt;a href="http://localhost:16686/search"&gt;http://localhost:16686/search&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone Jaeger's GitHub repo in local and change directory
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/jaegertracing/jaeger.git&lt;/span&gt;
   &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;jaeger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run the sample HotRod application
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   go run ./examples/hotrod/main.go all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be able to access the app UI at &lt;a href="http://127.0.0.1:8080/"&gt;http://127.0.0.1:8080/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To see traces on Jaeger, we need to generate some load. Click on different locations a number of times. When you access the Jaeger UI now, you can find the list of services along with its trace captured on Jaeger.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_Y1Mk8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/distributed_tracing_jaeger_reporting-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_Y1Mk8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/distributed_tracing_jaeger_reporting-min.jpg" alt="Jaeger UI"&gt;&lt;/a&gt;List of services of HotRod application reported on Jaeger dashboard&lt;/p&gt;

&lt;p&gt;Jaeger also creates a dependency diagram by tracing how requests flow and shows it in the dashboard. From the dependency diagram, we can see that the HotRod application has four microservices and two databases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UdtAUY-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_dependency_graph-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UdtAUY-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_dependency_graph-min.jpg" alt="Jaeger dependency graph"&gt;&lt;/a&gt;Jaeger shows a dependency diagram mapping your services&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-of-using-jaeger-as-a-distributed-tracing-tool"&gt;
  &lt;/a&gt;
  Limitations of using Jaeger as a distributed tracing tool
&lt;/h2&gt;

&lt;p&gt;Jaeger is a preferred choice when it comes to distributed tracing. But engineering teams need more than traces to resolve issues quickly. They need access to both metrics and traces. Metrics such as response times, error rates, request rates, and CPU usage are equally important to understand application performance.&lt;/p&gt;

&lt;p&gt;A few key challenges of using Jaeger as a distributed tracing tool are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only provides trace data. You will have to use another tool for metrics and log management.&lt;/li&gt;
&lt;li&gt;Databases supported by Jaeger need active maintenance.&lt;/li&gt;
&lt;li&gt;Jaeger's web UI is limited with basic visualizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a fast-moving engineering team, you need dashboards that can drive quick insights and resolution. And that's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture. It is a great alternative to Jaeger for distributed tracing in microservices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signoz-a-jaeger-alternative-for-distributed-tracing"&gt;
  &lt;/a&gt;
  SigNoz - a Jaeger alternative for distributed tracing
&lt;/h2&gt;

&lt;p&gt;SigNoz is a full-stack open-source application performance monitoring and observability tool which can be used in place of Jaeger. SigNoz is built to support OpenTelemetry natively. OpenTelemetry is becoming the world standard to generate and maintain telemetry data(Logs, metrics, and traces).&lt;/p&gt;

&lt;p&gt;SigNoz can be used as a distributed tracing tool for a microservice architecture. &lt;/p&gt;

&lt;p&gt;SigNoz also provides users flexibility in terms of data storage.You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz. Both are industry-proven and highly scalable databases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>monitoring</category>
      <category>distributedtracing</category>
      <category>jaeger</category>
    </item>
    <item>
      <title>Beginner's Guide to Docker(Part 2)- Manage data in Docker</title>
      <author>Parvathi</author>
      <pubDate>Wed, 29 Sep 2021 12:54:21 +0000</pubDate>
      <link>https://dev.to/paru429/beginner-s-guide-to-docker-part-2-manage-data-in-docker-1co9</link>
      <guid>https://dev.to/paru429/beginner-s-guide-to-docker-part-2-manage-data-in-docker-1co9</guid>
      <description>&lt;p&gt;We learned few basic things about docker in &lt;a href="https://dev.to/paru429/beginner-s-guide-to-docker-and-docker-cli-commands-1p75"&gt;Part 1&lt;/a&gt;, so we know how to build an Image using dockerfile and create a container based on that Image, in continuation to that lets see how to manage data in docker.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-we-need-to-manage-data"&gt;
  &lt;/a&gt;
  Why we need to manage data?
&lt;/h3&gt;

&lt;p&gt;Our dockerized application might have to communicate with file system either for reading or writing data, based on the functionality. Some data needs to be persisted and some data are not. &lt;/p&gt;

&lt;p&gt;By default all files created inside a container are stored on a writable container layer. This means that:&lt;/p&gt;

&lt;p&gt;1)The data doesn’t persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it.&lt;/p&gt;

&lt;p&gt;2)A container’s writable layer is tightly coupled to the host machine where the container is running. You can’t easily move the data somewhere else.&lt;/p&gt;

&lt;p&gt;3)Writing into a container’s writable layer requires a storage driver to manage the filesystem. The storage driver provides a union filesystem, using the Linux kernel. This extra abstraction reduces performance as compared to using data volumes, which write directly to the host filesystem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BvWKjkNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lzy2wo0ga8wc7h7aw5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BvWKjkNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lzy2wo0ga8wc7h7aw5t.png" alt="Container"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can we persist data?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker has two options for containers to store files in the host machine, so that the files are persisted even after the container stops: &lt;em&gt;volumes&lt;/em&gt;, and &lt;em&gt;bind mounts&lt;/em&gt;. If you’re running Docker on Linux you can also use a &lt;em&gt;tmpfs mount&lt;/em&gt;. If you’re running Docker on Windows you can also use a &lt;em&gt;named pipe&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wG2et7BA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxgqx0ciw2y6xtgyepvv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wG2et7BA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxgqx0ciw2y6xtgyepvv.png" alt="Storage types"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#volumes"&gt;
  &lt;/a&gt;
  Volumes
&lt;/h3&gt;

&lt;p&gt;Volumes are stored in a part of the host filesystem which is &lt;em&gt;created and managed by Docker&lt;/em&gt; (&lt;code&gt;/var/lib/docker/volumes/&lt;/code&gt; on Linux). Non-Docker processes should not modify this part of the filesystem.&lt;/p&gt;

&lt;p&gt;When you create a volume, it is stored within a directory on the Docker host. When you mount the volume into a container, this directory is what is mounted into the container&lt;/p&gt;

&lt;p&gt;A given volume can be mounted into multiple containers simultaneously. When no running container is using a volume, the volume is still available to Docker and is not removed automatically.&lt;/p&gt;

&lt;p&gt;We can create volume in two ways:&lt;br&gt;
1)&lt;strong&gt;Anonymous volumes&lt;/strong&gt; are not given an explicit name when they are first mounted into a container, so Docker gives them a random name that is guaranteed to be unique within a given Docker host. This volume will be removed automatically only when we create/run the container with &lt;code&gt;-rm&lt;/code&gt; option. However new anonymous volume are created when we re-create the container.&lt;/p&gt;

&lt;p&gt;2)&lt;strong&gt;Named volumes&lt;/strong&gt; - As name suggests, we can assign name to the volume. These volumes are not deleted even when we stop or remove the container. By naming the volumes we can prevent recreating the volume again.&lt;/p&gt;

&lt;p&gt;Volumes are often a better choice than persisting data in a container’s writable layer, because a volume does not increase the size of the containers using it, and the volume’s contents exist outside the lifecycle of a given container.&lt;/p&gt;

&lt;p&gt;Volumes also support the use of &lt;em&gt;volume drivers&lt;/em&gt;, which allow you to store your data on remote hosts or cloud providers, among other possibilities. To specify drivers we need to use &lt;code&gt;--mount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let us take a simple todo application, in which the app saves todo list items in /app/todos/todo.txt. If we save this file within the container filesystem, our todo list will be wiped clean every single time we launch the container. So we are going to use volumes instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker volume create todo-db&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Creates volume named todo-db.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker volume ls&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lists all created/available volumes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker volume inspect todo-db&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This command allows us to inspect the volume.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker volume rm todo-db&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Removes the given volume.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker volume prune&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remove all volumes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#bind-mounts"&gt;
  &lt;/a&gt;
  Bind mounts
&lt;/h3&gt;

&lt;p&gt;Bind mounts may be stored anywhere on the host system, it is &lt;em&gt;managed by us&lt;/em&gt;. They may even be important system files or directories. Non-Docker processes on the Docker host or a Docker container can modify them at any time.&lt;/p&gt;

&lt;p&gt;When you use a bind mount, a file or directory on the host machine is mounted into a container. The file or directory is referenced by its absolute path on the host machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-v-endraw-or-raw-volume-endraw-option"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--volume&lt;/code&gt; option
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker run -d --name devtest \&lt;br&gt;
   -v todo-db:/app/todos todo-app:latest&lt;/code&gt; - &lt;strong&gt;Named volume&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All files that are created in /app/todos will be captured in todo-db volume&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;docker run -d --name devtest \&lt;br&gt;
   -v /app/todos todo-app:latest&lt;/code&gt; - &lt;strong&gt;Anonymous volume&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All files that are created in /app/todos will be captured in docker created anonymous volume.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can also create volume using &lt;strong&gt;VOLUME&lt;/strong&gt; instruction in dockerfile &lt;code&gt;VOLUME ["/app/todos"]&lt;/code&gt; and we cannot create named volume with this instruction in dockerfile.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -d --name devtest \&lt;br&gt;
   -v "$(pwd)"/todo-mount:/app/todos todo-app:latest&lt;/code&gt; - &lt;strong&gt;Bind mount&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-v or --volume: Consists of three fields, separated by colon characters (:). The fields must be in the correct order&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
In the case of named volumes, the first field is the name of the volume, and is unique on a given host machine. For anonymous volumes, the first field is omitted.
&lt;/li&gt;
&lt;li&gt;
The second field is the path where the file or directory are mounted in the container.
&lt;/li&gt;
&lt;li&gt;
The third field is optional, and is a comma-separated list of options, such as ro `-v todo-db:/app/todos:ro`(defining volume to be read only, by default the volume has read and write access).
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you use -v or --volume to bind-mount a file or directory that does not yet exist on the Docker host, -v creates the endpoint for you. It is always created as a directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-mount-endraw-option"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;--mount&lt;/code&gt; option
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker run -d --name devtest \&lt;br&gt;
--mount type=volume,source=todo-db,target=/app/todos \ &lt;br&gt;
todo-app:latest&lt;/code&gt; - &lt;strong&gt;Volume&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -d --name devtest \&lt;br&gt;
--mount type=bind,source="$(pwd)"/todo-mount,target=/app/todos \ &lt;br&gt;
todo-app:latest&lt;/code&gt; - &lt;strong&gt;Bind&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;--mount: Consists of multiple key-value pairs, separated by commas and each consisting of a &lt;code&gt;&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The type of the mount, which can be bind, volume, or tmpfs.&lt;/li&gt; 
&lt;li&gt;The source of the mount. For bind mounts, this is the path to the file or directory on the Docker daemon host. May be specified as source or src.&lt;/li&gt;
&lt;li&gt;The destination takes as its value the path where the file or directory is mounted in the container. May be specified as destination, dst, or target.&lt;/li&gt;
&lt;li&gt;The readonly option, if present, causes the bind mount to be mounted into the container as read-only.&lt;/li&gt;
&lt;li&gt;The bind-propagation option, if present, changes the bind propagation. May be one of rprivate, private, rshared, shared, rslave, slave.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you use --mount to bind-mount a file or directory that does not yet exist on the Docker host, Docker does not automatically create it for you, but generates an error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tmpfs-mount"&gt;
  &lt;/a&gt;
  tmpfs mount
&lt;/h3&gt;

&lt;p&gt;As opposed to volumes and bind mounts, a tmpfs mount is temporary, and only persisted in the &lt;em&gt;host memory&lt;/em&gt;. When the container stops, the tmpfs mount is removed, and files written there won’t be persisted. It can be used by a container during the lifetime of the container, to store non-persistent state or sensitive information.&lt;/p&gt;

&lt;p&gt;This is useful to temporarily store sensitive files that you don’t want to persist in either the host or the container writable layer.&lt;/p&gt;

&lt;p&gt;This is available only if you’re running Docker on Linux.&lt;/p&gt;

&lt;p&gt;This can be achieved using &lt;code&gt;--mount&lt;/code&gt; or &lt;code&gt;--tmpfs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -d -it --name devtest \&lt;br&gt;
  --mount type=tmpfs,destination=/app/todos todo-app:latest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -d -it --name devtest \&lt;br&gt;
  --tmpfs /app/todos todo-app:latest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Source &lt;a href="https://docs.docker.com/storage/"&gt;Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>development</category>
    </item>
    <item>
      <title>Bookmark These 8 Front-End Websites Now!</title>
      <author>Jordan Burroughs</author>
      <pubDate>Wed, 29 Sep 2021 12:46:07 +0000</pubDate>
      <link>https://dev.to/jburroughs/bookmark-these-8-front-end-websites-now-gl0</link>
      <guid>https://dev.to/jburroughs/bookmark-these-8-front-end-websites-now-gl0</guid>
      <description>&lt;p&gt;Now that I've been working with front-end web frameworks professionally for over 2 years, I can confidently say that I &lt;em&gt;mostly&lt;/em&gt; know what I'm doing. &lt;/p&gt;

&lt;p&gt;Through this journey I've come across many useful resources and websites that have been extremely valuable to my success. &lt;br&gt;
Here is a list of useful resources that I recommend every front-end developer has bookmarked (especially for those new in the space 😊):&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%E2%92%88-csstricks"&gt;
  &lt;/a&gt;
  ⒈ &lt;a href="https://css-tricks.com/"&gt;CSS-Tricks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wntjpJaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bq3i0g6vvulnbg3spz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wntjpJaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bq3i0g6vvulnbg3spz0.png" alt="CSS Tricks Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website has all things CSS, including articles, videos, and my favorite, the &lt;a href="https://css-tricks.com/guides/"&gt;guides&lt;/a&gt;. Every time I'm designing UI, and forget how flexbox or grid works, I regularly come back to the guides on the subjects that provide fantastic visuals and simple explanations.&lt;/p&gt;

&lt;p&gt;Always comes in handy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%92%89-cssreferenceio"&gt;
  &lt;/a&gt;
  ⒉ &lt;a href="https://cssreference.io/"&gt;cssreference.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tdwZvDSB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t42vcb3yd1epfy6q3ieg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tdwZvDSB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t42vcb3yd1epfy6q3ieg.png" alt="css reference logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The name says what it is, but ccsreference.io isn't your old, boring documentation. They get straight to the point by showing many CSS properties in a neat and clean format that's easy on the eyes. &lt;/p&gt;

&lt;p&gt;Each CSS property is given numerous examples right beside them to help you efficiently get the information you came for.&lt;/p&gt;

&lt;p&gt;What else do you need from reference docs?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%92%8A-coolors"&gt;
  &lt;/a&gt;
  ⒊ &lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1QULKKtu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x9wguobxwa5z8oe89r4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1QULKKtu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x9wguobxwa5z8oe89r4.png" alt="Coolors Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Liven up your personal website with a unique and alluring color scheme. This website has grown ever since I started using it, but the main feature I use is creating your own palette (see above).&lt;/p&gt;

&lt;p&gt;Experiment with random colors to find the combination that you like best and then use the provided hex colors to implement them in your own projects. Not only is this useful when working with front-end apps, but any time you're designing and styling &lt;strong&gt;anything&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%92%8B-unsplash"&gt;
  &lt;/a&gt;
  ⒋ &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JKw6qy6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4anv9t9avnfqf92iwfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JKw6qy6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4anv9t9avnfqf92iwfb.png" alt="Unsplash Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We've all been there. You got to the point where you have all the scaffolding done for your app and you need to start adding content. It's easy to add "Lorem ipsum..." for text, but for images, you have to go through the process of Googling for images ensuring they're the correct size, free, ecetera. &lt;/p&gt;

&lt;p&gt;Unsplash helps you by providing high-quality, "freely-usable" images that are easy to add to any project or blog (like this one 😀). When downloading images you can also choose the size (small, medium, large) to fit your need.&lt;/p&gt;

&lt;p&gt;Amazing resource for every front-end app 💯.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%92%8C-alligatorio"&gt;
  &lt;/a&gt;
  ⒌ &lt;a href="https://alligator.io/"&gt;Alligator.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0L0FgAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrm5ffj9vkywtqklptxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0L0FgAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrm5ffj9vkywtqklptxj.png" alt="Alligator.io Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alligator.io was a recent find for me. It's like a front-end technical blog with many contributors. The topics include React, Angular, Vue, CSS, JavaScript, etc. &lt;/p&gt;

&lt;p&gt;Stay up-to-date on current technology trends along with guides and tutorials to level-up your front-end skills. Definitely worth a bookmark.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%92%8D-awesome"&gt;
  &lt;/a&gt;
  ⒍ &lt;a href="https://github.com/sindresorhus/awesome#front-end-development"&gt;Awesome&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XZ7Y9zhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ima58gq9uca3ayebfe1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZ7Y9zhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ima58gq9uca3ayebfe1.png" alt="Awesome Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What? A Github repo? Okay, calm down and explore the rest of the README to see the priceless resources this repo provides.&lt;/p&gt;

&lt;p&gt;This is the end-all-be-all in resource lists. Basically, it is an endless, community-curated list of resources. And it isn't just one repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/topics/awesome"&gt;Here&lt;/a&gt; you can find other repos where people have their own topical "awesome" lists ranging from Nodejs and Python to ones about interview questions and design. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I shouldn't say this, but rather than searching through blogs like this (which I greatly appreciate btw 🙂), check out "awesome" because it has been curated over for **years&lt;/em&gt;* by many, many kind and knowledgable people*&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%92%8E-brand-palettes"&gt;
  &lt;/a&gt;
  ⒎ &lt;a href="https://brandpalettes.com/"&gt;Brand Palettes&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5_hewStE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7jdffcv1a85maint4zi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5_hewStE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7jdffcv1a85maint4zi.png" alt="Google Brand Palette"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brand Palettes is a database of brands and their colors. That's pretty much it. Nonetheless, it is an cool resource to have in your back pocket.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%92%8F-documentation"&gt;
  &lt;/a&gt;
  ⒏ Documentation! 📄📄📄
&lt;/h3&gt;

&lt;p&gt;To be honest, from all of the online material I have cycled through, there is (usually) no substitute for the actual documentation of whatever technology you're using.&lt;/p&gt;

&lt;p&gt;For any technology you use (i.e. a framework, library, etc.), take some time and actually read their documentation. It's usually not too extensive and you will discover things about the product that you've never noticed before. Doing this will help you re-think your current, future, and past projects because of the ability to leverage a feature you never knew existed.&lt;/p&gt;

&lt;p&gt;I've read through React, Angular, and React-Query docs (just to name a few) and continue to do so with other tools. Just trust me. You won't regret it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Some docs are great and some are terrible. Some are too complex and some are too simple. But, it is usually the most up-to-date and accurate information you can get.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;It's very easy to read the docs and still not understand a topic. That's why I like using the docs as a roadmap for learning. Once I hit a topic I don't fully comprehend, I use other online resources like videos and articles to fill in the gaps. Then when I return to the docs, I get that "aha" moment we all love.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are endless amounts of useful resources out there, so if you have any recommendations, let everyone know in the comments. I would love to add a few more bookmarks myself.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thanks-for-reading-if-you-want-more-tech-tips-software-stuff-and-bussin-blogs-you-can-throw-me-a-follow-on-twitter"&gt;
  &lt;/a&gt;
  Thanks for reading! If you want more tech tips, software stuff, and bussin' blogs, you can throw me a follow on &lt;a href="https://www.twitter.com/JBurroughsTech"&gt;Twitter&lt;/a&gt;🔥🤘🏽🐶
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>frontend</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Can we build a better Terraform? The story of Opta</title>
      <author>Nočnica Fee</author>
      <pubDate>Wed, 29 Sep 2021 12:39:12 +0000</pubDate>
      <link>https://dev.to/run-x/can-we-build-a-better-terraform-the-story-of-opta-288l</link>
      <guid>https://dev.to/run-x/can-we-build-a-better-terraform-the-story-of-opta-288l</guid>
      <description>&lt;p&gt;&lt;em&gt;cover image by By Daein Ballard -  &lt;a href="https://commons.wikimedia.org/w/index.php?curid=5068482"&gt;CC BY-SA 3.0&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
Managing to distributed systems is... difficult. You can find guides and recommendations everywhere that say if you don't have to do a distributed workload you shouldn't.&lt;/p&gt;

&lt;p&gt;An article from last year by yours truly argued that &lt;a href="https://increment.com/containers/primer-on-containerization/"&gt;containers and container orchestration&lt;/a&gt; have very different futures: It makes sense that almost everyone will be working with containers in the future, but it's not as clear that container orchestration knowledge will be de rigueur.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ipqjg0sK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EtmjXKWVIAA_D13.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--saMVgs_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/630289560304398337/5K6n5jDW_normal.jpg" alt="Hasitha Liyanage profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Hasitha Liyanage
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @h_liyan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I don't think this &lt;a href="https://twitter.com/hashtag/Kubernetes"&gt;#Kubernetes&lt;/a&gt; troubleshooting guide is making the case it thinks it is. Infrastructure should not be this complicated.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/cyck2TY7fG"&gt;learnk8s.io/troubleshootin…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:53 AM - 07 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1358307866961084422" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1358307866961084422" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1358307866961084422" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;As we've faced this complexity of modern distributed workloads a number of companies have tried to make this work easier. These tools tend to fall into three categories:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-have-an-okay-tool-but-hire-us-and-well-deliver-your-whole-cloud"&gt;
  &lt;/a&gt;
  "We have an okay tool, but hire us and we'll deliver your whole cloud"
&lt;/h2&gt;

&lt;p&gt;When tools are sold with strict SLA's and mandatory professional services, you're often &lt;em&gt;really&lt;/em&gt; purchasing Kubernetes expertise rather than great software&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-tool-is-free-for-90-days"&gt;
  &lt;/a&gt;
  "Our Tool is Free! (for 90 days)"
&lt;/h2&gt;

&lt;p&gt;Often a partially-open-source-tool that inevitably requires some Software-as-a-Service component to really work, a number of tools will lock you into their platform, never give you all the tools, &lt;em&gt;and&lt;/em&gt; rarely offer you any support if things go wrong&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#actual-open-source"&gt;
  &lt;/a&gt;
  Actual Open Source
&lt;/h2&gt;

&lt;p&gt;These are teams releasing tools as Open Source Software that can be used, start to finish, on your own. Multiple teams see the growth potential in Kubernetes and other distributed workloads and just want to grow with the industry. They offer professional services or hosted servers in addition to free tools, but you can do the whole thing start to finish yourself.&lt;/p&gt;

&lt;p&gt;While this third option sounds a lot better for the user, it can still hit pitfalls. The industry standard Terraform is currently &lt;a href="https://www.theregister.com/2021/09/07/hashicorp_pause/"&gt;struggling to keep up with community PRs&lt;/a&gt; and is in danger of falling behind users needs.&lt;/p&gt;

&lt;p&gt;This isn't a new story: Large-ish companies can struggle to justify the cost of maintaining an open source tool, and once  they grow to that medium size it's hard to find the time to maintain a tool everyone wants but no one has time to update.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#trying-to-build-a-better-terraform"&gt;
  &lt;/a&gt;
  Trying to build a better Terraform
&lt;/h1&gt;

&lt;p&gt;Enter RunX, a small team focused on trying to build a fully modern tool for deploying distributed workloads. We're a small team of just 8, laser focused on reducing toil for cloud engineers. &lt;a href="https://techcrunch.com/2021/09/28/runx-announces-4-1m-seed-to-simplify-cloud-infrastructure-deployment-for-developers/"&gt;We just raised 4 million in funding&lt;/a&gt;, and we'd love you to try out &lt;a href="https://github.com/run-x/opta"&gt;Opta, the easier way to deploy.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>devops</category>
      <category>kubernetes</category>
      <category>aws</category>
    </item>
  </channel>
</rss>
