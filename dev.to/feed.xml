<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Image Classification - Machine Learning in Javascript</title>
      <author>Bibek</author>
      <pubDate>Tue, 04 May 2021 15:45:19 +0000</pubDate>
      <link>https://dev.to/bibekkakati/image-classification-machine-learning-in-javascript-g3f</link>
      <guid>https://dev.to/bibekkakati/image-classification-machine-learning-in-javascript-g3f</guid>
      <description>&lt;p&gt;Hello readers, recently I came to know about an awesome machine learning library for Javascript. &lt;/p&gt;

&lt;p&gt;Any guess? No, it is not &lt;code&gt;tensorflow.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is &lt;a href="https://learn.ml5js.org/"&gt;&lt;code&gt;ml5.js&lt;/code&gt;&lt;/a&gt;. So what is &lt;a href="https://learn.ml5js.org/"&gt;&lt;code&gt;ml5.js&lt;/code&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before proceeding, I would like to mention that I am not a machine learning expert. I just have some basic knowledge and try out these kinds of stuff in my free time with the help of external libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, I will brief about the library and show some examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-raw-ml5js-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;ml5.js&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://learn.ml5js.org/"&gt;&lt;code&gt;ml5.js&lt;/code&gt;&lt;/a&gt; is a machine learning library built on top of &lt;code&gt;tensorflow.js&lt;/code&gt; which we can use in our web browser. It is being developed to make machine learning more accessible and life easier for people who are new to the Machine Learning arena.&lt;/p&gt;

&lt;p&gt;It uses the browser's GPU to run all the calculations. Getting started with the library is very easy.&lt;/p&gt;

&lt;p&gt;Just include the package link in your project and you are good to go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://unpkg.com/ml5@latest/dist/ml5.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h1&gt;

&lt;p&gt;Let's implement something to understand the library.&lt;/p&gt;

&lt;p&gt;We will implement Image Classification using this library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-image-classification"&gt;
  &lt;/a&gt;
  What is Image Classification?
&lt;/h3&gt;

&lt;p&gt;Image Classification is a computer vision technique in which we classify images according to the visual content in it. We train the Image Classifier with crafted data so that it can predict what type of object is in an Image. If we train the classifier with dog's images, it will be able to identify a dog in a photo very easily.&lt;/p&gt;




&lt;p&gt;We will create a webpage where user can upload an image or paste an image link, and our classifier will classify what type of object is in the image.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- HTML
- CSS
- Javascript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code-implementation"&gt;
  &lt;/a&gt;
  Code Implementation
&lt;/h3&gt;

&lt;p&gt;First, we will be implementing the &lt;code&gt;index.html&lt;/code&gt; page, which is our main web page.&lt;br&gt;
On this page, we will have two buttons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Upload Image&lt;/code&gt; to upload an image from your local drive&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Paste Link&lt;/code&gt; to use hosted image from external server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On uploading or pasting a link of an image, the image will get rendered on the screen. After that on clicking the button &lt;code&gt;What is in the image?&lt;/code&gt;, the result will be shown below it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some external links of the images will not work because of cors policy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Image Classifier&amp;lt;/title&amp;gt;
    &amp;lt;script src="https://unpkg.com/ml5@latest/dist/ml5.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;link rel="stylesheet" href="./style.css"&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body onload="main()"&amp;gt;
    &amp;lt;div class="loader-view" id="loaderView"&amp;gt;
        &amp;lt;h3&amp;gt;Initializing ...&amp;lt;/h3&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="main" id="mainView"&amp;gt;
        &amp;lt;h1 class="heading"&amp;gt;Image Classifier&amp;lt;/h1&amp;gt;
        &amp;lt;div class="select-image"&amp;gt;
            &amp;lt;input type="file" name="Image" id="selectImage" accept="jpg,jpeg,png" hidden&amp;gt;
            &amp;lt;button class="upload-button button" id="uploadButton"&amp;gt;Upload Image&amp;lt;/button&amp;gt;
            &amp;lt;button class="link-button button" id="linkButton"&amp;gt;Paste Link&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="image-view" id="imageViewContainer"&amp;gt;
            &amp;lt;img src="" alt="" class="image" id="imageView" crossorigin="anonymous"&amp;gt;

            &amp;lt;button class="button" id="classifyButton"&amp;gt;What is in the image ?&amp;lt;/button&amp;gt;
            &amp;lt;h2 class="result" id="result"&amp;gt;&amp;lt;/h2&amp;gt;
        &amp;lt;/div&amp;gt;

    &amp;lt;/div&amp;gt;

    &amp;lt;script src="./script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;Just some styling for our webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
    background-color: #000;
    color: #f0f8ff;
}

.main,
.loader-view {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    height: 100%;
    width: 100%;
}

.main {
    display: none;
}

.button {
    border: none;
    font-size: 16px;
    font-weight: 600;
    padding: 10px 15px;
    border-radius: 8px;
}

.upload-button {
    color: #f0f8ff;
    background: #ff7b00;
}

.link-button {
    color: #1f1f1f;
    background: #fdf8f4;
}

.upload-button:hover {
    background: #f0f8ff;
    color: #ff7b00;
}

.link-button:hover {
    color: #ff7b00;
}

.image-view {
    margin-top: 50px;
    width: 50vw;
    height: 60vh;
    display: none;
    flex-direction: column;
}

.image {
    max-width: 100%;
    max-height: 100%;
    border: solid #f0f8ff 6px;
    border-radius: 4px;
    margin-bottom: 5px;
}

.result {
    text-transform: capitalize;
    letter-spacing: 0.5px;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;

&lt;p&gt;Calling the &lt;code&gt;main&lt;/code&gt; function from &lt;code&gt;index.html&lt;/code&gt; when body loads.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function main() {
    const classifier = ml5.imageClassifier("MobileNet", modelLoaded);

    const uploadButton = document.getElementById("uploadButton");
    const linkButton = document.getElementById("linkButton");
    const classifyButton = document.getElementById("classifyButton");
    const selectImage = document.getElementById("selectImage");
    const imageViewContainer = document.getElementById("imageViewContainer");
    const imageView = document.getElementById("imageView");
    const result = document.getElementById("result");
    const loaderView = document.getElementById("loaderView");
    const mainView = document.getElementById("mainView");

    uploadButton.onclick = function (e) {
        selectImage.click();
    };

    classifyButton.onclick = function (e) {
        classify(imageView);
    };

    linkButton.onclick = function (e) {
        const link = prompt("Paste Image Link Here");
        if (link != null &amp;amp;&amp;amp; link != undefined) {
            imageView.src = link;
            imageViewContainer.style.display = "flex";
            result.innerText = "";
        }
    };

    selectImage.onchange = function () {
        if (this.files &amp;amp;&amp;amp; this.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                imageView.src = e.target.result;
                imageViewContainer.style.display = "flex";
                result.innerText = "";
            };
            reader.readAsDataURL(this.files[0]);
        }
    };

    function modelLoaded() {
        loaderView.style.display = "none";
        mainView.style.display = "flex";
    }

    function classify(img) {
        classifier.predict(img, function (err, results) {
            if (err) {
                return alert(err);
            } else {
                result.innerText = results[0].label;
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript-explanation"&gt;
  &lt;/a&gt;
  Javascript Explanation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const classifier = ml5.imageClassifier("MobileNet", modelLoaded);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ml5.imageClassifier&lt;/code&gt; method is called to initialize the machine learning model.&lt;br&gt;
Passing two arguments to the method first is the &lt;code&gt;model&lt;/code&gt; which is &lt;code&gt;MobileNet&lt;/code&gt; and a callback &lt;code&gt;modelLoaded&lt;/code&gt; which will get invoked once the initialization is completed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MobileNet is a term that describes a type of machine learning model architecture that has been optimized to run on platforms with limited computational power, such as applications on mobile or embedded devices. MobileNets have several use cases including image classification, object detection, and image segmentation. This particular MobileNet model was trained for Image Classification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have some other choices too for the &lt;code&gt;model&lt;/code&gt; like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Darknet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DoodleNet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use your own image classification model trained in Teachable Machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we are getting some references to buttons and views of our HTML file to listen for events and manipulate content and CSS styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uploadButton.onclick = function (e) {
        selectImage.click();
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On clicking the &lt;code&gt;Upload Image&lt;/code&gt; button, it will click the image selector input element &lt;code&gt;selectImage&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    selectImage.onchange = function () {
        if (this.files &amp;amp;&amp;amp; this.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                imageView.src = e.target.result;
                imageViewContainer.style.display = "flex";
                result.innerText = "";
            };
            reader.readAsDataURL(this.files[0]);
        }
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the user selects the image, &lt;code&gt;selectImage.onchange&lt;/code&gt; listener will get invoked and it will set the image in &lt;code&gt;imageView&lt;/code&gt; src.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;linkButton.onclick = function (e) {
        const link = prompt("Paste Image Link Here");
        if (link != null &amp;amp;&amp;amp; link != undefined) {
            imageView.src = link;
            imageViewContainer.style.display = "flex";
            result.innerText = "";
        }
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On clicking the &lt;code&gt;Paste Link&lt;/code&gt; button, &lt;code&gt;linkButton.onclick&lt;/code&gt; listener will get invoked and it will ask the user for the &lt;strong&gt;image link&lt;/strong&gt; and if a link is provided, it will set the link in the &lt;code&gt;imageView&lt;/code&gt; src.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;classifyButton.onclick = function (e) {
        classify(imageView);
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On clicking the &lt;code&gt;What is in the image?&lt;/code&gt; button, &lt;code&gt;classifyButton.onclick&lt;/code&gt; listener will get invoked and it will call the &lt;code&gt;classify&lt;/code&gt; method, which is responsible for image classification. Will pass the image element reference i.e, &lt;code&gt;imageView&lt;/code&gt; to the &lt;code&gt;classify&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function modelLoaded() {
        loaderView.style.display = "none";
        mainView.style.display = "flex";
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method will get invoked when our model is initialized and it is manipulating some CSS style to hide the loader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function classify(img) {
        classifier.predict(img, function (err, results) {
            if (err) {
                return alert(err);
            } else {
                result.innerText = results[0].label;
            }
        });
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is the important method that is calling the &lt;code&gt;predict&lt;/code&gt; method of &lt;code&gt;classifier&lt;/code&gt; object. The &lt;code&gt;predict&lt;/code&gt; method expects two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;input&lt;/code&gt; which is a reference to the image element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;callback&lt;/code&gt; function to handle results and error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On error, we are throwing it in an alert box.&lt;/p&gt;

&lt;p&gt;Accessing the result from the &lt;code&gt;results&lt;/code&gt; array, which contains multiple objects with &lt;code&gt;label&lt;/code&gt; and &lt;code&gt;confidence&lt;/code&gt; level. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YnuiF1A1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620125382401/2jEHOhudK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YnuiF1A1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620125382401/2jEHOhudK.png" alt="imgclassifier.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the files here: &lt;a href="https://github.com/bibekkakati/blogs-projects/tree/main/javascript/ml5js/image-classification"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Enjoyed?&lt;/strong&gt; Give it a thumbs-up.&lt;/p&gt;

&lt;p&gt;Thank you for reading | Feel free to &lt;a href="https://bibekkakati.me"&gt;connect&lt;/a&gt; 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>machinelearning</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Starting a programming blog? Don’t make this mistake 🚫</title>
      <author>Tuomo Kankaanpää</author>
      <pubDate>Tue, 04 May 2021 15:41:17 +0000</pubDate>
      <link>https://dev.to/tumee/starting-a-programming-blog-don-t-make-this-mistake-2g0a</link>
      <guid>https://dev.to/tumee/starting-a-programming-blog-don-t-make-this-mistake-2g0a</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/v3fIUN5tndI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=v3fIUN5tndI"&gt;📹 View on Youtube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having your own blog as a developer is a great idea. When writing articles you also learn in the process about the thing you are writing. It is also a good way to show a potential employer that you know your stuff.&lt;/p&gt;

&lt;p&gt;As a developer, the first instinct is to build your own blog by yourself and not to use a ready made blogging platform like Wordpress for example.&lt;/p&gt;

&lt;p&gt;This is very tempting and when I first started my blog, I had that same thought. If your goal is to build a successful blog and get good at blogging, that might not be a good idea though and here is why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#most-important-thing-to-do-when-starting-out-blogging"&gt;
  &lt;/a&gt;
  Most important thing to do when starting out blogging
&lt;/h2&gt;

&lt;p&gt;When first starting out blogging, the most important thing in my opinion is to start writing articles. Period.&lt;/p&gt;

&lt;p&gt;As a beginner writer, you don't yet know how to write articles. So you need practice. More you write, the better your articles will get as you learn how to write. So it is crucial to write as much as you can.&lt;/p&gt;

&lt;p&gt;So what happens if you start coding your blog from scratch. All your energy and time is put into making the blog, instead of writing the articles on the blog. So you are actually not concentrating on getting better at blogging and getting your content out there. Plus you delay starting to write the actual articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-started"&gt;
  &lt;/a&gt;
  How I started
&lt;/h2&gt;

&lt;p&gt;I have been writing my blog for over three years now. The hardest thing always is to start writing and the only way to get better at it is to do it more.&lt;/p&gt;

&lt;p&gt;When I first started I setup by blog on top of Wordpress. It was fast and easy and I didn't have to worry if the website was working or not. I could only concentrate on writing my articles.&lt;/p&gt;

&lt;p&gt;Now after blogging few years, I actually decided to update by blog and ended up coding it myself from scratch. But if I had started to code my own blog back when I started, I think I would not be here today.&lt;/p&gt;

&lt;p&gt;I am not saying that it is not possible to code your own blog and be successfull blogger. I just know that especially in the beginning just starting to write an article is hard, not to mention if you have to worry about the blog website functioning correctly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-start-blogging-as-a-beginner"&gt;
  &lt;/a&gt;
  How to start blogging as a beginner
&lt;/h2&gt;

&lt;p&gt;If I would start my own blog today, here is how I would do it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-use-easy-to-setup-platform"&gt;
  &lt;/a&gt;
  1. Use easy to setup platform
&lt;/h3&gt;

&lt;p&gt;I would build the blog on top of Wordpress. It is super popular for blogging and easy to setup. With Wordpress you can also add custom pages to your blog to work as a portfolio and you get your blog under your own domain.&lt;/p&gt;

&lt;p&gt;Wordpress has it downsides but in my opinion for beginner bloggers, the pros outweigh the cons and Wordpress is still a good starting point.&lt;/p&gt;

&lt;p&gt;One good option is to buy web hosting from &lt;a href="https://www.bluehost.com/track/tume/"&gt;Bluehost&lt;/a&gt; and setup Wordpress blog there. At the time of writing this, they offer free domain name for the 1st year, free ssl certificate for your domain and 1-Click Wordpress install with the starter plan. So hosting your Wordpress blog there is very easy to setup. This is what I used when I started out.&lt;/p&gt;

&lt;p&gt;Another option is to start writing posts on sites like &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt;, &lt;a href="https://medium.com"&gt;Medium&lt;/a&gt; or &lt;a href="https://hashnode.com"&gt;Hashnode&lt;/a&gt;. This is a good option too because you don't need any setup and can start writing right away.&lt;/p&gt;

&lt;p&gt;The biggest downside with these sites is that you don't own your content. If you e.g. write your articles to Medium and Medium decides to shut down the site, delete or ban your articles, there is nothing you can do. So having your content on your own blog is always better in the long run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-write"&gt;
  &lt;/a&gt;
  2. Write
&lt;/h3&gt;

&lt;p&gt;I would write as much articles as I can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;If you are new to blogging and your goal is to build a successfull blog and get good at writing articles, you should not re-invent the wheel when it comes to building the blog.&lt;/p&gt;

&lt;p&gt;Use one of the ready to use solutions (&lt;a href="https://www.bluehost.com/track/tume/"&gt;Bluehost&lt;/a&gt; + Wordpress, dev.to, Medium, Hashnode) and start writing content.&lt;/p&gt;

&lt;p&gt;You can always &lt;a href="https://tuomokankaanpaa.com/blog/how-i-converted-my-website-from-wordpress-to-jamstack"&gt;update your blog&lt;/a&gt; and build it from scratch in the future if you wish, but the most important thing is to get down the habit of writing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclosure: As an Bluehost affiliate partner I earn from qualifying purchases.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>blogging</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Clean up my git (Snack Pack #5)</title>
      <author>Blake Campbell</author>
      <pubDate>Tue, 04 May 2021 14:43:54 +0000</pubDate>
      <link>https://dev.to/blaketweeted/clean-up-my-git-snack-pack-5-1f7n</link>
      <guid>https://dev.to/blaketweeted/clean-up-my-git-snack-pack-5-1f7n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#git-repo-maintenance"&gt;
  &lt;/a&gt;
  Git Repo maintenance
&lt;/h1&gt;

&lt;p&gt;If you've been working on any repo for an extended amount of time, you may have saved a million branches that have already been merged. It is time to clean all those old ones out. &lt;/p&gt;




&lt;p&gt;The commands we'll be using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Removes references from branches that are no longer on the origin
git remote prune origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note this next part will depend on your main branch's name. If you haven't yet, then you should rename &lt;code&gt;master&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;. See below for how to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Lists all the branches that have been merged into main and remove them
git branch --merged main | grep -v '^[ *]*main$' | xargs git branch -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#wrap-it-all-up"&gt;
  &lt;/a&gt;
  Wrap it all up.
&lt;/h2&gt;

&lt;p&gt;The last step is relatively easy. Combine it into your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;. I'm sure there's a Windows and Linux equivalent, but I'm using macOS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias cleanUpMyGit="git remote prune origin ; git branch --merged master | grep -v '^[ *]*master$' | xargs git branch -d"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and restart your terminal, then try it out in a repo directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cleanUpMyGit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Afterward, you should see a list of the branches removed by the command. Happy Coding!&lt;/p&gt;




&lt;p&gt;References: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.git-tower.com/learn/git/faq/git-rename-master-to-main/"&gt;https://www.git-tower.com/learn/git/faq/git-rename-master-to-main/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/github/renaming"&gt;https://github.com/github/renaming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My snack pack reads are intended for a quick read without any fluff and provide actionable items.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Dashbird makes observability cool!</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Tue, 04 May 2021 14:43:18 +0000</pubDate>
      <link>https://dev.to/dashbird/dashbird-makes-observability-cool-2d6m</link>
      <guid>https://dev.to/dashbird/dashbird-makes-observability-cool-2d6m</guid>
      <description>&lt;p&gt;We're officially cool! Dashbird is extremely proud to be named as a &lt;strong&gt;Cool Vendor&lt;/strong&gt; by &lt;strong&gt;&lt;a href="https://www.gartner.com/"&gt;Gartner&lt;/a&gt;&lt;/strong&gt; in &lt;strong&gt;Monitoring, Observability, and Cloud Operations&lt;/strong&gt; in their &lt;strong&gt;28 April 2021&lt;/strong&gt; report on "&lt;a href="https://www.gartner.com/account/signin?method=initialize&amp;amp;TARGET=http%253A%252F%252Fwww.gartner.com%252Fdocument%252F4001056"&gt;Cool Vendors in Monitoring, Observability and Cloud Operations&lt;/a&gt;". &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-gartner-think-were-cool"&gt;
  &lt;/a&gt;
  Why Gartner think we're cool?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"Dashbird provides a &lt;strong&gt;novel approach to observability&lt;/strong&gt; for &lt;strong&gt;serverless applications that run inside an AWS environment&lt;/strong&gt;. Monitoring a serverless environment can be particularly &lt;strong&gt;complex&lt;/strong&gt; as it may involve thousands of separate microservices, and the tools that AWS provides are difficult to use at scale."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dashbird brings all your &lt;strong&gt;mission-critical AWS data onto one dashboard&lt;/strong&gt; and lets you know in &lt;strong&gt;seconds&lt;/strong&gt; what's going on in your application and &lt;strong&gt;alerts you immediately of errors and warnings&lt;/strong&gt;, and where exactly is the issue located, so you can jump in and fix it before anything starts affecting your customers. In fact, &lt;a href="https://dashbird.io/customers/onfleet/"&gt;Dashbird has helped Onfleet&lt;/a&gt; directly to prevent their &lt;strong&gt;customers from churning&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/customers/"&gt;Dashbird's customers&lt;/a&gt; include application developers, Site reliability engineers (SREs), enterprise architects, and DevOps and IT operations teams, in large enterprises and startups across various verticals, responsible for the &lt;strong&gt;performance of applications &lt;/strong&gt;hosted in a &lt;strong&gt;serverless environment&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Customers value Dashbird's &lt;strong&gt;easy-to-understand metrics dashboard&lt;/strong&gt; helping them save up to &lt;strong&gt;80% on their MTTD/R and debugging&lt;/strong&gt;, quick and easy 2-minute setup that &lt;strong&gt;doesn't require any code changes&lt;/strong&gt;, and the &lt;strong&gt;actionable recommendations&lt;/strong&gt; for improving their infrastructure &lt;strong&gt;in accordance with industry best practices&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;"&lt;strong&gt;Monitoring and operating large-scale serverless applications&lt;/strong&gt; introduces new &lt;strong&gt;challenges&lt;/strong&gt; for developers, architects, and SRE engineers that require special know-how and significant implementation. &lt;strong&gt;Our approach &lt;/strong&gt;of &lt;strong&gt;abstracting and automating monitoring&lt;/strong&gt; use cases and &lt;strong&gt;not requiring instrumentation&lt;/strong&gt; has proven i*&lt;em&gt;deal for serverless&lt;/em&gt;*" says Taavi Rehemägi, CEO at &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-are-the-cool-things-dashbird-offers"&gt;
  &lt;/a&gt;
  So what are the cool things Dashbird offers?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZQAsOZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-dashboard-new-1024x575.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZQAsOZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-dashboard-new-1024x575.png" alt="dashbird serverless dashboard&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#endtoend-centralized-observability%C2%A0built-specifically-for-aws-and-serverless-systems"&gt;
  &lt;/a&gt;
  &lt;a href="https://dashbird.io/serverless-observability/"&gt;End-to-end centralized observability&lt;/a&gt; built specifically for AWS and serverless systems
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Purpose-built for serverless&lt;/strong&gt;, Dashbird collects monitoring data from AWS. Dashbird monitors multiple cloud components in &lt;strong&gt;AWS cloud&lt;/strong&gt;, such as Lambda functions, API Gateways, SQS queues, ECS containers, Kinesis, Step-Functions, and DynamoDB tables. &lt;strong&gt;Every datapoint&lt;/strong&gt; that exists in your cloud environment (logs, metrics, and traces), centralized under one roof. Dashbird makes it easy to &lt;strong&gt;visualize, search, query, and interrogate&lt;/strong&gt; all there is to know about your serverless application, from high level to a single transaction. Dashbird features a &lt;strong&gt;full-fledged log analytics&lt;/strong&gt; functionality that is powered by ElasticSearch. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2hCibNIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-observability-new-1024x576.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2hCibNIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-observability-new-1024x576.png" alt="dashbird serverless observability&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#realtime-automated-prebuilt-alarms%C2%A0and-analytics-for-all-your-metrics"&gt;
  &lt;/a&gt;
  &lt;a href="https://dashbird.io/failure-detection"&gt;Real-time automated prebuilt alarms&lt;/a&gt; and analytics for all your metrics
&lt;/h3&gt;

&lt;p&gt;Dashbird &lt;strong&gt;automatically detects errors, code exceptions, timeouts, cold starts, downstream service failures, and anomalies&lt;/strong&gt; from logs and metrics in real-time and &lt;strong&gt;alerts you immediately&lt;/strong&gt; when you should react to an incident via Slack, e-mail, SNS, and/or webhooks. You can easily set prebuilt and custom filters for any metric condition across your infrastructure -- all in one place -- in the Dashbird dashboard. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46Fu9yxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-alarms-new-1024x698.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46Fu9yxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-alarms-new-1024x698.png" alt="dashbird aws alarms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wellarchitected-actionable-insights%C2%A0encourage-continuous-improvement-and-compliance-with-industry-best-practices"&gt;
  &lt;/a&gt;
  &lt;a href="https://dashbird.io/serverless-well-architected-reports/"&gt;Well-Architected actionable insights&lt;/a&gt; encourage continuous improvement and compliance with industry best practices
&lt;/h3&gt;

&lt;p&gt;Dashbird features &lt;strong&gt;over&lt;/strong&gt; &lt;strong&gt;100 complex insight checks&lt;/strong&gt; continuously scanning your entire serverless environment against the &lt;strong&gt;AWS Well-Architected best practices&lt;/strong&gt;. You can immediately see &lt;strong&gt;how well your infrastructure is architected against each of the five pillars&lt;/strong&gt; (cost optimization, security, performance, operational excellence, and reliability) on the progress bars.&lt;/p&gt;

&lt;p&gt;Dashbird will let you know &lt;strong&gt;which incidents are affecting your system health&lt;/strong&gt; in each pillar and provides you with step-by-step guides for remediation. No need learn the lengthy AWS white papers and go through manual system audits anymore!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EnGlGvKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-waf-new-1024x577.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EnGlGvKz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/dashbird-waf-new-1024x577.png" alt="dashbird aws well architected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-set-up"&gt;
  &lt;/a&gt;
  Easy set up
&lt;/h3&gt;

&lt;p&gt;Dashbird requires &lt;strong&gt;no code changes&lt;/strong&gt; to your functions while still giving you end-to-end visibility. &lt;strong&gt;Setting up takes 2 minutes&lt;/strong&gt; and you run no risk of affecting your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-dashbird"&gt;
  &lt;/a&gt;
  About Dashbird:
&lt;/h2&gt;

&lt;p&gt;Built on three core pillars -- &lt;strong&gt;centralized observability, real-time automated alarms, and Well-Architected insights&lt;/strong&gt; -- Dashbird is a monitoring, debugging and intelligence platform designed to give developers the confidence to &lt;strong&gt;build, operate, improve, and scale&lt;/strong&gt; serverless applications on &lt;strong&gt;AWS environment&lt;/strong&gt; securely, fast and with ease. No more digging around in CloudWatch logs line by line and setting up alarms for hours (or weeks), enabling you to be more productive and focus on the important stuff -- developing your product and providing a seamless customer experience!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;The GARTNER COOL VENDOR badge is a trademark and service mark of Gartner, Inc. and/or its affiliates and is used herein with permission. All rights reserved. Gartner does not endorse any vendor, product or service depicted in its research publications and does not advise technology users to select only those vendors with the highest ratings or other designation. Gartner research publications consist of the opinions of Gartner's Research &amp;amp; Advisory organization and should not be construed as statements of fact. Gartner disclaims all warranties, expressed or implied, with respect to this research, including any warranties of merchantability or fitness for a particular purpose.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Linked List Data Structure Using Javascript</title>
      <author>Nikhil Bobade </author>
      <pubDate>Tue, 04 May 2021 14:33:34 +0000</pubDate>
      <link>https://dev.to/nikhil27b/linked-list-data-structure-using-javascript-2n09</link>
      <guid>https://dev.to/nikhil27b/linked-list-data-structure-using-javascript-2n09</guid>
      <description>&lt;h1&gt;
  &lt;a href="#linked-list"&gt;
  &lt;/a&gt;
  Linked List
&lt;/h1&gt;

&lt;p&gt;A Linked List is a linear data structure. The Linked List consisting of a group of nodes that together represent a sequence.&lt;/p&gt;

&lt;p&gt;Linked List has behaved like each node contains a connection to another link or another node. also linked list is the most used data structure after the array.&lt;br&gt;
1.Insert&lt;br&gt;
2.Delete&lt;br&gt;
3.Search&lt;br&gt;
4.Null&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#insert-"&gt;
  &lt;/a&gt;
  Insert :
&lt;/h4&gt;

&lt;p&gt;The insert method is used for adding the data to the LinkedList.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#delete-"&gt;
  &lt;/a&gt;
  Delete :
&lt;/h4&gt;

&lt;p&gt;The delete is deleting the given node or element from the linked list.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#search-"&gt;
  &lt;/a&gt;
  Search :
&lt;/h4&gt;

&lt;p&gt;A search returns a given node on the linked list.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#null-"&gt;
  &lt;/a&gt;
  Null :
&lt;/h4&gt;

&lt;p&gt;if the next element is not having a data or node then this condition was true and return null.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxfMrCYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv4z8yoqfuhkgc4cl4t7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxfMrCYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv4z8yoqfuhkgc4cl4t7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how a linked list works the 1st is head and after I go for the next node or data if he doesn't get the next data then return null.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#linkedlist-example-using-javascript-"&gt;
  &lt;/a&gt;
  LinkedList example using Javascript :
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LinkedListNode&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LinkedListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output :
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8dp4sK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbu8ycys7hn83qpxzwkt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8dp4sK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbu8ycys7hn83qpxzwkt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to more support me then buy me a &lt;a href="https://www.buymeacoffee.com/nikhilbobade27"&gt;coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Tools to automate Python Tests</title>
      <author>Niklas Tiede</author>
      <pubDate>Tue, 04 May 2021 14:09:27 +0000</pubDate>
      <link>https://dev.to/niklastiede/tools-to-automate-python-tests-3394</link>
      <guid>https://dev.to/niklastiede/tools-to-automate-python-tests-3394</guid>
      <description>&lt;p&gt;Heya fellows,&lt;/p&gt;

&lt;p&gt;The code of this post can be found on Github (see &lt;a href="https://github.com/NiklasTiede/tinyHTTPie/tree/6-Testing-and-CI"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;When projects grow a good test suite gives you confidence that new code you add don't cause parts of the application to break. It improves the a projects maintainability of the project. The complexity of small projects is low and only necessary when the size of the project increases. But for the sake of this tutorial we will write a small test to demonstrate the usage of &lt;code&gt;pytest&lt;/code&gt;, &lt;code&gt;tox&lt;/code&gt; and &lt;code&gt;github actions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will store the tests within a separate folder. Here's the current structure of the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── LICENSE
├── README.md
├── setup.py
├── tihttp.py
├── tests
│  ├── __init__.py
│  └── test_tihttp.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We place a &lt;code&gt;test_tihttp.py&lt;/code&gt; file within the &lt;code&gt;tests&lt;/code&gt; folder. It will contains the test suite. The &lt;code&gt;main()&lt;/code&gt; function which contains the logic for triggering the flags has to be imported from the &lt;code&gt;tihttp.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tihttp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_GET_body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capsys&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"-B"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"http://jsonplaceholder.typicode.com/todos?userId=1"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;captured&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;capsys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readouterr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;captured&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tests/jsonplaceholder.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We compare the expected output with a request against an API. The API should return the same response so it will give us feedback if our application performs GET requests successfully. We place a &lt;code&gt;jsonplaceholder.json&lt;/code&gt; file into the same folder which contained the expected output. We let &lt;code&gt;pytest&lt;/code&gt; execute the test. We install it prior use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install pytest
$ pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our test passes. To increase the tests verbosity &lt;code&gt;-v&lt;/code&gt; is a useful flag, furthermore I like to use &lt;code&gt;-s&lt;/code&gt; to see the captured output. Next we add pytest to our extra requirements in the &lt;code&gt;setup.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;extras_require&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'dev'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;'pytest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# pip install tihttp[dev]
&lt;/span&gt;    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us the possibility to install extra dependencies (testing, linting tools etc.) easily by adding a &lt;code&gt;[dev]&lt;/code&gt; to the package name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install .[dev]            # local install
$ pip install tihttp[dev]       # remote install, PyPI repo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We tested all of this with python 3.7.3. But how does our application behave when executed on a different interpreter version? So let's test it against different Python versions! We use &lt;code&gt;tox&lt;/code&gt;. It let's us run tests in multiple virtual envs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install tox
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tox needs a recipe to know which virtualenv/commands to create/execute. This recipe is named &lt;code&gt;tox.ini&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[tox]&lt;/span&gt;
&lt;span class="py"&gt;envlist&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;py36,py37,py38,py39&lt;/span&gt;

&lt;span class="nn"&gt;[testenv]&lt;/span&gt;
&lt;span class="py"&gt;deps&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="err"&gt;pytest&lt;/span&gt;
&lt;span class="py"&gt;commands&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="err"&gt;pytest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If some of the Python interpreters are missing on your system, install them from the deadsnakes archive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo add-apt-repository ppa:deadsnakes/ppa
$ sudo apt install python3.5 python3.6 python3.7 python3.8 python3.9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's test across different interpreters!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tox
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you wanna test against a specific environment or execute only one file, then type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tox -e py38
$ tox -e py38 -- test/main_test.py   # executes only a single test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, we did the test locally, but when working in a team using continuous integration is pretty convenient. We set a &lt;code&gt;integrate.yaml&lt;/code&gt; file up within a &lt;code&gt;.github/workflows&lt;/code&gt; directory to tell github actions what jobs to execute. The following github actions file will test across different platforms and Python versions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Python package&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.os }}&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.6&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.7&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.8&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.9&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;os&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;macos-latest&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;windows-latest&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Python ${{ matrix.python-version }}&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.python-version }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache pip&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/.cache/pip&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-pip-&lt;/span&gt;
            &lt;span class="s"&gt;${{ runner.os }}-&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;python -m pip install --upgrade pip&lt;/span&gt;
          &lt;span class="s"&gt;pip install flake8 pytest pytest-cov&lt;/span&gt;
          &lt;span class="s"&gt;pip install -r requirements.txt&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Lint with flake8&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;# stop the build if there are Python syntax errors or undefined names&lt;/span&gt;
          &lt;span class="s"&gt;flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics&lt;/span&gt;
          &lt;span class="s"&gt;# exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide&lt;/span&gt;
          &lt;span class="s"&gt;flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test with pytest&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;pytest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't be intimidated by the length of this job. It's just illustrating how powerful Github workflows can be. 🥰&lt;/p&gt;

</description>
      <category>testing</category>
      <category>python</category>
      <category>productivity</category>
      <category>devops</category>
    </item>
    <item>
      <title>Creating and Deploying React, Ember, and Vue Apps in Codesphere</title>
      <author>Saji Wang</author>
      <pubDate>Tue, 04 May 2021 14:09:15 +0000</pubDate>
      <link>https://dev.to/codesphere/creating-and-deploying-react-ember-and-vue-apps-in-codesphere-25hl</link>
      <guid>https://dev.to/codesphere/creating-and-deploying-react-ember-and-vue-apps-in-codesphere-25hl</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;At Codesphere, we aim to streamline the development process so that you can spend less time configuring and more time writing code. In this tutorial, we'll go over how easy it is to create and deploy different kinds of web applications, namely React, EmberJS, and Vue apps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;Before we can set up the environment for the web framework we want to use, we need to create the app in Codesphere. Luckily, doing so is incredibly easy!&lt;/p&gt;

&lt;p&gt;Simply navigate the "My Apps" page, press the "New App" button, and select Empty. You then choose your name and pricing plan, and Codesphere will create an empty app!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2o42ykx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zd8q2sdy81zixgp5du0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2o42ykx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zd8q2sdy81zixgp5du0.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;

&lt;p&gt;To create a react app, simply run the following command in your terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Replacing “my-app” with the name you want to use for your React project.&lt;/p&gt;

&lt;p&gt;To deploy your app, simply run&lt;br&gt;
&lt;code&gt;cd my-app &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can then press the “open app” button to see your deployed app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#emberjs"&gt;
  &lt;/a&gt;
  EmberJS
&lt;/h3&gt;

&lt;p&gt;Since EmberJS is a very high-level framework, it requires substantial computing power to install and deploy. Therefore, your Ember app will likely require one of Codesphere's paid subscription plans to run. You find out more about pricing here:&lt;br&gt;
&lt;a href="https://bit.ly/2RoXnfG"&gt;https://codesphere.com/pricing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before you can create your Ember app, you first need to install the Ember CLI, which can be done with the following command:&lt;br&gt;
&lt;code&gt;sudo npm install -g ember-cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once the CLI is installed, you can create a new app with:&lt;br&gt;
&lt;code&gt;ember new my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To deploy your app, you can then run:&lt;br&gt;
&lt;code&gt;cd my-app &amp;amp;&amp;amp; ember server - port 3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can then press the "open app" button to see your deployed app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h3&gt;

&lt;p&gt;Vue similarly requires you to install a CLI before you can create a project. This can be done with the following command:&lt;br&gt;
&lt;code&gt;sudo npm install -g @vue/cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can then create the Vue app with:&lt;br&gt;
&lt;code&gt;vue create my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Vue CLI will then allow you to configure your new app.&lt;br&gt;
Once your app is created, you need to create a config file in your root directory. This can be done with:&lt;br&gt;
&lt;code&gt;cd my-app &amp;amp;&amp;amp; touch vue.config.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, paste the following code in the &lt;code&gt;vue.config.js&lt;/code&gt; file, in order to allow the Vue app to run correctly within Codesphere:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  devServer: {
      port: 3000,
      disableHostCheck: true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, you can deploy your Vue app with:&lt;br&gt;
&lt;code&gt;npm run serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you have any questions, please comment or reach out to us at &lt;a href="mailto:support@codesphere.com"&gt;support@codesphere.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>vue</category>
      <category>ember</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>✔||🤢 Commit or Vomit  | nested ternary operator</title>
      <author> 🐤🥇 Jasper de Jager</author>
      <pubDate>Tue, 04 May 2021 13:52:52 +0000</pubDate>
      <link>https://dev.to/jmdejager/commit-or-vomit-nested-ternary-operator-1d02</link>
      <guid>https://dev.to/jmdejager/commit-or-vomit-nested-ternary-operator-1d02</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-ternary-operator"&gt;
  &lt;/a&gt;
  The ternary operator
&lt;/h1&gt;

&lt;p&gt;It's a delight to use them but should we use them as much as possible? what do you think about the next example? ✔||🤢&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;H&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;V&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;V&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#nested-ternary-operators-%E2%9C%94"&gt;
  &lt;/a&gt;
  nested ternary operators ✔||🤢?
&lt;/h4&gt;

&lt;p&gt;❤: Commit (I'd commit something like this)&lt;br&gt;
🏷: Vomit (we all know unicorns don't vomit)&lt;br&gt;
🦄: Like your post please continue this series!&lt;/p&gt;

&lt;p&gt;Let's vote! 😊&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@scienceinhd?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Science in HD&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/operator?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>discuss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using JavaScript Symbol.toStringTag for objects types description</title>
      <author>Cherif BOUCHELAGHEM</author>
      <pubDate>Tue, 04 May 2021 13:42:10 +0000</pubDate>
      <link>https://dev.to/cherif_b/using-javascript-tostringtag-for-objects-types-description-15hc</link>
      <guid>https://dev.to/cherif_b/using-javascript-tostringtag-for-objects-types-description-15hc</guid>
      <description>&lt;p&gt;A day ago I asked my developers friends:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to know a JavaScript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer"&gt;object literal&lt;/a&gt; type?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of the answers of the answers suggested to use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof"&gt;instanceof&lt;/a&gt;, while this answer works for objects created by using a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor"&gt;constructor&lt;/a&gt;, it can not work with objects literals or maybe for some reasons developers don't export the object constructor from the module but they provide a factory with object initializer instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-use-case"&gt;
  &lt;/a&gt;
  The use case:
&lt;/h2&gt;

&lt;p&gt;The question was about the following use case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;johndoe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;It is hard to determine if the object above is in certain type without checking the presence of all the properties, imagine if we have a more than 10 properties or more, it would be exhausting, right?&lt;br&gt;
It is obvious it would be good if we can know that the object is indeed in &lt;code&gt;User&lt;/code&gt; type just by a single call.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString"&gt;&lt;code&gt;Object.prototype.toString()&lt;/code&gt;&lt;/a&gt; gives the object type inside square brackets for the built-in types/objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '[object Number]'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cherif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '[object String]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cherif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '[object Number]'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '[object String]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But for a developer defined objects it gives a &lt;code&gt;[object Object]&lt;/code&gt; result, a generic object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;johndoe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '[object Object]'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '[object Object]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#symboltostringtag-to-the-rescue"&gt;
  &lt;/a&gt;
  Symbol.toStringTag to the rescue
&lt;/h2&gt;

&lt;p&gt;Fortunately with the introduction of ES6 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;&lt;code&gt;Symbol&lt;/code&gt;s&lt;/a&gt; a number of built-in symbols had seen the day make it possible to describe custom objects type by overriding &lt;code&gt;Object.prototype.toString()&lt;/code&gt; using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag"&gt;&lt;code&gt;Symbol.toStringTag&lt;/code&gt;&lt;/a&gt;, so to describe a type for our &lt;code&gt;user&lt;/code&gt; object we can do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;johndoe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toStringTag&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The string tag description&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '[object User]'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '[object User]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#read-the-string-using-symboltostringtag"&gt;
  &lt;/a&gt;
  Read the string using Symbol.toStringTag:
&lt;/h2&gt;

&lt;p&gt;I would advice to make the check using the &lt;code&gt;Symbol&lt;/code&gt; property by using &lt;code&gt;user[Symbol.toStringTag]&lt;/code&gt;, like this we have the possibility to override &lt;code&gt;toString&lt;/code&gt; function for other purposes, and we can just have &lt;code&gt;User&lt;/code&gt; string from the string tag instead of &lt;code&gt;[object User]&lt;/code&gt; example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;johndoe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toStringTag&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The string tag description&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toStringTag&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; "User"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; "John Doe"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the code example are in the following CodePen:&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href="https://codepen.io/cherifGsoul/pen/KKWPWpE"&gt;Symbol.stringTag&lt;/a&gt; by Mohamed Cherif Bouchelaghem&lt;br&gt;
  (&lt;a href="https://codepen.io/cherifGsoul"&gt;@cherifGsoul&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you find this article useful and helpful, let me know your thoughts in the comments below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>code</category>
      <category>tutorial</category>
      <category>example</category>
    </item>
    <item>
      <title>A Guide to Eslint</title>
      <author>Laurie</author>
      <pubDate>Tue, 04 May 2021 13:41:23 +0000</pubDate>
      <link>https://dev.to/laurieontech/a-guide-to-eslint-4mj7</link>
      <guid>https://dev.to/laurieontech/a-guide-to-eslint-4mj7</guid>
      <description>&lt;p&gt;I spent the last week working on ESLint configuration and ensuring that syntax checks were built into the developer workflow. In the process, I read a bunch of different docs, which is usually my signal that an "all in one" blog post needs to be written! So here we go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-eslint"&gt;
  &lt;/a&gt;
  What is Eslint?
&lt;/h2&gt;

&lt;p&gt;For starters, ESLint is a tool that statically analyzes your code. Typically, it's used to ensure consistent syntax across a project with multiple collaborators. You've likely used ESLint without realizing it because it was already configured in your project. Ever seen those red squiggly lines in VS code? Those are often courtesy of Eslint.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that ESLint is incredibly powerful. It has the ability to not only analyze code, but transform it. We'll get to that later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;ESLint allows you to set project-level rules using an &lt;code&gt;.eslintrc&lt;/code&gt; file. Since every team and project are slightly different, the control you have over your ruleset is quite extensive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rules"&gt;
  &lt;/a&gt;
  Rules
&lt;/h3&gt;

&lt;p&gt;For every rule, let's say you're setting the &lt;code&gt;no-console&lt;/code&gt; rule, you can decide whether the rule should be &lt;code&gt;off&lt;/code&gt;, or set to &lt;code&gt;warn&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt;. Like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-console&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the &lt;code&gt;no-console&lt;/code&gt; rule determines whether console log statements should exist in the codebase. If the rule is set to &lt;code&gt;off&lt;/code&gt; then console.log can be littered through your code and the linter won't care. If it's set to &lt;code&gt;warn&lt;/code&gt;, the linter will let you know the there are console.log statements in the code, but it won't be a showstopper. But if the rule is set to &lt;code&gt;error&lt;/code&gt;, linting will fail if a console.log statement shows up in the code.&lt;/p&gt;

&lt;p&gt;While this is helpful, some rules need to get more specific. For example, ESLint has a rule called &lt;code&gt;import/no-extraneous-dependencies&lt;/code&gt;. The goal of this rule is to catch situations in which you've imported a dependency into your file that is not included in your project's package.json.&lt;/p&gt;

&lt;p&gt;While you could use &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, or &lt;code&gt;error&lt;/code&gt;, it's not as helpful as it could be. That's because there are different types of dependencies, like &lt;a href="https://laurieontech.com/posts/package-json/#devdependencies"&gt;devDependencies and peerDependencies&lt;/a&gt;. A more nuanced configuration of the rule would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;import/no-extraneous-dependencies&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;devDependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;optionalDependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;peerDependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will only show a linting error when core dependencies are imported but not included. Any other dependency type can be safely ignored.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extends"&gt;
  &lt;/a&gt;
  Extends
&lt;/h3&gt;

&lt;p&gt;You may be thinking that this seems a bit tedious. Do you really want to go through and determine your preferences for all of these individual rules? You may, but probably not. In fact, in most cases, you'll only need to configure a handful of individual rules; the rules that differ from the ruleset you're extending.&lt;/p&gt;

&lt;p&gt;Many projects use the core ESLint rules, as shown here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// highlight-line&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-console&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, ESLint also allows you to extend rulesets that are exported by other projects. So you may opt to use the React recommendations, for example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#root"&gt;
  &lt;/a&gt;
  Root
&lt;/h3&gt;

&lt;p&gt;Another interesting thing about ESLint is that it follows a cascade model. Suppose you're using a monorepo structure with multiple packages that each have their own &lt;code&gt;.eslintrc&lt;/code&gt; file. You can include a configuration file in the root of your repo. In that case, ESLint will check the configuration file closest to a given line of code first and move up the tree, merging as it goes.&lt;/p&gt;

&lt;p&gt;Typically, the top-level directory will include &lt;code&gt;root: true&lt;/code&gt; so ESLint knows it can stop looking for additional config files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// highlight-line&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-console&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this rule can exist in any &lt;code&gt;.eslintrc&lt;/code&gt;. So, if you wanted to include a standalone package in your monorepo that should not comply with the top-level &lt;code&gt;.eslintrc&lt;/code&gt;, you can do that. This is a great trick so that you don't need to supersede all of the rules at the top level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overrides"&gt;
  &lt;/a&gt;
  Overrides
&lt;/h3&gt;

&lt;p&gt;Alternatively, you may want to supersede individual files that wouldn't have their own &lt;code&gt;.eslintrc&lt;/code&gt;. In that case, you can use &lt;code&gt;overrides&lt;/code&gt;, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-console&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// highlight-start&lt;/span&gt;
  &lt;span class="na"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;example/*.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-console&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// highlight-end&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  CLI
&lt;/h2&gt;

&lt;p&gt;Now that you have ESLint configured, what can it actually do?&lt;/p&gt;

&lt;p&gt;If you run an ESLint command it will go through the files in your project and spit out all the warnings and errors to the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;eslint &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may remember that I mentioned up top that ESLint can perform transforms. Running ESLint with the &lt;code&gt;--fix&lt;/code&gt; flag means it will attempt to change any syntax that errors out! It's worth noting that it can't fix every error it finds, but it can handle some of them.&lt;/p&gt;

&lt;p&gt;You can also use the &lt;code&gt;--debug&lt;/code&gt; flag which will show you what rules ESLint is using. This is helpful if you're attempting to determine why something is failing/passing that shouldn't be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scripts"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h2&gt;

&lt;p&gt;While running ESLint locally is helpful, the point of ESLint is repeatability and consistency in your project. To get that you likely want to add ESLint commands to your package.json scripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint 'packages/**/*.{js,jsx,ts,tsx}'"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you do that you can make use of things like husky! We'll talk about that next time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wow"&gt;
  &lt;/a&gt;
  Wow
&lt;/h2&gt;

&lt;p&gt;There is a lot in this post but there is, even more, I didn't cover. In the scripts example, I used a glob, there are flags like &lt;code&gt;--quiet&lt;/code&gt;, you can even ignore certain files throughout your project. But this is a good start towards helping you understand the setup of an existing project or how to start setting up your own.&lt;/p&gt;

&lt;p&gt;And who knows, an ESLinterror may lead to finding and solving a bug! It did for me 😃.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building Fullstack eCommerce Apps with RedwoodJS, Shopify, and StepZen</title>
      <author>anthony-campolo</author>
      <pubDate>Tue, 04 May 2021 13:38:45 +0000</pubDate>
      <link>https://dev.to/stepzen/building-fullstack-ecommerce-apps-with-redwoodjs-shopify-and-stepzen-46m4</link>
      <guid>https://dev.to/stepzen/building-fullstack-ecommerce-apps-with-redwoodjs-shopify-and-stepzen-46m4</guid>
      <description>&lt;p&gt;&lt;a href="http://redwoodjs.com/"&gt;RedwoodJS&lt;/a&gt; is a fullstack, serverless web application framework for building and deploying Jamstack applications. Imagine a React frontend, statically delivered from a CDN, talking via GraphQL to a backend running on AWS Lambdas, all deployable with &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stepzen.com"&gt;StepZen&lt;/a&gt; makes it easy to build and deploy a GraphQL backend that you can connect your RedwoodJS site to. It allows you to pull data from any backend including REST APIs and databases and connect them together into a single GraphQL API endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fKESh7xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nu256ws5e8wodvtyvgw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKESh7xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nu256ws5e8wodvtyvgw.png" alt="StepZen Redwood Cover Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will create and deploy a GraphQL API using StepZen that connects to a Shopify backend and then consume that API in a React frontend built with RedwoodJS and deployed on a static hosting provider. Redwood's &lt;code&gt;api&lt;/code&gt; side is auto-configured with a GraphQL handler that can be deployed with serverless functions, enabling &lt;a href="https://stepzen.com/blog/how-to-secure-api-routes-for-jamstack-sites"&gt;secure API routes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;We'll use &lt;a href="https://classic.yarnpkg.com/en/docs/install"&gt;Yarn&lt;/a&gt;, which is a requirement for RedwoodJS, to create the basic structure of our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create redwood-app stepzen-redwood-shopify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a new directory, &lt;code&gt;stepzen-redwood-shopify&lt;/code&gt;, containing several subdirectories and files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fire-it-up"&gt;
  &lt;/a&gt;
  Fire it up
&lt;/h3&gt;

&lt;p&gt;Navigate into your project and start the development server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;stepzen-redwood-shopify
yarn rw dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the project builds, your browser should automatically open to &lt;code&gt;http://localhost:8910&lt;/code&gt; to show the web app running locally.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fO-u_kE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp05gffv8yp1clwn8m98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fO-u_kE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp05gffv8yp1clwn8m98.png" alt="the default Redwood site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Lambda functions are running on &lt;code&gt;http://localhost:8911&lt;/code&gt; as well as being proxied to &lt;code&gt;http://localhost:8910/.redwood/functions/*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhKgv29g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sosrq710r7hawawbb2aj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhKgv29g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sosrq710r7hawawbb2aj.png" alt="Redwood Lambda Functions running locally"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-project-structure"&gt;
  &lt;/a&gt;
  Default Project Structure
&lt;/h3&gt;

&lt;p&gt;If you open the project, you should see the following file and folders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── api
│   ├── src
│   │   ├── functions
│   │   │   └── graphql.js
│   │   ├── graphql
│   │   ├── lib
│   │   │   └── db.js
│   │   └── services
└── web
    ├── public
    │   ├── README.md
    │   ├── favicon.png
    │   └── robots.txt
    └── src
        ├── components
        ├── layouts
        ├── pages
        │   ├── FatalErrorPage
        │   │   └── FatalErrorPage.js
        │   └── NotFoundPage
        │       └── NotFoundPage.js
        ├── App.js
        ├── Routes.js
        ├── index.css
        └── index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stepzen-side"&gt;
  &lt;/a&gt;
  StepZen Side
&lt;/h2&gt;

&lt;p&gt;Now let's set up the GraphQL API within StepZen. A StepZen project contains the following files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;index.graphql&lt;/code&gt; tells StepZen how to assemble the various type definition files into a complete GraphQL schema.&lt;/li&gt;
&lt;li&gt;One or more GraphQL Schema Definition Language (SDL) files ending in &lt;code&gt;.graphql&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;config.yaml&lt;/code&gt; contains the keys and other credential information that StepZen needs to access your backend data sources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To setup our StepZen API, let's create a &lt;code&gt;stepzen&lt;/code&gt; directory within our Redwood project's API folder. Within the &lt;code&gt;stepzen&lt;/code&gt; folder, create a &lt;code&gt;schema&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;api/stepzen api/stepzen/schema
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every StepZen project requires an &lt;code&gt;index.graphql&lt;/code&gt; that ties together all of our schemas. Create an &lt;code&gt;index.graphql&lt;/code&gt; file for our &lt;code&gt;schema&lt;/code&gt; and a &lt;code&gt;products.graphql&lt;/code&gt; file for our &lt;code&gt;Product&lt;/code&gt; type and &lt;code&gt;Query&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;api/stepzen/schema/products.graphql api/stepzen/index.graphql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-productsgraphql-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;products.graphql&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Let's create a product GraphQL type that will represent a product being returned by the Shopify API. &lt;code&gt;products.graphql&lt;/code&gt; will have a &lt;code&gt;Product&lt;/code&gt; type and a &lt;code&gt;products&lt;/code&gt; query that returns an array of &lt;code&gt;Product&lt;/code&gt; objects. Our product type only has a few properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="c"&gt;# api/stepzen/shopify/products.graphql&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;products&lt;/code&gt; query will be connected to the Shopify REST API using StepZen's custom &lt;code&gt;@rest&lt;/code&gt; directive. The &lt;code&gt;@rest&lt;/code&gt; directive accepts the URL of the REST &lt;code&gt;endpoint&lt;/code&gt; that we'd like to connect it to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="c"&gt;# api/stepzen/shopify/products.graphql&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;resultroot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="err"&gt;[]"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;//$&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;api_password&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nv"&gt;$store_name&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="n"&gt;myshopify&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="err"&gt;/2020-01/&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;shopify_config&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at what each of these configuration properties does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;resultroot&lt;/code&gt; - tells StepZen the root of the data in the JSON object returned by the REST API, in this case it is an array of products &lt;code&gt;products[]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;endpoint&lt;/code&gt; - the REST URL you want to call. Values preceeded by the &lt;code&gt;$&lt;/code&gt; in this string are replaced by query arguments or configuration properties.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;configuration&lt;/code&gt; - these are the details within the &lt;code&gt;config.yaml&lt;/code&gt; file and can include anything you want to pass down to headers (ex. Authorization) and/or stuff that you do not want to write in your SDL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-indexgraphql-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.graphql&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Our &lt;code&gt;schema&lt;/code&gt; in &lt;code&gt;index.graphql&lt;/code&gt; ties together all of our other schema files. For this example, we just have the &lt;code&gt;products.graphql&lt;/code&gt; file included in our &lt;code&gt;@sdl&lt;/code&gt; directive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="c"&gt;# api/stepzen/index.graphql&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;schema&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;sdl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphql&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;index.graphql&lt;/code&gt; tells StepZen how to assemble the various type definition files into a complete GraphQL schema. The &lt;code&gt;@sdl&lt;/code&gt; directive is a StepZen directive that specifies the list of files to assemble. It includes a comma-separated list of &lt;code&gt;.graphql&lt;/code&gt; files in your project folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-configyaml-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;config.yaml&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;config.yaml&lt;/code&gt; contains various configurations that can include the keys and other credential information that StepZen needs to access your backend data sources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;api/stepzen/config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file should be added to &lt;code&gt;.gitignore&lt;/code&gt; as it likely contains secret information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;.idea
.DS_Store
.env
.netlify
.redwood
dev.db
dist
dist-babel
node_modules
yarn-error.log
web/public/mockServiceWorker.js
config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To connect a Shopify account, we'll need to supply our &lt;code&gt;api_key&lt;/code&gt;, &lt;code&gt;api_password&lt;/code&gt;, and &lt;code&gt;store_name&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;configurationset&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;configuration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shopify_config&lt;/span&gt;
      &lt;span class="na"&gt;api_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;YOUR_API_KEY&amp;gt;&lt;/span&gt;
      &lt;span class="na"&gt;api_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;YOUR_API_PASSWORD&amp;gt;&lt;/span&gt;
      &lt;span class="na"&gt;store_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;YOUR_STORE_NAME&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get this information in your Shopify account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-our-stepzen-endpoint"&gt;
  &lt;/a&gt;
  Deploy Our StepZen Endpoint
&lt;/h3&gt;

&lt;p&gt;Now that our schema has been created, we can use the StepZen CLI to install it. If you have not already installed and configured the StepZen CLI, you can follow the &lt;a href="https://my.stepzen.com/docs/quickstart/setup"&gt;instructions here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api/stepzen
stepzen start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will deploy the schema to StepZen and open a GraphQL explorer on &lt;code&gt;localhost:5000&lt;/code&gt; that will allow you to test the schema. It will also watch the directory or changes so that any changes that you make to your schema code will be automatically uploaded and redeployed.&lt;/p&gt;

&lt;p&gt;Note that if this is the first time you deployed this schema, you'll be asked to give it a name in the format &lt;code&gt;[folder-name]/[endpoint-name]&lt;/code&gt;. We can name our &lt;code&gt;api/shopify&lt;/code&gt;. Once the site deploys, take note of the endpoint URL for your GraphQL API. You can get this in the console. It will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Deploying to StepZen...... &lt;span class="k"&gt;done

&lt;/span&gt;Successfully deployed api/shopify at 4:22:19 PM

Your endpoint is available at https://biggs.stepzen.net/api/shopify/__graphql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#query-the-graphql-endpoint"&gt;
  &lt;/a&gt;
  Query the GraphQL Endpoint
&lt;/h3&gt;

&lt;p&gt;Let's test our GraphQL API by using the GraphQL explorer to query it. The following &lt;code&gt;ProductsQuery&lt;/code&gt; returns an array of &lt;code&gt;Product&lt;/code&gt; objects with the &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, and &lt;code&gt;handle&lt;/code&gt; for each product.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ProductsQuery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've populated some products in Shopify, you should see a query result similar to the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t2W5TKFH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhbqznno6y5x9kghzy55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t2W5TKFH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhbqznno6y5x9kghzy55.png" alt="product query results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we've created our API, we need to connect Redwood with StepZen to get the data into our web app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-redwood-api-side"&gt;
  &lt;/a&gt;
  The Redwood API Side
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;api/src&lt;/code&gt; directory contains all the other backend code for a Redwood app and includes four directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;functions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;graphql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;services&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;functions&lt;/code&gt; directory contains a &lt;code&gt;graphql.js&lt;/code&gt; file auto-generated by Redwood that is required to use the GraphQL API. Since we will not use the Prisma client or a database that Redwood comes preconfigured for, we can replace the default template with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api/src/functions/graphql.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createGraphQLHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;makeMergedSchema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;makeServices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@redwoodjs/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;schemas&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/graphql/**/*.{js,ts}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/services/**/*.{js,ts}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGraphQLHandler&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;makeMergedSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;schemas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;makeServices&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-productssdljs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;products.sdl.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;graphql&lt;/code&gt; directory contains &lt;code&gt;products.sdl.js&lt;/code&gt; with your GraphQL schema written in the Schema Definition Language. This will ensure that our Redwood API will have a &lt;code&gt;schema&lt;/code&gt; that matches our &lt;code&gt;schema&lt;/code&gt; in &lt;code&gt;products.graphql&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;api/src/graphql/products.sdl.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The schema includes a &lt;code&gt;Product&lt;/code&gt; type, and each &lt;code&gt;Product&lt;/code&gt; has an &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;handle&lt;/code&gt;, and &lt;code&gt;title&lt;/code&gt; just like our StepZen schema. The &lt;code&gt;products&lt;/code&gt; query returns an array of &lt;code&gt;Product&lt;/code&gt; objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api/src/graphql/products.sdl.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  type Product {
    id: ID
    handle: String
    title: String
  }

  type Query {
    products: [Product]
  }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-clientjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;client.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;lib&lt;/code&gt; directory contains two files by default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;db.js&lt;/code&gt; for importing the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client"&gt;Prisma client&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;logger.js&lt;/code&gt; for using the &lt;a href="https://redwoodjs.com/docs/logger"&gt;Redwood logger&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Redwood's &lt;code&gt;web&lt;/code&gt; side includes Apollo Client by default, its &lt;code&gt;api&lt;/code&gt; side does not include any built in mechanism for making HTTP requests. There are two common solutions to this for Redwood applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first solution, demonstrated in the Redwood documentation, includes using &lt;a href="https://redwoodjs.com/cookbook/using-a-third-party-api#the-service"&gt;&lt;code&gt;node-fetch&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We will follow the model of numerous community projects that have used &lt;code&gt;graphql-request&lt;/code&gt; to connect to services such as &lt;a href="https://community.redwoodjs.com/t/what-dbs-does-redwood-support/143/14"&gt;Contentful&lt;/a&gt;, &lt;a href="https://community.redwoodjs.com/t/how-can-i-wire-up-a-graphql-api-to-redwoodjs/1112"&gt;AppSync&lt;/a&gt;, &lt;a href="https://community.redwoodjs.com/t/building-a-minimum-viable-stack-with-redwoodjs-and-faunadb/1048/11"&gt;Hasura&lt;/a&gt;, and &lt;a href="https://community.redwoodjs.com/t/building-a-minimum-viable-stack-with-redwoodjs-and-faunadb/1048"&gt;FaunaDB&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we need to install &lt;code&gt;graphql-request&lt;/code&gt; as a dependency on the &lt;code&gt;api&lt;/code&gt; side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn workspace api add graphql-request
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we will not be using the Prisma Client we can rename &lt;code&gt;db.js&lt;/code&gt; to &lt;code&gt;client.js&lt;/code&gt; and include the following code. This code uses &lt;code&gt;graphql-request&lt;/code&gt; to connect to StepZen and pass our StepZen API key in the headers and the query being sent to the API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api/src/lib/client.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_ENDPOINT&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphQLClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apikey &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphQLClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;endpoint&lt;/code&gt; is set to the url generated when we deployed our API with &lt;code&gt;stepzen start&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;authorization&lt;/code&gt; includes your StepZen API key appended to &lt;code&gt;apikey&lt;/code&gt;. You can get your API key on your &lt;a href="https://my.stepzen.com/account"&gt;my account page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-raw-env-endraw-file"&gt;
  &lt;/a&gt;
  Create &lt;code&gt;.env&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;Let's create the &lt;code&gt;.env&lt;/code&gt; file that will contain our StepZen API key and endpoint URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;API_ENDPOINT=&amp;lt;YOUR_API_ENDPOINT&amp;gt;
API_KEY=&amp;lt;YOUR_API_KEY&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-productsjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;products.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;services&lt;/code&gt; directory we will create a &lt;code&gt;products&lt;/code&gt; directory with a &lt;code&gt;products.js&lt;/code&gt; service. This file will be the one that sends the GraphQL query to our API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;api/src/services/products
&lt;span class="nb"&gt;touch &lt;/span&gt;api/src/services/products/products.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will include code for querying data with GraphQL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// api/src/services/products/products.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/lib/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_PRODUCTS_QUERY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
    query getProducts {
      products {
        title
        id
        handle
      }
    }
  `&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GET_PRODUCTS_QUERY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;GET_PRODUCTS_QUERY&lt;/code&gt; is sent with the &lt;code&gt;GraphQLClient&lt;/code&gt; imported from &lt;code&gt;src/lib/client&lt;/code&gt;. The query is asking for the list of &lt;code&gt;products&lt;/code&gt; and their &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, and &lt;code&gt;handle&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-redwood-web-side"&gt;
  &lt;/a&gt;
  The Redwood Web Side
&lt;/h2&gt;

&lt;p&gt;Now that the API and query are set up, we need to connect the web interface to display the returned data. The &lt;code&gt;web&lt;/code&gt; side contains a &lt;code&gt;ProductsCell&lt;/code&gt; for fetching &lt;code&gt;products&lt;/code&gt; and a &lt;code&gt;HomePage&lt;/code&gt; for rendering the cell.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-productscell-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;ProductsCell&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We can use yarn to create the &lt;code&gt;ProductsCell.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw g cell products
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ProductsQuery&lt;/code&gt; returns the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, and &lt;code&gt;handle&lt;/code&gt; of each &lt;code&gt;Product&lt;/code&gt;. This will send the query to our &lt;code&gt;api&lt;/code&gt; side, which in turn sends a query to our StepZen API. Once the results are returned, they will be output on the page (we've also added some very basic handling of the loading, empty and failure states).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// web/src/components/ProductsCell/ProductsCell.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QUERY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  query ProductsQuery {
    products {
      id
      title
      handle
    }
  }
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Almost there...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;WE NEED PRODUCTS&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Failure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-homepage-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;HomePage&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Finally, let's create the home page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw g page home /
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need to do in this file is import &lt;code&gt;ProductsCell&lt;/code&gt; to display the information fetched by the cell's query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// web/src/pages/HomePage/HomePage.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ProductsCell&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/components/ProductsCell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;StepZen+Redwood and Shopify&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Products&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProductsCell&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMTlvkWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj4pvqmrlil8wwsewlqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMTlvkWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj4pvqmrlil8wwsewlqr.png" alt="05-home-page-localhost"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finished-project-structure"&gt;
  &lt;/a&gt;
  Finished Project Structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── api
│   ├── src
│   │   ├── functions
│   │   │   └── graphql.js
│   │   ├── graphql
│   │   │   └── products.sdl.js
│   │   ├── lib
│   │   │   └── client.js
│   │   └── services
│   │       └── products
│   │           └── products.js
│   └── stepzen
│       ├── shopify
│       │   └── products.graphql
│       └── index.graphql
└── web
    ├── public
    │   ├── README.md
    │   ├── favicon.png
    │   └── robots.txt
    └── src
        ├── components
        │   └── ProductsCell
        │       ├── ProductsCell.js
        │       ├── ProductsCell.mock.js
        │       ├── ProductsCell.stories.js
        │       └── ProductsCell.test.js
        ├── layouts
        ├── pages
        │   ├── FatalErrorPage
        │   │   └── FatalErrorPage.js
        │   ├── HomePage
        │   │   └── HomePage.js
        │   └── NotFoundPage
        │       └── NotFoundPage.js
        ├── App.js
        ├── Routes.js
        ├── index.css
        └── index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-to-netlify"&gt;
  &lt;/a&gt;
  Deploy to Netlify
&lt;/h2&gt;

&lt;p&gt;Redwood provides helpful setup commands to deploy to various hosting providers. We will deploy our project with &lt;a href="https://redwoodjs.com/docs/deploy#netlify-deploy"&gt;Netlify&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Depending on your needs you can configure your project to be deploy on &lt;a href="https://redwoodjs.com/docs/deploy#vercel-deploy"&gt;Vercel&lt;/a&gt;, &lt;a href="https://community.redwoodjs.com/t/using-render-com-instead-of-netlify-and-heroku/728/4"&gt;Render&lt;/a&gt;, or &lt;a href="https://community.redwoodjs.com/t/self-host-on-heroku/1765/4"&gt;Heroku&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you're particularly adventurous and enjoy configuring Linux servers you can even host it yourself with &lt;a href="https://redwoodjs.com/cookbook/self-hosting-redwood"&gt;PM2 and Nginx&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you're a little less adventurous but still want some servers in your life you can run a Docker container with &lt;a href="https://community.redwoodjs.com/t/selfhosting-redwood-using-dokku/1998"&gt;Dokku&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#setup-command"&gt;
  &lt;/a&gt;
  Setup command
&lt;/h3&gt;

&lt;p&gt;The following command will generate the configuration file needed to deploy to Netlify.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn rw setup deploy netlify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This generates the following &lt;code&gt;netlify.toml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build]&lt;/span&gt;
  &lt;span class="py"&gt;command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"yarn rw deploy netlify"&lt;/span&gt;
  &lt;span class="py"&gt;publish&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"web/dist"&lt;/span&gt;
  &lt;span class="py"&gt;functions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"api/dist/functions"&lt;/span&gt;

&lt;span class="nn"&gt;[dev]&lt;/span&gt;
  &lt;span class="py"&gt;command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"yarn rw dev"&lt;/span&gt;

&lt;span class="nn"&gt;[[redirects]]&lt;/span&gt;
  &lt;span class="py"&gt;from&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/*"&lt;/span&gt;
  &lt;span class="py"&gt;to&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/index.html"&lt;/span&gt;
  &lt;span class="py"&gt;status&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lets Netlify know that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your &lt;code&gt;build&lt;/code&gt; command is &lt;code&gt;yarn rw deploy netlify&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;publish&lt;/code&gt; directory for your assets is &lt;code&gt;web/dist&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Your &lt;code&gt;functions&lt;/code&gt; will be in &lt;code&gt;api/dist/functions&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All that's left to do is push the project to a repository like GitHub and connect that to your Netlify account. Netlify will build and deploy the project for you using the settings provided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to Go From Here
&lt;/h2&gt;

&lt;p&gt;Our example was purposefully simple, but the next steps would be to build out a more complete Shopify schema and deploy it to StepZen to get all the data that Shopify provides. We'd also want to build a more complete frontend to display our products. If you'd like to learn more about StepZen and how to build a schema, visit the &lt;a href="https://my.stepzen.com"&gt;StepZen docs&lt;/a&gt;. To learn more about how to configure Redwood and build the frontend, visit the &lt;a href="https://redwoodjs.com/docs/introduction"&gt;Redwood docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find more example repositories at &lt;a href="http://github.com/stepzen-samples"&gt;StepZen Samples&lt;/a&gt;. If you're not already signed up for StepZen, you can sign up &lt;a href="https://www.stepzen.com/request-invite"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>redwoodjs</category>
      <category>shopify</category>
      <category>ecommerce</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Introduction to NextJS</title>
      <author>Olena Drugalya</author>
      <pubDate>Tue, 04 May 2021 13:20:09 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/introduction-to-nextjs-3gi4</link>
      <guid>https://dev.to/olenadrugalya/introduction-to-nextjs-3gi4</guid>
      <description>&lt;p&gt;This blog post is an easy introduction to NextJS and it's features.&lt;br&gt;
However, before starting to read this blog post, you must be familiar with &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-nextjs"&gt;
  &lt;/a&gt;
  What is NextJS?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NextJS&lt;/strong&gt; is a React framework, which means is a platform for developing software applications by using React library. &lt;br&gt;
It has a lot of features which make development of React applications easier. &lt;/p&gt;

&lt;p&gt;As a programmer, we don’t need to start from scratch when there are already tools designed to help us with our projects. Frameworks are software that is developed and used by developers to build applications, so NextJS is one of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-to-use-nextjs"&gt;
  &lt;/a&gt;
  Why to Use NextJS?
&lt;/h2&gt;

&lt;p&gt;This question appeared in my head many times before I wasn't familiar with NextJS. I was pretty sure that React library itself is enough to build an application. But as I was developing my web developer's skills and started to build highly-scaled large applications, I had to import many additional libraries together with React (for example, for routing). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NextJS&lt;/strong&gt; makes the development of large React application easier, since it provides many additional features, which we will discuss below in details. This framework solves many common problems and simply makes the life of React developer easier :) We still write React code and use React features, but also together with that we are provided by lots of built-in features to solve common problems and clear instructions how to use them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-nextjs"&gt;
  &lt;/a&gt;
  Key Features of NextJS
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NextJS&lt;/strong&gt; offers many benefits for the React developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;page-based routing system (with support for dynamic routes) &lt;br&gt;
With NextJS we don't need to care about writing a code for routers for the pages, we just create a page in a special folder and NextJS provides it with routing, simple as that :)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pre-rendering, both static generation (SSG) and server-side rendering (SSR) are supported&lt;br&gt;
Server-side rendering (SSR) is preparing of content of a page on a server, while one-page React application uses client-side rendering (CSR). The problem with CSR is that it's not actually SEO friendly, because search engines will not see the actual content of the page. By using SSR in NextJS we can avoid such issues as flickering page while data fetching and our website content will be SEO friendly. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;built-in CSS and Sass support, and support for any CSS-in-JS library&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;development environment with Fast Refresh support&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;full-stack capabilities&lt;br&gt;
&lt;strong&gt;NextJS&lt;/strong&gt; makes it easier for React developers to add back-end code to the project. It very easy here to add our own code for storing data, getting data, authentication etc. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all that being said, I highly recommend you to consider using this framework and if you have already decided to learn it - congratulations, you made a good choice :)&lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>react</category>
    </item>
  </channel>
</rss>
