<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build and Test React app with GitHub Actions</title>
      <author>Aditya Chukka</author>
      <pubDate>Wed, 19 May 2021 03:13:09 +0000</pubDate>
      <link>https://dev.to/achukka/build-and-test-react-app-with-github-actions-2jb2</link>
      <guid>https://dev.to/achukka/build-and-test-react-app-with-github-actions-2jb2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3GG4TGtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffcb0neehajy9y09qbny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3GG4TGtj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffcb0neehajy9y09qbny.png" alt="Cover Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, we will see how to setup &lt;a href="https://github.blog/2019-10-01-new-workflow-editor-for-github-actions/"&gt;GitHub Actions&lt;/a&gt; to build and test React Applications&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h2&gt;

&lt;p&gt;GitHub Actions helps developer automate tasks with in the software development lifecycle. These actions are event-driven, for example, when someone creates a pull request for repository, the developer can run a command to run unit tests.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference: &lt;a href="https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions"&gt;GitHub Actions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#git-workflow"&gt;
  &lt;/a&gt;
  Git Workflow
&lt;/h2&gt;

&lt;p&gt;A Git Workflow is a configurable automated process that can run one or more jobs. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reference: &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#:~:text=A%20workflow%20is%20a%20configurable,to%20define%20your%20workflow%20configuration.&amp;amp;text=GitHub%20Actions%20is%20not%20available,using%20legacy%20per%2Drepository%20plans."&gt;GitHub Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GitHub provides a way to setup one or more workflows per project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-can-i-use-multiple-workflows-"&gt;
  &lt;/a&gt;
  Where can I use multiple workflows ?
&lt;/h3&gt;

&lt;p&gt;Following are some examples I can think of &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dev workflow vs Prod workflow

&lt;ul&gt;
&lt;li&gt;Your API keys and dependencies could be different&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Linting workflow vs Unit Testing Workflow

&lt;ul&gt;
&lt;li&gt;Linting is not mandatory for Unit Testing to work&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Tests are written in language different from actual application&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;In one of my projects, I wrote the REST API in dotnet where as the integration tests were written in python.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-a-workflow"&gt;
  &lt;/a&gt;
  Setting up a workflow
&lt;/h3&gt;

&lt;p&gt;In this section, we will setup an &lt;code&gt;npm&lt;/code&gt; workflow for our react project. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At the time of publishing this article there is no suggested workflow for React Applications&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To setup a workflow &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the &lt;code&gt;Actions&lt;/code&gt; Tab in your repository&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;New Workflow&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;set up a workflow yourself&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You should see something like this&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--66pbhi9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j50mwr0ltv6h9rgiwl1b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--66pbhi9k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j50mwr0ltv6h9rgiwl1b.png" alt="github_workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The default workflow already configures most of the variables for us&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's update the workflow to work with react app&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rename the yaml to &lt;code&gt;build_test_react.yml&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;repo&lt;span class="o"&gt;}&lt;/span&gt;/.github/workflows/build_test_react.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remove &lt;a href="https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/"&gt;workflow_dispatch&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We do not need it for the purpose of this article.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rename &lt;code&gt;build&lt;/code&gt; to &lt;code&gt;build_test&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Add a &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategy"&gt;strategy&lt;/a&gt; block to jobs&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We use this block to specify node versions
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;12.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;14.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;15.x&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In the &lt;code&gt;steps&lt;/code&gt; block we can specify what commands (step) we can run. But before that we need to specify the version of node to be used&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Add a block to specify node version through &lt;code&gt;${{ matrix.node-version }}&lt;/code&gt; and give it a name
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Use Node.js ${{ matrix.node-version }}&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.node-version }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Finally we can specify the build and test commands we want to run
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci, build and test&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;npm ci&lt;/span&gt;
    &lt;span class="s"&gt;npm run build --if-present&lt;/span&gt;
    &lt;span class="s"&gt;npm test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-raw-npm-ci-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;npm ci&lt;/code&gt; ?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;npm ci&lt;/code&gt; is similar to &lt;code&gt;npm install&lt;/code&gt; except that it can be used while testing, continuous integration and deployment. However it needs &lt;code&gt;package-lock.json&lt;/code&gt; or &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;. &lt;br&gt;
You find more details in npm &lt;a href="https://docs.npmjs.com/cli/v7/commands/npm-ci"&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stitching all the commands together our &lt;code&gt;build_test_react.yml&lt;/code&gt; would look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Test React Application&lt;/span&gt;

&lt;span class="c1"&gt;# Controls when the action will run. &lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Triggers the workflow on push or pull request events but only for the main branch&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build_test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;10.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;12.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;14.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;15.x&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Use Node.js ${{ matrix.node-version }}&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.node-version }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci, build and test&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;npm ci&lt;/span&gt;
          &lt;span class="s"&gt;npm run build --if-present&lt;/span&gt;
          &lt;span class="s"&gt;npm test      &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please refer to &lt;a href="https://github.com/achukka/todolist/commit/caf075150b675c2bbbfb0132aa02cbf1656ade57"&gt;this commit&lt;/a&gt; for the full yml file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commit your workflow to a new branch&lt;/li&gt;
&lt;li&gt;Create a PR onto &lt;code&gt;main&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;Merge the PR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations 👏. You have now setup a workflow to build and test your react application 👍&lt;/p&gt;

&lt;p&gt;Any subsequent updates (pull_requests or push) to your github repo should trigger the above workflow.&lt;/p&gt;

&lt;p&gt;A sample &lt;a href="https://github.com/achukka/todolist/pull/6/checks"&gt;workflow&lt;/a&gt; would look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FntbsRq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh6emvbt15f9kupt5m3z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FntbsRq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh6emvbt15f9kupt5m3z.PNG" alt="github_workflow_checks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading through the entire article. Please reach out with questions, comments and/or feedback.&lt;/p&gt;

</description>
      <category>react</category>
      <category>github</category>
      <category>build</category>
      <category>testing</category>
    </item>
    <item>
      <title>YouTube Live Stream ON: Bash Shell for Data Sciences</title>
      <author>Scientific Programming School</author>
      <pubDate>Wed, 19 May 2021 02:35:06 +0000</pubDate>
      <link>https://dev.to/scientificschool/youtube-live-stream-on-bash-shell-for-data-sciences-1bj7</link>
      <guid>https://dev.to/scientificschool/youtube-live-stream-on-bash-shell-for-data-sciences-1bj7</guid>
      <description>&lt;p&gt;Welcome to the Bash Shell for Data Sciences | Scientific Programming School – FREE YouTube Live Stream. &lt;a href="https://youtu.be/2SyrHh65qMk"&gt;🔴 LIVE NOW!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/2SyrHh65qMk"&gt;https://youtu.be/2SyrHh65qMk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this awesome live class ❤️ we will cover three practical flat file data mining projects involving four data projects (each with a different objective function):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;University ranking data,&lt;/li&gt;
&lt;li&gt;Facebook data,&lt;/li&gt;
&lt;li&gt;Australian statistics crime data and&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please don’t forget to Subscribe our new [YouTube channel] if you want more weekly updates on Linux, Devops, HPC and Advanced coding. We create advanced code videos and present you a platform &lt;a href="https://scientificprogramming.io"&gt;scientificprogramming.io&lt;/a&gt; to run scientific codes/ OS commands as you learn with playgrounds and Interactive shells, inside your browser!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Oaqv5Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0gxtrt6ru9c1icw6tos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Oaqv5Bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0gxtrt6ru9c1icw6tos.png" alt="Bash for data science"&gt;&lt;/a&gt;&lt;br&gt;
Almost everyone can benefit from learning to use Bash (&lt;a href="https://school.scientificprogramming.io/course/learn-practical-data-sciences-with-bash-shell/2"&gt;Learn Practical Data Sciences with Bash Shell&lt;/a&gt;) particularly in data mining: particularly students who want to learn Bash and the command line to improve their career prospects, researchers who want to add Bash and other command line tools to their bag of tricks, scientists who want to learn to explore and analyze the data that their lab generates. &lt;/p&gt;

</description>
      <category>linux</category>
      <category>live</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>crypto.randomUUID is three times faster uuid.v4</title>
      <author>Nikita Galkin</author>
      <pubDate>Wed, 19 May 2021 00:36:30 +0000</pubDate>
      <link>https://dev.to/galkin/crypto-randomuuid-vs-uuid-v4-47i5</link>
      <guid>https://dev.to/galkin/crypto-randomuuid-vs-uuid-v4-47i5</guid>
      <description>&lt;p&gt;Node.js v14.17 release added &lt;code&gt;crypto.randomUUID()&lt;/code&gt;. This method allows to generate random &lt;a href="https://www.rfc-editor.org/rfc/rfc4122.txt"&gt;RFC 4122&lt;/a&gt; Version 4 UUID strings. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;randomUUID&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;crypto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomUUID&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// '43c98ac2-8493-49b0-95d8-de843d90e6ca'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I wondered how big the difference between uuid generation by Node.js API and uuid package.&lt;/p&gt;

&lt;p&gt;For benchmarking I prefer to use &lt;a href="https://github.com/sharkdp/hyperfine"&gt;hyperfine&lt;/a&gt;. It is like apache benchmark, but for CLI commands. There are have two cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;require('crypto').randomUUID()&lt;/li&gt;
&lt;li&gt;require('uuid').v4()&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's put them into two files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// test-native.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;randomUUID&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;crypto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;randomUUID&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// test-uuid.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;v4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="nx"&gt;_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we ready for benchmarking:&lt;br&gt;
&lt;code&gt;hyperfine 'node test-native.js' 'node test-uuid.js'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command shows that native generation is three times faster than &lt;code&gt;uuid&lt;/code&gt; package. Awesome!&lt;/p&gt;

</description>
      <category>node</category>
      <category>benchmark</category>
    </item>
    <item>
      <title>SSL explained briefly</title>
      <author>rounakcodes</author>
      <pubDate>Wed, 19 May 2021 00:35:07 +0000</pubDate>
      <link>https://dev.to/rounakcodes/ssl-explained-briefly-460b</link>
      <guid>https://dev.to/rounakcodes/ssl-explained-briefly-460b</guid>
      <description>&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS is a secure version of HTTP

&lt;ul&gt;
&lt;li&gt;communication between server and client is encrypted&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;HTTPS is HTTP over Secure Sockets Layer&lt;/li&gt;
&lt;li&gt;SSL certificate plays an important role in building trust&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ssl-certificate"&gt;
  &lt;/a&gt;
  SSL certificate
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a web server's digital certificate

&lt;ul&gt;
&lt;li&gt;issued by a third party (called CA, Certifying Authority)&lt;/li&gt;
&lt;li&gt;verifies the identity of

&lt;ul&gt;
&lt;li&gt;the web server&lt;/li&gt;
&lt;li&gt;the web server's public key&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#digital-signature"&gt;
  &lt;/a&gt;
  Digital Signature
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;created using CA's private key&lt;/li&gt;
&lt;li&gt;browser has list of major CA's public keys

&lt;ul&gt;
&lt;li&gt;this is how it is able to verify the digital signature&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;user accesses &lt;em&gt;&lt;a href="https://www.google.com"&gt;https://www.google.com&lt;/a&gt;&lt;/em&gt; from the client&lt;/li&gt;
&lt;li&gt;client requests secure pages from Google's web server&lt;/li&gt;
&lt;li&gt;the Google server sends its digital certificate which serves two purposes

&lt;ul&gt;
&lt;li&gt;it establishes Google's identity&lt;/li&gt;
&lt;li&gt;it makes the Google's public key available&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;client verifies issuer's (CA) digital signature

&lt;ul&gt;
&lt;li&gt;to ensure that the certificate is valid&lt;/li&gt;
&lt;li&gt;client comes installed with the public keys of all of the major certificate authorities. It uses this public key to verify that the web server's certificate was indeed signed by the trusted certificate authority.&lt;/li&gt;
&lt;li&gt;the certificate contains the domain name and/or IP address of the web server. The client confirms with the certificate authority that the address listed in the certificate is the one to which it has an open connection.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;after it is verified, it is trusted

&lt;ul&gt;
&lt;li&gt;in case of a client like Google Chrome, a lock icon precedes the URL

&lt;ul&gt;
&lt;li&gt;which indicates that the Google server's public key really belongs to the web server&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;the client now generates a symmetric key

&lt;ul&gt;
&lt;li&gt;it keeps one and gives one to the server

&lt;ul&gt;
&lt;li&gt;to give it securely to the server it encrypts it with server's public key&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;the web server has the private key to decrypt this encryption and it gets the symmetric key&lt;/li&gt;
&lt;li&gt;from this point, all traffic between client and server will be encrypted with this symmetric key&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#curious"&gt;
  &lt;/a&gt;
  Curious
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://tlseminar.github.io/first-few-milliseconds/"&gt;https://tlseminar.github.io/first-few-milliseconds/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ssl</category>
      <category>digitalcertificate</category>
      <category>https</category>
      <category>digitalsignature</category>
    </item>
    <item>
      <title>Using the useReducer Hook in React with TypeScript </title>
      <author>Craig Holliday</author>
      <pubDate>Wed, 19 May 2021 00:03:24 +0000</pubDate>
      <link>https://dev.to/craigaholliday/using-the-usereducer-hook-in-react-with-typescript-27m1</link>
      <guid>https://dev.to/craigaholliday/using-the-usereducer-hook-in-react-with-typescript-27m1</guid>
      <description>&lt;p&gt;The &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;useReducer&lt;/a&gt; hook is an alternative to the &lt;a href="https://reactjs.org/docs/hooks-reference.html#usestate"&gt;useState&lt;/a&gt; hook and is preferable when you have complex state logic or when your next state depends on your previous state.&lt;/p&gt;

&lt;p&gt;The useReducer hook accepts a reducer type &lt;code&gt;(state, action) =&amp;gt; newState&lt;/code&gt; and returns a state object paired with a dispatch method much like Redux.&lt;/p&gt;

&lt;p&gt;Now the official &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;useReducer documentation&lt;/a&gt; will show you how to define a reducer that accepts actions you will call with a dispatch method.&lt;/p&gt;

&lt;p&gt;That is a good use case but I have another example of using &lt;code&gt;useReducer&lt;/code&gt; to provide partial updates to state which I find covers the rest of my use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usereducer-with-actions-and-a-dispatch-method"&gt;
  &lt;/a&gt;
  useReducer with actions and a dispatch method
&lt;/h2&gt;

&lt;p&gt;The default example for &lt;code&gt;useReducer&lt;/code&gt; is set up for you to create a reducer function and provide it with an action. The action provided should have a type and some value to update the state.&lt;/p&gt;

&lt;p&gt;To strongly type this feature with TypeScript we can create an enum with all of our possible action types as well as create an interface for the action.&lt;/p&gt;

&lt;p&gt;Below is a fairly contrived example but shows the most basic example possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// An enum with all the types of actions to use in our reducer&lt;/span&gt;
&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;CountActionKind&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;INCREASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREASE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DECREASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREASE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// An interface for our actions&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;CountAction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CountActionKind&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// An interface for our state&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;CountState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Our reducer function that uses a switch statement to handle our actions&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CountState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CountAction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;CountActionKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INCREASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;CountActionKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DECREASE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// An example of using the `useReducer` hooks with our reducer function and an initial state&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Count: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Calling our actions on button click */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CountActionKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INCREASE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        -
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CountActionKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DECREASE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usereducer-using-the-partial-type-for-state-updates"&gt;
  &lt;/a&gt;
  useReducer using the Partial type for state updates
&lt;/h2&gt;

&lt;p&gt;The next way of using &lt;code&gt;useReducer&lt;/code&gt; is best used when you have a state object where you need to change some values inside of it directly rather than dispatching an action to handle state changes.&lt;/p&gt;

&lt;p&gt;This way also has fewer types but does expose the state to be changed directly so take that into account when using this method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Interface for our state&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LoadingState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The example component that use the `useReducer` hook with our state&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoadingComponent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** 
   See here that we are using `newState: Partial&amp;lt;LoadingState&amp;gt;` in our reducer
   so we can provide only the properties that are updated on our state
   */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoadingState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadingState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// And here we provide only properties that are updating on the state&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are my two methods so check out the other posts below for other methods. It's beneficial to read the wide range of ways to accomplish the same thing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.newline.co/@bespoyasov/how-to-use-usereducer-with-typescript--3918a332"&gt;https://www.newline.co/@bespoyasov/how-to-use-usereducer-with-typescript--3918a332&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sumologic.com/blog/react-hook-typescript/"&gt;https://www.sumologic.com/blog/react-hook-typescript/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.benmvp.com/blog/type-checking-react-usereducer-typescript/"&gt;https://www.benmvp.com/blog/type-checking-react-usereducer-typescript/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌟🌟🌟&lt;/p&gt;

&lt;p&gt;My brother and I write all the time about React, TypeScript, R, Data Science, you name it on our blog so check it out:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://koalatea.io"&gt;KoalaTea.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌟🌟🌟&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to host a Next.js web apps with server-side rendering (SSR) in AWS Amplify</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Tue, 18 May 2021 23:31:45 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-host-a-next-js-web-apps-with-server-side-rendering-ssr-in-aws-amplify-3n3h</link>
      <guid>https://dev.to/aws-builders/how-to-host-a-next-js-web-apps-with-server-side-rendering-ssr-in-aws-amplify-3n3h</guid>
      <description>&lt;p&gt;No more waiting! It’s finally here, &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/05/aws-amplify-hosting-announces-server-side-rendering-support-for-next-js-web-apps/"&gt;AWS Amplify hosting for Next.js server-side rendering (SSR)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why this is great&lt;/strong&gt;: It’s no joke, I wait for this feature for &lt;em&gt;more than a year&lt;/em&gt;. And is finally here and is fast!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not so great&lt;/strong&gt;: Next 10.x.x was a huge leap forward. All things I wanted to try right off the bay and backed in my applications...But this will be on hold, as the time of writing, this launch only his support is for Next.js 9.x.x version. Considering version 10.x if from October 2020 I think the pace is a little &lt;/p&gt;

&lt;p&gt;To evaluate what type of rendering your application need, I recommend the post &lt;a href="https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation"&gt;Next.js: Server-side Rendering vs. Static Generation&lt;/a&gt; by &lt;a href="https://twitter.com/leeerob"&gt;Lee Robinson&lt;/a&gt;—and in the &lt;em&gt;real world&lt;/em&gt; sometimes you’ll need both.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-webapp"&gt;
  &lt;/a&gt;
  The webapp
&lt;/h2&gt;

&lt;p&gt;For all purposes, you could do with your app or create a boilerplate new &lt;a href="https://nextjs.org/docs/basic-features/pages#server-side-rendering"&gt;NextJS with SSR&lt;/a&gt;. I created this barebones site that renders some info from the &lt;a href="https://pokeapi.co/"&gt;PokéAPI&lt;/a&gt;. This is the repository on GitHub:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ibrahimcesar"&gt;
        ibrahimcesar
      &lt;/a&gt; / &lt;a href="https://github.com/ibrahimcesar/nextjs-ssr-amplify-aws"&gt;
        nextjs-ssr-amplify-aws
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      👾  Repository to test NextJS Server Side Rendering with AWS Amplify
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a href="https://amplify.aws/community" rel="nofollow"&gt;
    &lt;img alt="Amplify" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9uwzN3re--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-amplify/community/raw/master/src/assets/images/logo-dark.png" width="60"&gt;
  &lt;/a&gt;
&lt;h1&gt;
  👾 AWS Amplify NextJS SSR
&lt;/h1&gt;
&lt;blockquote&gt;Example of NextJS SSR example to deploy with AWS Amplify SSR Hosting using the PokéAPI&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/ellerbrock/typescript-badges/"&gt;&lt;img src="https://camo.githubusercontent.com/1d1f56c37cf5dfd1b9c3782a8d1d6fe07f8764e8c35f53ec90460e5b38cd8f7d/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f747970657363726970742f636f64652f747970657363726970742e7376673f763d313031" alt="TypeScript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Developed in 🇧🇷 &lt;span&gt;Brazil&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://updown.io/akzp" rel="nofollow"&gt;PokéAPI Status Page&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
Deploying&lt;/h2&gt;
&lt;h3&gt;
If you never used Amplify&lt;/h3&gt;
&lt;p&gt;You’ll need to have the amplify &lt;a href="https://docs.amplify.aws/cli/start/install" rel="nofollow"&gt;installed and configured&lt;/a&gt;. Just follow the docs and you’ll be ready to go. Or make sure you have the latest version.&lt;/p&gt;
&lt;h3&gt;
Amplify Init&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;❯ amplify init
Note: It is recommended to run this &lt;span class="pl-c1"&gt;command&lt;/span&gt; from the root of your app directory

&lt;span class="pl-k"&gt;?&lt;/span&gt; Enter a name &lt;span class="pl-k"&gt;for&lt;/span&gt; the project pokessr

The following configuration will be applied:

Project information

&lt;span class="pl-k"&gt;|&lt;/span&gt; Name: pokessr

&lt;span class="pl-k"&gt;|&lt;/span&gt; Environment: dev

&lt;span class="pl-k"&gt;|&lt;/span&gt; Default editor: Visual Studio Code

&lt;span class="pl-k"&gt;|&lt;/span&gt; App type: javascript

&lt;span class="pl-k"&gt;|&lt;/span&gt; Javascript framework: react

&lt;span class="pl-k"&gt;|&lt;/span&gt; Source Directory Path: src

&lt;span class="pl-k"&gt;|&lt;/span&gt; Distribution Directory Path: build

&lt;span class="pl-k"&gt;|&lt;/span&gt; Build Command: npm run-script build

&lt;span class="pl-k"&gt;|&lt;/span&gt; Start Command: npm run-script start

&lt;span class="pl-k"&gt;?&lt;/span&gt; Initialize the project with the above configuration&lt;span class="pl-k"&gt;?&lt;/span&gt; Yes

Using&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ibrahimcesar/nextjs-ssr-amplify-aws"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;You can leave all build options as it is, because Amplify will automatically pick up as SSR and deploy it. For this to happen you also don’t need (or have to) choose a different export folder. If you clone my repo, you could check that I’m indeed using NextJS &lt;code&gt;10.0.0&lt;/code&gt; but, I cannot use any additional feature like the new &lt;code&gt;Image&lt;/code&gt; component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying"&gt;
  &lt;/a&gt;
  Deploying
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#if-you-never-used-amplify"&gt;
  &lt;/a&gt;
  If you never used Amplify
&lt;/h3&gt;

&lt;p&gt;You’ll need to have the amplify &lt;a href="https://docs.amplify.aws/cli/start/install"&gt;installed and configured&lt;/a&gt;. Just follow the docs and you’ll be ready to go. Or make sure you have the latest version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amplify-init"&gt;
  &lt;/a&gt;
  Amplify Init
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;❯ amplify init
Note: It is recommended to run this &lt;span class="nb"&gt;command &lt;/span&gt;from the root of your app directory
? Enter a name &lt;span class="k"&gt;for &lt;/span&gt;the project pokessr
The following configuration will be applied:
Project information
| Name: pokessr
| Environment: dev
| Default editor: Visual Studio Code
| App &lt;span class="nb"&gt;type&lt;/span&gt;: javascript
| Javascript framework: react
| Source Directory Path: src
| Distribution Directory Path: build
| Build Command: npm run-script build
| Start Command: npm run-script start

? Initialize the project with the above configuration? Yes
Using default provider  awscloudformation
? Select the authentication method you want to use: AWS profile
For more information on AWS Profiles, see:
https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html

? Please choose the profile you want to use amplify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Besides the name, &lt;code&gt;pokessr&lt;/code&gt;, I only choose my profile to deploy, called &lt;code&gt;amplify&lt;/code&gt; but you can deploy in whatever profile you configured. I accepted all defaults. Then amplify will create your environment:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Adding backend environment dev to AWS Amplify Console app: d31r520fbr96mj

⠙ Initializing project in the cloud...

CREATE_IN_PROGRESS amplify-pokessr-dev-185133 AWS::CloudFormation::Stack Tue May 18 2021 18:51:41 GMT-0300 (Horário Padrão de Brasília) User Initiated
CREATE_IN_PROGRESS UnauthRole                 AWS::IAM::Role             Tue May 18 2021 18:51:45 GMT-0300 (Horário Padrão de Brasília)
CREATE_IN_PROGRESS AuthRole                   AWS::IAM::Role             Tue May 18 2021 18:51:45 GMT-0300 (Horário Padrão de Brasília)
CREATE_IN_PROGRESS DeploymentBucket           AWS::S3::Bucket            Tue May 18 2021 18:51:46 GMT-0300 (Horário Padrão de Brasília)
CREATE_IN_PROGRESS UnauthRole                 AWS::IAM::Role             Tue May 18 2021 18:51:46 GMT-0300 (Horário Padrão de Brasília) Resource creation Initiated
CREATE_IN_PROGRESS AuthRole                   AWS::IAM::Role             Tue May 18 2021 18:51:46 GMT-0300 (Horário Padrão de Brasília) Resource creation Initiated

⠇ Initializing project in the cloud...

CREATE_IN_PROGRESS DeploymentBucket AWS::S3::Bucket Tue May 18 2021 18:51:46 GMT-0300 (Horário Padrão de Brasília) Resource creation Initiated

⠸ Initializing project in the cloud...

CREATE_COMPLETE AuthRole   AWS::IAM::Role Tue May 18 2021 18:51:59 GMT-0300 (Horário Padrão de Brasília)
CREATE_COMPLETE UnauthRole AWS::IAM::Role Tue May 18 2021 18:51:59 GMT-0300 (Horário Padrão de Brasília)

⠹ Initializing project in the cloud...

CREATE_COMPLETE DeploymentBucket           AWS::S3::Bucket            Tue May 18 2021 18:52:08 GMT-0300 (Horário Padrão de Brasília)
CREATE_COMPLETE amplify-pokessr-dev-185133 AWS::CloudFormation::Stack Tue May 18 2021 18:52:10 GMT-0300 (Horário Padrão de Brasília)

✔ Successfully created initial AWS cloud resources for deployments.
✔ Initialized provider successfully.

Initialized your environment successfully.

Your project has been successfully initialized and connected to the cloud!

Some next steps:

“amplify status” will show you what you’ve added already and if it’s locally configured or deployed
“amplify add &amp;lt;category&amp;gt;“ will allow you to add features like user login or a backend API
“amplify push” will build all your local backend resources and provision it in the cloud
“amplify console” to open the Amplify Console and view your project status
“amplify publish” will build all your local backend and frontend resources (if you have hosting category added) and provision it in the cloud

Pro tip:
Try “amplify add api” to create a backend API and then “amplify publish” to deploy everything
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What we are going to use is &lt;code&gt;hosting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And by zero configuration, you just need to connect your repository and the building settings will be set. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hOsVDlo5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nplnbf5sqsoy4mkvrb8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOsVDlo5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nplnbf5sqsoy4mkvrb8k.png" alt="Build settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can always have a look at how the build is going accessing the logs in the AWS Amplify console. For our purposes, see a &lt;code&gt;Starting SSR Build&lt;/code&gt; in your logs:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;2021-05-18T22:35:49.379Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Creating an optimized production build...
2021-05-18T22:35:58.592Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Compiled successfully
                                 info  - Collecting page data...
2021-05-18T22:35:59.098Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;0/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.480Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;7/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.600Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;14/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.706Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;21/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.797Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Generating static pages &lt;span class="o"&gt;(&lt;/span&gt;28/28&lt;span class="o"&gt;)&lt;/span&gt;
2021-05-18T22:35:59.797Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: info  - Finalizing page optimization...
2021-05-18T22:35:59.814Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: 
2021-05-18T22:35:59.860Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: Page                              Size     First Load JS
                                 ┌ λ /                             1.32 kB        68.7 kB
                                 ├   /_app                         0 B            64.2 kB
                                 ├ λ /[ditto]                      1.39 kB        68.7 kB
                                 ├ ○ /404                          2.76 kB        66.9 kB
                                 ├ ● /pokemons/[name]              1.53 kB        68.9 kB
                                 ├   ├ /pokemons/bulbasaur

                                 ├   ├ /pokemons/ivysaur

                                 ├   ├ /pokemons/venusaur

                                 ├   └ &lt;span class="o"&gt;[&lt;/span&gt;+22 more paths]

                                 └ λ /random                       1.39 kB        68.7 kB
                                 + First Load JS shared by all     64.2 kB
                                 ├ chunks/commons.b2f5db.js      13.5 kB
                                 ├ chunks/framework.149f13.js    42 kB
                                 ├ chunks/main.e0d560.js         6.8 kB
                                 ├ chunks/pages/_app.9245f7.js   865 B
                                 ├ chunks/webpack.f82c36.js      950 B
                                 └ css/b8e1ed54af27c57535f7.css  897 B

2021-05-18T22:35:59.861Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: λ  &lt;span class="o"&gt;(&lt;/span&gt;Server&lt;span class="o"&gt;)&lt;/span&gt;  server-side renders at runtime &lt;span class="o"&gt;(&lt;/span&gt;uses getInitialProps or getServerSideProps&lt;span class="o"&gt;)&lt;/span&gt;
                                 ○  &lt;span class="o"&gt;(&lt;/span&gt;Static&lt;span class="o"&gt;)&lt;/span&gt;  automatically rendered as static HTML &lt;span class="o"&gt;(&lt;/span&gt;uses no initial props&lt;span class="o"&gt;)&lt;/span&gt;
                                 ●  &lt;span class="o"&gt;(&lt;/span&gt;SSG&lt;span class="o"&gt;)&lt;/span&gt;     automatically generated as static HTML + JSON &lt;span class="o"&gt;(&lt;/span&gt;uses getStaticProps&lt;span class="o"&gt;)&lt;/span&gt;
                                 &lt;span class="o"&gt;(&lt;/span&gt;ISR&lt;span class="o"&gt;)&lt;/span&gt;     incremental static regeneration &lt;span class="o"&gt;(&lt;/span&gt;uses revalidate &lt;span class="k"&gt;in &lt;/span&gt;getStaticProps&lt;span class="o"&gt;)&lt;/span&gt;

2021-05-18T22:35:59.993Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: Starting SSR Build...
2021-05-18T22:37:10.138Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: SSR Build Complete.
2021-05-18T22:37:11.159Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: &lt;span class="c"&gt;# Completed phase: build&lt;/span&gt;
2021-05-18T22:37:11.159Z &lt;span class="o"&gt;[&lt;/span&gt;INFO]: &lt;span class="c"&gt;## Build completed successfully&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then you gave to wait a couple of minutes and your application you be on your custom domain or in the generate domain of Amplify. For this demonstration my web apps is &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/"&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h3&gt;

&lt;p&gt;The front page is itself server side generated:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It will query in the PokéAPI and return all Pokémons until reaching the number or the maximum today. I placed &lt;code&gt;3000&lt;/code&gt; but as you can check, the actual number today is &lt;code&gt;1118&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you click in a Pokémon, I use a dynamic route in the file &lt;code&gt;ditto&lt;/code&gt; to generate the Pokémon by the name. Pokémon fans will get the reference. And &lt;code&gt;[ditto].tsx&lt;/code&gt; is also SSR.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ditto&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;ditto&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemonData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ditto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;But for fun I created a &lt;code&gt;random&lt;/code&gt; page... that renders a random Pokémons to test even better the SSR. It get all the possible Pokémons and returns one at random using &lt;code&gt;Math.random()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Pokedex&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ditto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;ditto&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemonData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ditto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And to test ISG (Incremental Static Generation) I created a folder called &lt;code&gt;pokemons&lt;/code&gt;. &lt;a href="https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration"&gt;Stable static generation was added to Next 9.3&lt;/a&gt; but my test doesn’t show that works right now with the Amplify SSR hosting, it defaults to the SSR. ISG is a mechanism to update existing pages, by re-rendering them in the background as traffic comes in using the property &lt;code&gt;revalidate&lt;/code&gt;. Also, another great use is, per example, you have a specific dataset of pages to generate at build time but you’ll need on dynamic routes to be generated new pages as soon you publish another in your headless CMS or database. &lt;a href="https://github.com/serverless-nextjs/serverless-next.js/issues/804"&gt;ISG generated even a bounty as feature in another project&lt;/a&gt; and unlocks a lot of interesting use cases.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemonData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPokemons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Pokedex&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pokemons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For my example, I generate at build time the first 25 Pokémons. See that my props are changing, I’m passing a dynamic date. But my first 25 Pokémons, starting with &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/pokemons/bulbasaur"&gt;Bulbasaur&lt;/a&gt; and going up to &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/pokemons/pikachu"&gt;Pikachu&lt;/a&gt;. They have a text &lt;code&gt;Generated at&lt;/code&gt; that will not revalidate at all (right now configured to re-validate at each 5 minutes &lt;code&gt;revalidate: 60 * 5&lt;/code&gt; in which it should change this date. But if you access any other Pokémon than the first 25, like the number 26, &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/pokemons/raichu"&gt;Raichu&lt;/a&gt; or the 186, &lt;a href="https://main.d31r520fbr96mj.amplifyapp.com/pokemons/scizor"&gt;Scizor&lt;/a&gt; will be server-side generated at the time and you’ll see the date of any time you accessing again, so no ISG. This feature was not advertised but since it was stable at 9.3+ and I did not found work and it happens you are after this, you’ll need to wait or surprise me show-me what I’m getting wrong here because I would love to have ISG already 😀&lt;/p&gt;



&lt;p&gt;I also created a private first component for YouTube embeds if you plan to use something like this in your Next app, check it out:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ibrahimcesar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfkWRBf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0zkQIbKi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/189167/695f3dd9-b865-4c57-a097-5cfe07cca488.jpg" alt="ibrahimcesar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ibrahimcesar/why-i-made-my-open-source-react-component-private-by-default-an-open-source-story-1jja" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why I made my open source React component private by default: an Open Source story&lt;/h2&gt;
      &lt;h3&gt;Ibrahim Cesar ・ May 18 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#privacy&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Please leave your thoughts, takes and insights in the comments! Or problems if you have one or the solution to ISG!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Our computers run on sand, a post about silicon.</title>
      <author>SciDroid</author>
      <pubDate>Tue, 18 May 2021 23:22:20 +0000</pubDate>
      <link>https://dev.to/scidroid/our-computers-run-on-sand-a-post-about-silicon-497h</link>
      <guid>https://dev.to/scidroid/our-computers-run-on-sand-a-post-about-silicon-497h</guid>
      <description>&lt;p&gt;&lt;cite&gt;Cover image by &lt;a href="https://www.pexels.com/es-es/@oksana-titova-19163191?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Oksana&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sand"&gt;
  &lt;/a&gt;
  Sand?
&lt;/h2&gt;

&lt;p&gt;Yes, although it seems incredible what I am saying our economy works with sand. well, not exactly, it is a component of sand called &lt;strong&gt;silicon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zlYqsQ3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/sand.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zlYqsQ3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/sand.jpg" alt="Sand"&gt;&lt;/a&gt; &lt;strong&gt;Sand, Photo by &lt;a href="https://www.pexels.com/@louis-965146"&gt;Louis&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-silicon"&gt;
  &lt;/a&gt;
  What is Silicon?
&lt;/h3&gt;

&lt;p&gt;Silicon is the most abundant chemical element in the world, this is formed in the megastars when two oxygen atoms are joined and when they explode in a supernova they spread all over the universe, this is the aspect of silicon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5j3MLkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/silicon.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5j3MLkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/silicon.jpg" alt="Silicon"&gt;&lt;/a&gt; &lt;strong&gt;Silicon, Photo by &lt;a href="https://www.freeimages.com/es/photographer/greschoj-64534"&gt;greschoj&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maybe at this moment you are saying &lt;strong&gt;&lt;em&gt;"That cannot be the most abundant element in the world, I have never seen that in my life"&lt;/em&gt;&lt;/strong&gt;, but it is because it is a block of pure silicon, the most common way to find it is in sand, this because it is a substance that does not corrode easily and with the passage of time most of the components of the sand go away but the silicon remains, well not exactly silicon, what really remains is silicon dioxide which is a mixture between silicon and oxygen, better known as quartz, and this is another very common way to find it, because normally this is found in forests as a kind of white rock that is found between stones or loose as crystals that are geometrically perfect and very transparent. In addition, silicon forms the silicates, some of which are the base of the terrestrial mantle, which makes it the most abundant material on the planet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-it-important"&gt;
  &lt;/a&gt;
  Why is it important?
&lt;/h3&gt;

&lt;p&gt;Silicon is important because it is the base of modern computing, which is why the most famous place for technology is called Silicon Valley. Its uses are very varied, have you ever played Minecraft or have you heard that if you melt sand you can make glass, this is because of the silicon dioxide that is in the sand, even make laser beams, or even the silicon that is used in breast augmentation and other procedures, the usefulness of silicon is almost infinite but what we are interested in is its use in technology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-silicon-is-used-in-tech"&gt;
  &lt;/a&gt;
  How the silicon is used in tech?
&lt;/h2&gt;

&lt;p&gt;For this we are going to talk a little bit about the history of computing. Before, we had the abacus, which allowed us to do basic operations, but everything developed until we were able to make mechanical computers that allowed automatic operations, until we needed to make really complex calculations and vacuum tube computers were invented.&lt;/p&gt;

&lt;p&gt;But they were enormous, so transistor-based computers were created, which is a small electrical circuit with which we can control whether or not electricity passes through, but with the passage of time we needed more and more power, and we discovered that we could take silicon and make millions of microscopic transistors inside and thus microprocessors were born.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_8cfKnJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/chips.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8cfKnJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/chips.jpg" alt="MicroChips"&gt;&lt;/a&gt; &lt;strong&gt;&lt;em&gt;MicroChips, Photo by &lt;a href="https://www.pexels.com/@shellystill"&gt; Shelly&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-you-transform-sand-into-processors"&gt;
  &lt;/a&gt;
  How do you transform sand into processors?
&lt;/h3&gt;

&lt;p&gt;The process is very complicated and very delicate to levels that something badly done can damage the chip completely, The first thing is to obtain pure silicon, this is usually done by taking the quartz and separating the silicon from the oxygen, you can use elements such as carbon.&lt;/p&gt;

&lt;p&gt;When you have the pure silicon you must crystallize it, and with a very delicate process to cut it, if you cut it badly it is possible that it breaks and it must have a thickness of a few millimeters, when it is ready the most difficult part arrives, a process called photolithography is made where the transistors are printed in the silicon wafer, and you must pass it through complex chemical and physical processes, in a wafer millions of transistors fit and according to the law of Moore every two years the amount of transistors that can fit in a chip doubles.&lt;/p&gt;

&lt;p&gt;But, we reach a point where it is increasingly difficult to make them smaller and it is a constant challenge for the creators of microprocessors.&lt;/p&gt;

&lt;p&gt;When a wafer is finished it looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a-40ybQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/plate.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a-40ybQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://yohago.tech/assets/img/sample/plate.jpg" alt="Silicon Wafer"&gt;&lt;/a&gt; &lt;strong&gt;Silicon Wafer, Photo by &lt;a href="https://pixabay.com/users/fabersam-98886/"&gt;fabersam&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then it is only cut to make way for microprocessors.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>computerscience</category>
    </item>
    <item>
      <title>Customize your keyboard's layout using QMK</title>
      <author>Sherlock Codes</author>
      <pubDate>Tue, 18 May 2021 22:51:18 +0000</pubDate>
      <link>https://dev.to/sherlockcodes/customize-your-keyboard-s-layout-using-qmk-27fl</link>
      <guid>https://dev.to/sherlockcodes/customize-your-keyboard-s-layout-using-qmk-27fl</guid>
      <description>&lt;p&gt;I had several problems bringing my QMK layout to life on my keyboard. I bought the OLKB Planck from Drop and since I am a native spanish speaker, and some common spanish characters (ñ, ¨, ´) were either missing or really hard to type, (not to mention I found the non-letter keys to be rather impractical) I decided to get into designing my own layout.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup-qmk"&gt;
  &lt;/a&gt;
  Setup QMK
&lt;/h1&gt;

&lt;p&gt;I myself will only do this for Manjaro, but the &lt;a href="https://docs.qmk.fm/#/newbs"&gt;official tutorial&lt;/a&gt; will help you set up your system on your specific OS, so you can still follow along with me after setting QMK on your computer.&lt;/p&gt;

&lt;p&gt;As a prerequisite you'll need python and git installed in your system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-qmks-command-line-interface-cli"&gt;
  &lt;/a&gt;
  Install QMK's Command Line Interface (CLI)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;python3 -m pip install --user qmk 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-qmk"&gt;
  &lt;/a&gt;
  Setup QMK
&lt;/h2&gt;

&lt;p&gt;Run the following command and say yes to all&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;qmk setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-your-own-keymap"&gt;
  &lt;/a&gt;
  Create your own keymap
&lt;/h2&gt;

&lt;p&gt;QMK, which you just installed, comes with a lot of layouts for your keyboard made by members of the community that forked &lt;a href="https://github.com/qmk/qmk_firmware"&gt;QMK's repo&lt;/a&gt; at &lt;code&gt;&amp;lt;directory_where_you_installed_qmk&amp;gt;/keyboards/your_keyboard/keymaps/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can create your own layout from any of this layouts, but what I recommend is looking for the folder named &lt;code&gt;default&lt;/code&gt;, which will contain the layout installed by default in your keyboard, and making a copy inside the same containing folder. You can name it however you want it.&lt;/p&gt;

&lt;p&gt;Inside this layout you'll see several files:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4psQYmtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/woetq588fen6922nd4zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4psQYmtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/woetq588fen6922nd4zh.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You should only care about &lt;code&gt;keymap.c&lt;/code&gt; if you only want to change the layout. If you in the other hand wish to set special actions like for example "tapping shift two times to activate mayus" you will need to modify &lt;code&gt;config.h&lt;/code&gt; and &lt;code&gt;rules.mk&lt;/code&gt;. &lt;a href="https://beta.docs.qmk.fm/using-qmk/software-features/feature_tap_dance"&gt;See special actions&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-your-layout"&gt;
  &lt;/a&gt;
  Create your layout
&lt;/h3&gt;

&lt;p&gt;Inside &lt;code&gt;keymap.c&lt;/code&gt;, under the configuration part of the code, you should see commented how the final layout should look like and the matching keymap below it:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TzedrSY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7241a9tf5be39e34y3l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TzedrSY_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7241a9tf5be39e34y3l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now is time to include your &lt;strong&gt;special characters&lt;/strong&gt; (if you want any). For your language's specific characters you will want to import them by importing it's language file (&lt;a href="https://beta.docs.qmk.fm/using-qmk/simple-keycodes/reference_keymap_extras"&gt;see what's your language file&lt;/a&gt;) under the &lt;code&gt;muse.h&lt;/code&gt; import statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="cp"&gt;#include QMK_KEYBOARD_H
#include "muse.h"
#include "keymap_spanish.h" --&amp;gt; /*Your file
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: if there are many layouts to import for your language, make sure the layout you are importing matches your system's keyboard layout (ie: you only have a spanish layout available in QMK that should smath Spain's spanish layout in contrast with Latin America's spanish layout).&lt;/p&gt;

&lt;p&gt;Now you should modify your layout accordingly by using the characters found in the &lt;code&gt;keymap_&amp;lt;your_language.h&amp;gt;&lt;/code&gt; file. If you can't find them on your computer's file system, here you have the language files, just use the variable names for your language's character (i.e: ES_NTIL --&amp;gt; Ñ) on your layout like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KtmmdUG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8y15nvljh0h29vrprc98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KtmmdUG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8y15nvljh0h29vrprc98.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#declare-your-special-rules"&gt;
  &lt;/a&gt;
  Declare your special rules
&lt;/h3&gt;

&lt;p&gt;I myself will make my shift key to activate bloq mayus when tapped twice.&lt;/p&gt;

&lt;p&gt;Since we will be using "tap dance" special rules, we should enable them in our &lt;code&gt;rules.mk&lt;/code&gt; file by inserting the following line at the bottom of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
TAP_DANCE_ENABLE = yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to set the time between tap and tap (tap = press of a key) we should add the following line at the bottom of the &lt;code&gt;config.h&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
#define TAPPING_TERM 200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we should declare the double-tap special action like this in above the declaration of the layout (the line that starts with &lt;code&gt;const uint16_t ...&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// Tap Dance Declarations&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;TD_LSFT_CAPS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// Tap Dance Definitions&lt;/span&gt;
&lt;span class="n"&gt;qk_tap_dance_action_t&lt;/span&gt; &lt;span class="n"&gt;tap_dance_actions&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Tap once for shift, twice for Caps Lock&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TD_LSFT_CAPS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ACTION_TAP_DANCE_DOUBLE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KC_LSFT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KC_CAPS&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;PROGMEM&lt;/span&gt; &lt;span class="n"&gt;keymaps&lt;/span&gt;&lt;span class="p"&gt;[][&lt;/span&gt;&lt;span class="n"&gt;MATRIX_ROWS&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;MATRIX_COLS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have your special actions declared, go ahead and include it as a key in your keyboard  like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7SuS8yN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om0vm5a1e57uz23oii8h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7SuS8yN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/om0vm5a1e57uz23oii8h.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#install-your-new-keymap-settings"&gt;
  &lt;/a&gt;
  Install your new keymap settings
&lt;/h1&gt;

&lt;p&gt;After you are finished with your layout and special actions for your keymap, go ahead and put it inside your keyboad.&lt;/p&gt;

&lt;p&gt;In the home directory for your qmk installation (in my PC &lt;code&gt;lucas/qmk_firmware&lt;/code&gt;) open a terminal and follow this 2 steps:&lt;br&gt;
1- Compile your keymap so it can be installed in your keyboard:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;qmk compile -kb &amp;lt;kb_name&amp;gt;/&amp;lt;version&amp;gt; -km &amp;lt;keymap&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;&amp;lt;kb_name&amp;gt;&lt;/code&gt; is your keyboards name, where &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is your keyboard's version (only in case your keyboard has many versions like my planck). &lt;code&gt;&amp;lt;keymap&amp;gt;&lt;/code&gt; stands for the name you gave to your folder containing all your keymap's files.&lt;br&gt;
2- Flash your keyboard: once you have your compiled keymap for your keyboard, you should set your keyboard on &lt;em&gt;flash mode&lt;/em&gt;. This depends on our keyboard, but basically just google "flash mode " and that should do it. Once you got your keyboard to enter flash mode, but your keymap inside your keyboard with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;qmk flash -kb &amp;lt;your_keyboard&amp;gt;/&amp;lt;version&amp;gt; -km &amp;lt;keymap&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Hope this tutorial was helpful.&lt;/p&gt;

</description>
      <category>espanol</category>
      <category>spanish</category>
      <category>qmk</category>
      <category>keyboard</category>
    </item>
    <item>
      <title>Deno v1.10 has added support for localStorage. What do you think would be a good use case for this feature?</title>
      <author>Heiker</author>
      <pubDate>Tue, 18 May 2021 22:47:17 +0000</pubDate>
      <link>https://dev.to/vonheikemen/deno-v1-10-has-added-support-for-localstorage-what-do-you-think-would-be-a-good-use-case-for-this-feature-eb9</link>
      <guid>https://dev.to/vonheikemen/deno-v1-10-has-added-support-for-localstorage-what-do-you-think-would-be-a-good-use-case-for-this-feature-eb9</guid>
      <description>&lt;p&gt;Here are some of the details: &lt;a href="https://deno.com/blog/v1.10#support-for-web-storage-api"&gt;Support for Web Storage API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My first thought was some sort caching mechanism. Like, if I have a script that fetches data from the internets or takes a very long time to produce some piece of data, I could use localStorage to save that data. Then if someone executes the script again in a very short amount of time, I could give them the cache in localStorage.&lt;/p&gt;

&lt;p&gt;My second thought was some CRUD stuff. Something like &lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt; came to mind. I could make (and I &lt;a href="https://github.com/VonHeikemen/zdirs-js"&gt;actually did&lt;/a&gt;) a glorified CRUD utility that stores the path to the most frecuently visited directories, and then query that and use the result to "jump" quickly to that location. &lt;/p&gt;

&lt;p&gt;Beyond that I'm having a hard time imagining how this could be useful. I'm not saying it's useless, having a tiny database can be handy. I just don't know when to use it.&lt;/p&gt;

</description>
      <category>deno</category>
      <category>javascript</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Android CodeView the easiest way to highlight text</title>
      <author>Amr Hesham</author>
      <pubDate>Tue, 18 May 2021 22:41:20 +0000</pubDate>
      <link>https://dev.to/amrdeveloper/android-codeview-the-easiest-way-to-highlight-text-3hbf</link>
      <guid>https://dev.to/amrdeveloper/android-codeview-the-easiest-way-to-highlight-text-3hbf</guid>
      <description>&lt;p&gt;Hi, I am Amr Hesham a Software Engineer, I am interested in Android and Compiler Development,&lt;/p&gt;

&lt;p&gt;In my first article, I wrote about how to use the CodeView library to create a syntax highlighter for programming languages with many extra features like autocomplete, change theme and syntax in the runtime,&lt;/p&gt;

&lt;p&gt;The first idea is to use it in Content sharing applications so for example like Twitter you can highlight hashtags, website URLs and you can also highlight emails, this feature can easily be done using CodeView in just 3 lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#[a-zA-z0-9]+"&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Patterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;WEB_URL&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Patterns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EMAIL_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also add autocomplete for email providers like @gmail.com or @yahoo.com and the final result will be like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXylNI1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qyc64io4hyie8b166px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXylNI1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qyc64io4hyie8b166px.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second idea is to use CodeView with a searching feature to highlight all matched keyword in the content and you can easily highlight without&lt;br&gt;
searching in the positions in all content and add for example some HTML tags or Spans to highlight one word each time the user search for it,&lt;br&gt;
and this feature can easily be done using few methods.&lt;/p&gt;

&lt;p&gt;first, you need to create a Pattern for your search keyword, it can be a normal string or you can enable the user to search with regex, not just string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Pattern&lt;/span&gt; &lt;span class="n"&gt;keywordPattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Kotlin will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;keywordPattern&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Pattern&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you need to add this pattern to CodeView with the color you want to highlight with it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keywordPattern&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you need to tell CodeView to highlight the new patterns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reHighlightSyntax&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;once the user changes the search keyword you just need to replace the old pattern with a new one and there are 2 ways to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;removeSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keywordPattern&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or you can remove all the patterns from CodeView&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;resetSyntaxPatternList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you need to add the new pattern and highlight&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSyntaxPattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newkeywordPattern&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BLUE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;codeview&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reHighlightSyntax&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you have done, the final result will be like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VsYy35T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0a85kevxrmkgkata9zj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VsYy35T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0a85kevxrmkgkata9zj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in your mind that CodeView has many features and you can use it in many different ideas I just give you 2 examples but here is more and more.&lt;/p&gt;

&lt;p&gt;you can use it in languages apps for example English app and with an error highlighter, you can highlight spell mistake words, or create a note app with English words on autocomplete …etc.&lt;/p&gt;

&lt;p&gt;all you need is to use your imagination and creativity to create great features with CodeView.&lt;/p&gt;

&lt;p&gt;It’s very easy to use, well documented, has many examples on Github you can know how to download and use from the Github link:&lt;br&gt;
&lt;a href="https://github.com/amrdeveloper/codeview"&gt;https://github.com/amrdeveloper/codeview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and I hope you will enjoy creating your editor with CodeView 😋.&lt;/p&gt;

&lt;p&gt;Enjoy Programming 😋.&lt;/p&gt;

</description>
      <category>android</category>
      <category>codeview</category>
      <category>java</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>React vs Vue - Beginners Guide</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 18 May 2021 22:30:20 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/react-vs-vue-beginners-guide-4539</link>
      <guid>https://dev.to/ubahthebuilder/react-vs-vue-beginners-guide-4539</guid>
      <description>&lt;p&gt;React js and Vue js are arguably two of the most popular and widely used JavaScript frameworks (or libraries) today. &lt;strong&gt;But how do they compare to each other?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is a simple minimalistic framework (or library, whatever) used in building simple and reusable UI Components like buttons, forms, navbars and so on.&lt;/p&gt;

&lt;p&gt;You can make two or more similar UI elements which share the same properties and functionalities in a modular approach.&lt;/p&gt;

&lt;p&gt;React is currently used on the websites of many companies including popular companies like Facebook (it's creator), AirBnB and Uber and Netflix.&lt;/p&gt;

&lt;p&gt;Vue js is very similar to React in some ways. It is a framework used in  creating standalone and modular UI elements. It also utilizes the virtual DOM for rendering it's components to the real DOM.&lt;/p&gt;

&lt;p&gt;Though not as popular as React, Vue is also used by some big-shot corporations like Google (yep 😄), Nintendo, Behance and Apple.&lt;/p&gt;

&lt;p&gt;The main difference between both tools lie in their syntax, and that is what we'll be dissecting for the remainder of this article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-components-with-react"&gt;
  &lt;/a&gt;
  CREATING COMPONENTS WITH REACT
&lt;/h3&gt;

&lt;p&gt;When creating a UI component with React, here's some key points to note about it's syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Components in React are ussually defined as &lt;strong&gt;classes.&lt;/strong&gt; If you're coming from an ES6 background, this shouldn't be new to you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A XML-like Syntax called &lt;strong&gt;JSX&lt;/strong&gt; or &lt;strong&gt;JavaScript Extension&lt;/strong&gt; can be used to define the view of that Component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Components can also be defined using a functional approach. These Component are called &lt;strong&gt;Functional Components.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class based Components can hold local properties (&lt;strong&gt;state&lt;/strong&gt;), Functional Components &lt;strong&gt;can't.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While state can be defined locally in a class Component, props can only be passed from the context of a parent element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use an external state manager like &lt;strong&gt;Redux&lt;/strong&gt; or define the state locally as you'll see in the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can define methods in a component class and call the method in the view of that component&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a typical syntax for defining a class-based button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a button, Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicked!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;btnLabel&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;btnLabel&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to it's minimalistic architecture, React ships well and is frequently used with other libraries like Redux (state manager), GraphQL (API development) and React-Router (Routing implementation) to build full-fledged websites.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-hooks"&gt;
  &lt;/a&gt;
  React Hooks
&lt;/h4&gt;

&lt;p&gt;ES6 classes are not the only way you can create Components that works with some local state in React. &lt;/p&gt;

&lt;p&gt;React provides some special Functions (*&lt;em&gt;hooks&lt;/em&gt;") which can be used to manage state data.&lt;/p&gt;

&lt;p&gt;Here's the same button component created with React Hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBtnLabel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a button, Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setBtnLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicked!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Relative to ES6 React, here's some things to note about this code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The argument passed to &lt;strong&gt;useState&lt;/strong&gt; hook function is simply the &lt;strong&gt;initial state&lt;/strong&gt;. Just as you would define it in the constructor of a class Component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two piece of data is obtained from the useState hook (via array Destructuring)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The first is the actual state data and the second is the state updater function (synonymous to setState())&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: To learn about Array Destructuring and other ES6 Syntax, I'll highly recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React by Sleepless Yogi&lt;/a&gt; . You even get to learn React too! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;In the view, an event (click, in our case) would trigger setBtnLabel hook to run and the argument passed will become the new state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So in a nutshell, hooks allow you create stateful React Components without using an ES6 Class.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-components-with-vue"&gt;
  &lt;/a&gt;
  CREATING COMPONENTS WITH VUE
&lt;/h3&gt;

&lt;p&gt;Unlike React js, Classes are not used to create Components in Vue. &lt;/p&gt;

&lt;p&gt;Each Vue component (which ends with a .vue extension) typically has three osections in it.&lt;/p&gt;

&lt;p&gt;The first section is the &lt;em&gt;template&lt;/em&gt; area which is for the template or view of that component. As expected, you define what elements you want this Component to render in the DOM.&lt;/p&gt;

&lt;p&gt;The second section is the &lt;em&gt;script&lt;/em&gt; section which holds the scripting and logic for that component. This includes any method you want to call from the view.&lt;/p&gt;

&lt;p&gt;The third section is the &lt;em&gt;style&lt;/em&gt; section which holds the styling and layout design (CSS, duh) of that Component.&lt;/p&gt;

&lt;p&gt;Like React, you can use an external state manager like &lt;strong&gt;Vuex&lt;/strong&gt; or define and manage  the state locally in the Component.&lt;/p&gt;

&lt;p&gt;The Async keyword is used in defining any method which will run asynchronously for example fetching data from an API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Again, like in React, properties passed from the context of a parent is called props while local properties is called state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The state of a Component is returned in the data method of that component, defined in the &lt;em&gt;script&lt;/em&gt; section.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to pass dynamic data to a Vue component, or attach some logic before some data renders, or maybe loop through data, you use a Vue directive. Examples are v-of, v-for, v-bind. There are many other directives for different tasks.&lt;/p&gt;

&lt;p&gt;Here is a typical code for defining a button component with Vue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;btnLabel&lt;/span&gt;&lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;btnLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am a button, Click me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have you noticed the similarlity between the Vue button component and the React button component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's why I love these two so much&lt;/strong&gt; 😍&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: Having strong knowledge of JavaScript (especially ES6) is great. Check out  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;React and Vue are immensely popular and they show no signs of slowing down. &lt;/p&gt;

&lt;p&gt;If you are an aspiring web developer looking for something to learn, you should really consider those two.&lt;/p&gt;

&lt;p&gt;If you benefitted from this article, you can support me 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you and see you soon.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Debugging and inspecting Angular apps using Angular DevTools</title>
      <author>Alisa</author>
      <pubDate>Tue, 18 May 2021 21:52:48 +0000</pubDate>
      <link>https://dev.to/alisaduncan/debugging-and-inspecting-angular-apps-using-angular-devtools-1e05</link>
      <guid>https://dev.to/alisaduncan/debugging-and-inspecting-angular-apps-using-angular-devtools-1e05</guid>
      <description>&lt;p&gt;There's a new Chrome extension for &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt; apps! Angular DevTools is a brand new way debug and inspect Angular applications to help you better visualize and profile your app. Let's install &lt;a href="https://chrome.google.com/webstore/detail/angular-developer-tools/ienfalfjdbdpebioblfackkekamfmbnh"&gt;the Chrome Extension&lt;/a&gt; and explore the features in Angular DevTools together. 🗺️ ✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGc6F0Ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmc825zu4jxeda3pco68.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGc6F0Ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmc825zu4jxeda3pco68.png" alt="Person exploring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#can-i-use-angular-devtools-on-any-and-all-angular-apps"&gt;
  &lt;/a&gt;
  Can I use Angular DevTools on any and all Angular apps?
&lt;/h1&gt;

&lt;p&gt;When you navigate to your local app, you'll see the red Angular icon for the extension light up. That's when the fun begins!&lt;/p&gt;

&lt;p&gt;Angular DevTools uses the power of &lt;a href="https://angular.io/guide/ivy"&gt;Ivy&lt;/a&gt;, Angular's new compilation and rendering pipeline, to gather the component properties, view the component tree structure, and access the internal visibility it needs. Ivy is required for Angular DevTools to work, so apps need to be at least &amp;gt;= v9. Angular DevTools displays a warning if you try to use it on a version of Angular that doesn't support Ivy.&lt;/p&gt;

&lt;p&gt;Oh and one more caveat. Angular DevTools only works on non-production code, so trying to be nosy about how prod apps won't work. 😇&lt;/p&gt;

&lt;p&gt;Even though you can't inspect prod mode apps, it is fun to see icon light up when the app is built in Angular. 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--81ByvBDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neghkhyx0o6fej61dpvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--81ByvBDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neghkhyx0o6fej61dpvj.png" alt="Person inspecting a website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-inspect-components"&gt;
  &lt;/a&gt;
  Let's inspect components!
&lt;/h1&gt;

&lt;p&gt;I'll start with a slightly modified Tour of Heroes app with some changes in component structure to better showcase the tool. Unfortunately, you can't use Angular DevTools directly on StackBlitz projects so here's the repo to view the small modifications and follow along.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/alisaduncan"&gt;
        alisaduncan
      &lt;/a&gt; / &lt;a href="https://github.com/alisaduncan/angular-animations-code"&gt;
        angular-animations-code
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Code samples for angular animations
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you haven't already done so, install &lt;a href="https://chrome.google.com/webstore/detail/angular-developer-tools/ienfalfjdbdpebioblfackkekamfmbnh"&gt;the Angular DevTools Chrome Extension&lt;/a&gt; and open Chrome DevTools. You'll see a new tab labeled &lt;strong&gt;Angular&lt;/strong&gt;. We'll start our exploration on the &lt;strong&gt;Components&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T77-kuXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r6npg9rkjcsexv9fqm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T77-kuXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r6npg9rkjcsexv9fqm3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-components-tab"&gt;
  &lt;/a&gt;
  The Components tab
&lt;/h2&gt;

&lt;p&gt;You're presented with the component tree and as you hover your mouse over the different components, you'll see the corresponding components in your app light up, just like we see in Chrome DevTool's Elements view. &lt;/p&gt;

&lt;p&gt;When you select a component to inspect, you'll get a list of properties and a helpful link to Angular docs. The props include both public and private props so you'll get a complete picture of the component at a glance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DboWHul8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il3zt293ql4pn2mena2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DboWHul8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il3zt293ql4pn2mena2l.png" alt="Angular DevTools Component tree view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see that &lt;strong&gt;&amp;lt;&amp;gt;&lt;/strong&gt; icon to the right of the component name? If you click on it, it'll automatically navigate you to Chrome DevTool's &lt;strong&gt;Sources&lt;/strong&gt; tab &lt;strong&gt;&lt;em&gt;and open the component code for you&lt;/em&gt;&lt;/strong&gt;. Handy!! ❤️&lt;/p&gt;

&lt;p&gt;In the app we'll navigate to a view that shows all the heroes and inspect this view in Angular DevTool's &lt;strong&gt;Component&lt;/strong&gt; tab. In this component template, we use &lt;code&gt;*ngFor&lt;/code&gt; and display each hero in a child &lt;code&gt;HeroComponent&lt;/code&gt;. However, notice that our component tree looks very minimal in Angular DevTools. We don't see all the &lt;code&gt;HeroComponent&lt;/code&gt;s. Shouldn't we see every &lt;code&gt;HeroComponent&lt;/code&gt; in the &lt;code&gt;*ngFor&lt;/code&gt; since they are components? 👀&lt;/p&gt;

&lt;p&gt;We can see all the child components if we enable the option to view comments. Click on the gear icon and turn on &lt;strong&gt;Show comment nodes&lt;/strong&gt;. Yay! We now see all the &lt;code&gt;app-hero&lt;/code&gt; child components in the component tree!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVhWSN32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb3bineqdaa9tgm3l1q0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVhWSN32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb3bineqdaa9tgm3l1q0.png" alt="Angular DevTools Components view showing all child nodes in a ngFor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now here's where we can start having some fun! We can further inspect props and edit them. This includes editing &lt;code&gt;@Input()&lt;/code&gt; property values. 🚀&lt;/p&gt;

&lt;p&gt;We can look at the properties for &lt;code&gt;app-hero&lt;/code&gt; component and change the &lt;code&gt;@Input&lt;/code&gt; hero property value. The change is then reflected in the app view. What a helpful way to test things out! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iKl09raN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hd1rktejbkemrijeie6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iKl09raN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hd1rktejbkemrijeie6a.png" alt="Angular DevTools Components view showing Input and Output properties for a selected component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are basic examples for a very small component without a lot of moving pieces, but you can see how inspecting and manipulating data can be very powerful as your app increases in complexity. I've poked around inspecting and manipulating components in apps containing dynamic CDK Portals and state management, and I get helpful and complementary app visualization when used along with Chrome DevTools built in features and &lt;a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en"&gt;Redux DevTools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDgs58m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6wbqz7ue5geaennh4r4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDgs58m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6wbqz7ue5geaennh4r4.png" alt="Person looking at charts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-profile-the-app-and-inspect-change-detection-cycles"&gt;
  &lt;/a&gt;
  Let's profile the app and inspect change detection cycles!
&lt;/h1&gt;

&lt;p&gt;For this section, I'll use a different app. I'm using an app that showcases filtering and pagination using &lt;a href="https://material.angular.io/"&gt;Material components&lt;/a&gt; that looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0j-_biX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/439qjr6xq76eqhcsg81u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0j-_biX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/439qjr6xq76eqhcsg81u.png" alt="Angular app with an input to filter a table above the table display containing pagination controls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A table displays a filtered and paginated list of Star Wars planets, courtesy of &lt;a href="https://swapi.dev/"&gt;Star Wars API&lt;/a&gt;. Interacting with the filter input or the pagination controls makes an API call and updates the table. There's more moving parts and more change detection cycles within a view in this app compared to the modified Tour of Heroes.&lt;/p&gt;

&lt;p&gt;View the &lt;strong&gt;Profiler&lt;/strong&gt; tab and press the circular play button to start a profile session. Now I will start searching for "Tatooine" in the app. After entering 3 letters- "T", "a", "t", I narrowed down the list of planets to the "Tatooine" entry so I stopped the profiler. Let's see what we get. 👀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SvA_HF0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r83fc5zl4p2dn3251xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SvA_HF0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2r83fc5zl4p2dn3251xd.png" alt="Angular DevTools Profiler view with 19 bars representing a change detection cycle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We get 19 change detection cycles. If I click on a cycle, I see a bar chart of the different child components along with the change detection cycle that it processed and time it took to process it. WOW! You can also visualize the cycles as a Tree map and Flame graph. 🔥 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H4MFDtEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlck0zg2nhiblwq7puuh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4MFDtEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlck0zg2nhiblwq7puuh.png" alt="Angular DevTools Profiler view in tree map layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-DjGSLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6clffzim20klztpf0gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-DjGSLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6clffzim20klztpf0gd.png" alt="Angular DevTools Profiler view in flame map layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see what happens for each letter typed in the filter input - "T" at cycle 3, "a" at cycle 9, and "t" at cycle 14. Immediately preceding those cycles see we see a short delay from a &lt;code&gt;debounce&lt;/code&gt; added to the input stream, then the call out to the API, and lastly updating the table.&lt;/p&gt;

&lt;p&gt;As I dive into the cycle details, I can see which lifecycle hook also triggered as a result of change detection, and how long the change detection took to process in each child component. 🔍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AGoIPYwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s36b2oj1rl3qquv9tpqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AGoIPYwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s36b2oj1rl3qquv9tpqg.png" alt="Angular DevTools Profiler view with a breakdown of child components and how change detection affects each component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This profile view is immensely helpful to providing insight on all the moving parts of the app and understanding the change detection execution!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BeH18Twm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqqs43m9knufmfsopatw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BeH18Twm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqqs43m9knufmfsopatw.gif" alt="Animated gif stepping through each change detection cycle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read more details and watch a helpful video on the &lt;a href="http://goo.gle/angular-devtools"&gt;Angular blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have you tried using Angular DevTools yet? If so, what's your favorite feature? And please share your inspecting/debugging tips!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
