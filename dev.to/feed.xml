<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Interview Question #44: Number vs BigInt in JS</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Mon, 31 May 2021 15:51:14 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-44-number-vs-bigint-in-js-5big</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-44-number-vs-bigint-in-js-5big</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gWmsFiwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWmsFiwJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-44.png" alt="javascript interview question #44"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What happens if we add an &lt;code&gt;n&lt;/code&gt; suffix to a regular number in JavaScript? What’s the output?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;In the first line we try to add two numbers. These aren’t regular numbers, but rather two instances of &lt;code&gt;BigInt&lt;/code&gt; — special objects that are used to safely represent numbers bigger than &lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two ways to create &lt;code&gt;BigInt&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add a suffix &lt;code&gt;n&lt;/code&gt; to any number in JavaScript
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;big&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 1000000n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;call the constructor &lt;code&gt;BigInt(val)&lt;/code&gt; and pass in a numerical value
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 123n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This value doesn’t have to a number. I can be a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;234&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 234n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use hex and binary notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigHex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0xffffffffffffffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 18446744073709551615n&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bigBin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0b111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 7n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;BigInt&lt;/code&gt; numbers behave just like the regular ones. By adding &lt;code&gt;1n&lt;/code&gt; and &lt;code&gt;2n&lt;/code&gt; we get &lt;code&gt;3n&lt;/code&gt;. This is &lt;code&gt;BigInt&lt;/code&gt; as well, and &lt;code&gt;typeof 3n&lt;/code&gt; returns a string &lt;code&gt;bigint&lt;/code&gt;, which will be logged to the screen when we call &lt;code&gt;console.log&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: The &lt;code&gt;n&lt;/code&gt; suffix turns a regular JavaScript number into a &lt;code&gt;BigInt&lt;/code&gt;. The string &lt;code&gt;bigint&lt;/code&gt; will be logged to the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I landed my first dev job after 6 months of building projects. Here's my story!</title>
      <author>Pranav Birajdar</author>
      <pubDate>Mon, 31 May 2021 15:42:13 +0000</pubDate>
      <link>https://dev.to/prnvbirajdar/i-landed-my-first-dev-job-after-6-months-of-building-projects-here-s-my-story-4em1</link>
      <guid>https://dev.to/prnvbirajdar/i-landed-my-first-dev-job-after-6-months-of-building-projects-here-s-my-story-4em1</guid>
      <description>&lt;p&gt;It's official y'all, I got hired as a front-end developer!!! I am starting tomorrow and I am so pumped to share this news with the dev community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JooFV-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdpnvi2xtaj1bri6tmmn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JooFV-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdpnvi2xtaj1bri6tmmn.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Words cannot express how I happy about landing my first job. A year of self-teaching, building, failing, and networking finally paid off! &lt;/p&gt;

&lt;p&gt;Here's a not-so-brief timeline of how it all started, some projects I built, and a few resources I used along the way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-april-2020-pandemic-resolutions"&gt;
  &lt;/a&gt;
  1. April 2020 - Pandemic Resolutions:
&lt;/h3&gt;

&lt;p&gt;Canada was undergoing it's first wave of the pandemic and we were under a strict lockdown. I was furloughed from my job with no idea of when things would get back to normal. &lt;/p&gt;

&lt;p&gt;After about 3 weeks of feeling sorry for myself, binge-watching endless hours of Netflix, eating pizza and fries for breakfast, lunch, and dinner, I thought it was about time I got my s*** together and learn a new skill.&lt;/p&gt;

&lt;p&gt;I knew I wanted to be a software developer since I had completed the HTML and CSS sections of &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt; a couple of years ago and actually enjoyed it. I also had a few developer friends who were unaffected or even thriving during the pandemic, thanks to our new 'everything is online and the internet rules the world' way of living.&lt;/p&gt;

&lt;p&gt;Starting May, I was going to start my journey to be a developer!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-may-2020-html-and-css"&gt;
  &lt;/a&gt;
  2. May 2020 - HTML and CSS:
&lt;/h3&gt;

&lt;p&gt;I went over the HTML and CSS parts of freeCodeCamp. It was a good introduction, however I was not satisfied. I did not exactly understand how and when to use a certain CSS class since the exercises did a lot of hand holding.&lt;/p&gt;

&lt;p&gt;The JavaScript and the DSA part of the freeCodeCamp was very overwhelming and I was unsure if it was wise to move on to JS without understanding HTML and CSS properly.&lt;/p&gt;

&lt;p&gt;I decided to take a little detour and bought Jonas's &lt;a href="https://www.udemy.com/course/design-and-develop-a-killer-website-with-html5-and-css3/"&gt;beginner HTML and CSS course&lt;/a&gt; and followed Kevin Powell's &lt;a href="https://www.youtube.com/user/KepowOb"&gt;tutorials&lt;/a&gt;. I finally started getting a hang of flexbox and basic CSS layouts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-juneaugust-2020-javascript-and-tutorial-hell"&gt;
  &lt;/a&gt;
  3. June-August 2020 - JavaScript and Tutorial Hell:
&lt;/h3&gt;

&lt;p&gt;Following video courses and tutorials, I realized that I'm more of a visual learner since I was able to understand the concepts better if they were explained visually. This realization led me to follow Andrew Mead's &lt;a href="https://www.udemy.com/course/modern-javascript/"&gt;JS course&lt;/a&gt; on Udemy. &lt;/p&gt;

&lt;p&gt;I learned most of the basics. However, I soon realized that just typing after the instructor is not a great way to learn how to code. This was a tough phase since I was unsure about my JS abilities. I thought taking other courses would help bolster my knowledge. I tried several YouTube tutorials, 10-hour free freeCodeCamp videos, and other Udemy courses. Everything to no avail.&lt;/p&gt;

&lt;p&gt;I was in what you'd call it a "TUTORIAL HELL"!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Lflc51L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m56erwn0zcz2r0d375n.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Lflc51L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m56erwn0zcz2r0d375n.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-september-2020-react-and-why-redux-almost-made-me-quit-everything"&gt;
  &lt;/a&gt;
  4. September 2020 - React and why Redux almost made me quit everything:
&lt;/h3&gt;

&lt;p&gt;While I doubting my JS skills, I was also reading about how it's not enough to just know JS and one needs to learn a framework to get a job. I heard about Vue, React, and Angular for the first time. I was even more confused.&lt;/p&gt;

&lt;p&gt;I decided to go ahead and learn React since it was literally everywhere. Someone also told me how they understood JS better after learning React. This inspired me!&lt;/p&gt;

&lt;p&gt;The journey was kinda rough thought. Class components and the 'this' keyword overwhelmed me, JSX was something I had never seen before, I had no idea what configuring Webpack meant. I somehow tried to trudged along. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SwsTg6nN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk9sq8707rpkr17l4u2o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SwsTg6nN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk9sq8707rpkr17l4u2o.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, what broke the camel's back was Redux. Yes, the React ecosystem's necessary evil! Nothing made sense. What's a dispatch? What's a reducer? Wait but what about useState? I had no idea what I was doing and I started doubting myself. Am I cutout for this? Was all of this a mistake? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-october-2020-march-2021-building-projects-taught-me-everything"&gt;
  &lt;/a&gt;
  5. October 2020 - March 2021 - Building Projects taught me everything!
&lt;/h3&gt;

&lt;p&gt;I came across a YouTube tutorial one day where someone was building a Netflix clone using React Hooks. I couldn't believe my eyes. It was probably the first time I had seen someone build something other than a boring todo-list.  &lt;/p&gt;

&lt;p&gt;I was instantly hooked (pun intended). I wanted to build that &lt;a href="https://reels.netlify.app/"&gt;clone&lt;/a&gt;. I did not know much about hooks, but I knew that I was not gonna take an entire course to learn about it. I decided to just learn at as I went along.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQy9y20e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2qevc076uehwx5p0jj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQy9y20e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2qevc076uehwx5p0jj3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is when the real learning began! I understood JSX, SCSS, basic Hooks, using an open-source API. Heck, I even got a surface level understanding of React Router, Lodash, Suspense, Lazy-loading and other packages that I never thought I'd be able to master unless I took a course about it! I successfully deployed the project on Netlify via GitHub and in this process, also learned about the basics of CI/CD.&lt;/p&gt;

&lt;p&gt;What everyone said was true. You cannot learn how to code by reading, listening or watching someone else do it. You have to get your hands dirty! I decided to learn new concepts as I needed them. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bgtpE7dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvml9m92sunhqb9njgk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgtpE7dw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvml9m92sunhqb9njgk9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My next project was a &lt;a href="https://covid19ca.netlify.app/"&gt;COVID-19 Tracker for Canada&lt;/a&gt;. While building this project, I learned about using a CSS framework, Chart.js, Leaflet, and Mapbox. &lt;/p&gt;

&lt;p&gt;I decided to implement some back-end functionality to my next projects. I also decided to learn Next.js and Tailwind CSS. I built a simple &lt;a href="https://google-keep-next.vercel.app/"&gt;Google Keep Clone&lt;/a&gt; to learn the basics of Next, Tailwind, and Firebase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--58WN_qwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4320gy7k9uidtpa9z6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--58WN_qwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4320gy7k9uidtpa9z6v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I got a hang of these technologies, I decided to build a &lt;a href="https://lift-next.vercel.app/"&gt;Strength Training Workout app&lt;/a&gt; for my capstone project. Since I worked as a personal trainer for a year, I had a rough idea of what core features were needed to have a fully-functioning app. I doubled down on Next, Tailwind, and Firebase. I wrote about the app in this &lt;a href="https://dev.to/prnvbirajdar/i-built-a-workout-tracking-app-using-next-js-and-firebase-360d"&gt;post&lt;/a&gt; if anyone's interested.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ojyJbSlP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n719wfgul5gu0dspt2e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ojyJbSlP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n719wfgul5gu0dspt2e1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I spent the last month building my &lt;a href="https://pranavbirajdar.com"&gt;personal portfolio website&lt;/a&gt; (here's an &lt;a href="https://pranavbirajdar.com/blog/my-first-portfolio-website-using-next-tailwind-and-typescript-4lg3"&gt;article&lt;/a&gt; about how I was able to achieve perfect Lighthouse score on my portfolio website) and making improvements to my previous projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-april-may-2021-networking-got-me-my-job-without-even-applying"&gt;
  &lt;/a&gt;
  6. April - May 2021 - Networking got me my job without even applying:
&lt;/h3&gt;

&lt;p&gt;I spent most of April going over my JS and React fundamentals. I used the repositories mentioned in this &lt;a href="https://dev.to/prnvbirajdar/5-javasript-github-repositories-for-interview-prep-306h"&gt;post&lt;/a&gt; and &lt;a href="https://www.udemy.com/course/data-structures-algorithms-javascript/"&gt;these&lt;/a&gt; &lt;a href="https://www.udemy.com/course/advanced-javascript-concepts/"&gt;courses&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=YP2f-ErXG_M&amp;amp;list=PLC3y8-rFHvwg7czgqpQIBEAHn8D6l530t"&gt;video tutorials&lt;/a&gt; as a reference.&lt;/p&gt;

&lt;p&gt;During the preparation process, I came across a few podcasts that recommended self-taught applicants to start networking and applying as soon as they learn a JS framework and think they're fairly competent.&lt;/p&gt;

&lt;p&gt;I took this as a sign and joined all the tech related Meetups around the Toronto region. I made sure I updated my resume and my &lt;a href="https://www.linkedin.com/in/prnvbirajdar/"&gt;LinkedIn&lt;/a&gt; profile. I started actively participating and interacting with engineers, managers and startup founders. During one of these Meetups, I met the co-founder of a start-up and we got to talking. Apparently they were looking for a front-end developer and they wanted to interview me for the position. I finally got my first break! &lt;/p&gt;

&lt;p&gt;It was three part interview process; the first consisted of basic questions about my career background and projects. The second was fairly technical where we talked about front-end design principles, SEO optimizations, and details about my projects. My final round consisted of a 2 hour coding challenge where I was asked to code a basic calculator (I will probably make a separate post that dives in further detail about my interview experience). &lt;/p&gt;

&lt;p&gt;A week later I was offered the position!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways:
&lt;/h3&gt;

&lt;p&gt;If you did not read all of that and just want some tangible actions items, here are some of my key takeaways :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't just watch tutorial, build projects. Push them to GitHub and deploy them. Use this free &lt;a href="https://www.colbyfayock.com/2020/08/50-projects-for-react-the-static-web"&gt;e-book&lt;/a&gt; for project ideas.&lt;/li&gt;
&lt;li&gt;Try to make your projects visually attractive. Dribble and Behance are amazing resources for inspiration.&lt;/li&gt;
&lt;li&gt;Start networking. Join your local meetups, connect with people you want to work for on LinkedIn, interact with the Tech Twitter. You never know who is hiring!&lt;/li&gt;
&lt;li&gt;You'll never be completely ready. If you know HTML, CSS, JS and some framework knowledge, start applying today!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know I have been incredibly lucky to be at the right place at the right time to land my first dev job on my first interview without even applying for the position. This amazing &lt;a href="https://www.youtube.com/watch?v=3LopI4YeC4I"&gt;Veritasium&lt;/a&gt; video perfectly sums up my experience and how I feel about luck and success. But I also know that I would never gotten this opportunity without investing almost a year of my life learning, building and teaching myself to code.&lt;/p&gt;

&lt;p&gt;I'm so incredibly fortunate to have found this career and I cannot wait to start this journey!&lt;/p&gt;

&lt;p&gt;Please drop a comment if you have any questions. I also post tons of useful resources and lessons learned from my development journey on Twitter at &lt;a href="https://twitter.com/prnvbirajdar"&gt;@prnvbirajdar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stay safe and happy coding everyone! 👨‍💻🚀👩‍💻&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>HIPAA COMPLIANCE CHECKLIST: STEPS TO TAKE TO BECOME HIPAA-COMPLIANT</title>
      <author>Alex</author>
      <pubDate>Mon, 31 May 2021 15:31:18 +0000</pubDate>
      <link>https://dev.to/alexanderkdev/hipaa-compliance-checklist-steps-to-take-to-become-hipaa-compliant-5602</link>
      <guid>https://dev.to/alexanderkdev/hipaa-compliance-checklist-steps-to-take-to-become-hipaa-compliant-5602</guid>
      <description>&lt;p&gt;&lt;a href="https://exceed-team.com/blog/hipaa-compliance-checklist-steps-to-take-to-become-hipaa-compliant?s=re&amp;amp;a=d"&gt;https://exceed-team.com/blog/hipaa-compliance-checklist-steps-to-take-to-become-hipaa-compliant?s=re&amp;amp;a=d&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hipaa</category>
      <category>webdev</category>
      <category>app</category>
      <category>agile</category>
    </item>
    <item>
      <title>Introduction to Game Tech with AWS</title>
      <author>Adit Modi</author>
      <pubDate>Mon, 31 May 2021 15:28:56 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-game-tech-with-aws-4f03</link>
      <guid>https://dev.to/aws-builders/introduction-to-game-tech-with-aws-4f03</guid>
      <description>&lt;p&gt;You’re imagining future games that delight players, and these games need the infrastructure and solutions to support your development. Bringing your ideas to life requires servers that can scale with tens of millions of players around the world. It requires databases that can process terabytes to petabytes of ever-changing data. It requires analytics solutions that can access that data with millisecond latency. And it requires machine learning that can speed up your processes and even translate into new, immersive gameplay. Players expect games to have regular and compelling updates. More efficient workflows can enable faster time to market when building your next game or migrating existing workloads.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-aws-game-tech"&gt;
  &lt;/a&gt;
  WHY AWS GAME TECH?
&lt;/h1&gt;

&lt;p&gt;Game Tech provides a broad portfolio of managed and core cloud services to help you build faster, operate smarter, and create fun, innovative experiences. No matter your team size, any game can come to life using our range of services, trusted infrastructure, and unmatched pace of innovation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TC8oGdGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/diky79qz6z2zmaybf0yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TC8oGdGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/diky79qz6z2zmaybf0yq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My Background: Cloud Engineer | AWS Community Builder | AWS Educate Cloud Ambassador | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Introduction to AWS is a Series containing different articles that provide a basic introduction to different aws topics/categories. Each article covers the detailed guide on how to work with particular topic/category . This series aims at providing "A Getting Started Guide on Different aws topics / categories ."&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-your-game-in-the-cloud"&gt;
  &lt;/a&gt;
  Build your game in the cloud
&lt;/h1&gt;

&lt;p&gt;Reduce downtime and save costs&lt;br&gt;
Improve gameplay and minimize latency with backend infrastructure that’s closer to your players. Decrease operational costs during low-demand periods using serverless architectures and servers with automatic scaling. With AWS’s infrastructure, studios can pay only for the resources they use instead of investing in servers upfront.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#increase-productivity-and-efficiency"&gt;
  &lt;/a&gt;
  Increase productivity and efficiency
&lt;/h1&gt;

&lt;p&gt;Deploy new game features faster, expand capacity to meet player demand, and reduce fraud and cheating. Reduce the amount of building and testing needed to launch your game using automation and managed services that are designed for game workloads. With over 1 million active customers across 190 countries, 24 regions, 77 Availability Zones, studios can have new IT resources available in just a few clicks, increasing agility.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#extend-player-lifetime-value-ltv"&gt;
  &lt;/a&gt;
  Extend player lifetime value (LTV)
&lt;/h1&gt;

&lt;p&gt;Extend the life of your game and keep innovating with services that help you understand your players and keep them engaged longer. With 175+ services supporting virtually any cloud workload, developers can de-provision servers as needed enabling them to experiment often and fail fast if a game idea doesn’t work.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#enable-innovation-with-a-trusted-partner"&gt;
  &lt;/a&gt;
  Enable innovation with a trusted partner
&lt;/h1&gt;

&lt;p&gt;Build highly available multiplayer games with global reach, automatic scaling, and intelligent matchmaking. We provide the core staples of technology infrastructure, so studios can focus on developing the engagement with players rather than on infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMyR4G-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0atfp6m8jcf8cqyqzixc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMyR4G-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0atfp6m8jcf8cqyqzixc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#amazon-gamelift"&gt;
  &lt;/a&gt;
  Amazon GameLift
&lt;/h1&gt;

&lt;p&gt;Amazon GameLift is a managed service for deploying, operating, and scaling dedicated game servers for session-based multiplayer games. Amazon GameLift makes it easy to manage server infrastructure, scale capacity to lower latency and cost, match players into available game sessions, and defend from distributed denial-of-service (DDoS) attacks. You pay for the compute resources and bandwidth your games actually use, without monthly or annual contracts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D67zTEhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/888c52hu0lzq2adeuvn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D67zTEhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/888c52hu0lzq2adeuvn2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-gamelift-"&gt;
  &lt;/a&gt;
  Why GameLift ?
&lt;/h2&gt;

&lt;p&gt;Here are some of the benefits of using Amazon GameLift:&lt;/p&gt;

&lt;p&gt;Bring your own fully custom multiplayer game servers or use ready-to-go Realtime Servers that require minimal configuration and little or no backend experience.&lt;/p&gt;

&lt;p&gt;Provide low-latency player experience to support fast-action game play.&lt;/p&gt;

&lt;p&gt;Enhance your matchmaking services with intelligent queuing, game session placement, and match backfill.&lt;/p&gt;

&lt;p&gt;Reduce engineering and operational effort to deploy and operate game servers globally.&lt;/p&gt;

&lt;p&gt;Get started fast and pay as you go, with no upfront costs and no long-term commitments.&lt;/p&gt;

&lt;p&gt;Reduce costs by up to 90% with Spot Instances.&lt;/p&gt;

&lt;p&gt;Rely on Amazon Web Services (AWS), including Amazon Elastic Compute Cloud (Amazon EC2) for web-scale cloud computing resources and auto-scaling to manage your hosting capacity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gamelift-offers-a-range-of-solutions-for-game-developers"&gt;
  &lt;/a&gt;
  GameLift offers a range of solutions for game developers:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GameLift hosting for custom-built game servers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GameLift hosting with Realtime Servers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GameLift FleetIQ game hosting optimizations for use with Amazon EC2&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#gamelift-hosting"&gt;
  &lt;/a&gt;
  GameLift hosting
&lt;/h2&gt;

&lt;p&gt;Amazon GameLift offers a fully managed service for deploying, operating, and scaling session-based, multiplayer game servers. GameLift replaces the work required to host your own custom game servers, including buying and setting up hardware, and managing ongoing activity, security, storage, and performance tracking. Auto-scaling capabilities provide additional protection from having to pay for more resources than you need, while making sure you always have games available for new players to join with minimal waiting.&lt;/p&gt;

&lt;p&gt;To learn more about how the GameLift hosting solution works, see &lt;a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-howitworks.html"&gt;How GameLift works&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gamelift-hosting-with-realtime-servers"&gt;
  &lt;/a&gt;
  GameLift hosting with Realtime Servers
&lt;/h2&gt;

&lt;p&gt;Use Realtime Servers to stand up games that don't need custom-built game servers. This lightweight server solution provides ready-to-go game servers that can be configured to fit your game. You can deploy game servers with anything from minimal configuration settings to custom logic that is specific to your game and players.&lt;/p&gt;

&lt;p&gt;To learn more about how GameLift hosting with Realtime Servers works, see &lt;a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/realtime-howitworks.html"&gt;How Realtime Servers Work&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gamelift-fleetiq"&gt;
  &lt;/a&gt;
  GameLift FleetIQ
&lt;/h2&gt;

&lt;p&gt;GameLift FleetIQ optimizes the use of low-cost Spot Instances for cloud-based game hosting. With this feature, you can work directly with your hosting resources in Amazon EC2 and Auto Scaling and take advantage of GameLift optimizations to deliver inexpensive, resilient game hosting for your players. This solution is designed for game developers who need more flexibility than is offered in the fully managed GameLift solutions.&lt;/p&gt;

&lt;p&gt;To learn more about how GameLift FleetIQ works with Amazon EC2 and Auto Scaling for game hosting, see the &lt;a href="https://docs.aws.amazon.com/gamelift/latest/fleetiqguide/gsg-intro.html"&gt;GameLift FleetIQ Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#amazon-lumberyard"&gt;
  &lt;/a&gt;
  Amazon Lumberyard
&lt;/h1&gt;

&lt;p&gt;Amazon Lumberyard is a free, cross-platform, 3D game engine for you to create the highest-quality games, connect your games to the vast compute and storage of the AWS Cloud, and engage fans on Twitch. By starting game projects with Lumberyard, you can spend more of your time creating great gameplay and building communities of fans, and less time on the undifferentiated heavy lifting of building a game engine and managing server infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--peUc9HyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntld5pbacqsdgoe15h76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--peUc9HyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntld5pbacqsdgoe15h76.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-lumberyard"&gt;
  &lt;/a&gt;
  What is Lumberyard?
&lt;/h2&gt;

&lt;p&gt;Amazon Lumberyard is a free, cross-platform, 3D game engine that allows you to create high-quality games, connect your games to the compute and storage of the AWS Cloud, and engage fans on Twitch. With Lumberyard, you can spend more time creating great gameplay and building communities of fans, and less time on the heavy lifting of building a game engine and managing servers.&lt;/p&gt;

&lt;p&gt;Lumberyard offers everything a professional game developer can expect, such as a full-featured editor, native code performance, and stunning visuals. It also includes hundreds of other ready-to-use features like networking, cinematics, the Script Canvas editor, the Animation Editor, audio tools, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-worldclass-engine"&gt;
  &lt;/a&gt;
  A world-class engine
&lt;/h2&gt;

&lt;p&gt;At its core, Lumberyard is a high-performance real-time 3D engine that produces incredible visual fidelity. Lumberyard includes all the capabilities that professional designers, artists, and developers expect, with familiar user experience patterns that enable fast adoption and development. Its robust toolset enables rapid iteration to the highest quality. Built on a modular architecture and extensible through the Gems framework, Lumberyard makes it easy to add new features, APIs, and assets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deeply-integrated-with-amazon-web-services"&gt;
  &lt;/a&gt;
  Deeply integrated with Amazon Web Services
&lt;/h2&gt;

&lt;p&gt;Lumberyard’s online capabilities, backed by Amazon Web Services, offer staggering possibilities to developers. Common connected elements like dedicated servers, dynamic content, online economies, and real-time stats are easily implemented and scaled, so you can focus on the creative aspects of your project. With Lumberyard’s crossplay capabilities and Twitch integration, you can find new and novel ways to engage people socially. The limitless potential of AWS can deliver experiences that reach far beyond the capabilities of any single device.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4h3kuh2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4jjbiguhokgxrfnpug5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4h3kuh2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4jjbiguhokgxrfnpug5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-integrations-include"&gt;
  &lt;/a&gt;
  AWS integrations include:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#amazon-gamelift"&gt;
  &lt;/a&gt;
  Amazon GameLift
&lt;/h3&gt;

&lt;p&gt;Amazon GameLift is an AWS service for deploying, operating, and scaling session-based multiplayer games. You can scale high-performance game servers up and down to meet player demand without additional engineering effort.&lt;/p&gt;

&lt;p&gt;For more information, see the &lt;a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/"&gt;Amazon GameLift Developer Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloud-canvas"&gt;
  &lt;/a&gt;
  Cloud Canvas
&lt;/h3&gt;

&lt;p&gt;Cloud Canvas is Lumberyard's technology for connecting your game to Amazon Web Services. With Cloud Canvas, you can use AWS to implement cloud-hosted features and create asynchronous multiplayer games. Using AWS means you no longer have to acquire, configure, or operate host servers to implement connected gameplay.&lt;/p&gt;

&lt;p&gt;You can build live, online game features, such as a community news feed, daily gifts, or in-game notifications, in minutes with Lumberyard's Cloud Canvas tool. Using cloud gems, you can build gameplay that connects to AWS services, such as Amazon DynamoDB, AWS Lambda, and Amazon S3.&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/lumberyard/latest/userguide/cloud-canvas-intro.html"&gt;Implementing Connected Features with Cloud Canvas&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-sdk-for-c"&gt;
  &lt;/a&gt;
  AWS SDK for C++
&lt;/h3&gt;

&lt;p&gt;The AWS SDK for C++ provides C++ API operations for numerous AWS services including Amazon S3, Amazon EC2, Amazon DynamoDB, and more, with support for all major native platforms. You can use the SDK to integrate AWS components into your game.&lt;/p&gt;

&lt;p&gt;For more information, see the &lt;a href="https://aws.amazon.com/sdk-for-cpp/"&gt;AWS SDK for C++&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrated-with-twitch"&gt;
  &lt;/a&gt;
  Integrated with Twitch
&lt;/h3&gt;

&lt;p&gt;Lumberyard is integrated with Twitch so that you can build games that engage with more than 1.7 million monthly broadcasters and more than 100 million monthly viewers on Twitch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twitch-chatplay"&gt;
  &lt;/a&gt;
  Twitch ChatPlay
&lt;/h3&gt;

&lt;p&gt;The Twitch ChatPlay feature within Lumberyard helps you build gameplay that interacts in real time with Twitch viewers. For example, you can build a game where viewers can vote on game outcomes, gift power-ups to their favorite players, or change the level based on the number of viewers watching the player.&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href="https://docs.aws.amazon.com/lumberyard/latest/userguide/chatplay-intro.html"&gt;Twitch ChatPlay System&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-with-source"&gt;
  &lt;/a&gt;
  Free with Source
&lt;/h3&gt;

&lt;p&gt;Lumberyard is free, including source code. You can customize Lumberyard for your team and vision for your project today, and for future projects. There are no seat fees, subscription fees, or requirements to share revenue. Only pay for the AWS services that you choose to use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;traditional streaming approaches for 3D interactive content and applications like online gaming have difficulty reaching this level of concurrency. The cost is prohibitive, and even if budgets were limitless, the cloud GPU hardware is just not available to scale. To ensure the future of our cloud gaming for changing experiences and immersive environments we must face the realities of current approaches head-on and redefine scale to incorporate the concepts of concurrency, reach and new experiences.  Driving towards a future where the possibilities are limitless, leading to games being built in a cloud-first approach. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3dcbFQK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t27cf4cyf880ww1r29dx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3dcbFQK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t27cf4cyf880ww1r29dx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this guide helps you with the Introduction to GameTech with AWS, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS Services then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Revealing Module Pattern in Javascript</title>
      <author>Patricia Nicole</author>
      <pubDate>Mon, 31 May 2021 15:27:46 +0000</pubDate>
      <link>https://dev.to/pat_the99/revealing-module-pattern-in-javascript-og2</link>
      <guid>https://dev.to/pat_the99/revealing-module-pattern-in-javascript-og2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#js-2-wil-post"&gt;
  &lt;/a&gt;
  [JS #2 WIL Post]
&lt;/h2&gt;

&lt;p&gt;Encapsulation is not inherent in Javascript. There are no modifiers like &lt;code&gt;private&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt; to help protect objects from unwanted access. This is one reason why function scope is important in JS. Each function creates a new scope. The scope dictates the visibility of the variables inside a function.&lt;/p&gt;

&lt;p&gt;For example in the snippet below, the &lt;code&gt;gridItems&lt;/code&gt; attribute of the gameboard cannot be accessed directly unless the getter/setter method is used. Thus, the possibility of setting incorrect grid item values will be removed.&lt;/p&gt;

&lt;p&gt;Note that the checking of row, column, diagonal winners of the game board is not accessible from the objects that will be importing it. Only the returned functions of &lt;code&gt;GameBoard&lt;/code&gt; will be accessible outside it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const GameBoard = (function() {
//no one can access this variable directly
    let gridItems = Array(9).fill('I');

    function resetBoard() {
        gridItems = Array(9).fill('I');
    }

    function setGridItemValue(index) {
        gridItems[index] = turn;
    }

    function getGridItems() {
        return gridItems.slice(0);
    }

    function checkWinner(board) {
        if(checkDraw(board)) {
            return "tie";
        }

        if(checkRowWin(board) || 
           checkColumnWin(board) || 
           checkDiagonalWin(board)) {
            return winner;
        }

        return null;
    }

    ...

    return {
        setGridItemValue,
        checkWinner,
        resetBoard,
        getGridItems,
    }
}());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One more important thing to note about this pattern aside from encapsulation is its use of IIFE (immediately invoked function expressions). It is run as soon as it is defined. It is sometimes called a self-executing anonymous function and has two parts:&lt;br&gt;
A. The function itself with the Grouping operator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function () {
  statements
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;B. The second one creates the IIFE &lt;code&gt;()&lt;/code&gt; through which the JS engine will directly interpret the function. &lt;/p&gt;

&lt;p&gt;The second part makes sure that there is no accidental invocation of the function, thus creating a lot of GameBoard objects. To use the GameBoard, the user can just call the publicly available functions, i.e,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GameBoard.resetBoard();
GameBoard.checkWinner();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the  GameBoard module can be used in other parts of the JS projects. Check the usage of the &lt;code&gt;GameBoard&lt;/code&gt; function in this &lt;a href="https://github.com/fatrixienicolieopetina/tictactoe"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References&lt;br&gt;
[1] &lt;a href="https://gist.github.com/zcaceres/bb0eec99c02dda6aac0e041d0d4d7bf2"&gt;Revealing Module Pattern&lt;/a&gt; &lt;br&gt;
[2] &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;IIFE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Amazing Testimonials Hover Using HTML &amp; VanillaTilt</title>
      <author>Nikhil Bobade </author>
      <pubDate>Mon, 31 May 2021 15:14:01 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-testimonials-hover-using-html-vanillatilt-13ad</link>
      <guid>https://dev.to/nikhil27b/amazing-testimonials-hover-using-html-vanillatilt-13ad</guid>
      <description>&lt;p&gt;Today I created a Amazing Testimonials Hover Using HTML &amp;amp; Vanilla Tilt. This is simple testimonials using html and CSS and I use vanilla tilt for hover effect. I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/oNZpgWE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>20 JavaScript Libraries to use in your Projects</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Mon, 31 May 2021 14:21:21 +0000</pubDate>
      <link>https://dev.to/line/20-javascript-libraries-to-use-in-your-projects-44h9</link>
      <guid>https://dev.to/line/20-javascript-libraries-to-use-in-your-projects-44h9</guid>
      <description>&lt;p&gt;JavaScript is a programming language that is vastly used in the world both on the client-side as well as server-side that allows you to make web pages convertible and create dynamic web content.&lt;/p&gt;

&lt;p&gt;It has a lot of pre-build libraries that makes your work a lot more simpler than you think, &lt;/p&gt;

&lt;p&gt;But &lt;strong&gt;what is JavaScript Libraries?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;A JavaScript library is a library of pre-written JavaScript that allows for easier development of JavaScript-based applications, especially for AJAX and other web-centric technologies.&lt;/p&gt;

&lt;p&gt;Let's see some of the most important JavaScript Libraries you should use in your project- &lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Redux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the size of applications become huge in the production process, the data flouncy becomes a problem. Redux assists you to overcome that issue by helping to maintain a predictable state for the application.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Omniscient&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Omniscient let programmers to do fast top-down rendering embracing, immutable data, and functional programming.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Chart.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Chart.js is an open-source library that gives divergent solutions to all of that chart which demands your corresponding application.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;D3 js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;D3.js is an exhaustive library that can be used for the Visualization of data and concisely conveying of data.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;SurveyJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SurveyJS is a JavaScript library that help developers build customizable surveys and quizzes that can be integrated with any JS application.&lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;Final Form&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Final Form is the library that creates building beautiful and approachable forms easily.&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;Choreographer-JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choreographer-Js is a simple library that allows you to handle CSS animations as well as non-CSS animations&lt;/p&gt;

&lt;p&gt;8.&lt;strong&gt;Typeahead.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typehead.js provides auto-complete for search boxes and other text boxes on various websites.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;9.&lt;strong&gt;Multiple.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This JS library can be used to Galvanize the visual appeal of your website. It can be used to create impressive backgrounds for web page content.&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;ApexCharts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ApexCharts gives interactive charts feature that can be used with websites running with JavaScript frameworks.&lt;/p&gt;

&lt;p&gt;11.&lt;strong&gt;Premonish&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Premonish is a simple JavaScript library that can forecast what element the user will collaborate with.&lt;/p&gt;

&lt;p&gt;12.&lt;strong&gt;Stretchy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stretchy is a simple library that can be used to auto-size input elements on web pages.&lt;/p&gt;

&lt;p&gt;13.&lt;strong&gt;Hammer.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hammer JS is a library that can be used to detect and work with touch gestures in general, including multi-touch gestures.&lt;/p&gt;

&lt;p&gt;14.&lt;strong&gt;JS Encrypt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JS Encrypt provides easy to implement RSA JavaScript encryption for applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt; or &lt;a href="https://patreon.com/chipoo"&gt;Membership&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;15.&lt;strong&gt;Discord.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Discord.JS can also be used to create bots that can automate and enhance functionalities in discord servers.&lt;/p&gt;

&lt;p&gt;16.&lt;strong&gt;Google Maps Utility Library&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google Maps is vastly used by people for navigation, as well as by developers for utilizing map-based functionalities to websites and apps.&lt;/p&gt;

&lt;p&gt;17.&lt;strong&gt;Typed.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typed.JS provides typing animations that can be added to any JS application.&lt;/p&gt;

&lt;p&gt;18.&lt;strong&gt;Math.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this library, complex mathematical problems can be run at the browser without straining backend servers.&lt;/p&gt;

&lt;p&gt;19.&lt;strong&gt;Howler.JS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Howler JS is a library that can be used to detect and work with touch gestures in general, including multi-touch gestures.&lt;/p&gt;

&lt;p&gt;20.&lt;strong&gt;ScrollMagic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simple scrolling web pages can be made a UX element to surprise and engage website users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/chipoo"&gt;DONATE&lt;/a&gt; or &lt;a href="https://patreon.com/chipoo"&gt;Membership&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#subscribe-to-newsletter-get-amazing-content-which-is-not-available-here-httpslinenewslettersubstackcom"&gt;
  &lt;/a&gt;
  Subscribe to Newsletter (Get Amazing Content, which is not available here), &lt;a href="https://linenewsletter.substack.com/"&gt;https://linenewsletter.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/chetanistaken"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>Could Aleph.js be the next big React Framework?</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 31 May 2021 14:03:13 +0000</pubDate>
      <link>https://dev.to/codesphere/could-aleph-js-be-the-next-big-react-framework-2cgb</link>
      <guid>https://dev.to/codesphere/could-aleph-js-be-the-next-big-react-framework-2cgb</guid>
      <description>&lt;p&gt;A couple of months ago we covered Deno, a new JavaScript runtime that is attempting to dethrone Node.js as the de facto runtime for executing JavaScript. Ironically, Deno is being developed by Ryan Dahl, the same developer who made Node.js back in 2009. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here’s that article if you're looking to learn more about our take on Deno:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://codesphere.com/articles/say-yes-to-deno-23fa587e3877"&gt;https://codesphere.com/articles/say-yes-to-deno-23fa587e3877&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While Deno has a lot to offer, such as built-in TypeScript support and a simpler dependency system, the biggest hurdle to its adoption is the plethora of dev tools and frameworks that are dependent on Node.js. As Deno gains traction, however, developers have begun creating new frameworks that rely on Deno instead of Node.js.&lt;/p&gt;

&lt;p&gt;This is where Aleph.js comes in. The two most popular React frameworks for creating production-ready apps are undeniably Next.js and Gatsby; Both of which are dependent on Node.js, Aleph.js attempts to create an equivalent React framework that is fast for users and convenient for developers. In their own words:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aleph.js gives you the best developer experience for building modern web applications:&lt;br&gt;
TypeScript in Deno, ES module imports, file-system routing, SSR &amp;amp; SSG, HMR with Fast Refresh, and more. No config needed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’d like to hear about Aleph.js straight from the horse's mouth, you can check out their documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alephjs.org/"&gt;https://alephjs.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-alephjs-make-react-denofriendly"&gt;
  &lt;/a&gt;
  How Aleph.js make React Deno-friendly
&lt;/h3&gt;

&lt;p&gt;While it is technically possible to create a React application using Deno instead of Node.js, create-react-app by default is going to use NPM. Aleph.js offers that same sort of quick-start as CRA but allows you to have your React application already set up with Deno.&lt;/p&gt;

&lt;p&gt;In fact, all it takes is a few command lines to have your Aleph.js app up and running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deno install --unstable -A -f -n aleph https://deno.land/x/aleph@v0.2.28/cli.ts
aleph init my-app
cd my-app &amp;amp;&amp;amp; aleph dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this respect, Aleph.js is paving the way for Deno to become beginner-friendly and not just a niche runtime for early adopters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alephjs-is-essentially-just-nextjs-built-on-deno"&gt;
  &lt;/a&gt;
  Aleph.js is essentially just Next.js built on Deno
&lt;/h3&gt;

&lt;p&gt;In order to make React more SEO-friendly, Next.js was released in 2016 as a React framework that enables server-side rendering(SSR) and static-site generation(SSG). Both of these tools allow pages to be rendered relatively quickly for search engine crawlers meaning your page will rank higher.&lt;/p&gt;

&lt;p&gt;Aleph.js seems to be open that they are essentially Next.js for Deno. They say themselves:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aleph.js (or Aleph or א, /ˈɑːlɛf/) is a React Framework for Deno, inspired by Next.js.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just like Next.js, Aleph provides SSR and SSG out of the box in order to allow developers to create SEO-friendly apps. In addition, Aleph provides some other built-in features that don’t come out of the box in Next.js, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hot Reloading (Using React Fast Refresh)&lt;/li&gt;
&lt;li&gt;ESM Import Syntax (No need for webpack)&lt;/li&gt;
&lt;li&gt;TypeScript-Ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously, the main differentiating factor between Next.js and Aleph.js is Deno. Since Aleph is built on Deno, you have access to all the benefits of the runtime, however, you may not be able to easily use every NPM package that you want. While many packages are compatible (See here how to use them in Aleph), &lt;strong&gt;many packages rely on Node-specific functions, meaning they will not work in Aleph.js.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-whats-our-verdict"&gt;
  &lt;/a&gt;
  So, What’s Our Verdict?
&lt;/h3&gt;

&lt;p&gt;So, what’s our verdict? Well, Aleph.js seems like a great framework, but you shouldn’t quite bet the farm on it yet. As with any early adoption, there’s going to be a lack of documentation and compatible libraries that is going to make it hard for you to do everything you need to do. Most of these issues we think you’ll encounter however are not because Aleph.js is new, but because Deno is. &lt;strong&gt;If Deno succeeds in becoming an industry standard, however, then Aleph.js could be the next big React framework.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In other words, we’re all for giving Aleph.js a try for your next pet project. If you’re deciding on your company's tech stack, however, Deno probably isn’t where it needs to be yet in order to suit all your needs.&lt;/p&gt;

</description>
      <category>react</category>
      <category>alephjs</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Why do I think Haskell is a good choice in regards to Software Security?</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 31 May 2021 13:46:38 +0000</pubDate>
      <link>https://dev.to/typeable/why-do-i-think-haskell-is-a-good-choice-in-regards-to-software-security-3do</link>
      <guid>https://dev.to/typeable/why-do-i-think-haskell-is-a-good-choice-in-regards-to-software-security-3do</guid>
      <description>&lt;p&gt;Author: Ville Tirronen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdctE2sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/security_en.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdctE2sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/security_en.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Typeable Team appreciates security! We love Haskell, but is Haskell a good choice when secure software is the goal? We would love to say yes, but like most empirical questions about software development, there is simply no hard evidence that Haskell, or any general programming language, is more secure than any other. That is not to say that the &lt;a href="https://dev.to/typeable/how-we-choose-programming-languages-at-typeable-3mnc"&gt;Typeable's language choice&lt;/a&gt; doesn't matter in regards to security, but how it does may need to be elaborated.&lt;/p&gt;

&lt;p&gt;After teaching introductory Software Security for half a decade I can attest that Software Security has no universal theory on which to rely.  Security is most often taught by enumerating different security issues, mitigations and security models and hoping that students can build from them to gain general understanding. Even of those theoretical works that exist, relatively few of try to build a link between programming language and security aspects.&lt;/p&gt;

&lt;p&gt;In this post, I'll sketch my favourite perspective for linking the choice of programming language to security. This is viewing the different vulnerabilities on the scale between the "domain" and "incidental" vulnerabilities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Purely technical               Purely domain specific
    vulnerability                    vulnerability
        ↓                                  ↓
        ┠───────────╂───────────╂──────────┨
             ↑            ↑          ↑
        Tools should  Tools can  You have to
            fix         help       think
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The axis above represents the provenance of different software vulnerabilities.  On the far right, we have purely domain specific errors, that is, those that are completely independent of the tools used. One example of such domain error is the "security questions" many early 2000s web services had for password recovery. Often the questions were like "what is your mothers maiden name?". Then, around 2009-10 a thing called social media appeared and suddenly everyone's "mothers maiden name" becomes public information. It doesn't matter what technology you use to implement such "security questions" scheme. It is broken regardless.&lt;/p&gt;

&lt;p&gt;On the far left of our scale, we have errors that have a purely technical cause.  They are completely independent of the problem domain. One good example of such a problem is the notorious buffer overflows.  It does not matter at all what you're storing in the buffer -- if the buffer overflows it allows an attacker to mess with the supporting structures of your program at will. Here, you can avoid buffer overflows, at least in theory, by using a toolchain that has no unchecked buffer writes.&lt;/p&gt;

&lt;p&gt;Between the far ends of the scale, we have a part where the vulnerability is not entirely technical, but it is neither completely a domain matter either. One stereotypical example of such vulnerability is typically found in services that allow file uploads.&lt;/p&gt;

&lt;p&gt;In such services, it is often tempting to write the user-supplied file directly on the server filesystem. However, with which filename? Using the user-supplied filename directly is a recipe for disaster since it could be something like &lt;code&gt;../../../etc/nginx/nginx.conf&lt;/code&gt;, &lt;code&gt;../../../etc/passwd/&lt;/code&gt; or any number of files the server can touch, but really shouldn't.&lt;/p&gt;

&lt;p&gt;This hazard is a mixture of the technical and the domain and while it is unlikely that any toolchain would prevent this "out of the box", it is easy to see how some tools might help to control such problematic behaviour better than others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-the-scale"&gt;
  &lt;/a&gt;
  Applying the scale
&lt;/h2&gt;

&lt;p&gt;The usefulness of this scale is in appraising your toolings, such as programming language and frameworks. How many of the purely technical issues does your tooling handle all by itself? How far along the scale does it offer you extra leverage against errors that lead to vulnerabilities?&lt;/p&gt;

&lt;p&gt;Modern tooling should ideally prevent the purest technical vulnerabilities almost entirely. For example, most modern languages, like Haskell, C# and Java are all mostly memory safe and all of them will largely prevent buffer overflows, double frees and other technical problems. But, good tooling can be leveraged further. For example one can easily imagine a system that has technical means of separating absolute and relative file paths, making it easier to control for path traversal attacks, such as user uploading a file over some critical system configuration file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#haskell-on-the-low-end-of-the-scale"&gt;
  &lt;/a&gt;
  Haskell, on the low end of the scale
&lt;/h2&gt;

&lt;p&gt;Haskell, like most modern languages, performs well with low-level, technical vulnerabilities. For one, Haskell is memory safe which takes one huge expanse of potential vulnerabilities out of reach of potential attackers -- arrays and buffer overflows are even more so. Secondly, Haskell is statically dispatched, which also guards against entire families of errors, such as PHP's famous "type juggling":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From imaginary CSRF token protection:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tokenHash&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$hashFromInternet&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'tokenHash'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"200 OK - Request accepted"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"403 DENIED - Bad CSRF token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;PHP_EOL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the issue above? Most dynamic languages, like PHP, decide the "type" of JSON record during run time and often based on the structure of input data.  Also, in object-oriented programming, the "type" is used to select behaviour through dynamic dispatch, effectively allowing the attacker to choose which code is executed. Compoundingly, PHP's equality via &lt;code&gt;==&lt;/code&gt; is dependent on the input types and the attacker can bypass the security entirely in the above example.&lt;/p&gt;

&lt;p&gt;A similar issue has occurred with Java (and other languages, see &lt;a href="https://frohoff.github.io/appseccali-marshalling-pickles/"&gt;https://frohoff.github.io/appseccali-marshalling-pickles/&lt;/a&gt;). Java provided a suberbly user-friendly way of serializing any object to disk and recovering it back in its original form. The only unfortunate problem was that there was no way to say which object you are expecting! This allows attackers to send you objects that, upon deserialization in your program, become nasties that wreak havoc and steal data.&lt;/p&gt;

&lt;p&gt;This is not to say that you &lt;em&gt;can't&lt;/em&gt; have secure code in PHP or that you &lt;em&gt;can't&lt;/em&gt; have errors like this in Haskell, but that Haskell is not naturally inclined towards these vulnerabilities. To put the above example into Haskell code, it would read something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;csrfToken&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;doSomething&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Handler&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;doSomething&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;csrfToken&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;csrfToken&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;throwM&lt;/span&gt; &lt;span class="kt"&gt;BadCsrfTokenError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, type juggling is taken care of by routine practice of giving interface types a concrete, known even before the program is executed, &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#haskell-middle-of-the-scale"&gt;
  &lt;/a&gt;
  Haskell, middle of the scale
&lt;/h2&gt;

&lt;p&gt;When considering the middle of the "technical" vs. "domain" scale, Haskell has features that make it, in my mind, quite an advantageous choice.&lt;/p&gt;

&lt;p&gt;Foremost, Haskell can model data more accurately than languages like C, Javascript or even Java. This is mostly due to its convenient syntax and sum types.  Accurate modelling of data is relevant to security since most domain code is a model of some real-world phenomenon, and the less accurate it is, the more play it gives to attackers.&lt;/p&gt;

&lt;p&gt;Having accurate modelling tools helps programmers to navigate around domain blunders. For example, consider the simple ability to easily express with one line that, say, a social security number is either unknown, redacted or 'this value here':&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;SSN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Unknown&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;Redacted&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;SSN&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, contrast this to modelling the same idea using the string values &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;"&amp;lt;REDACTED&amp;gt;"&lt;/code&gt; and &lt;code&gt;"191091C211A"&lt;/code&gt;. What happens if the user types "&amp;lt;REDACTED&amp;gt;" in SSN input box? Could it cause an issue later on? With Haskell, you don't need to worry about such.&lt;/p&gt;

&lt;p&gt;Similar techniques can help programmers improve security everywhere. To continue the previous example of safely storing user files on a server, if your user upload storing function starts with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;storeFileUpload&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Path&lt;/span&gt; &lt;span class="kt"&gt;Abs&lt;/span&gt; &lt;span class="kt"&gt;File&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ByteString&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;storeFileUpload&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you are much less likely to create a situation where users can overwrite your system files: this code will not compile unless it is practically impossible that the filepath does not contain a path traversal attack. Similarly, if, after a user has failed to log in, the user data simply is not available to the program, or if you simply &lt;em&gt;can not&lt;/em&gt; embed unchecked user input to HTML pages, you're less likely to screw up.&lt;/p&gt;

&lt;p&gt;I'm not claiming that other languages can't be used to write secure code nor even that Haskell automatically makes your code more secure. Only that Haskell has very convenient tools that you can use to build up your security.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#haskell-and-domain-errors"&gt;
  &lt;/a&gt;
  Haskell and domain errors
&lt;/h1&gt;

&lt;p&gt;Earlier, I defined pure domain errors as those errors that are indifferent regarding the tools used. This is not entirely true. People don't choose their tools randomly and communities of similar-minded people often form around different tools. And these communities may have a different outlook on security.&lt;/p&gt;

&lt;p&gt;The thing that speaks in Haskell's preference here is the fact that you can't get good at Haskell by accident. Haskell is presently enough rare technology that not all Universities even teach it and almost no curriculum is completely taught with it. That is, if someone is good at Haskell, it is not an unreasonable guess that they would also have skill at working with formal systems or interest in computer science topics.  Though this does not ensure that Haskell programmers know anything about security it does hint that they might be fast on the uptake when it becomes necessary.&lt;/p&gt;

&lt;p&gt;But, all this is guesswork. Haskell community has been small enough not to be targetted by attackers and Haskell people, in general, haven't yet been burned by security issues in the same way as Javascript or Python developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Haskell isn't certainly without flaws and I'm not claiming that other languages cannot share similar advantages. And in some cases, such as timing and other side-channel attacks, other tools may even offer a better security profile.  Also, some language communities are more focused on security than Haskell. But personally, I find that among the current viable selection of general-purpose programming languages, Haskell offers a very good package for writing secure software.&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>security</category>
      <category>programming</category>
      <category>functional</category>
    </item>
    <item>
      <title>DNS prefetch:  A Web Performance Trick</title>
      <author>Alpha Olomi</author>
      <pubDate>Mon, 31 May 2021 13:44:54 +0000</pubDate>
      <link>https://dev.to/alphaolomi/dns-prefetch-a-web-performance-trick-k5i</link>
      <guid>https://dev.to/alphaolomi/dns-prefetch-a-web-performance-trick-k5i</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Web performance is the objective measurements and the perceived user experience of load time and runtime. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;DNS-prefetch&lt;/code&gt; is an attempt to resolve domain names before resources get requested. This could be a file loaded later or link target a user tries to follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-dnsprefetch"&gt;
  &lt;/a&gt;
  Why use dns-prefetch?
&lt;/h2&gt;

&lt;p&gt;When a browser requests a resource from a (third party) server, that cross-origin’s domain name must be resolved to an IP address before the browser can issue the request. This process is known as DNS resolution. While DNS caching can help to reduce this latency, DNS resolution can add significant latency to requests. For websites that open connections to many third parties, this latency can significantly reduce loading performance.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dns-prefetch&lt;/code&gt; helps developers mask DNS resolution latency. The HTML  element offers this functionality by way of a rel attribute value of dns-prefetch. The cross-origin domain is then specified in the href attribute:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"//example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- and all other head elements --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- your page content --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should place &lt;code&gt;dns-prefetch&lt;/code&gt; hints in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; any time your site references resources on cross-origin domains, but there are some things to keep in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-best-practices"&gt;
  &lt;/a&gt;
  How to use: Best practices
&lt;/h2&gt;

&lt;p&gt;There are 3 main things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dns-prefetch&lt;/code&gt; is only effective for DNS lookups on cross-origin domains, so avoid using it to point to your site or domain. This is because the IP behind your site's domain will have already been resolved by the time the browser sees the hint.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's also possible to specify &lt;code&gt;dns-prefetch&lt;/code&gt; (and other resources hints) as an HTTP header by using the HTTP Link field&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Link: &amp;lt;https://fonts.gstatic.com/&amp;gt;; rel=dns-prefetch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Consider pairing &lt;code&gt;dns-prefetch&lt;/code&gt; with the &lt;code&gt;preconnect&lt;/code&gt; hint. While &lt;code&gt;dns-prefetch&lt;/code&gt; only performs a DNS lookup, &lt;code&gt;preconnect&lt;/code&gt; establishes a connection to a server. This process includes DNS resolution, as well as establishing the TCP connection, and performing the TLS handshake if a site is served over HTTPS. Combining the two provides an opportunity to further reduce the perceived latency of cross-origin requests. You can safely use them together like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com/"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If a page needs to make connections to many third-party domains, preconnecting them all is counter productive. The &lt;code&gt;preconnect&lt;/code&gt; hint is best used for only the most critical connections. For the others, just use&lt;code&gt;&amp;lt;link rel="dns-prefetch"&amp;gt;&lt;/code&gt; to save time on the first step, the DNS lookup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#see-also"&gt;
  &lt;/a&gt;
  See also
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel"&gt;HTML attribute: rel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/prefetching-preloading-prebrowsing/"&gt;Prefetching, Preloading and Pre-browsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link"&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Try to avoid comments (most of the time)</title>
      <author>Davor Tvorić</author>
      <pubDate>Mon, 31 May 2021 13:36:50 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/try-to-avoid-comments-most-of-the-time-2f6a</link>
      <guid>https://dev.to/bornfightcompany/try-to-avoid-comments-most-of-the-time-2f6a</guid>
      <description>&lt;p&gt;Writing down a comment when you're coding might seem like you're going to help yourself or someone that might stumble upon your code, but, in reality, it might cause confusion and make your code less readable. If you're just starting out with coding, you sometimes feel that you need to comment every line to get your point across. That's probably not the case most of the time and you're probably just adding unnecessary noise to your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-explanation"&gt;
  &lt;/a&gt;
  Code explanation
&lt;/h2&gt;

&lt;p&gt;If possible, try to use the time you would spend on writing a comment on coming up with better naming or clearer code structures. Take a look at this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// check if employee can receive overtime pay
if (employee.isFullTime &amp;amp;&amp;amp; employee.workHours &amp;gt; 160)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of relying on the comment to explain the condition, it would be much wiser to create a function with a clear name that does this check&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const isEmployeeEligibleForOvertimePay = (employee) =&amp;gt; {
    return employee.isFullTime &amp;amp;&amp;amp; employee.workHours &amp;gt; 160;
}

if (isEmployeeEligibleForOvertimePay(employee))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's now possible to reuse this small piece of code, as well as not have any doubts what this condition does. This might be a much larger condition, but a name might be sufficient enough to be aware what it's doing.&lt;/p&gt;

&lt;p&gt;Of course, there is a case where it's very difficult to come up with a meaningful name or it's just not possible. In that case a comment would be helpful, but you should have that as a last resort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outdated-comments"&gt;
  &lt;/a&gt;
  Outdated comments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function insertData(data) {
    store.user.insert(data); // updates the current user data
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've been working on some older projects, something like this might've popped up. You can see that some data is being inserted, but the comment says otherwise. The comment might be right, although someone could have forgotten to delete it. This causes you to doubt the code and you're forced to check what's really going on in the insert method.&lt;/p&gt;

&lt;p&gt;To prevent this, it's probably better to rename the functions to better represent their functionality and delete the unnecessary comment.&lt;br&gt;
This is something that might happen with any comment. If someone forgets to update the comment after a couple of changes, another person can't be sure what's right or not. It's not a critical mistake and nothing will break because of this, but you might spend a couple of minutes/hours until you find out the truth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redundant-comments"&gt;
  &lt;/a&gt;
  Redundant comments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// checks whether the student lives in a dorm
if (student.livesInDorm)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think we can all agree that these kinds of comments are totally unnecessary. You might feel better that you've written a couple lines of comments, but this doesn't help anyone when it's obvious what's happening&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separators"&gt;
  &lt;/a&gt;
  Separators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ---------------
// VARIABLES
// ---------------
$blue: #1257ab;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could be debated, but I think that the file structure should mandate where something belongs. By having these kinds of comments, you're just breaking up the flow of the code and not adding much value. If this is something that occurs a lot, having a defined standard with vertical formatting might have a much more appealing look.&lt;/p&gt;

&lt;p&gt;Some people are more of a visual type, so separators can come in handy to visualize the various parts of a file, but I would still stay away from them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commented-code"&gt;
  &lt;/a&gt;
  Commented code
&lt;/h2&gt;

&lt;p&gt;Nowadays, there's probably very little reason to keep commented out code in your codebase, especially if you're using a version control system. Anyone that will come upon the commented code won't be bothered to delete it because they haven't written in in the first place.&lt;br&gt;
That will just perpetuate the old code into newer versions until it won't even work if you comment it out.&lt;/p&gt;

&lt;p&gt;Do yourself a favour and delete the commented code. If you'll really need it, you can get it from your VCS' history.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Having comments in your codebase is something that requires constant attention. When you update a function, you must make sure you've updated its comment as well. That's why most of the comments you write go stale and just confuse you next time you bump into them.&lt;br&gt;
By spending more time on naming your variables and functions, extracting a piece of code and adding vertical or horizontal formatting, you might even avoid the need for comments.&lt;/p&gt;

&lt;p&gt;Even though I've shown the types of comments you should avoid, there are cases where it's a good idea to leave a comment (but not that many!). &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;leaving a warning on a complicated feature that can't be managed with proper names is always a good idea&lt;/li&gt;
&lt;li&gt;documentation/legal comments in public code&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>engineeringmonday</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How KFC employs thousands of candidates with good conversion</title>
      <author>Avicus Delacroix</author>
      <pubDate>Mon, 31 May 2021 13:27:43 +0000</pubDate>
      <link>https://dev.to/followmyutopia/how-kfc-employs-thousands-of-candidates-with-good-conversion-3on</link>
      <guid>https://dev.to/followmyutopia/how-kfc-employs-thousands-of-candidates-with-good-conversion-3on</guid>
      <description>&lt;p&gt;Hi, this is Avi from Voximplant. Last time I showed you an example of &lt;a href="https://dev.to/followmyutopia/diy-clubhouse-for-ios-android-and-even-unity-1na1"&gt;How to create a DIY cross-platform Clubhouse&lt;/a&gt;, and today I have something more interesting to show to you — a real case of the employment system in KFC restaurants.&lt;/p&gt;

&lt;p&gt;In Russia alone, KFC opens more than 100 restaurants every year (imagine worldwide numbers), and all these restaurants need staff. Working in fast-food restaurants is popular among young people; many seek this kind of work temporarily. And all of them send their CVs to KFC.&lt;/p&gt;

&lt;p&gt;Because of this KFC gets more than 15,000 applications every month and needs to process them. &lt;em&gt;But imagine how many HR employees they would need to call all the applicants?&lt;/em&gt; Factor in that most applicants are underage or that they don’t need the job anymore and  it looks like a waste of time and money spent on HR.&lt;/p&gt;

&lt;p&gt;This is why KFC asked &lt;a href="https://voximplant.com/?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;&lt;strong&gt;Voximplant&lt;/strong&gt;&lt;/a&gt; for help. And the solution was obvious: we created a robot that called all the applicants and asked them a simple question, "Do you want to work for KFC?". If they say yes, the robot asks for some additional information, about their age/documents/desired work hours and more, and passes the information to an HR manager who is ready to employ them.&lt;/p&gt;

&lt;p&gt;The results were astounding. The robot processes the applications 10 times faster than a human, filters 37% of candidates as irrelevant, and HR managers increase their conversion by 11%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today I want to talk to you about how to create such a robot for your own purposes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Actually, it's not as hard as it may seem. Let's create a simple robot like the one KFC uses, right now.&lt;/p&gt;

&lt;p&gt;The task will be simple: call all the candidates from a call list, greet them, ask them if they want to work for us, recognize their answer, and connect to a call-center specialist depending on their answer.&lt;/p&gt;

&lt;p&gt;Let's &lt;a href="https://manage.voximplant.com/auth?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;log into the Voximplant platform&lt;/a&gt;, &lt;a href="https://voximplant.com/docs/introduction/introduction_to_voximplant/basic_concepts/applications?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;create an application&lt;/a&gt;, and &lt;a href="https://voximplant.com/docs/introduction/introduction_to_voximplant/basic_concepts/programmable_voice_and_video/scenarios?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;start with a scenario&lt;/a&gt;. First, we need to &lt;a href="https://voximplant.com/docs/references/voxengine/asrhttps://voximplant.com/docs/introduction/introduction_to_voximplant/basic_concepts/programmable_voice_and_video/scenarios?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;import speech recognition&lt;/a&gt; and &lt;a href="https://voximplant.com/docs/references/voxengine/player?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;speech synthesis modules&lt;/a&gt;, declare necessary constants and start writing our logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ASR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callerid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7xxxxxxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7xxxxxxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callOperator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;asr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can pass all the necessary input to the scenario in the &lt;a href="https://voximplant.com/docs/references/voxengine/voxengine/customdata?utm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;VoxEngine.customData&lt;/a&gt; field. For our example, let's use the following JSON format: { "phone" : "7xxxxxxxxxx", "name": "John" }.&lt;/p&gt;

&lt;p&gt;At scenario start, we parse the JSON from &lt;a href=""&gt;customData&lt;/a&gt; and &lt;a href="https://voximplant.com/docs/references/voxengine/voxengine/callpstnutm_source=devto&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_kfc"&gt;initiate a call&lt;/a&gt; from &lt;code&gt;callerid&lt;/code&gt; to &lt;code&gt;data.phone&lt;/code&gt; and connect the event handlers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;AppEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Started&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Start a call from callerid to data.phone&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callPSTN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callerid&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Add event listeners&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_connected_handler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Disconnected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_disconnected_handler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_failed_handler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When our candidate answers the call, we create a Player to synthesize speech, set some text (use your imagination), and play it to our candidate. We can integrate 3rd-party voices, so let's use one from Yandex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_connected_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// Create a text-to-speech player&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Здравствуйте &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. Хотите работать?`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoiceList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Yandex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Neural&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ru_RU_alena&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTTSPlayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Start playback and connect an event listener after&lt;/span&gt;
 &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMediaTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;callCandidate&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;PlayerEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PlaybackFinished&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;playbackFinishedHandler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the playback finishes, we need to process the candidate's answer. For our example, let's integrate a voice recognition profile from Tinkoff:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;playbackFinishedHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// Create an ASR for speech recognition&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asrProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ASRProfileList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Tinkoff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ru_RU&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nx"&gt;asr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createASR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;asrProfile&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Wait for the human’s response and add an event listener&lt;/span&gt;
 &lt;span class="c1"&gt;// which will trigger after speech recognition&lt;/span&gt;
 &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMediaTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;asr&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;asr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;ASREvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;asrResultHandler&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the candidate's answer is recorded and transcribed to text. We can process the result as we need. As a simple way, if the candidate's answer has the keyword "no" in it, let's just record it to our data object and hang up (you may want another logic).&lt;/p&gt;

&lt;p&gt;If the candidate's answer has the word "yes", let's also record this to our data object's field and connect it to an operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;asrResultHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// Disable event listener&lt;/span&gt;
 &lt;span class="nx"&gt;asr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;ASREvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// The answer is written into text field&lt;/span&gt;
 &lt;span class="c1"&gt;// we can proceed the result as we want&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="c1"&gt;// Update the data object&lt;/span&gt;
   &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wantsToWork&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;// Hang up ( Triggers the callCandidate_disconnected_handler )&lt;/span&gt;
   &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hangup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wantsToWork&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;// Call the operator function&lt;/span&gt;
   &lt;span class="nx"&gt;startOperatorCall&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hangup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startOperatorCall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callOperator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callPSTN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callerid&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Unite two calls into one&lt;/span&gt;
 &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMediaBetween&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callOperator&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Connect event handler&lt;/span&gt;
 &lt;span class="nx"&gt;callOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Connected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Подключились к оператору&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="nx"&gt;callOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Disconnected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hangup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="nx"&gt;callOperator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;CallEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;callCandidate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hangup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All that we need to process now is the session's termination. For example, if the call attempt was successful, we send the result object (with candidates' answers) via an HTTP request, and terminate our session. If the call attempt was not successful, just terminate the session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The call was successful&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_disconnected_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://servicename&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="c1"&gt;// Send the data object via a POST http request to specific url&lt;/span&gt;
 &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpRequestAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="c1"&gt;// Terminate session&lt;/span&gt;
 &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// The call was not successful&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callCandidate_failed_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;VoxEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila. Now we have a primitive robot who accepts a call list, calls every candidate, and asks them if they want to work for us. Then it writes their answer in text form to the database and connects to an HR manager if the candidate wants to work.&lt;/p&gt;

&lt;p&gt;This was a simple example. Next you can extend your robot's logic, create complex dialogs and algorithms, connect your candidates to different departments depending on their answer, or collect any additional information you want. It has no limits, only your imagination!&lt;/p&gt;

&lt;p&gt;I hope this explanation was useful, and I hope you all find a great team and develop a productive business!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>robots</category>
      <category>recruiting</category>
    </item>
  </channel>
</rss>
