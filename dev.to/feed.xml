<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Log4j 2.17.0 に関わる新たな RCE 脆弱性 (CVE-2021-4483)</title>
      <author>Heddi Nabbisen</author>
      <pubDate>Tue, 28 Dec 2021 22:40:42 +0000</pubDate>
      <link>https://dev.to/nabbisen/log4j-2170-niguan-waruxin-tana-rce-cui-ruo-xing-cve-2021-4483-43n6</link>
      <guid>https://dev.to/nabbisen/log4j-2170-niguan-waruxin-tana-rce-cui-ruo-xing-cve-2021-4483-43n6</guid>
      <description>&lt;p&gt;&lt;a href="https://logging.apache.org/log4j/2.x/"&gt;Log4j&lt;/a&gt; 2.17.1 がリリースされました。新たな RCE 脆弱性が発見されたためです。(&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44832"&gt;CVE-2021-4483&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;Apache ソフトウェア財団 によると&lt;/a&gt;、CVSS は 6.6 で深刻度は中程度です。&lt;/p&gt;

&lt;p&gt;攻撃者がログ設定ファイルの編集権限を有する場合に、危険があります。&lt;/p&gt;




&lt;p&gt;本記事は&lt;a href="https://twitter.com/scqrinc/status/1475957703545856001"&gt;小社のツイート&lt;/a&gt;をもとにしています。&lt;/p&gt;

</description>
      <category>log4j</category>
      <category>security</category>
      <category>vulnerability</category>
      <category>cve</category>
    </item>
    <item>
      <title>A new RCE vulnerability on Log4j 2.17.0 (CVE-2021-4483)</title>
      <author>Heddi Nabbisen</author>
      <pubDate>Tue, 28 Dec 2021 22:36:48 +0000</pubDate>
      <link>https://dev.to/nabbisen/a-new-rce-vulnerability-on-log4j-2170-cve-2021-4483-3pme</link>
      <guid>https://dev.to/nabbisen/a-new-rce-vulnerability-on-log4j-2170-cve-2021-4483-3pme</guid>
      <description>&lt;p&gt;&lt;a href="https://logging.apache.org/log4j/2.x/"&gt;Log4j&lt;/a&gt; 2.17.1 was released because a new vulnerability on RCE (Remote Code Execution) had been found in 2.17.0. (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44832"&gt;CVE-2021-4483&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;According to The Apache Software Founndation&lt;/a&gt;, CVSS is 6.6 and the severity is moderate.&lt;/p&gt;

&lt;p&gt;There is the risk when an attacker has the permission to modify the logging configuration file.&lt;/p&gt;




&lt;p&gt;This post is based on &lt;a href="https://twitter.com/scqrinc/status/1475957089738850309"&gt;the tweet by my company&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>log4j</category>
      <category>security</category>
      <category>vulnerability</category>
      <category>cve</category>
    </item>
    <item>
      <title>Como emular um iOS no Linux utilizando Docker</title>
      <author>Iaan Mesquita</author>
      <pubDate>Tue, 28 Dec 2021 21:47:12 +0000</pubDate>
      <link>https://dev.to/ianito/como-emular-um-ios-no-linux-utilizando-docker-3l75</link>
      <guid>https://dev.to/ianito/como-emular-um-ios-no-linux-utilizando-docker-3l75</guid>
      <description>&lt;p&gt;Depois de várias tentativas sem sucesso, enfim consegui virtualizar um macOS para fazer testes em um aplicativo iOS no qual eu estava trabalhando.&lt;/p&gt;

&lt;p&gt;Mas antes de continuar, é necessário saber que essa não é uma solução estável e possue diversos problemas de desempenho, porém, para meu propósito consegui fazer o que queria.&lt;/p&gt;

&lt;p&gt;Nós utilizaremos o QEMU para emular um macOS e dentro dele, utilizaremos o xCode para emular um iOS, só nisso você já consegue perceber que não vai ser uma coisa leve.&lt;/p&gt;

&lt;p&gt;O repositório no github do &lt;a href="https://github.com/sickcodes/Docker-OSX"&gt;Docker OSX&lt;/a&gt; tem uma explicação de como usar um iPhone via usb ao invés de emular, mas eu não tenho iPhone :p&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sum%C3%A1rio"&gt;
  &lt;/a&gt;
  Sumário
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#o-que-%C3%A9-o-docker-osx"&gt;O que é o Docker OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#minhas-especifica%C3%A7%C3%B5es-de-hardware"&gt;Especificações de hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instala%C3%A7%C3%A3o"&gt;Instalação&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rodando-um-app-com-react-native"&gt;Rodando um app com React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rodando-um-app-com-cordova"&gt;Rodando um app com Cordova&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#criando-uma-conex%C3%A3o-de-pastas-utilizando-o-sshfs"&gt;Criando uma conexão de pastas utilizando o sshfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;Considerações finais&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-o-docker-osx"&gt;
  &lt;/a&gt;
  O que é o Docker OSX
&lt;/h2&gt;

&lt;p&gt;O Docker OSX é uma docker image que utiliza por debaixo dos panos o QEMU para que possamos emular um sistema operacional.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Leia mais: &lt;a href="https://stack.desenvolvedor.expert/appendix/docker/oquee.html"&gt;O que é docker?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minhas-especifica%C3%A7%C3%B5es-de-hardware"&gt;
  &lt;/a&gt;
  Minhas especificações de hardware
&lt;/h2&gt;

&lt;p&gt;As especificações do meu computador são consideradas OK pra fazer isso, porém, ainda consegui perceber algumas engasgadas enquanto utilizava o Docker OSX + xCode + Visual Studio Code + Dev Server. (Consegui até aquecer meu quarto com esse tanto de coisa.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;OS:&lt;/strong&gt; Manjaro Linux x86_64 &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Kernel:&lt;/strong&gt; 4.19.220-1-MANJARO &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shell:&lt;/strong&gt; zsh 5.8 &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resolution:&lt;/strong&gt; 1440x900&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DE:&lt;/strong&gt; GNOME 41.2 &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;WM:&lt;/strong&gt; Mutter &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;WM Theme:&lt;/strong&gt; Orchis-orange-compact &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Icons:&lt;/strong&gt; Win11-purple-dark [GTK2/3] &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Terminal:&lt;/strong&gt; gnome-terminal &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CPU:&lt;/strong&gt; Intel i7-3770 (8) @ 3.900GHz &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GPU:&lt;/strong&gt; NVIDIA GeForce GTX 1050 Ti &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memory:&lt;/strong&gt; 4105MiB / 15985MiB &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SSD:&lt;/strong&gt; Crucial BX500 240gb (Altamente recomendado um SSD)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#instala%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Instalação
&lt;/h2&gt;

&lt;p&gt;Primeiramente, é necessário ter o docker instalado no seu computador. No meu caso eu utilizo Manjaro, então basta abrir o terminal e digitar:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação docker&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;pacman -S docker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ativando os serviços do docker&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;systemctl start docker.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ativando os serviços do docker para iniciar junto com o sistema&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;systemctl enable docker.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testando o docker:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker run hello-world&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Xaqj_-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgj3c3zue8x13y0tps7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Xaqj_-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgj3c3zue8x13y0tps7c.png" alt="Docker run hello-world" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Certo, agora iremos baixar a imagem e executa-la utilizando o comando abaixo:&lt;br&gt;
&lt;code&gt;docker run -it --device /dev/kvm -p 50922:10022 -e DEVICE_MODEL="iMacPro1,1" -e WIDTH=1440 -e HEIGHT=900 -e RAM=8 -e INTERNAL_SSH_PORT=23     -e AUDIO_DRIVER=alsa -e CORES=2 -v /tmp/.X11-unix:/tmp/.X11-unix -e "DISPLAY=${DISPLAY:-:0.0}"  -e GENERATE_UNIQUE=true  -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist sickcodes/docker-osx:big-sur&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Você pode conferir o que cada flag significa olhando o repositório no &lt;a href="https://github.com/sickcodes/Docker-OSX"&gt;github do docker osx&lt;/a&gt;, mas resumidamente, especifiquei a resolução, memória ram, cores do processador, versão big-sur do macOS e etc.&lt;/p&gt;

&lt;p&gt;Em seguida, ele irá baixar a imagem e executar.&lt;/p&gt;

&lt;p&gt;Quando abrir o emulador, de enter na opção &lt;code&gt;macOS Base System&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TlFdf8Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fubit7hhx6x50d4rynwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TlFdf8Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fubit7hhx6x50d4rynwe.png" alt="Emulador Docker OSX" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando carregar o sistema, clicaremos em &lt;code&gt;Disk Utility&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tdkFod8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5ksa4x7piwfsj4qe291.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tdkFod8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5ksa4x7piwfsj4qe291.png" alt="Emulador Docker OSX" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora, procuraremos a partição que está com mais espaço de armazenamento e clicaremos na opção &lt;code&gt;Erase&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jb5wbvFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irj97wizelw0hbfoamql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jb5wbvFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irj97wizelw0hbfoamql.png" alt="Docker OSX apagando sistema" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para formatar é preciso que as opções estejam estritamentes iguais a esta:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4a_4IFwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drf8gki6wway416rb85h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4a_4IFwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drf8gki6wway416rb85h.png" alt="Formatação opções" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clique em &lt;code&gt;Erase&lt;/code&gt;, aguarde e pode fechar a janela do Disk Utility. &lt;/p&gt;

&lt;p&gt;Em seguida, iremos em &lt;code&gt;Reinstall macOS Big Sur&lt;/code&gt; aceitamos os termos, selecionamos a partição que acabamos de criar &lt;code&gt;macOS&lt;/code&gt; e nisso, ele começará a instação do sistema. (Esse processo geralmente leva 30min ~ 1h). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AIYydlCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd67yhek2mjer3bkm1h5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AIYydlCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd67yhek2mjer3bkm1h5.png" alt="Docker OSX Instalação" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aguardado esse tempo, o sistema deve reiniciar (ou não), no meu caso, eu tive que fazer isso de forma manual pois ele não reiniciou. Nesse caso, feche a janela do QEMU.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gO0tFS4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44eandfh00uh6swzrc0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gO0tFS4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44eandfh00uh6swzrc0k.png" alt="Qemu error" width="880" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Novamente no terminal, digitaremos:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker ps -a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para saber qual o ID do nosso container, e em seguida iremos inicia-lo com:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker start ID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RWpujTQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0ythg12xpdnf5x9zhls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWpujTQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0ythg12xpdnf5x9zhls.png" alt="Docker IDS" width="880" height="70"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selecione o &lt;code&gt;macOS Installer&lt;/code&gt; e deixe que a instalação continue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6OacQF7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq39lesxjerdba85w41k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6OacQF7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq39lesxjerdba85w41k.png" alt="Docker OSX Instalação" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após o processo, ele irá reiniciar automaticamente (ou não), sendo assim, feche novamente o emulador e dê start no container mais uma vez.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tD2mHb9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe5lk5aq4xzw55j0afwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tD2mHb9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe5lk5aq4xzw55j0afwj.png" alt="Docker OSX Instalação" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao iniciar, novamente selecione a opção &lt;code&gt;macOS Installer&lt;/code&gt; e aguarde o processo terminar, feito isso ele irá reiniciar. (Agora é verdade).&lt;/p&gt;

&lt;p&gt;Nosso macOS foi instalado, com isso, vamos selecionar a opção &lt;code&gt;macOS&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_7juyzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkzdtw9jozj91gi66v2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_7juyzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkzdtw9jozj91gi66v2f.png" alt="Docker OSX Inicialização" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, irá reiniciar novamente e você selecione a mesma opção &lt;code&gt;macOS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Show, nossa tela de bem vindo apareceu. Essa parte é bastante lenta, mas após isso irá ficar normal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RS2rsYRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/up2vajvs9p2l8g1vq39f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RS2rsYRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/up2vajvs9p2l8g1vq39f.png" alt="Tela de bem vindo macOS" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Configure a sua maneira, mas não faça login no AppleID agora.&lt;/p&gt;

&lt;p&gt;Após esse processo, nossa área de trabalho aparecerá e então iremos aguardar até a dock aparecer, pois após isso o sistema fica mais fluído.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pVNfn4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydprxzwqrnyp88tht3hf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pVNfn4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydprxzwqrnyp88tht3hf.png" alt="Tela de instalação mac OS Sem dock" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3sqeiPjX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoucf5ea5kl7r8cd2zr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3sqeiPjX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoucf5ea5kl7r8cd2zr4.png" alt="Tela de instalação mac OS Com dock" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora iremos utilizar o gerenciador &lt;code&gt;brew&lt;/code&gt; para instalar as coisas mais rapidamente.&lt;/p&gt;

&lt;p&gt;Abra o terminal no macOS e instale o brew com o comando:&lt;br&gt;
&lt;code&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Irá pedir sua senha definida anteriormente para instalar.&lt;/p&gt;

&lt;p&gt;Agora iremos instalar o &lt;code&gt;xcode&lt;/code&gt; na apple store.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c-Mp2I6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrchopyo4u207fyou05a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c-Mp2I6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrchopyo4u207fyou05a.png" alt="Apple store xcode" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora sim, podemos fazer o login da nossa conta AppleID. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6jI1pDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elma6mfjd6us7pst5y0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6jI1pDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elma6mfjd6us7pst5y0l.png" alt="Login apple store" width="880" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, aguarde a instalação. &lt;br&gt;
Em seguida, abra o xcode e aceite os termos e aguarde instalar as dependências.&lt;/p&gt;

&lt;p&gt;Em seguida, vá em &lt;code&gt;Preferences -&amp;gt; Locations -&amp;gt; Command-Line Tools&lt;/code&gt; vai estar vazio, selecione a opção com a versão do xcode.&lt;/p&gt;

&lt;p&gt;Quando a instalação terminar, abriremos o terminal novamente e instalaremos o cocoapods. Ele serve como um gerenciador de dependências do xCode.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install cocoapods&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, nosso macOS está instalado e configurado para rodar os projetos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rodando-um-app-com-react-native"&gt;
  &lt;/a&gt;
  Rodando um app com React Native
&lt;/h2&gt;

&lt;p&gt;Vamos rodar um hello world do React Native para ver se está tudo certo, lembrando que não irei testar o android somente o iOS.&lt;/p&gt;

&lt;p&gt;Abra o terminal&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação no node:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;brew install node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do yarn (opcional):&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install -g yarn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criando um projeto react native:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npx react-native init teste&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Se pedir pra instalar o cocoapods novamente, selecione a opção com brew.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrando no diretório do react native:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd teste&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrando no diretório do ios:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalando as dependências:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;pod install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voltando para o diretório raiz:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd ..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listando os simuladores disponíveis:&lt;/strong&gt; (Opcional)&lt;br&gt;
&lt;code&gt;xcrun simctl list devices&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rodando o projeto utilizando xcode:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npx react-native run-ios --simulator="iPhone 13"&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kEMfg3IE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq34wwlfr17dubmhcy4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kEMfg3IE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq34wwlfr17dubmhcy4s.png" alt="App rodando react native" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para uma experiência melhor, veja a seção: &lt;a href="#criando-uma-conex%C3%A3o-de-pastas-utilizando-o-sshfs"&gt;Criando uma conexão de pastas utilizando o sshfs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rodando-um-app-com-cordova"&gt;
  &lt;/a&gt;
  Rodando um app com Cordova
&lt;/h2&gt;

&lt;p&gt;Vamos rodar um hello world do Quasar para ver se está tudo certo, lembrando que não irei testar o android somente o iOS.&lt;/p&gt;

&lt;p&gt;Lembrando que o Quasar usa o Cordova/Capacitor pro iOS e Android.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação no node:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;brew install node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do yarn (opcional):&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install -g yarn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do quasar:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yarn global add @quasar/cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do cordova:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yarn global add cordova&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criando um projeto com Quasar-CLI:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;quasar create teste&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrando no diretório do projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd teste&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adicionando cordova ao projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;quasar mode add cordova&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrar no diretório do cordova:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd src-cordova&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adicionar o iOS ao projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cordova platform add ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verificar se está tudo certo:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cordova requirements&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listar emuladores disponíveis:&lt;/strong&gt; (Opcional)&lt;br&gt;
&lt;code&gt;cordova emulate iOS --list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalar as dependências do projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voltar ao diretório raiz:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd ..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalar as dependências do projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rodar o quasar no modo desenvolvimento ioS:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;quasar dev -m iOS -e "iPhone 8, 15.2"&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--peEzskTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjoyvlx1pl9u41n9jy15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--peEzskTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjoyvlx1pl9u41n9jy15.png" alt="macOS quasar" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para uma experiência melhor, veja a seção: &lt;a href="#criando-uma-conex%C3%A3o-de-pastas-utilizando-o-sshfs"&gt;Criando uma conexão de pastas utilizando o sshfs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-uma-conex%C3%A3o-de-pastas-utilizando-o-sshfs"&gt;
  &lt;/a&gt;
  Criando uma conexão de pastas utilizando o sshfs
&lt;/h2&gt;

&lt;p&gt;Agora que fizemos tudo e nosso app já está rodando no macOS, temos um problema: Abrir nosso editor de código ou IDE dentro do macOS é uma experiência muito ruim por causa da lentidão, glitches, mapping do teclado e etc. Dessa forma, eu pesquisei uma solução para criar uma conexão de arquivos utilizando o SSH.&lt;/p&gt;

&lt;p&gt;Ou seja, eu posso abrir o servidor de desenvolvimento dentro do macOS e criar uma conexão em que eu possa alterar os arquivos direto do meu linux ou do macOS, de forma que atualize em ambos os lados, como uma via dupla. Isso nos garante tirar o proveito de algumas coisas que existem no modo desenvolvimento, como o fast refresh.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conex%C3%A3o-do-linux-para-o-mac"&gt;
  &lt;/a&gt;
  Conexão do Linux para o Mac
&lt;/h3&gt;

&lt;p&gt;Primeiramente, precisamos permitir a conexão via ssh por login no mac. Para isso, abriremos o terminal e digitaremos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para abrir editar o arquivo de configuração do ssh:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Busque por &lt;code&gt;PasswordAuthentication&lt;/code&gt; e coloque a configuração como &lt;code&gt;yes&lt;/code&gt; e remova o &lt;code&gt;#&lt;/code&gt; no começo da linha.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQHermMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqms7coe0l4xwdga0j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQHermMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqms7coe0l4xwdga0j1.png" alt="Configuração sshd" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Salve o arquivo.&lt;br&gt;
Vá para em &lt;code&gt;System Preferences -&amp;gt; Sharing -&amp;gt; Remote Login&lt;/code&gt; e ative para todos os usuários:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BlYj-1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77o3ld5524ufbtvue507.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BlYj-1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77o3ld5524ufbtvue507.png" alt="macOS configuração" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para reiniciar o ssh:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo launchctl stop com.openssh.sshd &amp;amp;&amp;amp; sudo launchctl start com.openssh.sshd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora, no terminal do nosso Linux:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do sshfs:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo pacman -S sshfs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pegando o IP do nosso container&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ID_CONTAINER&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criar uma pasta:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;mkdir projeto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para abrir a conexão:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo sshfs USER_MAC@IP_CONTAINER:/CAMINHO/DO/PROJETO/NO/MAC /CAMINHO/NO/LINUX -p 23&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUyhPclG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwcd70m354t5hnviy9h9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUyhPclG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwcd70m354t5hnviy9h9.png" alt="Exemplo de conexão" width="880" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, agora eu posso abrir o visual studio code no meu Linux e atualizar diretamente no Mac.&lt;/p&gt;

&lt;p&gt;Se você tiver um outro computador, pode fazer essa conexão também e deixar o seu principal apenas pra emular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conex%C3%A3o-do-mac-para-o-linux"&gt;
  &lt;/a&gt;
  Conexão do Mac para o Linux
&lt;/h3&gt;

&lt;p&gt;Mesmo processo anteriormente, só que o pacote do ssfs no mac pode ser instalado pelo comando abaixo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação sshfs no mac&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;brew install --cask macfuse &amp;amp;&amp;amp; brew install gromgit/fuse/sshfs-mac&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;No Linux:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para abrir editar o arquivo de configuração do ssh:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Busque por &lt;code&gt;PasswordAuthentication&lt;/code&gt; e coloque a configuração como &lt;code&gt;yes&lt;/code&gt; e remova o &lt;code&gt;#&lt;/code&gt; no começo da linha.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQHermMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqms7coe0l4xwdga0j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQHermMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqms7coe0l4xwdga0j1.png" alt="Configuração sshd" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Salve o arquivo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para reiniciar o SSH no Manjaro:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo systemctl restart sshd.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;De volta ao mac, criaremos uma pasta e abriremos a conexão.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criar uma pasta:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;mkdir projeto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para abrir a conexão:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo sshfs USER_LINUX@IP_HOST:/CAMINHO/LINUX /CAMINHO/MAC -p 23&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Após rodar o comando, irá acontecer um erro:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kKIvhJK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgq3r1245m3s94qe5yql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKIvhJK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgq3r1245m3s94qe5yql.png" alt="Erro MAC" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abra as prefêrencias e clique em &lt;code&gt;Allow&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--opJruFbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smhcxmmfcvvxdmrf8ssg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opJruFbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smhcxmmfcvvxdmrf8ssg.png" alt="MacOS Preferencias" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reincie o mac.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agora podemos abrir nossa conexão:&lt;/strong&gt; (Meu SSH está com uma porta diferente, mas a padrão é 22)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eypMDH_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr871w7pezvkz80t1k53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eypMDH_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr871w7pezvkz80t1k53.png" alt="Conexão SSH OK" width="880" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, podemos atualizar de qualquer lado que também irá atualizar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;
  &lt;/a&gt;
  Considerações finais
&lt;/h2&gt;

&lt;p&gt;Muito obrigado por ler este tutorial, que aliás, é o primeiro que publico depois de anos. Qualquer dúvida ou sugestão é sempre bem vinda.&lt;/p&gt;

&lt;p&gt;Ah, nunca atualize o mac.&lt;/p&gt;

&lt;p&gt;:)&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ios</category>
      <category>virtualization</category>
      <category>xcode</category>
    </item>
    <item>
      <title>How I m Learning new Technologies so Quickly(Open Source Way)?!</title>
      <author>Atharva Shirdhankar</author>
      <pubDate>Tue, 28 Dec 2021 21:29:19 +0000</pubDate>
      <link>https://dev.to/star_trooper/how-i-m-learning-new-technologies-so-quicklyopen-source-way-58ao</link>
      <guid>https://dev.to/star_trooper/how-i-m-learning-new-technologies-so-quicklyopen-source-way-58ao</guid>
      <description>&lt;p&gt;When I see myself one year back I was completely confused like how should I learn new things and do some progress in the Tech Field🙁.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dbYMSFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9jeptqrqh87zb821lvw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dbYMSFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9jeptqrqh87zb821lvw.gif" alt="Image description" width="220" height="190"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But now!!!! when I see back in time currently I m doing great progress and easily learning new technologies😁.&lt;/p&gt;

&lt;p&gt;But actually what I did or steps I took cause of which I m doing great progress within a year.&lt;br&gt;
Let me tell you how I did it in this article and even how you can do it , if you are struggling in Coding or learning new technologies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XNthvpLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7b78igp3k00ey08omep.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XNthvpLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7b78igp3k00ey08omep.gif" alt="Image description" width="220" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many things helped me learning new technical things but let start this first article let me share with you how Open Source helped me&lt;br&gt;
(More article on &lt;strong&gt;How I m Learning new Technologies so Quickly&lt;/strong&gt; is &lt;strong&gt;coming soon...&lt;/strong&gt;)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#open-source-contribution"&gt;
  &lt;/a&gt;
  Open Source Contribution
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#my-open-source-journey"&gt;
  &lt;/a&gt;
  My Open Source Journey
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I started Open Source Contribution in November 2020 somewhat and I made my first contribution to github-docs as a contributor cause only text and typo were needed to be corrected which was perfect for a beginner like me to get started with open source contribution.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/github/docs/pull/1242"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg"&gt;
      &lt;span class="issue-title"&gt;
        Improve documentation issue no #1034
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#1242&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/StarTrooper08"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqLYiA1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/72031540%3Fv%3D4" alt="StarTrooper08 avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/StarTrooper08"&gt;StarTrooper08&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/github/docs/pull/1242"&gt;&lt;time&gt;Nov 10, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;Done with the minor fixes for open issue number #1034 .&lt;/p&gt;

&lt;h3&gt;
&lt;a id="user-content-why" class="anchor" href="#why"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Why:&lt;/h3&gt;

&lt;h3&gt;
&lt;a id="user-content-whats-being-changed" class="anchor" href="#whats-being-changed"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What's being changed:&lt;/h3&gt;

&lt;h3&gt;
&lt;a id="user-content-check-off-the-following" class="anchor" href="#check-off-the-following"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Check off the following:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] All of the tests are passing.&lt;/li&gt;
&lt;li&gt;[ ] I have reviewed my changes in staging.&lt;/li&gt;
&lt;li&gt;[ ] For content changes, I have reviewed the &lt;a href="https://github.com/github/docs/blob/main/contributing/localization-checklist.md"&gt;localization checklist&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] For content changes, I have reviewed the &lt;a href="https://github.com/github/docs/blob/main/contributing/content-style-guide.md"&gt;Content style guide for GitHub Docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/github/docs/pull/1242"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;And when I doing my first contribution I was literally confused what should I do cause I was not familiar with Git and Github .The mechanism of commiting and creating pull request was new to me.&lt;/li&gt;
&lt;li&gt;But thanks to Github docs maintainer team they helped a lot in my first contribution and even I explored and learned about Git and Github on the way.&lt;/li&gt;
&lt;li&gt;After my first contribution I did more 2 contribution to github docs that was too related to documentation and typo work.&lt;/li&gt;
&lt;li&gt;As I did my 3 contributions I got use to Github's contribution workflow (fork repository, commit changes, create pull request stuff)and even got confidence to contribute to other project which has actual coding stuff.&lt;/li&gt;
&lt;li&gt;I started with contributing to html , css , javascript codebase projects. Slow and steady I started contributing to Reactjs codebase projects and now currently working on Docker and Android related issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learned-from-open-source-and-by-doing-contribution-to-oss"&gt;
  &lt;/a&gt;
  What did I learned from Open Source and by doing contribution to OSS?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The journey of Open Source was amazing I learned so new many things on the way. And not only learned new technologies and framework but also made new friends .&lt;/li&gt;
&lt;li&gt;The Open Source contribution I did helped me to learn different web frameworks like Django, flask, etc. And frontend library reactJs.&lt;/li&gt;
&lt;li&gt;Many a times during open source contribution I came across codebase that was overwhelming at first. Even came across new technologies I've never heard of. So by doing Open Source contribution I was learning on the way and I learned those stuff first and I used to implement it by contributing.&lt;/li&gt;
&lt;li&gt;By contributing to open source software's I became habitual to deal with overwhelming codebase ,read the codebase and do the changes in the code where required.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;And yes if you think how I can those new technologies and do the contribution work.&lt;br&gt;
Just ask for some help in the open source community. There will surely someone to help you and guide you if you are stuck somewhere. &lt;strong&gt;That's the Amazing part ,I like about Open Source😃&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;When you do Open Source Contribution you are gaining experience which will surely help in future.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Conclusion &lt;br&gt;
In short, I learned new programming language, new technologies in public and also implemented those learnings on the way and gained some experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#how-you-can-start-with-open-source-and-learn-new-things"&gt;
  &lt;/a&gt;
  How you can start with Open Source and learn new things
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To get started with open source at first you need know few &lt;strong&gt;git commands like clone, commit, push&lt;/strong&gt;. And little bit familiar with &lt;strong&gt;Github's issue ,pull request feature&lt;/strong&gt;. Other advance concepts of git and Github you will &lt;strong&gt;learn on the way by doing contribution&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;After learning few concepts of git and github.
On github search for some repository which are specific for &lt;strong&gt;documentation&lt;/strong&gt; or &lt;strong&gt;html,css,javascript&lt;/strong&gt; base project and best for beginner to start with open source.
Below are Few of them to which I contributed and still contribute
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/github"&gt;
        github
      &lt;/a&gt; / &lt;a href="https://github.com/github/docs"&gt;
        docs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The open-source repo for docs.github.com
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/EddieHubCommunity"&gt;
        EddieHubCommunity
      &lt;/a&gt; / &lt;a href="https://github.com/EddieHubCommunity/LinkFree"&gt;
        LinkFree
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Open source alternative to LinkTree
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/EddieHubCommunity"&gt;
        EddieHubCommunity
      &lt;/a&gt; / &lt;a href="https://github.com/EddieHubCommunity/EventCalendar"&gt;
        EventCalendar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Community events from TwitterSpaces to Live streams to Conferences
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/JuliaLang"&gt;
        JuliaLang
      &lt;/a&gt; / &lt;a href="https://github.com/JuliaLang/www.julialang.org"&gt;
        www.julialang.org
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Julia Project website
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Now search for good first issues in issue tab .&lt;/li&gt;
&lt;li&gt;And work on those issues accordingly&lt;/li&gt;
&lt;li&gt;After getting use to with Github workflow(find issue , do some required changes in code or documentation(text),create pull request and merge your code), I recommend work on the project which you think is quite overwhelming for you or you want to learn programming language search for those projects which include it.&lt;/li&gt;
&lt;li&gt;Slow and steady you will learn new programming language or technology and that too efficiently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I didn't mention everything in detail how you can do open source contribution but I m sure you got this😅. My motive behind this article is simple do open source contribution and learn new things on the way and also gain some experience 🚀)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6bba7GvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54jznykroempml165f25.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6bba7GvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54jznykroempml165f25.gif" alt="Image description" width="220" height="123"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You for Reading this Article and yes stay tune for next part of this blog series by following me.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>opensource</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Please stop doing stupidly complex technical interviews!</title>
      <author>Eduardo Ortega</author>
      <pubDate>Tue, 28 Dec 2021 20:47:09 +0000</pubDate>
      <link>https://dev.to/proco/please-stop-doing-stupidly-complex-technical-interviews-44kg</link>
      <guid>https://dev.to/proco/please-stop-doing-stupidly-complex-technical-interviews-44kg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--INo1pPHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtbxzu5iqvglban30gye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--INo1pPHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtbxzu5iqvglban30gye.png" alt="Please stop stupidly complex interviews?" width="768" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh the technical interviews, I am a 15 years experienced software engineer and I'm still afraid of them!. So we as human beings fear the unknown, but a good interview should be more like a conversation instead of a police interrogation.&lt;/p&gt;

&lt;p&gt;Interviewers have asked me if I know S.O.L.I.D. principles, unit testing in deep and even I've been asked to use graph theory to solve a problem. When I got the job, there is a high dependency on a specific dll that do a lot of different things (This by it's own violates all SOLID principles), I never used anything they asked me, so what's the need to make the technical interview unnecessarily complex and tedious?. When I am interviewing a candidate I try to make a conversation like: Tell me about your experience, the latest project you are working on, what technology you like the most, and why. I guess that they are trying to emulate top-tech companies like GAFAM, what I have heard about these companies is that the technical interviews are very focused on data structures and problem-solving (not sure if they are used in daily work).&lt;/p&gt;

&lt;p&gt;My point is: if your company focuses on a specific product, ask what you're looking for, ask for the technologies you are currently using, please stop doing stupidly complex technical tests unless your company is currently using these techniques to solve complex problems.&lt;/p&gt;

&lt;p&gt;And as always, happy coding!.&lt;/p&gt;

</description>
      <category>management</category>
    </item>
    <item>
      <title>How I Made an API for Duck Jokes 🦆</title>
      <author>William McGonagle</author>
      <pubDate>Tue, 28 Dec 2021 20:27:58 +0000</pubDate>
      <link>https://dev.to/williammcgonagle/how-did-i-make-an-api-for-duck-jokes-pmg</link>
      <guid>https://dev.to/williammcgonagle/how-did-i-make-an-api-for-duck-jokes-pmg</guid>
      <description>&lt;p&gt;I've been working on my website for some time now, but it felt like there was something missing. I wasn't really sure what it was, so I ignored it for a bit of time. Later that week, I was hanging out with friends and we started making puns about ducks- "wisequacks". That's when I had a moment of realization. &lt;/p&gt;

&lt;p&gt;I decided to drop everything that I was doing and build a really simple API for duck jokes. Right now the API has a couple of jokes, but we need some more, so if you want to submit some, you can respond to &lt;a href="https://github.com/fairfield-programming/backend-server/issues/66"&gt;this issue&lt;/a&gt; or you can just drop a pull request on &lt;a href="https://github.com/fairfield-programming/backend-server"&gt;this repository&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can check out the joke API &lt;a href="https://fairfield-programming.herokuapp.com/joke"&gt;here&lt;/a&gt; and you can use it in any of your projects if you would like. All of the code for the project can be found in the linked repository and it is all under the MIT license if you want to use it in your own project. Cheers! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make Sure to Drop the Repository a Star if You Like It!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fairfield-programming/backend-server/"&gt;Fairfield Programming Association's Backend Server&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>showdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Approval Workflow: Manual and Automated Approvals in CI/CD</title>
      <author>Francesco Ciulla</author>
      <pubDate>Tue, 28 Dec 2021 20:11:50 +0000</pubDate>
      <link>https://dev.to/tinystacks/approval-workflow-manual-and-automated-approvals-in-cicd-2p7m</link>
      <guid>https://dev.to/tinystacks/approval-workflow-manual-and-automated-approvals-in-cicd-2p7m</guid>
      <description>&lt;p&gt;Recently, I've gone into detail on  &lt;a href="https://blog.tinystacks.com/stacks-stages-aws"&gt;stacks and stages&lt;/a&gt;. I've also examined the importance of dev stacks for both teams and individual developers. Building on these topics, I wanted to talk today about approvals. &lt;/p&gt;

&lt;p&gt;How do you promote changes to your stacks to production? More importantly, how do you gate promotions to ensure quality code? I'll look at the two major approaches to approvals - manual vs. automatic - and when and how to use each approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-change-management-approval-process"&gt;
  &lt;/a&gt;
  What is a Change Management Approval Process?
&lt;/h2&gt;

&lt;p&gt;Traditionally, nothing strikes more fear in the heart of a dev team than pushing a change to production. Change promotion is usually an "all hands on deck" affair. Engineers and support personnel often stand at the ready, testing lives sites and monitoring dashboards for the slightest hint of trouble.&lt;/p&gt;

&lt;p&gt;What can go wrong when pushing a change? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A code change that wasn't thoroughly tested or reviewed can break on release. &lt;/li&gt;
&lt;li&gt;A code change that worked in dev might not work in production. &lt;/li&gt;
&lt;li&gt;A configuration change could break a production server or not be distributed to all instances in a cluster. &lt;/li&gt;
&lt;li&gt;A new part of your cloud infrastructure could fail to deploy correctly. &lt;/li&gt;
&lt;li&gt;...and any number of other things that keep developers awake at night. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The question isn't "What can go wrong?" during a deployment. It's more like, "What &lt;strong&gt;can't&lt;/strong&gt; go wrong?"&lt;/p&gt;

&lt;p&gt;Because of this, software teams don't just shove a change into production and hope for the best. Most teams have some sort of &lt;strong&gt;change management approval process&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;As I discussed previously, a deployment pipeline consists of a number of stages. Each stage - dev, test, staging, prod - is used to widen a change's availability and vet its quality. A change management approval process sets guidelines for when a change can flow from one stage to the next. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-approvals"&gt;
  &lt;/a&gt;
  Types of Approvals
&lt;/h2&gt;

&lt;p&gt;Traditionally, there are two types of approvals. Often, both types are used at different stages of the development process. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manual-approvals"&gt;
  &lt;/a&gt;
  Manual Approvals
&lt;/h3&gt;

&lt;p&gt;With a manual approval, a change requires some sort of human intervention to progress to the next stage. Often, this takes the form of a code review or buddy test, in which another member of your team reviews your changes before approving them. Once approved, the change migrates to the next stage.&lt;/p&gt;

&lt;p&gt;A manual approval is also a good way to await feedback from stakeholders and customers. For example, you may make changes or a new feature available in a staging or demo environment that internal stakeholders and other teams can access. Once the changes have passed all tests and have secured stakeholder approval, you can approve and push them into production. &lt;/p&gt;

&lt;p&gt;Manual approval doesn't mean that your release pipeline contains zero automation. You will likely still have steps in your deployment pipeline where you're running unit tests, smoke tests, service health checks, and other automated quality checks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-approvals"&gt;
  &lt;/a&gt;
  Automated Approvals
&lt;/h3&gt;

&lt;p&gt;With an automated approval, a change migrates to the next stage if it passes a set of automated checks. These can include but are not limited to unit tests, service health checks, and security checks. &lt;/p&gt;

&lt;p&gt;Automated approvals are typical in earlier stages of a release pipeline - e.g., moving from dev to test, or test to stage. They're harder to achieve in production, as they require a high degree of automated testing and verification to ensure users don't get broken bits. Automated delivery into production is often referred to as  &lt;a href="https://aws.amazon.com/builders-library/automating-safe-hands-off-deployments/"&gt;continuous delivery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Typically, an automated approval into production will use some sort of phased release strategy. For example, you may deploy code changes to a single server (a canary). You would then test/monitor the results before deploying to all machines in a fleet. Or you may do a rolling deployment in which you deploy new code to a small percentage of your servers or serverless endpoints. If the change doesn't produce any errors (HTTP server errors, virtual machine connectivity issues, etc.), the system continues the promotion process. If there are errors, it rolls back the changes and stops the rollout.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-manual-approvals-on-a-pipeline-in-aws"&gt;
  &lt;/a&gt;
  Implementing Manual Approvals on a Pipeline in AWS
&lt;/h2&gt;

&lt;p&gt;Most pipeline technologies provide some way to switch easily between manual and automated approvals. &lt;/p&gt;

&lt;p&gt;For example, &lt;a href="https://blog.tinystacks.com/using-codebuild-and-codepipeline-to-deploy-aws-applications-easily"&gt;AWS CodePipeline&lt;/a&gt; structures a pipeline in a series of stages. Each step consists of a series of actions. In AWS, you can add a Manual Approval action to a stage. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dI0RpiHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640036288779/YfhSAMFou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dI0RpiHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640036288779/YfhSAMFou.png" alt="image.png" width="516" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The manual approval action will stop pipeline execution until someone approves it. AWS sends approval requests to an Amazon SNS (Simple Notification Service) topic. This means you can send the request to one or multiple potential reviewers. You can also configure the message to include a URL link. This is helpful if your team uses a code review software system like &lt;a href="https://www.reviewboard.org/"&gt;Review Board&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tinystacks-makes-approvals-easy"&gt;
  &lt;/a&gt;
  TinyStacks Makes Approvals Easy
&lt;/h2&gt;

&lt;p&gt;At TinyStacks, our goal is to make DevOps easy. Our simplified pipeline creation tools will flow approvals automatically from stage to stage. Adding a manual approval is as simple as clicking a checkbox! Your teammates can then easily view and approve the migration to the next stage from the TinyStacks dashboard. Contact us today to see how TinyStacks can simplify your journey to DevOps maturity!&lt;/p&gt;

&lt;p&gt;Article by Jay Allen&lt;/p&gt;

</description>
      <category>aws</category>
      <category>codequality</category>
      <category>codereview</category>
      <category>devops</category>
    </item>
    <item>
      <title>Learn Javascript Functions
</title>
      <author>Zahab Kakar</author>
      <pubDate>Tue, 28 Dec 2021 19:44:25 +0000</pubDate>
      <link>https://dev.to/zahab/learn-javascript-functions-2f2g</link>
      <guid>https://dev.to/zahab/learn-javascript-functions-2f2g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This article explains JavaScript function in detail and followed the previous JavaScript article  &lt;a href="https://zahab.tech/learn-javascript-part1"&gt;Learn JavaScript__Part1&lt;/a&gt;. Therefore if you are not familiar with JS basics, you may check the mentioned articles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-functions-in-javascript"&gt;
  &lt;/a&gt;
  What are Functions in JavaScript?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt; are containers that hold reusable code and perform a particular task. Not just JavaScript but almost all programming languages have a concept of functions and every developer must deal with that while coding.  &lt;/p&gt;

&lt;p&gt;Functions are independent pieces of code and manage the large code. Before moving on how it performs a task, let's see how we can create a function.&lt;/p&gt;

&lt;p&gt;In javaScript the function keyword is used to declare a function,  to identify a function it should have a name. &lt;br&gt;
Here is the syntax for function declaration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

&lt;span class="nx"&gt;YOUR_CODE&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the example, the function "sayHi" can be created using a function keyword followed by "sayHi" [function name] and a set of parentheses, the function code will be written inside the curly braces. Whenever the function is called, it performs whatever instruction is written inside it, here I created this function that whenever it is called it should print I like JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I like JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// I like JavaScript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is another function example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="cm"&gt;/*
      Hello world
      8
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript functions can be used as reusable code. In below example, I don't need to type the code every time I need it, I can just call the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="cm"&gt;/*
      Hello world
      8
      Hello world
      8
*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions also accept parameters - parameters are the symbolic name for "data" that goes into a function. A function can have one or more parameters. &lt;/p&gt;

&lt;p&gt;In the below example, the function has a parameter called num, num accepts a value and performs the function task based on that value. The parameter value will be initialized while calling the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="cm"&gt;/*     9
       100
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don't need to console.log in functions, the " return " is used to return the function statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;//     8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is it for this article. I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;Feel free to contact me on &lt;a href="https://twitter.com/zahab_k/"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deploy CockroachDB in a  DigitalOcean Kubernetes Cluster</title>
      <author>Nayan</author>
      <pubDate>Tue, 28 Dec 2021 19:36:00 +0000</pubDate>
      <link>https://dev.to/nayankalsariya/deploy-cockroachdb-in-a-digitalocean-kubernetes-cluster-3koe</link>
      <guid>https://dev.to/nayankalsariya/deploy-cockroachdb-in-a-digitalocean-kubernetes-cluster-3koe</guid>
      <description>&lt;p&gt;For the &lt;a href="https://www.digitalocean.com/community/pages/kubernetes-challenge"&gt;DigitalOcean Kubernetes Challenge&lt;/a&gt;, I wanted to deploy a database to a managed Kubernetes cluster, and decided to go with &lt;a href="https://www.cockroachlabs.com/docs/stable/install-cockroachdb."&gt;CockroachDB Core&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The process to deploy on Kubernetes was simple. I just followed the instructions in &lt;a href="https://www.cockroachlabs.com/docs/v21.2/deploy-cockroachdb-with-kubernetes.html,"&gt;CockroachDB official documentation&lt;/a&gt;, with just one change - In &lt;a href="https://www.cockroachlabs.com/docs/v21.2/deploy-cockroachdb-with-kubernetes.html#step-1-start-kubernetes"&gt;"Step 1. Start Kubernetes"&lt;/a&gt;, instead of using hosted GKE or EKS (as mentioned in the docs), I used DigitalOcean's &lt;a href="https://www.digitalocean.com/products/kubernetes/"&gt;Managed Kubernetes&lt;/a&gt; service.&lt;/p&gt;

&lt;p&gt;So my "Step 1. Start Kubernetes" was basically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.digitalocean.com/products/kubernetes/how-to/create-clusters/"&gt;How to Create Kubernetes Clusters Using the Control Panel&lt;/a&gt; from DigitalOcean. I created a 3 node cluster with s-4vcpu-8gb droplets. You should be able to do it with slightly smaller droplets too.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rest of the steps were as mentioned in the doc:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.cockroachlabs.com/docs/v21.2/deploy-cockroachdb-with-kubernetes.html#step-2-start-cockroachdb"&gt;Step 2. Start CockroachDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cockroachlabs.com/docs/v21.2/deploy-cockroachdb-with-kubernetes.html#step-3-use-the-built-in-sql-client"&gt;Step 3. Use the built-in SQL client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cockroachlabs.com/docs/v21.2/deploy-cockroachdb-with-kubernetes.html#step-4-access-the-db-console"&gt;Step 4. Access the DB Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cockroachlabs.com/docs/v21.2/deploy-cockroachdb-with-kubernetes.html#step-5-stop-the-cluster"&gt;Step 5. Stop the cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>digitalocean</category>
    </item>
    <item>
      <title>Add MongoDB and PostgreSQL in Django using Docker</title>
      <author>ThePylot</author>
      <pubDate>Tue, 28 Dec 2021 19:30:35 +0000</pubDate>
      <link>https://dev.to/thepylot/add-mongodb-and-postgresql-in-django-using-docker-55j6</link>
      <guid>https://dev.to/thepylot/add-mongodb-and-postgresql-in-django-using-docker-55j6</guid>
      <description>&lt;p&gt;Originally published in &lt;a href="https://www.thepylot.dev/add-mongodb-and-postgresql-in-django-project/"&gt;The Pylot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, you'll learn how to integrate multiple databases with the Django framework and navigate incoming data using a DB router that automatically writes them to the required database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realworld-example-scenario"&gt;
  &lt;/a&gt;
  Real-world example scenario
&lt;/h2&gt;

&lt;p&gt;Usually, the majority of projects are using relational databases such as &lt;strong&gt;Postgres&lt;/strong&gt; or &lt;strong&gt;MySQL&lt;/strong&gt; but sometimes we also need &lt;strong&gt;NoSQL&lt;/strong&gt; databases to hold extra heavy data which decrease the overload of relational databases.&lt;/p&gt;

&lt;p&gt;Assume that your project generates tons of logs while processing some heavy tasks in a queue. These log objects must be stored in non-relational databases instead of hitting relational databases each time and extremely overloading them with huge messy log objects. I guess you spot the problem here, so let's take a look at what can we do about it...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-environment"&gt;
  &lt;/a&gt;
  Setting up environment
&lt;/h2&gt;

&lt;p&gt;Create an empty directory named &lt;strong&gt;app&lt;/strong&gt; then let's start by creating a &lt;code&gt;Dockerfile&lt;/code&gt; that will copy our working directory and also install required dependencies for Python and Postgres.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app/Dockerfile&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.8-slim&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get upgrade &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    build-essential &lt;span class="se"&gt;\
&lt;/span&gt;    libssl-dev &lt;span class="se"&gt;\
&lt;/span&gt;    libffi-dev &lt;span class="se"&gt;\
&lt;/span&gt;    python3-dev &lt;span class="se"&gt;\
&lt;/span&gt;    build-essential &lt;span class="se"&gt;\
&lt;/span&gt;    libjpeg-dev &lt;span class="se"&gt;\
&lt;/span&gt;    zlib1g-dev &lt;span class="se"&gt;\
&lt;/span&gt;    gcc &lt;span class="se"&gt;\
&lt;/span&gt;    libc-dev &lt;span class="se"&gt;\
&lt;/span&gt;    bash &lt;span class="se"&gt;\
&lt;/span&gt;    git &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; pip


&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; LIBRARY_PATH=/lib:/usr/lib&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PYTHONUNBUFFERED 1&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PYTHONDONTWRITEBYTECODE 1&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /app&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;pip3 &lt;span class="nt"&gt;--no-cache-dir&lt;/span&gt; &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;These wheel packages will be used while installing and setting up Postgres and other services in the system. Now, we need to add &lt;code&gt;requirements.txt&lt;/code&gt; to install the required packages for our project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app/requirements.txt&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;celery==5.0.2
Django==3.1.3
git+git://github.com/thepylot/djongo.git#egg=djongo
mongoengine==0.20.0
pylint-mongoengine==0.4.0
pymongo==3.11.0
psycopg2-binary==2.8.5
redis==3.5.3
Faker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are going to use &lt;code&gt;djongo&lt;/code&gt; which will help to convert SQL to MongoDB query. By using &lt;code&gt;djongo&lt;/code&gt; we can use MongoDB as a backend database for our Django project. At the time of writing this post, &lt;code&gt;djongo&lt;/code&gt; has issues supporting Django versions above v.3+, but it can be resolved easily by just by changing the version from the package itself by forking it to your repository. There is a file named &lt;code&gt;setup.py&lt;/code&gt; that holds configuration settings and you'll see the block named &lt;code&gt;install_requires&lt;/code&gt; where the supported version is mentioned (Don't forget to fork it first).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;setup.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;install_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'sqlparse==0.2.4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'pymongo&amp;gt;=3.2.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django&amp;gt;=2.1,&amp;lt;=3.0.5'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We just need to refactor it to fit with our current version of Django. I am using &lt;code&gt;3.1.3&lt;/code&gt; so I will replace the &lt;code&gt;3.0.5&lt;/code&gt; to &lt;code&gt;3.1.3&lt;/code&gt; and it will look like below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;install_requires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'sqlparse==0.2.4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'pymongo&amp;gt;=3.2.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django&amp;gt;=2.1,&amp;lt;=3.1.3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once you finished, search for &lt;code&gt;requirements.txt&lt;/code&gt; and change the Django version there as well:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;requirements.txt&lt;/strong&gt; (in djongo)&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
django&amp;gt;=2.0,&amp;lt;=3.1.3
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's it! Commit your changes to the forked repository and then you need to include it to your &lt;code&gt;requirements.txt&lt;/code&gt; file but this time it will get from your forked repository like below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git+git://github.com/YOUR_GITHUB_USERNAME/djongo.git#egg=djongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You don't have to go through all these processes because I already included it as you can see from above (requirements.txt) so feel free to use mine if your Django version is &lt;code&gt;3.1.3&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;There are some other dependencies like &lt;code&gt;celery&lt;/code&gt; where we'll use it as the queue to pass time-consuming tasks to run in the background and &lt;code&gt;redis&lt;/code&gt; is just a message broker for celery. This topic is out of scope for this post but you can visit &lt;a href="https://www.thepylot.dev/dockerizing-django-with-postgres-redis-and-celery/"&gt;Dockerizing Django with Postgres, Redis and Celery&lt;/a&gt; to understand it more.&lt;/p&gt;

&lt;p&gt;Now it's time to set up our services by configuring &lt;strong&gt;compose&lt;/strong&gt; file. Create this file in a root level of your current directory which means it will be outside of &lt;strong&gt;app&lt;/strong&gt; directory There are going to be 5 services in total:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;mongodb&lt;/code&gt; - for setting up MongoDB&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;postgres&lt;/code&gt; - for setting up PostgreSQL&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app&lt;/code&gt; - Django project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;celery&lt;/code&gt; - Queue for tasks&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;redis&lt;/code&gt; - Message broker that required for celery&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;/docker-compose.yml&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;mongo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MONGO_INITDB_ROOT_USERNAME=root&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MONGO_INITDB_ROOT_PASSWORD=root&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MONGO_INITDB_DATABASE=${MONGO_DB_NAME}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MONGO_INITDB_USERNAME=${MONGO_DB_USERNAME}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MONGO_INITDB_PASSWORD=${MONGO_DB_PASSWORD}&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${PWD}/_data/mongo:/data/db&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${PWD}/docker/_mongo/fixtures:/import&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${PWD}/docker/_mongo/scripts/init.sh:/docker-entrypoint-initdb.d/setup.sh&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;27017:27017&lt;/span&gt;

  &lt;span class="na"&gt;postgres&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:12&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=app_db&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER=app_db_user&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=supersecretpassword&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PORT=5432&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${PWD}/_data/postgres:/var/lib/postgresql/data&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${PWD}/docker/_postgres/scripts/create_test_db.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql&lt;/span&gt;

  &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis:6&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis-server --requirepass $REDIS_PASSWORD&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;6379:6379&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${PWD}/_data/redis:/var/lib/redis&lt;/span&gt;

  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./app&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;python&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;manage.py&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;runserver&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0.0.0.0:8000"&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${PWD}/app:/app&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;8000:8000&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;

  &lt;span class="na"&gt;celery&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./app&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;celery&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;celery"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-A"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;app"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;worker"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-c"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;1"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-l"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;INFO"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--without-heartbeat"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--without-gossip"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--without-mingle"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
    &lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;DJANGO_SETTINGS_MODULE=app.settings&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;DJANGO_WSGI=app.wsgi&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;DEBUG=False&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${PWD}/app:/app&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;

&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I will not go through this configuration in detail by assuming you already have knowledge about docker and compose files. Simply, we are pulling required images for the services and setting up main environment variables and ports to complete the configuration.&lt;/p&gt;

&lt;p&gt;Now we also need to add &lt;code&gt;.env&lt;/code&gt; file to fetch values of environment variables while building services:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/.env&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Mongo DB
MONGO_DB_HOST=mongo
MONGO_DB_PORT=27017
MONGO_DB_NAME=mongo_db
MONGO_DB_USERNAME=root
MONGO_DB_PASSWORD=root
MONGO_DB_URI=mongodb://root:root@mongo:27017

# PostgreSQL
POSTGRES_HOST=postgres
POSTGRES_DB=app_db
POSTGRES_USER=app_db_user
POSTGRES_PASSWORD=supersecretpassword
POSTGRES_PORT=5432


# Redis
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=supersecretpassword
BROKER_URL=redis://:supersecretpassword@redis:6379/0
REDIS_CHANNEL_URL=redis://:supersecretpassword@redis:6379/1
CELERY_URL=redis://:supersecretpassword@redis:6379/0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we'll create a new Django project inside our app folder:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose run app sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"django admin startproject app ."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The project structure should be like below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
├── app
│   ├── app
│   │   ├── asgi.py
│   │   ├── __init__.py
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   ├── Dockerfile
│   ├── manage.py
│   └── requirements.txt
├── docker-compose.yml
└── .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you see &lt;code&gt;dbsqlite&lt;/code&gt; in project files then you should delete it since we'll use &lt;code&gt;postgres&lt;/code&gt; it as a relational database. You also will notice &lt;code&gt;_data&lt;/code&gt; directory which represents the volume of MongoDB and Postgres.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#integration-with-postgresql"&gt;
  &lt;/a&gt;
  Integration with PostgreSQL
&lt;/h2&gt;

&lt;p&gt;We are ready to add our primary relational database which is going to be &lt;code&gt;postgres&lt;/code&gt;. Navigate to &lt;code&gt;settings.py&lt;/code&gt; and update &lt;code&gt;DATABASES&lt;/code&gt; configuration like below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.postgresql'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_HOST'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_NAME'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_USER'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_PORT'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5432&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; database set to &lt;code&gt;postgres&lt;/code&gt; and environment variables will be fetched from &lt;code&gt;.env&lt;/code&gt; file. Sometimes, &lt;code&gt;postgres&lt;/code&gt; is having connection issues caused by racing issues between Django and &lt;code&gt;postgres&lt;/code&gt;. To prevent such situations we'll implement a custom command and add it to &lt;code&gt;commands&lt;/code&gt; block in compose file. In this way, Django will wait &lt;code&gt;postgres&lt;/code&gt; before launch.&lt;/p&gt;

&lt;p&gt;The recommended path of holding commands is &lt;code&gt;/core/management/commands/&lt;/code&gt; from the official documentation of Django. So let's create an app named core then create a &lt;code&gt;management/commands&lt;/code&gt; directory inside it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run sh -c "django-admin startapp core"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then add following command to hold Django until &lt;code&gt;postgres&lt;/code&gt; is available:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/core/management/commands/wait_for_db.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OperationalError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.management&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseCommand&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseCommand&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Django command to pause execution until db is available"""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Waiting for database...'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db_conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;db_conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;db_conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;OperationalError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Database unavailable, waititng 1 second...'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Database available!'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Make sure you included &lt;code&gt;__init__.py&lt;/code&gt; into sub-directories you created. Now update app service in compose file by adding this command:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;docker-compose.yml&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./app&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app:latest&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="s"&gt;sh -c "python manage.py wait_for_db &amp;amp;&amp;amp;&lt;/span&gt;
               &lt;span class="s"&gt;python manage.py migrate &amp;amp;&amp;amp;&lt;/span&gt;
               &lt;span class="s"&gt;python manage.py runserver 0.0.0.0:8000"&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;${PWD}/app:/app&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;8000:8000&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Consider the &lt;code&gt;command&lt;/code&gt; block only and you'll see we now have two more commands there.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#integration-with-mongodb"&gt;
  &lt;/a&gt;
  Integration with MongoDB
&lt;/h2&gt;

&lt;p&gt;Actually, the integration of MongoDB is so simple thanks to &lt;code&gt;djongo&lt;/code&gt; which handles everything behind the scenes. Switch to &lt;code&gt;settings.py&lt;/code&gt; again and we'll add our second database as &lt;code&gt;nonrel&lt;/code&gt; which stands for the non-relational database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;settings.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.postgresql'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_HOST'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_NAME'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_USER'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'POSTGRES_PORT'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"nonrel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"ENGINE"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"djongo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"NAME"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'MONGO_DB_NAME'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;"CLIENT"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'MONGO_DB_HOST'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;"port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'MONGO_DB_PORT'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'MONGO_DB_USERNAME'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'MONGO_DB_PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;'TEST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'MIRROR'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The same logic applies here as we did for &lt;code&gt;default&lt;/code&gt; database which is &lt;code&gt;postgres&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-db-router"&gt;
  &lt;/a&gt;
  Setting up DB router
&lt;/h2&gt;

&lt;p&gt;DB router which will automatically write objects to a proper database such as whenever the &lt;code&gt;log&lt;/code&gt; object created it should navigate to &lt;code&gt;mongodb&lt;/code&gt; instead of &lt;code&gt;postgres&lt;/code&gt;. Setting up a DB router is simple, we just need to use router methods that Django provides and define our non-rel models to return the proper database.&lt;/p&gt;

&lt;p&gt;Create a new directory named &lt;strong&gt;utils&lt;/strong&gt; inside the &lt;strong&gt;core&lt;/strong&gt; app and also add &lt;code&gt;__init__.py&lt;/code&gt; to mark it as a python package. Then add the new file which is DB router below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/core/utils/db_routers.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NonRelRouter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    A router to control if database should use
    primary database or non-relational one.
    """&lt;/span&gt;

    &lt;span class="n"&gt;nonrel_models&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'log'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db_for_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_hints&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nonrel_models&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'nonrel'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'default'&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db_for_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_hints&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nonrel_models&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'nonrel'&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'default'&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;allow_migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_app_label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_hints&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_db&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'nonrel'&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;model_name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nonrel_models&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;nonrel_models&lt;/code&gt; - We are defining the name of our models in lowercase which belongs to a non-rel database or mongodb.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;db_for_read&lt;/code&gt; - the function name is self-explanatory so basically, it is used for reading operations which means each time we try to get records from the database it will check where it belongs and return the proper database.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;db_for_write&lt;/code&gt; - the same logic applies here. It's used to pick a proper database for writing objects.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;allow_migrate&lt;/code&gt; - Decided if the model needs migration. In mongodb there is no need to run migrations since it's a non-rel database.&lt;/p&gt;

&lt;p&gt;Next, we should add extra configuration in &lt;code&gt;settings.py&lt;/code&gt; to activate our custom router:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;settings.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;DATABASE_ROUTERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'core.utils.db_routers.NonRelRouter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Great! Our database configurations are finished and now it's time to make a few changes in Django as well before launching everything.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-celery-and-redis"&gt;
  &lt;/a&gt;
  Setting up Celery and Redis
&lt;/h2&gt;

&lt;p&gt;This part is a bit out of scope but since I want to illustrate some real-world app then those tools are always present in projects to handle heavy and time-consuming tasks. Let's add celery to our project, but it should place in our project folder alongside with settings file:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;celery.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DJANGO_SETTINGS_MODULE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'app.settings'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'app'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config_from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'django.conf:settings'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'CELERY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autodiscover_tasks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Basically, it will discover all tasks alongside the project and will pass them to the queue. Next, we also need to update &lt;code&gt;__init__.py&lt;/code&gt; file inside the current directory, which is our Django project:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;celery_app&lt;/span&gt;

&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'celery_app'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Celery requires a broker URL for tasks so in this case, we will use Redis as a message broker. Open your settings file and add the following configurations:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;settings.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;CELERY_TASK_TRACK_STARTED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;CELERY_TASK_TIME_LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="n"&gt;CELERY_IGNORE_RESULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;CELERY_BROKER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'CELERY_URL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CELERYD_HIJACK_ROOT_LOGGER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;REDIS_CHANNEL_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'REDIS_CHANNEL_URL'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now try to run &lt;code&gt;docker-compose up -d&lt;/code&gt; and all services should start successfully.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-models-and-celery-tasks"&gt;
  &lt;/a&gt;
  Adding models and celery tasks
&lt;/h2&gt;

&lt;p&gt;In this section, we'll pass a new task to the celery queue and test if our DB router works properly and writes objects to the required database. Create a new directory inside the &lt;strong&gt;core&lt;/strong&gt; app named &lt;strong&gt;models&lt;/strong&gt; and add the following file inside it to hold MongoDB models:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;core/models/mongo_models.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;djongo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mongo_models&lt;/span&gt;



&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mongo_models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mongo_models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectIdField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mongo_models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mongo_models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mongo_models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_use_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'nonrel'&lt;/span&gt;
        &lt;span class="n"&gt;ordering&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-created_at"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you see it's a very simple &lt;code&gt;Log&lt;/code&gt; model where it will let us know what's going on behind the scenes of internal operations of our application. Then add a model for Postgres as well:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;core/models/postgres_models.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are going to generate random posts and make some of them fail in order to write error logs for failed data.&lt;/p&gt;

&lt;p&gt;Lastly, don't forget to include &lt;code&gt;__init__.py&lt;/code&gt; inside &lt;strong&gt;models&lt;/strong&gt; directory:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;models/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.postgres_models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.mongo_models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we need to create a celery task that will generate tons of posts with random values by using &lt;code&gt;Faker&lt;/code&gt; generators:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;core/tasks.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;faker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Faker&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;shared_task&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;core.utils.log_handlers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LoggingHandler&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoggingHandler&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;shared_task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_random_posts&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Faker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;number_of_posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_of_posts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
                &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The post number %s failed due to the %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By adding if statement there we are forcing some of the posts to fail in order to catch exceptions and write them to &lt;code&gt;mongodb&lt;/code&gt;. As you noticed, we are using a custom log handler that will write the log data right away after its produced. So, create a new file named &lt;code&gt;log_handlers.py&lt;/code&gt; inside utils folder:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;core/utils/log_handlers.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;core.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Log&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LoggingHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Save log messages to MongoDB
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Great! We are almost ready to launch.&lt;/p&gt;

&lt;p&gt;Lastly, let's finish creating a very simple view and URL path to trigger the task from the browser and return &lt;code&gt;JSON&lt;/code&gt; a response if the operation succeeded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;core/views.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JsonResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.tasks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_random_posts&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;create_random_posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JsonResponse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;urls.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;core.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;post_generator&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'admin/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post_generator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Include the core app inside &lt;code&gt;INSTALLED_APPS&lt;/code&gt; configuration in &lt;code&gt;settings.py&lt;/code&gt; then run the migrations and we're done!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose run app sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"python manage.py makemigrations core"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, if you navigate to &lt;code&gt;127.0.0.1:8000&lt;/code&gt; the task will be passed to the queue and post objects will start to generate.&lt;/p&gt;

&lt;p&gt;Try to visit admin and you'll see log objects created successfully and by this way we're avoiding overload postgres while it handles only relational data.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code:
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thepylot"&gt;
        thepylot
      &lt;/a&gt; / &lt;a href="https://github.com/thepylot/django-mongodb-postgres"&gt;
        django-mongodb-postgres
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Integration of multiple databases with Django framework and navigate incoming data using DB router which automatically writes them to required database.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
MongoDB and Postgres integration with Django&lt;/h1&gt;
&lt;p&gt;This project includes multiple database configurations to launch Django project with &lt;strong&gt;Postgres&lt;/strong&gt; and &lt;strong&gt;MongoDB&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;This project works on &lt;strong&gt;Python 3+&lt;/strong&gt; and &lt;strong&gt;Django 3.1.3&lt;/strong&gt;. If you want to change the Django version please follow the link below to get information about it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://thepylot.dev" rel="nofollow"&gt;Add MongoDB and PostgreSQL in Django using Docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Run the following command to makemigrations:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;docker-compose run app sh -c "python manage.py makemigrations core"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then start the containers:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After containers launched navigate to &lt;code&gt;/&lt;/code&gt; home path and &lt;code&gt;celery&lt;/code&gt; will automatically receive the task.&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/thepylot/django-mongodb-postgres"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support 🌏
&lt;/h2&gt;

&lt;p&gt;If you feel like you unlocked new skills, please share them with your friends and subscribe to the &lt;a href="https://www.youtube.com/channel/UCEwYRHE5ZAOMfUaIpCQvjEQ"&gt;youtube channel&lt;/a&gt; to not miss any valuable information.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wPvLSEwUPHg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>django</category>
      <category>postgres</category>
      <category>mongodb</category>
      <category>docker</category>
    </item>
    <item>
      <title>All about Microsoft Imagine Cup 2022</title>
      <author>Md Shahriyar Al Mustakim Mitul</author>
      <pubDate>Tue, 28 Dec 2021 19:12:28 +0000</pubDate>
      <link>https://dev.to/mitul3737/all-about-microsoft-imagine-cup-2022-32kh</link>
      <guid>https://dev.to/mitul3737/all-about-microsoft-imagine-cup-2022-32kh</guid>
      <description>&lt;p&gt;The 2022 season of the Imagine Cup opens with the Epic Challenge. Participation is optional, but highly encouraged to support you in developing your project for the Online Semifinals or National Finals. By getting involved, you have the chance to outline your project proposal and pitch to get early feedback without a working proof of concept.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What to do?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MoTrVtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82mt2bsy4nf0tdw7jev7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MoTrVtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82mt2bsy4nf0tdw7jev7.png" alt="What to do" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tOQP-gsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tylf9ura17p114d73p2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOQP-gsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tylf9ura17p114d73p2.png" alt="Image description" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ibiiq5QG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kllfh6r2k4h23htazk6q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ibiiq5QG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kllfh6r2k4h23htazk6q.png" alt="Timeline" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Imagine Cup Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Website 0: &lt;a href="https://imaginecup.microsoft.com/en-us/Category/16"&gt;https://imaginecup.microsoft.com/en-us/Category/16&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Website 1: &lt;br&gt;
&lt;a href="https://imaginecup.microsoft.com/en-us/Country/US"&gt;https://imaginecup.microsoft.com/en-us/Country/US&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Website 2: &lt;br&gt;
&lt;a href="https://imaginecup.microsoft.com/en-us/Home/Registered/0"&gt;https://imaginecup.microsoft.com/en-us/Home/Registered/0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.Imagine Cup Competition Rules &amp;amp; Regulations (PDF):  &lt;a href="https://www.aka.ms/ICRulesRegs"&gt;https://www.aka.ms/ICRulesRegs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.Imagine Cup Code of Conduct (PDF): &lt;a href="https://aka.ms/IC22CodeofConduct"&gt;https://aka.ms/IC22CodeofConduct&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.Imagine Cup Training Content: &lt;a href="https://aka.ms/ICTrainingContent"&gt;https://aka.ms/ICTrainingContent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.Blog Website : &lt;a href="https://techcommunity.microsoft.com/t5/student-developer-blog/bg-p/StudentDeveloperBlog"&gt;https://techcommunity.microsoft.com/t5/student-developer-blog/bg-p/StudentDeveloperBlog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.GitHub Repository: &lt;a href="https://github.com/microsoft/ImagineCup/blob/main/README.md"&gt;https://github.com/microsoft/ImagineCup/blob/main/README.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.Microsoft Imagine Cup account: &lt;a href="https://imaginecup.microsoft.com/en-us/dashboard"&gt;https://imaginecup.microsoft.com/en-us/dashboard&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.Why Compete?: &lt;a href="https://imaginecup.microsoft.com/en-us/compete/whycompete"&gt;https://imaginecup.microsoft.com/en-us/compete/whycompete&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Queries&lt;/strong&gt;&lt;br&gt;
0.FAQ: &lt;a href="https://imaginecup.microsoft.com/en-us/support/faq"&gt;https://imaginecup.microsoft.com/en-us/support/faq&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.Frequently asked questions for getting started in the 2022 Imagine Cup: &lt;a href="https://techcommunity.microsoft.com/t5/student-developer-blog/frequently-asked-questions-for-getting-started-in-the-2022/ba-p/2998672"&gt;https://techcommunity.microsoft.com/t5/student-developer-blog/frequently-asked-questions-for-getting-started-in-the-2022/ba-p/2998672&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Winners&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Previous Year Winners: &lt;a href="https://imaginecup.microsoft.com/en-us/finalists/team#2021"&gt;https://imaginecup.microsoft.com/en-us/finalists/team#2021&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1.Meet the 2022 Imagine Cup Epic Challenge winners : &lt;a href="https://techcommunity.microsoft.com/t5/student-developer-blog/meet-the-2022-imagine-cup-epic-challenge-winners/ba-p/3029957"&gt;https://techcommunity.microsoft.com/t5/student-developer-blog/meet-the-2022-imagine-cup-epic-challenge-winners/ba-p/3029957&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;0.Explore the 2022 Imagine Cup categories: &lt;a href="https://techcommunity.microsoft.com/t5/student-developer-blog/explore-the-2022-imagine-cup-categories/ba-p/3034164"&gt;https://techcommunity.microsoft.com/t5/student-developer-blog/explore-the-2022-imagine-cup-categories/ba-p/3034164&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.2021 Imagine Cup category feature: Earth: &lt;a href="https://techcommunity.microsoft.com/t5/student-developer-blog/2021-imagine-cup-category-feature-earth/ba-p/2191840"&gt;https://techcommunity.microsoft.com/t5/student-developer-blog/2021-imagine-cup-category-feature-earth/ba-p/2191840&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.2021 Imagine Cup category feature: Education: &lt;a href="https://techcommunity.microsoft.com/t5/student-developer-blog/2021-imagine-cup-category-feature-education/ba-p/2194622"&gt;https://techcommunity.microsoft.com/t5/student-developer-blog/2021-imagine-cup-category-feature-education/ba-p/2194622&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.2021 Imagine Cup category feature: Healthcare: &lt;a href="https://techcommunity.microsoft.com/t5/student-developer-blog/2021-imagine-cup-category-feature-healthcare/ba-p/2197968"&gt;https://techcommunity.microsoft.com/t5/student-developer-blog/2021-imagine-cup-category-feature-healthcare/ba-p/2197968&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.2021 Imagine Cup category feature: Lifestyle: &lt;a href="https://techcommunity.microsoft.com/t5/student-developer-blog/2021-imagine-cup-category-feature-lifestyle/ba-p/2200906"&gt;https://techcommunity.microsoft.com/t5/student-developer-blog/2021-imagine-cup-category-feature-lifestyle/ba-p/2200906&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Story&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;0.Imagine Cup Microsoft Asia Stories: &lt;a href="https://news.microsoft.com/apac/tag/imagine-cup/"&gt;https://news.microsoft.com/apac/tag/imagine-cup/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>imaginecup</category>
      <category>microsoft</category>
      <category>2022</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 38: BC</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Tue, 28 Dec 2021 19:03:25 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-38-bc-4mcb</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-38-bc-4mcb</guid>
      <description>&lt;p&gt;I like covering languages you already have installed, but don't know about it. So today's episode is about BC - arbitrary precision calculator language.&lt;/p&gt;

&lt;p&gt;Its main selling point is in the name - arbitrary precision. Its main downside is also in the name - calculator language - as it's extremely limited.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-bc-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;bc&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;bc&lt;/code&gt; expects a file, but we can use it in a few ways. You can run it from shell (&lt;code&gt;-q&lt;/code&gt; is quiet mode, otherwise it prints annoying 4 line banner if used this way):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bc -q
2^300
20370359763344860862684456884093781610514683936659362506361404493543\
81299763336706183397376
quit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With &lt;code&gt;2^300&lt;/code&gt; and &lt;code&gt;quit&lt;/code&gt; being input. As you can see the output is being automatically formatted to not exceed 70 columns.&lt;/p&gt;

&lt;p&gt;If you want to just pass some code on the command line, there's no equivalent to &lt;code&gt;-e "code"&lt;/code&gt; most other Unix languages have. You need to &lt;code&gt;echo&lt;/code&gt; the code and pipe it into &lt;code&gt;bc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '2^100' | bc
1267650600228229401496703205376
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most shells nowadays have a shortcut for this kind of &lt;code&gt;echo&lt;/code&gt;. It's up to you if it's more readable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bc &amp;lt;&amp;lt;&amp;lt; '2^100'
1267650600228229401496703205376
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use &lt;code&gt;bc&lt;/code&gt; from a script, but it needs both &lt;code&gt;-q&lt;/code&gt; (to prevent printing the stupid banner), and &lt;code&gt;quit&lt;/code&gt; command at the end (otherwise it will continue expecting your input):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/bc -q

2^100
quit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is actually intentional feature, as you can define some functions and whatnot in the file, and then do calculations on them. For example with this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/bc -q

a = 100
b = 200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./interactive.bc
a+b
300
quit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#powers-of-2"&gt;
  &lt;/a&gt;
  Powers of 2
&lt;/h3&gt;

&lt;p&gt;The looping is done with &lt;code&gt;while&lt;/code&gt;. Any calculation that doesn't get assigned to some variable is interpretted as a print. So this &lt;code&gt;a&lt;/code&gt; line means to print &lt;code&gt;a&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/bc -q

a = 1
i = 1
while (i &amp;lt;= 32) {
  a
  a = a*2
  i = i+1
}
quit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works just as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./powers.bc
1
2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576
2097152
4194304
8388608
16777216
33554432
67108864
134217728
268435456
536870912
1073741824
2147483648
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;

&lt;p&gt;The Fibonacci sequence is just as you'd expect, the interesting part is printing it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/bc -q

a = 1
b = 1
i = 1
while (i &amp;lt;= 100) {
  if (i &amp;gt;= 90) {
    "fib("
    print(i)
    ") = "
    print(a)
    "
"
  }
  c = a+b
  a = b
  b = c
  i = i+1
}
quit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./fib.bc
fib(90) = 2880067194370816120
fib(91) = 4660046610375530309
fib(92) = 7540113804746346429
fib(93) = 12200160415121876738
fib(94) = 19740274219868223167
fib(95) = 31940434634990099905
fib(96) = 51680708854858323072
fib(97) = 83621143489848422977
fib(98) = 135301852344706746049
fib(99) = 218922995834555169026
fib(100) = 354224848179261915075
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;any calculation without assignment like &lt;code&gt;a&lt;/code&gt; prints &lt;code&gt;a&lt;/code&gt; followed by a newline&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;print(a)&lt;/code&gt; also prints &lt;code&gt;a&lt;/code&gt; - but without a newline&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"string"&lt;/code&gt; prints a string&lt;/li&gt;
&lt;li&gt;if you want to print a newline alone, there's no &lt;code&gt;"\n"&lt;/code&gt; - you need to start &lt;code&gt;"&lt;/code&gt; on one line, and end on the next.&lt;/li&gt;
&lt;li&gt;in this case we could just do &lt;code&gt;a&lt;/code&gt; instead of &lt;code&gt;print a&lt;/code&gt; followed by print newline trick, but I wanted to show the full range of printing options.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;The first problem we run into is that &lt;code&gt;bc&lt;/code&gt; has &lt;code&gt;if&lt;/code&gt; but it doesn't have else, so we need to either &lt;code&gt;return&lt;/code&gt; from the function or do the second &lt;code&gt;if&lt;/code&gt; with reversed condition.&lt;/p&gt;

&lt;p&gt;The second problem is that if we call &lt;code&gt;fizzbuzz(i)&lt;/code&gt;, &lt;code&gt;bc&lt;/code&gt; will try to print the result of the function, which is &lt;code&gt;0&lt;/code&gt;, and so we need to assign it to something. &lt;code&gt;bc&lt;/code&gt; does not support &lt;code&gt;_&lt;/code&gt; as variable name, so the convention of &lt;code&gt;_ = something()&lt;/code&gt; so common in many other languages for throwing out results is not really possible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/bc -q

define fizzbuzz(n) {
  if (n % 15 == 0) {
    "FizzBuzz
"
    return
  }
  if (n % 5 == 0) {
    "Buzz
"
    return
  }
  if (n % 3 == 0) {
    "Fizz
"
    return
  }
  n
}

i = 1
while (i &amp;lt;= 100) {
  unused = fizzbuzz(i)
  i = i + 1
}
quit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Knowing these limitations, we can rewrite it in a nicer way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/bc -q

i = 1
while (i &amp;lt;= 100) {
  t = i % 3
  v = i % 5
  if (t == 0) { "Fizz" }
  if (v == 0) { "Buzz" }
  if (t != 0 &amp;amp;&amp;amp; v != 0) { print(i) }
  "
"
  i = i + 1
}
quit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pythagorean-theorem"&gt;
  &lt;/a&gt;
  Pythagorean theorem
&lt;/h3&gt;

&lt;p&gt;Just about every language supports arbitrary precision integers, so none of that has been impressive. Let's try something that is a bit less common - arbitrary precision decimals.&lt;/p&gt;

&lt;p&gt;By default &lt;code&gt;bc&lt;/code&gt; uses &lt;code&gt;scale = 0&lt;/code&gt;, that is everything is an integer. We need to set &lt;code&gt;scale&lt;/code&gt; to however many decimal places we want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/bc -q

scale = 60
a = read()
b = read()
sqrt(a^2 + b^2)
quit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which prints the answer to 60 decimal places:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  ./pythagoras.bc
69
420
425.630121114565856802783307310908277784184864514438295059161980
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#should-you-use-bc"&gt;
  &lt;/a&gt;
  Should you use BC?
&lt;/h3&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;It had a niche back in the olden days when the alternatives were C and Shell. Nowadays most languages have arbitrary sized integers - either by default like Ruby or Python, or with easy one letter suffix like JavaScript's &lt;code&gt;69n&lt;/code&gt;, so there's really no point whatsoever in learning &lt;code&gt;bc&lt;/code&gt; if you just need big integers.&lt;/p&gt;

&lt;p&gt;With arbitrary precision decimals, it's arguably somewhat useful. All languages have some kind of arbitrary precission decimal libraries, but they're often a bit awkward to use.&lt;/p&gt;

&lt;p&gt;Still, I don't think this makes learning &lt;code&gt;bc&lt;/code&gt; worth it - for almost every use case, unlimited integers and regular builtin floating point numbers are sufficient, and if you find yourself needing arbitrary precission decimals or arbitrary precission float a lot, you should probably learn proper mathematical language like &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-19-julia-26ak"&gt;Julia&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-38-bc"&gt;Code for the BC episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>bc</category>
      <category>unix</category>
    </item>
  </channel>
</rss>
