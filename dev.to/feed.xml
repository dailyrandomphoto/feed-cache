<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How important is alt text‚ùì üëÄ Let me SHOW you with a couple of useful plugins! üëÄ </title>
      <author>InHuOfficial</author>
      <pubDate>Tue, 24 Aug 2021 18:18:54 +0000</pubDate>
      <link>https://dev.to/inhuofficial/how-important-is-alt-text-let-me-show-you-with-a-couple-of-useful-plugins-2k0p</link>
      <guid>https://dev.to/inhuofficial/how-important-is-alt-text-let-me-show-you-with-a-couple-of-useful-plugins-2k0p</guid>
      <description>&lt;p&gt;In this article I will introduce you to a couple of extensions for Chrome, one of which will be a massive help when testing sites / web apps you have built! Then I will use those extensions to show you what a big problem alt attributes are! (the biggest problem being the lack of them!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-intro"&gt;
  &lt;/a&gt;
  Quick Intro
&lt;/h2&gt;

&lt;p&gt;(&lt;a href="#what-are-we-doing-here"&gt;click here to skip this bit if you know what alt text is&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Look there are 200,000 articles on alt text. I don't need to repeat them do I? &lt;/p&gt;

&lt;p&gt;&lt;em&gt;OK&lt;/em&gt; - here is a quick summary:&lt;/p&gt;

&lt;p&gt;Alt text allows you to describe an image within your HTML. &lt;/p&gt;

&lt;p&gt;This means that people who use assistive technology get to know what the image contains and so get the same (or a similar) experience. &lt;/p&gt;

&lt;p&gt;Additionally if someone disables images or the image fails to load they also get to know what the image contained.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-alt-text-in-html"&gt;
  &lt;/a&gt;
  Adding alt text in HTML
&lt;/h3&gt;

&lt;p&gt;Here is how you add alt text to an image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image-source.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A description of the image in the context of the document"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That bit in the &lt;code&gt;alt&lt;/code&gt; attribute, that is alt text. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To write good alt text&lt;/strong&gt; all you need to do is imagine you were reading the article to a friend over the phone, when you reach an image just describe it with enough detail that they would get what the image is about and any information within that image that is relevant to the article.&lt;/p&gt;

&lt;p&gt;There are a few other tips on good alt text which I will write about in a future post, but that is the main one! &lt;/p&gt;

&lt;p&gt;On to the point of this article, the &lt;strong&gt;why&lt;/strong&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-doing-here"&gt;
  &lt;/a&gt;
  What are we doing here?
&lt;/h2&gt;

&lt;p&gt;There are &lt;a href="https://ux.stackexchange.com/a/119596/131399"&gt;estimated to be over 4.4 million Americans who use a screen reader&lt;/a&gt;...extrapolate that across the world and you have about 100 million people who use a screen reader! &lt;/p&gt;

&lt;p&gt;Without alt text a screen reader cannot tell people what an image is about!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That is 100 million people who you are not only excluding, but you aren't reaching with your message!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am going to &lt;strong&gt;show you&lt;/strong&gt; what your lack of alt text feels like for someone who relies on it, hopefully it will drive home the need for alt text!&lt;/p&gt;

&lt;p&gt;This article is not going to tell you how to write perfect alt text, but I will address that in a future article. This is just to show you &lt;strong&gt;why&lt;/strong&gt; you should care and the impact your actions have!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools required:&lt;/strong&gt; You need a computer and Google Chrome (or browser that works with Chrome extensions) so if you are on mobile, you might want to &lt;strong&gt;bookmark this article&lt;/strong&gt; and wait until you get home to try it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-long-is-this-going-to-take-and-why-should-i-bother"&gt;
  &lt;/a&gt;
  How long is this going to take and why should I bother?
&lt;/h3&gt;

&lt;p&gt;Honestly, just give me 2-3 minutes of your time, you will soon realise that your lack of alt text is &lt;strong&gt;not a minor problem&lt;/strong&gt;, it has a &lt;strong&gt;huge impact&lt;/strong&gt; on a lot of people!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As an added bonus&lt;/strong&gt; the first extension we are going to be using has so many useful tools for you as a developer it is worth reading this article just for that! &lt;/p&gt;

&lt;p&gt;It is great for checking code quality using the links under the "tools" section, for example!&lt;/p&gt;

&lt;p&gt;The second extension is more for this demonstration, but still useful to have for social media to remind you about alt attributes!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tool-1-web-developer"&gt;
  &lt;/a&gt;
  Tool 1 - Web Developer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm"&gt;Web Developer for Google Chrome&lt;/a&gt; provides you with loads of utilities for testing web pages.&lt;/p&gt;

&lt;p&gt;It is awesome! Add it to your tool kit &lt;strong&gt;today&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tool-2-social-visual-alt-text"&gt;
  &lt;/a&gt;
  Tool 2 - Social Visual Alt Text
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/social-visual-alt-text/bkpbmomfemcjdeekdffmbohifpndodmi"&gt;Social Visual Alt Text&lt;/a&gt; takes the alt description for images and displays it visually on the page. &lt;/p&gt;

&lt;p&gt;It does this for Twitter, Instagram, Facebook and Tweet Deck.&lt;/p&gt;

&lt;p&gt;Add it to Chrome also. &lt;/p&gt;

&lt;p&gt;Although the first plugin allows you to display alt text, it doesn't work properly with Twitter (which is why we need this second plugin). Twitter is where we are going to demonstrate the problem as it is far more obvious there!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-twitter-test"&gt;
  &lt;/a&gt;
  The Twitter test!
&lt;/h2&gt;

&lt;p&gt;Ok so have you installed those two extensions?&lt;/p&gt;

&lt;p&gt;Great, now before leaving this page you have one tiny task. &lt;/p&gt;

&lt;p&gt;Look for the cog icon in your extensions toolbar (light grey colour, circled). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IVMMv-JU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d1if31fnb0ol40dxlgr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVMMv-JU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d1if31fnb0ol40dxlgr.jpg" alt='Cog icon for "Web Developer" plugin (cog has light grey gradient)'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on it and select the "images" tab at the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60Fn-gw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzzdccrdnqgsh6mvhzy5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60Fn-gw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzzdccrdnqgsh6mvhzy5.jpg" alt="Images tab located at top of popup window at the 5th position"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now select the first item in the list "Disable all images".&lt;/p&gt;

&lt;p&gt;You should now see a green tick next to "disable all images" (circled).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cVNwRStK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pu53fu88yeqkhdi7xy8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cVNwRStK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pu53fu88yeqkhdi7xy8.jpg" alt="Disable Images with green tick next to it highlighted with red circle around. Arrow pointing to notification at bottom that images are disabled."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should also see a green notification appear at the bottom to let you know images are disabled (shown by the arrow).&lt;/p&gt;

&lt;p&gt;You are all set! All I want you to do is try and use Twitter for two minutes and make sense of it!&lt;/p&gt;

&lt;p&gt;Go on, head over to &lt;a href="https://twitter.com"&gt;Twitter&lt;/a&gt;, just for a minute or two!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-was-it-like"&gt;
  &lt;/a&gt;
  So what was it like?
&lt;/h2&gt;

&lt;p&gt;(20 minutes later I presume?)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important Reminder:&lt;/strong&gt; Don't forget to go back to the Web Developer plugin (the cog) and allow images again!&lt;/p&gt;

&lt;p&gt;So, now that you have wasted some time on Twitter, what was it like? &lt;/p&gt;

&lt;p&gt;Did you see loads of code examples shared as images that were non existent to you? Did people share pictures with no context and you have no idea what they are on about?&lt;/p&gt;

&lt;p&gt;Did it look something like this?:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fvR7pZHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp47xmocqrcgvbzht1ku.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fvR7pZHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp47xmocqrcgvbzht1ku.jpg" alt="Twitter feed example with 3 images all with no alt text showing and just a red bar instead and various colour backgrounds where the images should be. None of the tweets makes sense without the image as the image is the context and main subject of the tweet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-an-awful-experience-isnt-it"&gt;
  &lt;/a&gt;
  It is an awful experience isn't it?
&lt;/h3&gt;

&lt;p&gt;Yup, that is the problem &lt;strong&gt;you&lt;/strong&gt; are causing for a lot of people by not adding alt text.&lt;/p&gt;

&lt;p&gt;Hopefully you also came across a few good alt descriptions!&lt;/p&gt;

&lt;p&gt;I hope you got to see how detailed descriptions of images in context can let you enjoy the same information and experience!&lt;/p&gt;

&lt;p&gt;That is all I wanted you to see, I hope it  has shown you &lt;strong&gt;why&lt;/strong&gt; it is important! &lt;/p&gt;

&lt;p&gt;This is a barrier to equality we can do something about really easily with a big impact!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-the-social-visual-alt-text-plugin-on"&gt;
  &lt;/a&gt;
  Leave the Social Visual Alt Text plugin on
&lt;/h3&gt;

&lt;p&gt;I would encourage you to leave the social media plugin on as a reminder as it doesn't get in the way and you soon get used to it. (We all forget, yes even me with years working in accessibility!)&lt;/p&gt;

&lt;p&gt;In fact, I find it useful as sometimes (not often!) someone adds some alt text that explains where a building is, what piece of art something is etc. that otherwise I would not know!&lt;/p&gt;

&lt;p&gt;And who knows, the Social Visual Alt Text plugin might encourage you to (gently) nudge a few of your favourite peeps on Twitter to add alt descriptions to their images when you keep seeing the red bars on their content!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-a-wrap"&gt;
  &lt;/a&gt;
  That's a wrap!
&lt;/h2&gt;

&lt;p&gt;That is all!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me know whether you had a good or bad experience using Twitter without images&lt;/strong&gt; (I think I know the answer üòã) in the comments!&lt;/p&gt;

&lt;p&gt;I have two follow up posts queued around this subject. &lt;/p&gt;

&lt;p&gt;One on how to add &lt;strong&gt;good&lt;/strong&gt; alt descriptions.&lt;/p&gt;

&lt;p&gt;The second is on how sites such as DEV, Twitter etc. can make adding alt descriptions more natural, loosely based on &lt;a href="https://dev.to/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp#images"&gt;my post on a What You See Is What You Get editor (WYSIWYG) that I built for DEV&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The WYSIWYG has a little alt description process included as a concept (I linked straight to the relevant part)!&lt;/p&gt;

&lt;p&gt;You could use that for your DEV.to articles if you write them!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;p.s.&lt;/strong&gt; does anyone know if you can add alt text to cover images on DEV using front matter or something? It annoys me I can't do that! I seem to remember seeing a Github issue on the Forem repository about it, but I can't find it now.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Firebase core services</title>
      <author>Aswin Barath</author>
      <pubDate>Tue, 24 Aug 2021 18:01:28 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/firebase-core-services-4hkl</link>
      <guid>https://dev.to/aswin2001barath/firebase-core-services-4hkl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#firestore-database"&gt;
  &lt;/a&gt;
  Firestore database
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OdUPDGCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qliisl5vchs8xas8j4v3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OdUPDGCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qliisl5vchs8xas8j4v3.png" alt="Firestore database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firestore is an excellent choice these days as almost every app needs persistent data. Following are the benefits of firestore:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Realtime&lt;/li&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#realtime"&gt;
  &lt;/a&gt;
  Realtime
&lt;/h3&gt;

&lt;p&gt;Realtime means that for every change made in the database, the connected users updates with these changes. This feature saves you a lot of time when you are developing applications. It provides clear logic and reduces your code length.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nosql"&gt;
  &lt;/a&gt;
  NoSQL
&lt;/h3&gt;

&lt;p&gt;Firestore is a NoSQL document database. There has been a surf of popularity for NoSQL databases. A lot of developers find them more comfortable to use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;Firestore provides a set of security rules with which you can easily create restrictions for who can read, write, update, or delete data from your database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYLBKkVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w96xl0bl2gmvynbh1ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYLBKkVR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w96xl0bl2gmvynbh1ba.png" alt="Hosting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firebase Hosting is an easy to use service even for beginners. Following are some impressive reasons to use this service:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SSL for Every Site&lt;/li&gt;
&lt;li&gt;Fast Servers&lt;/li&gt;
&lt;li&gt;Deploy From CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ssl-for-every-site"&gt;
  &lt;/a&gt;
  SSL for Every Site
&lt;/h3&gt;

&lt;p&gt;The SSL certificate is automatically provisioned and configured for each site deployed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cached-on-ssds"&gt;
  &lt;/a&gt;
  Cached on SSDs
&lt;/h3&gt;

&lt;p&gt;Sites deployed to Firebase Hosting are cached on SSD‚Äôs(Solid State Drive) for a low latency reliable experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-from-cli"&gt;
  &lt;/a&gt;
  Deploy From CLI
&lt;/h3&gt;

&lt;p&gt;Deploying your app to the web from a local directory only takes one command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixXSYaZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw6j9xxzw9wns7hdv0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixXSYaZg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw6j9xxzw9wns7hdv0x.png" alt="Storage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We love to share photos, videos, and gifs. Firebase storage enables your users to store and share these files through your app. Some of the features of the Firebase storage service are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handle Large File Sizes&lt;/li&gt;
&lt;li&gt;Flexible File Type&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#handle-large-file-sizes"&gt;
  &lt;/a&gt;
  Handle Large File Sizes
&lt;/h3&gt;

&lt;p&gt;Firebase storage can scale up to petabytes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flexible-file-type"&gt;
  &lt;/a&gt;
  Flexible File Type
&lt;/h3&gt;

&lt;p&gt;There are no limitations on the types of files you can upload, which means you can use this service for images, videos, PDFs, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Or771bnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irk835xr7su5paudhy2f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Or771bnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irk835xr7su5paudhy2f.PNG" alt="Authentication"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build an authentication system from scratch is tiresome and can get tricky. Firebase offers a solution to authentication that requires less code, less time, and better security through the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email and Password Authentication&lt;/li&gt;
&lt;li&gt;OAuth authentication

&lt;ul&gt;
&lt;li&gt;Using an existing platform to authenticate a user is known as OAuth. Firebase utilizes Google, Facebook, Twitter, Github, and many other providers that you can use to authenticate your users.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each Firebase service can be used on its own or together with the other services. Hence makes it easy to pick and choose the right services for your specific application.&lt;/p&gt;

&lt;p&gt;Firebase offers various services.&lt;br&gt;
So, I encourage you to take the time to explore the other services as well.&lt;/p&gt;

&lt;p&gt;Feel free to share if you found this useful üòÉ.&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>10+ Search Bar design Example using HTML,CSS AND JAVASCRIPT</title>
      <author>mike</author>
      <pubDate>Tue, 24 Aug 2021 17:47:33 +0000</pubDate>
      <link>https://dev.to/mike37/10-search-bar-design-example-using-html-css-and-javascript-1pep</link>
      <guid>https://dev.to/mike37/10-search-bar-design-example-using-html-css-and-javascript-1pep</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--df8prigj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iet5nissri68paekxxll.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--df8prigj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iet5nissri68paekxxll.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10+ Search Bar design Example using HTML,CSS AND JAVASCRIPT&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;            

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/search-bar/"&gt;Latest 20+ Search Bar design Example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt; 

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;              Title:-Search bar animation
              Author:-milan Milo≈°ev
              Made With:- HTML CSS JAVASCRIPT   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Search input with morphing effect. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/MilanMilosev/embed/JdgRpB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;               Title:-Secret Project
               Author:-Mohan Khadka
               Made With:- HTML CSS JAVASCRIPT  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/khadkamhn/embed/BNwxEa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;               Title:-Search Bar Animation
               Author:-Marco Biedermann
               Made With:- HTML CSS JAVASCRIPT  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marcobiedermann/embed/scqxL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;           Title:-Pure CSS expanding search with custom properties 
           Author:-Ana Tudor
           Made With:- HTML CSS 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thebabydino/embed/PBXRRm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;               Title:-Lazy Search Prediction/Autocomplete
               Author:-Sarah Wulf
               Made With:- HTML CSS 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/slwulf/embed/vczhJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;               Title:-Pull-Out Search Bar Concept
               Author:-Asna Farid
               Made With:- HTML CSS 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/asna_farid/embed/ZQdajg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;               Title:-Search bar effect
               Author:-Fabian B
               Made With:- HTML CSS JAVASCRIPT  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/madebyfabian/embed/zjyKMW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;               Title:-Search Bar
               Author:-William Newton
               Made With:- HTML CSS JAVASCRIPT  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/williamnewton/embed/Avehy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;               Title:-Search Bar
               Author:-Ashvin Motye
               Made With:- HTML CSS JAVASCRIPT  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Generate a suggestion list when the user enters a search phrase based on content present on the page, in this case, a list of icons.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ashvinmotye/embed/OdBYxP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                Title:-Search bar
                Author:-lsgrrd
                Made With:- HTML CSS JAVASCRIPT 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;very simple flat search form&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lsgrrd/embed/kxzeG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                Title:-DailyUI 022
                Author:-Adam Kuhn
                Made With:- HTML CSS JAVASCRIPT 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;dailyui.co exercise 022 - search bar&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/cobra_winfrey/embed/rrWQEp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Assign value to multiple variables at once in Javascript</title>
      <author>Beginner Developer</author>
      <pubDate>Tue, 24 Aug 2021 16:50:52 +0000</pubDate>
      <link>https://dev.to/beginnerdeveloper/assign-value-to-multiple-variables-at-once-in-javascript-3ah7</link>
      <guid>https://dev.to/beginnerdeveloper/assign-value-to-multiple-variables-at-once-in-javascript-3ah7</guid>
      <description>&lt;p&gt;The &lt;strong&gt;destructuring assignment&lt;/strong&gt; syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let [a,b,c] = [1,2,3];

    console.log(a,b,c);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cuVKCvS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b8yxsbyhx8e3c9634r9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuVKCvS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b8yxsbyhx8e3c9634r9.PNG" alt="Output"&gt;&lt;/a&gt;&lt;br&gt;
My Blog:- &lt;a href="https://beginners-developer.blogspot.com/"&gt;https://beginners-developer.blogspot.com/&lt;/a&gt;&lt;br&gt;
Reference: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tips</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why you should aim to be at a company with a lot of users</title>
      <author>Scott</author>
      <pubDate>Tue, 24 Aug 2021 16:45:58 +0000</pubDate>
      <link>https://dev.to/scottstern06/why-you-should-aim-to-be-at-a-company-with-a-lot-of-users-1k5</link>
      <guid>https://dev.to/scottstern06/why-you-should-aim-to-be-at-a-company-with-a-lot-of-users-1k5</guid>
      <description>&lt;p&gt;This is something I wish I did earlier on..&lt;/p&gt;

&lt;p&gt;First I worked at a small startup, I don‚Äôt think anyone used what we built‚Ä¶and it was horrible.&lt;/p&gt;

&lt;p&gt;My next few jobs were working at B2B enterprise software companies where not daily active users used the product.&lt;br&gt;
My current job has LOTS of users, and I‚Äôm one of them. And I‚Äôm happy and it has done a lot for my career for credibility.&lt;/p&gt;

&lt;p&gt;Why is this important?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;From a technical perspective its important to be in a company where ‚Äúoh shit‚Äù protocol is in place and you know how to fix a problem that could be potentially costing the business hundreds of thousands of dollars&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you are networking or going into an interview, if they have used your product your credibility goes through the roof and they want to work with you.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Its ok not to be at a company like this, but strive to get there one day. &lt;/p&gt;

&lt;p&gt;It will help your career development and the problems you get to solve will most likely be more fun.&lt;/p&gt;

&lt;p&gt;Want more? Come join our Facebook group to help you get your first job as a software engineer, career development, and so much more!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/groups/310120400851953"&gt;https://www.facebook.com/groups/310120400851953&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scott&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>KoMPose Kit: KaMP Kit goes Jetpack Compose</title>
      <author>Brady Aiello</author>
      <pubDate>Tue, 24 Aug 2021 16:38:22 +0000</pubDate>
      <link>https://dev.to/touchlab/kompose-kit-kamp-kit-goes-jetpack-compose-1k43</link>
      <guid>https://dev.to/touchlab/kompose-kit-kamp-kit-goes-jetpack-compose-1k43</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kamp-kit-and-jetpack-compose"&gt;
  &lt;/a&gt;
  KaMP Kit and Jetpack Compose
&lt;/h2&gt;

&lt;p&gt;Hey folks, Brady from Touchlab here. I've only been at Touchlab since the beginning of the year, but &lt;a href="https://github.com/touchlab/KaMPKit"&gt;KaMP Kit&lt;/a&gt;, our simple-but-not-too-simple sample project to help those considering Kotlin Multiplatform, started way back at the end of 2019. Back then, Jetpack Compose had just been announced in May. It was a time full of optimism about the modern mobile UI development experience, but also of wild instability. The first &lt;a href="https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-navigation-release/ui/README.md"&gt;method&lt;/a&gt; of getting Jetpack Compose to work on your machine involved pulling down the AndroidX development toolchain, and running a special version of Android Studio via terminal commands. Eventually, preview, alpha, and beta version of Compose could be used in the canary version of Android Studio (more &lt;a href="https://youtu.be/U5BwfqBpiWU?t=1324"&gt;history&lt;/a&gt;). Starting July 28, 2021, Compose went &lt;a href="https://android-developers.googleblog.com/2021/07/jetpack-compose-announcement.html"&gt;stable&lt;/a&gt;, and a version of Android Studio Arctic Fox, which supports Compose, was released in the stable channel shortly thereafter. Now we can use a stable version of Compose with a stable version of Android Studio. We at Touchlab have been excited about Compose for a long time; you can watch us geek out about it &lt;a href="https://www.youtube.com/watch?v=CA6KYa0MvPo"&gt;here&lt;/a&gt;. And though the community has been interested in Compose for KaMP Kit since at least &lt;a href="https://github.com/touchlab/KaMPKit/issues/105"&gt;May 2020&lt;/a&gt;, we didn't want folks who are trying out Kotlin Multiplatform with KaMP Kit to also have to learn a changing Jetpack Compose API, and require them to use a special version of Android Studio. Now that these obstacles have been removed, we feel comfortable fully endorsing Jetpack Compose in KMM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cutting-code"&gt;
  &lt;/a&gt;
  Cutting Code
&lt;/h2&gt;

&lt;p&gt;After moving to Jetpack Compose, we were able to remove a lot of things that clutter the KMP learning experience. XML views are gone, which means developers don't need to worry about context switching between XML and Kotlin, &lt;code&gt;findViewById()&lt;/code&gt;, or configure &lt;code&gt;viewBinding&lt;/code&gt; or &lt;code&gt;dataBinding&lt;/code&gt;. Removing the &lt;code&gt;RecyclerView&lt;/code&gt;, its &lt;code&gt;ViewHolder&lt;/code&gt;, and &lt;code&gt;Adapter&lt;/code&gt;, and replacing it with a &lt;code&gt;LazyColumn&lt;/code&gt; from Compose simplifies the sample considerably. Although we had to bring in Compose dependencies, &lt;a class="mentioned-user" href="https://dev.to/russhwolf"&gt;@russhwolf&lt;/a&gt;
 noticed that by abandoning &lt;code&gt;AppCompatActivity&lt;/code&gt; in favor of &lt;code&gt;ComponentActivity&lt;/code&gt;, we were able to remove the large AppCompat library from our dependencies entirely.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exposing-a-flaw-in-our-state-management"&gt;
  &lt;/a&gt;
  Exposing a Flaw in our State Management
&lt;/h2&gt;

&lt;p&gt;If you're now converting an app to use Jetpack Compose, you may have noticed that modeling your view state using a &lt;code&gt;sealed class&lt;/code&gt; may not work as well as it used to in the &lt;code&gt;View&lt;/code&gt; world. That's because &lt;code&gt;View&lt;/code&gt;s implicitly kept state that we relied on. Compose made this more apparent, and forced us to stop relying on our UI for any state whatsoever. &lt;/p&gt;

&lt;p&gt;For example, let's say we have &lt;code&gt;Loading&lt;/code&gt;, &lt;code&gt;Success&lt;/code&gt;, and &lt;code&gt;Error&lt;/code&gt; states to describe our UI, and that we are currently showing the &lt;code&gt;Success&lt;/code&gt; state to describe a list of items in our UI, while fetching more data. In the &lt;code&gt;View&lt;/code&gt; world, we emit a &lt;code&gt;Loading&lt;/code&gt; state, which just makes the loading spinner visible, in addition to the stale list, while fetching a fresh list. It just comes down to showing what we're already showing, and then making a loading spinner visible.&lt;/p&gt;

&lt;p&gt;However, in the Compose world, we don't have all possible views on the screen, only toggling some as visible. Instead, we need to emit all of the UI we want to show whenever the State changes. In our example, when we emit the &lt;code&gt;Loading&lt;/code&gt; state, the success UI with our list of data goes away, and only the loading spinner is visible. This is very jarring, and not a great user experience. This is because we're using a &lt;code&gt;sealed class&lt;/code&gt; for something that's not mutually exclusive. &lt;code&gt;Success&lt;/code&gt; and &lt;code&gt;Loading&lt;/code&gt; are not mutually exclusive, unless &lt;code&gt;Loading&lt;/code&gt; only describes an empty screen with a loading spinner. Ryan Harter has &lt;a href="https://ryanharter.com/blog/2019/07/encapsulating-view-state/#a-note-about-sealed-classes"&gt;written&lt;/a&gt; about this issue, and Android GDE &lt;a class="mentioned-user" href="https://dev.to/ditn"&gt;@ditn&lt;/a&gt;
 &lt;a href="https://twitter.com/iateyourmic"&gt;Adam Bennett&lt;/a&gt; told me that his team at Cuvva also had this discussion. Perhaps the simplest solution is to have a &lt;code&gt;data class&lt;/code&gt; with nullable fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;DataState&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This covers the only &lt;code&gt;Loading&lt;/code&gt;, only &lt;code&gt;Success&lt;/code&gt;, only &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Loading&lt;/code&gt; and &lt;code&gt;Success&lt;/code&gt;, and &lt;code&gt;Loading&lt;/code&gt; and &lt;code&gt;Error&lt;/code&gt; possibilities. It harkens back to the old Android architecture components samples' &lt;code&gt;Resource&amp;lt;T&amp;gt;&lt;/code&gt; &lt;a href="https://github.com/android/architecture-components-samples/blob/88747993139224a4bb6dbe985adf652d557de621/GithubBrowserSample/app/src/main/java/com/android/example/github/vo/Resource.kt"&gt;class&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Though, some &lt;a href="https://twitter.com/JorgeCastilloPr/status/1428731347888230402"&gt;argue&lt;/a&gt; that those State combinations should all be mutually exclusive &lt;code&gt;sealed class&lt;/code&gt;es, which is also a great approach that avoids the nullability issues. If &lt;code&gt;Loading&lt;/code&gt; is the only State that can coexist with other States, we can also just add a boolean field. &lt;/p&gt;

&lt;p&gt;Whichever way you go, you should make sure not to model any of your UI state as mutually exclusive of others unless it actually &lt;em&gt;is&lt;/em&gt; mutually exclusive of others. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swipe-to-refresh"&gt;
  &lt;/a&gt;
  Swipe To Refresh
&lt;/h2&gt;

&lt;p&gt;Swipe-to-refresh functionality is an extremely common UI element, and as such, it is available on Android's legacy View system in &lt;a href="https://developer.android.com/training/swipe/add-swipe-interface"&gt;SwipeRefreshLayout&lt;/a&gt;. The Compose equivalent isn't part of the core Compose UI, but there is a solid solution.&lt;/p&gt;

&lt;p&gt;To get this same functionality in Compose without implementing swipe-to-refresh yourself, you'll want to use &lt;a href="https://github.com/google/accompanist/tree/main/swiperefresh"&gt;Accompanist-SwipeRefresh&lt;/a&gt;, which is a Google library, but isn't officially part of Jetpack. You'll also need to make sure that any content inside the &lt;code&gt;SwipeRefresh&lt;/code&gt; Composable is scrollable. You may have to wrap some content in a &lt;code&gt;Column&lt;/code&gt; with a &lt;code&gt;verticalScroll&lt;/code&gt; modifier per the &lt;a href="https://google.github.io/accompanist/swiperefresh/"&gt;documentation&lt;/a&gt;. If you miss this step, you could emit a non-scrollable &lt;code&gt;Error&lt;/code&gt; state, and be unable to swipe to refresh again.&lt;/p&gt;

&lt;p&gt;Given its popularity, it seems a little strange that swipe-to-refresh isn't a core part of Compose. But this brings us to another way that Compose shines. Compose, and its 1st party associated libraries, are completely unbundled from the operating system. This means that Compose can run on any device running Android API &lt;a href="https://developer.android.com/jetpack/compose/interop/adding#anchor"&gt;21 (Lollipop) and newer&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transforming-flows"&gt;
  &lt;/a&gt;
  Transforming Flows
&lt;/h2&gt;

&lt;p&gt;Compose uses a &lt;a href="https://developer.android.com/jetpack/compose/state"&gt;special observable type&lt;/a&gt; to know when to update UI. In Compose, this is the &lt;code&gt;State&amp;lt;T&amp;gt;&lt;/code&gt; class. When &lt;code&gt;State&lt;/code&gt; changes, all &lt;code&gt;@Composable&lt;/code&gt; functions dependent on that &lt;code&gt;State&lt;/code&gt; are reinvoked, and emit the corresponding UI. By exposing data as &lt;code&gt;StateFlow&lt;/code&gt;s from our KMM module, we can use the &lt;code&gt;Flow&lt;/code&gt; extension function &lt;code&gt;collectAsState()&lt;/code&gt; and clean it up even more with delegate syntax. We want to collect the &lt;code&gt;Flow&lt;/code&gt; safely, avoiding collection when the view goes to the background, and restarting it when it comes back to the foreground. We'll use Manuel Vivo's &lt;a href="https://medium.com/androiddevelopers/a-safer-way-to-collect-flows-from-android-uis-23080b1f8bda#c5fd"&gt;post&lt;/a&gt;, "A safer way to collect flows from Android UIs" as a guide to create a lifecycle-aware &lt;code&gt;Flow&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;lifecycleOwner&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;LocalLifecycleOwner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;lifecycleAwareDogsFlow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breedStateFlow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;lifecycleOwner&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breedStateFlow&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flowWithLifecycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lifecycleOwner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lifecycle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dogsState&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;lifecycleAwareDogsFlow&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;collectAsState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;breedStateFlow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The delegate syntax is nice because we get best of &lt;code&gt;State&lt;/code&gt; and its backing data. Our &lt;code&gt;dogsState&lt;/code&gt; is actually not a &lt;code&gt;State&lt;/code&gt;, so we don't need to put &lt;code&gt;.value&lt;/code&gt; to get the value, but because it delegates its &lt;code&gt;get()&lt;/code&gt;s to a &lt;code&gt;State&lt;/code&gt;, &lt;code&gt;@Composable&lt;/code&gt; functions that take it as a parameter are still invoked whenever its value changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Jetpack Compose has been an exciting project to follow, and it's clear that it has a bright future for reactive and declarative UI. Updating to Compose has simplified KaMP Kit, and exposed a flaw in our previous state management approach, forcing us to become better developers. Our goal with the &lt;a href="https://github.com/touchlab/KaMPKit"&gt;KaMP Kit&lt;/a&gt; project is to give folks interested in Kotlin Multiplatform the easiest way to get started, and now that Compose is stable, it makes learning KMM easier than ever.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>compose</category>
      <category>android</category>
    </item>
    <item>
      <title>What is Firebase?</title>
      <author>Aswin Barath</author>
      <pubDate>Tue, 24 Aug 2021 16:38:13 +0000</pubDate>
      <link>https://dev.to/aswin2001barath/what-is-firebase-3f35</link>
      <guid>https://dev.to/aswin2001barath/what-is-firebase-3f35</guid>
      <description>&lt;p&gt;&lt;a href="https://aswinbarath.github.io/What-is-Firebase/"&gt;Originally posted here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us first understand how is a full-stack application built.&lt;br&gt;
A full-stack application consists of a front-end component and a back-end component.&lt;br&gt;
A front-end component is what we see, a user interface(UI).&lt;br&gt;
A back-end component communicates with the UI to send, receive, store and/or delete data.&lt;/p&gt;

&lt;p&gt;Firebase is &lt;strong&gt;Back-End as a Service (BaaS)&lt;/strong&gt;.&lt;br&gt;
Firebase gives you all the benefits of a back-end without the complexities of creating one up from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-firebase"&gt;
  &lt;/a&gt;
  Benefits of Firebase
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#reduce-development-time"&gt;
  &lt;/a&gt;
  Reduce Development Time
&lt;/h3&gt;

&lt;p&gt;Let's face it. We can get impatient when we want a full-stack application as soon as possible. With Firebase, you can cut down development time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;Firebase provides built-in security. If you configure it in the right way, your app will be a solid fortress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#highspeed-caching"&gt;
  &lt;/a&gt;
  High-Speed Caching
&lt;/h3&gt;

&lt;p&gt;Your app deployed using Firebase hosting gets cached on solid-state drives (SSD) throughout the world. Your app loading time will become extremely fast that also helps with SEO.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#realtime-data"&gt;
  &lt;/a&gt;
  Realtime Data
&lt;/h3&gt;

&lt;p&gt;Cloud Firestore database updates all connected clients in real-time. The ability to get real-time updates makes applications a lot easier to implement.&lt;/p&gt;

&lt;p&gt;Feel free to share if you found this useful üòÉ.&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>15 Useful VSCode shortcuts to improve productivity</title>
      <author>Shubham Khatri</author>
      <pubDate>Tue, 24 Aug 2021 16:20:43 +0000</pubDate>
      <link>https://dev.to/shubhamreacts/15-useful-vscode-shortcuts-to-improve-productivity-4akc</link>
      <guid>https://dev.to/shubhamreacts/15-useful-vscode-shortcuts-to-improve-productivity-4akc</guid>
      <description>&lt;p&gt;VSCode is one of the most popular editors for web development. When writing code, we often require certain formatting actions, and a lot of them are supported by VSCode itself. While most actions can be found from Menu options, having hands-on keyboard shortcuts can help improve your coding speed by a lot.&lt;/p&gt;

&lt;p&gt;Here is a list of some shortcuts that I have been using for a while and found to be really useful. &lt;/p&gt;

&lt;p&gt;Default shortcuts are for Mac, while shortcuts for Windows and Linux are mentioned below for each command &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-cmd-p-opens-the-palette-to-search-for-a-file"&gt;
  &lt;/a&gt;
  1. CMD + P: Opens the palette to search for a file
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + P)&lt;/p&gt;

&lt;p&gt;Navigating through files is one of the most common options and this command can come in pretty handy. You can type the name of the file in the search box and select the file by clicking or by pressing enter on the search result to open the file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cTCOXgfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxo3d2am76propqw6vl4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cTCOXgfa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxo3d2am76propqw6vl4.gif" alt="CMD+P"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-cmd-shift-l-add-cursors-to-all-matching-selections"&gt;
  &lt;/a&gt;
  2. CMD + SHIFT + L: Add cursors to all matching selections
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + SHIFT + L)&lt;/p&gt;

&lt;p&gt;One of my favorite features of VSCode is multi cursors. They allow you to replace text or append more text without copy-pasting or requiring you to change it one at a time. &lt;/p&gt;

&lt;p&gt;Using this command, you can add cursors to all matching selections in the document&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9KDF5lp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvaju2yhi84vprpnsytl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9KDF5lp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvaju2yhi84vprpnsytl.gif" alt="CMD+SHIFT+L"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-cmd-d-add-cursor-to-next-matching-selection"&gt;
  &lt;/a&gt;
  3. CMD + D: Add cursor to next matching selection
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + D)&lt;/p&gt;

&lt;p&gt;Like the above command, this is also used to add cursors but with this, you can add the cursor to the next matching selection. This is especially helpful when you don't want to select all occurrences together&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diGL3ajV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btp319vo48whuryb21k9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diGL3ajV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btp319vo48whuryb21k9.gif" alt="CMD+D"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-cmd-u-undo-last-cursor-operation"&gt;
  &lt;/a&gt;
  4.  CMD + U: Undo last cursor operation
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + U)&lt;/p&gt;

&lt;p&gt;If you need to undo cursor selection in a case where you selected more cursors than required or reset the cursor to a previous position, you can use this command to undo the last cursor action&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0OI5Zdp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l57879ascz6drk6rhsrl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0OI5Zdp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l57879ascz6drk6rhsrl.gif" alt="CMD+U"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-cmd-l-select-current-line"&gt;
  &lt;/a&gt;
  5. CMD + L: Select current line.
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + L)&lt;/p&gt;

&lt;p&gt;Often we use mouse drag to select the text, but if we want to select entire lines, we can use this command &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0e5cfa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z09oof6f5oupytbnx18.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0e5cfa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z09oof6f5oupytbnx18.gif" alt="CMD+L"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-ctrl-g-go-to-a-specific-line"&gt;
  &lt;/a&gt;
  6. CTRL + G: Go to a specific line
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + G)&lt;/p&gt;

&lt;p&gt;We can navigate to a specific line of the document by using this simple command and typing the line number. &lt;/p&gt;

&lt;p&gt;This is especially helpful in situations when error stack traces provide us the line number of the file and our file is large.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFbXfmRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/673j1pskcne0zc7sgp5g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFbXfmRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/673j1pskcne0zc7sgp5g.gif" alt="CTRL+G"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-cmd-k-w-close-all-open-editor-tabs"&gt;
  &lt;/a&gt;
  7. CMD + K + W: Close all open editor tabs
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + K + W)&lt;/p&gt;

&lt;p&gt;This command is useful when we want to clear all tabs. &lt;/p&gt;

&lt;p&gt;Often while debugging or developing, I have opened many tabs and when I want to change the context or start fresh, this command comes in very handy&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbrLzFHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtdwxtdan9ik48jrkrk2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbrLzFHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtdwxtdan9ik48jrkrk2.gif" alt="CMD+K+W"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-shift-option-a-toggle-block-comment"&gt;
  &lt;/a&gt;
  8. SHIFT + OPTION + A : Toggle  block comment
&lt;/h3&gt;

&lt;p&gt;(Windows: SHIFT + ALT + A, Linux: CTRL+SHIFT+A)&lt;/p&gt;

&lt;p&gt;This shortcut also allows us to add a new block comment or toggle existing ones.&lt;/p&gt;

&lt;p&gt;We enclose a piece of Javascript code with &lt;code&gt;/* */&lt;/code&gt;  to add a block comment. However, with this shortcut, we can add or remove a block comment for the selected code block or add new ones.  &lt;/p&gt;

&lt;p&gt;Line comments can be toggled with &lt;code&gt;CMD + / (Windows/Linux: CTRL + /)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--klhXakvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d0o7o7bd56dub5cf25s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--klhXakvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d0o7o7bd56dub5cf25s.gif" alt="SHIFT+ALT+A"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-cmd-option-fold-code-block"&gt;
  &lt;/a&gt;
  9. CMD + OPTION + [ : Fold code block
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL + SHIFT + [ )&lt;/p&gt;

&lt;p&gt;This command is especially useful when we want to focus on a specific area of the code and hence ignore some code blocks. This folds the block closest to the cursor. &lt;/p&gt;

&lt;p&gt;You can unfold the code block with &lt;code&gt;CMD + OPTION + ] (Windows/Linux: CTRL + SHIFT + ] )&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wjlZCUyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7l30kgftqjwmhhyo735.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wjlZCUyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7l30kgftqjwmhhyo735.gif" alt="CMD+OPTION+Bracket"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-option-updown-move-line-up-or-down"&gt;
  &lt;/a&gt;
  10. OPTION + UP/DOWN : Move line up or down
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: ALT + UP/DOWN)&lt;/p&gt;

&lt;p&gt;When you want to move a piece of code, for example, a variable declaration either up or down, you cut and paste it to the appropriate place but if the readjustment is for a few lines you can use this command to move the current line/selection up or down&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RwcwivLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2he2n3sv0u2fp03kwx5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwcwivLM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g2he2n3sv0u2fp03kwx5.gif" alt="ALT+UP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-ctrl-raw-open-integrated-terminal"&gt;
  &lt;/a&gt;
  11. CTRL + ` : Open integrated terminal
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL+ `)&lt;/p&gt;

&lt;p&gt;One of the most amazing features of VSCode is that it supports an integrated terminal which you can use just like a normal terminal and to run code or perform other operations. This command helps you open the terminal when you need it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNZ_lWgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iftjbtlqz8wec862078p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNZ_lWgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iftjbtlqz8wec862078p.gif" alt="CTRL+BackTick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-cmd-split-editor-view"&gt;
  &lt;/a&gt;
  12. CMD + \ : Split editor view
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL+)&lt;/p&gt;

&lt;p&gt;You can split your editor view to open multiple files together. &lt;/p&gt;

&lt;p&gt;This is especially helpful when you want to refer to content from a file while coding in another.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BL26CsYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ztr68zghaqmih1siaal.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BL26CsYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ztr68zghaqmih1siaal.gif" alt="CMD+backslash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-shift-option-f-format-document"&gt;
  &lt;/a&gt;
  13. SHIFT + OPTION + F : Format document
&lt;/h3&gt;

&lt;p&gt;(Windows: SHIFT+ALT+F, Linux: CTRL+SHIFT+I)&lt;/p&gt;

&lt;p&gt;Often we have extensions enabled or settings configured to format documents on save but sometimes we like to control when we want to format the document. This is where this command comes in. &lt;/p&gt;

&lt;p&gt;It allows us to format the current document according to the configured settings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v9_91UCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwmne9b9dlprk36l3suc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v9_91UCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwmne9b9dlprk36l3suc.gif" alt="SHIFT+ALT+F"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-option-shift-up-down-duplicate-selection-up-or-down"&gt;
  &lt;/a&gt;
  14. OPTION + SHIFT + UP / DOWN : Duplicate selection up or down
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: SHIFT+ALT+UP/DOWN)&lt;/p&gt;

&lt;p&gt;Using this command you can duplicate the selected code either above or below the current code.&lt;/p&gt;

&lt;p&gt;I love to use this when some functions are almost identical except for some small changes which I make after duplicating the previous implementation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnqjZZA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j692xc8232oqm77b32c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnqjZZA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j692xc8232oqm77b32c.gif" alt="SHIFT+ALT+UP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-cmd-b-toggle-sidebar"&gt;
  &lt;/a&gt;
  15. CMD + B: Toggle Sidebar
&lt;/h3&gt;

&lt;p&gt;(Windows/Linux: CTRL+B)&lt;/p&gt;

&lt;p&gt;You can use this command to toggle the sidebar to make more space for your file view as and when needed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGHsLv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iicj04v50q5joc2dx8o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGHsLv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iicj04v50q5joc2dx8o.gif" alt="CMD+B"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#cherry-on-the-cake"&gt;
  &lt;/a&gt;
  Cherry on the cake
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;code .&lt;/code&gt; :  Open VSCode from the terminal&lt;/p&gt;

&lt;p&gt;Although this isn't a keyboard shortcut, it is extremely useful when you are working with the terminal and want to open a directory in VSCode&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uugoiilV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4n4wdhaex44s2j6qjop.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uugoiilV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4n4wdhaex44s2j6qjop.gif" alt="CMD+D"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. If this isn't configured yet, you can do so from VSCode by open command palette with &lt;code&gt;CMD+SHIFT+P&lt;/code&gt; and type in &lt;code&gt;shell&lt;/code&gt; and then select &lt;code&gt;Shell Command: Install 'code' command in PATH&lt;/code&gt; from the options.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;In this article, I covered some of the common, uncommon, and useful shortcuts. &lt;/p&gt;

&lt;p&gt;There are other shortcuts too which are useful like &lt;code&gt;CMD+SHIFT+F&lt;/code&gt; for search, &lt;code&gt;CMD+SHIFT+P&lt;/code&gt; for showing command palette, &lt;code&gt;CMD+/&lt;/code&gt; for toggling line comment, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you found this article helpful, do like and share this with your colleagues and friends. If you have any suggestions, please feel free to add them in the comments.&lt;/p&gt;

&lt;p&gt;I also share tips and tricks related to web development with Javascript and React on &lt;a href="https://twitter.com/ShubhamReacts"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Come say hi üëã . Let us connect üòÅ&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to create a Twitter Bot using Python and Tweepy (Quick and Easy)</title>
      <author>Fernando Groders</author>
      <pubDate>Tue, 24 Aug 2021 16:18:10 +0000</pubDate>
      <link>https://dev.to/fegroders/how-to-create-a-twitter-bot-using-python-and-tweepy-quick-and-easy-p1b</link>
      <guid>https://dev.to/fegroders/how-to-create-a-twitter-bot-using-python-and-tweepy-quick-and-easy-p1b</guid>
      <description>&lt;p&gt;Hey guys, today you are going to learn how to develop a &lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt; bot using Python and a library called &lt;a href="https://www.tweepy.org"&gt;Tweepy&lt;/a&gt;.&lt;br&gt;
Founded in March 2006, Twitter is available in 40 languages and has about 335 million active users per month. Offering users a space for conversation and to share written content, photos and videos, Twitter is one of the most famous social networks. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;Getting your API keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;Install Tweepy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;Authenticate your App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-4"&gt;Example Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-5"&gt;Inspiring Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#getting-your-api-keys-on-twitter-for-developers"&gt;
  &lt;/a&gt;
  Getting your API keys on Twitter for Developers &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First of all, to connect your bot with your Twitter account, you need to use the Twitter API. To get your API keys you need a Twitter account. If you don't have one you can create &lt;a href="https://twitter.com/i/flow/signup"&gt;here&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DhNpe0w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrqtyv2nc50dgazab7tr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DhNpe0w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrqtyv2nc50dgazab7tr.png" alt="Create an Account"&gt;&lt;/a&gt;&lt;br&gt;
Now you will get the access to &lt;a href="https://developer.twitter.com/en"&gt;Twitter for Developers&lt;/a&gt;. After accessing it, click on Developer Portal. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xP8_U0kZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4i2s8klnq9l70pbj91rd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xP8_U0kZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4i2s8klnq9l70pbj91rd.png" alt="Click on Developer Portal"&gt;&lt;/a&gt;&lt;br&gt;
Complete your app‚Äôs registration by answering the form.  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDpXNelF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpz4qlm8dc3wv4uv34i2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDpXNelF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpz4qlm8dc3wv4uv34i2.png" alt="Create your app"&gt;&lt;/a&gt;&lt;br&gt;
After that, go to Projects &amp;amp; Apps -&amp;gt; Your App -&amp;gt; Edit app permissions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_lMeW-nI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnbq31vt6v6bo0sen3ic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_lMeW-nI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnbq31vt6v6bo0sen3ic.png" alt="Edit app permissions"&gt;&lt;/a&gt;&lt;br&gt;
Here you can find  your app permissions and the API keys. After generating the credentials, save them to later use in your code. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZDmT3_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jimbw02t965g39754e7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZDmT3_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jimbw02t965g39754e7.png" alt="Get the API keys"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-tweepy"&gt;
  &lt;/a&gt;
  Install Tweepy &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before start coding, you need to install the library that we are going to use. The easiest way to install it is using &lt;a href="https://pypi.org/project/pip/"&gt;PIP&lt;/a&gt;. (If you don't have PIP installed, &lt;a href="https://pip.pypa.io/en/stable/installation/"&gt;Click here&lt;/a&gt;. In your CMD:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Install Tweepy&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;tweepy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#authenticate-your-app"&gt;
  &lt;/a&gt;
  Authenticate your App &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now it's time to start the fun part, coding. First of all create a file called "twitter.py". Open it in your IDE and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import Tweepy
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;

&lt;span class="c1"&gt;# Change with your API keys
&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'API_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;API_KEY_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'API_KEY_SECRET'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ACCESS_TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ACCESS_SECRET'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Connect with the API
&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;API_KEY_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_on_rate_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_on_rate_limit_notify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add your code 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, now you have the basic to create a functional bot, but I will give you an example of a bot that answer ‚Äú@user Hello World‚Äù when somebody mention him. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-bot"&gt;
  &lt;/a&gt;
  Example Bot &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After doing the previous steps, you will need a function to save the last ID answered by the bot. Create a file called "lastId.txt" and put "1" inside without the quotation marks. Then add this code in your twitter.py file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'lastId.txt'&lt;/span&gt;
&lt;span class="c1"&gt;# Function to save the last id answered on ./lastId.txt
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;saveLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;f_write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;f_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have a function to save the ID, you need one to read what your bot saved or it will answer always the same tweet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Function to read the last id that is saved on ./lastId.txt
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;readLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;f_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;ultimo_id_lido&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;f_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ultimo_id_lido&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we will create a function to answer the tweets&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Function to answer a mention
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BOT WORKING...'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lastId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Get the last ID
&lt;/span&gt;    &lt;span class="n"&gt;mentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mentions_timeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'extended'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Get all mentions since the last ID
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mentions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Reads the mentions in reverse order
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'@youruser'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;# Verifies if your bot was mentioned 
&lt;/span&gt;            &lt;span class="n"&gt;lastId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' - '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Prints the mention
&lt;/span&gt;            &lt;span class="n"&gt;saveLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Save the last id 
&lt;/span&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Answering tweet'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Hello @{}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Message to be sent
&lt;/span&gt;            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in_reply_to_status_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Reply to the mention
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to finish the code, we will add a loop to make the bot work every 30 seconds. As we are using "time", then we need to add the import on the top of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the last line of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Loop that runs the bot every 30 seconds
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the final file would be something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import Tweepy
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# Change with your API keys
&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'API_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;API_KEY_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'API_KEY_SECRET'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ACCESS_TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ACCESS_SECRET'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Connect with the API
&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;API_KEY_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_on_rate_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_on_rate_limit_notify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'lastId.txt'&lt;/span&gt;
&lt;span class="c1"&gt;# Function to save the last id answered on ./lastId.txt
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;saveLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;f_write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;f_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="c1"&gt;# Function to read the last id that is saved on ./lastId.txt
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;readLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;f_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;ultimo_id_lido&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;f_read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ultimo_id_lido&lt;/span&gt;

&lt;span class="c1"&gt;# Function to answer a mention
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BOT WORKING...'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lastId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Get the last ID
&lt;/span&gt;    &lt;span class="n"&gt;mentions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mentions_timeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'extended'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Get all mentions since the last ID
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mentions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Reads the mentions in reverse order
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'@youruser'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;# Verifies if your bot was mentioned 
&lt;/span&gt;            &lt;span class="n"&gt;lastId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' - '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;full_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Prints the mention
&lt;/span&gt;            &lt;span class="n"&gt;saveLastId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#Save the last id 
&lt;/span&gt;            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Answering tweet'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Hello @{}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;screen_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Message to be sent
&lt;/span&gt;            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in_reply_to_status_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mention&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Reply to the mention
&lt;/span&gt;
&lt;span class="c1"&gt;#Loop that runs the bot every 30 seconds
&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you just need to run the file ‚ÄúTwitter.py‚Äù and your bot will start working. If you want you can create a .exe and make it work in second plan. But this will become another tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiring-examples"&gt;
  &lt;/a&gt;
  Inspiring Examples &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Of course this is a very simple example of a bot, but you can create very advanced bots using Tweepy. If you want to read all the possibilities, you can read Tweepy's documentation &lt;a href="https://docs.tweepy.org/en/stable/index.html"&gt;here&lt;/a&gt;. Now it's time to be creative and create bots. If you are not a creative person here are some examples of Twitter bots to inspire you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/DizUmFilme"&gt;Dizumfilme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/bot_philosopher"&gt;Philosopher BOT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/DownloaderBot"&gt;Video Downloader Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/cleverbot"&gt;CleverBot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/cmsn_ART"&gt;Art Commission Bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you are ready to create AWESOME Twitter bots. The next step is upload your bot and run it on Cloud, but this is a topic that will become another article.&lt;br&gt;
If you have any doubts, you can contact me here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fegroders.github.io"&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/fernandogroders"&gt;LinkedIn&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://instagram.com/fegroders"&gt;Instagram&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading, if you like it and learned something, like the post, comment and share with others developers! :D&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>twitter</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Terraform Associate Certification: Conditional Expression &amp; Local values</title>
      <author>Daniel Huerta</author>
      <pubDate>Tue, 24 Aug 2021 16:02:09 +0000</pubDate>
      <link>https://dev.to/danihuerta/terraform-associate-certification-conditional-expression-local-values-3e9p</link>
      <guid>https://dev.to/danihuerta/terraform-associate-certification-conditional-expression-local-values-3e9p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#conditional-expression"&gt;
  &lt;/a&gt;
  Conditional Expression
&lt;/h2&gt;

&lt;p&gt;If you have programmed in other languages such as C or Javascript you may know the &lt;em&gt;ternary operator&lt;/em&gt;. Well, in Terraform you can use it as well and it is nothing but a conditional expression that uses the value of a bool expression to select one of two values.&lt;/p&gt;

&lt;p&gt;The syntax of it is as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;condition ? True_value : False_value&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If condition is true, then the returned value will be True_value, otherwise will be False_value.&lt;/p&gt;

&lt;p&gt;Let's see an example of this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ro_Zx8uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfsoqyoxnyt1td4mao2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ro_Zx8uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfsoqyoxnyt1td4mao2i.png" alt="Screen Shot 2021-08-24 at 10.47.55"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, the amount of aws_instances will be created according to the value of the bool variable named &lt;em&gt;istest&lt;/em&gt;. As you can see in the image, this value is set to false so only one &lt;em&gt;aws_instance.prod will be created&lt;/em&gt; üòâ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#local-values"&gt;
  &lt;/a&gt;
  Local Values
&lt;/h2&gt;

&lt;p&gt;A local value assigns a name to an expression, allowing it to be used multiple times within a module without repeating it.&lt;br&gt;
Let's see an example to understand this better, in the next image you will see that I created a set of tags within a &lt;strong&gt;locals block&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91Ht2irX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqiwjp9gw6zkwvulxibj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91Ht2irX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqiwjp9gw6zkwvulxibj.png" alt="Screen Shot 2021-08-24 at 10.57.19"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm using these tags inside two different resource blocks but I'm not typing every tag on it, that's the advantage of the local values. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#local-values-support-for-expression"&gt;
  &lt;/a&gt;
  Local values support for expression
&lt;/h3&gt;

&lt;p&gt;Local values can be used for multiple different use-cases like having a conditional expression.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--geAWgf1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eipg07kk3ipwy8f5t635.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--geAWgf1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eipg07kk3ipwy8f5t635.png" alt="Screen Shot 2021-08-24 at 10.58.47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Use local values only in moderation, in situations where a single value or result is used in many places and that value is likely to be changed in future&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>cloud</category>
      <category>aws</category>
      <category>devops</category>
    </item>
    <item>
      <title>Laravel for Beginners : a Quick Guide - 8</title>
      <author>Kartik Bhat</author>
      <pubDate>Tue, 24 Aug 2021 15:55:42 +0000</pubDate>
      <link>https://dev.to/kartikbhat/laravel-for-beginners-a-quick-guide-8-2na1</link>
      <guid>https://dev.to/kartikbhat/laravel-for-beginners-a-quick-guide-8-2na1</guid>
      <description>&lt;h3&gt;
  &lt;a href="#laravel-routes"&gt;
  &lt;/a&gt;
  Laravel Routes
&lt;/h3&gt;

&lt;p&gt;I hope you understood the concept of adding data from user interface and receiving it response back to user interface,&lt;/p&gt;

&lt;p&gt;Let's revisit concept of 'routes'...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;what is 'route' ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;simply, route is a key word that connects user interface to the backend - Controller;  :)&lt;/p&gt;

&lt;p&gt;Ok in my previous articles you saw these kinds of routes ;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;right ?&lt;/p&gt;

&lt;p&gt;(revisit web.php file and verify it once)&lt;/p&gt;

&lt;p&gt;this will connect to addData() function present under DataController Class, correct ?&lt;/p&gt;

&lt;p&gt;Hope you observed that you are using &lt;strong&gt;Route&lt;/strong&gt; Object to define new route ;&lt;/p&gt;

&lt;p&gt;this &lt;strong&gt;Route&lt;/strong&gt; object is actually defined under this class (you can notice this at the top section of the file align with &lt;em&gt;use&lt;/em&gt; keyword)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Illuminate\Support\Facades\Route;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then after that you observe key word &lt;strong&gt;get&lt;/strong&gt;; it is nothing but HTTP method; yes exactly,&lt;/p&gt;

&lt;p&gt;it will catch a type of request using a HTTP method that you used while calling that route,&lt;/p&gt;

&lt;p&gt;HTTP method is a way request rises to the application's backend ;&lt;/p&gt;

&lt;p&gt;What are different types of HTTP methods ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;PATCH&lt;/li&gt;
&lt;li&gt;DELETE &lt;/li&gt;
&lt;li&gt;OPTIONS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;for a time being lets concentrate on GET and POST methods only, and these are the methods we frequently use in our laravel applications.&lt;/p&gt;

&lt;p&gt;Laravel support all these kinds of methods; like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::post('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::put('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::patch('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::delete('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::options('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;along with above mentioned HTTP method routes laravel also provides another route type, it is &lt;strong&gt;any&lt;/strong&gt; , it catches any kind of HTTP method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::any('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mistyped-routesrequests"&gt;
  &lt;/a&gt;
  Mistyped routes/requests
&lt;/h3&gt;

&lt;p&gt;laravel matches incoming requests HTTP method first, then it finds suitable route in web.php file, if it found then control moves to controller's method; else you can observe 404 page&lt;/p&gt;

&lt;p&gt;let try this,&lt;br&gt;
You know we have a route called,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('addData', [DataController::class,'addData']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;hit this route from browser; (hope you are running laravel app)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://127.0.0.1:8000/addData"&gt;http://127.0.0.1:8000/addData&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;you can observe this &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0LH9XG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp0o6g7hjc8m4evwrobd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0LH9XG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp0o6g7hjc8m4evwrobd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;right ? &lt;/p&gt;

&lt;p&gt;now just alter keyword &lt;strong&gt;addData&lt;/strong&gt; to &lt;strong&gt;addData--1&lt;/strong&gt; present in the url; Ok&lt;/p&gt;

&lt;p&gt;now hit that url again;&lt;br&gt;
(Do verify that we don't have any route defined called &lt;strong&gt;addData--1&lt;/strong&gt; in our web.php file)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://127.0.0.1:8000/addData--1"&gt;http://127.0.0.1:8000/addData--1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;since we don't have any such route; laravel manages to load 404 page;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XujLWspo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjdmwqbro2z5hlww7mv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XujLWspo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjdmwqbro2z5hlww7mv1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, no need to worry about mistyped routes/requests from browser, laravel manages it by itself, seems interesting right ? :)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#routes-and-form-submit"&gt;
  &lt;/a&gt;
  Routes and Form submit
&lt;/h3&gt;

&lt;p&gt;whenever the form submit happens, some that will be passed to the backend from our user interface(say frontend), right ?&lt;/p&gt;

&lt;p&gt;Open &lt;strong&gt;addData.blade.php&lt;/strong&gt; file located under resources-&amp;gt;views folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;h3&amp;gt;Add Data&amp;lt;/h3&amp;gt;
            &amp;lt;form method="GET" action="{{ url('saveFormData') }}"&amp;gt;
                &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="name" /&amp;gt;
                &amp;lt;label&amp;gt;Age&amp;lt;/label&amp;gt;
                &amp;lt;input type="number" name="age" /&amp;gt;
                &amp;lt;button type="submit"&amp;gt;Save&amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can observe &lt;strong&gt;method&lt;/strong&gt; and &lt;strong&gt;action&lt;/strong&gt; mentioned with form element&lt;/p&gt;

&lt;p&gt;method - GET&lt;br&gt;
action - route saveFormData&lt;/p&gt;

&lt;p&gt;here form is submitting data to the route &lt;strong&gt;saveFormData&lt;/strong&gt; via GET http method; you know it I suppose :)&lt;/p&gt;

&lt;p&gt;Now open &lt;strong&gt;DataController&lt;/strong&gt; class and go to the function returned by 'saveFormData' route; it is &lt;strong&gt;saveForm()&lt;/strong&gt;, add dd() of $request after entering the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function saveForm(Request $request) {
        dd($request);
        $data = [
            'name' =&amp;gt; $request-&amp;gt;name,
            'age' =&amp;gt; $request-&amp;gt;age
        ];
        $insertData = Data::create($data);

        if(isset($insertData['id'])) {
            $message = "Success";
        } else {
            $message = "Failed";
        }

        $response = [
            'message'=&amp;gt;$message
        ];

        return view('response',$response);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, then hit the route 'addData' from your browser;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#http1270018000adddata"&gt;
  &lt;/a&gt;
  &lt;a href="http://127.0.0.1:8000/addData"&gt;http://127.0.0.1:8000/addData&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;then fill the form and submit;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X6wFA0m6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvzvn2fvfrxz5t6m7c33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6wFA0m6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvzvn2fvfrxz5t6m7c33.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see this window right ?&lt;br&gt;
Now,, just observe URL bar;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sji6YK6O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ypv8rz7gdzhbxql658.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sji6YK6O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ypv8rz7gdzhbxql658.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you can see those form input data; those are passing as a url parameters to the backend(Controller); right ?&lt;/p&gt;

&lt;p&gt;now, lets change form method from &lt;strong&gt;GET&lt;/strong&gt; to &lt;strong&gt;POST&lt;/strong&gt; present in the file addData.blade.php&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form method="POST" action="{{ url('saveFormData') }}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, hit the &lt;strong&gt;addData&lt;/strong&gt; route and fill the form ; then submit.&lt;/p&gt;

&lt;p&gt;What you are seeing ?&lt;/p&gt;

&lt;p&gt;this error right ?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1Ykoz3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdpd34x82pftvydoscak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1Ykoz3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdpd34x82pftvydoscak.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why ?&lt;/p&gt;

&lt;p&gt;Observe web.php file; there is no route with a method post having keyword 'saveFormData' ; Observed ?&lt;/p&gt;

&lt;p&gt;what you got ?&lt;br&gt;
route catches an http method that request is coming from; through form you are sending data through POST method for 'saveFormData'  route; it actually doesn't exist;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('saveFormData', [DataController::class,'saveForm']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it is a &lt;strong&gt;get&lt;/strong&gt; route with a key word 'saveFormData' , it doesn't catches request with POST method; then how to catch it ?&lt;/p&gt;

&lt;p&gt;Simple, create a similar route with &lt;strong&gt;post&lt;/strong&gt; method; like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::post('saveFormData', [DataController::class,'saveForm']);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that too returning same controller's same method; no issues.&lt;/p&gt;

&lt;p&gt;now again hit the url : ####&lt;a href="http://127.0.0.1:8000/addData####"&gt;http://127.0.0.1:8000/addData####&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and fill the form and submit again;&lt;/p&gt;

&lt;p&gt;what you are seeing now ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAn-nJEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq4fh54gsrxm64m9quv9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAn-nJEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sq4fh54gsrxm64m9quv9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you are seeing dd() response of $request; right ?&lt;/p&gt;

&lt;p&gt;Observe URL bar now; there is no url parameters exist but still Controller is receiving form data; right ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYNTKKsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cjlfmbzj13ihfuzf50o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYNTKKsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cjlfmbzj13ihfuzf50o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what the main difference between GET and POST http methods :)&lt;/p&gt;

&lt;p&gt;POST method doesn't shows form submitted data as an URL parameters where as GET method clearly shows;&lt;/p&gt;

&lt;p&gt;There is a limitation of data length that can be passed through GET method, where POST method hasn't any such;&lt;/p&gt;

&lt;p&gt;Even though both the method has there own features; primarily we can prefer form data should be submitted through POST method, a secure approach we believe;&lt;/p&gt;

&lt;p&gt;While sending FORM data through POST we need add another constraint to the form i.e CSRF token (Cross-Site Request Forgery)&lt;br&gt;
is a way our application identifies that request is coming / data is submitting from known/authenticated source, Laravel automatically generates this CSRF token and just we need to add it within our form element&lt;/p&gt;

&lt;p&gt;within form element of the addData blade file we just need to mention&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@csrf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;h3&amp;gt;Add Data&amp;lt;/h3&amp;gt;
            &amp;lt;form method="POST" action="{{ url('saveFormData') }}"&amp;gt;
                @csrf
                &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt;
                &amp;lt;input type="text" name="name" /&amp;gt;
                &amp;lt;label&amp;gt;Age&amp;lt;/label&amp;gt;
                &amp;lt;input type="number" name="age" /&amp;gt;
                &amp;lt;button type="submit"&amp;gt;Save&amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it will be automatically verified by laravel while receiving the request at backend;&lt;/p&gt;

&lt;p&gt;this is all about brief explanation on Laravel Routes; Hope you understood about it;&lt;/p&gt;

&lt;p&gt;Bye ;)&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>mvc</category>
    </item>
    <item>
      <title>When You Merge Pull Requests You Lose Knowledge</title>
      <author>Marcelo Sousa</author>
      <pubDate>Tue, 24 Aug 2021 15:33:30 +0000</pubDate>
      <link>https://dev.to/reviewpad/when-you-merge-pull-requests-you-lose-knowledge-194p</link>
      <guid>https://dev.to/reviewpad/when-you-merge-pull-requests-you-lose-knowledge-194p</guid>
      <description>&lt;p&gt;&lt;em&gt;What happens to comments and discussions of a pull request when it is merged? Isn‚Äôt that knowledge valuable for the team? Why isn‚Äôt it readily accessible to future pull requests?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pull requests (PRs) are a mainstream way of proposing changes to a codebase. One of the most important features around pull requests is the ability to perform a code review, allowing developers to inspect and comment on the proposed changes.&lt;/p&gt;

&lt;p&gt;Frequently, the knowledge in these comments is invaluable to the team. Reviewers, which are familiar with the codebase and related technologies, will notice bad patterns, suggest optimisations, enforce team guidelines and best practices, etc.&lt;/p&gt;

&lt;p&gt;However, as soon as you merge that pull request on GitHub, Gitlab, or Bitbucket, all this information is &lt;em&gt;lost&lt;/em&gt; into the bag of closed PRs that you will rarely (if ever) inspect.&lt;/p&gt;

&lt;p&gt;We all have had that d√©&lt;em&gt;j√† vu&lt;/em&gt; feeling when writing a comment in a code review: ‚ÄúDidn‚Äôt I write this comment already?‚Äù When preparing a PR sometimes we also have that feeling: ‚ÄúI think I‚Äôm forgetting something in this line of code.‚Äù Or better yet: ‚ÄúDidn‚Äôt someone already thought of this before?‚Äù&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at three scenarios.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-knowledge-useful-to-a-broader-audience"&gt;
  &lt;/a&gt;
  1. Knowledge useful to a broader audience
&lt;/h4&gt;

&lt;p&gt;Knowledge that could be beneficial to developers not involved in this codebase. For instance, &lt;a href="https://github.com/apache/superset/pull/14710#discussion_r637929403"&gt;this comment&lt;/a&gt; could be useful for other developers modifying similar code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWe4ozaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at6xrzdnuh1t2h2xu90i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWe4ozaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at6xrzdnuh1t2h2xu90i.png" alt="Discussions useful in the future"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://github.com/apache/superset/pull/14710#discussion_r637929403"&gt;Discussion&lt;/a&gt;&lt;em&gt;¬†by¬†&lt;/em&gt;&lt;a href="https://github.com/kgabryje"&gt;kgabryje&lt;/a&gt;&lt;em&gt;¬†at¬†&lt;/em&gt;&lt;a href="https://github.com/apache/superset"&gt;apache / superset&lt;/a&gt;&lt;em&gt;¬†‚Äú&lt;/em&gt;&lt;a href="https://github.com/apache/superset/pull/14710"&gt;feat(native-filters): add search all filter options #14710&lt;/a&gt;‚Äú



&lt;h4&gt;
  &lt;a href="#2-knowledge-about-design-decisions"&gt;
  &lt;/a&gt;
  2. Knowledge about design decisions
&lt;/h4&gt;

&lt;p&gt;Teams with a lot of contributors can suffer from problems associated with the lack of context in design decisions. For instance, when a decision was taken on a discussion on a previous pull request. Consider the following discussion:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iap_0sSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k8ih0g0glzg1tc3ic04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iap_0sSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6k8ih0g0glzg1tc3ic04.png" alt="Useful knowledge about design decisions in discussions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://github.com/dapr/dapr/pull/3297#discussion_r665609722"&gt;Discussion&lt;/a&gt;&lt;em&gt;¬†with¬†&lt;/em&gt;&lt;a href="https://github.com/halspang"&gt;halspang&lt;/a&gt;&lt;em&gt;¬†and¬†&lt;/em&gt;&lt;a href="https://github.com/artursouza"&gt;artursouza&lt;/a&gt;&lt;em&gt;¬†at¬†&lt;/em&gt;&lt;a href="https://github.com/dapr/dapr"&gt;dapr / dapr&lt;/a&gt;&lt;em&gt;¬†‚Äú&lt;/em&gt;&lt;a href="https://github.com/dapr/dapr/pull/3297"&gt;Write reminders in multiple partitions #3297&lt;/a&gt;&lt;em&gt;‚Äú&lt;/em&gt;



&lt;p&gt;Assuming that this PR is merged, when someone else modifies this code in the future, it would be useful to retrieve this discussion. In this case, that would be particularly relevant if this person starts the support for a decrementing path.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-review-d%C3%A9j%C3%A0-vu"&gt;
  &lt;/a&gt;
  3. Review d√©j√† vu
&lt;/h4&gt;

&lt;p&gt;Senior developers that are active reviewers also experience what we call review d√©j√† vus. These are situations where you are repeating similar comments in different PRs, like this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4Fs4uod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc7wccblup0rzmnal1n8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4Fs4uod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc7wccblup0rzmnal1n8.png" alt="Review dej√° v√π in discussions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://github.com/nim-lang/Nim/pull/16203#discussion_r534435743"&gt;Comment&lt;/a&gt;&lt;em&gt;¬†by¬†&lt;/em&gt;&lt;a href="https://github.com/timotheecour"&gt;timotheecour&lt;/a&gt;&lt;em&gt;¬†at¬†&lt;/em&gt;&lt;a href="https://github.com/nim-lang/Nim"&gt;nim-lang / Nim&lt;/a&gt;&lt;em&gt;¬†‚Äú&lt;/em&gt;&lt;a href="https://github.com/nim-lang/Nim/pull/16203"&gt;oids: switch from PRNG to random module #16203&lt;/a&gt;&lt;em&gt;‚Äú&lt;/em&gt;





&lt;p&gt;These situations also occur when there are some hidden assumptions that do not make sense to document in the code.&lt;/p&gt;

&lt;p&gt;Wouldn‚Äôt it be nice if we could re-use the comments from past reviews into future PRs without having to maintain them?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#enter-reviewpad" class="anchor"&gt;
  &lt;/a&gt;
  Enter Reviewpad
&lt;/h3&gt;

&lt;p&gt;Reviewpad builds semantic diffs of changes in pull requests and associates metadata such as comments to these semantic objects. This is a big shift from the current behavior of existing code hosts such as Github, Gitlab, and Bitbucket. They associate comments to a line of a file in a particular git diff ‚Äì as soon as the contents of the line change, this comment is marked as &lt;em&gt;outdated&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We‚Äôll showcase Reviewpad with the &lt;em&gt;&lt;a href="https://tour.golang.org/concurrency/10"&gt;Web Crawler&lt;/a&gt;&lt;/em&gt; exercise of A Tour of Go using the linked &lt;a href="https://github.com/reviewpad/dejavus"&gt;GitHub repository&lt;/a&gt;. In this exercise of A Tour of Go, we are given a first implementation of a fake web crawler ‚Äì the exercise is to parallelise it and prevent fetching the same URL twice.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#semantic-git-diffs" class="anchor"&gt;
  &lt;/a&gt;
  Semantic git diffs
&lt;/h4&gt;

&lt;p&gt;As a first step, we used &lt;a href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/2"&gt;Reviewpad&lt;/a&gt; to create a pull request with this first implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f6XpQy14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e226jgeda6o3ggq0bpqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f6XpQy14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e226jgeda6o3ggq0bpqi.png" alt="Reviewpad screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
Reviewpad interface for &lt;a rel="noreferrer noopener" href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/2"&gt;pull request&lt;/a&gt; after review and merge



&lt;p&gt;Reviewpad performs a relational static analysis (in the style of &lt;a href="#1"&gt;[1]&lt;/a&gt; and &lt;a href="#2"&gt;[2]&lt;/a&gt;) over the git diff associated with the pull request to build semantic diffs. These semantic diffs form what we call the &lt;strong&gt;Explore Tree&lt;/strong&gt; in Reviewpad.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSVtVhuQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7jzqmaws5rryw9ox9be.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSVtVhuQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7jzqmaws5rryw9ox9be.png" alt="Reviewpad symbol tree"&gt;&lt;/a&gt;&lt;/p&gt;
Explore tree for &lt;a href="https://github.com/reviewpad/dejavus/pull/2" rel="noreferrer noopener"&gt;pull request&lt;/a&gt;



&lt;p&gt;An explore tree is an annotated file tree of the modified files. For each modified file, we present an annotated semantic tree of the changes. For example, the file &lt;code&gt;fakeFetcher.go&lt;/code&gt; as presented on &lt;a href="https://github.com/reviewpad/dejavus/pull/2/files#diff-242890664cf40fb88eaec89e6f477a923f63fec6fed10c42bb9e4fa2a95606f6"&gt;GitHub&lt;/a&gt; requires an entire scan to understand the main symbols added: 1) the type &lt;code&gt;fakeFetcher&lt;/code&gt;, 2) the struct &lt;code&gt;fakeResult&lt;/code&gt; with two fields &lt;code&gt;body&lt;/code&gt; and &lt;code&gt;urls&lt;/code&gt; and 3) the method &lt;code&gt;Fetch&lt;/code&gt;. Note that the method &lt;code&gt;Fetch&lt;/code&gt; is shown as a child of the type &lt;code&gt;fakeFetcher&lt;/code&gt; as it is the receiver type. At the moment, our analysers focus on types and methods ‚Äì this is why we don‚Äôt show variable &lt;code&gt;fetcher&lt;/code&gt;. The color in the beginning of the symbol indicates the type of modification: green for added, red for deleted and yellow for modified.&lt;/p&gt;

&lt;p&gt;We show the explore tree on the left of the description and general conversation so that developers can quickly match the description and discussions to code changes.&lt;/p&gt;

&lt;p&gt;Each element of the explore tree is clickable to its representation in the git diff. For example, clicking on the &lt;code&gt;fakeFetcher&lt;/code&gt; type directs the user to the &lt;a href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/2?base=953653eb93f5a5f57811746e197eb19fd9bc8d74&amp;amp;head=e06496d88c2bb59c3cb17b497ef7caeb3c16594f&amp;amp;review-mode=true#diff-fakeFetcher.goR5"&gt;beginning of the symbol in the diff&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N0plEV5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc8r6icp372563a0zdho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0plEV5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc8r6icp372563a0zdho.png" alt="Reviewpad screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
Navigation from the explore tree to the code diff



&lt;p&gt;Note: For those you noticed the coloured icon next to the file &lt;code&gt;go.mod&lt;/code&gt; ‚Äì this means that the file is automatically hidden from the review mode. Each Reviewpad user can tweak their file view in their review settings to exclude files.&lt;/p&gt;

&lt;p&gt;In this PR, I did a &lt;a href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/2?base=953653eb93f5a5f57811746e197eb19fd9bc8d74&amp;amp;head=e06496d88c2bb59c3cb17b497ef7caeb3c16594f#review-d11ab796-13e5-4735-8060-9b45499e0069"&gt;first review&lt;/a&gt; to document parts of the code. For example, while the original code for &lt;code&gt;Crawl&lt;/code&gt; is:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Crawl uses fetcher to recursively crawl
// pages starting with url, to a maximum of depth.
func Crawl(url string, depth int, fetcher Fetcher) {
    // TODO: Fetch URLs in parallel.
    // TODO: Don't fetch the same URL twice.
    // This implementation doesn't do either:
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I chose to &lt;a href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/2?base=953653eb93f5a5f57811746e197eb19fd9bc8d74&amp;amp;head=e06496d88c2bb59c3cb17b497ef7caeb3c16594f&amp;amp;review-mode=true#comment-ea03c917-a66f-454d-a3b8-74b7b30e05d1"&gt;comment&lt;/a&gt; on the function as a code diff comment. These review comments are inserted into the knowledge base maintained by Reviewpad:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--At2bTVXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zlnkoy7544cyurld5i9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--At2bTVXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zlnkoy7544cyurld5i9.png" alt="Reviewpad screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
Diff comment in Crawl function



&lt;p&gt;Note that the comment in the explore tree appears as a child of &lt;code&gt;Crawl&lt;/code&gt; symbol. This means that the comment was made in the definition of the symbol (not just in its signature).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#comments-from-past-reviews"&gt;
  &lt;/a&gt;
  Comments from past reviews
&lt;/h4&gt;

&lt;p&gt;After the PR with the initial code was squash and merged, I created a &lt;a href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/3"&gt;new PR&lt;/a&gt; with a &lt;a href="https://www.notion.so/6a4979aa7f8b90db6cbc74400d0beb49"&gt;solution&lt;/a&gt; presented by the GitHub user &lt;a href="https://github.com/harryhare"&gt;harryhare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bi6fmzcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igqrf320iogzzf6f8yjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bi6fmzcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igqrf320iogzzf6f8yjx.png" alt="Reviewpad screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
Reviewpad interface for &lt;a rel="noreferrer noopener" href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/3"&gt;pull request&lt;/a&gt; with first solution



&lt;p&gt;The explore tree again shows the overview of the solution which involve the introduction of a &lt;code&gt;SafeCounter&lt;/code&gt; struct with a map &lt;code&gt;v&lt;/code&gt; to check if an URL was visited, a mutex &lt;code&gt;mux&lt;/code&gt; and a method &lt;code&gt;checkvisited&lt;/code&gt; that checks if URL was already visited or not.&lt;/p&gt;

&lt;p&gt;The rest of the solution involves changes to the functions &lt;code&gt;Crawl&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; to fetch URLs in parallel. In the &lt;code&gt;Crawl&lt;/code&gt; method, Reviewpad presents the comment from the past PR that documents the method. This way, developers can retrieve discussions from previous PRs that changed this method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H407j2zG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzx14m55fyrq9m5njz0a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H407j2zG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzx14m55fyrq9m5njz0a.png" alt="Reviewpad screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
Code diff view with comment from previous pull request



&lt;p&gt;A user review raised an issue with the &lt;code&gt;checkvisited&lt;/code&gt; which is fixed in the commit &lt;code&gt;[fix from review](https://github.com/reviewpad/dejavus/pull/3/commits/a629a38fddad2305a13f2ce07da6a001c263920b)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/3?base=004717a707bb13b9b25cae49cb591c412ae7b8ff&amp;amp;head=a629a38fddad2305a13f2ce07da6a001c263920b#review-cb18ad6e-eb82-47f2-8626-d3dbb7f1e43c"&gt;final review&lt;/a&gt; approves the PR with the request to remove the TODOs in the code.&lt;/p&gt;

&lt;p&gt;In the final &lt;a href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/3?base=004717a707bb13b9b25cae49cb591c412ae7b8ff&amp;amp;head=17df68f8195eb427fd84d57fae7dc92663a8efd8&amp;amp;review-mode=true&amp;amp;hide_symbol_comments_history=false#diff-crawler.goR7"&gt;commit&lt;/a&gt; of this PR, we add the reference to the solution as a code comment in the &lt;code&gt;Crawl&lt;/code&gt; method and remove the TODOs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IgVjJaP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmn4nqfepcu9brnhdm74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IgVjJaP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmn4nqfepcu9brnhdm74.png" alt="Reviewpad screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
Reviewpad interface for all changes in &lt;a rel="noreferrer noopener" href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/3"&gt;pull request&lt;/a&gt;



&lt;p&gt;Hovering on the function &lt;code&gt;Crawl&lt;/code&gt; in the explore tree displays the code documentation associated with this function for readability.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#keeping-track-of-comments-and-changes-over-time"&gt;
  &lt;/a&gt;
  Keeping track of comments and changes over time
&lt;/h4&gt;

&lt;p&gt;At this point you might be wondering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  What happens if the comment was made in a PR that was not the exact previous one?&lt;/li&gt;
&lt;li&gt;  What happens if I start refactoring the code?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To answer these questions, let‚Äôs go over the two open PRs in our &lt;a href="https://beta.reviewpad.com/project/github.com/reviewpad/dejavus"&gt;project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first is an improvement proposed by another Github user that uses &lt;em&gt;wait groups&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dDztTKLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/933mu23pptppv30rjt7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dDztTKLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/933mu23pptppv30rjt7g.png" alt="Reviewpad screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a rel="noreferrer noopener" href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/4?base=b8faf59d56b2635b94a3a87431b6a654a917f8dd&amp;amp;head=e548593190974aa0327fb2d6b6ec516a6900eb61&amp;amp;review-mode=true"&gt;Pull request&lt;/a&gt; proposing an improvement using wait groups



&lt;p&gt;The comment shown in this pull request was the one made in the first PR. Reviewpad tracks comments regardless of their time difference. For example in the following &lt;a href="https://beta.reviewpad.com/review/github.com/google/error-prone/pull/1817?base=e7a6713dd4775efaece12a2facd2f29d5ba02c25&amp;amp;head=f57bdf7d67fb340abad6f3732f2b8e1cab12ea76&amp;amp;review-mode=true#diff-check_api/src/main/java/com/google/errorprone/fixes/SuggestedFixes.java"&gt;PR&lt;/a&gt; from the google/error-prone project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXtd7xCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c13p63ke879gwv8o0xp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXtd7xCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c13p63ke879gwv8o0xp.png" alt="Reviewpad screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
Reviewpad review mode for &lt;a rel="noreferrer noopener" href="https://beta.reviewpad.com/review/github.com/google/error-prone/pull/1817?base=e7a6713dd4775efaece12a2facd2f29d5ba02c25&amp;amp;head=f57bdf7d67fb340abad6f3732f2b8e1cab12ea76&amp;amp;review-mode=true#diff-check_api/src/main/java/com/google/errorprone/fixes/SuggestedFixes.java"&gt;pull request&lt;/a&gt; of the google/error-prone project. You can check it on Github &lt;a href="https://github.com/google/error-prone/pull/1817"&gt;here&lt;/a&gt;.



&lt;p&gt;The PR was opened in September 2020 and it is changing class methods that were commented in January 2020.&lt;/p&gt;

&lt;p&gt;The second open &lt;a href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/5"&gt;pull request&lt;/a&gt; demonstrates a beta version of our refactoring analyser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7PgIdJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzsb03bsy9qvawjf46ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7PgIdJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzsb03bsy9qvawjf46ui.png" alt="Reviewpad screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;a href="https://beta.reviewpad.com/review/github.com/reviewpad/dejavus/pull/5" rel="noreferrer noopener"&gt;Pull request&lt;/a&gt; with a refactoring



&lt;p&gt;In this PR, we introduced two commits, the first that changes the signature of the function &lt;code&gt;Crawl&lt;/code&gt; by renaming the variable &lt;code&gt;url&lt;/code&gt; to &lt;code&gt;reqUrl&lt;/code&gt; and the second renames the file.&lt;/p&gt;

&lt;p&gt;Reviewpad understands that it is the same function and presents the comment made in the first PR. Note that we are squash and merging these pull requests ‚Äì the commit associated with the comment is not an ancestor of the commits in this PR.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cool-how-do-i-check-this-out-by-myself"&gt;
  &lt;/a&gt;
  Cool. How do I check this out by myself?
&lt;/h3&gt;

&lt;p&gt;We have a public beta version of Reviewpad available at &lt;a href="https://reviewpad.com/get-started/"&gt;https://reviewpad.com/get-started/&lt;/a&gt;. You will need to create a new account and once you log in for the first time, you will see the following page to connect to a code host:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I8Jqclfm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn7yr1j3wungd53tqwr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I8Jqclfm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn7yr1j3wungd53tqwr0.png" alt="Reviewpad Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
Connect to code host page on Reviewpad



&lt;p&gt;You can connect to GitHub through our OAuth app or manually &lt;a href="https://docs.reviewpad.com/github"&gt;add a personal access token&lt;/a&gt;. The OAuth requires minimal scopes to be able to read and comment on public repositories.&lt;/p&gt;

&lt;p&gt;And that‚Äôs it ‚Äì you will be able to give Reviewpad a spin on public repositories! We will be adding more and more public repositories in the upcoming days ‚Äì feel free to reach us on our &lt;a href="https://reviewpad.com/slack"&gt;community Slack&lt;/a&gt; with requests!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;[1]: &lt;a href="https://dl.acm.org/doi/abs/10.1145/2908080.2908092"&gt;Cartesian hoare logic for verifying k-safety properties&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[2]: &lt;a href="https://www.notion.so/18-Stop-losing-knowledge-when-you-merge-pull-requests-c9696eafba52432ab09f62ac1abce95b"&gt;Verified three-way program merg&lt;/a&gt;&lt;a href="https://dl.acm.org/doi/10.1145/3276535"&gt;e&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>pullrequest</category>
      <category>knowledge</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
