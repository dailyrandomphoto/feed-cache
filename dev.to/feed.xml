<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Grokking Monad Transformers</title>
      <author>Matt Thornton</author>
      <pubDate>Fri, 07 May 2021 21:29:35 +0000</pubDate>
      <link>https://dev.to/choc13/grokking-monad-transformers-3l3</link>
      <guid>https://dev.to/choc13/grokking-monad-transformers-3l3</guid>
      <description>&lt;p&gt;Earlier in this series, in &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt;, we discovered that monads allowed us to abstract away the machinery of chaining computations. For example when dealing with optional values, they took care of the failure path for us in the background and freed us up to just write the code as if the data was always present. What happens though when we have multiple monads we'd like to use, how can we mix them together? &lt;/p&gt;

&lt;p&gt;Just like in the rest of this series, we're going to invent monad transformers ourselves by solving a real software design problem. At the end we'll see that we've discovered the monad transformer and in doing so we'll understand it more intuitively.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h1&gt;

&lt;p&gt;Let's revisit the same scenario we encountered in &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt; where we want to charge a user's credit card. If the user exists and they have a credit card saved in their profile we can charge it and email them a receipt, otherwise we'll have to signal that nothing happened. This time however, we're going to make the &lt;code&gt;lookupUser&lt;/code&gt;, &lt;code&gt;chargeCard&lt;/code&gt; and &lt;code&gt;emailReceipt&lt;/code&gt; functions async because they call external services.&lt;/p&gt;

&lt;p&gt;We'll start with the following data model and operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;TransactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TransactionId&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt;
      &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionId&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difference from before is that &lt;code&gt;lookupUser&lt;/code&gt;, &lt;code&gt;chargeCard&lt;/code&gt; and  &lt;code&gt;emailReceipt&lt;/code&gt; return &lt;code&gt;Async&lt;/code&gt; now, because in reality they'll be calling a database, external payment gateway and sending messages.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#our-first-implementation"&gt;
  &lt;/a&gt;
  Our first implementation
&lt;/h1&gt;

&lt;p&gt;Using our learnings from &lt;a href="https://dev.to/choc13/grokking-monads-imperatively-394a"&gt;Grokking Monads, Imperatively&lt;/a&gt; then we might immediately reach for the &lt;code&gt;async&lt;/code&gt; computation expression because that's the primary monad that we're dealing with here. So let's start with that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks simple and it captures the essence of what we need to do, but it's not right. The line &lt;code&gt;let card = user.CreditCard&lt;/code&gt; isn't going to compile, because at this point &lt;code&gt;user&lt;/code&gt; is of type &lt;code&gt;User option&lt;/code&gt;. We've also got a similar problem when writing &lt;code&gt;chargeCard amount card&lt;/code&gt; because we'll actually have a &lt;code&gt;CreditCard option&lt;/code&gt; there.&lt;/p&gt;

&lt;p&gt;One way around this is to just start writing the pattern matching logic ourselves to get access to the values inside those options so that we can use them. Let's see what that looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; 
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; 
            &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; 
                &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;
                &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is much more cumbersome than before and the fairly simple logic of this function is obscured by the nested pattern matching (a.k.a. the &lt;a href="https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)"&gt;pyramid of doom&lt;/a&gt;). We're basically back to the same situation that we found ourselves in when we first introduced this in &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt;. It seems like once we've got more than one monad to deal with, everything inside the outer one has to fall back to manually dealing with the failure path again through continual pattern matching.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#inventing-a-new-monad"&gt;
  &lt;/a&gt;
  Inventing a new monad
&lt;/h1&gt;

&lt;p&gt;At this point we might think to ourselves, why don't we invent a new monad? One that encapsulates the fact that we want to perform async computations that return optional results. It should behave like both the &lt;code&gt;async&lt;/code&gt; monad when an async operation fails and the &lt;code&gt;option&lt;/code&gt; monad when the async operation produces missing data. Let's call it &lt;code&gt;AsyncOption&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What we need to do then is figure out how to implement &lt;code&gt;bind&lt;/code&gt; for this new monad. Let's start with the types and then use them to guide us in writing it. In this case it will have the signature &lt;code&gt;(a' -&amp;gt; Async&amp;lt;option&amp;lt;'b&amp;gt;&amp;gt;) -&amp;gt; Async&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt; -&amp;gt; Async&amp;lt;option&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So this is telling us that we're given a function that wants some value of type &lt;code&gt;'a&lt;/code&gt; and will return us a new value wrapped up in our &lt;code&gt;Async&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; type. We're also given an instance of this monad pair that encapsulates a value of type &lt;code&gt;'a&lt;/code&gt;. So intuitively, we need to unwrap both the &lt;code&gt;Async&lt;/code&gt; and &lt;code&gt;option&lt;/code&gt; layers to get at this value of type &lt;code&gt;'a&lt;/code&gt; and then apply it to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we've achieved this by using the &lt;code&gt;async&lt;/code&gt; computation expression. This allows us to use a &lt;code&gt;match!&lt;/code&gt; which simultaneously unwraps the async value and pattern matches on the inner &lt;code&gt;option&lt;/code&gt; to allow us to extract the value from that too.&lt;/p&gt;

&lt;p&gt;We’ve had to deal with three possible cases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the case where &lt;code&gt;x&lt;/code&gt; is a successful async computation that's returned &lt;code&gt;Some&lt;/code&gt; value then we can apply the function &lt;code&gt;f&lt;/code&gt; to the value.&lt;/li&gt;
&lt;li&gt;In the case that the async operation successfully returns &lt;code&gt;None&lt;/code&gt; then we just propagate the &lt;code&gt;None&lt;/code&gt; value by wrapping it in a new &lt;code&gt;async&lt;/code&gt; by using &lt;code&gt;return&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Finally, if the async computation fails then we just let the &lt;code&gt;async&lt;/code&gt; computation expression deal with that and propagate that failure without calling &lt;code&gt;f&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So with &lt;code&gt;bind&lt;/code&gt; in place it's easy to create an &lt;code&gt;asyncOption&lt;/code&gt; computation expression and we can write our function using that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;asyncOption&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much better, but the eagle eyed might have already spotted a problem with our plan. When we try and call &lt;code&gt;user.CreditCard&lt;/code&gt; it won't work. The problem is that &lt;code&gt;user.CreditCard&lt;/code&gt; returns a vanilla &lt;code&gt;option&lt;/code&gt; and our &lt;code&gt;bind&lt;/code&gt; (and therefore &lt;code&gt;let!&lt;/code&gt;) has been designed to work with &lt;code&gt;Async&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;On top of this, on the final line we have a similar problem. The &lt;code&gt;emailReceipt&lt;/code&gt; function returns a plain &lt;code&gt;Async&amp;lt;_&amp;gt;&lt;/code&gt; and so we can't just write &lt;code&gt;return!&lt;/code&gt; because it's not producing an &lt;code&gt;Async&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt;. It seems like we're stuck with needing everything to use exactly the same monad or things won't line up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lifting-ourselves-out-of-a-hole"&gt;
  &lt;/a&gt;
  Lifting ourselves out of a hole 🏋️
&lt;/h1&gt;

&lt;p&gt;A simple way to solve the first problem is to just wrap that  vanilla &lt;code&gt;option&lt;/code&gt; in a default &lt;code&gt;Async&lt;/code&gt; value. What would a default &lt;code&gt;Async&lt;/code&gt; be though? Well we want to just treat it as if it's a successful async computation that’s immediately resolved so let's just write a function called &lt;code&gt;hoist&lt;/code&gt; that wraps its argument in an immediate async computation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're a C# developer this is just like &lt;code&gt;Task.FromResult&lt;/code&gt; and if you're a JavaScript developer then it's akin to &lt;code&gt;Promise.resolve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To solve the second problem we need a way to wrap up the value inside the &lt;code&gt;Async&lt;/code&gt; in a default &lt;code&gt;option&lt;/code&gt; value. The default &lt;code&gt;option&lt;/code&gt; value would be &lt;code&gt;Some&lt;/code&gt; in this case, and we saw in &lt;a href="https://dev.to/choc13/grokking-functors-bla"&gt;Grokking Functors&lt;/a&gt; that the way to modify the contents of a wrapped value is to use &lt;code&gt;map&lt;/code&gt;. So let's create a function called &lt;code&gt;lift&lt;/code&gt; that just calls &lt;code&gt;map&lt;/code&gt; with &lt;code&gt;Some&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So with this in hand we can finally finish off our &lt;code&gt;chargeUser&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;asyncOption&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is now looking quite tidy and the logic is clear to see, no longer hidden amongst nested error handling code. So is that all there is to monad transformers? Well not quite...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-combinatorial-explosion"&gt;
  &lt;/a&gt;
  A combinatorial explosion 🤯
&lt;/h1&gt;

&lt;p&gt;Let's say for arguments sake that we wanted to use a &lt;code&gt;Task&lt;/code&gt; instead of an &lt;code&gt;Async&lt;/code&gt; computation. Or perhaps we want to start returning a &lt;code&gt;Result&lt;/code&gt; now instead of an &lt;code&gt;option&lt;/code&gt;. What about if we want to use a &lt;code&gt;Reader&lt;/code&gt; too? &lt;/p&gt;

&lt;p&gt;You can probably see how the combinations of all of these different monads is going to get out of hand if we need to create a new monad to represent each pair. Not to mention the fact that we might want to create combinations of more than two.&lt;/p&gt;

&lt;p&gt;Wouldn't it be nice if we could find a way to write a universal monad transformer? One that could let us combine any two monads to create a new one. Let's see if we can invent that.&lt;/p&gt;

&lt;p&gt;Where do we start? Well we know by now that to create a monad we need to implement &lt;code&gt;bind&lt;/code&gt; for it. We've also seen how to do that for a new monad created from the &lt;code&gt;Async&lt;/code&gt; and &lt;code&gt;option&lt;/code&gt; pair of monads. All we basically need to do is peel back each of monad layers to access the value contained inside the inner one and then apply this value to the function to generate a new monad pair.&lt;/p&gt;

&lt;p&gt;Let's imagine for a minute that we have a universal &lt;code&gt;monad&lt;/code&gt; computation expression which invokes the correct bind, by figuring out which version to use, based on the particular monad instance that it's being called on. With that to hand then we should be able to peel off two monadic layers to access to the inner value quite easily.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bindForAnyMonadPair&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Inner&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Inner&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;innerMonad&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;innerValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;innerMonad&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately it turns out that this doesn't work. The problem is that when we write &lt;code&gt;return! f value&lt;/code&gt; it's not quite right. At that point in the code we're in the context of the inner monad's computation expression and so &lt;code&gt;return!&lt;/code&gt; is going to expect &lt;code&gt;f&lt;/code&gt; to return a value that's the same as the inner monad, but we know that it returns &lt;code&gt;'Outer&amp;lt;'Inner&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt; because that’s what we need it to have for our new bind. &lt;/p&gt;

&lt;p&gt;It might seem like there would be a way out of this. After all, we have the value we need to supply to &lt;code&gt;f&lt;/code&gt;, so surely we must be able to just call it and generate the value we need somehow. However, we have to remember that computation expressions and &lt;code&gt;let!&lt;/code&gt; are just syntactic sugar for &lt;code&gt;bind&lt;/code&gt;. So what we're really trying to write is this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bindForAnyMonadPair&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Inner&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Inner&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; 
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; 
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;innerMonad&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;innerMonad&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then it's (maybe) more obvious to see that &lt;code&gt;f&lt;/code&gt; can't be used with the inner monad's &lt;code&gt;bind&lt;/code&gt; because it's not going to return the right type. So it seems we can dig inside both monads to get to the value in a generic way, but we don't have a generic way of putting them back together again.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theres-still-hope"&gt;
  &lt;/a&gt;
  There's still hope 🤞
&lt;/h1&gt;

&lt;p&gt;We might have failed at creating a truly universal monad transformer, but we don't have to completely give up. If we could make even one of the monads in the pair generic then it would massively reduce the number of monad combinations we need to write.&lt;/p&gt;

&lt;p&gt;Intuitively you might think about making the inner one generic, I know I did. However, you'll see that we fall into exactly the same trap that we did before when we tried to make both generic, so that won't work.&lt;/p&gt;

&lt;p&gt;In that case our only hope is to try making the outer monad generic. Let's assume we've still got our universal &lt;code&gt;monad&lt;/code&gt; computation expression to hand and see if we can write a version that works whenever the inner monad is an &lt;code&gt;option&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bindWhenInnerIsOption&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Outer&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🙌 It works! The reason we were able to succeed this time is because we could use &lt;code&gt;return!&lt;/code&gt; when calling &lt;code&gt;f&lt;/code&gt; because we were still in the context of the outer monad's computation expression. So &lt;code&gt;return!&lt;/code&gt; is able to return a value that is of the type &lt;code&gt;Outer&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; which is precisely what &lt;code&gt;f&lt;/code&gt; gives us back.&lt;/p&gt;

&lt;p&gt;We're also going to need generic versions of &lt;code&gt;hoist&lt;/code&gt; and &lt;code&gt;lift&lt;/code&gt; too, but they're not too difficult to write.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to write &lt;code&gt;lift&lt;/code&gt; we're assuming that the &lt;code&gt;Outer&lt;/code&gt; monad has &lt;code&gt;map&lt;/code&gt; defined for it and that &lt;code&gt;map&lt;/code&gt; can select the correct one, because we don't know at this point in time which monad to call &lt;code&gt;map&lt;/code&gt; on.&lt;/p&gt;

&lt;p&gt;Also &lt;code&gt;hoist&lt;/code&gt; is making use of a generic &lt;code&gt;result&lt;/code&gt; function which is an alias for &lt;code&gt;return&lt;/code&gt; because &lt;code&gt;return&lt;/code&gt; is a reserved keyword in F#. Technically every monad should have &lt;code&gt;return&lt;/code&gt;, as well as &lt;code&gt;bind&lt;/code&gt;, defined for it. We haven't mentioned &lt;code&gt;return&lt;/code&gt; before because it's so trivial, but it just wraps any plain value up in a monad. For example &lt;code&gt;result&lt;/code&gt; for &lt;code&gt;option&lt;/code&gt; would just be &lt;code&gt;Some&lt;/code&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-the-monad-transformer"&gt;
  &lt;/a&gt;
  You just discovered the Monad Transformer 👏
&lt;/h1&gt;

&lt;p&gt;With our invention of &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;lift&lt;/code&gt; and &lt;code&gt;hoist&lt;/code&gt;, for the case when inner monad is an &lt;code&gt;option&lt;/code&gt;, we've invented the &lt;code&gt;option&lt;/code&gt; monad transformer. Normally this is called &lt;code&gt;OptionT&lt;/code&gt; and is actually wrapped in a single case union to make it a new type, which I'll show in the appendix, but that's not an important detail when it comes to grokking the concept.&lt;/p&gt;

&lt;p&gt;The important thing to realise is that when you need to deal with multiple monads you don't have to resort back to the pyramid of doom. Instead, you can use a monad transformer to represent the combination and easily create a new monad out of a pair of existing ones. Just remember that it's the inner monad that we define the transformer for.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-yourself"&gt;
  &lt;/a&gt;
  Test yourself
&lt;/h1&gt;

&lt;p&gt;See if you can implement &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;lift&lt;/code&gt; and &lt;code&gt;hoist&lt;/code&gt; for the &lt;code&gt;Result&lt;/code&gt; monad.&lt;/p&gt;

&lt;p&gt;
  Solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;ResultT&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;Result&amp;lt;'b&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;Result&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;'a&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;Result&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#does-this-actually-work"&gt;
  &lt;/a&gt;
  Does this actually work? 😐
&lt;/h1&gt;

&lt;p&gt;When we invented &lt;code&gt;bind&lt;/code&gt; for &lt;code&gt;OptionT&lt;/code&gt; we imagined that we had this all powerful &lt;code&gt;monad&lt;/code&gt; computation expression to hand that would work for any monad. You might be wondering if such a thing exists? Particularly whether it exists in F# if you're aware of the fact that F# doesn't support higher kinded types, which it seems like we need here in order to work with a generic outer monad type. &lt;/p&gt;

&lt;p&gt;Fortunately for us, the excellent &lt;a href="https://fsprojects.github.io/FSharpPlus/abstraction-monad.html"&gt;FSharpPlus&lt;/a&gt; does have such an abstract &lt;code&gt;monad&lt;/code&gt; computation expression defined. It also has plenty of monad transformers, like &lt;code&gt;OptionT&lt;/code&gt; already defined and ready to use. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#should-i-use-a-monad-transformer"&gt;
  &lt;/a&gt;
  Should I use a monad transformer?
&lt;/h1&gt;

&lt;p&gt;Monad transformers are certainly quite powerful and can help us recover from having to write what would otherwise be heavily nested code. On the other hand though they're not exactly a free lunch. There are a few things to consider before using them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the monad stack gets large it can in itself become quite cumbersome to keep track of it. For instance the types can become large and the lifting across many layers can become tiring.&lt;/li&gt;
&lt;li&gt;This is an area that pushes F# to its limits. Whilst FSharpPlus has done a fantastic job in figuring out how to emulate higher kinded types, it can lead to very cryptic compile time errors if you've got a type mismatch somewhere when using the monad transformer. &lt;/li&gt;
&lt;li&gt;It can also slow down compile times due to the fact it's pushing type inference beyond what it was really designed for.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In some cases then you might be better off just defining a new monad and writing &lt;code&gt;bind&lt;/code&gt; etc for it yourself. If your application typically deals with the same stack of monads then the improved compiler errors will probably outweigh the relatively small maintenance burden of writing the code yourself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-did-we-learn"&gt;
  &lt;/a&gt;
  What did we learn? 🧑‍🎓
&lt;/h1&gt;

&lt;p&gt;We've now discovered that it's possible to combine monads into new monads and that this lets us write tidier code when we would otherwise have to write nested pattern matches. We've also seen that while it's not possible to create a universal monad transformer for any pair, it is possible to at least define a monad transformer for a fixed inner type. That means we only need to write one transformer per monad in order to start creating more complex monad combinations.&lt;/p&gt;

&lt;p&gt;
  Appendix
  &lt;br&gt;
As mentioned above a monad transformer usually has a new type associated with it. Below I'll show what this looks like for the &lt;code&gt;OptionT&lt;/code&gt; monad transformer and then use that along with the generic &lt;code&gt;monad&lt;/code&gt; computation expression from FSharpPlus to implement the &lt;code&gt;chargeUser&lt;/code&gt; function.&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OptionT&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'b&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OptionT&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;'a&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;hoist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;``Monad&amp;lt;option&amp;lt;'a&amp;gt;&amp;gt;``&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TransactionId&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;monad&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookupUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hoist&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;OptionT&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emailReceipt&lt;/span&gt; &lt;span class="n"&gt;transactionId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lift&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;OptionT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you're wondering about those type annotations like '&lt;code&gt;Monad&amp;lt;'a&amp;gt;'' then they're really they're just fancy labels. We've used the `\`\&lt;/code&gt; quotations to just give a more meaningful name to show that they represent some generic  &lt;code&gt;Monad&lt;/code&gt;. This acts as documentation, but unfortunately it's not really doing any meaningful type checking. As far as the compiler is concerned that just like any other generic type. We could have easily just written &lt;code&gt;type OptionT&amp;lt;'a&amp;gt; = OptionT of 'a&lt;/code&gt;. So the onus is back on us when implementing these functions to make sure we do write it as if it's actually a generic monad and not just any generic value.&lt;/p&gt;



&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>programming</category>
      <category>grokking</category>
    </item>
    <item>
      <title>Creating Your Own Chat Room with React, Node, Socket.io and the Cloud: Part 2</title>
      <author>Bradston Henry</author>
      <pubDate>Fri, 07 May 2021 20:13:04 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/creating-your-own-chat-room-with-react-node-socket-io-and-the-cloud-part-2-4l12</link>
      <guid>https://dev.to/ibmdeveloper/creating-your-own-chat-room-with-react-node-socket-io-and-the-cloud-part-2-4l12</guid>
      <description>&lt;p&gt;In this blog, we will complete everything we need to get our Chat Room up in running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gFY9zYfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/235ocmmv7et47fli6i47.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFY9zYfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/235ocmmv7et47fli6i47.gif" alt="Sample Chat Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ibm.biz/create-chat-room-in-cloud-blog-part1"&gt;In part 1&lt;/a&gt;, we focused on creating the socket.io NodeJs Server that would manage our chat. Its primary purpose was to receive messages from users in our Chat room and to send it to other Chat Room users in  in real time.&lt;/p&gt;

&lt;p&gt;In part 2, we will be focusing primarily on the ReactJS front-end portion of the Chat room where users will view messages and send messages to other users and connecting it to our server.&lt;/p&gt;

&lt;p&gt;NOTE: If you would like to follow along and build the application with me, I recommend you go back to part 1 and complete that portion before moving any further. The ReactJS portion of our application will not be able to work without a server to interact with.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/bradstondev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sthf4n7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7sHQb0uz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571773/c3edb21d-5d8d-4839-801b-80a450be711e.jpg" alt="bradstondev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ibmdeveloper/creating-your-own-chat-room-with-react-node-and-socket-io-in-the-cloud-part-1-13dg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Creating Your Own Chat Room with React, Node, and Socket.io in the Cloud: Part 1&lt;/h2&gt;
      &lt;h3&gt;Bradston Henry ・ May 7 ・ 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#socket&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;To make our lives easier, I have created the base ReactJS application that we will be using to house our Chat Room. this includes the UI and visuals as well as some starter code that will allow us to code in what we need to connect to our Node server. To get the starter code, download the source from &lt;a href="http://ibm.biz/simple-react-chat-app-frontend-github-bradstondev"&gt;my github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So here is a brief overview of what we will cover is this particular blog to get the React portion of the application up and running:&lt;/p&gt;

&lt;p&gt;So here is quick overview of what we will be doing with our Node server:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install and configure our React application to use socket.io&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement Socket methods to allow our React application to communicate with our server( NodeJS application)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Locally Test our React applications connection to our Node Server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deploy our ReactJS application to the cloud so it can be accessible to users from anywhere.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you may have noticed, a lot of what we will be doing in this blog will parallel what we did in the last blog. This portion of development should be a bit faster as we should now have a base understanding of how socket.io works from the previous blog.&lt;/p&gt;

&lt;p&gt;So without further adieu, let's get started...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-and-configuring-socketio-with-reactjs"&gt;
  &lt;/a&gt;
  Installing and Configuring Socket.io with ReactJS
&lt;/h1&gt;

&lt;p&gt;So the first thing we are going to do, is navigate to our base ReactJS code using the terminal or command line. Our code should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;you-path-directory&amp;gt;/simple-react-chat-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have navigated to our source code, we are going to install all of our base dependencies listed in our package.json file using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have installed all of the base frameworks and dependencies we need to run our application, it's time for us to install socket.io into our application. We will be installing the socket framework almost exactly how we did it on the NodeJS server except that we will be using a different library to get access to socket.io in our client application. Here is what we will run to install socket.io in React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;socket.io-client &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have probably noticed, this is the "client" version of the socket.io. If you are interested in learning more about the client version of socket.io check out this link: &lt;a href="https://socket.io/docs/v4/client-installation/"&gt;socket.io Client documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our next step will be to create a file that will be used to manage our client socket.io connection with our server. For ease, I have already created the file for you but it is currently blank. We will be adding the necessary code in the next few steps.&lt;/p&gt;

&lt;p&gt;First, open the folder titled "src" in our React app source code directory and the open the folder titled "services". In the "services" folder, you will find a file titled "socket.js". We will be inserting all necessary socket.io connection code in this file. Open this file and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;import socketIOClient from &lt;span class="s2"&gt;"socket.io-client"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

const serverEndpoint &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;your-nodejs-server-url&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;const socket &lt;span class="o"&gt;=&lt;/span&gt; socketIOClient&lt;span class="o"&gt;(&lt;/span&gt;serverEndpoint, &lt;span class="o"&gt;{&lt;/span&gt;
    transports: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'websocket'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first line we are importing are &lt;em&gt;socket.io-client&lt;/em&gt; library into our file for use.&lt;/p&gt;

&lt;p&gt;In the next line of code, we are setting the &lt;em&gt;serverEndpoint&lt;/em&gt; to our NodeJs server. This is the string value of the url that your Node server is currently hosted. For example, my &lt;em&gt;serverEndpoint&lt;/em&gt; line would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;const serverEndpoint &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"simple-node-chat-server-bsh.us-south.cf.appdomain.cloud"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our next line is actually initializing the connection between our client and our server. We are also specifying in this line of code a transport parameter. Essentially, what that is doing is setting the connection protocol we would like to use in our socket connection to our server. If you would like to learn more about how transports work and the the different typed of connection protocols, check out this &lt;a href="https://socket.io/docs/v4/client-initialization/#transports"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We now have all the code we need to connect to our socket.io NodeJs server. The reason we are creating a separate file to manage this connection, is because now if we desire to expand this application in the future, we have one location that handles this connection. We can then easily import this file into any React Component or file that we would like to use our socket.io connection with.&lt;/p&gt;

&lt;p&gt;With that, we have set up our React application to connect to our NodeJS server. Our next step will be to implement the socket.io methods we need to communicate appropriately with our server.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementing-socket-methods-in-reactjs-client"&gt;
  &lt;/a&gt;
  Implementing Socket Methods in ReactJS client
&lt;/h1&gt;

&lt;p&gt;Since we already have everything we need setup on our server, our next job is to implement the correct methods to communicate with our server.&lt;/p&gt;

&lt;p&gt;In order to do that, we will need to modify the code in our ChatRoom.js file. In our source code directory, open the 'src' folder and then open the "pages" folder. In the "pages" folder, open up the file titled "chatRoom.js". As the title of the file suggests, this holds all relevant code we need to operate our chat room.&lt;/p&gt;

&lt;p&gt;As you will notice in the file, there is quite a bit of code already implemented, but we need to implement some new code to get our socket methods working.&lt;/p&gt;

&lt;p&gt;At the top of the file directly under our last imported file we are going to import our "socket.js" file from our services folder. Your code should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
import ChatNotification from &lt;span class="s1"&gt;'../components/ChatNotification'&lt;/span&gt;

//Add socket import here
import &lt;span class="o"&gt;{&lt;/span&gt;socket&lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'../services/socket'&lt;/span&gt; 

&lt;span class="nb"&gt;let &lt;/span&gt;styles &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our socket service imported, our first step is to setup the socket.io method that manages creating and setting our user data/identity. In order to do this we need to implement a &lt;em&gt;socket.on&lt;/em&gt; method and &lt;em&gt;socket.emit&lt;/em&gt; method. &lt;/p&gt;

&lt;p&gt;As mentioned in &lt;a href="https://ibm.biz/create-chat-room-in-cloud-blog-part1"&gt;part 1&lt;/a&gt; of this blog, &lt;em&gt;socket.on&lt;/em&gt; methods act as listeners, always looking out for messages and &lt;em&gt;socket.emit&lt;/em&gt; methods act as messengers, sending messages to listening &lt;em&gt;socket.on&lt;/em&gt; methods. In this case, &lt;em&gt;socket.on&lt;/em&gt; methods are listening for messages &lt;strong&gt;from&lt;/strong&gt; the Node server and &lt;em&gt;socket.emit&lt;/em&gt; methods are sending messages &lt;strong&gt;to&lt;/strong&gt; the Node server.&lt;/p&gt;

&lt;p&gt;In our ChatRoom.js file, in our componentDidMount() method, we will be implementing our code. Within the &lt;em&gt;if(!userIDVal){&lt;/em&gt; we will be adding new code that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;userIDVal&lt;span class="o"&gt;){&lt;/span&gt;

   socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SetUserData"&lt;/span&gt;, userData &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      //When user creation on server is &lt;span class="nb"&gt;complete&lt;/span&gt;, retrieve and save data to &lt;span class="nb"&gt;local &lt;/span&gt;storage
      localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;, userData.userID&lt;span class="o"&gt;)&lt;/span&gt;
      localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;, userData.username&lt;span class="o"&gt;)&lt;/span&gt;
            console.log&lt;span class="o"&gt;(&lt;/span&gt;userData&lt;span class="o"&gt;)&lt;/span&gt;

      this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: userData.username, currentUserID: userData.userID&lt;span class="o"&gt;})&lt;/span&gt;

      //Notify Socket server is not ready to chat
      socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, userData&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   //Send Socket &lt;span class="nb"&gt;command &lt;/span&gt;to create user info &lt;span class="k"&gt;for &lt;/span&gt;current user
   socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CreateUserData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what exactly is happening here?&lt;/p&gt;

&lt;p&gt;So what we are doing is checking to see if our current client/user has a Chat Room "identity" yet. In code prior to this conditional you will see this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;let &lt;/span&gt;userIDVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;let &lt;/span&gt;usernameVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this code is doing, is attempting to retrieve &lt;em&gt;userID&lt;/em&gt; and &lt;em&gt;username&lt;/em&gt; data stored in our browsers local storage. If the data does not exist (&lt;em&gt;if(!userIDVal)&lt;/em&gt;), we are assuming that this is the users first time in the chat room. &lt;/p&gt;

&lt;p&gt;The first thing we do is implement a &lt;em&gt;socket.on&lt;/em&gt; method with name "SetUserData" that will begin listening for the server to send information about this users newly made identity. Within that &lt;em&gt;socket.on&lt;/em&gt; method_ we have some code that retrieves newly created user data from the server and then promptly saves it to the browser's local storage for future use and sets the values in the React components state. Once the user info is set, we use the &lt;em&gt;socket.emit&lt;/em&gt; method "UserEnteredRoom" to let the server know that the user is now entering the Chat room with an identity and can chat.&lt;/p&gt;

&lt;p&gt;After we setup the &lt;em&gt;socket.on&lt;/em&gt; method, "SetUserData", we then implement a &lt;em&gt;socket.emit&lt;/em&gt; method called "CreateUserData" which will be used to actually ask the server to make an identity for our user. The emit will send the message to create user data for our client and the server will promptly send a message back to be retrieved by our listening "SetUserData" method.&lt;/p&gt;

&lt;p&gt;NOTE: The reason we don't write these two methods in reverse order is to ensure that the listener, "SetUserData", is prepared to receive newly created user data from the server &lt;strong&gt;before&lt;/strong&gt; we ask the server to make new user data. In some cases, the request for new user data and its response may be fast, and if we set the listener method after the messaging function, there is a chance the listener method may still be getting setup and miss the server's response. If that doesn't make sense, please feel free to leave a comment asking for more clarification.&lt;/p&gt;

&lt;p&gt;Now that we have added code for a first time chat user, it is also necessary for us to have things set up for a returning user with pre-existing user data stored in the browser.&lt;/p&gt;

&lt;p&gt;In the else condition of our &lt;em&gt;if(!userIDVal)&lt;/em&gt; conditional, we will add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   //If user already has userid and username, notify server to allow them to &lt;span class="nb"&gt;join &lt;/span&gt;chat
   this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: usernameVal, currentUserID: userIDVal&lt;span class="o"&gt;})&lt;/span&gt;
   socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;userID: userIDVal, username: usernameVal&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the user exists in browser local storage, we simply store that information to React state and send a message to the server using the "UserEnteredRoom" socket.io method to inform our server that our client is ready to chat.&lt;/p&gt;

&lt;p&gt;The next piece of code we will be entering will be at the end of our &lt;em&gt;componentDidMountMethod()&lt;/em&gt;. This code will simply setup up a &lt;em&gt;socket.on&lt;/em&gt; method called "RetrieveChatRoomData" that will always be listening for new Chat Room data, aka when a new chat message has been received by the server. This the code that we will add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RetrieveChatRoomData"&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;chatRoomData&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   this.setState&lt;span class="o"&gt;({&lt;/span&gt;chatRoomData: chatRoomData&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; this.shouldScrollToBottom&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that new addition our complete componentDidMount() method should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;componentDidMount&lt;span class="o"&gt;(){&lt;/span&gt;

    // localStorage.removeItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    // localStorage.removeItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;let &lt;/span&gt;userIDVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;let &lt;/span&gt;usernameVal &lt;span class="o"&gt;=&lt;/span&gt; localStorage.getItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    //If user does not have a userid and username saved &lt;span class="k"&gt;in &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;storage, create them &lt;span class="k"&gt;for &lt;/span&gt;them
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;userIDVal&lt;span class="o"&gt;){&lt;/span&gt;

      socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SetUserData"&lt;/span&gt;, userData &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        //When user creation on server is &lt;span class="nb"&gt;complete&lt;/span&gt;, retrieve and save data to &lt;span class="nb"&gt;local &lt;/span&gt;storage
        localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'userID'&lt;/span&gt;, userData.userID&lt;span class="o"&gt;)&lt;/span&gt;
        localStorage.setItem&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;, userData.username&lt;span class="o"&gt;)&lt;/span&gt;
        console.log&lt;span class="o"&gt;(&lt;/span&gt;userData&lt;span class="o"&gt;)&lt;/span&gt;

        this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: userData.username, currentUserID: userData.userID&lt;span class="o"&gt;})&lt;/span&gt;

        //Notify Socket server is not ready to chat
        socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, userData&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      //Send Socket &lt;span class="nb"&gt;command &lt;/span&gt;to create user info &lt;span class="k"&gt;for &lt;/span&gt;current user
      socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"CreateUserData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        //If user already has userid and username, notify server to allow them to &lt;span class="nb"&gt;join &lt;/span&gt;chat
        this.setState&lt;span class="o"&gt;({&lt;/span&gt;currentUsername: usernameVal, currentUserID: userIDVal&lt;span class="o"&gt;})&lt;/span&gt;
        socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"UserEnteredRoom"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;userID: userIDVal, username: usernameVal&lt;span class="o"&gt;})&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    //Retrieve game data &lt;span class="o"&gt;(&lt;/span&gt;from Get Chat data socket call&lt;span class="o"&gt;)&lt;/span&gt;
    socket.on&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RetrieveChatRoomData"&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;chatRoomData&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        this.setState&lt;span class="o"&gt;({&lt;/span&gt;chatRoomData: chatRoomData&lt;span class="o"&gt;}&lt;/span&gt;, &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; this.shouldScrollToBottom&lt;span class="o"&gt;())&lt;/span&gt;
    &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we will implement the method that will actually send the chat messages to our server.&lt;/p&gt;

&lt;p&gt;Find the method called &lt;em&gt;sendMessageData()&lt;/em&gt; in our file. In this empty method we will be adding this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;var &lt;span class="o"&gt;{&lt;/span&gt;message, currentUsername, currentUserID&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; this.state

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;message.length &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 0&lt;span class="o"&gt;){&lt;/span&gt;
    //Send chat message to server...
    socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SendMessage"&lt;/span&gt;, &lt;span class="o"&gt;{&lt;/span&gt;message: message, username: currentUsername, userID: currentUserID, timeStamp: null&lt;span class="o"&gt;})&lt;/span&gt;
    //Clear chat message textfield box
    this.setState&lt;span class="o"&gt;({&lt;/span&gt;message: &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code first retrieves our current entered message, our username and our userID from our React state and stores them as variables for future use. Next, we check to make sure the message has some length, otherwise we risk sending an empty message to the server. If the message length is greater than zero, we then use the &lt;em&gt;socket.emit&lt;/em&gt; method "SendMessage" to send our typed in chat message with the information on who sent the message. NOTE: I added an extra timestamp data point just in case I wanted to add timestamps in the future to the chat view.&lt;/p&gt;

&lt;p&gt;Once we have sent the message to the server we empty our message string from our React state which in turns clears our textfield input box. &lt;/p&gt;

&lt;p&gt;With that last addition our Chat Room is almost ready. There is one minor housekeeping-code addition we need to add in order to prevent against possible memory leaks.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, whenever we implement a &lt;em&gt;socket.on&lt;/em&gt; method, we are telling our code to constantly listen to messages that may come from our server. The thing is, if you do not tell the listeners to stop listening, they will continue to listen pretty much indefinitely as long as the application is running. So if we by-chance, navigated to another page within our application, the listeners would keep on listening even though we are no longer on the page that needed the listeners. &lt;strong&gt;That&lt;/strong&gt;, my friends, is essentially a memory leak. Because if we kept navigating to and from our page with the listeners it would keep adding listeners over and over and over, bogging down our application.&lt;/p&gt;

&lt;p&gt;With all that being said, we need we need to add a set of clean-up methods that turn off those listeners when we leave the chat room page. &lt;/p&gt;

&lt;p&gt;Somewhere in the code, preferably directly under the &lt;em&gt;componentDidMount()&lt;/em&gt; method add this method and code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;componentWillUnmount&lt;span class="o"&gt;(){&lt;/span&gt;
    socket.off&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"RetrieveChatRoomData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    socket.off&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SetUserData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;em&gt;socket.off&lt;/em&gt; method implies, it "turns off" the listening of these functions when we unmount this particular view or leave this page entirely. &lt;/p&gt;

&lt;p&gt;Before we declare victory on our Chat Room app, I would like us to add one more convenience method to our React application that will allow us to clear our chat history whenever we would like.&lt;/p&gt;

&lt;p&gt;In the "pages" folder within our "src" directory of our project, open the file titled "ClearChat.js". &lt;/p&gt;

&lt;p&gt;At the top of the file, import socket below the last import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;...
import &lt;span class="o"&gt;{&lt;/span&gt; Row, Container &lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'react-bootstrap'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

import &lt;span class="o"&gt;{&lt;/span&gt;socket&lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'../services/socket'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have added the import, scroll down until you find the empty method called &lt;em&gt;clearChatData()&lt;/em&gt;. In that method we will add one simple line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;socket.emit&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ClearChat"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;em&gt;socket.emit&lt;/em&gt; suggests, this will send a message to our Node server to clear our chat history. This functionality can only be used by navigating to the "/clearChat" page when we run our application.&lt;/p&gt;

&lt;p&gt;With that our Chat Room application is ready to go. Before we deploy our application to the cloud, we are going to briefly test if our application is configured correctly on our local machine. This way we won't be surprised by any errors when we attempt to push it to the cloud.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#local-test-of-reactnode-server-connection"&gt;
  &lt;/a&gt;
  Local Test of React/Node Server Connection
&lt;/h1&gt;

&lt;p&gt;So let's do a quick test to see if our React application is properly configured and setup to connect with our socket.io NodeJS Server.&lt;/p&gt;

&lt;p&gt;In a terminal/command line window, make sure you are currently in our &lt;em&gt;simple-react-chat-app&lt;/em&gt; directory. Once we are sure we are in our directory, let's run a command that will run our React application locally. Type this command into your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should begin locally running our React code in our browser on our localhost (most likely port 3000). In most cases, the application should open automatically in your default browser, if not, enter &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; into your desired browser to view the application. If your application ran successfully, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzSo7fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo99b6rc3q196xkx58by.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzSo7fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo99b6rc3q196xkx58by.png" alt="React-App-Local-Host-Chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should simply note that someone entered the chat (which was you!). At the top of the screen below the "Chat Room" title it should show who you are now appearing as in the chat. Go ahead and navigate to the bottom of the page and type something into the chat message input box. Send your message by either pressing the send icon or pressing Enter/Return. You should now see your message appear in the chat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0Km3hNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1p9bphpm8qp9dbo4c0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0Km3hNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1p9bphpm8qp9dbo4c0j.png" alt="React-App-Hello-Chat"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If that worked, that means your Node server in the Cloud is working and your react application is communicating correctly with it. If that did not work, go back and ensure your code matches what was shared above. NOTE: Also, check your browser web console (normally accessible via developer tools) to check if you are receiving an errors. This may give you guidance on your issue. &lt;/p&gt;

&lt;p&gt;If you want to check what it would be like to have more than one individual in the Chat Room, Open a different browser (E.g. If you are currently testing with Firefox, now open the Chat Room with Chrome) to see how it works.&lt;/p&gt;

&lt;p&gt;Now that we see the general chat Room functionality is working, let's just test that our Clear chat functionality is working. &lt;/p&gt;

&lt;p&gt;In your browser address bar go to this address: &lt;a href="http://localhost:3000/clearChat"&gt;http://localhost:3000/clearChat&lt;/a&gt; (Note: If your React is hosting at a different port replace 3000 with that port).&lt;/p&gt;

&lt;p&gt;You should be presented with a simple page that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSWQMDPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81nyajkkqssaiqjmdgnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSWQMDPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81nyajkkqssaiqjmdgnk.png" alt="React-App-Clear-Chat-View"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the button on the page that says "Clear Chat".&lt;/p&gt;

&lt;p&gt;Once you have done that, navigate back to main page (&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;) and you should now see that the chat cleared itself. NOTE: You will only be able to clear the chat while running the application on your local machine. When hosted in cloud, I did not make it possible to route directly to Clear Chat. Feel free to add that capability if you'd like.&lt;/p&gt;

&lt;p&gt;Now that we have tested this locally, it's time to deploy this Chat Room into the cloud. Go ahead and stop the React application so we can move on to the next steps. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-your-react-chat-room-to-the-cloud"&gt;
  &lt;/a&gt;
  Deploying your React chat Room to the Cloud
&lt;/h1&gt;

&lt;p&gt;The following steps are going to be almost identical to what we did to deploy our Node server to the cloud so quite a bit of this will be familiar. The biggest difference will be the name of our Application and the route and making sure we initiate a React build before we deploy.&lt;/p&gt;

&lt;p&gt;The first thing we are going to need to do is build our React application so it can be properly deployed on our Cloud server (IBM Cloud Cloud Foundry server). So let's go ahead and run this command to build our React app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should initiate the React build process. This may take a few minutes and your terminal window should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbnMvRtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1459jl9t14u89bnvtin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbnMvRtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1459jl9t14u89bnvtin.png" alt="CLI-successful-react-app-build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in order to have a free way to easily deploy our application to the cloud, we will be using an &lt;a href="https://www.ibm.com/cloud/free"&gt;IBM Cloud Lite account&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you do not have IBM Cloud Lite account, you can quickly sign-up for free access to cloud resources for hosting your application in the cloud. Signup using this link: &lt;a href="https://ibm.biz/IBM-Cloud-Signup"&gt;IBM Cloud Signup Link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you are signed up we will be pushing our application to the cloud using IBM Cloud CLI in our terminal. If you do not have the IBM Cloud CLI, you can download the latest version here: &lt;a href="https://www.ibm.com/cloud/cli"&gt;IBM Cloud CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: If you are interested on how to do this through the IBM Cloud dashboard, you can check out my blog on deploying a React application to the cloud for general walkthrough of how that works: [Deploying ReactJS to the Cloud](&lt;a href="https://ibm.biz/deploying-react-app-in-cloud-devto-bradstondev"&gt;https://ibm.biz/deploying-react-app-in-cloud-devto-bradstondev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, make sure you are still in a terminal window and that you are still in the _simple-react-chat-app directory.&lt;/p&gt;

&lt;p&gt;While in the directory, log into your IBM Cloud account using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter you username and password and you should be presented with a screen like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1VY9y4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0wieoic3xhh8dv4sphx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1VY9y4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0wieoic3xhh8dv4sphx.png" alt="CLI-IBM-Cloud-Login"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEfLW4-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzhmrydq2em8u5aq3uan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEfLW4-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzhmrydq2em8u5aq3uan.png" alt="CLI-Authenticated-Success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have logged into IBM Cloud, we need to set our IBM cloud target to Cloud Foundry as we will be using the Cloud Foundry framework to host our application. If you'd like to learn more about Cloud Foundry, check out this link: [Cloud Foundry](&lt;a href="https://ibm.biz/ibm-cloud-foundry-homepage-bradstondev"&gt;https://ibm.biz/ibm-cloud-foundry-homepage-bradstondev&lt;/a&gt;. Type this command to target Cloud Foundry:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud target &lt;span class="nt"&gt;--cf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it was successful, you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1G6gRjX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3izbju5g1z55wnr5hqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1G6gRjX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3izbju5g1z55wnr5hqv.png" alt="CLI-Target-CF"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right before we deploy our server to the cloud, we need to make some minor updates to our code.&lt;/p&gt;

&lt;p&gt;In our &lt;em&gt;simple-react-chat-app&lt;/em&gt; directory and open the file named "manifest.yml"&lt;/p&gt;

&lt;p&gt;In the file you should see this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;applications:
  - name: Simple React Chat App
memory: 64M
path: build/
buildpack: staticfile_buildpack 
routes:
  - route: simple-react-chat-app-&amp;lt;your-intials&amp;gt;.&amp;lt;server-closest-to-you&amp;gt;.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace &lt;em&gt; with your initials and _&lt;/em&gt; with a the server closest to you. Because you may not know what are possible server names, here is a list. Choose a server that you believe you think may be closest to you. And if you want to view this list yourself you can enter the command listed below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud regions

//Output
Name       Display name   
au-syd     Sydney   
&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="nt"&gt;-che&lt;/span&gt;     Chennai   
jp-osa     Osaka   
jp-tok     Tokyo   
kr-seo     Seoul   
eu-de      Frankfurt   
eu-gb      London   
ca-tor     Toronto   
us-south   Dallas   
us-east    Washington DC   
br-sao     Sao Paulo  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, this was my updated manifest.yml(NOTE: Please do not use the same route name as displayed below. This will likely cause an error saying route is already taken when you attempt to push to IBM Cloud):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;applications:
  - name: Simple React Chat App
memory: 64M
path: build/
buildpack: staticfile_buildpack 
routes:
  - route: simple-react-chat-app-bsh.us-south.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have updated your manifest.yml, you only have one more step: &lt;strong&gt;Deploy your React application into the Cloud!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the same terminal window you logged into IBM Cloud with, enter this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ibmcloud cf push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will initiate the process of deploying your NodeJS application into the cloud. It in general takes a few minutes to deploy this code.&lt;/p&gt;

&lt;p&gt;When the the application has been successfully deployed, you should see something like this in your terminal window:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqiAkujK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6l7qntk5o1ojffqrpaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqiAkujK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6l7qntk5o1ojffqrpaq.png" alt="CLI-React-app-successful-push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to a browser window and insert the route value you entered into the manifest.yml. In my case that would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;simple-react-chat-app-bsh.us-south.cf.appdomain.cloud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be presented with our Chat Room and with the message that a new user entered the chat. If you did not clear the chat in our previous step, you will likely see the messages you sent earlier while testing:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z05dLb5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/195a5sppuhuzlyv5tcvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z05dLb5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/195a5sppuhuzlyv5tcvj.png" alt="React-App-Deployed-Chat"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you do not see this page, you may need to check that you code matches the code I shared above and feel free to check the actual application status and error log by visiting the IBM Cloud Resource list and finding your application by its name.&lt;/p&gt;

&lt;p&gt;And just like that, we have a working chat room that can be shared with whomever you like!!&lt;/p&gt;

&lt;p&gt;I really encourage you to take the time to really understand what all this code I have shared with you is doing. Change method names, change how data is sent, and just break things! This is the best way to truly understand what is happening under the hood so that you can use socket.io to implement realtime communication in applications like this.&lt;/p&gt;

&lt;p&gt;Since socket.io's real-time messaging can be used in a lot of different scenarios, I'd like to hear from all of you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What other ways could you imagine using the socket.io technology other than a chat room?&lt;/strong&gt; Leave you ideas in the the comments below. I'd love to hear them!&lt;/p&gt;

&lt;p&gt;Thanks for reading this blog and I am encouraged by your desire to learn new topics like these.&lt;/p&gt;

&lt;p&gt;Have a great one until next time!&lt;/p&gt;

&lt;p&gt;==== FOLLOW ME ON SOCIAL MEDIA ====&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/BradstonDev"&gt;Bradston Dev&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/bradstondev"&gt;@bradstondev&lt;/a&gt;
 &lt;br&gt;
Youtube: &lt;a href="https://www.youtube.com/channel/UC6Ky8s71RP65akLb_XV1_OA"&gt;Bradston YT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>node</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a brand style sheet for your personal projects</title>
      <author>Ewald van Veen</author>
      <pubDate>Fri, 07 May 2021 20:06:28 +0000</pubDate>
      <link>https://dev.to/ewaldvanveen/create-a-brand-style-sheet-for-your-personal-projects-3ehl</link>
      <guid>https://dev.to/ewaldvanveen/create-a-brand-style-sheet-for-your-personal-projects-3ehl</guid>
      <description>&lt;p&gt;As a developer, building and creating projects obviously doesn't stop when you close your laptop at the end of a working day. No doubt you got tons of cool personal ideas waiting to be shared with the world. Whether it's a small project just to try something new or an awesome new website that actually makes it to the web, you want to give every project your own personal touch.&lt;/p&gt;

&lt;p&gt;However, a common 'problem' we may run into, especially when building a website or application with a frontend, is that our project not only needs to &lt;em&gt;do&lt;/em&gt; what it's supposed to do but it also needs to &lt;em&gt;look&lt;/em&gt; nice. Creating a design for your app or site is a part of the project many developers are not very fond of, resulting in ideas with a promising start but with a disappointing ending in some GitHub repository.&lt;/p&gt;

&lt;p&gt;But it doesn't have to be this way. This blog post gives you a practical instruction that will help you creating a look and feel for your website or application that you can be proud of. I want to share with you how you can create a simple &lt;em&gt;brand style sheet&lt;/em&gt; that you can then use for your project. The goal here is not to write a thick document covering all possible media types, but to create a basic overview which covers the most important aspects of your design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzAfQP1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5olkmb26hwtyyramt9af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzAfQP1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5olkmb26hwtyyramt9af.png" alt="Icon of Rewind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#meet-rewind"&gt;
  &lt;/a&gt;
  Meet Rewind
&lt;/h1&gt;

&lt;p&gt;Before we get started, I'd like to introduce you to &lt;em&gt;Rewind&lt;/em&gt;, the startup I'll be using as an example to create my brand style sheet for.&lt;/p&gt;

&lt;p&gt;Rewind is a new company with a website where people can buy classic films and TV series. These films and series can be bought directly on the website, but also via other people who offer films and series for sale from their own collection. It's a website for fans of classic material that cannot be found on most streaming platforms.&lt;/p&gt;

&lt;p&gt;Rewind's target audience is mainly film collectors, both young and old. The company wants to distinguish itself through offering a  unique collection of films and TV series.&lt;/p&gt;

&lt;p&gt;For the company we are going to create a design and develop it in a brand style sheet. This style sheet can then be used when building the new website to apply a consistent design that matches with what Rewind stands for and the way it wants to retain customers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-structure-of-the-brand-style-sheet"&gt;
  &lt;/a&gt;
  The structure of the brand style sheet
&lt;/h1&gt;

&lt;p&gt;The brand style sheet consists of the following parts, which we will discuss per part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Color&lt;/li&gt;
&lt;li&gt;Typography&lt;/li&gt;
&lt;li&gt;Logo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are all kinds of programs in which you can create your style sheet. I will use Photoshop, but a program like Word or PowerPoint can also be a good alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iigzzzMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kzp0tn9b8atjdowgnvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iigzzzMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kzp0tn9b8atjdowgnvt.png" alt="Brand values uniqueness, trust, fun"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#brand-values"&gt;
  &lt;/a&gt;
  Brand Values
&lt;/h1&gt;

&lt;p&gt;Before you can start thinking about creating a brand style sheet, take a step back and think about the brand itself. In order to achieve a production-worthy end result for your website or application, it is important to think about what you want your product, your brand, to stand for. You base the design of your product on these values. Whether this is selling old films and series or a cool, new to-do app ;-), you want your website or application to set the right tone.&lt;/p&gt;

&lt;p&gt;Think about this for a moment and try to come up with some concrete terms that together reflect how you want your website or application to be recognized by your users or clients.&lt;/p&gt;

&lt;p&gt;For Rewind this resulted in the following brand values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Uniqueness&lt;/em&gt; - because of the unique collection I already mentioned.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Trust&lt;/em&gt; - people should feel they are dealing with a company they can trust.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Fun&lt;/em&gt; - we're talking about a hobby here, so people should enjoy visiting the website and browsing for hidden gems for their collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBKhzjGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrcunbxk1323vdb555d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBKhzjGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrcunbxk1323vdb555d6.png" alt="The color part of the brand style sheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#color"&gt;
  &lt;/a&gt;
  Color
&lt;/h1&gt;

&lt;p&gt;Based on the brand values ​​that you have come up with for your website or application, you have to look for a matching color scheme. You can evoke the right feeling among users of your application via the right set of colors. Of course people can have different associations with the same color, but basically each color represents it's own set of emotions and feelings.&lt;/p&gt;

&lt;p&gt;When you search the internet you'll come across a lot of sites that explain which color has which meaning (&lt;a href="https://graf1x.com/color-psychology-emotion-meaning-poster"&gt;example&lt;/a&gt;). You can use this to create a color scheme with colors that are a match with your brand values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-color-wheel"&gt;
  &lt;/a&gt;
  Using the color wheel
&lt;/h3&gt;

&lt;p&gt;Start by choosing one primary color. This will be the color that will serve as the main color for your design. You can then add one or more accent colors. A color wheel can help you to pick the right accent colors. A color wheel shows, based on a basic color, which colors match well. I personally find the &lt;a href="https://color.adobe.com/create/color-wheel"&gt;Adobe color wheel&lt;/a&gt; a very nice tool to use.&lt;/p&gt;

&lt;p&gt;Looking at the brand values for Rewind, these are the colors that could be used as primary colors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trust - blue&lt;/li&gt;
&lt;li&gt;Fun - orange&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For my brand value 'Uniqueness' it's a bit harder to find a matching color, although purple could be a fit. Based on this, I decided to go for a color scheme with the calm and reliable blue as the primary color, combined with the fresh, playful orange as an accent color. I will not use purple for the time being, to keep things simple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#color-palettes"&gt;
  &lt;/a&gt;
  Color palettes
&lt;/h3&gt;

&lt;p&gt;As you can see on Adobe's color wheel page, there are multiple color palettes to choose from, from monochrome to triadic. It's beyond the scope of this blog post to explain what each palette means. I recommend you to play with the color wheel with a chosen primary color as a starting point to discover which color combinations go well together. Keep it simple and clear. As you will see, there are also color palettes that consist of only 1 color with a number of variations.&lt;/p&gt;

&lt;p&gt;Back to Rewind. After spinning the color wheel for some time, I ended up with a mix of blue and orange that will be the starting point for my color scheme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blue (#0B398F)&lt;/li&gt;
&lt;li&gt;Dark blue (#0C1F42)&lt;/li&gt;
&lt;li&gt;Orange (#ED472B)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#contrast"&gt;
  &lt;/a&gt;
  Contrast
&lt;/h3&gt;

&lt;p&gt;Before finalizing your color scheme, it's important to check whether the colors you've chosen provide enough contrast in combination with your font color. Websites with poor contrast ratios can be an unpleasant experience for visually impaired visitors. The Web Content Accessibility Guidelines (WCAG) recommend to maintain a minimum contrast ratio of 4.5:1 between text and background. This means that the font color must be at least 4.5 times darker or lighter comparing to the background color. A useful site to check this is, for example, &lt;a href="https://accessible-colors.com/"&gt;accessible colors&lt;/a&gt;. If the color does not fall within the guidelines, the site comes up with an alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hyJD-2WF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uf1vw2prc8bxlagvtbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hyJD-2WF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uf1vw2prc8bxlagvtbd.png" alt="Example of the chose font types, which are Source Serif Pro and Source Sans Pro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typography"&gt;
  &lt;/a&gt;
  Typography
&lt;/h1&gt;

&lt;p&gt;Just like chosing a color scheme, the starting point with typography is to pick only a few font types. 2 or maybe 3 types should be sufficient for your project. Make sure that the fonts you choose differ enough from each other so that it's clear to the user. Consider, for example, a combination of a serif and a sans-serif font (&lt;a href="https://www.fonts.com/content/learning/fontology/level-1/type-anatomy/type-classifications"&gt;an extensive explanation of the different types of classifications can be found here&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match-with-your-brand-values"&gt;
  &lt;/a&gt;
  Match with your brand values
&lt;/h3&gt;

&lt;p&gt;Again try to match your chosen fonts with the established brand values. For example, a classic font may not be the best choice if you are building an application that primarily wants to create a sense of energy and fun. It seems obvious, but it's important to take this into account.&lt;/p&gt;

&lt;p&gt;Finding good font pairings can be tricky. If you're not sure about which fonts are a good match, try choosing 2 types that are created by the same designer. Designers often create a new font based on other fonts they created.&lt;/p&gt;

&lt;p&gt;For Rewind I've chosen a combination of a sans-serif type for the body content and a serif type for the headings. The fonts I'm using can be found on &lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;, where you can choose among an extensive number of fonts that are free to use within your application. What I'm trying to achieve with the fonts I've chosen is to create a sense of reliability through a classic heading style, combined with a more modern font for the body of my content to give the site a fresh and enjoyable look.&lt;/p&gt;

&lt;p&gt;The fonts I've chosen are from the same designer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Headings: Source Serif Pro&lt;/li&gt;
&lt;li&gt;Body: Source Sans Pro&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2DAlCjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7615dypyzta2omlurzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2DAlCjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7615dypyzta2omlurzb.png" alt="Logo of Rewind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#logo"&gt;
  &lt;/a&gt;
  Logo
&lt;/h1&gt;

&lt;p&gt;Designing logos requires a different set of skills. However, there are many good tutorials and tools on the web that can help you creating your own logo. As with many new skills, this probably will be a process of trial and error.&lt;/p&gt;

&lt;p&gt;Try to stick to the choices you have made in the steps before to give your application a consistent look and feel. Get inspired by examples on the web and (of course :-)): try not to make it too complicated.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The result
&lt;/h1&gt;

&lt;p&gt;Putting it all together, you created a simple brand style sheet containing the most important parts for your application.&lt;/p&gt;

&lt;p&gt;The brand stylesheet for Rewind ended up looking like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZiz5YHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uflq95rq71q1e17xxst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZiz5YHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uflq95rq71q1e17xxst.png" alt="Brand style sheet result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember, it doesn't matter how your brand style sheet looks like. The most important thing is that you're satisfied about the choices you've made and that you wrote them down in some form of a document or slide.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this post I showed you that creating your own design doesn't have to be very difficult. Start by thinking about what message you want to communicate to the users of your app or the visitors of your website. What does your product or your service stand for? When people think about your product, what should they feel? &lt;/p&gt;

&lt;p&gt;As a result of this process try to extract a list of brand values which you believe will set the right tone for your product. With these values in place, you can then create a brand style sheet. By chosing colors, fonts and creating a logo that matches with the brand values, you got yourself a design for your website or app that will help you to send the right message to your users or clients. Sticking to the brand style sheet when you're building your site or app will give your project a consistent look and feel.&lt;/p&gt;

&lt;p&gt;Thank you for taking the time to read this post! If you have any questions about the subject feel free to respond. I just started blogging, so any feedback would be be appreciated. :-) &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>ux</category>
    </item>
    <item>
      <title>Set up automated deployments with Google Cloud Run and Gitlab</title>
      <author>akinniyi</author>
      <pubDate>Fri, 07 May 2021 20:03:45 +0000</pubDate>
      <link>https://dev.to/akinniyi/set-up-automated-deployments-with-google-cloud-run-and-gitlab-53j5</link>
      <guid>https://dev.to/akinniyi/set-up-automated-deployments-with-google-cloud-run-and-gitlab-53j5</guid>
      <description>&lt;p&gt;Let's look at how we can set up a continuous delivery pipeline for our Google Cloud Run projects with Gitlab CI/CD&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;br&gt;
Google Cloud Run:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cloud Run is a serverless, managed compute platform that enables you to run stateless containers that are invocable via web requests or Pub/Sub events.&lt;br&gt;
 To run a Cloud Run service, you need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have a &lt;a href="https://console.cloud.google.com/project"&gt;Google Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://console.developers.google.com/apis/api/run.googleapis.com/overview"&gt;Enable Cloud Run API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://console.cloud.google.com/cloud-build/builds"&gt;Enable Cloud Build API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gitlab:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GitLab is a web-based DevOps lifecycle tool that provides a Git-repository manager providing wiki, issue-tracking, and continuous integration and deployment pipeline features, using an open-source license, developed by GitLab Inc.&lt;br&gt;
 You can create a Gitlab project here: &lt;a href="https://gitlab.com/projects/new"&gt;New Gitlab project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clone sample repo here:&lt;br&gt;
&lt;a href="https://gitlab.com/niyi/myhelloworldapp"&gt;https://gitlab.com/niyi/myhelloworldapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1a: Validate Service Account&lt;/strong&gt;&lt;br&gt;
A service account is a special kind of account used by an application to make authorized API calls on the GCP platform.&lt;br&gt;
On your Google Cloud project, navigate through Cloud Build &amp;gt; Settings.&lt;br&gt;
Under Service account permissions, make sure both Cloud Run and Service Accounts are enabled&lt;br&gt;
&lt;strong&gt;Step 1b: Create a Google Service Account&lt;/strong&gt;&lt;br&gt;
We'll create a new service account for your application to use&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On your Google Cloud project, navigate through IAM &amp;amp; Admin &amp;gt; Service Accounts &amp;gt; Click on CREATE SERVICE ACCOUNT
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ugq_wFf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikb4jdw0pgf35uvxf4cz.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Give your new service account any name you want and click CREATE&lt;/li&gt;
&lt;li&gt;Add the following roles to your service account by clicking Select Role input under task number 2&lt;/li&gt;
&lt;li&gt;Cloud Build Service Agent&lt;/li&gt;
&lt;li&gt;Click Create then click Done to add the account.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--shfOdUIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sse7hrlpzsezhw6no3no.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Generate a credential file for this account by navigating to the newly created service account &amp;gt; Keys &amp;gt; Click on Add Key &amp;gt; Create New Key. Select JSON and click CREATE
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPr1d7sB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byg0btv07j354147jg58.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Setup Gitlab CICD variables&lt;/strong&gt;&lt;br&gt;
In this step, we'll create variables that we'll use in our code. One for the GCP Project ID and another for the Service Account we created earlier&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigate to the project repository on Gitlab &amp;gt; Settings &amp;gt; CI/CD&lt;/li&gt;
&lt;li&gt;To add a variable, under the Variables section, click the Expand button and click on Add Variable
We need to add two variables, one names GCP_PROJECT_ID with the value of our GCP Project ID and the other named GCP_SERVICE_ACCOUNT for the content of the JSON we downloaded earlier
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlxatMnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01ijlhysfoenyxljfuo6.jpg" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJFsVr7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ldxultn8bj3k19e4745.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Setup Application code&lt;/strong&gt;&lt;br&gt;
We need to configure our code to connect to Gitlab CI/CD. We'll also use Docker to containerize our application so it runs the same across multiple platforms.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We've added a Dockerfile in our application that will run on PORT 8080, which is Google Cloud Run's default port&lt;/li&gt;
&lt;li&gt;We've also added a .gitlab-ci.yml file which is the file the triggers our &lt;a href="https://docs.gitlab.com/ee/ci/quick_start/index.html"&gt;CI/CD pipeline on Gitlab&lt;/a&gt;
*
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# File: .gitlab-ci.yml
variables:
  SERVICE_NAME: "myHelloWorldApp"

deploy:
  stage: deploy
  only:
    - master # This pipeline stage will run on this branch alone

  image: google/cloud-sdk:latest # We'll use Google Cloud SDK for Cloud Run related commands
  script:
    - echo $GCP_SERVICE_ACCOUNT &amp;gt; gcloud-service-key.json # Save Google cloud contents in a temporary json file
    - gcloud auth activate-service-account --key-file gcloud-service-key.json # Activate your service account
    - gcloud auth configure-docker # Configure docker environment
    - gcloud config set project $GCP_PROJECT_ID #Set the GCP Project ID to the variable name
    - gcloud builds submit --tag gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME #Run the gcloud build command to build our image
    - gcloud run deploy interaction --image gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME --region=us-east4 --platform managed --allow-unauthenticated # Run the gcloud run deploy command to deploy our new service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the SERVICE_NAME value with the desired name for your application and save the changes.&lt;/p&gt;

&lt;p&gt;At the end of the file, we're running the commands &lt;a href="https://cloud.google.com/run/docs/building/containers"&gt;gcloud build&lt;/a&gt; and &lt;a href="https://cloud.google.com/run/docs/deploying"&gt;gcloud run deploy&lt;/a&gt; to build and deploy our application respectively.&lt;/p&gt;

&lt;p&gt;Push your changes to the remote Gitlab repository and watch as your new baby is created.&lt;/p&gt;

&lt;p&gt;To monitor the progress of your deployment on Gitlab navigate to CI/CD &amp;gt; Pipelines and click on the latest job.&lt;br&gt;
To see your new application on Cloud Run, navigate to GCP &amp;gt; Cloud Run and search for the name of the service&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cERoaUbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3wtnne0vnv6p76aoxn4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cERoaUbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3wtnne0vnv6p76aoxn4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Join Us To Discuss Features of GitHub and Open Source</title>
      <author>Christina Gorton</author>
      <pubDate>Fri, 07 May 2021 19:59:25 +0000</pubDate>
      <link>https://dev.to/devteam/join-us-to-discuss-features-of-github-and-open-source-4o3e</link>
      <guid>https://dev.to/devteam/join-us-to-discuss-features-of-github-and-open-source-4o3e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#twitch"&gt;
  &lt;/a&gt;
  Twitch 👾
&lt;/h2&gt;

&lt;p&gt;Are you participating in the &lt;a href="https://dev.to/devteam/join-us-for-the-first-dev-community-bug-smash-3plm"&gt;DEV Community Bug Smash&lt;/a&gt;? Are you interested in contributing to other open source projects? Does GitHub confuse you?&lt;/p&gt;

&lt;p&gt;Nick Taylor and I will be on the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;Practical DEV Twitch&lt;/a&gt; stream Wednesday, May 12th 1pm ET(5pm UTC) to talk about GitHub and open source. &lt;/p&gt;

&lt;p&gt;We will discuss features you might not know exist, best practices, contributing to a project, and more.&lt;/p&gt;

&lt;p&gt;If you have questions about open source or GitHub come hang out with us and ask ALL your questions live. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bug-smash"&gt;
  &lt;/a&gt;
  Bug Smash 🐛
&lt;/h2&gt;

&lt;p&gt;If you are interested in participating in the Bug Smash event we still have several bugs ready for you to smash! &lt;/p&gt;

&lt;p&gt;You can check out the full list of bugs in our repo labeled &lt;a href="https://github.com/forem/forem/labels/bug%20smash"&gt;&lt;code&gt;bug smash&lt;/code&gt; here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Accessibility and/or Frontend:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13505"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Skip links are not the first focused element on internal navigation
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13505&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/aitchiss"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKQDnp6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/20773163%3Fv%3D4" alt="aitchiss avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/aitchiss"&gt;aitchiss&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13505"&gt;&lt;time&gt;Apr 26, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Under #1153 we added skip links to all pages in the app. A skip link should be the first element focused on a page when the user presses the Tab key - however, this is only the case in a Forem if you land directly on a URL, and not if you navigate internally, e.g. by a link click.&lt;/p&gt;
&lt;p&gt;There are several strategies available to managing focus on route change, but I would suggested the approach Marcy Sutton has written about following user testing with Fable: &lt;a href="https://www.gatsbyjs.com/blog/2019-07-11-user-testing-accessible-client-routing/" rel="nofollow"&gt;What we learned from user testing of accessible client-side routing techniques with Fable Tech Labs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The recommendation in that article is to send focus immediately to the skip link on the new page. We will need to experiment with &lt;code&gt;:focus-visible&lt;/code&gt; to ensure that for users who navigated by mouse click, the skip link isn't visible. If this isn't possible, I think an acceptable fallback would be to focus an empty element directly before the skip link, so that once on the new page, the skip link is the first item focused on Tab press.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load the home page, and press Tab. You should see the skip link appear&lt;/li&gt;
&lt;li&gt;Activate the skip link by clicking or pressing Enter&lt;/li&gt;
&lt;li&gt;Select a post using the Tab key and press enter to view it&lt;/li&gt;
&lt;li&gt;On the new page, press Tab again&lt;/li&gt;
&lt;li&gt;Notice that the skip link is not the first item focused, and if you want to get to the main post content you have to press Tab multiple more times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I select an article by keyboard on the home page&lt;/li&gt;
&lt;li&gt;On the new page the skip link is visible and focused&lt;/li&gt;
&lt;li&gt;If I repeat these actions but use the mouse, the skip link is not visible when I arrive on the new page&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13505"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13195"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Modal appears under the navbar
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13195&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/aurelieverrot"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBy2XoLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/50857179%3Fv%3D4" alt="aurelieverrot avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/aurelieverrot"&gt;aurelieverrot&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13195"&gt;&lt;time&gt;Mar 30, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The modal triggered by the three dots on the left of an article appears stuck under the navbar of the website, it is not readable entirely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After submitting an article but before publishing.
Click on the three dots on the top left of the article.
The modal will show up but a part of it is hidden behind the navbar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The modal should appear entirely to see all the links.  It can appear under the navbar, or on top of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/50857179/113064409-c6eed080-916b-11eb-80a0-9425a733ac65.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIWvzyaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/50857179/113064409-c6eed080-916b-11eb-80a0-9425a733ac65.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: MacOS Catalina 10.15.7&lt;/li&gt;
&lt;li&gt;Browser, version: Chrome Version 88.0.4324.192 (Official Build) (x86_64)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;
button id="article-show-more-button"&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13195"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Podcast:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13667"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        "Follow" text missing from Podcast Liquid tag display. 
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13667&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/cmgorton"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wm5awArh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/21039864%3Fv%3D4" alt="cmgorton avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/cmgorton"&gt;cmgorton&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13667"&gt;&lt;time&gt;May 05, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When using the podcast liquid tag in an article the button that should have "Follow" no longer displays the text. I tested this with several podcasts and none of them display the "Follow" text.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the editor to create a new post.&lt;/li&gt;
&lt;li&gt;Use the podcast liquid tag to render any of the podcasts on DEV &lt;code&gt;{% podcast url-for-episode-here %}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;click preview to preview the liquid tag&lt;/li&gt;
&lt;li&gt;Scroll down to the rendered podcast liquid tag; it will be displayed with an empty button that should contain "Follow"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;
Follow text inside of the empty button&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;
&lt;a href="https://user-images.githubusercontent.com/21039864/117168445-631c8080-ad85-11eb-8d22-2470f1704451.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KfRD2t4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168445-631c8080-ad85-11eb-8d22-2470f1704451.png" alt="Screen Shot 2021-05-05 at 9 30 24 AM"&gt;&lt;/a&gt;
&lt;a href="https://user-images.githubusercontent.com/21039864/117168460-657eda80-ad85-11eb-8e49-c457f8feb6cd.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjxuRMLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168460-657eda80-ad85-11eb-8e49-c457f8feb6cd.png" alt="Screen Shot 2021-05-05 at 9 30 57 AM"&gt;&lt;/a&gt;
&lt;a href="https://user-images.githubusercontent.com/21039864/117168469-6879cb00-ad85-11eb-8f81-00bc5a6c2fe4.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCUOudBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168469-6879cb00-ad85-11eb-8f81-00bc5a6c2fe4.png" alt="Screen Shot 2021-05-05 at 9 31 35 AM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here you can see the text is not rendered at all in the HTML
&lt;a href="https://user-images.githubusercontent.com/21039864/117168477-6a438e80-ad85-11eb-91bf-bc48db140c46.png" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwtP6Z1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21039864/117168477-6a438e80-ad85-11eb-91bf-bc48db140c46.png" alt="Screen Shot 2021-05-05 at 9 33 59 AM"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13667"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/8757"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Podcast episodes not processing HTML
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#8757&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btd6rDfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/8757"&gt;&lt;time&gt;Jun 17, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;code&gt;processed_html&lt;/code&gt; for recent podcast episodes is &lt;code&gt;nil&lt;/code&gt;.... The &lt;code&gt;body&lt;/code&gt; which is the raw content returned from the RSS, is present. So something is wrong with our pipeline.&lt;/p&gt;
&lt;p&gt;Example...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dev.to/devdiscuss/s1-e6-little-known-productivity-tools-big-productivity-gains" rel="nofollow"&gt;https://dev.to/devdiscuss/s1-e6-little-known-productivity-tools-big-productivity-gains&lt;/a&gt;&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/8757"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Miscellaneous:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/13194"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Article `date_time` validation seems to be about one hour ahead
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#13194&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/cognivore"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHSYwpFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/66186054%3Fv%3D4" alt="cognivore avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/cognivore"&gt;cognivore&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/13194"&gt;&lt;time&gt;Mar 30, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;While importing from RSS, if the time is set to approximately current (for example it's 22:00 UTC, and &lt;code&gt;date:&lt;/code&gt; is getting set to &lt;code&gt;21:57&lt;/code&gt;), dev.to deployment won't accept the post.&lt;/p&gt;
&lt;p&gt;A significant reduction in time should be applied for the post to be posted. For example, &lt;code&gt;20:57 UTC&lt;/code&gt; shall work.&lt;/p&gt;
&lt;p&gt;Expected behaviour: dev.to deployment accepts the post.&lt;/p&gt;
&lt;p&gt;Post in question: &lt;a href="https://dev.to/doma/parser-combinators-in-rust-1f2e" rel="nofollow"&gt;https://dev.to/doma/parser-combinators-in-rust-1f2e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A 10 second summary: &lt;a href="https://www.youtube.com/watch?v=4ddiTSWtwB8" rel="nofollow"&gt;https://www.youtube.com/watch?v=4ddiTSWtwB8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Reproduce&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to dev.to/settings/extensions&lt;/li&gt;
&lt;li&gt;Enter RSS feed like &lt;a href="https://doma.dev/atom.xml" rel="nofollow"&gt;https://doma.dev/atom.xml&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click Save Feed Settings&lt;/li&gt;
&lt;li&gt;Choose a post to publish, for example "Parser combinators in Rust"&lt;/li&gt;
&lt;li&gt;Click "Edit"&lt;/li&gt;
&lt;li&gt;Change time to current minus three minutes, make sure to keep the time zone intact&lt;/li&gt;
&lt;li&gt;Click "Save"&lt;/li&gt;
&lt;li&gt;Get confusing error actually advertising wrong time format!&lt;/li&gt;
&lt;li&gt;Change the time to current minus one hour and three minutes, make sure to keep the time zone intact&lt;/li&gt;
&lt;li&gt;Click "Save"&lt;/li&gt;
&lt;li&gt;Now the post saves, even though both attempts were valid&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Expected behaviour: dev.to deployment accepts the post when we click "Save" the first time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=4ddiTSWtwB8" rel="nofollow"&gt;https://www.youtube.com/watch?v=4ddiTSWtwB8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS, version: Linux, Windows&lt;/li&gt;
&lt;li&gt;Browser, version: Firefox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Smartphone (please complete the following information):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device: NAN&lt;/li&gt;
&lt;li&gt;OS, version: NAN&lt;/li&gt;
&lt;li&gt;Browser, version: NAN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ditto&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/13194"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6586"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Tag "taggings_count" are not always updated correctly
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6586&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/rhymes"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--b29X-Z_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/146201%3Fv%3D4" alt="rhymes avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/rhymes"&gt;rhymes&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6586"&gt;&lt;time&gt;Mar 11, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      

&lt;p&gt;&lt;strong&gt;Describe the bug&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each tag has an associated &lt;code&gt;taggings_count&lt;/code&gt; which contains the number of items they are associated with (in our case either articles or listings).&lt;/p&gt;
&lt;p&gt;The problem lies in the fact that some of these counts are incorrect in the DB.&lt;/p&gt;
&lt;p&gt;I found this out by playing with the Tags API which returns tags sorted by &lt;code&gt;taggings_count&lt;/code&gt; in descending order&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;archlinux&lt;/code&gt; according to the API - &lt;a href="https://dev.to/api/tags" rel="nofollow"&gt;https://dev.to/api/tags&lt;/a&gt; - is the third most used tag but it's very unlikely that is true. Its tag page - &lt;a href="https://dev.to/t/archlinux" rel="nofollow"&gt;https://dev.to/t/archlinux&lt;/a&gt; - lists 50 articles and even taking into account all listings it might have been used in, it doesn't add up&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/api/tags?per_page=15" rel="nofollow"&gt;https://dev.to/api/tags?per_page=15&lt;/a&gt; shows that &lt;code&gt;devops&lt;/code&gt; is more popular than &lt;code&gt;showdev&lt;/code&gt; but &lt;a href="https://dev.to/t/devops" rel="nofollow"&gt;devops page&lt;/a&gt; contains 2917 articles, &lt;a href="https://dev.to/t/showdev" rel="nofollow"&gt;showdev page&lt;/a&gt; contains 3110. Again, I don't think there are enough listings tagged with &lt;code&gt;devops&lt;/code&gt; to account for the difference&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, the bug.&lt;/p&gt;
&lt;p&gt;This counter is managed by automatically by the &lt;a href="https://github.com/mbleigh/acts-as-taggable-on"&gt;acts-as-taggable-on&lt;/a&gt; gem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'd expect the counter to reflect the correct number of items that have been tagged with it.&lt;/p&gt;
&lt;p&gt;I see two possible explanations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;there's an error in our setup, in respect to the &lt;a href="https://github.com/mbleigh/acts-as-taggable-on#usage"&gt;usage guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;it has something to do with tag aliasing (?)&lt;/li&gt;
&lt;li&gt;there's a bug in the gem itself. I found a few issue tickets that might point us in this direction:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mbleigh/acts-as-taggable-on/issues/929"&gt;https://github.com/mbleigh/acts-as-taggable-on/issues/929&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mbleigh/acts-as-taggable-on/issues/947"&gt;https://github.com/mbleigh/acts-as-taggable-on/issues/947&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6586"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/issues/6417"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Incomplete surrogate-key cache invalidation logic
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#6417&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btd6rDfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/issues/6417"&gt;&lt;time&gt;Mar 02, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;Currently we user surrogate keys to determine when certain endpoints should have their caches cleared, such as an article API endpoint like this...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set_surrogate_key_header Article.table_key, @articles.map(&amp;amp;:record_key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then we call &lt;code&gt;article.purge&lt;/code&gt; which magically makes any endpoint with that article's &lt;code&gt;record_key&lt;/code&gt; have its edge cache expire.&lt;/p&gt;
&lt;p&gt;More on surrogate keys...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.fastly.com/en/guides/getting-started-with-surrogate-keys" rel="nofollow"&gt;https://docs.fastly.com/en/guides/getting-started-with-surrogate-keys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The issue with the above logic is that a &lt;em&gt;new&lt;/em&gt; article which should become part of that endpoint will not flush its cache if created. So it will not show up on that endpoint until another article which fits within the above &lt;code&gt;@articles&lt;/code&gt; is purged. This makes it kind of random to find out when it will be included.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;article.purge&lt;/code&gt; is a magic method to create a purge ping which uses the appropriate surrogate header.&lt;/p&gt;
&lt;p&gt;A solution for this could be a surrogate key like this...&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set_surrogate_key_header Article.table_key, "tag-index-endpoint-#{tag}", @articles.map(&amp;amp;:record_key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and then we make a specific purge call when a new article should purge it like &lt;code&gt;purge("tag-index-endpoint-#{tag}"&lt;/code&gt; when an article is created.&lt;/p&gt;
&lt;p&gt;Our current situation isn't causing any radically wrong behavior and the "random" purging is working okay but we should look into this as we go about bigger changes here.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/issues/6417"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>devbugsmash</category>
      <category>opensource</category>
      <category>forem</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>Rethinking Jupyter Interactive Documentation</title>
      <author>Matthias Bussonnier</author>
      <pubDate>Fri, 07 May 2021 19:45:38 +0000</pubDate>
      <link>https://dev.to/quansightlabs/rethinking-jupyter-interactive-documentation-4okm</link>
      <guid>https://dev.to/quansightlabs/rethinking-jupyter-interactive-documentation-4okm</guid>
      <description>&lt;p&gt;Jupyter Notebook first release was 8 years ago – under the IPython Notebook name at the time. Even if notebooks were not invented by Jupyter; they were definitely democratized by it. Being Web powered allowed development of many changes in the Datascience world. Objects now often expose rich representation; from Pandas dataframes with as html tables, to more recent &lt;a href="https://github.com/scikit-learn/scikit-learn/pull/14180"&gt;Scikit-learn model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today I want to look into a topic that has not evolved much since, and I believe&lt;br&gt;
could use an upgrade. Accessing interactive Documentation when in a Jupyter session, and what it could become. At the end I'll link to my current prototype if you are adventurous.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-current-limitation-for-users"&gt;
  &lt;/a&gt;
  The current limitation for users
&lt;/h1&gt;

&lt;p&gt;The current documentation of IPython and Jupyter come in a few forms, but mostly have the same limitation. The typical way to reach for help is to use the &lt;code&gt;?&lt;/code&gt; operator. Depending on the frontend you are using it will bring a pager, or a panel that will display some information about the current object.&lt;/p&gt;

&lt;p&gt;It can show some information about the current object (signature, file, sub/super classes) and the raw DocString of the object.&lt;/p&gt;

&lt;p&gt;You can scroll around but that's about it whether in terminal or Notebooks.&lt;/p&gt;

&lt;p&gt;Compare it to the same documentation on the NumPy website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--myY0Vs_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/numpy-linspace-compare.png" class="article-body-image-wrapper"&gt;&lt;img alt="numpy.linspace on numpy.org" src="https://res.cloudinary.com/practicaldev/image/fetch/s--myY0Vs_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/numpy-linspace-compare.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the left is the documentation for NumPy when visiting &lt;a href="https://numpy.org"&gt;the NumPy website&lt;/a&gt;. Let's call that "rendered documentation". On the right what you get in Jupyter Lab or in the IPython or regular Python REPL, let's cal that "help documentation" since it is typically reached via &lt;code&gt;identifier?&lt;/code&gt; or &lt;code&gt;help(identifier)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Compared to rendered documentation, the help documentation is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hard to read,&lt;/li&gt;
&lt;li&gt;Has no navigation,&lt;/li&gt;
&lt;li&gt;RST Directives have not been interpreted,&lt;/li&gt;
&lt;li&gt;No inline graphs, no rendered math.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also no access to non-docstring based documentation, &lt;strong&gt;no narrative&lt;/strong&gt;, &lt;strong&gt;no tutorials&lt;/strong&gt;, &lt;strong&gt;no image gallery or examples&lt;/strong&gt;, no search, no syntax highlighting, no way to interact or modify documentation to test effects of parameters.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#limitation-for-authors"&gt;
  &lt;/a&gt;
  Limitation for authors
&lt;/h1&gt;

&lt;p&gt;Due to Jupyter and IPython limitations to display documentation I believe authors are often contained to document functions.&lt;/p&gt;

&lt;p&gt;Syntax in docstrings is often kept simple for readability, this first version is&lt;br&gt;
often preferred:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You can use ``np.einsum('i-&amp;gt;', a)`` ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the longer form, which makes the reference into a link when viewing rendered&lt;br&gt;
documentation, it is difficult to read when shown as help documentation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You can use :py:func:`np.einsum('i-&amp;gt;', a) &amp;lt;numpy.einsum&amp;gt;` ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also leads to long discussions about which syntax to use in advanced areas, like formulas in &lt;a href="https://github.com/sympy/sympy/issues/14964"&gt;Sympy's docstrings&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many projects have to implement dynamic docstrings; for example to include all the parameters a function or class would pass down using &lt;code&gt;**kwargs&lt;/code&gt; (search the matplotlib source code for &lt;code&gt;_kwdoc&lt;/code&gt; for example, or look at the &lt;code&gt;pandas.DataFrame&lt;/code&gt; implementation).&lt;/p&gt;

&lt;p&gt;This can make it relatively difficult for authors and contributors to properly maintain and provide comprehensive docs.&lt;/p&gt;

&lt;p&gt;I'm not sure I can completely predict all the side effects this has on how library maintainers write docs; but I believe there is also a strong opportunity for a tool to help there. See for example &lt;a href="https://github.com/Carreau/velin"&gt;vélin&lt;/a&gt; which attempts to auto reformat and fix common NumPyDoc's format mistakes and&lt;br&gt;
typos – but that's a subject of a future post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#stuck-between-a-rock-and-a-hard-place"&gt;
  &lt;/a&gt;
  Stuck between a Rock and a Hard place
&lt;/h1&gt;

&lt;p&gt;While Sphinx and related projects are great at offering hosted HTML documentation, extensive usage of those makes interactive documentation harder to consume.&lt;/p&gt;

&lt;p&gt;While it is possible to &lt;a href="https://github.com/spyder-ide/docrepr"&gt;run Sphinx on the fly when rendering docstrings&lt;/a&gt;, most Sphinx features only work when building a full project, with the proper configuration and extension, and can be computationally intensive. This makes running Sphinx locally impractical.&lt;/p&gt;

&lt;p&gt;Hosted websites often may not reflect the locally installed version of the libraries and require careful linking, deprecation and narrative around platform or version specific features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-fixable"&gt;
  &lt;/a&gt;
  This is fixable
&lt;/h1&gt;

&lt;p&gt;For the past few months I've been working on rewriting how IPython (and hence Jupyter) can display documentation. It works both in terminal (IPython) and browser context (notebook, JupyterLab, Spyder) with proper rendering, and currently understands most directives; it could be customized to understand any new ones:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_cdWPNWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-1.png" class="article-body-image-wrapper"&gt;&lt;img alt="papyri1" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_cdWPNWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above is the (terminal) documentation of &lt;code&gt;scipy.polynomial.lagfit&lt;/code&gt;, see how the single backticks are properly understood and refer to known parameters, it detected that  &lt;code&gt;`n`&lt;/code&gt; is incorrect as it should have double backticks; notice the rendering of the math even in terminal.&lt;/p&gt;

&lt;p&gt;For that matter technically this does not care as to whether the DocString is written in RST or Markdown; though I need to implement the latter part. I believe though that some maintainers would be quite happy to use Markdown, the syntax of which more users are familiar with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xf1mbhoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-nav.gif" class="article-body-image-wrapper"&gt;&lt;img alt="papyri navigation" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xf1mbhoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-nav.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It supports navigation – here in a terminal – where clicking or pressing enter on a link would bring you to the target page. In the above gif you can see that many tokens of the code example are also automatically type-inferred (thanks &lt;a href="https://github.com/davidhalter/jedi"&gt;Jedi&lt;/a&gt;), and can also be clicked on to navigate to their corresponding page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5nu6i5hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-terminal-fig.png" class="article-body-image-wrapper"&gt;&lt;img alt="papyri terminal-fig" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5nu6i5hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://labs.quansight.org/images/2021/05/papyri-terminal-fig.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Images are included, even in the terminal when they are not inline but replaced by a button to open them in your preferred viewer (see the &lt;code&gt;Open with quicklook&lt;/code&gt; in the above screenshot).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-future"&gt;
  &lt;/a&gt;
  The future
&lt;/h1&gt;

&lt;p&gt;I'm working on a number of other features, in particular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rendering of narrative docs – for which I have a prototype,&lt;/li&gt;
&lt;li&gt;automatic indexing of all the figures and plots –  working but slow right now,&lt;/li&gt;
&lt;li&gt;proper cross-library referencing and indexing without the need for intersphinx.
For example, it is possible from the &lt;code&gt;numpy.linspace&lt;/code&gt; page to see all pages that
reference it, or use &lt;code&gt;numpy.linspace&lt;/code&gt; in their example section
(see previous image).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many others, like showing a graph of the local references between functions, search, and preference configurability. I think this could also support many other desirable features, like user preferences (hide/show type annotation, deprecated directives, and custom color/syntax highlighting) - though I haven't started working on these. I do have some ideas on how this could be used to provide translations as well.&lt;/p&gt;

&lt;p&gt;Right now, is it not as fast and efficient as I would like to – though it's faster than running Sphinx on the fly – but requires some ahead of time processing. And it crashes in many places; it can render most of the documentation of SciPy, NumPy, xarray, IPython and scikit-image.&lt;/p&gt;

&lt;p&gt;I encourage you to think about what features you are missing when using documentation from within Jupyter and let me know. I hope this could become a nice addition to Sphinx when consulting documentation from within Jupyter.&lt;/p&gt;

&lt;p&gt;For now I've submitted a &lt;a href="https://docs.google.com/document/d/1hk-Ww7pUwnoHINNhDeP9UOPvNEemAFe-pohK5dCtZPs/edit?usp=sharing"&gt;Letter of intent to CZI EOSS 4&lt;/a&gt; in an attempt to get some of that work funded to land in IPython, and if you have any interest in contributing or want something like that for your library, feel free to reach out.&lt;/p&gt;

&lt;p&gt;You can find the repository &lt;a href="https://github.com/Carreau/papyri"&gt;on my GitHub account&lt;/a&gt;, it's still in pre-alpha stage. It is still quite unstable with too many hard coded values to my taste, and needs some polish to be considered usable for production. I've focused my effort for now mostly on terminal rendering – a Jupyter notebook or JupyterLab extension would be welcome. So if you are adventurous and like to work from the cutting (or even bleeding) edge, please feel free to try it out and open issues/pull request.&lt;/p&gt;

&lt;p&gt;It also needs to be better documented (pun intended), I'm hoping to use papyri itself to document papyri; but it needs to be a bit more mature for that.&lt;/p&gt;

&lt;p&gt;Stay tuned for more news, I'll try to explain how it works in more detail in a follow-up post, and discuss some of the advantages (and drawbacks) this project has.&lt;/p&gt;

</description>
      <category>python</category>
      <category>opensource</category>
      <category>datascience</category>
      <category>jupyter</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 07 May 2021 19:24:59 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-nbe</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-nbe</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week — what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Starting a new book ... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/EktbegF3J8QIo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/EktbegF3J8QIo/giphy.gif" alt="Pokemon party"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>How I Learn...</title>
      <author>gshah2020</author>
      <pubDate>Fri, 07 May 2021 19:11:34 +0000</pubDate>
      <link>https://dev.to/gaurangrshah/how-i-learn-2kfm</link>
      <guid>https://dev.to/gaurangrshah/how-i-learn-2kfm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-i-learn"&gt;
  &lt;/a&gt;
  How I Learn...
&lt;/h1&gt;

&lt;p&gt;Learning is no simple task. And learning how to learn is no laughing matter  &lt;/p&gt;

&lt;p&gt;🤪 Although writing that line did make me chuckle a bit.&lt;/p&gt;

&lt;p&gt;For the past 4 years, I have been on a constant journey of learning how to code. &lt;/p&gt;

&lt;p&gt;Granted, I was no #codenewbie at the beginning of this process, but I quickly realized I didn't know as much as I thought I did either. When I initially learned to program, we were taught using tools that are  no longer even relevant (☠️ RIP Flash). &lt;/p&gt;

&lt;p&gt;In those days we built websites with more photoshop than I'd care to admit. Don't believe me? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out some of these articles from back in the interweb history, talking about why photoshop is no longer a relevant web design tool:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://redbranchmedia.com/blog/design-101-photoshop-web-design-isnt-just-outdated-bad-practice/"&gt;Design 101: Photoshop for Web Design isn't Just Outdated... it's Bad Practice | Red Branch Media&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marktimemedia.com/7-reasons-stop-using-photoshop-web-design/"&gt;8 Reasons to Stop Using Photoshop For Web Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Still curious? Wondering how anyone ever built websites this way? Well, check out this tutorial on creating slices 🔪 from images using photoshop:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=DVfxe4pqvo8"&gt;https://www.youtube.com/watch?v=DVfxe4pqvo8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, the point is this wasn't my first foray into web development or scripting for that matter.  &lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ACTIONSCRIPT FTW🤘!
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/ActionScript"&gt;https://en.wikipedia.org/wiki/ActionScript&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What changed this time around was my approach. In all my other attempts with web development, I did my damnedest to avoid using code. I used tools that abstracted away from the code layer as much as possible (🤨 I'm looking at you WordPress...). &lt;/p&gt;

&lt;p&gt;I guess you could say I was #nocode before #nocode was a thing, 😔 — I wouldn't say it, but I'm sure you could. &lt;/p&gt;

&lt;p&gt;For me, the web has always been a creative outlet, and as much as I stared at and played with code it never really clicked for me back then. I thought of coding as more of a supplemental utility, rather than the foundation of my application.&lt;/p&gt;

&lt;p&gt;Eventually, my resistance to code and my need for better solutions came to an impasse. I'm sure that every #nocode afficiando even today can sympathize with this sentiment. Somehow this gave me the motivation to learn how to code and eventually started me off on this journey. &lt;/p&gt;

&lt;p&gt;I'm no expert when it comes to coding or learning for that matter, but what happened along the way in the process of learning how to code is that I also ended up developing a framework to help myself learn and intake new data. After years of learning in literally the wrong way, I realized I needed to — learn how to learn — more efficiently. &lt;/p&gt;

&lt;p&gt;So my process discussed below an amalgamation — pieced together from several different widely used learning frameworks and concepts. Personally, none of the frameworks fully addressed my needs. It took a bit of trial and error to lock down a process that worked for me.&lt;/p&gt;

&lt;p&gt;So this is the story of how that process came to be and how using it in my daily learning activities it has helped me learn more efficiently. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#losing-sight-of-the-problem"&gt;
  &lt;/a&gt;
  Losing Sight of the Problem
&lt;/h2&gt;

&lt;p&gt;Generally speaking, we as humans often approach learning as a stop in between where we are now and the destination (a.k.a. the skill or knowledge) we want to get to. So we treat it as a means to an end, and in doing so we tend to defeat the entire purpose before we even get started. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MViw5FOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/gaurangrshah/_shots%40master/scrnshots/36213.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MViw5FOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/gaurangrshah/_shots%40master/scrnshots/36213.jpg" alt="https://cdn.jsdelivr.net/gh/gaurangrshah/_shots@master/scrnshots/36213.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The other glaring issue with this approach is that it incentivizes the act of cramming, — here the destination is more like simply passing a test or just building out a partial feature of your application.&lt;/p&gt;

&lt;p&gt;My theory is that this occurs because we were never actually committed to the act of learning. &lt;/p&gt;

&lt;p&gt;Instead, we are focused on reaching that destination by passing that test or completing that feature. The act of learning, in this example, is like a fleeting pit stop along the way. Instead of retaining the knowledge or developing that skill we simply let it drift away as the moment passes. &lt;/p&gt;

&lt;p&gt;And this is where &lt;em&gt;we lose sight of the problem&lt;/em&gt;, we spent all that time learning something that will probably end up being a one-trick pony in our toolbelt at best! This is because we never internalized the knowledge to help develop that skill.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-proposed-solution"&gt;
  &lt;/a&gt;
  The Proposed Solution
&lt;/h3&gt;

&lt;p&gt;I suggest you start by reframing the context, in this approach learning can be a seen EVERY STOP along the way to our destination. Also for the sake of this example, let's imagine the destination is not just a single location, but instead — several locations along the way. And each stop - in between each destination -  represents a skill or topic you acquire while traveling from destination to destination. &lt;/p&gt;

&lt;p&gt;Learning, in this scenario, becomes an ongoing process, and depending on the topic it could even be looked at as a life-long journey. &lt;/p&gt;

&lt;p&gt;In my opinion, this is a healthy starting point for attempting to learn a new topic. It's about the journey, and making the most out of it, not necessarily about the destination and how fast we can get to it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;/p&gt;

&lt;p&gt;There are many neurological reasons why this is the case and if you're interested I suggest looking into &lt;a href="https://www.brainscape.com/academy/focused-vs-diffuse-thinking-learning/"&gt;focused and diffused learning modes&lt;/a&gt;. I also &lt;a href="https://dev.to/gaurangrshah/how-we-learn-4157"&gt;posted an article recently&lt;/a&gt; that highlights some of the main lessons learned from the discovery of these different learning modes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By reframing our intention to focus on the process rather than the result, we can now use several common techniques to help us fill in the blanks in our process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knowledge-gaps"&gt;
  &lt;/a&gt;
  Knowledge Gaps
&lt;/h2&gt;

&lt;p&gt;We all have gaps in our knowledge, this is particularly noticeable when learning an entirely new topic, but even with topics we are already familiar with - we still have some gaps in our knowledge of that topic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can't know what you don't know, but now you know... that you don't know.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So how do we being to fill those gaps in our knowledge?&lt;/p&gt;

&lt;p&gt;The first step in this approach is to identify 3 things about the subject matter: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What you know.&lt;/li&gt;
&lt;li&gt;What you don't know.&lt;/li&gt;
&lt;li&gt;What you need to know.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That sounds silly when you say it out loud, but that's the first step, realizing the difference between what you already know, and all of the things you don't know. &lt;/p&gt;

&lt;p&gt;One easy way to accomplish this is to pick up a book on the subject and turn to the table of contents. There you go. There's your outline! These are all the things you need to know about this topic (at least, according to this book you've chosen).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡&lt;br&gt;
You could also look at online courses on the topic and run through their syllabus to achieve a similar outcome. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; For technical learning, you can usually modify this approach and use the documentation as a reference instead of a book. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you're going thru each item in the table of contents — make a list, or if you have a physical copy of a book make some marks in the margins. I like to call this process identifying knowledge gaps. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sR3PZli5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/gaurangrshah/_shots%40master/scrnshots/Untitled.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sR3PZli5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/gaurangrshah/_shots%40master/scrnshots/Untitled.jpeg" alt="How%20I%20Learn%2011c1411f29b54f42a67bf6657f3a2f0b/Untitled.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you'll approach a topic and there's a prerequisite that you're also unfamiliar with, make a note of this as a blocking topic. You'll need to learn these items first before proceeding to the content you wanted to learn.&lt;/p&gt;

&lt;p&gt;For example, you want to learn how to multiply, but you've never be taught how to add. In this scenario, "addition" would be your knowledge gap, you'll need to focus on that first to progress onto the multiplication tables. &lt;/p&gt;

&lt;p&gt;Without the fundamental concept of addition, how could you possibly internalize that multiplication is like the shorthand notation for complex repetitive addition tasks?&lt;/p&gt;

&lt;p&gt;I'm not saying it isn't possible to learn one without the other, but I will say that you're very likely stacking the deck against you by attempting to do it that way.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As developers we can even utilize larger road maps to help us learn complex interconnected subjects: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://levelup.gitconnected.com/ultimate-guide-to-web-development-in-2021-beyond-roadmap-2021-6cabbf4edcc0"&gt;https://levelup.gitconnected.com/ultimate-guide-to-web-development-in-2021-beyond-roadmap-2021-6cabbf4edcc0&lt;/a&gt; - &lt;a href="https://twitter.com/codeSTACKr"&gt;@codestackr&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://zerotomastery.io/blog/learn-to-code-in-2020-get-hired-and-have-fun-along-the-way"&gt;https://zerotomastery.io/blog/learn-to-code-in-2020-get-hired-and-have-fun-along-the-way&lt;/a&gt; - &lt;a href="https://twitter.com/AndreiNeagoie"&gt;Ï&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://roadmap.sh"&gt;https://roadmap.sh&lt;/a&gt; - &lt;a href="https://twitter.com/kamranahmedse"&gt;@karanahmed&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#scope-the-problem"&gt;
  &lt;/a&gt;
  Scope the Problem
&lt;/h2&gt;

&lt;p&gt;Now that we have an outline in the form of our knowledge gaps, we can take that one step further, and dig back into the book (or reference material) we used to make our outline. &lt;/p&gt;

&lt;p&gt;This time around we're going to take each topic we identified as a gap in our knowledge in the last step as and we'll flip to the chapter that discusses it. Now we're going to first flip to the back of that chapter, and see if there are any review questions or a summary there. If we have both, then we're going to read through the summary and attempt to answer the review questions. If it's just a summary read through it and make highlights of important topics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cUOk-Nn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/gaurangrshah/_shots%40master/scrnshots/Untitled%25201.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUOk-Nn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/gaurangrshah/_shots%40master/scrnshots/Untitled%25201.jpeg" alt="How%20I%20Learn%2011c1411f29b54f42a67bf6657f3a2f0b/Untitled%201.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several learning frameworks that suggest this approach and it's by far one of my most effective methods of learning.&lt;/p&gt;

&lt;p&gt;If we currently lack the knowledge to answer a particular review question, we'll make a note of that, again if you're using a physical book, it makes a lot of sense to highlight the question so that you can refer back to it later. &lt;/p&gt;

&lt;p&gt;The last step is to make a quick bullet list in your own words of any topics that you just learned from doing this exercise. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zd5ogYhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/gaurangrshah/_shots%40master/scrnshots/Untitled%25202.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zd5ogYhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/gh/gaurangrshah/_shots%40master/scrnshots/Untitled%25202.jpeg" alt="How%20I%20Learn%2011c1411f29b54f42a67bf6657f3a2f0b/Untitled%202.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bonus Points&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;phrase your bullet points as questions, and write this answer below, this will allow you to turn this new bit of knowledge into flashcards or a quick review tool, later on. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you can repeat this step for each item on your knowledge gap list. Iterate through the list and you'll have learned a whole new topic.&lt;/p&gt;

&lt;p&gt;You can take as many or as few notes as you feel you need to. I take notes profusely. I record each and every step in the process as a reference. &lt;/p&gt;

&lt;p&gt;This helps me create a searchable index of every topic I've attempted to learn. This same data is then available to me no matter what device I am on, it's like having my own mini-wiki.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diversify"&gt;
  &lt;/a&gt;
  Diversify
&lt;/h2&gt;

&lt;p&gt;Consume content from multiple sources, take note of the different approaches.&lt;/p&gt;

&lt;p&gt;If you used a physical book as a reference in the previous examples, it makes complete sense to look to other sources to fill in some of your more complicated knowledge gaps. This is where a good quick google search will take you a long way. For more complex topics you can try StackOverflow or Reddit. &lt;/p&gt;

&lt;p&gt;Dive into some blog posts on specific topics you've identified as your knowledge gaps. Take notes along the way, be sure to constantly summarize everything you learn in your own words. This is the secret sauce. &lt;/p&gt;

&lt;p&gt;The act of summarizing alone won't help you remember the content any better, but it will provide you will relatable explanations that you can use as a review. The fact that they were written in your own words means that it will take less processing power on your part the next time you review this material. &lt;/p&gt;

&lt;p&gt;In my experience, I learn well through video, so at this stage, I'll usually hop on youtube, and try and see if I can find a video about the specific topic. I don't want an entire course (at least not yet), instead I'm looking for a brief video with a quick overview and an example. I'll take notes through the video and often even follow along if it's something technical. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA"&gt;fireship.io videos&lt;/a&gt; are particularly great for this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#review"&gt;
  &lt;/a&gt;
  Review
&lt;/h2&gt;

&lt;p&gt;Practice makes permanent&lt;/p&gt;

&lt;p&gt;Make the reviewing of your notes a daily process, block off a small chunk of time for this once in the morning and once at the end of your day. Be sure to keep adding new material you've learned into the rotation as you progress.&lt;/p&gt;

&lt;p&gt;If you phrased your summary bullet points as questions then you can use this free online tool to create flashcards out of that material:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizlet.com/features/flashcards"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you come across any difficult topics that you're having trouble wrapping your head around I suggest opening a discussion somewhere relevant and when in doubt you can ask people on Reddit or Twitter. Be sure to preface the question in the context of "Hey I'm just learning, and I have a few questions...", I find this wards off most internet trolls and invites responses from individuals who understand where you are in your journey. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build"&gt;
  &lt;/a&gt;
  Build
&lt;/h2&gt;

&lt;p&gt;This part should go without saying, but so many people don't put this into practice, including me. You should build early and often — is a programming sentiment usually expressed about deploying your application, although here it means that we should tinker with the new knowledge we gain along our learning journey at regular intervals. &lt;/p&gt;

&lt;p&gt;Did you learn a new way of fetching data? Awesome! Now go back to an older project and implement what you learned again. Do this sooner rather than later, and do it as often as you deem necessary and you will soon begin to experience the effects of those some new neural connections being formed. &lt;/p&gt;

&lt;p&gt;I think one of the keys here is to not be afraid to break things in the process and also be open to reaching out for help when you're absolutely stuck. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teach"&gt;
  &lt;/a&gt;
  Teach
&lt;/h2&gt;

&lt;p&gt;This last part is a new addition to my repertoire. I'm genuinely a very introverted person. I tend to be able to get out of my own way - long enough to do what needs to be done, - but choosing to post in a public forum about my learnings and struggles is the last thing I want to do. &lt;/p&gt;

&lt;p&gt;So this article is my way of starting on this next part of this journey, by starting a discourse about things I am interested in and things that are most relevant to me. &lt;/p&gt;

&lt;p&gt;Going forward, I want to make it a point to post about things I've learned and distill them down in ways people can relate and learn from. Hopefully, this helps someone else out there who is struggling with the topic as I did. &lt;/p&gt;

&lt;p&gt;Teaching has long been considered a great way of solidifying the concepts we're still learning. It helps us put the learning into action by forcing us to clarify the concepts in our own minds to help others reach the same understanding.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I hope this post has helped get you pumped up about applying a learning framework to your learning goals. If you find this information useful, please do feel free to pass it on to someone else who needs it. &lt;/p&gt;

&lt;p&gt;Let's just wrap things up with a brief rundown of what we learned in this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn new things by identifying your knowledge gaps and scoping the problem&lt;/li&gt;
&lt;li&gt;Look for supplemental sources of information to help clarify complex topics.&lt;/li&gt;
&lt;li&gt;Take quick notes along the way and review those notes daily.&lt;/li&gt;
&lt;li&gt;Build things, break them, and ask questions.&lt;/li&gt;
&lt;li&gt;Teach, knowledge is meant to be shared - don't be a hoarder.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>learing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are the Benefits of a Node.js E-commerce Application?</title>
      <author>Shanika Wickramasinghe</author>
      <pubDate>Fri, 07 May 2021 19:11:04 +0000</pubDate>
      <link>https://dev.to/fabric_commerce/what-are-the-benefits-of-a-node-js-e-commerce-application-4n8k</link>
      <guid>https://dev.to/fabric_commerce/what-are-the-benefits-of-a-node-js-e-commerce-application-4n8k</guid>
      <description>&lt;p&gt;&lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; is an open source, cross-platform JavaScript runtime environment that can be used to develop software applications. Using Node.js to develop e-commerce applications allows building fully-featured, scalable, and user-friendly e-commerce platforms by leveraging all the features and advantages inherent to it.&lt;/p&gt;

&lt;p&gt;Node.js offers three major benefits when developing e-commerce applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#primary-nodejs-ecommerce-benefits"&gt;
  &lt;/a&gt;
  Primary Node.js E-Commerce Benefits
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cross-compatibility"&gt;
  &lt;/a&gt;
  Cross Compatibility
&lt;/h3&gt;

&lt;p&gt;Since Node.js is cross-platform compatible, developers do not have to rely on other programming languages or frameworks to provide support for other platforms. Whether you are targeting a web-based storefront, mobile storefront, or both, Node.js can facilitate developing it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;Node.js incorporates scalability into the application development with its event-driven design. Its non-blocking event-loop mechanism enables the server to process requests seamlessly. On top of that, Node.js comes with the load balancing functionality, which facilitates distributing the application load across the CPU core without stressing out the system memory. Additionally, the ability to create &lt;a href="https://resources.fabric.inc/blog/answers/ecommerce-microservices-architecture"&gt;microservices-based architecture&lt;/a&gt; using Node.js enables developers to build e-commerce platforms that are easily scalable and capable of providing an excellent user experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ease-of-use"&gt;
  &lt;/a&gt;
  Ease of Use
&lt;/h3&gt;

&lt;p&gt;It's pretty easy to get started with Node.js with its relatively simple learning curve, &lt;a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm/"&gt;extensive package library (NPM)&lt;/a&gt;, and comprehensive documentation. Also, due to the open source nature of Node.js, developers do not have to pay a licensing fee for using it, which has widely driven the adoption of it across the IT industry. This has led to the rapid development of this platform and a vast knowledge base has become available in every corner of the internet. If a developer faces a blocker, it has most probably been encountered by someone else in the past, and the solution is just a few keystrokes away in Google.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-nodejs-ecommerce-benefits"&gt;
  &lt;/a&gt;
  Other Node.js E-Commerce Benefits
&lt;/h2&gt;

&lt;p&gt;Following are some specific benefits that Node.js offers over competing frameworks and programming languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance-optimization"&gt;
  &lt;/a&gt;
  Performance Optimization
&lt;/h3&gt;

&lt;p&gt;Node.js utilizes the &lt;a href="https://blog.stackpath.com/v8-javascript-engine/"&gt;V8 Javascript engine&lt;/a&gt; developed by Google for code interpretation which inherently offers fast execution times for applications. As Node.js supports both client-side and server-side scripting, development does not depend on other frameworks and languages, eliminating the performance impact of other frameworks and languages on the application.&lt;/p&gt;

&lt;p&gt;Another factor that impacts the performance is the I/O model. Node.js can provide non-blocking I/O operations leading to multiple requests simultaneously. This, in turn, helps to provide a faster &lt;a href="https://resources.fabric.inc/blog/modern-digital-storefront"&gt;e-commerce storefront experience&lt;/a&gt; for the customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching"&gt;
  &lt;/a&gt;
  Caching
&lt;/h3&gt;

&lt;p&gt;Node.js provides developers with the ability to cache single modules in application memory. When a developer integrates this caching feature into an e-commerce application, any requests made to the cached module will generate lightning-fast responses. In e-commerce, this is highly valuable when dealing with shopping carts and inventory management where quick responses are essential.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-data-stream"&gt;
  &lt;/a&gt;
  Single Data Stream
&lt;/h3&gt;

&lt;p&gt;The Node.js architecture is built with a single data stream structure. In this approach, the corresponding response travels through a single data stream when a request is made. When the data is in a single data stream, developers can easily process and extract the required data from the payloads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simplified-development"&gt;
  &lt;/a&gt;
  Simplified Development
&lt;/h3&gt;

&lt;p&gt;When developing an e-commerce application, it is paramount to have a simple yet functional interface that provides a great customer experience. It should also consist of a rock-solid backend to handle all the requests and meet any performance demand. Developers can use Node.js to power both &lt;a href="https://resources.fabric.inc/answers/frontend-backend"&gt;frontend and backend development&lt;/a&gt;, simplifying the overall development effort under a single umbrella.&lt;/p&gt;

&lt;p&gt;Another factor that greatly assists in Node.js development is the &lt;a href="https://www.npmjs.com/"&gt;Node Package Manager (NPM)&lt;/a&gt;. It helps developers easily find many useful libraries developed by the Node community. Those libraries will enable adding functionality to the e-commerce platform without starting from the ground level, effectively reducing development time and cost.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-nodejs-and-ecommerce-apis"&gt;
  &lt;/a&gt;
  Using Node.js and E-Commerce APIs
&lt;/h2&gt;

&lt;p&gt;One of the best ways to develop an e-commerce application is to leverage an existing e-commerce API with Node.js. E-commerce APIs like the ones offered by &lt;a href="https://fabric.inc/ecommerce-apis"&gt;Fabric&lt;/a&gt; provides developers with all the required functionality to create a robust e-commerce application.&lt;/p&gt;

&lt;p&gt;Using an e-commerce API drastically reduces the development time as almost all of the required functionality for an e-commerce platform is available via API. Also, consuming a reliable API translates to an increased reliability in the Node.js application.&lt;/p&gt;

&lt;p&gt;As the core functions are reliably and efficiently handled by an API, developers can focus on other functionality and frontend of the application to differentiate themselves and provide a great user experience.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>😢 Saying Goodbye to Axway Amplify Titanium</title>
      <author>Brenton House</author>
      <pubDate>Fri, 07 May 2021 18:39:42 +0000</pubDate>
      <link>https://dev.to/brentonhouse/saying-goodbye-to-axway-amplify-titanium-7gn</link>
      <guid>https://dev.to/brentonhouse/saying-goodbye-to-axway-amplify-titanium-7gn</guid>
      <description>&lt;p&gt;🪦   &lt;strong&gt;RIP &lt;code&gt;Axway Amplify Titanium&lt;/code&gt; (2010 - 2022)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; &lt;br&gt;
"Everything has to come to an end, sometime."&lt;/p&gt;

&lt;p&gt;      - L. Frank Baum, The Marvelous Land of Oz&lt;br&gt;
     &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#i-first-met-titanium-long-ago"&gt;
  &lt;/a&gt;
  &lt;em&gt;I first met Titanium long ago,&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#before-she-was-married-to-axway"&gt;
  &lt;/a&gt;
  &lt;em&gt;before she was married to Axway...&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Back then she was known by her maiden name:  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-appcelerator-endraw-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;Appcelerator&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;It was over 10 years ago and she was so full of life!   &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QcY_3-q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7zxw6u95i1bu0crkph0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QcY_3-q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7zxw6u95i1bu0crkph0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But first, a little background...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-name-is"&gt;
  &lt;/a&gt;
  My name is
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#brenton-house"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Brenton House&lt;/strong&gt;
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#and-i-apis"&gt;
  &lt;/a&gt;
  and &lt;strong&gt;I ❤️ APIs&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;There.      I said it.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Wait!  I thought this was about Titanium and mobile??&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-but-to-understand-mobile"&gt;
  &lt;/a&gt;
  It is.   But to understand mobile
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#i-mean-really-understand-it"&gt;
  &lt;/a&gt;
  &lt;em&gt;(I mean REALLY understand it),&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#you-have-to-understand-apis"&gt;
  &lt;/a&gt;
  you have to understand APIs.
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-had-invested-my-career-in-apis"&gt;
  &lt;/a&gt;
  I had invested my career in APIs.
&lt;/h4&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Designing, Developing, Architecting, and Evangelizing APIs.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I loved seeing the web being created and taking shape.   &lt;/p&gt;

&lt;p&gt;Communication standards and APIs of various shapes, colors, and sizes appeared (and disappeared).&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-mobile-was-going-to-change-everything"&gt;
  &lt;/a&gt;
  But mobile was going to change everything.
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I realized that mobile apps were going to make the &lt;code&gt;API market&lt;/code&gt; &lt;strong&gt;EXPLODE&lt;/strong&gt;!  There was suddenly going to be a massive growth in the number of &lt;code&gt;API consumers&lt;/code&gt; in the world!  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I never left the &lt;code&gt;API world&lt;/code&gt; but did realize that expanding my horizons to include the mobile app economy was essential to being successful with &lt;code&gt;APIs and Integrations&lt;/code&gt; in the future.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-i-am-getting-ahead-of-myself"&gt;
  &lt;/a&gt;
  &lt;strong&gt;But... I am getting ahead of myself&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Let me back up a bit...&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-1989"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 1989&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tim Berners-Lee, a British scientist, invented the World Wide Web (WWW) in 1989, while working at CERN.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wait-lets-not-go-back-that-far"&gt;
  &lt;/a&gt;
  Wait... let's not go back that far!
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2007"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2007&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;although it feels like it was just yesterday.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The mobile development market was suddenly revolutionized with the introduction of the first iPhone by Apple.  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---bZKz7nF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7enh8renliuv9igp4rhb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---bZKz7nF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7enh8renliuv9igp4rhb.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The first Android phone also released a short time after that and it became clear that developers were either going to have to become experts in both Objective-C for iPhone and Java for Android &lt;strong&gt;or some other solution was going to have to appear.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt;&lt;em&gt;PhoneGap and similar hybrid "web" mobile apps appeared but most people realized that they were never going to be a serious solution due to the lack of features and performance issues that were inherent to non-native mobile apps.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2011"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2011&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I was introduced to &lt;code&gt;Appcelerator Titanium Mobile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;She had already hit her 1.0 version milestone and had quite an active development community.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-still-remember-the-first-time-i-saw-her"&gt;
  &lt;/a&gt;
  I still remember the first time I saw her.
&lt;/h3&gt;

&lt;p&gt; &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Write once.  Run Everywhere.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;With &lt;code&gt;Appcelerator Titanium&lt;/code&gt;, I could write JavaScript code and it would create a native mobile app using Objective-C and Java for the appropriate platforms.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;WOW!!&lt;/em&gt;&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHg1rEzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wango3xk4bgbugsvu96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHg1rEzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wango3xk4bgbugsvu96.png" alt="RIP Axway"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Could it really be that easy??
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;p&gt;With the introduction of the &lt;code&gt;Appcelerator Alloy&lt;/code&gt; library for Titanium, the JavaScript features expanded to include an MVC framework with even more options for using JavaScript to access native iOS and Android features!   &lt;code&gt;Titanium Alloy&lt;/code&gt; hit version 1.0 and everything seemed like it was going so well!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2015"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2015&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Facebook released a new product: React Native, a mobile JavaScript platform that seemed to have a similar set of features to Titanium.   &lt;/p&gt;

&lt;p&gt;Also &lt;strong&gt;in 2015&lt;/strong&gt;, another JavaScript platform, NativeScript, was also released to the community.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The plans for &lt;code&gt;Titanium Alloy 2.0&lt;/code&gt; got pushed out and suddenly there was a lot more diversity (and competition) in the cross-platform native mobile market.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ykf9oXVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr96tq2zgxswg5s47pm9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ykf9oXVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr96tq2zgxswg5s47pm9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2016"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2016&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Axway acquired Appcelerator and integrated it into the &lt;code&gt;Axway Amplify Platform&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkVxGQ5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chcq51t6uwuxf0qipo77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkVxGQ5x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chcq51t6uwuxf0qipo77.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may recognize some of the different variations used to reference the &lt;code&gt;Titanium&lt;/code&gt; products over the next few months that followed!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Appcelerator Titanium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Appcelerator Titanium SDK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Appcelerator Titanium Alloy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Titanium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Titanium Mobile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Appcelerator Titanium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Appcelerator Titanium SDK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Appcelerator Titanium Alloy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Appcelerator Titanium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Appcelerator Titanium SDK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Appcelerator Titanium Alloy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Titanium Alloy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Titanium Mobile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Axway Amplify Titanium&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-2018"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is 2018&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Given my ❤️❤️❤️ for APIs and Integrations -- combined with my personal experience using &lt;code&gt;Axway Amplify Titanium&lt;/code&gt;, I joined Axway as an API Evangelist!&lt;/p&gt;

&lt;p&gt; &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Over the next couple of years, 
I was able to get creative with a lot
of fun blog posts and YouTube videos!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-can-forget-raw-breaking-the-build-endraw-and-important-topics-like-raw-tabs-vs-spaces-endraw-"&gt;
  &lt;/a&gt;
  Who can forget, &lt;code&gt;Breaking the Build&lt;/code&gt; and important topics like &lt;code&gt;Tabs vs. Spaces&lt;/code&gt;? 🤣
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qYPupvFUpf8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-raw-api-cookery-endraw-we-covered-api-management-and-integrations"&gt;
  &lt;/a&gt;
  With &lt;code&gt;API Cookery&lt;/code&gt; we covered API Management and Integrations!
&lt;/h3&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t43USof9K2w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Axway Amplify Titanium&lt;/code&gt; features continued to be added to the SDK over the next couple of years!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Although &lt;code&gt;Axway Titanium Alloy v2.0&lt;/code&gt; never materialized, I did end up forking Titanium Alloy v1 to add in a bunch of v2 type features to make Titanium easier to use with APIs and Node.js. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;It kinda spun off into its own open-source product &lt;strong&gt;&lt;a href="https://github.com/brentonhouse/titanium-turbo"&gt;&lt;code&gt;Titanium Turbo&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;.   &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9foLgOPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cdul3yn2os1mjd37q2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9foLgOPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cdul3yn2os1mjd37q2r.png" alt="Titanium Turbo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;It was super cool and I was able to use &lt;code&gt;Titanium Turbo&lt;/code&gt; to create native mobile apps faster than I could ever imagine doing before!  &lt;/p&gt;

&lt;p&gt;It also made integrating with APIs a snap (which was very important, given my ❤️ for APIs )&lt;/p&gt;

&lt;p&gt;You can see an example of using &lt;code&gt;Titanium Turbo&lt;/code&gt; in a complete API and Mobile App solution for managing the return of employees to the office, that we open-sourced last year!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHZxfTyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1362477106794360834/fidaDVoG_normal.jpg" alt="Brenton House ⭐️ API Evangelist and Strategist profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Brenton House ⭐️ API Evangelist and Strategist
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/brentonhouse"&gt;@brentonhouse&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🚀 &lt;a href="https://twitter.com/Axway"&gt;@Axway&lt;/a&gt; has open-sourced their Mobile App and API!!&lt;br&gt;&lt;br&gt;Transitioning your team back into the workplace safely can be challenging and complex but creating cross-platform native mobile apps and APIs doesn’t have to be!  &lt;a href="https://twitter.com/axwaydev"&gt;@axwaydev&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/openeverything"&gt;#openeverything&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/pfX85MkHUO"&gt;devblog.axway.com/featured/open-…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:25 PM - 27 Oct 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1321095757852823554" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1321095757852823554" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1321095757852823554" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(SPOILERS: Unfortunately, given the recent news, &lt;code&gt;Titanium Turbo&lt;/code&gt; will probably die a nice, quiet open-source death with very little fanfare...)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-year-is-now-2021"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The year is now 2021&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We have now caught up to present day but unfortunately, it also means that we've reached the end of our story.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;A few weeks ago, &lt;a href="https://devblog.axway.com/featured/product-update-changes-to-application-development-services-appcelerator/"&gt;Axway announced the End-of-Life for &lt;code&gt;Axway Amplify Titanium&lt;/code&gt;&lt;/a&gt;.    &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SeEs1Lzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wh06vwmtcm4q3j9q9l0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SeEs1Lzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wh06vwmtcm4q3j9q9l0.jpg" alt="RIP Axway Amplify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-sad-saying-goodbye"&gt;
  &lt;/a&gt;
  It's sad saying goodbye!
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Although Axway will be shutting things down &lt;strong&gt;&lt;code&gt;in March 2022&lt;/code&gt;&lt;/strong&gt;, because it is an open-source product, forks of it will still live on in the community!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;There are very few products I have been able to closely observe from cradle to grave.   It has been a pleasure to work with such an innovative and active community!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;API Integrations are sometimes difficult for people to wrap their heads around and Titanium made it easy to be able to see the power of APIs in the palm of their hands!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Titanium had a great run and 
I am grateful there are so many 
in the Titanium community, 
both past and present, 
that I can call great friends!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On a personal note, I have decided that the timing was right for me to begin a new chapter in my career and I will be leaving Axway this week. I have thoroughly enjoyed my time at Axway and have worked with some truly amazing and talented people!  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#my-love-for-apis-and-integrations-has-only-grown-stronger-over-the-past-few-years-and-i-am-going-to-continue-following-my-passion-for-evangelizing-them-to-the-community"&gt;
  &lt;/a&gt;
  My love for APIs and Integrations has only grown stronger over the past few years and I am going to continue following my passion for evangelizing them to the community!
&lt;/h4&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Connect with me &lt;a href="https://www.linkedin.com/in/brentonhouse/"&gt;on LinkedIn&lt;/a&gt; or &lt;a href="//twitter.com/brentonhouse"&gt;on Twitter&lt;/a&gt; as I continue to share what I learn about this crazy digital world we integrate with everyday!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-coding-strong"&gt;
  &lt;/a&gt;
  Keep Coding Strong!!
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

</description>
      <category>axway</category>
      <category>titanium</category>
      <category>mobile</category>
      <category>amplify</category>
    </item>
    <item>
      <title>#30DaysOfAppwrite : Week#1 Recap</title>
      <author>Christy Jacob</author>
      <pubDate>Fri, 07 May 2021 18:38:51 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-week-1-recap-4pp7</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-week-1-recap-4pp7</guid>
      <description>&lt;p&gt;Phew 😅 That was one busy week! We just finished our first week of #30DaysOfAppwrite ! Give yourself a pat on the back if you've made it through Week #1. If you haven't gone through the articles already, here's a curated reading list for the weekend 🍿&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pilot"&gt;
  &lt;/a&gt;
  🧑‍✈️ Pilot
&lt;/h3&gt;

&lt;p&gt;On Day 1, we talked about Appwrite, the &lt;a href="https://dev.to/appwrite/30daysofappwrite-4hh"&gt;#30DaysOfAppwrite&lt;/a&gt; program and how you can win some cool swags 🎁 as part of the event. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  🤩 Installation
&lt;/h3&gt;

&lt;p&gt;On &lt;a href="https://dev.to/appwrite/installing-appwrite-366o"&gt;Day 2&lt;/a&gt;, we learnt about the installation process, hosting your own Appwrite instance, and how to debug some of the most common issues you would face while installing Appwrite. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#appwrites-building-blocks"&gt;
  &lt;/a&gt;
  🧱 Appwrite’s building blocks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dev.to/appwrite/30daysofappwrite-appwrite-s-building-blocks-1936"&gt;Day 3&lt;/a&gt; followed with an in-depth walkthrough of Appwrite's building blocks. We talked in detail about the &lt;a href="https://github.com/appwrite/appwrite/blob/master/docker-compose.yml"&gt;docker-compose file&lt;/a&gt; that Appwrite uses and all the micro services in the Appwrite Stack. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%F0%9F%8E%9B-appwrite-dashboard"&gt;
  &lt;/a&gt;
  🎛 Appwrite Dashboard
&lt;/h3&gt;

&lt;p&gt;On Day 4, we switched focus to the &lt;a href="https://dev.to/appwrite/30daysofappwrite-appwrite-dashboard-15cc"&gt;Appwrite Dashboard&lt;/a&gt;. We went through all the sections of the dashboard and walked you through all of Appwrite's features! So the next time you're trying to find something, you know exactly where to look! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-request"&gt;
  &lt;/a&gt;
  1️⃣ Your first request
&lt;/h3&gt;

&lt;p&gt;Once we were familiar with the Dashboard, it was time to take the next step in the Appwrite learning journey! Making &lt;a href="https://dev.to/appwrite/30daysofappwrite-your-first-request-4oco"&gt;your first request&lt;/a&gt;. On day 5, we learnt to add Flutter and Web Platforms to your project and also made the first request to Appwrite using the Client SDK.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssl-certificates"&gt;
  &lt;/a&gt;
  🔐 SSL Certificates
&lt;/h3&gt;

&lt;p&gt;On Day 6 we talked all about &lt;a href="https://dev.to/appwrite/30daysofappwrite-ssl-certificates-c08"&gt;SSL Certificates&lt;/a&gt; and how Appwrite makes it really easy to generate SSL certificates for your domain. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%F0%9F%96%A5-server-side-sdks"&gt;
  &lt;/a&gt;
  🖥 Server Side SDKs
&lt;/h3&gt;

&lt;p&gt;On Day 7, we talked about the differences between the Server and Client Side SDKs and talked about the scenarios where you would use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%8F%AD-whats-next-"&gt;
  &lt;/a&gt;
  ⏭ What's next ?
&lt;/h2&gt;

&lt;p&gt;In the coming week, we'll start building our Medium clone. We start with an intro on the Accounts and Users API and implement user login and signup in our demo app. We then enable OAuth providers in the app, followed by enabling SMTP in Appwrite to allow users to perform email verifications and recover passwords. We will end Week #2 by integrating the Teams API, allowing you to create teams, invite members to your teams etc.  &lt;/p&gt;

&lt;p&gt;You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>flutter</category>
      <category>30daysofappwrite</category>
    </item>
    <item>
      <title>What the beep is 'this' in JavaScript</title>
      <author>Brit Hemming</author>
      <pubDate>Fri, 07 May 2021 18:23:15 +0000</pubDate>
      <link>https://dev.to/brityhemming/what-the-beep-is-this-in-javascript-483o</link>
      <guid>https://dev.to/brityhemming/what-the-beep-is-this-in-javascript-483o</guid>
      <description>&lt;p&gt;&lt;a href="https://youtu.be/6VvGJoSTaqM"&gt;Watch on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/BritHemming/pen/gOmbzbL?editors=0012"&gt;link to codepen if you want to follow along&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The 'this' keyword in JavaScript can be a confusing topic for a lot of new developers. In fact, it's a question I happened to get wrong in a job interview and as a result I've put some effort into studying and understanding it (don't want to make the same mistake twice). This blog post will go through the 4 principles of 'this' and how each one is applied in JavaScript. &lt;/p&gt;

&lt;p&gt;Let's start by talking about what 'this' means in english. If I were to tell you "Hey! Look at this" - what is this? You really have no idea what 'this' refers to unless I give you some context. If I pick up an object and point to it and say "look at this" you will quickly be able to understand that 'this' refers to the object in which I am pointing to. It's the same in JavaScript. If we give this no context at all it will return the window to us, the global object in node and undefined in strict mode. This brings us to our first principle of 'this' &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-window-binding"&gt;
  &lt;/a&gt;
  1. Window Binding
&lt;/h2&gt;

&lt;p&gt;Window binding is not something we aim to use. It's what happens when we do not give context for the 'this' keyword. If we don't tell JavaScript what 'this' is it will return the window to us, the global object in node or undefined in strict mode. &lt;br&gt;
Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sound(){
console.log(this.bark);
}

sound() // we will get back the window in the console
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This brings us to our next principle: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-implicit-binding"&gt;
  &lt;/a&gt;
  2. Implicit binding
&lt;/h2&gt;

&lt;p&gt;Implicit binding is probably the most common principle of 'this', it apply to objects with methods and it says when the function is invoked, look to the left of the dot. That's what 'this' refers to. &lt;br&gt;
Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const ada = {
name: 'Ada',
breed: 'Bali dog',
bark: 'woof woof'
sound: function(){
    console.log(this.bark);
  }
}

ada.sound(); // invoking the function. This bark refers to ada's bark because ada is the left of the dot when the function is invoked

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A good way to remember implicit binding is that it's IMPLIED that whatever is to the left of the dot when the function is invoked that's what 'this' will refer to. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-explicit-binding"&gt;
  &lt;/a&gt;
  3. Explicit Binding
&lt;/h2&gt;

&lt;p&gt;With explicit binding we explicitly pass in as an argument what we want 'this' to refer to. We do that using &lt;code&gt;.call(), .apply(), or .bind()&lt;/code&gt;. There are some differences with how we use these. &lt;br&gt;
&lt;code&gt;.call()&lt;/code&gt; - will immediately invoke the function, with .call you pass in the arguments 1 by 1&lt;br&gt;
&lt;code&gt;.apply()&lt;/code&gt; - will immediately invoke the function, with .apply you would pass in the arguments as an array&lt;br&gt;
&lt;code&gt;.bind()&lt;/code&gt; - you will pass in your arguments 1 by 1 but it does not immediately invoke the function, instead it returns a brand new function that can be invoked later. &lt;br&gt;
Let's see an example of &lt;code&gt;.call&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sound(){
console.log(this.bark);
}

const ada = {
name: 'Ada',
breed: 'Bali Dog',
bark: 'woof woof'
}

sound.call(ada); // invoking the function here and binding this bark to Ada's bark - we will get back woof woof in the console.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see an example of &lt;code&gt;.bind&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sound(){
console.log(this.bark);
}

const ada = {
name: 'Ada',
breed: 'Bali Dog',
bark: 'woof woof'
}

const goodDog = sound.bind(ada); // creating a new function called goodDog that can be invoked later

goodDog(); // we will get back bark bark in the console
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-new-binding"&gt;
  &lt;/a&gt;
  4. New Binding
&lt;/h2&gt;

&lt;p&gt;New binding is used with constructor functions. It says that when a function is invoked as a constructor function using the 'new' keyword 'this' points to the newly created object. At this point you may be asking "what is a constructor function?" Great question! A constructor function constructs other objects, that's it's whole life's purpose. Some things you may notice about a constructor function is that it has a capitalized function name, there is an assignment of the 'this' keyword and it may be missing a return statement. &lt;br&gt;
Let's see an Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Pet(name, breed, bark){
this.name = name;
this.breed = breed;
this.bark = bark;
}
Pet.prototype.sound = function(){ //here we are using the prototype keyword to abstract out the sound method so that we can pass it across newly created objects without if affecting memory
  console.log(this.bark);
}

const ada = new Pet('Ada', 'Bali Dog', 'woof woof'); // creating my new object - this.name will be 'Ada' this.breed will be 'Bali Dog' and this.bark will be 'woof woof' - 'this' is pointing to my newly created object which is ada. 

ada.sound()// will log 'woof woof'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this was helpful for you! Let me know in the comments &amp;lt;3 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
