<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>HTML tags | bdo</title>
      <author>Carlos Espada</author>
      <pubDate>Fri, 19 Nov 2021 07:22:52 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-bdo-5fnc</link>
      <guid>https://dev.to/carlosespada/html-tags-bdo-5fnc</guid>
      <description>&lt;p&gt;The &lt;code&gt;&amp;lt;bdo&amp;gt;&lt;/code&gt; element (&lt;em&gt;Bi-Directional Override&lt;/em&gt;) &lt;strong&gt;overrides the current directionality of text&lt;/strong&gt;, so that the text within is rendered in a different direction.&lt;/p&gt;

&lt;p&gt;The text's characters are drawn from the starting point in the given direction; the individual characters' orientation is not affected (so characters don't get drawn backward, for example).&lt;/p&gt;

&lt;p&gt;It has a &lt;code&gt;dir&lt;/code&gt; attribute to specify the direction in which text should be rendered in this element's contents. Possible values are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ltr&lt;/code&gt;: Indicates that the text should go in a left-to-right direction.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rtl&lt;/code&gt;: Indicates that the text should go in a right-to-left direction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most browsers will display the &lt;code&gt;&amp;lt;bdo&amp;gt;&lt;/code&gt; element with the following default CSS value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bdo {
  unicode-bidi: bidi-override;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;inline&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_bdo.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_bdo"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_bdo"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>bdo</category>
    </item>
    <item>
      <title>Git Tip: Keeping an eye on the source repository</title>
      <author>Abhinav Pandey</author>
      <pubDate>Fri, 19 Nov 2021 07:20:52 +0000</pubDate>
      <link>https://dev.to/abh1navv/git-tip-keeping-an-eye-on-the-source-repository-3jk6</link>
      <guid>https://dev.to/abh1navv/git-tip-keeping-an-eye-on-the-source-repository-3jk6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#why-do-i-need-to-check-out-a-source-repository-alongside-my-forked-repository"&gt;
  &lt;/a&gt;
  Why do I need to check out a source repository alongside my forked repository?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It helps you to compare the source code of the forked repository with the source code of the source repository.&lt;/li&gt;
&lt;li&gt;It also helps you to see the changes made in the source repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#checking-out-the-source-repository"&gt;
  &lt;/a&gt;
  Checking out the source repository
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: &lt;br&gt;
Open a Git Bash terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: &lt;br&gt;
Change directory to the directory where you have cloned the repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: &lt;br&gt;
Check out the source branch.&lt;br&gt;
Command syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add origin url_of_forked_repository
git remote add repo_name url_of_source_repository
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Runnning the command will add a remote repository named "repo_name" to the local repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: &lt;br&gt;
Fetch the source branch.&lt;br&gt;
Command syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git fetch repo_name master 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Runnning the command will fetch the master branch from the remote repository.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#comparing-the-two-repositories"&gt;
  &lt;/a&gt;
  Comparing the two repositories
&lt;/h4&gt;

&lt;p&gt;To compare the two repositories, you can use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff &lt;span class="nt"&gt;--stat&lt;/span&gt; origin/master repo_name/master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The option &lt;code&gt;--stat&lt;/code&gt; shows the number of added, deleted, and modified lines and not the actual content of the files. Don't use &lt;code&gt;--stat&lt;/code&gt; if you want to see the actual content of the files.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checking-latest-commits-in-the-source-repository"&gt;
  &lt;/a&gt;
  Checking latest commits in the source repository
&lt;/h4&gt;

&lt;p&gt;To see the latest commits in the source repository, you can use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;--oneline&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;--graph&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;--after&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;--before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;--author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;author] repo_name/master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The option &lt;code&gt;--oneline&lt;/code&gt; shows the commit message.&lt;br&gt;
The option &lt;code&gt;--graph&lt;/code&gt; is used to show the commit graph.&lt;br&gt;
The option &lt;code&gt;--after=date&lt;/code&gt; shows the commits after the date.&lt;br&gt;
The option &lt;code&gt;--before=date&lt;/code&gt; shows the commits before the date.&lt;br&gt;
The option &lt;code&gt;--author=author&lt;/code&gt; shows the commits made by the author.&lt;/p&gt;

&lt;p&gt;There can be many more options to filter the commits. Check the &lt;a href="https://git-scm.com/docs/git-log"&gt;Git log documentation&lt;/a&gt; for more information.&lt;/p&gt;




&lt;p&gt;Thank you for reading! If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt; &lt;/p&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>bash</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The Open Source Story - Open Sourcing RudderStack Blog and Docs</title>
      <author>RudderStack</author>
      <pubDate>Fri, 19 Nov 2021 07:05:37 +0000</pubDate>
      <link>https://dev.to/rudderstack/the-open-source-story-open-sourcing-rudderstack-blog-and-docs-482j</link>
      <guid>https://dev.to/rudderstack/the-open-source-story-open-sourcing-rudderstack-blog-and-docs-482j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#its-all-about-open-source"&gt;
  &lt;/a&gt;
  It's all About Open Source
&lt;/h2&gt;

&lt;p&gt;Open source is a component of almost all software development that takes place today. If you look back, the influence has been potent. For example, the main reason Python became the language most-suited for machine learning is the open-source contributors. In fact, because of the enormous size of the open-source community that is tirelessly developing Python, &lt;a href="https://www.wired.com/2015/11/google-open-sources-its-artificial-intelligence-engine/"&gt;Google open-sourced TensorFlow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Joe Worrall, Director of Open Source and Developer Advocacy at New Relic, &lt;a href="https://blog.newrelic.com/product-news/contributor-centric-systems/"&gt;describes&lt;/a&gt; the dynamics behind the power of building contributor-centric systems:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Contributors don't give to the cause. They are a part of it."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;RudderStack is an open-source customer data pipeline tool for developers. Being open source is a tag we wear with pride, so much so that we recently partnered with GitHub for &lt;a href="https://github.com/sponsors"&gt;GitHub Sponsors for Companies&lt;/a&gt;. We value the developer community that works hard to build and support open-source projects. In a recent &lt;a href="https://rudderstack.com/blog/RudderStack-gitHub-sponsors-making-open-source-more-sustainable-for-developers"&gt;blog&lt;/a&gt;, we explained why RudderStack directly compensates developers for their contributions to our project. This post discusses why and how we open-sourced our content and took the next step in our open source journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-we-open-sourced-our-blog-and-docs"&gt;
  &lt;/a&gt;
  Why we Open Sourced our Blog and Docs
&lt;/h2&gt;

&lt;p&gt;Said simply, bringing more voices to the table increases our content's quality and value, both in thought leadership and our technical documentation.&lt;/p&gt;

&lt;p&gt;We want developers to share their ideas, thoughts, and findings while working with RudderStack, customer data, and data in general. We want to learn about the data stacks you are building, problems you are solving, and solutions you are creating. Blogs, tutorials, and even case studies are great ways to share that knowledge. In short, we want you to contribute!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-previous-blog-infrastructure"&gt;
  &lt;/a&gt;
  Our Previous Blog Infrastructure
&lt;/h2&gt;

&lt;p&gt;We used &lt;a href="https://wordpress.org/"&gt;WordPress&lt;/a&gt; for our blog before we decided to open source it. WordPress itself is open source and is fantastic for its simplicity, SEO settings, advertising, and flexible themes. In fact, WordPress is the &lt;em&gt;numero uno&lt;/em&gt; choice of bloggers for hosting their own websites as per &lt;a href="https://www.techradar.com/in/best/cms"&gt;Tech Radar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From a site performance and version-control standpoint, though, it's less straightforward than more modern tooling. Also, to allow contribution, you have to use some sort of plugin (like &lt;a href="https://wordpress.org/plugins/user-submitted-posts/"&gt;User Submitted Posts&lt;/a&gt;), a less-than-ideal experience for developers, and opens up your dashboard to outside users.&lt;/p&gt;

&lt;p&gt;All-in-all, building an open-source, version-controlled blog that enables developers to create content and submit it via pull requests easily is a cumbersome and tricky process on WordPress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source-frameworks-options-for-our-blog"&gt;
  &lt;/a&gt;
  Open Source Frameworks Options for our Blog
&lt;/h2&gt;

&lt;p&gt;When we decided to open-source our blog and docs, we were spoilt for choices. Today there are multiple well-supported and fully-featured frameworks for open-source content creation. Some of the options that we considered were &lt;a href="https://ghost.org/features/"&gt;Ghost&lt;/a&gt;, &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt;, &lt;a href="https://nanoc.ws/"&gt;Nanoc&lt;/a&gt;, and &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt;. There are even more frameworks beyond these, and each tool has its pros and cons. Which one do we recommend? Well, we don't. The best tool for you is the one that fulfills your requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-we-picked-gatsby"&gt;
  &lt;/a&gt;
  Why we Picked Gatsby
&lt;/h2&gt;

&lt;p&gt;We picked &lt;a href="https://www.gatsbyjs.com/docs"&gt;Gatsby.js&lt;/a&gt; as the framework for open-sourcing our content. While making the decision, Jekyll was a strong contender, but the final choice for us was Gatsby.&lt;/p&gt;

&lt;p&gt;Here's why we chose it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Writing content in Gatsby is simple and developer-friendly. It uses Markdown for formatting. It just takes two plugins to set it up (&lt;code&gt;gatsby-source-filesystem&lt;/code&gt; and &lt;code&gt;gatsby-transformer-remark&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;  Integration with GitHub Pages is simple, which was a priority for us.&lt;/li&gt;
&lt;li&gt;  Gatsby has a rich library of plugins, which you can use for extending and introducing additional functionalities (in fact, through GitHub Sponsors, we had a &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-rudderstack/"&gt;RudderStack plugin&lt;/a&gt; made!)&lt;/li&gt;
&lt;li&gt;  Implementing Gatsby is relatively straightforward in most cases. You can check their &lt;a href="https://www.gatsbyjs.com/docs/quick-start/"&gt;docs&lt;/a&gt; to see how to get started with Gatsby.js.&lt;/li&gt;
&lt;li&gt;  Gatsby is super high performance, meaning speedy page load times.&lt;/li&gt;
&lt;li&gt;  Gatsby allows creating an interactive experience for the readers.&lt;/li&gt;
&lt;li&gt;  A vast modern web development community contributes to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wait-what-about-the-docs"&gt;
  &lt;/a&gt;
  Wait, What About the Docs?
&lt;/h2&gt;

&lt;p&gt;Our docs still run on Gitbook but are now open-sourced so that others can contribute. We are currently exploring other open-source frameworks like Slate that will give us more flexibility and better telemetry. We will write another post when we make a decision and complete the migration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-are-open-source-now"&gt;
  &lt;/a&gt;
  We are Open Source now!
&lt;/h2&gt;

&lt;p&gt;So, the RudderStack Blog and Docs are now open source. We're excited about contributions from the RudderStack community and beyond.&lt;/p&gt;

&lt;p&gt;In fact, developers have already started contributing to our documentation. Recently, &lt;a href="https://github.com/benedikt"&gt;Benedikt&lt;/a&gt; from the &lt;a href="https://userlist.com/"&gt;Userlist&lt;/a&gt; team created the &lt;a href="https://docs.rudderstack.com/destinations/userlist"&gt;docs for the Userlist destination&lt;/a&gt; for RudderStack (see the pull request &lt;a href="https://github.com/rudderlabs/rudderstack-docs/pull/12"&gt;here&lt;/a&gt;). They also built the Userlist integration, submitted a pull request, and it is now live on our platform! This is the beauty of open source!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-contribute"&gt;
  &lt;/a&gt;
  How to Contribute
&lt;/h2&gt;

&lt;p&gt;Contributing to RudderStack is simple!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Visit &lt;a href="https://github.com/rudderlabs/rudder-blog/tree/main/content/blog"&gt;RudderStack Blog&lt;/a&gt; to contribute to blogs or &lt;a href="https://github.com/rudderlabs/rudderstack-docs"&gt;RudderStack Docs&lt;/a&gt; for docs..&lt;/li&gt;
&lt;li&gt;  If you wish to add a new blog/doc, click on Create new file or Upload files as shown in the following diagram.&lt;/li&gt;
&lt;li&gt;  Also, to suggest changes to an existing file, go to the file and select Edit this file.&lt;/li&gt;
&lt;li&gt;  Once you make the changes, Click on Propose changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8X42VUn5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/97bpcflt/production/7173a9d00b74afaf1d8ee14321dad303d388b95d-1654x800.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8X42VUn5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/97bpcflt/production/7173a9d00b74afaf1d8ee14321dad303d388b95d-1654x800.png" alt="image-7173a9d00b74afaf1d8ee14321dad303d388b95d-1654x800-png" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Once your Pull Request is created, we will review the changes you've made.&lt;/li&gt;
&lt;li&gt;  If everything looks okay, our team will accept it (or edit to make it reader-friendly), and &lt;a href="https://www.merriam-webster.com/dictionary/voil%C3%A0"&gt;Voilà&lt;/a&gt;! Your changes will reflect on the pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>gatsby</category>
      <category>cdp</category>
      <category>dataengineering</category>
    </item>
    <item>
      <title>Hating windows won't make you cool</title>
      <author>NewLinuxHelper</author>
      <pubDate>Fri, 19 Nov 2021 07:02:10 +0000</pubDate>
      <link>https://dev.to/developerbishwas/hating-windows-wont-make-you-cool-28co</link>
      <guid>https://dev.to/developerbishwas/hating-windows-wont-make-you-cool-28co</guid>
      <description>&lt;p&gt;It's five years of introducing myself as a Debian user in the OS world. But I have full respect for Windows as well. Well, my dad uses Windows, but that's not the reason you should hate Windows OS.&lt;/p&gt;

&lt;p&gt;Microsoft Windows is with us from the start of OS development, from 1985. But this is also not the reason you shouldn't hate Windows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reasons-to-not-hate-windows"&gt;
  &lt;/a&gt;
  Reasons to not hate Windows
&lt;/h3&gt;

&lt;p&gt;The only reason I am stuck on Linux/Debian OS is that it is good enough to fulfil my requirements. Similarly, many people are stuck in Windows because it is good enough to fulfil their requirements. &lt;/p&gt;

&lt;p&gt;Well, one of my college friends tried Linux, he search for a piece of software to do some writing stuff, he got LibreOffice, and tried it. FOR HIM, LibreOffice wasn't good enough. I told him to use Google Docs as well, but at the end of the day, it didn't match with him.&lt;/p&gt;

&lt;p&gt;Also, he was a Valorant player friend. He search &lt;strong&gt;how to install Valorant in Linux?&lt;/strong&gt; And guess what, he got disappointed, &lt;code&gt;Valorant isn't playable in Linux, aka: BANNED&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, we need to keep in mind that if something fulfils our requirement why one should change he/her workflow.&lt;/p&gt;

&lt;p&gt;In a nutshell, we all want our tasks to be accomplished as soon as possible. If something we currently own and does the task we want without any issue, we're good to go with it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#peace&lt;/code&gt; &lt;code&gt;#linux&lt;/code&gt; &lt;code&gt;#amen&lt;/code&gt; &lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>linux</category>
      <category>windows</category>
    </item>
    <item>
      <title>What's the programming language to learn first?</title>
      <author>Vik 📈</author>
      <pubDate>Fri, 19 Nov 2021 07:01:37 +0000</pubDate>
      <link>https://dev.to/heyvik/whats-the-programming-language-to-learn-first-3ifo</link>
      <guid>https://dev.to/heyvik/whats-the-programming-language-to-learn-first-3ifo</guid>
      <description>&lt;p&gt;First of all, there is no BEST programming language to learn first. It always depend on what you want to do with that language, still, whether you want to choose programming as a hobby, as a career you have to first choose which programming language you have to learn.&lt;/p&gt;

&lt;p&gt;In this blog I will give you some options, so you can decide which programming language you could learn as your first programming language.&lt;/p&gt;

&lt;p&gt;Following me on twitter helps me a lot &lt;a href="https://twitter.com/vikstack"&gt;Follow Now&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h4&gt;

&lt;p&gt;Being one of the most popular language out there. It is used in a variety of websites including Gmail, Spotify, Facebook, and Instagram and many more. It can communicate with HTML and CSS. It is a must have when adding interactivity to websites.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#why-choose-javascript"&gt;
  &lt;/a&gt;
  Why choose JavaScript?
&lt;/h5&gt;

&lt;p&gt;If you want to try out frontend development, or even backend, you can choose JavaScript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h4&gt;

&lt;p&gt;This is also incredibly famous. Python reads like English and is easy to understand for someone who is just starting to code. Python is ideal to do web development, graphic user interfaces (GUIs), and software development. Python is often thought of as a slow language that requires more testing and is not as practical for developing mobile apps as other languages.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#why-choose-python"&gt;
  &lt;/a&gt;
  Why choose Python?
&lt;/h5&gt;

&lt;p&gt;If you’re looking for something easy, python can be a choice for you.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C
&lt;/h4&gt;

&lt;p&gt;While C is one of the more difficult languages to learn, it’s still an excellent first language pick up because almost all programming languages are implemented in it. This means that once you learn C, it’ll be simple to learn more languages like C++ and C#.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#why-choose-c"&gt;
  &lt;/a&gt;
  Why choose c#?
&lt;/h5&gt;

&lt;p&gt;If you want a solid foundation to make you a master developer, C is a solid choice for you.&lt;/p&gt;

&lt;p&gt;Here was 3 of the most famous and preferred language to use. While Python and JavaScript are for beginners and C is kinda hard to learn. &lt;/p&gt;

&lt;p&gt;Thanks for reading till here. Cheers &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Strategies How to Migrate Existing Applications to Microservices </title>
      <author>john methew</author>
      <pubDate>Fri, 19 Nov 2021 06:52:55 +0000</pubDate>
      <link>https://dev.to/johnmethew18/strategies-how-to-migrate-existing-applications-to-microservices-2cll</link>
      <guid>https://dev.to/johnmethew18/strategies-how-to-migrate-existing-applications-to-microservices-2cll</guid>
      <description>&lt;p&gt;Another set of how to migrate monolithic(Existing) application to microservices, an easy and simple steps design by DEV IT expert.&lt;/p&gt;

&lt;p&gt;Monolithic application is set of modules, business process, and all functionality in one set and various database related operation. it is easy to test and only one application to release all time.&lt;/p&gt;

&lt;p&gt;But the main issue with monolithic application is to scaling up, because whenever any bug occurs you have to check entire system and solve it out and redeploy it and that takes much time of developer. &lt;/p&gt;

&lt;p&gt;So, as the technology evolved developers has found the way to develop all require module into separate way as they deploy separately and easy to manage while any bug occurs and its called microservices. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.devitpl.com/cloud-migration/"&gt;migrating monolithic(existing) application to microservices require proper planning by an expert&lt;/a&gt;&lt;/b&gt; Below I have mentioned few practical strategies which helps to developer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a good transition plan&lt;/li&gt;
&lt;li&gt;Identify all logical modules and most independent modules.&lt;/li&gt;
&lt;li&gt;Identify inter-system relationships.&lt;/li&gt;
&lt;li&gt;Identify groups of modules.&lt;/li&gt;
&lt;li&gt;Prepare an individual service-wise database.&lt;/li&gt;
&lt;li&gt;Never allow migrated-service code to again fall in the 
monolith app.&lt;/li&gt;
&lt;li&gt;Migrate module groups to separate services and make separate 
deployments.&lt;/li&gt;
&lt;li&gt;You can also break an existing microservice into smaller ones.
Make use of the event bus to communicate between 
microservices.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Read the full article over on DEV IT journal &lt;a href="https://www.blog.devitpl.com/migrating-strategies-to-move-existing-applications-to-microservices/"&gt;https://www.blog.devitpl.com/migrating-strategies-to-move-existing-applications-to-microservices/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>monolithicapplication</category>
      <category>microservices</category>
      <category>cloudmigration</category>
      <category>devops</category>
    </item>
    <item>
      <title>What you need to know to become an automation test engineer</title>
      <author>Oswin Losper</author>
      <pubDate>Fri, 19 Nov 2021 06:45:17 +0000</pubDate>
      <link>https://dev.to/oswinlosper/what-you-need-to-know-to-become-an-automation-test-engineer-52e1</link>
      <guid>https://dev.to/oswinlosper/what-you-need-to-know-to-become-an-automation-test-engineer-52e1</guid>
      <description>&lt;p&gt;QA used to consist of two types of testing, namely, manual testing and automation testing.&lt;/p&gt;

&lt;p&gt;Manual testers main task was to do regression testing while automation tester was only focussed on writing code and scripts.&lt;/p&gt;

&lt;p&gt;The connection between the two was a rare thing, expect when the automation engineers wanted to explore additional test cases to automate.&lt;/p&gt;

&lt;p&gt;However in the world we live today, its different. Yes, both manual and automation testing is still important, I am still of the believe that automation is not there to replace manual testing, however the gap between manual and the automation world is getting smaller and smaller.&lt;/p&gt;

&lt;p&gt;Its important for manual and automation to work together, but most importantly, to make sure that both sides understands each other tasks. This is a strategy we implement at my current workplace, Wyzetalk, ever since we switched to this approach, workflow has been much more beneficial for all parties involved.&lt;/p&gt;

&lt;p&gt;When applying for new jobs, some companies requires that candidates to have experience in both manual and automation testing. This leaves the questions, where do I start to become a automation tester? What skills do I need for this?&lt;/p&gt;

&lt;p&gt;I was in the same boat years ago. I started of as a web designer, had no experience in automation testing. Thankfully, like all problems, it not a hard problem to solve, however it requires action on your part.&lt;/p&gt;

&lt;p&gt;There are 2 main focus areas to become a successful automation engineer. Keep in mind that requirements can depend on the role and can have additional requirements, but below is a list of basic requirements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#development-languages"&gt;
  &lt;/a&gt;
  Development Languages
&lt;/h4&gt;

&lt;p&gt;Number one, you need to know a specific language. Like mentioned above, this can depend on the role you are applying for, but most of the time when you know the popular languages like Java or Javascript, it should be enough&lt;/p&gt;

&lt;p&gt;You dont have to be a experienced developer but it would be good if you have enough knowledge to write automation tests and scripts. I would recommend the basic fundamentals.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes, objects, and methods&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Strings, Integers&lt;/li&gt;
&lt;li&gt;Interface concept and how to use it&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;li&gt;Arrays (single and multi-dimensional)&lt;/li&gt;
&lt;li&gt;Override and overload&lt;/li&gt;
&lt;li&gt;Access modifiers&lt;/li&gt;
&lt;li&gt;Date class&lt;/li&gt;
&lt;li&gt;Role of constructors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These should be enough to start writing automation code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#framework-for-ui-automation-testing"&gt;
  &lt;/a&gt;
  Framework for UI Automation testing
&lt;/h4&gt;

&lt;p&gt;Unit testing allows us to verify that different modules of our application are operating in the correct manner, but we also need to test applications from a UI end-to-end point.&lt;/p&gt;

&lt;p&gt;In a previous article I wrote about, I dive deeper into what you must consider in selecting a automation tool, below is a brief breakdown of breakdown in performing tests on a UI framework:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a new project in your favorite IDE&lt;/li&gt;
&lt;li&gt;Setting up dependencies in a build management system&lt;/li&gt;
&lt;li&gt;Creating a base class for the framework&lt;/li&gt;
&lt;li&gt;Setting up global properties for your project&lt;/li&gt;
&lt;li&gt;Implementing the page-object model for your project&lt;/li&gt;
&lt;li&gt;Writing test cases for your project&lt;/li&gt;
&lt;li&gt;Grouping your test cases&lt;/li&gt;
&lt;li&gt;Wiring up a tool for generating reports and screenshots for failed test cases&lt;/li&gt;
&lt;li&gt;Running your test cases efficiently by using an automation tool&lt;/li&gt;
&lt;li&gt;Analyzing the result of executed test cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;After you finished the framework, one important thing that people are not doing in the automation testing world, is to manage the automation suite, this must to be done in order for the automation tests to bring value and longevity to the quality of your project&lt;/p&gt;

&lt;p&gt;The specifics of writing UI automation code would depend on a platform (e.g mobile or desktop) and other factors, but this is basically what you need to focus your attention to.&lt;/p&gt;

&lt;p&gt;In a nut shell, write test and report on results of test cases.&lt;/p&gt;

&lt;p&gt;I hope this article will give you a better understand of what you need to do to make the switch to be a automation test engineer.&lt;/p&gt;

</description>
      <category>automation</category>
      <category>testing</category>
      <category>beginners</category>
      <category>automationengineer</category>
    </item>
    <item>
      <title>Adding reading time to Astro (the easy way)</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 19 Nov 2021 06:32:06 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/adding-reading-time-to-astro-the-easy-way-2370</link>
      <guid>https://dev.to/dailydevtips1/adding-reading-time-to-astro-the-easy-way-2370</guid>
      <description>&lt;p&gt;You may have noted this blog, along with many others out there, provides reading time.&lt;/p&gt;

&lt;p&gt;This reading time is used to indicate how long it would take to read an article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4XUhI5Z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636348952789/5aUrwl586.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4XUhI5Z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636348952789/5aUrwl586.png" alt="Reading time on a blog" width="752" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is valuable information, as sometimes you want to be aware of what you are getting into while starting to read an article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-reading-time-to-astro"&gt;
  &lt;/a&gt;
  Adding a reading time to Astro
&lt;/h2&gt;

&lt;p&gt;We'll be going for the easy way. Meaning it's not a scientific approach and more used as a guideline than a perfect number.&lt;/p&gt;

&lt;p&gt;First of all, let's take the Astro blog starter and work from there.&lt;/p&gt;

&lt;p&gt;Install the starter template with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;astro-blog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;astro-blog
npm init astro &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--template&lt;/span&gt; blog-multiple-authors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll be adding our reading time script on the post overview page so the visitor can determine which article they want to read.&lt;/p&gt;

&lt;p&gt;First, let's create the file that will determine the actual reading time for us.&lt;/p&gt;

&lt;p&gt;I created a &lt;code&gt;lib&lt;/code&gt; folder in the &lt;code&gt;src&lt;/code&gt; directory for these little scripts, creating a &lt;code&gt;readingtime.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then add the following template, which creates a function that accepts content and should return the reading time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getReadingTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open up the &lt;code&gt;components/PostPreview.astro&lt;/code&gt; and import this script like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getReadingTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../lib/readingtime.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Rest of frontmatter&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in our HTML section we can use it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getReadingTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; minutes to read&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We invoke the function and pass the HTML of the post content.&lt;br&gt;
However, nothing will happen at this point.&lt;/p&gt;

&lt;p&gt;So head back over to the &lt;code&gt;readingtime.js&lt;/code&gt; file.&lt;br&gt;
The first thing we need to do is determine what the average person reads per minute.&lt;/p&gt;

&lt;p&gt;This is widely known to be between 200/250 words, so let's stick to the lower number.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read more on the &lt;a href="https://irisreading.com/what-is-the-average-reading-speed/"&gt;number of words read per minute&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this in mind, we can create a variable that states this number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WORDS_PER_MINUTE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content we pass is pure HTML, including all kinds of HTML tags, images, etc., which we don't want to count towards the reading time.&lt;/p&gt;

&lt;p&gt;We can't use document manipulation in Astro, so let's use a regex to remove these elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getReadingTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;\/?[^&lt;/span&gt;&lt;span class="sr"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;&amp;gt;|$&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can extract the number of words from our cleaned string by splitting it into spaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numberOfWords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we can divide the number of words by our word per minute variable and round this up.&lt;/p&gt;

&lt;p&gt;Making the function look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WORDS_PER_MINUTE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getReadingTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;\/?[^&lt;/span&gt;&lt;span class="sr"&gt;&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;&amp;gt;|$&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numberOfWords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberOfWords&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;WORDS_PER_MINUTE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we now go to our website, we should see the reading times pop-up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_znyLA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636350382816/JTV8mwC-l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_znyLA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636350382816/JTV8mwC-l.png" alt="Reading time in action" width="543" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find the completed code example on &lt;a href="https://github.com/rebelchris/astro-reading-time"&gt;GitHub&lt;/a&gt; for reference purposes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>astro</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Test Your NGINX Configuration Before Screwing it Up</title>
      <author>Ravgeet Dhillon</author>
      <pubDate>Fri, 19 Nov 2021 06:22:51 +0000</pubDate>
      <link>https://dev.to/ravgeetdhillon/how-to-test-your-nginx-configuration-before-screwing-it-up-2571</link>
      <guid>https://dev.to/ravgeetdhillon/how-to-test-your-nginx-configuration-before-screwing-it-up-2571</guid>
      <description>&lt;p&gt;A little invalid change to your Nginx configuration can bring down your entire server. Before performing changes to the Nginx configuration, it is a safe idea to test the changes and then reload the server.&lt;/p&gt;

&lt;p&gt;In this tutorial, you'll learn to get started ensuring you never take production down again!&lt;/p&gt;

&lt;p&gt;Read the full blog on &lt;a href="https://adamtheautomator.com/nginx-test-config/"&gt;Adam The Automator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading 💜&lt;/p&gt;




&lt;p&gt;I publish a &lt;a href="https://www.ravsam.in/newsletter/"&gt;monthly newsletter&lt;/a&gt; in which I share personal stories, things that I am working on, what is happening in the world of tech, and some interesting dev-related posts which I across while surfing on the web.&lt;/p&gt;

&lt;p&gt;Connect with me through &lt;a href="https://twitter.com/ravgeetdhillon"&gt;Twitter&lt;/a&gt; • &lt;a href="https://linkedin.com/in/ravgeetdhillon"&gt;LinkedIn&lt;/a&gt; • &lt;a href="https://github.com/ravgeetdhillon"&gt;Github&lt;/a&gt; or send me an &lt;a href="//mailto:ravgeetdhillon@gmail.com"&gt;Email&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://www.ravgeet.in/"&gt;Ravgeet&lt;/a&gt;, &lt;em&gt;Full Stack Developer and Technical Content Writer&lt;/em&gt;&lt;/p&gt;

</description>
      <category>nginx</category>
      <category>server</category>
      <category>backend</category>
    </item>
    <item>
      <title>Reactive Frameworks 101: What they are and how they can help make your application better</title>
      <author>CloudNow Technologies</author>
      <pubDate>Fri, 19 Nov 2021 04:55:30 +0000</pubDate>
      <link>https://dev.to/cloudnowtech/reactive-frameworks-101-what-they-are-and-how-they-can-help-make-your-application-better-136d</link>
      <guid>https://dev.to/cloudnowtech/reactive-frameworks-101-what-they-are-and-how-they-can-help-make-your-application-better-136d</guid>
      <description>&lt;p&gt;Let’s start with what reactive frameworks are. To understand the term, we first split it into two components – reactive programming and reactive systems.&lt;/p&gt;

&lt;p&gt;Reactive programming (Rx) is defined as an asynchronous programming model that deals with data streams, making it possible to easily express static (arrays for instance) or dynamic (e.g. event emitters) data streams through programming languages.&lt;/p&gt;

&lt;p&gt;A reactive system on the other hand is an architectural style that enables applications made up of microservices to work together to better communicate with each other and their environment. They are event-driven, interactive, flexible, resilient, and responsive as they harness asynchronous message-driven communication. This architecture type is popular with more enterprises turning to the cloud.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Together, reactive systems and reactive programming create reactive frameworks.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Author of several programming books Bruce Eckel, and CTO of Typesafe Jonas Boner published “The Reactive Manifesto”, which explains that reactive applications need to be able to react to events (flexible), load (interactive), failure (resilient), and users (responsive).&lt;/p&gt;

&lt;p&gt;Companies that have been using Rx extensively are Netflix and Google. Take Google Maps for instance. The app places a dot on your location, which moves with you by tracking your device’s position relative to North. It submits these values to the API every few seconds, which displays the response as the moving dot. That’s reactive programming in a nutshell.&lt;/p&gt;

&lt;p&gt;As for Netflix, the digital streaming service receives hundreds of billions of requests every single day and needs to run all these “events” alongside each other to produce quick and reliable responses to consumer clicks. All possible because of reactive programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That brings us to Data Streams. What are they?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In reactive programming, all events are in the form of a data stream where information and data are pushed to the user. Reactive programming uses asynchronous non-blocking data streams. Asynchronous means you don’t have to wait for a task to be completed, you can move on to the next task until the data is available.&lt;/p&gt;

&lt;p&gt;Every event comes from a data stream. That means any messages, calls, and even failures, are going to be conveyed as a result of the stream. In reactive programming, data streams are created from events that happen as a result of variables and data structures.&lt;/p&gt;

&lt;p&gt;Data streams are in effect the foundation of your application. With Rx, you “observe” these data streams and react when it returns a value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which takes us next to Observables. What are they?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the data stream is the foundation of reactive programming, observables are the building blocks.&lt;/p&gt;

&lt;p&gt;An observable is a collection of data that waits to be invoked before it can issue data. There are two types of observables – those that require a subscription in the form of an action (cold) and those that do not (hot).&lt;/p&gt;

&lt;p&gt;For instance, if there is a download available and the user clicks on the download button, it becomes a cold observable as nothing happens unless the user interacts with the stream. A new ticker that shows live updates even without any action by the user is a hot observable.&lt;/p&gt;

&lt;p&gt;In reactive programming, every data stream is observable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are some of the key advantages of this approach&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rx makes the backend interactive
&lt;/li&gt;
&lt;li&gt;Rx makes for faster systems as it becomes simpler to do asynchronous work
&lt;/li&gt;
&lt;li&gt;Rx makes it easier to compose data streams
&lt;/li&gt;
&lt;li&gt;Rx makes the code base more readable
Rx increases the response time for consumers on account of its asynchronous nature
&lt;/li&gt;
&lt;li&gt;Rx makes the application more efficient
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For greater productivity, better resilience, and greatly improved scalability, enterprises ought to consider a reactive framework as it embraces reactive programming and reactive systems to deliver a positive experience for users. If you would like to know more about how reactive programming can help your enterprise, &lt;a href="https://www.cloudnowtech.com/contact-us.html"&gt;do get in touch&lt;/a&gt; with us at CloudNow.&lt;/p&gt;

&lt;p&gt;This blog originally published at &lt;a href="https://www.cloudnowtech.com/blog/"&gt;CloudNow Blog&lt;/a&gt;. Link to the &lt;a href="https://www.cloudnowtech.com/blog/reactive-frameworks-101-what-they-are-and-how-they-can-help-make-your-application-better/"&gt;original blog&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Understanding Apache Hive LLAP</title>
      <author>Sunny Srinidhi</author>
      <pubDate>Fri, 19 Nov 2021 04:50:55 +0000</pubDate>
      <link>https://dev.to/contactsunny/understanding-apache-hive-llap-4l60</link>
      <guid>https://dev.to/contactsunny/understanding-apache-hive-llap-4l60</guid>
      <description>&lt;p&gt;Apache Hive is a complex system when you look at it, but once you go looking for more info, it’s more interesting than complex. There are multiple query engines available for Hive, and then there’s LLAP on top of the query engines to make real-time, interactive queries more workable. Live Long And Process, or LLAP as it’s more popularly known as, is an awesome concept and execution when you learn more about it.&lt;/p&gt;

&lt;p&gt;And that’s exactly what I did, I read a few documents and other posts about LLAP and got a better understanding of it. I understood the Tez query engine too, and expect a post about it soon. In this, I’ll unpack whatever I learnt about LLAP and how it’s awesome if you use it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hive-query-engines"&gt;
  &lt;/a&gt;
  Hive Query Engines
&lt;/h2&gt;

&lt;p&gt;There are three query engines for Hive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MapReduce (MR)&lt;/li&gt;
&lt;li&gt;Tez&lt;/li&gt;
&lt;li&gt;Spark&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mapreduce-mr"&gt;
  &lt;/a&gt;
  MapReduce (MR)
&lt;/h3&gt;

&lt;p&gt;MapReduce is the first query engine that shipped with Hive, and this is also the slowest of the bunch. When you submit a Hive query with MR as the query engine, every query gets converted into MapReduce jobs and gets submitted to YARN containers. YARN, or Yet Another Resource Negotiator, is common between MR and Tez query engines. But the problem with the MR query engine is that all queries need to be converted to MR jobs. The conversion itself takes time. So you can imagine how this query engine becomes slow with a lot of latency.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-tez"&gt;
  &lt;/a&gt;
  Apache Tez
&lt;/h3&gt;

&lt;p&gt;To overcome this latency issue, Tez was introduced as a query engine with later versions of Hive. Tez uses Directed Acyclic Graphs (DAGs) to process queries instead of MapReduce jobs. This greatly reduces latency and improves the query response times. WIth the latest version of Hive, even though MR query engine is deprecated, it is the default engine. But you get the deprecation warning whenever you enter the Hive shell and a recommendation to switch to either Tez or Spark as the query engine. And it is universally suggested to switch to Tez. We’ll see why in my next post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-spark"&gt;
  &lt;/a&gt;
  Apache Spark
&lt;/h3&gt;

&lt;p&gt;Finally, we have Apache Spark as the third query engine option. And Spark, by far, is the fastest of them all. There are claims that Spark can improve the performance of Hive by as much as 100x, that’s a very bold claim. Tez doesn’t offer such high boost in performance, the much accepted boost is 10x. So you might say, well, Spark is the clear winner, right? Well, that depends! Tez and Spark both use DAGs to optimise the query performance of MR. So there can be a lot of parallel or concurrent execution of tasks in both.&lt;/p&gt;

&lt;p&gt;The choice between Tez and Spark for a query engine totally comes down to your application and needs. But no matter what you choose, LLAP and sit on top of that query engine and better the performance even more. For example, we know that Spark can cache (persist) data in memory or on disk if we need that data again. But this caching is available within the same Spark job, another Spark job can’t access that data. What if I tell you that’s possible with LLAP? I know, that’s crazy. So, let’s see what else LLAP can do.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#live-long-and-process-llap"&gt;
  &lt;/a&gt;
  Live Long And Process (LLAP)
&lt;/h2&gt;

&lt;p&gt;We’re finally going to talk about LLAP. The first you need to know, as I already made it clear, is that LLAP is not a query engine. It sits on top of the query engine to make query and data processing that much faster. If you image the various Hive components to be arranged as a stack, you have HDFS at the bottom, YARN on top of it, and then Hive itself at the top. Now imagine a layer of cache and in-memory processing on top of HDFS. This means a lot of requests don’t go to HDFS at all. That’s what, at a very high level, LLAP does.&lt;/p&gt;

&lt;p&gt;I’m definitely over-simplifying stuff when I say LLAP is a caching and in-memory processing layer. There’s definitely a better way to put it. Let me elaborate.&lt;/p&gt;

&lt;p&gt;You can think of LLAP as just another YARN application running on all data nodes in a Hadoop cluster. The only difference is that LLAP is a long-lived process (hence the name). But this doesn’t mean that it eats up all your resources. It can be configured to a very tiny process to process simple queries, or it can be configured to dynamically scale out and down whenever required. This brings in a very big difference compared to Spark. And because LLAP still work on YARN, it brings in all the advantages of YARN such as distributed nature and fault tolerance.&lt;/p&gt;

&lt;p&gt;LLAP runs daemon processes on data nodes, and these daemons are not tied to a user who is issuing Hive queries. And this is a very important distinction, because this allows LLAP to reuse cached data across users. So you and I both fire similar queries on the same table, LLAP will be able to use the cache that’s already available for both our queries, and that’ll boost the performance for both of us. Without LLAP, both the queries would have to perform the same operations individually. And you can imagine how that’s not very optimal.&lt;/p&gt;

&lt;p&gt;LLAP is not a query engine, and it’s optional&lt;br&gt;
You should’ve realised by now, LLAP is completely optional. It’s not mandatory to use LLAP for Hive queries. You only use LLAP if you want to improve the responsiveness of Hive queries both in interactive and batch modes. Even when you use LLAP, it’s not like every and all parts of a query are executed within LLAP. LLAP is not meant for that, that’s what query engines are for. LLAP takes parts of the queries that can benefit by using the cache or the long lived processes.&lt;/p&gt;

&lt;p&gt;LLAP doesn’t promise anywhere that it’ll execute the entire query itself. In fact, it’s actually the query engines that orchestrate what can go into LLAP and what can’t. And for now query engine Tez and other frameworks such as Pig can use LLAP in their stack. Unfortunately, support for MapReduce is not yet planned, and don’t hold your breath on this.&lt;/p&gt;

&lt;p&gt;And because LLAP is still built to work with YARN, the resource allocation is completely in control of YARN. This is also the reason LLAP daemon nodes are able to talk to each other and share data across nodes. Another advantage here is that the daemon processes themselves don’t require a lot of resources to function. YARN allocates the minimum required for the processes themselves and will increase the resource allocation as and when required depending on the workload. And to avoid heap issues or JVM memory issues, cached data is always kept off-heap and in large buffers. So processing of aggregations such as group by and joins will be much faster in LLAP compered to query engines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#query-fragments"&gt;
  &lt;/a&gt;
  Query fragments
&lt;/h3&gt;

&lt;p&gt;I already mentioned that LLAP usually executes parts of queries and not usually the complete query. These parts of queries are known as query fragments. These fragments include filters, data transformations, partial aggregations, projections, sorting, bucketing, joins, semi-joins, hash joins, etc. And it is to be noted that only certain “blessed” UDFs and Hive code are accepted into LLAP.&lt;/p&gt;

&lt;p&gt;For stability of the process and security of the data, LLAP doesn’t localise any code, and executes on the fly. And because the daemon is not tied to any particular user (as already mentioned), an LLAP node can allow parallel execution of various query fragments, across queries and sessions. This is one of the primary reasons for improved performance. Another good news, for developers specifically, is that LLAP APIs are directly available via client SDKs. You can directly specify relational transformations using these APIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#input-and-output"&gt;
  &lt;/a&gt;
  Input and Output
&lt;/h3&gt;

&lt;p&gt;As I already mentioned, the daemons themselves have a very small footprint, and that’s because everything else is mostly done by offloading the work to multiple threads. Input and output, for example, are offloaded to threads. And transformations are done in separate threads. So as soon as an I/O thread makes the data ready, the data is passed on to separate threads for processing. This makes the I/O threads available for new I/O operations.&lt;/p&gt;

&lt;p&gt;The data is passed further in the process to other threads in run-length encoded (RLE) columnar format. This reduces copying data across threads and processes to a great extent. And by extension, caching is also in the same RLE format. You can start seeing the benefits here.&lt;/p&gt;

&lt;p&gt;I/O and caching depend heavily on the knowledge of the file format that the data is stored in. This is necessary if I/O and caching have to be performant. So LLAP has externalized this knowledge with the help of plugins. And to start with ORC is the first file format supported by LLAP. This is one of the reasons why there is an increase in the adoption of ORC as the preferred file format for external Hive tables.&lt;/p&gt;

&lt;p&gt;When it comes to caching, both metadata and the data itself are cached. As I mentioned in previous sections, data is cached off-heap to avoid other potential issues. But metadata, on the other hand, is stored in-process as Java objects. This makes sure that even if the data itself is evicted from the cache, the metadata is still in memory to avoid some overhead.&lt;/p&gt;

&lt;p&gt;I touched upon data eviction in cache. And as you might expect, there are various policies for data eviction. By default, LRFU policy is used. But you can plug in any other policy at any time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transactions"&gt;
  &lt;/a&gt;
  Transactions
&lt;/h3&gt;

&lt;p&gt;This is one big area of debate in Hive, to transact or not to transact. But that’s a topic for a separate blog post. When it comes to LLAP, it understands transactions. And it is smart enough to perform transformations (such as merging or delta files) before the data is cached. If there are various transactions performed on the same tables, which is usually the case, LLAP can store multiple versions of data for each such variation. And the correct version will be fetched from the cache on the fly depending on the query. This will make sure that the same set of transformations are not being performed on the same data over and over again, thereby reducing a lot of processing time.&lt;/p&gt;




&lt;p&gt;Understanding LLAP doesn’t stop here. There’s a lot more to it, and the more you try to understand it, the more interesting it becomes. I’m planning to write more about it as and when I explore more. But for now, this is all I have. Understanding how LLAP works will make it a lot easier to write queries, and also to write queries in a way that can make use of these optimisations to reduce latency. I hope this helped you a slight bit with your Hadoop or Hive journey.&lt;/p&gt;




&lt;p&gt;And if you like what you see here, or on my &lt;a href="https://medium.com/@contactsunny"&gt;Medium blog&lt;/a&gt; and &lt;a href="https://blog.contactsunny.com"&gt;personal blog&lt;/a&gt;, and would like to see more of such helpful technical posts in the future, consider supporting me on &lt;a href="https://www.patreon.com/contactsunny"&gt;Patreon&lt;/a&gt; and &lt;a href="https://github.com/sponsors/contactsunny"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>bigdata</category>
      <category>datascience</category>
      <category>database</category>
      <category>apachehive</category>
    </item>
    <item>
      <title>Measure docstring coverage of Python packages with GitHub Actions</title>
      <author>epassaro</author>
      <pubDate>Fri, 19 Nov 2021 04:42:41 +0000</pubDate>
      <link>https://dev.to/epassaro/measure-docstring-coverage-of-python-packages-with-github-actions-1cp8</link>
      <guid>https://dev.to/epassaro/measure-docstring-coverage-of-python-packages-with-github-actions-1cp8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;Maintainers should enforce collaborators to document their changes.&lt;/p&gt;

&lt;p&gt;This workflow fails when the docstring coverage is lower than the score of the base branch (on pull requests) or the previous commit (on push), and files that made the job fail are blamed.&lt;/p&gt;

&lt;p&gt;Pushing changes to the main branch should update the current coverage of the project by creating a dynamic badge through the &lt;a href="https://shields.io/endpoint"&gt;shields.io&lt;/a&gt; endpoint.&lt;/p&gt;

&lt;p&gt;Also, it's possible to define the range of the badge color based on the coverage results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/epassaro"&gt;
        epassaro
      &lt;/a&gt; / &lt;a href="https://github.com/epassaro/docstr-cov-workflow"&gt;
        docstr-cov-workflow
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Measure docstring coverage of Python packages with GitHub Actions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
docstr-cov-workflow&lt;/h1&gt;
&lt;p&gt;Measure docstring coverage of Python packages with GitHub Actions&lt;/p&gt;
&lt;h3&gt;
Usage&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Copy &lt;code&gt;.github/workflows/docstr-cov.yml&lt;/code&gt; and  &lt;code&gt;.docstr.yaml&lt;/code&gt; to your repository.&lt;/li&gt;
&lt;li&gt;Tweak the configuration file following the &lt;a href="https://github.com/HunterMcGushion/docstr_coverage#config-file"&gt;package documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Login to &lt;a href="https://jsonbin.org" rel="nofollow"&gt;https://jsonbin.org&lt;/a&gt; and store the API key as a repository secret named &lt;code&gt;JSONBIN_APIKEY&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The workflow will fail if the coverage is lower than the score of the base branch (on &lt;code&gt;pull_request&lt;/code&gt;) or the previous commit (on &lt;code&gt;push&lt;/code&gt;), and files that made the job fail will be blamed.&lt;/li&gt;
&lt;li&gt;Pushing to &lt;code&gt;main&lt;/code&gt; branch updates the current coverage of the project by updating a nice badge.&lt;/li&gt;
&lt;li&gt;You can change the color range of the badge by tweaking the &lt;code&gt;RANGE&lt;/code&gt; variable at the top of the workflow. For example, &lt;code&gt;50..75&lt;/code&gt; means that coverage below &lt;code&gt;50&lt;/code&gt; will display a red badge, and above &lt;code&gt;75&lt;/code&gt; a green one.&lt;/li&gt;
&lt;li&gt;Remember to add the badge to your README.md&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
Example&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f89948fc09095e6ca9993feaa5f2b30bbcdf61be38b5458411916a33e1c05225/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f6a736f6e62696e2e6f72672f657061737361726f2f646f637374722d636f762d776f726b666c6f772f6261646765732f646f637374722d636f76"&gt;&lt;img src="https://camo.githubusercontent.com/f89948fc09095e6ca9993feaa5f2b30bbcdf61be38b5458411916a33e1c05225/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f6a736f6e62696e2e6f72672f657061737361726f2f646f637374722d636f762d776f726b666c6f772f6261646765732f646f637374722d636f76" alt="docstr-cov"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make changes to &lt;code&gt;example/base.py&lt;/code&gt; and see the workflow…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/epassaro/docstr-cov-workflow"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;An &lt;a href="https://github.com/tardis-sn/tardis/blob/master/.github/workflows/docstr-coverage.yml"&gt;older version&lt;/a&gt; of this workflow is currently used by &lt;a href="https://github.com/tardis-sn"&gt;TARDIS-SN&lt;/a&gt;, a Montecarlo radiative transfer code that creates synthetic spectra for supernovae.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/epassaro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ASgNKYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HsPDDyer--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/153937/0f98dd59-8ed3-4b1a-98fc-f6c903a48fb8.jpg" alt="epassaro"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/epassaro/how-to-keep-track-of-docstring-coverage-of-python-packages-on-ci-41fc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to keep track of docstring coverage of Python packages on CI&lt;/h2&gt;
      &lt;h3&gt;epassaro ・ Nov 19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#actionshackathon21&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>actionshackathon21</category>
    </item>
  </channel>
</rss>
