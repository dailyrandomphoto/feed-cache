<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Display Hostname and IP address using Python</title>
      <author>Nishant Gour</author>
      <pubDate>Wed, 26 May 2021 08:49:36 +0000</pubDate>
      <link>https://dev.to/nishantgour/display-hostname-and-ip-address-using-python-5hng</link>
      <guid>https://dev.to/nishantgour/display-hostname-and-ip-address-using-python-5hng</guid>
      <description>&lt;p&gt;In this article, We are going to see how to Display the hostname and the IP address with the help of the language Python.&lt;/p&gt;

&lt;p&gt;As we all know about IP, IP (Internet Protocol) is a fundamental networking concept that provides address assignation capability in a network. &lt;/p&gt;

&lt;p&gt;How we are going to do it?.  so we will be using the socket module of python&lt;/p&gt;

&lt;p&gt;Python provides gethostname(),gethostbyname() two function.&lt;br&gt;
gethostname() retrives the standard host name for the local machine. gethostbyname() retrives host information corresponding to a host name from a host database.&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import socket
hostname = socket.gethostname()
ip_address = socket.gethostbyname(hostname)
print(f"Hostname: {hostname}")
print(f"IP Address: {ip_address}")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's discuss the above 5 lines of code..&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In our first line, we have imported our socket module.&lt;/li&gt;
&lt;li&gt;in second-line we are getting the hostname by socket.gethostname() method.&lt;/li&gt;
&lt;li&gt;The third line we retrives host information corresponding to a hostname from a host database.&lt;/li&gt;
&lt;li&gt;and then the last two lines are for printing them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this is a short and sweet article for all of you!&lt;/p&gt;

&lt;p&gt;I hope you liked it!. Let's catch up in the next articles. &lt;/p&gt;

&lt;p&gt;original published on : &lt;a href="https://codingnuts.tech/"&gt;https://codingnuts.tech/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you liked it, Please &lt;strong&gt;Support Me&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nishantgour"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZmDDNkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dnishantgour%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>pythonprogramming</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 20 Tips that will change your coding skills forever</title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Wed, 26 May 2021 08:04:44 +0000</pubDate>
      <link>https://dev.to/line/top-20-tips-that-will-change-your-coding-skills-forever-4cb1</link>
      <guid>https://dev.to/line/top-20-tips-that-will-change-your-coding-skills-forever-4cb1</guid>
      <description>&lt;p&gt;In this small article, I am going to talk about my top 20 tips that can change your coding forever. This article is a summary of all the points, &lt;em&gt;Enjoy&lt;/em&gt;-&lt;/p&gt;

&lt;p&gt;1.Break big pieces of code into small functions, which make it easy for you to improve your code quality.&lt;/p&gt;

&lt;p&gt;2.Do Not Overthink.&lt;/p&gt;

&lt;p&gt;3.Don't take stress of any problem that you were unable to fix.&lt;/p&gt;

&lt;p&gt;4.Make sure to see other people's code and let others see your code.&lt;/p&gt;

&lt;p&gt;5.If you can' solve a problem, just copy-paste with google, its the best way to solve it.&lt;/p&gt;

&lt;p&gt;6.Read documentation of languages.&lt;/p&gt;

&lt;p&gt;7.Take rest regularly, it helps your brain to focus.&lt;/p&gt;

&lt;p&gt;8.Use integration tools and automate as much as you can.&lt;/p&gt;

&lt;p&gt;9.Practice as much as you can, practice makes a man perfect.&lt;/p&gt;

&lt;p&gt;10.Don't shy for asking help.&lt;/p&gt;

&lt;p&gt;11.Be focused on what you do.&lt;/p&gt;

&lt;p&gt;12.Never choose an inefficient shortcut way to save a few minutes.&lt;/p&gt;

&lt;p&gt;13.Users are not technical people. Think about it when you develop your UI/Design.&lt;/p&gt;

&lt;p&gt;14.Log all critical parts rather than to debug it.&lt;/p&gt;

&lt;p&gt;15.Learn as much as you can, Don‚Äôt stop learning.&lt;/p&gt;

&lt;p&gt;16.Be Consistent.&lt;/p&gt;

&lt;p&gt;17.Take time to choose you IDE, try to find the best one for you.&lt;/p&gt;

&lt;p&gt;18.Try writing readable code, as you are the only one who will fix it in future.&lt;/p&gt;

&lt;p&gt;19.Don't Remember the code, just learn the logic and you are good to go.&lt;/p&gt;

&lt;p&gt;20.patience and love what you do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*Finally this big topic is over now, Now I would like to talk about my Newsletter -&lt;/p&gt;

&lt;p&gt;I have started a newsletter in which you will get Email twice a week directly from me. I will send you latest tech, coding &amp;amp; Other useful information. I will also be spending a one riddle each time and the first to complete the riddle will get a small gift from me*&lt;/p&gt;

&lt;p&gt;&lt;a href="https://linenewsletter.substack.com/subscribe?utm_source=menu&amp;amp;simple=true&amp;amp;next=https%3A%2F%2Flinenewsletter.substack.com%2Fp%2Fcoming-soon"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1fXPsb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ys8k2zvc8jqdyk51bax0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>beginners</category>
      <category>bestofdev</category>
    </item>
    <item>
      <title>How to Make Qrcode Generator using Python.</title>
      <author>MarianVelani</author>
      <pubDate>Wed, 26 May 2021 07:29:03 +0000</pubDate>
      <link>https://dev.to/marianvelani/how-to-make-qrcode-generator-using-python-23mg</link>
      <guid>https://dev.to/marianvelani/how-to-make-qrcode-generator-using-python-23mg</guid>
      <description>&lt;p&gt;Hello beautiful people,I would be sharing out on how I made a python project that generate qrcode using python.&lt;/p&gt;

&lt;p&gt;‚Ä¢&lt;/p&gt;
&lt;h4&gt;You can check how the&lt;a href="https://youtu.be/1ctOrCRKp_k"&gt; runs here&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;‚Ä¢ &lt;/p&gt;
&lt;h4&gt;You can also access the&lt;a href="https://compileto.blogspot.com/2021/05/qr-code-generator-using-python.html"&gt; source code&lt;/a&gt;
&lt;/h4&gt; here

&lt;p&gt;Okay, let's get startedü¶∏‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;h4&gt;What is a QR Code?&lt;/h4&gt;

&lt;p&gt; A Quick Response Code or a QR Code is a two dimensional scanner tag comprising of framework of minuscule dark squares on a white foundation. Because of its capacity to store more data and quick lucidness, it acquired fame over the customary standardized identifications made out of dark bars and void areas.&lt;/p&gt;

&lt;p&gt;Python offers a QRCode bundle which makes it truly simple to carry out this usefulness. We will start by downloading the accompanying python bundles.&lt;/p&gt;

&lt;h4&gt;pyqrcode module&lt;/h4&gt;

&lt;p&gt;The pyqrcode module is a QR code generator that is simple to use and written in pure python. The module can automates most of the building process for creating QR codes. Most codes can be created using only two lines of code!&lt;/p&gt;

&lt;p&gt;Unlike other generators, all of the helpers can be controlled manually. You are free to set any or all of the properties of your QR code.&lt;/p&gt;

&lt;p&gt;QR codes can be saved as SVG, PNG (by using the pypng module), and plain text. They can also be displayed directly in most Linux terminal emulators. PIL is not used to render the image files.&lt;/p&gt;

&lt;p&gt;The pyqrcode module attempts to follow the QR code standard as closely as possible. The terminology and the encodings used in pyqrcode come directly from the standard. This module also follows the algorithm laid out in the standard.&lt;/p&gt;

&lt;p&gt;pyqrcode module is a QR code generator. The module automates most of the building process for creating QR codes. This module attempts to follow the QR code standard as closely as possible. The terminology and the encodings used in pyqrcode come directly from the standard.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install PyQRCode
from pyqrcode import QRCode
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;PIL&lt;/h4&gt;

&lt;p&gt;The Python Imaging Library adds image processing capabilities to your Python interpreter.&lt;/p&gt;

&lt;p&gt;This library provides extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities.&lt;/p&gt;

&lt;p&gt;The core image library is designed for fast access to data stored in a few basic pixel formats. It should provide a solid foundation for a general image processing tool.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install Pillow

from PIL import Image
,ImageTk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;Tkinter&lt;/h4&gt;

&lt;p&gt;The Tkinter library is most popular and very easy to use and it comes with many widgets (these widgets helps in the creation of nice-looking GUI Applications).&lt;br&gt;
Also, Tkinter is a very light-weight module and it is helpful in creating cross-platform applications(so the same code can easily work on Windows, macOS, and Linux)&lt;br&gt;
To use all the functions of Tkinter you need to import it in your code and the command for the same is:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from tkinter import Tk,Text,Button,Label,StringVar,OptionMenu,Canvas,END
from tkinter import font
from tkinter import font
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Final output:-&lt;/p&gt;

&lt;h4&gt;‚úà&lt;a href="https://youtu.be/1ctOrCRKp_k"&gt; output video&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8YJgu_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjijlyvgqdcsli5cdhbs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8YJgu_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjijlyvgqdcsli5cdhbs.jpg" alt="compileto.blogspot.com, qrcode generator using python"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Database Backup Scripts For MongoDB with Amazon¬†S3</title>
      <author>Adit Modi</author>
      <pubDate>Wed, 26 May 2021 07:23:11 +0000</pubDate>
      <link>https://dev.to/cloudtech/database-backup-scripts-for-mongodb-with-amazon-s3-d08</link>
      <guid>https://dev.to/cloudtech/database-backup-scripts-for-mongodb-with-amazon-s3-d08</guid>
      <description>&lt;p&gt;This article will provide you with database backup scripts that not only allow you to create database backups, but also upload the backup dumps to Amazon S3 and automate the process daily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of%C2%A0contents"&gt;
  &lt;/a&gt;
  Table of¬†Contents
&lt;/h2&gt;

&lt;p&gt;-&amp;gt;Why we need a database backup?&lt;br&gt;
-&amp;gt;Why Amazon S3 for backup?&lt;br&gt;
-&amp;gt;What is Cron?&lt;br&gt;
-&amp;gt;What is Chmod?&lt;br&gt;
-&amp;gt;Database Backup Script for MongoDB and Dumping to Amazon S3&lt;br&gt;
-&amp;gt;Generate a shell script which will dump the MongoDB database&lt;br&gt;
-&amp;gt;Create a shell script which sync the backups with Amazon S3&lt;br&gt;
-&amp;gt;Creating the folder in Amazon S3 for the database dumps&lt;br&gt;
-&amp;gt;How to configure the AWS CLI&lt;br&gt;
-&amp;gt;How to set up AWS key &amp;amp; Secret&lt;br&gt;
-&amp;gt;How to set up Cron (to automate the process)&lt;br&gt;
-&amp;gt;Conclusion&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmldzNlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n03pa0bkr2iym6n9akeg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmldzNlc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n03pa0bkr2iym6n9akeg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Background: I am Cloud¬†, DevOps &amp;amp; Big Data Enthusiast | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified¬†.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-we-need-a-database%C2%A0backup"&gt;
  &lt;/a&gt;
  Why we need a database¬†backup?
&lt;/h2&gt;

&lt;p&gt;One might think why backup is necessary for my database? The answer is simple, backup creates a copy of your physical, logical, and operational data. Which you can store at any safe place such as Amazon S3. This copy comes into use if the running database gets corrupted. Database backup can include files like control files, datafiles, and archived redo logs.&lt;br&gt;
Remove MongoDB backups from your to-do list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-amazon-s3-for%C2%A0backup"&gt;
  &lt;/a&gt;
  Why Amazon S3 for¬†backup?
&lt;/h2&gt;

&lt;p&gt;For this tutorial, we have chosen Amazon S3 as it is a very common choice. You can do the same thing if you would like to use another cloud storage provider. The instructions won't differ a lot as long as the cloud provider is S3-compatible.&lt;br&gt;
Below we defined some less known terms that we used in the article:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is%C2%A0cron"&gt;
  &lt;/a&gt;
  What is¬†Cron?
&lt;/h2&gt;

&lt;p&gt;Cron is a software utility that offers time-based job scheduling. It supports Unix computer operating systems. To set up software environments, the developer uses Cron. He/she schedules commands or shell scripts so that they run at chosen times. It could be daily, once a week, or any interval as desired.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is%C2%A0chmod"&gt;
  &lt;/a&gt;
  What is¬†Chmod?
&lt;/h2&gt;

&lt;p&gt;The chmod a short command of 'change mode' enables the admin to set rules for file handling. In other words, with the help of a "chmod" system call. An administrator can change the access permissions of file system objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-backup-script-for-mongodb-and-dumping-to-amazon%C2%A0s3"&gt;
  &lt;/a&gt;
  Database Backup Script for MongoDB and Dumping to Amazon¬†S3
&lt;/h2&gt;

&lt;p&gt;You can automate the creation of backup and storing it to Amazon S3 within a few minutes. Below bullets brief about what you are going to learn in this part of the article:&lt;br&gt;
Create a script that automates the MongoDB backup directory creation&lt;br&gt;
Upload/sync the backups with Amazon S3&lt;br&gt;
Cron will run this command every day (to back up)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-a-shell-script-which-will-dump-the-mongodb%C2%A0database"&gt;
  &lt;/a&gt;
  Generate a shell script which will dump the MongoDB¬†database
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;cd ~&lt;br&gt;
mkdir scripts&lt;br&gt;
cd scripts&lt;br&gt;
nano db_backup.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#!/bin/bash&lt;br&gt;
DIR=&lt;/code&gt;date +%d-%m-%y&lt;code&gt;&lt;br&gt;
DEST=~/db_backups/$DIR&lt;br&gt;
mkdir $DEST&lt;br&gt;
mongodump -h localhost:27017 -d my_db_name -o $DEST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now chmod the script to allow it to for execution&lt;br&gt;
&lt;code&gt;chmod +x ~/scripts/db_backup.sh&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-shell-script-which-sync-the-backups-with-amazon%C2%A0s3"&gt;
  &lt;/a&gt;
  Create a shell script which sync the backups with Amazon¬†S3
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;nano db_sync.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Copy and paste the script below to it&lt;br&gt;
&lt;code&gt;#!/bin/bash&lt;br&gt;
/usr/local/bin/aws s3 sync ~/db_backups s3://my-bucket-name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now chmod the script to allow it for execution&lt;br&gt;
&lt;code&gt;chmod +x ~/scripts/db_sync.sh&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-folder-in-amazon-s3-for-the-database%C2%A0dumps"&gt;
  &lt;/a&gt;
  Creating the folder in Amazon S3 for the database¬†dumps
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;cd ~&lt;br&gt;
mkdir db_backups&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-configure-the-aws%C2%A0cli"&gt;
  &lt;/a&gt;
  How to configure the AWS¬†CLI
&lt;/h2&gt;

&lt;p&gt;Before installing the AWS CLI you need to installpython-pi. Type the following commands:&lt;br&gt;
&lt;code&gt;apt-get update&lt;br&gt;
apt-get -y install python-pip&lt;br&gt;
curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-the-aws-cli"&gt;
  &lt;/a&gt;
  Install the AWS CLI
&lt;/h2&gt;

&lt;p&gt;Type the following command:&lt;br&gt;
&lt;code&gt;pip install awscli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;How to set up AWS key &amp;amp;¬†Secret&lt;br&gt;
Configuration and credential file settings&lt;br&gt;
&lt;code&gt;cd ~&lt;br&gt;
mkdir .aws&lt;br&gt;
nano ~/.aws/config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Paste in key_id and secret_access_key as shown below&lt;br&gt;
&lt;code&gt;[default]&lt;br&gt;
aws_access_key_id=AKIAIOSFODNN7EXAMPLE&lt;br&gt;
aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;How to set up Cron (to automate the¬†process)&lt;br&gt;
&lt;code&gt;crontab -e&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paste-the-below-commands-at-the-bottom-to-automate-the-process"&gt;
  &lt;/a&gt;
  Paste the below commands at the bottom to automate the process
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;0 0 * * * ~/scripts/db_backup.sh # take a backup every midnight&lt;br&gt;
0 2 * * * ~/scripts/db_sync.sh # upload the backup at 2am&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This way the backup script will run and also sync with Amazon S3 daily.&lt;br&gt;
Conclusion&lt;br&gt;
Hence, by using these scripts you can achieve 3 goals:&lt;br&gt;
Creating the database backup via a shell script&lt;br&gt;
uploading the dump to Amazon S3&lt;br&gt;
also automating this process using Cron.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3mjteM4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxw7mdjrxp7j7obqyj4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3mjteM4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxw7mdjrxp7j7obqyj4p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Hope this guide helps you understand on how to use shell scripts to take daily backups of your database and push to s3 on a daily basis, feel free to contact me on LinkedIn.&lt;br&gt;
You can view my badges here.&lt;br&gt;
If you are interested in learning more about AWS then follow me on github.&lt;br&gt;
If you liked this content then do clap and share it¬†. Thank You¬†.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>mongodb</category>
      <category>bash</category>
    </item>
    <item>
      <title>Fun tech quiz questions directly in your terminal</title>
      <author>Bobby Iliev</author>
      <pubDate>Wed, 26 May 2021 06:55:11 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/fun-tech-quiz-questions-directly-in-your-terminal-19pk</link>
      <guid>https://dev.to/bobbyiliev/fun-tech-quiz-questions-directly-in-your-terminal-19pk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YyaVQa2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/june2020/3um936quha6qp3q3o18y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YyaVQa2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/june2020/3um936quha6qp3q3o18y.png" alt="3um936quha6qp3q3o18y.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Quizzes are a great way to test your knowledge on a specific topic. So I decided to create a tool called &lt;a href="https://quizapi.io"&gt;the Quiz API&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;Quiz API is a simple HTTP REST API for technical quizzes including a wide variety of topics like: Linux, DevOps, Programming (PHP, JS, Python and etc.), Docker, &lt;br&gt;
Kubernetes and lots more!&lt;/p&gt;

&lt;p&gt;It is free for developers and I've just released a beta version and started adding some cool questions!&lt;/p&gt;

&lt;p&gt;As the Quiz API returns the output in a JSON format, I created a bash script that allows you to answer questions whenever you feel like directly via your terminal!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfKidwJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.devdojo.com/images/june2020/ckb8sug0y9rs4ha6toeb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfKidwJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.devdojo.com/images/june2020/ckb8sug0y9rs4ha6toeb.gif" alt="QuizAPI Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to be able to use the Quiz API bash script you need to have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An API Key for the Quiz API, you can get it totally for free &lt;a href="https://quizapi.io/register"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access to a bash terminal&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#download-the-quiz-bash-script"&gt;
  &lt;/a&gt;
  Download the Quiz bash script
&lt;/h2&gt;

&lt;p&gt;In order to download the bash script which would allow you to consume the QuizAPI and take questions directly via your terminal, you just need to run this command here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget https://quizapi.io/quiz.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to check the script before running it! This bash script is also available on git and you can check it's contents here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/QuizApi/QuizAPI-BASH/blob/master/quiz.sh"&gt;https://github.com/QuizApi/QuizAPI-BASH/blob/master/quiz.sh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any pull requests with improvements are more than welcome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-raw-jq-endraw-"&gt;
  &lt;/a&gt;
  Install &lt;code&gt;jq&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;jq&lt;/code&gt; command-line tool is is a lightweight and flexible command-line JSON processor. It is great for parsing JSON output in your terminal and it is required by the Quiz API bash script.&lt;/p&gt;

&lt;p&gt;If you try to run the script without having &lt;code&gt;jq&lt;/code&gt; installed you will get the following message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The jq command is required! Please install it and then try again
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't have &lt;code&gt;jq&lt;/code&gt; already installed, you can do that by running one of the following commands depending on your OS:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  Linux
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu/Debian:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you are running the latest Ubuntu version you might have to install it with &lt;code&gt;snap&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo snap install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Fedora:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo dnf install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;openSUSE:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo zypper install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Arch:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pacman -S jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mac"&gt;
  &lt;/a&gt;
  Mac:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Homebrew:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;MacPort
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;port install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are on a different system, follow the steps from the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stedolan.github.io/jq/download/"&gt;https://stedolan.github.io/jq/download/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Once you have your API Key and &lt;code&gt;jq&lt;/code&gt; installed you can execute the script by running the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the script executable:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chmod +x quiz.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Execute the script:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./quiz.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we did not specify the API key, you will get the following output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Usage: quiz.sh -a API_KEY [-c Category] [-d Difficulty] [-t Tags]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order for the script to work, we need to pass our API key as an argument. One of the ways to do that is to define our API key as an environment variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export API_KEY=your_api_key_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: change the &lt;code&gt;your_api_key_here&lt;/code&gt; with your actual &lt;a href="https://quizapi.io/clientarea/settings/token"&gt;Quiz API key&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Then run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./quiz.sh -a ${API_KEY}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script will make a curl request to the Quiz API and it would pars the output for you in a nice interactive cli multiple choice quiz like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "How to dump pod logs (stdout) in Kubernetes?"
  1 ) "kubectl log my-pod"
  2 ) "kubectl pod logs my-pod"
  3 ) "kubectl logs my-pod"
  4 ) "kubectl pods logs my-pod"
Check an option (again to uncheck, ENTER when done):
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be able to select 1 or multiple answers and then press enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"How to dump pod logs (stdout) in Kubernetes?"
  1 ) "kubectl log my-pod"
  2 ) "kubectl pod logs my-pod"
  3+) "kubectl logs my-pod"
  4 ) "kubectl pods logs my-pod"
"kubectl logs my-pod" was checked
Check an option (again to uncheck, ENTER when done):

Selected was:  "kubectl logs my-pod"
Correct: is:  "kubectl logs my-pod"
Correct Answer!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#available-arguments"&gt;
  &lt;/a&gt;
  Available arguments
&lt;/h2&gt;

&lt;p&gt;The script allows you to specify different parameters so that you could get the questions that you want.&lt;/p&gt;

&lt;p&gt;The available arguments are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-c&lt;/code&gt; - get questions only for a specific category&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-d&lt;/code&gt; - get questions only for a specific difficulty (Easy, Medium and Hard)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-t&lt;/code&gt; - get questions for a specific topic/tag, this lets you combine multiple topics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if you wanted to get easy Docker questions only, you could run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./quiz.sh -a ${API_KEY} -d hard -t docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;We have added about 1000 questions for the beta version! But we are planning to add a lot more than that in the future.&lt;/p&gt;

&lt;p&gt;As the Quiz API is free for developers, any contributions would be greatly appreciated. If you are feeling adventurous, you could do so via this link here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizapi.io/contribute"&gt;https://quizapi.io/contribute&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you notice a wrong question feel free to report it as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizapi.io/contact"&gt;https://quizapi.io/contact&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Quizzes can be a fun way to test and improve your knowledge, with the Quiz API you are going to be able to do so via your terminal at any time!&lt;/p&gt;

&lt;p&gt;For more information make sure to check out the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizapi.io/docs/1.0/overview"&gt;https://quizapi.io/docs/1.0/overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, feel free to reach out and say hi on twitter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/bobbyiliev_"&gt;https://twitter.com/bobbyiliev_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>php</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Top 6 Latest Trends in Web Development to Outline 2021</title>
      <author>Codica</author>
      <pubDate>Wed, 26 May 2021 06:32:06 +0000</pubDate>
      <link>https://dev.to/codicacom/top-6-latest-trends-in-web-development-to-outline-2021-5bi5</link>
      <guid>https://dev.to/codicacom/top-6-latest-trends-in-web-development-to-outline-2021-5bi5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LnN-Mba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf4unp9efobwedcwxigd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LnN-Mba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf4unp9efobwedcwxigd.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://www.codica.com/blog/top-web-development-trends/"&gt;Codica Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;How to make a website appealing to customers? What should be done to increase its profitability? Questions like this became pressing issues for many owners of online business.&lt;/p&gt;

&lt;p&gt;Luckily, there are web app development trends that help entrepreneurs build modern software solutions that users will love.&lt;/p&gt;

&lt;p&gt;So let‚Äôs proceed to the top 6 most influential trends in web application development for 2021 that you should take on board.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-ai-and-chatbots"&gt;
  &lt;/a&gt;
  1. AI and chatbots
&lt;/h1&gt;

&lt;p&gt;Artificial intelligence is one of the most influential technologies in the tech landscape for 2021. AI chatbots, virtual assistants (Alexa, Siri, Cortana), and voice bots are gaining momentum now. Their benefit for businesses lies in their ability to engage with customers more efficiently and boost user experience.&lt;/p&gt;

&lt;p&gt;With chatbots users can get immediate responses to their queries. Also, customers get personalized tips and recommendations. As a result, chatbots serve as a great tool to drive sales and bring businesses more profit.&lt;/p&gt;

&lt;p&gt;Given the wide spread of AI chatbots, businesses of all sizes should use them to provide continuous customer engagement.&lt;/p&gt;

&lt;p&gt;Are you doubting whether AI-powered chatbots are here to stay? The statistics below can dispel your doubts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ox6GAL_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pplfmei8yo94sbivrpm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ox6GAL_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pplfmei8yo94sbivrpm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-pwa-progressive-web-apps"&gt;
  &lt;/a&gt;
  2. PWA (Progressive Web Apps)
&lt;/h1&gt;

&lt;p&gt;Progressive web applications have been the talk of the town for several years. In 2021, they remain highly relevant. It is all about their ability to provide users with an almost full mobile application experience.&lt;/p&gt;

&lt;p&gt;The core benefits of &lt;a href="https://www.codica.com/services/progressive-web-apps-development/"&gt;PWA development&lt;/a&gt; for users and companies are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lower app development, maintenance, and support costs;&lt;/li&gt;
&lt;li&gt;Offline capabilities;&lt;/li&gt;
&lt;li&gt;Faster time to market;&lt;/li&gt;
&lt;li&gt;Effortless distribution and installation;&lt;/li&gt;
&lt;li&gt;Reduced device power and storage usage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, this website technology can save the day for those businesses that need to widen their mobile audience. To learn more, check our article to discover what &lt;a href="https://www.codica.com/blog/what-does-progressive-web-apps-pwa-development-mean-definition/"&gt;PWA development means&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Though PWA technology was created not long ago, it has already proven its effectiveness. By turning their websites into PWAs, companies can boost conversion rates, search rankings, and website usability. For this reason, all &lt;a href="https://www.codica.com/case-studies/"&gt;web projects&lt;/a&gt; Codica team delivers are PWA by default.&lt;/p&gt;

&lt;p&gt;To get to the crux of the progressive web app, we recommend checking some successful implementations of this technology. For instance, here‚Äôs a PWA of an &lt;a href="https://www.codica.com/case-studies/kids-activities-service-marketplace/"&gt;activity booking platform PlanMyKids&lt;/a&gt; developed by Codica team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4R0HpKL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2g4uxz8828zmxl0hxfoi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4R0HpKL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2g4uxz8828zmxl0hxfoi.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-voice-search-optimization"&gt;
  &lt;/a&gt;
  3. Voice search optimization
&lt;/h1&gt;

&lt;p&gt;In 2021, more and more Internet users prefer communicating with audio over using text information. The remarkable popularity of Clubhouse audio social media tells us that audio will play a bigger part in the future. Even though this app is available only for iOS by invitation, it has already &lt;a href="https://techcrunch.com/2021/02/18/report-social-audio-app-clubhouse-has-topped-8-million-global-downloads/"&gt;reached 8 million downloads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How to take advantage of this trend in web development? You can boost your web projects with voice search capabilities.&lt;/p&gt;

&lt;p&gt;Voice search optimization brings advantages for both users and business owners. The most significant ones are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Time saving;&lt;/li&gt;
&lt;li&gt;Facilitation of analyzing customer behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How to optimize your website for voice search? You can try the measures below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create natural language content;&lt;/li&gt;
&lt;li&gt;Use schema markup and snippets;&lt;/li&gt;
&lt;li&gt;Get rid of duplicate pages;&lt;/li&gt;
&lt;li&gt;Keep your contact information up-to-date;&lt;/li&gt;
&lt;li&gt;Monitor search rankings;&lt;/li&gt;
&lt;li&gt;Integrate Web Speech API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-cloud-architecture"&gt;
  &lt;/a&gt;
  4. Cloud architecture
&lt;/h1&gt;

&lt;p&gt;In 2020, we saw a mandatory shift to &lt;a href="https://www.codica.com/blog/remote-work-trends/"&gt;remote work&lt;/a&gt; due to the spread of Covid-19. As a result, cloud, or serverless, applications have grown even more. And the Web, as one of the most cutting-edge domains, has seen a significant increase in the demand for cloud solutions.&lt;/p&gt;

&lt;p&gt;The recent data provided by &lt;a href="https://resources.flexera.com/web/pdf/report-state-of-the-cloud-2020.pdf"&gt;Flexera&lt;/a&gt; states that 98% of enterprises use at least one public or private cloud. Below, you can find a chart from the report.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D2gpQGZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d0zrc9mcg00381g83at.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2gpQGZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d0zrc9mcg00381g83at.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codica.com/blog/saas-paas-iass-choosing-the-best-cloud-computing-model/"&gt;Cloud computing&lt;/a&gt; can boast of many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cost-effectiveness;&lt;/li&gt;
&lt;li&gt;On-demand scalability and flexibility;&lt;/li&gt;
&lt;li&gt;Quick time-to-market;&lt;/li&gt;
&lt;li&gt;Delegated maintenance;&lt;/li&gt;
&lt;li&gt;Better disaster recovery and loss prevention options.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Serverless architecture allows developers to build and run applications without thinking about servers. These cloud solutions still run on servers, but they are supported by cloud providers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-mobilefriendly-websites"&gt;
  &lt;/a&gt;
  5. Mobile-friendly websites
&lt;/h1&gt;

&lt;p&gt;The recent findings by &lt;a href="https://datareportal.com/global-digital-overview"&gt;DataReportal&lt;/a&gt; show that the number of global mobile users is 5.22 billion as of January 2021. This statistics emphasizes the importance of mobile-friendliness for the future of the web. With websites optimized for mobile devices, companies get better chances to cover a greater number of mobile users and improve the conversion rate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNaDOg2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qchqlmw09gqon8o3ukdy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNaDOg2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qchqlmw09gqon8o3ukdy.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How do mobile-friendly websites look? Basically, they have the following key characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily readable and digestible copy;&lt;/li&gt;
&lt;li&gt;Clickable links and navigation;&lt;/li&gt;
&lt;li&gt;Short and userful menu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;User experience boost is not the only one benefit of &lt;a href="https://www.codica.com/blog/5-key-website-usability-principles/"&gt;mobile-friendly websites&lt;/a&gt;. They also get the higher position in search results.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-blockchain"&gt;
  &lt;/a&gt;
  6. Blockchain
&lt;/h1&gt;

&lt;p&gt;Blockchain is a highly-secure technology that provides transactions verified by a decentralized network. With this technology, all your transactions are carefully protected.&lt;/p&gt;

&lt;p&gt;Speaking of web development, Blockchain can boast of the following advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intelligent prediction system;&lt;/li&gt;
&lt;li&gt;High interactivity for web pages;&lt;/li&gt;
&lt;li&gt;Data safety;&lt;/li&gt;
&lt;li&gt;Security of digital payments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to implement Blockchain technology to safeguard your web app but do not know how? Check our &lt;a href="https://www.codica.com/case-studies/insurance-progressive-web-application/"&gt;PWA case study&lt;/a&gt; to find out how Codica team integrated Blockchain in an insurance web app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUlb43ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8i5uh26vmhqijni1nql.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUlb43ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8i5uh26vmhqijni1nql.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h1&gt;

&lt;p&gt;In 2021, the current web development trends play a big part in helping businesses stay afloat. However, you don‚Äôt need to rush into implementing all of them, as some of them may not fit your goals. But you need to be aware of the most influential technologies that shape the web development domain in 2021.&lt;/p&gt;

&lt;p&gt;In our brief article, we‚Äôve listed the top 6 hottest web development trends for 2021. Do you want to delve deeper into that topic? Visit our thorough article that will answer your questions about the web dev domain: &lt;a href="https://www.codica.com/blog/top-web-development-trends/"&gt;9 New Web Development Trends to Outline 2021&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>2021trends</category>
      <category>web</category>
      <category>trends</category>
    </item>
    <item>
      <title>Modern Full-Stack Serverless, Part II</title>
      <author>Salah Elhossiny</author>
      <pubDate>Wed, 26 May 2021 06:30:38 +0000</pubDate>
      <link>https://dev.to/aws-builders/modern-full-stack-serverless-part-ii-94i</link>
      <guid>https://dev.to/aws-builders/modern-full-stack-serverless-part-ii-94i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#getting-started-with-aws-amplify"&gt;
  &lt;/a&gt;
  Getting Started with AWS Amplify
&lt;/h1&gt;

&lt;p&gt;At the core of most applications is the data/API layer. This layer could look like many things. In the serverless world, this usually will be composed of a combination of API endpoints and serverless functions. These serverless functions could be doing some logic and returning data, interacting with a database of some kind, or even interacting with another API endpoint.&lt;/p&gt;

&lt;p&gt;There are two main ways of creating APIs with Amplify:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A combination of Amazon API Gateway and a Lambda function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A GraphQL API connected to some type of data source (database, Lambda function, or HTTP endpoint)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;API Gateway is an AWS service that allows you to create API endpoints and route them to different services, often via a Lambda function. When you make an API call, it will route the request through API Gateway, invoke the function, and return the response. Using the Amplify CLI, you can create both the API Gateway endpoint as well as the Lambda function; the CLI will automatically configure the API to be able to invoke the Lambda function via an HTTP request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c463cwxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bprx90xpkgemts88ele.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c463cwxY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bprx90xpkgemts88ele.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-and-deploying-a-serverless-function"&gt;
  &lt;/a&gt;
  Creating and Deploying a Serverless Function
&lt;/h2&gt;

&lt;p&gt;At the core of many serverless applications are serverless functions. Serverless functions run your code in stateless compute containers that are event-driven, short-lived (may last for one invocation), and fully managed by the cloud provider of your choice. These functions scale seamlessly and do not require any server operations.&lt;/p&gt;

&lt;p&gt;While most people think of serverless functions as being invoked or triggered by an API call, these functions can also be triggered by a variety of different events. In addition to HTTP requests, a few popular ways to invoke a serverless function are via an image upload to a storage service, a database operation (like create, update, or delete), or even from another serverless function.&lt;/p&gt;

&lt;p&gt;Serverless functions scale automatically, so there‚Äôs no need to worry about your application if you get a large spike in traffic. The first time you invoke a function, the service provider will create an instance of the function and run its handler method to process the event. After the function finishes and returns a response, it will remain and process additional events if they come in. If another invocation happens while the first event is still processing, the service will then create another instance.&lt;/p&gt;

&lt;p&gt;Serverless functions also have a payment model that is different from traditional infrastructure. With services like AWS Lambda, you only pay for what you use and are charged based on the number of requests for your functions and the time it takes for your code to execute. This is in contrast to provisioning and paying for infrastructure like servers regardless of whether they are being utilized.&lt;/p&gt;

&lt;p&gt;Now that you know about serverless functions, let‚Äôs take a look at how you can create a serverless function and hook it up to an API that will invoke it from an HTTP request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-react-application-and-installing-the-dependencies"&gt;
  &lt;/a&gt;
  Creating the React Application and Installing the Dependencies
&lt;/h2&gt;

&lt;p&gt;To get started, you‚Äôll first need to create the React application. To do so, you can use npx:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you will need to install the dependencies. For this app, you‚Äôll only need the AWS Amplify library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installing the dependencies, you can now initialize a new Amplify project in the root of the React application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Enter&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cryptoapp&lt;/span&gt;
&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Enter&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;local&lt;/span&gt;
&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;preferred&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;re building: javascript
? What javascript framework are you using: react
? Source Directory Path: src
? Distribution Directory Path: build
? Build Command: npm run-script build
? Start Command: npm run-script start
? Do you want to use an AWS profile? Here, choose *Y* and
pick the AWS
profile you created when you ran `amplify configure`.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, both the Amplify project and the React app have been successfully created and you can begin adding new features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-new-serverless-function-with-amplify-cli"&gt;
  &lt;/a&gt;
  Creating a New Serverless Function with Amplify CLI
&lt;/h2&gt;

&lt;p&gt;In the next step, we‚Äôll create the serverless function that you will be using for this app. The app you are building in this chapter is a cryptocurrency app. At first, you will hardcode an array of cryptocurrency information in the function and return it to the client. Later in this chapter, you‚Äôll update this function to call another API (CoinLore) and asynchronously fetch and return data. To create the function, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="nx"&gt;capability&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Lambda&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Provide&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;friendly&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
  &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cryptofunction&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Provide&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt; &lt;span class="nx"&gt;Lambda&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cryptofunction&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NodeJS&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;Serverless&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Integration&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;Gateway&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;access&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;resources&lt;/span&gt; &lt;span class="nx"&gt;created&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
  &lt;span class="nx"&gt;project&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;
  &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;Lambda&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;No&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;invoke&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;recurring&lt;/span&gt;
  &lt;span class="nx"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;No&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;configure&lt;/span&gt; &lt;span class="nx"&gt;Lambda&lt;/span&gt; &lt;span class="nx"&gt;layers&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
  &lt;span class="nx"&gt;No&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;edit&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;local&lt;/span&gt; &lt;span class="nx"&gt;Lambda&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;No&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#walking-through-the-code"&gt;
  &lt;/a&gt;
  Walking Through the Code
&lt;/h3&gt;

&lt;p&gt;When you created this resource, a new folder in amplify/backend was created named function. All of the functions created by the CLI will be stored in this folder. For now, you only have a single function, cryptofunction. In the cryptofunction folder, you will see a couple of configuration files as well as an src directory where the main function code is located.&lt;/p&gt;

&lt;p&gt;Serverless functions are essentially just encapsulated applications running on their own. Because the function you created is in JavaScript, you‚Äôll see that there are all of the things you‚Äôd typically see in any JavaScript application, including package.json and index.js files.&lt;/p&gt;

&lt;p&gt;Next, have a look at the function entry point located at src/index.js, in the cryptofunction folder. In this file you‚Äôll see that there is a function called exports.handler. This is the entry point for the function invocation. When the function is invoked, this is the code that is run.&lt;/p&gt;

&lt;p&gt;You can handle the event directly in this function if you would like, but since you will be working with an API, a more useful way to do this is to proxy the path into an express app with routing (i.e., &lt;a href="http://yourapi/"&gt;http://yourapi/&lt;/a&gt;). Doing this gives you multiple routes in a single function as well as multiple HTTP request methods like get, put, post, and delete for each route. The serverless expressframework provides an easy way to do this and has been built into the function boilerplate for you.&lt;/p&gt;

&lt;p&gt;In index.js, you will see a line of code that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="nx"&gt;awsServerlessExpress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is where the event, context, and path are proxied to the express server running in app.js. In app.js, you will then be able to create HTTP requests against whatever routes you create for your API (this example being a /coins route to fetch cryptocurrency).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-coins-route"&gt;
  &lt;/a&gt;
  Creating the /coins Route
&lt;/h3&gt;

&lt;p&gt;Now that you have seen how the application is structured, let‚Äôs create a new route in app.js and return some data from it. The route that you will be creating is a /coins route. This route will be returning an object containing a coins array.&lt;/p&gt;

&lt;p&gt;Let‚Äôs add the new route. Before the first app.get('/items') route, add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* amplify/backend/function/cryptofunction/src/app.js /*

app.get('/coins', function(req, res) {
  const coins = [
    { name: 'Bitcoin', symbol: 'BTC', price_usd: "10000" },
    { name: 'Ethereum', symbol: 'ETH', price_usd: "400" },
    { name: 'Litecoin', symbol: 'LTC', price_usd: "150" }
  ]
  res.json({coins}); 
});  
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-the-api"&gt;
  &lt;/a&gt;
  Adding the API
&lt;/h3&gt;

&lt;p&gt;Now that the function is created and configured, let‚Äôs put an API in front of it so you can trigger it with an HTTP request. To do this, you will be using Amazon API Gateway. API Gateway is a fully managed service that enables developers to create, publish, maintain, monitor, and secure REST and WebSocket APIs. API Gateway is one of the services supported by both the Amplify CLI as well as the Amplify client library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-new-api"&gt;
  &lt;/a&gt;
  Creating a New API
&lt;/h3&gt;

&lt;p&gt;To create the API, you can use the Amplify add command. From the root of the project, run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Please&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;one&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;below&lt;/span&gt; &lt;span class="nx"&gt;mentioned&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;REST&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Provide&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;friendly&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
  &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cryptoapi&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Provide&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/coin&lt;/span&gt;&lt;span class="err"&gt;s
&lt;/span&gt;  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;Lambda&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Use&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;Lambda&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;already&lt;/span&gt;
  &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt;
  &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Choose&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Lambda&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;invoke&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;cryptofunction&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Restrict&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Do&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploying-the-api-and-the-lambda-function"&gt;
  &lt;/a&gt;
  Deploying the API and the Lambda Function
&lt;/h3&gt;

&lt;p&gt;Now that the function and API have both been created, you need to deploy them to your account to make them live. To do so, you can run the Amplify push command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;? Are you sure you want to continue? Y&lt;br&gt;
Once the deployment has successfully completed, the services are live and ready to use.&lt;/p&gt;

&lt;p&gt;You can use the Amplify CLI status command at any time to see the current status of your project. The status command will list out all of the currently configured services in your project and give you the status for each of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main thing to notice in this status output is the Operation. The Operation tells you what will happen the next time push is run in the project. The Operation property will be set to Create, Update, Delete, or No Change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interacting-with-the-new-api"&gt;
  &lt;/a&gt;
  Interacting with the New API
&lt;/h3&gt;

&lt;p&gt;Now that the resources have been deployed, you can begin interacting with the API from the React application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configuring-the-client-app-to-work-with-amplify"&gt;
  &lt;/a&gt;
  Configuring the Client App to Work with Amplify
&lt;/h4&gt;

&lt;p&gt;To use the Amplify client library in any application, there is a base configuration that needs to be set up, usually at the root level. When you create the resources, the CLI populates the aws-exports.js file with information about your resources. You will use this file to configure the client application to work with Amplify. To configure the app, open src/index.js and add the following below the last import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./aws-exports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-amplify-client-api-category"&gt;
  &lt;/a&gt;
  The Amplify Client API Category
&lt;/h4&gt;

&lt;p&gt;After the client application has been configured, you can begin interacting with your resources.&lt;/p&gt;

&lt;p&gt;The Amplify client library has various API categories that can be imported and used for various types of functionality, including Auth for authentication, Storage for storing items in S3, and API for interacting with REST and GraphQL APIs.&lt;/p&gt;

&lt;p&gt;In this section, you will be working with the API category. API has various methods available‚Äîincluding API.get, API.post, API.put, and API.del‚Äîfor interacting with REST APIs, and API.graphql for interacting with GraphQL APIs.&lt;/p&gt;

&lt;p&gt;When working with a REST API, API takes in three arguments: API.get(apiName: String, path: String, data?: Object)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#apiname"&gt;
  &lt;/a&gt;
  apiName
&lt;/h5&gt;

&lt;p&gt;The name given when you create the API from the command line. In our example, this value would be cryptoapi.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#path"&gt;
  &lt;/a&gt;
  path
&lt;/h5&gt;

&lt;p&gt;The path that you would like to interact with. In our example, we created /coins, so the path would be /coins.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  data
&lt;/h5&gt;

&lt;p&gt;This is an optional object containing any properties you‚Äôd like to pass to the API, including headers, query string parameters, or a body.&lt;/p&gt;

&lt;p&gt;In our example, the API call is going to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cryptoapi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/coins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The API returns a promise, meaning you can handle the call using either a promise or an async function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// promise&lt;/span&gt;
&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cryptoapi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/coins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// async await&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cryptoapi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/coins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#calling-the-api-and-rendering-the-data-in-react"&gt;
  &lt;/a&gt;
  Calling the API and Rendering the Data in React
&lt;/h4&gt;

&lt;p&gt;Next, let‚Äôs call the API and render the data. Update src/App.js with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// Import useState and useEffect hooks from React&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Import the API category from AWS Amplify&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Create coins variable and set to empty array&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateCoins&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;span class="c1"&gt;// Define function to all API&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchCoins&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cryptoapi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/coins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;updateCoins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Call fetchCoins function when component loads&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;fetchCoins&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price_usd&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h5&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the app using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#updating-the-function-to-call-another-api"&gt;
  &lt;/a&gt;
  Updating the Function to Call Another API
&lt;/h4&gt;

&lt;p&gt;Next, you‚Äôll update the function to call another API, the CoinLore API, that will return dynamic data from the CoinLore service. The user will be able to add set filters like limit and start to limit the number of items coming back from the API. To get started, you will first need a way to interact with an HTTP endpoint in the Lambda function. The library you will be using forthis lesson is the Axios library. Axios is a promise-based HTTP client for the browser and Node.js&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#installing-axios"&gt;
  &lt;/a&gt;
  Installing Axios
&lt;/h5&gt;

&lt;p&gt;The first thing you need to do is install the Axios package in your function folder in order to send HTTP requests from the function. Navigate to amplify/backend/function/cryptofunction/src, install Axios, and then navigate back to the root of the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="sr"&gt;/cryptofunction/&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;
&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;
&lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#updating-the-function"&gt;
  &lt;/a&gt;
  Updating the Function
&lt;/h4&gt;

&lt;p&gt;Next, update the /coins route in amplify/backend/function/cryptofunction/src/app.js with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import axios&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/coins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define base url&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.coinlore.com/api/tickers?
  start=0&amp;amp;limit=10`&lt;/span&gt;

  &lt;span class="c1"&gt;// Check if there are any query string parameters&lt;/span&gt;
  &lt;span class="c1"&gt;// If so, reset the base url to include them&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiGateway&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiGateway&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiGateway&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;
  &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.coinlore.com/api/tickers/?
  start=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;limit=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Call API and return responseaxios.get(apiUrl)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the preceding function, we‚Äôve imported the Axios library and then used it to make an API call to the CoinLore API. In the API call, you can pass in a start and limit parameter to the request to define the number of coins to return, as well as to define the starting point.&lt;/p&gt;

&lt;p&gt;In the req parameter, there is an apiGateway property that holds the event and the context variables. In the function just defined, there is a check to see if this event exists as well as the queryStringParameters property on the event. If the queryStringParameters property exists, we use those values to update the base URL with the parameters. Using queryStringParameters, the user can specify the start and limit values when querying the CoinLore API.&lt;/p&gt;

&lt;p&gt;Once the function is updated, you can deploy the updates by running the push command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#updating-the-client-app"&gt;
  &lt;/a&gt;
  Updating the Client App
&lt;/h4&gt;

&lt;p&gt;Now that you have updated the function, let‚Äôs update the React app to give the user the option to specify the limit and start parameters.&lt;/p&gt;

&lt;p&gt;To do so, you‚Äôll need to add fields for user input and give the user a button to trigger a new API request. Update src/App.js with the following changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create additional state to hold user input for limit and&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateInput&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Create a new function to allow users to update the input&lt;/span&gt;
&lt;span class="nx"&gt;values&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateInputValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;updateInput&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Update fetchCoins function to use limit and start&lt;/span&gt;
&lt;span class="nx"&gt;properties&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchCoins&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cryptoapi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`/coins?
limit=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;start=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;updateCoins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Add input fields to the UI for user input&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updateInputValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;limit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;limit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
&lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updateInputValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="c1"&gt;// Add button to the UI to give user the option to call the&lt;/span&gt;
&lt;span class="nx"&gt;API&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fetchCoins&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Fetch&lt;/span&gt; &lt;span class="nx"&gt;Coins&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, run the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;p&gt;Book: Full Stack Serverless: Modern Application Development with React, AWS, and GraphQL for Nader Dabit &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Salah856/Modern-Fullstack-Serverless-/blob/main/Ch2.md"&gt;https://github.com/Salah856/Modern-Fullstack-Serverless-/blob/main/Ch2.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Part I: &lt;a href="https://dev.to/aws-builders/modern-full-stack-serverless-part-i-34cb"&gt;https://dev.to/aws-builders/modern-full-stack-serverless-part-i-34cb&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/aws-builders/building-rest-api-using-aws-with-serverless-node-js-express-2bk3"&gt;https://dev.to/aws-builders/building-rest-api-using-aws-with-serverless-node-js-express-2bk3&lt;/a&gt; &lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>react</category>
    </item>
    <item>
      <title>What are selectors and their types in CSS?</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Wed, 26 May 2021 06:23:35 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/what-are-selectors-and-their-types-in-css-24kl</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/what-are-selectors-and-their-types-in-css-24kl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-selectors"&gt;
  &lt;/a&gt;
  What are Selectors?
&lt;/h1&gt;

&lt;p&gt;CSS selectors identify specific HTML elements as targets for CSS styles. This topic covers how CSS selectors target HTML elements. Selectors use a wide range of over 50 selection methods offered by the CSS language, including elements, classes, IDs, pseudo-elements and pseudo-classes, and patterns.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#basic-selectors"&gt;
  &lt;/a&gt;
  Basic selectors
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Universal selector (all elements)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tag selector (all &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Class selector (all elements with class blue)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blue.red
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All elements with class blue and red (a type of Compound selector)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#headline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ID selector (the element with "id" attribute set to headline)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:pseudo-class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All elements with pseudo-class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;::pseudo-element
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Element that matches pseudo-element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:lang(en)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Element that matches &lt;code&gt;:lang&lt;/code&gt; declaration, for example &lt;code&gt;&amp;lt;span lang="en"&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;div &amp;gt; p 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;child selector&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The value of an ID must be unique in a web page. It is a violation of the HTML standard to use the value of an ID more than once in the same document tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#attribute-selectors"&gt;
  &lt;/a&gt;
  Attribute Selectors
&lt;/h1&gt;

&lt;p&gt;Attribute selectors can be used with various types of operators that change the selection criteria accordingly. They select an element using the presence of a given attribute or attribute value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div[data-color] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-background=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div[data-color="red"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute*="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value where the given attribute contains the given value anywhere (as&lt;br&gt;
a substring).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[class*="foo"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo-123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar123foo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"barfooo123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"barfo0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute~="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value where the given value appears in a whitespace-separated list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[class~="color-red"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color-red foo-bar the-div"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color-blue foo-bar the-div"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute^="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value where the given attribute begins with the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[class^="foo-"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo-123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo-234"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar-123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute$="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value where the given attribute ends with the given value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[class$="file"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foobar-file"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foobar-file"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foobar-input"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute|="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with a given attribute and value where the attribute's value is exactly the given value or is exactly&lt;br&gt;
the given value followed by - &lt;code&gt;(U+002D)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[lang|="EN"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"EN-us"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"EN-gb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"PT-pt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute="value" i]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with a given attribute and value where the attribute's value can be represented as Value, VALUE,&lt;br&gt;
vAlUe or any other case-insensitive possibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[lang="EN" i] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"EN"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"PT"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Specificity of attribute selectors&lt;br&gt;
0-1-0&lt;br&gt;
Same as class selector and &lt;code&gt;pseudoclass&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*[type=checkbox] // 0-1-0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that this means an attribute selector can be used to select an element by its ID at a lower level of specificity than if it was selected with an ID selector: &lt;code&gt;[id="my-ID"]&lt;/code&gt; targets the same element as &lt;code&gt;#my-ID&lt;/code&gt; but with lower specificity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#combinators"&gt;
  &lt;/a&gt;
  Combinators
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#descendant-combinator-selector-selector"&gt;
  &lt;/a&gt;
  Descendant Combinator: selector selector
&lt;/h2&gt;

&lt;p&gt;A descendant combinator, represented by at least one space character (), selects elements that are a descendant of&lt;br&gt;
the defined element. This combinator selects all descendants of the element (from child elements on down).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div p {
 color:red;
}
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the first two &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements are selected since they are both descendants of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#child-combinator-selector-gt-selector"&gt;
  &lt;/a&gt;
  Child Combinator: selector &amp;gt; selector
&lt;/h2&gt;

&lt;p&gt;The child &lt;code&gt;(&amp;gt;)&lt;/code&gt; combinator is used to select elements that are children, or direct descendants, of the specified element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div &amp;gt; p {
 color:red;
}
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS selects only the first &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, as it is the only paragraph directly descended from a &lt;/p&gt;.&lt;br&gt;
The second &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element is not selected because it is not a direct child of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.
&lt;h2&gt;
  &lt;a href="#adjacent-sibling-combinator-raw-selector-selector-endraw-"&gt;
  &lt;/a&gt;
  Adjacent Sibling Combinator: &lt;code&gt;selector + selector&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The adjacent sibling &lt;code&gt;(+)&lt;/code&gt; combinator selects a sibling element that immediate follows a specified element.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;p + p {
 color:red;
}
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The above example selects only those &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements which are directly preceded by another &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-sibling-combinator-raw-selector-selector-endraw-"&gt;
  &lt;/a&gt;
  General Sibling Combinator: &lt;code&gt;selector ~ selector&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The general sibling &lt;code&gt;(~)&lt;/code&gt; combinator selects all siblings that follow the specified element.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;p ~ p {
 color:red;
}
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;And now a title&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The above example selects all &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements that are preceded by another &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, whether or not they are immediately adjacent.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pseudoclasses"&gt;
  &lt;/a&gt;
  Pseudo-classes
&lt;/h1&gt;

&lt;p&gt;Pseudo-classes are keywords which allow selection based on information that lies outside of the document tree or that cannot be expressed by other selectors or combinators. This information can be associated to a certain state (state and dynamic pseudo-classes), to locations (structural and target pseudo-classes), to negations of the former (negation pseudo-class) or to languages (lang pseudo-class). Examples include whether or not a link has been followed &lt;code&gt;(:visited)&lt;/code&gt;, the mouse is over an element &lt;code&gt;(:hover)&lt;/code&gt;, a checkbox is checked &lt;code&gt;(:checked)&lt;/code&gt;, etc.&lt;br&gt;
Syntax&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="nd"&gt;:pseudo-class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;VALUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;List of pseudo-classes:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:active
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element being activated (i.e. clicked) by the user.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:any   
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Allows you to build sets of related selectors by creating groups that the included items will match. This is an alternative to repeating an entire selector.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:target
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Selects the current active #news element (clicked on a URL containing that anchor name)&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:checked 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to radio, checkbox, or option elements that are checked or toggled into an "on" state.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:default 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Represents any user interface element that is the default among a group of similar elements.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:disabled 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any UI element which is in a disabled state.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:empty
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element which has no children.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:enabled
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any UI element which is in an enabled state.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:first
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Used in conjunction with the @page rule, this selects the first page in a printed document.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:first-child
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Represents any element that is the first child element of its parent.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:first-of-type
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies when an element is the first of the selected element type inside its parent. This may or may not be the first-child.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:focus
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element which has the user's focus. This can be given by the user's keyboard, mouse events, or other forms of input.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:focus-within
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Can be used to highlight a whole section when one element inside it is focused. It matches any element that the :focus pseudo-class matches or that has a descendant focused.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:full-screen
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element displayed in full-screen mode. It selects the whole stack of elements and not just the top level element.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:hover
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element being hovered by the user's pointing device, but not activated.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:indeterminate
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies radio or checkbox UI elements which are neither checked nor unchecked, but are in an indeterminate state. This can be due to an element's attribute or DOM manipulation.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:in-range
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :in-range CSS pseudo-class matches when an element has its value attribute inside the specified range limitations for this element. It allows the page to give a feedback that the value currently defined using the element is inside the range limits.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:invalid
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements whose values are invalid according to the type specified in the &lt;code&gt;type= attribute&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:lang
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element who's wrapping &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element has a properly designated &lt;code&gt;lang= attribute&lt;/code&gt;. For the pseudo-class to be valid, it must contain a valid two or three letter language code.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:last-child 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Represents any element that is the last child element of its parent.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:last-of-type 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies when an element is the last of the selected element type inside its parent. This may or may not be the &lt;code&gt;last-child&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:left 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Used in conjunction with the &lt;code&gt;@page&lt;/code&gt; rule, this selects all the left pages in a printed document.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:link
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any links which haven't been visited by the user.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:not()
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to all elements which do not match the value passed to &lt;code&gt;(:not(p) or :not(.class-name)&lt;/code&gt; for example. It must have a value to be valid and it can only contain one selector. However, you can chain multiple &lt;code&gt;:not&lt;/code&gt; selectors&lt;br&gt;
together.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:nth-child
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies when an element is the n-th element of its parent, where n can be an integer, a mathematical expression (e.g n+3) or the keywords odd or even.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:nth-of-type
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies when an element is the n-th element of its parent of the same element type, where n can be an integer, a mathematical expression (e.g n+3) or the keywords odd or even.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:only-child
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :only-child CSS pseudo-class represents any element which is the only child of its parent. This is the same as&lt;br&gt;
:first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:optional
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :optional CSS pseudo-class represents any element that does not have the required attribute set on it. This allows&lt;br&gt;
forms to easily indicate optional fields and to style them accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:out-of-range
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :out-of-range CSS pseudo-class matches when an element has its value attribute outside the specified range limitations for this element. It allows the page to give a feedback that the value currently defined using the&lt;br&gt;
element is outside the range limits. A value can be outside of a range if it is either smaller or larger than maximum and minimum set values.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:placeholder-shown 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Experimental. Applies to any form element currently displaying placeholder text.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:read-only 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element which is not editable by the user.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:read-write
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element that is editable by a user, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:right 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Used in conjunction with the &lt;code&gt;@page&lt;/code&gt; rule, this selects all the right pages in a printed document.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;matches the root element of a tree representing the document.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:scope
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;CSS pseudo-class matches the elements that are a reference point for selectors to match against.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:target
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Selects the current active #news element (clicked on a URL containing that anchor name)&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:visited
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any links which have has been visited by the user.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#child-pseudo-class"&gt;
  &lt;/a&gt;
  Child Pseudo Class
&lt;/h1&gt;

&lt;p&gt;The :nth-child(an+b) CSS pseudo-class matches an element that has an+b-1 siblings before it in the document tree, for a given positive or zero value for n&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#class-name-selectors"&gt;
  &lt;/a&gt;
  Class Name Selectors
&lt;/h1&gt;

&lt;p&gt;The class name selector select all elements with the targeted class name. For example, the class name .warning would select the following &lt;/p&gt; element:&lt;br&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"warning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This would be some warning copy.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;You can also combine class names to target elements more specifically. Let's build on the example above to showcase a more complicated class selection.&lt;br&gt;
CSS&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.important&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.warning&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.warning.important&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;HTML&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"warning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This would be some warning copy.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"important warning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"important"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is some really important warning copy.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In this example, all elements with the .warning class will have a blue text color, elements with the .important class with have an orange text color, and all elements that have both the .important and .warning class name will have a red text color.&lt;br&gt;
Notice that within the CSS, the .warning.important declaration did not have any spaces between the two class&lt;br&gt;
names. This means it will only find elements which contain both class names warning and important in their class attribute. Those class names could be in any order on the element. If a space was included between the two classes in the CSS declaration, it would only select elements that have parent elements with a .warning class names and child elements with .important class names.&lt;/p&gt;

&lt;p&gt;Select element using its ID without the high specificity of the ID selector&lt;br&gt;
This trick helps you select an element using the ID as a value for an attribute selector to avoid the high specificity of&lt;br&gt;
the ID selector.&lt;br&gt;
HTML:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"element"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;CSS&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* High specificity will override many selectors */&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"element"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Low specificity, can be overridden easily */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;h1&gt;
  &lt;a href="#the-lastoftype-selector"&gt;
  &lt;/a&gt;
  The :last-of-type selector
&lt;/h1&gt;

&lt;p&gt;The :last-of-type selects the element that is the last child, of a particular type, of its parent. In the example below,&lt;br&gt;
the css selects the last paragraph and the last heading h1.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;:last-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#C5CAE9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;:last-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#CDDC39&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;





&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;First paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Second paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Last paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Heading 1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;First heading 2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Last heading 2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;h1&gt;
  &lt;a href="#css3-inrange-selector-example"&gt;
  &lt;/a&gt;
  CSS3 :in-range selector example
&lt;/h1&gt;



&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:in-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;





&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"15"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The border for this value will be blue&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :in-range CSS pseudo-class matches when an element has its value attribute inside the specified range limitations for this element. It allows the page to give a feedback that the value currently defined using the element is inside the range limits&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#id-selectors"&gt;
  &lt;/a&gt;
  ID selectors
&lt;/h1&gt;

&lt;p&gt;ID selectors select DOM elements with the targeted ID. To select an element by a specific ID in CSS, the # prefix is used.&lt;br&gt;
For example, the following HTML div element‚Ä¶&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleID"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Example&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;‚Ä¶can be selected by #exampleID in CSS as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#exampleID {
 width: 20px;
}
&lt;/code&gt;&lt;/pre&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: The HTML specs do not allow multiple elements with the same ID&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source - &lt;a href="https://developersdiscussion.com"&gt;https://developersdiscussion.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
      <category>developer</category>
    </item>
    <item>
      <title>Behind the Scenes of React.</title>
      <author>Prajwal Jain</author>
      <pubDate>Wed, 26 May 2021 05:56:07 +0000</pubDate>
      <link>https://dev.to/j836/behind-the-scenes-of-react-f01</link>
      <guid>https://dev.to/j836/behind-the-scenes-of-react-f01</guid>
      <description>&lt;h1&gt;
  &lt;a href="#behind-the-scenes-of-react"&gt;
  &lt;/a&gt;
  Behind the Scenes of React
&lt;/h1&gt;

&lt;p&gt;Arent you guys curiousü§î about what does React do behind the scenes and how it does so many things for us..?&lt;/p&gt;

&lt;p&gt;Well,this blog comes out of my curiosity of how the developers at facebook came to create this wonderful thing which caused a revoltion in the World of Web.&lt;/p&gt;

&lt;p&gt;Do you know that react has its own DOM!Ya,you got it!same as that of browser has!&lt;/p&gt;

&lt;p&gt;Okay.You may think thats great!But why would someone need an Extra DOM?&lt;br&gt;
Eventually,whatever changes are going to occur are on the brwoser's DOM, right?&lt;/p&gt;

&lt;p&gt;Well,thats true..But but but...there are some crucial points we need to understand.&lt;/p&gt;

&lt;p&gt;1.Say we have 10,000 lines of code.We change 1 line of code and the browser DOM has to re render all 10,000 lines of code!&lt;br&gt;
This is expensive.&lt;br&gt;
WHoaaaaa!this is what used to happen before React and similar technologies.&lt;/p&gt;

&lt;p&gt;2.Whenever a component's state changes,code is re rendered by DOM, and browser has to repaint each and every element on the screen.This involves a lot of mathematical and other calculations.&lt;br&gt;
So our browser is doing unnecessary cycling of complete DOM whereas only a single elements' state has changed.Thus,More the items to repaint slower the app.&lt;/p&gt;

&lt;p&gt;And that's the reason why,React has Virtual DOM.&lt;br&gt;
It helps in minimizing the actual changes on browser DOM.How?&lt;/p&gt;

&lt;p&gt;Lets see.&lt;/p&gt;

&lt;p&gt;Initally,virtual DOM will be an exact copy of real DOM.&lt;/p&gt;

&lt;p&gt;In React,whenever a components' state changes,the changes are reflected in Virtual DOM.&lt;br&gt;
Thus,Virtual DOM has the updated state of the component.&lt;/p&gt;

&lt;p&gt;Now it checks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VirtualDOM&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Browsers&lt;/span&gt; &lt;span class="nx"&gt;DOM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;chill&lt;/span&gt; &lt;span class="nx"&gt;man&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;browsers&lt;/span&gt; &lt;span class="nx"&gt;DOM&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;where&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;changed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a high level overview of what diffing algorithm does.&lt;/p&gt;

&lt;p&gt;Thus,browsers' work has highly reduced and now it will help us loading our app faster!&lt;/p&gt;

&lt;p&gt;The process through which React updates the DOM is known as Reconciliation.&lt;br&gt;
This reconciliation has 2 phases :&lt;br&gt;
Render Phase&lt;br&gt;
Commit Phase&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#render-phase"&gt;
  &lt;/a&gt;
  Render Phase
&lt;/h2&gt;

&lt;p&gt;The Render phase takes your JSX and turns it into a javascript representation. This is nothing but the VirtualDOM.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#commit-phase"&gt;
  &lt;/a&gt;
  Commit Phase
&lt;/h2&gt;

&lt;p&gt;The commit phase is actually taking that representation and applying it to the real DOM.&lt;br&gt;
The commit phase is where React actually touches the DOM and makes changes.&lt;/p&gt;

&lt;p&gt;An Importatnt Point:&lt;br&gt;
React does not commit state changes one after the other if there are multiple state changes.&lt;br&gt;
Instead,&lt;br&gt;
React goes through its virtual DOM ,creates a list of those changes that need to be made to the actual DOM and then does it all in one single process.&lt;br&gt;
In fancy words,React does batch updates.&lt;/p&gt;

&lt;p&gt;So putting all pieces together,&lt;br&gt;
Reconciliation = Render + Diffing occurs in between + Commit.&lt;/p&gt;

&lt;p&gt;If there is no change in the state then commit is not done although render has occured.&lt;/p&gt;

&lt;p&gt;Now that you have understood reconcilitaion lets understand how diffing works and different factors that affect diffing.&lt;/p&gt;

&lt;p&gt;React works on heursitic search.In simple terms,a heuristic search is a technique which has some previous knowledge about the search.&lt;br&gt;
So the assumptions(knowledge) that the React has is:&lt;/p&gt;

&lt;p&gt;Two elements of different types will produce different trees.&lt;br&gt;
For a stable re-render key props are required on child elements.(Refer Docs)&lt;/p&gt;

&lt;p&gt;Whenever the root elements have different types,&lt;br&gt;
for eg. initialliy it was&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello React&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then we change it to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello React&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React will destroy the old tree and build the new tree from scratch. All the children will also get destroyed.&lt;br&gt;
Destroying old tree =&amp;gt; all the state associated with it is gone.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dom-elements-of-the-same-type"&gt;
  &lt;/a&gt;
  DOM Elements Of The Same Type
&lt;/h2&gt;

&lt;p&gt;When comparing two React DOM elements of the same type,react only updates the changed attributes.&lt;br&gt;
Same goes when updating style.&lt;br&gt;
For eg:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"hero"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello React&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is changed to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello React&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When only the attributes are changed,DOM nodes are not recreated =&amp;gt; state is maintained =&amp;gt;component is already on the page =&amp;gt; DOM does not need to repaint the DOM styles on the view.This is what makes React super fast!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#component-elements-of-the-same-type"&gt;
  &lt;/a&gt;
  Component Elements Of The Same Type
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Now we are on COMPONENTS of same type.Earlier it was DOM elements of same type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of reiterating what docs has written,read react docs.It has been beautifully explained there along with simple examples.&lt;/p&gt;

&lt;p&gt;Thats it from this blog!&lt;br&gt;
If you found this post useful do react to this post, which inspires me to write more. If you have any comments or corrections that could improve this post, I would be glad to receive them. Thank you for your time üëãüèº üíô.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reconciliation</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Linux Kernel vs. Memory Fragmentation (Part II)</title>
      <author>Wenbo Zhang</author>
      <pubDate>Wed, 26 May 2021 05:52:28 +0000</pubDate>
      <link>https://dev.to/ethercflow/linux-kernel-vs-memory-fragmentation-part-ii-6mg</link>
      <guid>https://dev.to/ethercflow/linux-kernel-vs-memory-fragmentation-part-ii-6mg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQeNHjgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://download.pingcap.com/images/blog/linux-memory-fragmentation-and-defragmentation.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQeNHjgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://download.pingcap.com/images/blog/linux-memory-fragmentation-and-defragmentation.png" alt="Linux kernel memory fragmentation and defragmentation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-1"&gt;Linux Kernel vs. Memory Fragmentation (Part I)&lt;/a&gt;, I concluded that grouping by migration types only delays memory fragmentation, but does not fundamentally solve it. As the memory fragmentation increases and it does not have enough contiguous physical memory, performance degrades.&lt;/p&gt;

&lt;p&gt;Therefore, to mitigate the performance degradation, the Linux kernel community introduced &lt;strong&gt;memory compaction&lt;/strong&gt; to the kernel.&lt;/p&gt;

&lt;p&gt;In this post, I'll explain the principle of memory compaction, how to view the fragmentation index, and how to quantify the latency overheads caused by memory compaction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-compaction"&gt;
  &lt;/a&gt;
  Memory compaction
&lt;/h2&gt;

&lt;p&gt;Before memory compaction, the kernel used lumpy reclaim for defragmentation. However, this feature was removed from v3.10 (currently the most widely used kernel version). If you'd like to learn more, you can read about lumpy reclaim in the articles I listed in &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-1#a-brief-history-of-defragmentation"&gt;A brief history of defragmentation&lt;/a&gt;. For now, let me bring your mind to memory compaction.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#algorithm-introduction"&gt;
  &lt;/a&gt;
  Algorithm introduction
&lt;/h3&gt;

&lt;p&gt;The article &lt;a href="https://lwn.net/Articles/368869/"&gt;Memory compaction&lt;/a&gt; on LWN.net explains the algorithmic idea of memory compaction in detail. You can take the following fragmented zone as a simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_fB8HNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/a-small-fragmented-memory-zone.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_fB8HNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/a-small-fragmented-memory-zone.png" alt="A small fragmented memory zone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A small fragmented memory zone - LWN.net &lt;/p&gt;

&lt;p&gt;The white boxes are free pages, while those in red are allocated pages.&lt;/p&gt;

&lt;p&gt;Memory compaction for this zone breaks down into three major steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Scan this zone from left to right for red pages of the MIGRATE_MOVABLE migration type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjxHISN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/linux-kernel-movable-pages.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjxHISN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/linux-kernel-movable-pages.png" alt="Search for movable pages"&gt;&lt;/a&gt;&lt;/p&gt;

 Search for movable pages &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At the same time, scan this zone from right to left for free pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dPtWrv1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/linux-kernel-free-pages.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPtWrv1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/linux-kernel-free-pages.png" alt="Search for free pages"&gt;&lt;/a&gt;&lt;/p&gt;

 Search for free pages &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shift movable pages at the bottom to free pages at the top, thus creating a contiguous chunk of free space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3Vv8O9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/a-small-memory-zone-after-memory-compaction.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3Vv8O9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/a-small-memory-zone-after-memory-compaction.png" alt="The small memory zone after memory compaction"&gt;&lt;/a&gt;&lt;/p&gt;

 The memory zone after memory compaction &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This principle seems relatively simple, and the kernel also provides &lt;code&gt;/proc/sys/vm/compact_memory&lt;/code&gt; as the interface for manually triggering memory compaction.&lt;/p&gt;

&lt;p&gt;However, as mentioned in &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-1"&gt;Part I&lt;/a&gt; and &lt;a href="https://lwn.net/Articles/591998/"&gt;Memory compaction issues&lt;/a&gt;, memory compaction is not very efficient in practice‚Äîat least for the most commonly-used kernel, v3.10‚Äîno matter whether it is triggered automatically or manually. Due to the high overhead it causes, it becomes a performance bottleneck instead.&lt;/p&gt;

&lt;p&gt;The open source community did not abandon this feature but continued to optimize it in subsequent versions. For example, the community &lt;a href="https://github.com/torvalds/linux/commit/698b1b3064"&gt;introduced kcompactd&lt;/a&gt; to the kernel in v4.6 and &lt;a href="https://lwn.net/Articles/686801/"&gt;made direct compaction more deterministic&lt;/a&gt; in v4.8.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-memory-compaction-is-performed"&gt;
  &lt;/a&gt;
  When memory compaction is performed
&lt;/h3&gt;

&lt;p&gt;In kernel v3.10, memory compaction is performed under any of the following situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;kswapd&lt;/code&gt; kernel thread is called to balance zones after a failed high-order allocation.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;khugepaged&lt;/code&gt; kernel thread is called to collapse a huge page.&lt;/li&gt;
&lt;li&gt;Memory compaction is manually triggered via the &lt;code&gt;/proc&lt;/code&gt; interface.&lt;/li&gt;
&lt;li&gt;The system performs direct reclaim to meet higher-order memory requirements, including handling Transparent Huge Page (THP) page fault exceptions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href="https://pingcap.com/blog/why-we-disable-linux-thp-feature-for-databases"&gt;Why We Disable Linux's THP Feature for Databases&lt;/a&gt;, I described how THP slows down performance and recommended disabling this feature. I will put it aside in this article and mainly focus on the memory allocation path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QeLICvVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/memory-allocation-in-the-slow-path.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QeLICvVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/memory-allocation-in-the-slow-path.png" alt="Memory allocation in the slow path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Memory allocation in the slow path &lt;/p&gt;

&lt;p&gt;When the kernel allocates pages, if there are no available pages in the free lists of the buddy system, the following occurs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The kernel processes this request in the slow path and tries to allocate pages using the low watermark as the threshold.&lt;/li&gt;
&lt;li&gt;If the memory allocation fails, which indicates that the memory may be slightly insufficient, the page allocator wakes up the &lt;code&gt;kswapd&lt;/code&gt; thread to asynchronously reclaim pages and attempts to allocate pages again, also using the low watermark as the threshold.&lt;/li&gt;
&lt;li&gt;If the allocation fails again, it means that the memory shortage is severe. In this case, the kernel runs asynchronous memory compaction first.&lt;/li&gt;
&lt;li&gt;If the allocation still does not succeed after the async memory compaction, the kernel directly reclaims memory.&lt;/li&gt;
&lt;li&gt;After the direct memory reclaim, if the kernel doesn't reclaim enough pages to meet the demand, it performs direct memory compaction. If it doesn't reclaim a single page, the OOM Killer is called to deallocate memory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above steps are only a simplified description of the actual workflow. In real practice, it is more complicated and will be different depending on the requested memory order and allocation flags.&lt;/p&gt;

&lt;p&gt;As for direct memory reclaim, it is not only performed by the kernel when the memory is severely insufficient, but also triggered due to memory fragmentation in practical scenarios. In a certain period, these two situations may occur simultaneously.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-analyze-memory-compaction"&gt;
  &lt;/a&gt;
  How to analyze memory compaction
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#quantify-the-performance-latency"&gt;
  &lt;/a&gt;
  Quantify the performance latency
&lt;/h4&gt;

&lt;p&gt;As mentioned in the previous section, the kernel may perform memory reclaim or memory compaction when allocating memory. To make it easier to quantify the latency caused by direct memory reclaim and memory compaction for each participating thread, I committed two tools, &lt;a href="https://github.com/iovisor/bcc/blob/master/tools/drsnoop_example.txt"&gt;drsnoop&lt;/a&gt; and &lt;a href="https://github.com/iovisor/bcc/blob/master/tools/compactsnoop_example.txt"&gt;compactsnoop&lt;/a&gt;, to the &lt;a href="https://github.com/iovisor/bcc"&gt;BCC&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;Both tools are based on kernel events and come with detailed documentation, but there is one thing I want to note: to reduce the cost of introducing Berkeley Packet Filters (BPF), these two tools capture the latency of each corresponding event. Therefore, you may see from the output that each memory request corresponds to multiple latency results.&lt;/p&gt;

&lt;p&gt;The reason for the many-to-one relationship is that, for older kernels like v3.10, it is uncertain how many times the kernel will try to allocate during a memory allocation process in the slow path. The uncertainty also makes OOM Killer start to work either too early or too late, resulting in most tasks on the server being hung up for a long time.&lt;/p&gt;

&lt;p&gt;After the kernel merged the patch &lt;a href="https://github.com/torvalds/linux/commit/c73322d0"&gt;mm: fixed 100% CPU kswapd busyloop on unreclaimable nodes&lt;/a&gt; in v4.12, the maximum number of direct memory reclaims is limited to 16. Let's assume that the average latency of a direct memory reclaim is 10 ms. (Shrinking active or inactive LRU chain tables is time consuming for today's servers with several hundred gigabytes of RAM. There is also an additional delay if the server needs to wait for a dirty page to be written back.)&lt;/p&gt;

&lt;p&gt;If a thread asks the page allocator for pages and gets enough memory after only one direct memory reclaim, the latency of this allocation increases by 10 ms. If the kernel tries 16 times before reclaiming enough memory spaces, then the increased latency of this allocation is 160 ms instead of 10 ms, which may severely degrade performance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#view-the-fragmentation-index"&gt;
  &lt;/a&gt;
  View the fragmentation index
&lt;/h4&gt;

&lt;p&gt;Let's come back to memory compaction. There are four main steps for the core logic of memory compaction:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine whether a memory zone is suitable for memory compaction.&lt;/li&gt;
&lt;li&gt;Set the starting page frame number for scanning.&lt;/li&gt;
&lt;li&gt;Isolate pages of the MIGRATE_MOVABLE type.&lt;/li&gt;
&lt;li&gt;Migrate pages of the MIGRATE_MOVABLE type to the top of the zone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the zone still needs compaction after one migration, the kernel loops the above process for three to four times until the compaction is finished. This operation consumes a lot of CPU resources; therefore, you can often see from the monitoring that the system CPU usage is full.&lt;/p&gt;

&lt;p&gt;Well then, how does the kernel determine whether a zone is suitable for memory compaction?&lt;/p&gt;

&lt;p&gt;If you use the &lt;code&gt;/proc/sys/vm/compact_memory&lt;/code&gt; interface to forcibly require memory compaction for a zone, there is no need for the kernel to determine it.&lt;/p&gt;

&lt;p&gt;If memory compaction is automatically triggered, the kernel calculates the fragmentation index of the requested order to determine whether the zone has enough memory left for compaction. The closer the index is to 0, the more the memory allocation is likely to fail due to insufficient memory. This means memory reclaim is more suitable than memory compaction at this time. The closer the index is to 1,000, the more the allocation is likely to fail due to excessive external fragmentation. Therefore, in this situation, it is appropriate to do memory reclaim, not memory compaction.&lt;/p&gt;

&lt;p&gt;Whether the kernel chooses to perform memory compaction or memory reclaim is determined by the external fragmentation threshold. You can view this threshold through the &lt;code&gt;/proc/sys/vm/extfrag_threshold&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;You can execute &lt;code&gt;cat /sys/kernel/debug/extfrag/extfrag_index&lt;/code&gt; to directly view the fragmentation index through &lt;code&gt;/sys/kernel/debug/extfrag/extfrag_index&lt;/code&gt;. Note that the following screen shot results are divided by 1,000:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R_Hfd7eY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/fragment-index-command.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_Hfd7eY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/fragment-index-command.png" alt="Linux  raw `/sys/kernel/debug/extfrag/extfrag_index` endraw  command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and cons
&lt;/h4&gt;

&lt;p&gt;Both the monitoring interfaces based on the &lt;code&gt;/proc&lt;/code&gt; file system and the tools based on kernel events (&lt;a href="https://github.com/iovisor/bcc/blob/master/tools/drsnoop_example.txt"&gt;drsnoop&lt;/a&gt; and &lt;a href="https://github.com/iovisor/bcc/blob/master/tools/compactsnoop_example.txt"&gt;compactsnoop&lt;/a&gt;) can be used to analyze memory compaction, but with different pros and cons.&lt;/p&gt;

&lt;p&gt;The monitoring interfaces are simple to use, but they cannot perform quantitative analysis on the latency results, and the sampling period is too long. The tools based on kernel events can solve these problems, but you need a certain understanding of the working principle of the kernel-related subsystems to use these tools, and there are certain requirements for the client's kernel version.&lt;/p&gt;

&lt;p&gt;Therefore, the monitoring interfaces and the kernel-events-based tools actually complement each other. Using them together can help you to analyze memory compaction thoroughly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-mitigate-memory-fragmentation"&gt;
  &lt;/a&gt;
  How to mitigate memory fragmentation
&lt;/h3&gt;

&lt;p&gt;The kernel is designed to take care of slow backend devices. For example, it implements the second chance method and the refault distance based on the LRU algorithm and does not support limiting the percentage of &lt;code&gt;page cache&lt;/code&gt;. Some companies used to customize their own kernel to limit the &lt;code&gt;page cache&lt;/code&gt; and tried to submit it to the upstream kernel community, but the community did not accept it. I think it may be because this feature causes problems such as working set refaults.&lt;/p&gt;

&lt;p&gt;Therefore, to reduce the frequency of direct memory reclaim and mitigate fragmentation issues, it is a good choice to increase &lt;code&gt;vm.min_free_kbytes&lt;/code&gt; (up to 5% of the total memory). This indirectly limits the percentage of &lt;code&gt;page cache&lt;/code&gt; for scenarios with a lot of I/O operations, and the machine has more than 100 GB of memory.&lt;/p&gt;

&lt;p&gt;Although setting &lt;code&gt;vm.min_free_kbytes&lt;/code&gt; to a bigger value wastes some memory, it is negligible. For example, if a server has 256 GB memory and you set &lt;code&gt;vm.min_free_kbytes&lt;/code&gt; to &lt;code&gt;"4G"&lt;/code&gt;, it only takes 1.5% of the total memory space.&lt;/p&gt;

&lt;p&gt;The community apparently noticed the waste of memory as well, so the kernel merged the patch &lt;a href="http://lkml.iu.edu/hypermail/linux/kernel/1602.3/02009.html"&gt;mm: scale kswapd watermarks in proportion to memory&lt;/a&gt; in v4.6 to optimize it.&lt;/p&gt;

&lt;p&gt;Another solution is to execute &lt;code&gt;drop cache&lt;/code&gt; at the right time, but it may cause more jitter to the application performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-1"&gt;Part I&lt;/a&gt; of this post series, I briefly explained why the external fragmentation affects performance and introduced the efforts the community has made over the years in defragmentation. Here in Part II, I've focused on the defragmentation principles in the kernel v3.10 and how to observe memory fragmentation quantitatively and qualitatively.&lt;/p&gt;

&lt;p&gt;I hope this post series will be helpful for you! If you have any other thoughts about Linux memory management, welcome to join the &lt;a href="https://slack.tidb.io/invite?team=tidb-community&amp;amp;channel=everyone&amp;amp;ref=pingcap-blog"&gt;TiDB Community Slack&lt;/a&gt; workspace to share and discuss with us.&lt;/p&gt;

&lt;p&gt;Originally pulished at &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-2"&gt;Linux Kernel vs. Memory Fragmentation (Part II)&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Architecture:Web app[front-end] from scratch 2021 - v2</title>
      <author>lakshmanan-arumugam</author>
      <pubDate>Wed, 26 May 2021 05:45:24 +0000</pubDate>
      <link>https://dev.to/lakshmananarumugam/architecture-web-app-front-end-from-scratch-2021-v2-fa</link>
      <guid>https://dev.to/lakshmananarumugam/architecture-web-app-front-end-from-scratch-2021-v2-fa</guid>
      <description>&lt;p&gt;Part 1 - &lt;a href="https://dev.to/lakshmananarumugam/architecture-web-app-front-end-from-scratch-2021-f6"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Coding style guide&lt;/li&gt;
&lt;li&gt;Theme customization&lt;/li&gt;
&lt;li&gt;Es-lint and Prettier&lt;/li&gt;
&lt;li&gt;Git pre-commit hook&lt;/li&gt;
&lt;li&gt;Internationalization&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#code-style-guide"&gt;
  &lt;/a&gt;
  Code style guide
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/HEURGne9Vj856oivkD/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/HEURGne9Vj856oivkD/source.gif" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Every product use multiple language and tools like SCSS, ReactJS / VueJS/ EmberJS,  Handlebar, HTML5, Typescript, Javascript...etc.., Each one have some code standard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When we start building a web app front end maybe work with one front end developer in the product. but, later many more developers will come and join the team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In that time developer writes him/her own style of the code and writes a non-standard code. in this case, in a later stage, we have to face code maintainability, existing feature enhancement development delay, and spend more time to fix the bug. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Real-time problems:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In a single file with 1000 lines of code&lt;/li&gt;
&lt;li&gt;Same style code write on different pages (Instead of writing a common component)&lt;/li&gt;
&lt;li&gt;Code in-consistency (One dev write outdated function and another dev write an advanced released function/methods)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Solution:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the framework recommended style guide and enforce it.&lt;/li&gt;
&lt;li&gt;Refer other tech gurus following code style guide.&lt;/li&gt;
&lt;li&gt;Use es-lint in git pre-commit hook(I will explain more about below here)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://google.github.io/styleguide/"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/javascript"&gt;Airbnb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v3.vuejs.org/style-guide/"&gt;Vue 3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#theme-customization"&gt;
  &lt;/a&gt;
  Theme customization
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1BcSawJYHPjfHekFYe/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1BcSawJYHPjfHekFYe/giphy.gif" alt="Theme customization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the last couple of years every SASS product provide a theme customization option. a user able to change their preferred theme like dark, light, green ...etc..,.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You may have doubt &lt;code&gt;why I am talking about this in web app architecture. it looks like a small one.&lt;/code&gt;  Yes,  but it's more important in long term.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Real-time problem:&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We build a product without considering theme customization. the later stage we want to add it. it will be more complicated. because the style/CSS files grown. we have to add theme customization changes to all of the style files. (It will be more like re-work overall the product)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Solution:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we set up a product add the theme customization base also.&lt;/li&gt;
&lt;li&gt;Use variable for each color code and serve all the files accessible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Reference:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://css-tricks.com/theming-and-theme-switching-with-react-and-styled-components/"&gt;Styled component&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/css-custom-properties-theming/"&gt;CSS Custom properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kswanie21.medium.com/css-modules-sass-in-create-react-app-37c3152de9"&gt;CSS-Modules&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#eslint-and-prettier"&gt;
  &lt;/a&gt;
  Eslint and prettier
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/SWoSkN6DxTszqIKEqv/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SWoSkN6DxTszqIKEqv/giphy.gif" alt="Eslint and prettier"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's a must-have to add it when you set up a web app. because this one will help to maintain your javascript code standard problems and code formatting. &lt;/li&gt;
&lt;li&gt;Eslint helps to identify your JS code problem using as per the dev configuration. by default it will check eslint default eslint rules configuration. if we need, we able to customize our own rules using the .eslintrc.{js,yml,json} file.&lt;/li&gt;
&lt;li&gt;Prettier helps to keep your product code clean and format. The main benefit is a uniform codebase and easier to read and modify. refer the below example: 
&lt;em&gt;Before without prettier&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function HelloWorld({greeting = "hello", greeted = '"World"', silent = false, onMouseOver,}) {

  if(!greeting){return null};

     // TODO: Don't use random in render
  let num = Math.floor (Math.random() * 1E+7).toString().replace(/\.\d+/ig, "")

  return &amp;lt;div className='HelloWorld' title={`You are visitor number ${ num }`} onMouseOver={onMouseOver}&amp;gt;

    &amp;lt;strong&amp;gt;{ greeting.slice( 0, 1 ).toUpperCase() + greeting.slice(1).toLowerCase() }&amp;lt;/strong&amp;gt;
    {greeting.endsWith(",") ? " " : &amp;lt;span style={{color: '\grey'}}&amp;gt;", "&amp;lt;/span&amp;gt; }
    &amp;lt;em&amp;gt;
    { greeted }
    &amp;lt;/em&amp;gt;
    { (silent)
      ? "."
      : "!"}

    &amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Before without prettier&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function HelloWorld({
  greeting = "hello",
  greeted = '"World"',
  silent = false,
  onMouseOver,
}) {
  if (!greeting) {
    return null;
  }

  // TODO: Don't use random in render
  let num = Math.floor(Math.random() * 1e7)
    .toString()
    .replace(/\.\d+/gi, "");

  return (
    &amp;lt;div
      className="HelloWorld"
      title={`You are visitor number ${num}`}
      onMouseOver={onMouseOver}
    &amp;gt;
      &amp;lt;strong&amp;gt;
        {greeting.slice(0, 1).toUpperCase() + greeting.slice(1).toLowerCase()}
      &amp;lt;/strong&amp;gt;
      {greeting.endsWith(",") ? (
        " "
      ) : (
        &amp;lt;span style={{ color: "grey" }}&amp;gt;", "&amp;lt;/span&amp;gt;
      )}
      &amp;lt;em&amp;gt;{greeted}&amp;lt;/em&amp;gt;
      {silent ? "." : "!"}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Reference&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ESlint(&lt;a href="https://eslint.org/docs/user-guide/getting-started"&gt;https://eslint.org/docs/user-guide/getting-started&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;VS code(&lt;a href="https://www.digitalocean.com/community/tutorials/linting-and-formatting-with-eslint-in-vs-code"&gt;https://www.digitalocean.com/community/tutorials/linting-and-formatting-with-eslint-in-vs-code&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Bonus:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We able to check the es-lint problem when we are in working using VS code. so, if we added it VScode. we don't need to check using the command. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;NOTE: Es-lint and prettier set up in VS code and the product is an added advantage. but, it must have in the product.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-precommit-hook"&gt;
  &lt;/a&gt;
  Git pre-commit hook
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/8TweEdaxxfuElKkRxz/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/8TweEdaxxfuElKkRxz/giphy.gif" alt="Git pre-commit hook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The pre-commit hooks are basically checking custom scripts when a developer pushes changes to the branch. if the script did not returns any errors it allows to push of the code. if have some error it will throw it on the terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Real-time problem:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The developer able to push the code changes with es-lint errors and un-formatted code. because this all command-line oriented. Maybe a developer forgot to check these errors. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the pre-commit hooks script to the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Reference&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/husky"&gt;Huskey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-add-commit-hooks-to-git-with-husky-to-automate-code-tasks/"&gt;Setup and pre-commit hook&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#internationalization"&gt;
  &lt;/a&gt;
  Internationalization
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/62CDX43Hr8WlO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/62CDX43Hr8WlO/giphy.gif" alt="Internationalization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Internalisation is about provide multiple language support like english, german, spanish..etc..,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Real-time problem:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build an app without considering Internalisation support is more like re-work overall the product code template. because, when we plan to support Internalisation. The copy text will be completely different from the old one. Example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without translation support:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;Hello world&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With translation support:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;{{t "Hello world"}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Solution:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By default set up the internalization support with core language. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Reference&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.soluling.com/Help/Web/Index.htm"&gt;Base setup for all language&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading this post. üòä&lt;/p&gt;

&lt;p&gt;Part 3 will be coming soon...&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>architecture</category>
    </item>
    <item>
      <title>BE THE SPARK, THAT LIGHTS UP SOMEONE ELSE'S LIFE</title>
      <author>Bhuvaneswari Subramani</author>
      <pubDate>Wed, 26 May 2021 05:31:20 +0000</pubDate>
      <link>https://dev.to/aws-heroes/be-the-spark-that-lights-up-someone-else-s-life-1169</link>
      <guid>https://dev.to/aws-heroes/be-the-spark-that-lights-up-someone-else-s-life-1169</guid>
      <description>&lt;p&gt;Some of us have been really lucky in the pandemic with comfortable work options and job security. But that has not been the case for many. Keeping this in mind, we have created a simple mechanism to connect active job seekers with organizations in order to let talent meet opportunity. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Job Seekers&lt;/strong&gt;&lt;br&gt;
Please visit the Talent Board &lt;a href="https://talent.awsug.in/"&gt;https://talent.awsug.in/&lt;/a&gt; and ADD your profile. Make sure to update your LinkedIn with contact details and skillsets, and correct the public view settings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HR Friends&lt;/strong&gt;&lt;br&gt;
Please visit the Talent Board &lt;a href="https://talent.awsug.in/"&gt;https://talent.awsug.in/&lt;/a&gt;, find the right profiles for the open roles in your organization and click on their LinkedIn url to download their profile as pdf or connect with them directly for CV/resume. Keep visiting the page to get more profiles. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BE THE SPARK&lt;/strong&gt;&lt;br&gt;
If you are neither a Job Seeker or nor HR, please help spread the word.&lt;/p&gt;

&lt;p&gt;Through this step, let us bring more power to the community. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pass this link &lt;a href="https://talent.awsug.in/"&gt;https://talent.awsug.in/&lt;/a&gt; to the people who have lost jobs due to pandemic &lt;/li&gt;
&lt;li&gt;Refer profiles under your company‚Äôs employee referral program&lt;/li&gt;
&lt;li&gt;Share this initiative with your HR team to find talent&lt;/li&gt;
&lt;li&gt;Amplify the program on social channels using #refer2resume&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Important Note&lt;/strong&gt; &lt;br&gt;
This is a community driven initiative and we do not collect any personal data or request for money for this program. Our intent is to connect talent with opportunities as a goodwill, and AWS User Group or the Referrer cannot guarantee a job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yWZB2ZhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/surchexzt2p2n4ksjpgo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yWZB2ZhG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/surchexzt2p2n4ksjpgo.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloudskills</category>
      <category>aws</category>
      <category>refer2resume</category>
    </item>
  </channel>
</rss>
