<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Python: Reimaging Constants</title>
      <author>Parth Agarwal</author>
      <pubDate>Sat, 02 Oct 2021 18:58:26 +0000</pubDate>
      <link>https://dev.to/ra101/python-reimaging-constants-1ghh</link>
      <guid>https://dev.to/ra101/python-reimaging-constants-1ghh</guid>
      <description>&lt;p&gt;A different implementation of constant for python&lt;/p&gt;

&lt;p&gt;I couldn't find a good implementation of constants, so created my own! Let's get started!&lt;/p&gt;

&lt;p&gt;Do checkout the complete code at &lt;a href="https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882"&gt;https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How it Should work&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;GITHUB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/ra101"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://ra101.github.io/"&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"dev.ra.101@protonmail.com"&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"〈 RA 〉"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;Links.GITHUB&lt;/code&gt; should return &lt;code&gt;https://github.com/ra101&lt;/code&gt; and &lt;br&gt;
&lt;code&gt;Link.GITHUB = 'new_value'&lt;/code&gt; or &lt;code&gt;Links.NEW_CONTANTS = NEW_VALUE&lt;/code&gt; both should return None, without assigning or creating new field&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#here-is-how-i-made-it"&gt;
  &lt;/a&gt;
  Here is How I made it!
&lt;/h1&gt;

&lt;p&gt;1) We need to mock all setter in a meta class, which will be used by main class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstantMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Meta Class for Constant, How Constant class would behave
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Override set method to make it immutable
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.5) Lets add a external setter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# A external set method to make sure we can update value in __new__
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Override &lt;code&gt;__new__&lt;/code&gt; to make the actual class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsdict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        adding __keys__, __values__ fields
        and keys(), values() methods
        """&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clsdict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__values__"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__keys__"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__values__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__keys__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__keys__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__force_set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"values"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__values__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.5) Add below methods for polishing the class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# adding __getitem__ to make objects "subscriptable"
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# In case of for loops
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__keys__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__values__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Finally Lets create the class!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ConstantMeta&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Now this class can be inherited whenever required to make constants
    """&lt;/span&gt;

    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally! We are Done! We Created a almost immutable class that could be used as constants&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;GITHUB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://github.com/ra101"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://ra101.github.io/"&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"dev.ra.101@protonmail.com"&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConstantClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"〈 RA 〉"&lt;/span&gt;
        &lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;
        &lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Links&lt;/span&gt;

    &lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'any_new_value'&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Links.WEB: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WEB&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Author.values(): &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;dict(Author): &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;for key in Author.LINKS.keys()"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'getattr(Author.LINKS, "&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"): &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Links.WEB: https://ra101.github.io/

Author.values(): ['〈 RA 〉', 'https://ra101.github.io/', &amp;lt;__main__.ConstantClass object at 0x00000293A94768E0&amp;gt;]

dict(Author): {'NAME': '〈 RA 〉', 'WEB': 'https://ra101.github.io/', 'LINKS': &amp;lt;__main__.ConstantClass object at 0x00000293A94768E0&amp;gt;}

for key in Author.LINKS.keys()
getattr(Author.LINKS, "GITHUB"): https://github.com/ra101
getattr(Author.LINKS, "WEB"): https://ra101.github.io/
getattr(Author.LINKS, "EMAIL"): dev.ra.101@protonmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do checkout the complete code at &lt;a href="https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882"&gt;https://gist.github.com/ra101/aa27ff6e437f74ca56027a8c6b166882&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Some useful Libraries for .NET projects</title>
      <author>Jéssica Nathany</author>
      <pubDate>Sat, 02 Oct 2021 18:29:17 +0000</pubDate>
      <link>https://dev.to/jessicanathany/some-useful-libraries-for-net-projects-5dbo</link>
      <guid>https://dev.to/jessicanathany/some-useful-libraries-for-net-projects-5dbo</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsOcamuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tlg6wl3z27c8k6jmkq2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsOcamuU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tlg6wl3z27c8k6jmkq2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I will share same libraries and packages to make your .NET project easier, and explain a little about their functionality.Note: You can copy copy the library links from github and paste them into your Notions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NBuilder&lt;/strong&gt;&lt;br&gt;
Is a library that allows you to rapidly create test data, automatically. Some examples below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nbuilder/nbuilder"&gt;NBuilder Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package NBuilder -Version 6.1.0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lAP3NW-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhboepxzlaes8pc7ebn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lAP3NW-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxhboepxzlaes8pc7ebn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvDSnKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf3np76x7sph7b1jp3jh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfvDSnKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf3np76x7sph7b1jp3jh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote about this library in my last article&lt;a href="https://dev.to/jessicanathany/tools-o-improve-your-unit-test-with-net-1ekb"&gt;Tools o improve your unit test with .NET&lt;/a&gt;. I have a Github repository about Unit Test and I used this library for test ([Unit Test]&lt;a href="https://github.com/JessicaNathany/unit-test"&gt;https://github.com/JessicaNathany/unit-test&lt;/a&gt;) the code ist portuguese but I will write in english.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faker.NET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This library is a little diferent the NBuilder, because if you want something whic looks like actual names, address, email, thelephone numbers, etc you can use Faker.NET.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/slashdotdash/faker-cs"&gt;Faker.Net Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Faker.Net -Version 1.5.148&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bi3nQSQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwf01pxv7kf2jspa2wff.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bi3nQSQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwf01pxv7kf2jspa2wff.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bogus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bogus is a simple and sane fake data generator for .NET languages like C#, F# and VB.NET. Bogus is fundamentally a C# port of faker.js and inspired by FluentValidation's syntax sugar. Created by Brian Chavez.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bchavez/Bogus"&gt;Bogus Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Bogus -Version 33.1.1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The example bellow is from repository Brian Chavez&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJvvG_PF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyjxrqhn9d1s99wpgtyz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJvvG_PF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyjxrqhn9d1s99wpgtyz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ocelot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ocelot is a .NET API Gateway. This project is aimed at people using .NET running a micro services / service oriented architecture that need a unified point of entry into their system. However it will work with anything that speaks HTTP and run on any platform that ASP.NET Core supports.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ThreeMammals/Ocelot"&gt;Ocelot Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Ocelot -Version 17.0.0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The example below is taken from the website &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/multi-container-microservice-net-applications/implement-api-gateways-with-ocelot"&gt;Microsoft Documentation API Gateway with Ocelot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDBol4By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdjfs95zrpeixq5r19t1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDBol4By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdjfs95zrpeixq5r19t1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Polly&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Polly is a .NET resilience and transient-fault-handling library that allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ThreeMammals/Ocelot"&gt;Polly Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package Polly -Version 7.2.2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The example below is taken from repository Polly Github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmX0sdqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05xy2764e1q8ekhs5xz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmX0sdqL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v05xy2764e1q8ekhs5xz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CacheManager&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;CacheManager is an open source caching abstraction layer for .NET written in C#. It supports various cache providers and implements many advanced features.&lt;/p&gt;

&lt;p&gt;The main goal of the CacheManager package is to make developer's life easier to handle even very complex caching scenarios..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MichaCo/CacheManager"&gt;CacheManager Github&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Nuget: Install-Package CacheManager.Core -Version 2.0.0-beta-1629&lt;/em&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>developers</category>
      <category>packages</category>
    </item>
    <item>
      <title>🪟 Windows 11 inspired portfolio 🪟</title>
      <author>vova ushenko</author>
      <pubDate>Sat, 02 Oct 2021 18:19:47 +0000</pubDate>
      <link>https://dev.to/vovacodesca/windows-11-inspired-portfolio-nni</link>
      <guid>https://dev.to/vovacodesca/windows-11-inspired-portfolio-nni</guid>
      <description>&lt;p&gt;👋Hi there and Happy Hacktoberfest 2021 fellow developers! 🎊 &lt;br&gt;
I hope you're doing fantastic!&lt;/p&gt;

&lt;p&gt;In the past, I was powerfully impressed by a portfolio that was built like a simple OS. So, this basically has always been my small dream to build a portfolio-app that visually mimics an operating system.&lt;/p&gt;

&lt;p&gt;Recently, I had some free time and I finally decided to turn this plan into reality. So, I started working on 🪟 Windows-11 inspired portfolio ✨.&lt;/p&gt;

&lt;p&gt;You can try it out here: &lt;a href="https://www.vovacodes.ca/"&gt;https://www.vovacodes.ca/&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/vovaushenko/vovacodes"&gt;https://github.com/vovaushenko/vovacodes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a Next.js app built from scratch, that has a small backend powered by MongoDB. It is fully written in TypeScript, so if you're learning it, you could explore the GitHub repo 💥&lt;/p&gt;

&lt;p&gt;In a nutshell the stack is - &lt;br&gt;
⭐ Next.js, &lt;br&gt;
⭐ React, &lt;br&gt;
⭐ Styled-Components, &lt;br&gt;
⭐ Redux &lt;br&gt;
⭐ Mongo DB.&lt;/p&gt;

&lt;p&gt;The app has a design and component system powered by &lt;br&gt;
💜 Storybook 💜 &lt;/p&gt;

&lt;p&gt;This is not only an &lt;em&gt;OS-looking app&lt;/em&gt; but also &lt;em&gt;beautiful slides&lt;/em&gt; about me, which can be found by navigating and using the OS.&lt;/p&gt;

&lt;p&gt;The App has a ton of cool features (for instance you can leave me a comment and later it will be displayed with cool random avatar in flying carousel). &lt;strong&gt;So, leave a comment!😉&lt;/strong&gt; I would be happy to hear from You! 🙌&lt;/p&gt;

&lt;p&gt;Essentially, it has a ton of nifty features, so consider exploring it and let me know what is your favorite one!✨ &lt;/p&gt;

&lt;p&gt;❗ &lt;em&gt;Notice, on mobile only portfolio part will be shown&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS. I Use Arch BTW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Hacktoberfest 2021 Again! Wish you all the best! &lt;/p&gt;

&lt;p&gt;Cheers! 🤙&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At a glance&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6m2RztYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca6669yuw5lynzihrxrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6m2RztYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca6669yuw5lynzihrxrw.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05cU9UFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y6o28hryik4xictggy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05cU9UFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y6o28hryik4xictggy5.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzCkruBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vihiirh1kfetidr87ubd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzCkruBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vihiirh1kfetidr87ubd.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4iyUtgsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v8an8xlvnve68h16ass.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4iyUtgsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v8an8xlvnve68h16ass.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ssOiV1DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oydl5h6zt1fi9l7fq4ap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssOiV1DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oydl5h6zt1fi9l7fq4ap.png" alt="Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind, this is a work in progress! More features to come (and bugs tackled 😄)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GitLab CI Inheritance Sucks</title>
      <author>Randall</author>
      <pubDate>Sat, 02 Oct 2021 18:12:00 +0000</pubDate>
      <link>https://dev.to/mistval/gitlab-ci-inheritance-sucks-2dh5</link>
      <guid>https://dev.to/mistval/gitlab-ci-inheritance-sucks-2dh5</guid>
      <description>&lt;p&gt;Or at least, cross-repo inheritance.&lt;/p&gt;

&lt;p&gt;I've worked at a couple of places now where GitLab CI templates are heavily used, &lt;code&gt;include&lt;/code&gt;d across repos, and inherited from.&lt;/p&gt;

&lt;p&gt;I've found it confusing, inflexible, and an enemy of build reproducibility.&lt;/p&gt;

&lt;p&gt;In a repo where this is done heavily, if I want to change something, I must figure out:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Does my &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; actually contain this job at all? Or is it from a template somewhere else?&lt;/li&gt;
&lt;li&gt;Where the heck is it (or its parent) coming from? This repo includes templates from three other repos, and they include templates from other repos too. Where it at???&lt;/li&gt;
&lt;li&gt;How do I change the parent job without breaking any other pipelines that depend on it? Maybe I can just inherit from it and add a &lt;code&gt;before_script&lt;/code&gt;? But what if the parent job gets updated with its own &lt;code&gt;before_script&lt;/code&gt; later, and my overriding it breaks something?&lt;/li&gt;
&lt;li&gt;Will the person who owns the parent template's repo let me change it?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So after getting all of that out of the way, I make the change in the template repo. It breaks someone else's pipeline somewhere. But there wasn't even a commit to their repo. Their pipeline just suddenly just starts failing. What?? This totally breaks build reproducibility!&lt;/p&gt;

&lt;p&gt;I've gotten to where I'd rather just have a bunch of duplicated GitLab CI code across repos.&lt;/p&gt;

&lt;p&gt;Am I crazy, am I missing something, or do others feel the same?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>gitlab</category>
    </item>
    <item>
      <title>Flutter Widgets Stateless – Stateful Widget Difference</title>
      <author>Baransel</author>
      <pubDate>Sat, 02 Oct 2021 17:00:01 +0000</pubDate>
      <link>https://dev.to/baransel/flutter-widgets-stateless-stateful-widget-difference-3fl7</link>
      <guid>https://dev.to/baransel/flutter-widgets-stateless-stateful-widget-difference-3fl7</guid>
      <description>&lt;p&gt;We will discuss the concept of widget, which is one of the structures we hear the most in Flutter. At the same time, we will talk about Stateless and Stateful widgets that change shape according to our page structure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-widget"&gt;
  &lt;/a&gt;
  What is widget?
&lt;/h3&gt;

&lt;p&gt;Almost everything in Flutter is widget, and the concept we call widgets are components that are given to us ready-made. Many structures, like each interface element, are considered as widgets. You can review the &lt;em&gt;&lt;strong&gt;&lt;a href="https://flutter.dev/docs/development/ui/widgets" rel="nofollow"&gt;widget catalog&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt; to look at Flutter's widget features and examples. Using these widgets, we can develop our application easily and quickly. It is appropriate, we use widgets within the widget. For this, it is important to understand the widget structure. We should know that each structure is actually a widget and the features of these widgets.&lt;/p&gt;

&lt;p&gt;Speaking of nested widgets, we can give an example. While some widgets accept only one widget; some widgets can accept multiple widgets inside. We can think of it this way. In Flutter, there is a widget called Column, which we will cover in detail as page structures in the following lessons, it can take multiple widgets. Because we can think of the Column widget as a list that is aligned one after the other. Thus, we can easily understand that it can actually take more than one element. However, we think of the Container widget as a box, and we can add only one element to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnxRqDXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://baransel.dev/post/flutter-widgets-stateless-and-stateful/basic-widget-structure.png" class="article-body-image-wrapper"&gt;&lt;img alt="Basic widget structures for Flutter" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnxRqDXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://baransel.dev/post/flutter-widgets-stateless-and-stateful/basic-widget-structure.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's also talk about &lt;em&gt;MaterialApp&lt;/em&gt; and &lt;em&gt;Scaffold&lt;/em&gt; and &lt;em&gt;AppBar&lt;/em&gt; widgets, which are the most used widgets.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;MaterialApp&lt;/strong&gt; widget is one of the richest widgets. After we create our project in our Main class, we usually give a material app inside the run app method. In order to use other widgets, we especially need the MaterialApp widget for routing. When we build our application, we can consider this widget as its outermost part.&lt;/p&gt;

&lt;p&gt;Then &lt;strong&gt;Scaffold&lt;/strong&gt; widget means screen. We create our screen with Scaffold. If we don't create the scaffold, if we add it in, we will see a black screen. After creating a white screen with Scaffold, it is entirely up to us to shape it.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;AppBar&lt;/strong&gt; widget is a structure that we created at the top of the screen that we created with Scaffold. Here we can write the name of the application, change the color of the area like this top line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-state"&gt;
  &lt;/a&gt;
  What is a state?
&lt;/h3&gt;

&lt;p&gt;Continue this post on my blog! &lt;a href="https://baransel.dev/post/flutter-widgets-stateless-and-stateful/"&gt;Flutter Widgets Stateless – Stateful Widget Difference&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Learning TypeScript: Part 1</title>
      <author>🦾Jack Madden🦾</author>
      <pubDate>Sat, 02 Oct 2021 16:50:10 +0000</pubDate>
      <link>https://dev.to/john_madden_13/learning-typescript-part-1-3ll</link>
      <guid>https://dev.to/john_madden_13/learning-typescript-part-1-3ll</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-all"&gt;
  &lt;/a&gt;
  Hello all!
&lt;/h3&gt;

&lt;p&gt;This is my first post to Dev.to and I am very excited for this to be the beginning of my TypeScript series where I will be documenting what I am learning through Codecademy and Free Code Camp. I will not just be copying and pasting the information, but learning, and bringing it to you in a concise manner. Please enjoy and don't be timid to send me a message of what you think!&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                         LETTUCE BEGIN🥬
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVC2DJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op3j8sw21rw8vne15d2v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmVC2DJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op3j8sw21rw8vne15d2v.png" alt="Alt TS-logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-typescript-works"&gt;
  &lt;/a&gt;
  How TypeScript Works
&lt;/h2&gt;

&lt;p&gt;TypeScript is a superset of Javascript, invented by Microsoft, that adds strong type checking. Hence, the 'type' in TypeScript, I guess. The TS code is taken into a compiler and then translated into JS code, meaning all of the features of JS are available to us, plus the added features of TS. &lt;/p&gt;

&lt;p&gt;Some added features are such as better development-time tooling (the amount of time from work started to work delivered), static code analysis (analysis of the code without launching code), and compile-time type checking (making sure all the types are used as they should be). &lt;/p&gt;

&lt;p&gt;If you are coming into this with some Javascript knowledge, already, then that is preferred because TS sometimes looks roughly the same as JS code! TS files are stored in .ts files, compared to JS files being stored in .js files, so don't get that mixed up, ya hear? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-typescript"&gt;
  &lt;/a&gt;
  When To Use TypeScript
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#large-codebase"&gt;
  &lt;/a&gt;
  Large Codebase
&lt;/h4&gt;

&lt;p&gt;When to use a specific language, library, or framework can definitely be tricky. The same goes for TS, as there are many times where it is best to use, but also times where it may not be most practical. From what I gather, TS is getting such a big following in the Javascript community because it cuts down on common errors. However, if your codebase is not going to be large to begin with, there really isn't much reason to convert your JS files to TS, as sometimes it will add about 30% to the total size of the code &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#accustomed-to-type-languages"&gt;
  &lt;/a&gt;
  Accustomed to Type Languages
&lt;/h4&gt;

&lt;p&gt;That's pretty vague and self-explanatory, right? If you or your team wants to use it, then use it. Sure? I can't judge because I had learned React a little while back and now I try to work it into every project I can. &lt;/p&gt;

&lt;p&gt;There are also some other type-strict languages out there that keep the same mindset as TS, such as C#. While they are based on much different languages, the same person that created TS is also the same person that created C#. I guess you could say they have a TYPE 😏.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#library-or-framework-wants-ts"&gt;
  &lt;/a&gt;
  Library or Framework Wants TS
&lt;/h4&gt;

&lt;p&gt;I personally have never ran into this sort of request from a library or framework, but it is definitely not too far out of the ordinary. It seems that for TS, Angular 2 seems to be really screaming for the necessity of it. So if you are reading through the documentation of a library or framework and it is begging you to use TS, be my guest. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#type-demanding-situations"&gt;
  &lt;/a&gt;
  Type Demanding Situations
&lt;/h4&gt;

&lt;p&gt;It makes sense that there would be some situations where having a strict type is crucial for your app or code snippet. One that pops into my mind is anything having to do with forms. If a rascal of a user tries to input a number into a string situation, that can throw a major error or crash your app if not handled properly. TS acts as some sort of gatekeeper in the way that this is one of the first things that it checks for via the compile-time type-checking we had discussed earlier. If you're expecting to be using a good amount of forms, or a type heavy application, then TS might be the best option. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I can not thank you enough for making it to the end of my first insertion to the Learning TypeScript series! While this article was more based on what TS is, and when to use it, the following articles should jump into some sweet, sweet code that we all know and love. Thank you and look out for the next submission, don't forget to follow me here and on Twitter! Peace!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Automate CI/CD build pipeline for a Springboot app using Jenkins and Github Webhooks</title>
      <author>Amaka Mbah</author>
      <pubDate>Sat, 02 Oct 2021 16:49:56 +0000</pubDate>
      <link>https://dev.to/saucekode/automate-ci-cd-build-pipeline-for-a-springboot-app-using-jenkins-and-github-webhooks-3h30</link>
      <guid>https://dev.to/saucekode/automate-ci-cd-build-pipeline-for-a-springboot-app-using-jenkins-and-github-webhooks-3h30</guid>
      <description>&lt;p&gt;In this article, we will be setting up a CI/CD pipeline for a springboot application using Jenkins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An existing Springboot application&lt;/li&gt;
&lt;li&gt;You should have Jenkins installed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Continous integration and delivery make up the devops lifecycle. There are 8 phases in the devops lifecyle. &lt;/p&gt;

&lt;p&gt;Continous delivery make up the first four phases which include: &lt;strong&gt;plan, code, build and test&lt;/strong&gt;. Continous integration make up the last four phases which include: &lt;strong&gt;integrate, deploy, operate and monitor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Jenkins is a tool for integrating automatically into the existing codebase after testing is complete. It spans both continous delivery (build and test phase) and continous integration (integration).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-a-repository-and-branches"&gt;
  &lt;/a&gt;
  Step 1: Create a repository and branches
&lt;/h3&gt;

&lt;p&gt;If your project is already hosted on Github, you can skip this step. Otherwise, create a repository on Github, map the remote url to your project and create two branches: &lt;strong&gt;prod&lt;/strong&gt; and &lt;strong&gt;dev&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The dev branch is what Jenkins will be interfacing with, once there is a successful build in this branch then we can integrate the changes into our prod branch, this would interface with your deployment platform.&lt;/p&gt;

&lt;p&gt;Using this method, we will catch errors during development and avoid them at production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-setup-jenkins"&gt;
  &lt;/a&gt;
  Step 2: Setup Jenkins
&lt;/h3&gt;

&lt;p&gt;Start up Jenkins. &lt;/p&gt;

&lt;p&gt;To start up Jenkins for Ubuntu users, locate the &lt;em&gt;jenkins.war&lt;/em&gt;  file in the /usr/share/jenkins path. Once found, run the command below to start Jenkins manually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -jar jenkins.war --httpPort=8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should have Jenkins running now. Jenkins default port is 8080. Head over to your browser and run &lt;strong&gt;localhost:8080&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;An aside, Springboot runs on port 8080 as well, you will have to change your port using &lt;strong&gt;server.port=9090&lt;/strong&gt; in your &lt;em&gt;application.properties&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;If you're using Jenkins for the first time, you will be presented with a page that has path to a file. The file contains your Jenkins administrator password. Copy the path. To view the contents, run this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat &amp;lt;file path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is done, you should be able to see the password. Copy and paste into the input field provided and click the button. Next up, you will be required to install Jenkins plugins. You can choose to install all plugins or install selected plugins. Go for the former and wait for the installation to be done. If it fails, retry. &lt;/p&gt;

&lt;p&gt;After the installation is complete. You will be required to create a new user admin. You can choose to skip this step and continue with the initial administrator credentials provided by Jenkins. I strongly advise you create a new user. Once that is done, you will be redirected to your Jenkins dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-set-up-jenkins-credentials"&gt;
  &lt;/a&gt;
  Step 3: Set up Jenkins credentials
&lt;/h2&gt;

&lt;p&gt;This step is vital in the build automation. On the dashboard menu items, click &lt;strong&gt;Manage Jenkins&lt;/strong&gt; and then, &lt;strong&gt;Manage Credentials&lt;/strong&gt;. There is an already existing Jenkins credential. Click on it and then the Global credentials. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_c2Hcw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbcbyp2r53yq83sphk76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_c2Hcw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbcbyp2r53yq83sphk76.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Add Credentials&lt;/strong&gt; and you will be presented with where to fill your details.&lt;/p&gt;

&lt;p&gt;Github no longer has support for username and password. In selecting a credential kind, pick SSH Username with private key. This means you should already have your SSH keys (private and public). &lt;/p&gt;

&lt;p&gt;If you do not have one, follow this link to generate yours and link to Github &lt;a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enter your username and select &lt;strong&gt;Enter directly&lt;/strong&gt; in the private key option and make sure it is your generated private SSH key you are entering not the public SSH key. Click OK to continue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-set-up-jenkins-pipeline"&gt;
  &lt;/a&gt;
  Step 4: Set up Jenkins pipeline
&lt;/h2&gt;

&lt;p&gt;Go back to your dashboard. Create a job. Enter a name for your job, select Freestyle project and save to continue.&lt;/p&gt;

&lt;p&gt;Enter a description for your Jenkins job in the General tab. In the source code management tab, select Git, enter the repository url for your project. Under credentials, select the credential your created. In branches to build, edit the prepopulated branch and set to dev. &lt;/p&gt;

&lt;p&gt;In the Build Triggers tab, check &lt;strong&gt;GitHub hook trigger for GITScm polling&lt;/strong&gt;. You can choose to run this trigger with the &lt;strong&gt;Poll SCM&lt;/strong&gt; option. This setup would require you input a time schedule for when the hook trigger would happen. Currently, I didn't select the Poll SCM option.&lt;/p&gt;

&lt;p&gt;Scroll to the Build tab and select &lt;strong&gt;Execute shell&lt;/strong&gt;. This is where we specify the build command for our Spring application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./mvnw install test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Input this maven build command, it runs both test and build our app into an artifact. Once done, click save.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-setup-github-webhook"&gt;
  &lt;/a&gt;
  Step 5: Setup Github WebHook
&lt;/h2&gt;

&lt;p&gt;The webhook automates the build process as opposed to manually running the build from Jenkins.&lt;/p&gt;

&lt;p&gt;Navigate to the settings tab of your spring app github repository, click on &lt;strong&gt;Webhooks&lt;/strong&gt;. You will be required to provide a &lt;strong&gt;Payload URL&lt;/strong&gt; and &lt;strong&gt;secret&lt;/strong&gt;. The secret key is a token you generate in Jenkins and it is used to make API calls. For our payload URL, we will generate one using ngrok. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ngrok is a tool for generating a live URL for your locally hosted project. We need to expose Jenkins to our webhook, hence the need for ngrok.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Download ngrok zip file from &lt;a href="https://ngrok.com/download"&gt;here&lt;/a&gt; and unzip. Open your terminal and cd into the directory you unzipped ngrok.&lt;/p&gt;

&lt;p&gt;For Ubuntu users, run this command to generate a url:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./ngrok http 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to append &lt;strong&gt;/github-webhook/&lt;/strong&gt; to your payload url, this is required by the webhook. Set content type to &lt;strong&gt;application/json&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's get our secret token. In your Jenkins dashboard, click on the dropdown arrow beside your name located at the top left corner. Select &lt;strong&gt;configure&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RN14L5gG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1iri89ajhznc99e2bmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RN14L5gG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1iri89ajhznc99e2bmy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to locate the API token tab, click on &lt;strong&gt;Add new token&lt;/strong&gt; and generate one. Once it is generated, copy the token, save and paste it in the secret field in github.&lt;/p&gt;

&lt;p&gt;In github, still in webhooks, the question &lt;strong&gt;Which events would you like to trigger this webhook?&lt;/strong&gt;, for this article we will select &lt;strong&gt;Just the push event&lt;/strong&gt; option and click &lt;strong&gt;Add webhook&lt;/strong&gt;. You can explore other options to see what they offer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-lets-test"&gt;
  &lt;/a&gt;
  Step 6: Let's test
&lt;/h2&gt;

&lt;p&gt;You should be in your dev branch. Make changes to your code and push. The build started automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T3nHB_Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ts0bhjne2pm0wllgosh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T3nHB_Kx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ts0bhjne2pm0wllgosh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the build is successful, next, make a merge request to the prod branch and deploy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we successfully setup a CI/CD pipeline using Jenkins and with Github webhooks, automated our build process as opposed to manually triggering the build from Jenkins.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>jenkins</category>
    </item>
    <item>
      <title>Improving API Documentation using React Query and TypeScript</title>
      <author>Arnav Gosain</author>
      <pubDate>Sat, 02 Oct 2021 16:43:30 +0000</pubDate>
      <link>https://dev.to/arn4v/improving-api-documentation-using-react-query-and-typescript-2321</link>
      <guid>https://dev.to/arn4v/improving-api-documentation-using-react-query-and-typescript-2321</guid>
      <description>&lt;p&gt;As your codebase grows, there is only one way to increase developer productivity: Documentation. One of many reasons I prefer TypeScript to JavaScript is that overtime, as your codebase grows, developer productivity increases because TypeScript (and typed languages in general) offer something that dynamically typed languages cannot, automatic documentation in your IDE.&lt;/p&gt;

&lt;p&gt;This article assumes you're familiar with React Query. If you're not, I highly recommend you read the &lt;a href="https://react-query.tanstack.com/docs"&gt;official docs&lt;/a&gt; and &lt;a href="https://www.kranthicodes.com/getting-started-with-react-query/"&gt;this intro guide&lt;/a&gt; by &lt;a href="https://www.kranthicodes.com"&gt;Sai Kranthi&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-react-query"&gt;
  &lt;/a&gt;
  Why React Query
&lt;/h2&gt;

&lt;p&gt;Imagine an simple app that does two things based on the PokeAPI:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Renders a list of Pokemons that link to their own dedicated page&lt;/li&gt;
&lt;li&gt;Have dedicated pages for all pokemons&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To fetch the list of pokemons, with &lt;strong&gt;Redux&lt;/strong&gt; you would have to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a global store&lt;/li&gt;
&lt;li&gt;Create a reducer with an action to update the list in the store&lt;/li&gt;
&lt;li&gt;Write a thunk action to fetch the data.&lt;/li&gt;
&lt;li&gt;Write a useEffect hook &lt;strong&gt;inside&lt;/strong&gt; to dispatch the thunk action.&lt;/li&gt;
&lt;li&gt;Render the list.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And then you'd have to write invalidation logic, loading status logic and much more.&lt;/p&gt;

&lt;p&gt;But with React Query, fetching your list of pokemons is as easy as wrapping your &lt;code&gt;App&lt;/code&gt; in a &lt;code&gt;QueryClientProvider&lt;/code&gt; and then making use of the &lt;code&gt;useQuery&lt;/code&gt; and &lt;code&gt;useMutation&lt;/code&gt; hooks.&lt;/p&gt;

&lt;p&gt;Example of basic React Query usage:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/runtime-thunder-uy81c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;p&gt;This approach works for simple apps like a Pokemon List, but it quickly becomes unmanageable as you add more endpoints to your API. In which case, you would have to create many such custom hooks.&lt;/p&gt;

&lt;p&gt;This is the problem I ran into as I hopped on my first project after joining &lt;a href="https://tartanhq.com"&gt;TartanHQ&lt;/a&gt;. While it's a fairly simple CRUD app, it makes use of many endpoints and making custom hooks for each endpoint simply isn't an option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-hook-for-all-queries"&gt;
  &lt;/a&gt;
  One Hook For All Queries
&lt;/h2&gt;

&lt;p&gt;To counteract this problem, we created a layer of abstraction over React Query's &lt;code&gt;useQuery&lt;/code&gt; hook, a hook that makes use of TypeScript to improve discoverability of endpoints across the entire application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;useReactQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;UseQueryResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/lib/api/queries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;U&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="nx"&gt;Key&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;UseQueryResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="nx"&gt;Key&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;UseQueryResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
  &lt;span class="nx"&gt;Key&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UseQueryOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;arg3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;arg3&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useReactQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Legend:
 *
 * QKEY = Query Key
 * QData = Query Data
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_ALL_POKEMONS_QKEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pokemons/all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GetAllPokemonsQData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAllPokemons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GetAllPokemonsQData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://pokeapi.co/api/v2/pokemon?limit=151&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;GetAllPokemonsQData&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POKEMON_BY_ID_QKEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pokemons/byId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GetPokemonByIdQData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPokemonById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;GetPokemonByIdQData&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;QueryKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;GET_ALL_POKEMONS_KEY&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;POKEMON_BY_ID_QKEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryFetchers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;GET_ALL_POKEMONS_QKEY&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;getAllPokemons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;POKEMON_BY_ID_QKEY&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;getPokemonById&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h2&gt;

&lt;p&gt;Now that you're all done, you can take full advantage of VSCode autocomplete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DwERo8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnavgosain.com/static/queryhook-autocomplete.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DwERo8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arnavgosain.com/static/queryhook-autocomplete.png" alt="Custom useQuery in Action"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/queryhook-demo-9mjy3?module=src/pages/IndexPage.tsx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>reactquery</category>
    </item>
    <item>
      <title>Have fun with Windows message boxes</title>
      <author>Clément Gaudinière</author>
      <pubDate>Sat, 02 Oct 2021 16:40:17 +0000</pubDate>
      <link>https://dev.to/clementgaudiniere/have-fun-with-windows-message-boxes-ckl</link>
      <guid>https://dev.to/clementgaudiniere/have-fun-with-windows-message-boxes-ckl</guid>
      <description>&lt;p&gt;Hello everyone, today we are going to focus on our computers and more particularly on those under Windows. We will generate a Windows message box using the following programming language: Visual Basic. Don't worry, no prerequisites are necessary to follow this tutorial and all the steps will be explained. Through this article we will also see how to enrich and improve our message box, so that, for example, it can no longer be closed, that it remains in the foreground, etc. This way you can joke with your friends in a friendly manner, as there are several solutions to remove a dialogue box that cannot be closed. This type of dialog box can also be called fake virus, since it can worry the person at first, even if it does not affect the user's computer in any way. You can already see what the dialog box will look like at the end:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZyiev6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ymg5gfkgtfcg5dbt9uk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZyiev6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ymg5gfkgtfcg5dbt9uk.PNG" alt="Box message exemple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The basics
&lt;/h3&gt;

&lt;p&gt;To begin with, you will need your computer running the Windows operating system. Once turned on, we will use the basic notepad software installed on almost all computers in the operating system. If you do not have a notepad, you can also use a code editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ey0t6aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjkpa3db1p5z0i2th7uf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ey0t6aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjkpa3db1p5z0i2th7uf.jpg" alt="Notepad editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once open we will write our first line of code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your text here"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once written, click on "File", then on "Save as", now give your file a name in the following form: &lt;code&gt;name.vbs&lt;/code&gt;. Then click on "Save". It is important to specify the extension of the .vbs file, otherwise the file will be executed as a text file and no action will be performed. VBS means Visual Basic Script. Once saved, the file icon will normally look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bgIV7PoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ydgh4rrdydxmyc3aha.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgIV7PoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8ydgh4rrdydxmyc3aha.PNG" alt="File vbs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you double click on this file you will see a windows dialogue box open, which you can close by clicking on "Ok" or on the cross.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-nonclosable-message-box"&gt;
  &lt;/a&gt;
  A non-closable message box
&lt;/h3&gt;

&lt;p&gt;Now we are going to add a few lines of code so that our box can no longer be closed simply with the cross, nor with "Ok". To do this, we will use the Visual Basic &lt;code&gt;Do...Loop&lt;/code&gt; statement. The previously written code will be wrapped up in the &lt;code&gt;do&lt;/code&gt; and &lt;code&gt;loop&lt;/code&gt; instructions :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your text here"&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We re-save the file as a &lt;code&gt;.vbs&lt;/code&gt; file, and when we execute the file, we will not be able to close it simply with the cross or with the "Ok" button, since the &lt;code&gt;loop&lt;/code&gt; instruction allows to create an infinite loop. &lt;/p&gt;

&lt;p&gt;You can also put several messages in your code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your text here"&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your other text here"&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So once both messages have been read, the code will go back to the beginning and read the first and second messages over and over again. To permanently close a message box, go to the Windows Task Manager. For example, you can right-click in the navigation bar and then click on Task Manager. Once this is done, click on "Microsoft Windows Based Script Host" and then on "End Task". If you can't find it, here's an overview of what to find :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ehVVcn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yruk4xv3hfxxz0xiruoi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ehVVcn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yruk4xv3hfxxz0xiruoi.PNG" alt="Task"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also turn off your computer, and all messages will be gone the next time you turn it on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customise-the-message-box"&gt;
  &lt;/a&gt;
  Customise the message box
&lt;/h3&gt;

&lt;p&gt;Before you become a Windows message box pro, you need to know the different ways to customise it. Indeed you can for example give a title to your message box, add a critical error icon, a questioning warning... We will also see how to make sure that our dialog box is always in the foreground. In the following non-functional piece of code, the variables x, y, z can have several values :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="c1"&gt;' Non-functional code&lt;/span&gt;
&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Your text here"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Title"&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will detail these values later, but first let's break down the msgbox. The first string in quotes represents the text inside the dialog box, the &lt;code&gt;x&lt;/code&gt; allows you to define the buttons of the dialog box, the &lt;code&gt;y&lt;/code&gt; enables you to put an icon, and the &lt;code&gt;z&lt;/code&gt; permits you to make the message box always in the foreground. Finally, the last string represents the title of the popup.&lt;/p&gt;

&lt;p&gt;Let's first look at the &lt;code&gt;x&lt;/code&gt;, this is a number which can have different values and which allows the buttons to be defined. All the values of x and their effects are here, in the table below :&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;x&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;OK button&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;OK and Cancel buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Abort, Restart and Ignore buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Yes, No and Cancel buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Yes and No buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Restart and Cancel buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Then the values of &lt;code&gt;y&lt;/code&gt; can be as follows :&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;Critical error icon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;Interrogative warning icon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;Simple warning icon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;Message icon&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Finally, the &lt;code&gt;z&lt;/code&gt; values can be :&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;z&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Normal dialogue box&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4096&lt;/td&gt;
&lt;td&gt;Dialog box always in the foreground&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Let's put into practice what we have just learned, if we want to create a message box that is always in the foreground, with the title "Virus", the content "Trojan Horse", with the Ok and Cancel buttons and with a critical error icon, our code will look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vb"&gt;&lt;code&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;msgbox&lt;/span&gt; &lt;span class="s"&gt;"Trojan Horse"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Virus"&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#to-go-further"&gt;
  &lt;/a&gt;
  To go further
&lt;/h3&gt;

&lt;p&gt;To go further and make a joke to your friends, we will see how to customize the appearance of our &lt;code&gt;vbs&lt;/code&gt; file, so that it looks like a web browser. For example the following icon refers to a vbs file which opens an infinite message box :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ddhk-E3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y2f9jrvijxanial6ihr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ddhk-E3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y2f9jrvijxanial6ihr.PNG" alt="Shortcut"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, you need to save your &lt;code&gt;vbs&lt;/code&gt; file anywhere unobtrusively. Then right click and click on "copy". Then go to the place where you want to create your shortcut and right click and "paste shortcut". Then right click on the item you have just created and click on "Properties" and then "Change Icon" in the "Shortcut" tab. Choose the icon you prefer then click on "Ok" then on "Apply". All that's left to do is rename it and you're done!&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this tutorial, if you liked the concept, I might do another article on fake viruses. If you have any questions, feel free to ask me in the comments. 👍&lt;/p&gt;

</description>
      <category>vbs</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I made a tool in Rust to play mechanical keyboard sounds on key press</title>
      <author>Kunal Bagaria</author>
      <pubDate>Sat, 02 Oct 2021 16:39:26 +0000</pubDate>
      <link>https://dev.to/kb24x7/i-made-a-tool-in-rust-to-play-mechanical-keyboard-sounds-on-key-press-2ji5</link>
      <guid>https://dev.to/kb24x7/i-made-a-tool-in-rust-to-play-mechanical-keyboard-sounds-on-key-press-2ji5</guid>
      <description>&lt;h3&gt;
  &lt;a href="#rustyvibes"&gt;
  &lt;/a&gt;
  Rustyvibes
&lt;/h3&gt;

&lt;p&gt;A Rust CLI that makes mechanical keyboard sound effects on every key press. It was a collaborative effort that took months to make, is now finally releasing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#macos"&gt;
  &lt;/a&gt;
  macOS:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install kb24x7/rustyvibes/rustyvibes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#windows-linux"&gt;
  &lt;/a&gt;
  Windows / Linux:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo install rustyvibes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rustyvibes &amp;lt;soundpack_path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTIA12H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev05z1ps2ojcdyd4kahh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTIA12H5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev05z1ps2ojcdyd4kahh.png" alt="Screen Shot 2021-09-29 at 7.23.10 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-soundpacks-here"&gt;
  &lt;/a&gt;
  Download Soundpacks: &lt;a href="https://drive.google.com/file/d/1LQEQ9aOVQAs_wgVecXkjaA9K4LXnCdp_/view?usp=sharing"&gt;Here&lt;/a&gt;
&lt;/h3&gt;




&lt;h3&gt;
  &lt;a href="#mechvibes-vs-rustyvibes"&gt;
  &lt;/a&gt;
  Mechvibes vs. Rustyvibes
&lt;/h3&gt;

&lt;p&gt;How does Rustyvibes compare to its competitors like Mechvibes? Mechvibes uses Electron and Chromium which is very resource intensive. Rustyvibes on the other hand is made with Rust and can be upto 10x-100x more resource efficient.&lt;/p&gt;

&lt;p&gt;Mechvibes Soundpacks: &lt;a href="https://docs.google.com/spreadsheets/d/1PimUN_Qn3CWqfn-93YdVW8OWy8nzpz3w3me41S8S494/edit#gid=0"&gt;Here&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#privacy"&gt;
  &lt;/a&gt;
  Privacy
&lt;/h3&gt;

&lt;p&gt;Rustyvibes is a fully &lt;a href="https://github.com/kb24x7/rustyvibes"&gt;open-sourced&lt;/a&gt; project and never uses any network activity at all.&lt;/p&gt;

&lt;p&gt;If you like what I'm doing, you can join my Discord server &lt;a href="https://dsc.gg/devhq"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>opensource</category>
      <category>keyboard</category>
      <category>cli</category>
    </item>
    <item>
      <title>Getting started with Appwrite</title>
      <author>Asmit Malakannawar</author>
      <pubDate>Sat, 02 Oct 2021 16:36:36 +0000</pubDate>
      <link>https://dev.to/asmit2952/getting-started-with-appwrite-3oic</link>
      <guid>https://dev.to/asmit2952/getting-started-with-appwrite-3oic</guid>
      <description>&lt;p&gt;The goal of every developer is to create awesome apps. If you are a developer and are looking for alternatives of Firebase to take your mobile app development a notch higher, then you are in the right place. Go through this article as I introduce you to &lt;a href="https://appwrite.io/"&gt;&lt;strong&gt;Appwrite&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Appwrite&lt;/strong&gt; is an &lt;strong&gt;open-source&lt;/strong&gt; backend server that provides you with all the required tools and APIs to build web, flutter and native apps faster. Appwrite comes with built-in console and lots of security features. It helps you to manage your backend even &lt;strong&gt;without writing a single line of code!!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H4uEPTLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zus8zyu8foys0pan8c2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4uEPTLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zus8zyu8foys0pan8c2.png" alt="home page"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This article will show you the &lt;strong&gt;practical reasons&lt;/strong&gt; to use Appwrite over other products and how to &lt;strong&gt;install&lt;/strong&gt; it in Windows OS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-free-to-use"&gt;
  &lt;/a&gt;
  1. Free to use!! 💸
&lt;/h3&gt;

&lt;p&gt;While Firebase offers an increasingly sophisticated array of services that takes care of various development requirements, it's not always the easiest, fastest, or more affordable option. If your app begins to scale significantly, you would have to upgrade from your free-tier plan and thus it becomes expensive.  &lt;/p&gt;

&lt;p&gt;Since Appwrite is open-source, you can expect all future updates free to everyone. They have got majority of BaaS features and it keeps getting better with every release.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3dekOQtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rnic3tc7710sbjtj5zq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3dekOQtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rnic3tc7710sbjtj5zq.gif" alt="for-free-adam-sandler"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-community-support"&gt;
  &lt;/a&gt;
  2. Community Support 💻
&lt;/h3&gt;

&lt;p&gt;Since Appwrite is an open-source project they have their repository on &lt;a href="https://github.com/appwrite/appwrite"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt; with awesome developers all around the world. They are ready to help newcomers who want to contribute and get acquainted with their product. &lt;br&gt;
Their &lt;a href="https://appwrite.io/discord"&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt; community is friendly, active and helpful. You can ask your doubts without a single hesitation and over 100s of community members are online to answer your doubts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQrXGhTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/881mkqrixo70v6a28yhu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQrXGhTG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/881mkqrixo70v6a28yhu.gif" alt="baby-yoda-baby"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-features-of-appwrite-%E2%9A%99"&gt;
  &lt;/a&gt;
  3. Features of Appwrite ⚙
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Store and query app documents with ACL easily:&lt;/strong&gt; It's pretty easy to store your app documents in NoSQL format and Appwrite will store it properly in backend side.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Manage assets of your app and users:&lt;/strong&gt; It also manages different types of file formats of your application and users of your application such as images, PDFs, etc. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Built-in Schedule Job Management:&lt;/strong&gt; It manages your cron job (&lt;em&gt;the cron command-line utility&lt;/em&gt;) very efficiently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Manages Users and Accounts with OAuth Providers:&lt;/strong&gt; Any backend is incomplete without the user roles and accounts, so Appwrite provides features to manage user accounts and roles. It even has a feature to manage teams. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;APIs for everything:&lt;/strong&gt; Appwrite tries to provide as many APIs as possible, so you can build your application easily and focus on the major parts of your application.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Usage Data Statistics:&lt;/strong&gt;  You can easily see which projects take the most space, have the most requests, or use the most CPU time for function executions. You can also see how many errors happened to functions in the past, how many API requests have been made, check bandwidth usage on each project separately and debug most of problems quickly. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Full Localization and Geo Support:&lt;/strong&gt; It also provides localization and geo support because of which you can customize the interface in your local language. It also detects your users location, locale and fetch GEO related data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Highly Secure and Fully Scalable:&lt;/strong&gt; Since Appwrite is based on Docker container, which allows it to be very scalable as well as secure because containers are isolated in itself.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yioILH-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2dmnto766lo7zhusp3s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yioILH-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2dmnto766lo7zhusp3s.gif" alt="its-nice-extra"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-install-appwrite-in-windows-%F0%9F%96%A5"&gt;
  &lt;/a&gt;
  How to install Appwrite in Windows 🖥
&lt;/h3&gt;

&lt;p&gt;First and foremost requirement is that you should have Docker installed in your system, if you don't have Docker installed in your system, you cannot execute the app as it's container based.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7Nd9ghb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at5skc3u6z81xw6vf8ry.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7Nd9ghb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at5skc3u6z81xw6vf8ry.gif" alt="whale-docker"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So to check whether docker is installed, open &lt;code&gt;command prompt&lt;/code&gt; in your system and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case, you don't have Docker installed, install it from their &lt;a href="https://www.docker.com/products/docker-desktop"&gt;&lt;strong&gt;official website&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have Docker installed, you need a single command to install Appwrite in your system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;volume&lt;/span&gt; &lt;span class="c1"&gt;//var/run/docker.sock:/var/run/docker.sock ^&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;volume&lt;/span&gt; &lt;span class="s"&gt;"%cd%"&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;appwrite&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;appwrite&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;
    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"install"&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;
    &lt;span class="n"&gt;appwrite&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;appwrite&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.10.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After pulling the images, it will ask you to choose &lt;code&gt;server hostname&lt;/code&gt;, &lt;code&gt;server HTTP port&lt;/code&gt;, &lt;code&gt;server HTTPS port&lt;/code&gt;, &lt;code&gt;CNAME target&lt;/code&gt;, all the values here will be default so keep hitting &lt;code&gt;Enter&lt;/code&gt; key. You can change these values later on.&lt;/p&gt;

&lt;p&gt;After installation, if you want to check whether it is successfully running, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you will see the list of containers successfully running.&lt;/p&gt;

&lt;p&gt;After that, open your browser and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you will see your Appwrite console popping up. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KK8-Zywc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45k79m5z5hsafns6kh0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KK8-Zywc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45k79m5z5hsafns6kh0x.png" alt="app console"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Then you would have to &lt;code&gt;Sign-up&lt;/code&gt; as this is you first time using Appwrite. After signing up, you will see Appwrite Dashboard. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVvYugXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9kyz3gf74nmypu5rcob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVvYugXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9kyz3gf74nmypu5rcob.png" alt="dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are in!! Now you can build your first project and checkout the cool features of Appwrite yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;These are some resources, from which you can read the documentations, go through tutorials, build your own apps, connect with developers etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://appwrite.io/docs"&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://appwrite.io/docs/getting-started-for-web"&gt;&lt;strong&gt;Demo Tutorials&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/c/ReactBits/videos"&gt;&lt;strong&gt;Video Tutorials&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/appwrite"&gt;&lt;strong&gt;GitHub Repository&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://appwrite.io/discord"&gt;&lt;strong&gt;Discord Server&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#happy-appwriting"&gt;
  &lt;/a&gt;
  Happy Appwriting📝!!
&lt;/h3&gt;

</description>
      <category>appwrite</category>
      <category>opensource</category>
      <category>backend</category>
    </item>
    <item>
      <title>10 things I add to every Rails app</title>
      <author>Pete Hawkins</author>
      <pubDate>Sat, 02 Oct 2021 16:25:19 +0000</pubDate>
      <link>https://dev.to/phawk/10-things-i-add-to-every-rails-app-3fag</link>
      <guid>https://dev.to/phawk/10-things-i-add-to-every-rails-app-3fag</guid>
      <description>&lt;p&gt;I end up creating a lot of Rails apps, and each time I get started I often find myself wanting to add similar features or gems that I’m using in other projects. &lt;/p&gt;

&lt;p&gt;Here’s a short list of 10 of the most common things I add to every Rails app. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-tailwind-css"&gt;
  &lt;/a&gt;
  1. Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;I’ve been using Tailwind now for almost 2 years, I am super productive with it and urge you to give it a try if you haven’t yet. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;As Adam the founder says...&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can suppress the urge to retch long enough to give it a chance, I really think you'll wonder how you ever worked with CSS any other way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out my post below for the best way to use Tailwind with Rails.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/phawk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e-TsQ9wl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AdRqAXwQ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/232806/38b80d61-2ad6-4b83-b1a3-a97c112fcc9e.jpeg" alt="phawk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/phawk/the-best-way-to-run-tailwind-css-on-rails-302c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The best way to run Tailwind CSS on Rails&lt;/h2&gt;
      &lt;h3&gt;Pete Hawkins ・ Oct 1 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hotwire&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tailwindcss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-authentication-devise"&gt;
  &lt;/a&gt;
  2. Authentication (Devise)
&lt;/h2&gt;

&lt;p&gt;Unless the project has really specific authentication requirements (like nine.shopping’s auth code approach), I’ll use &lt;a href="http://github.com/heartcombo/devise"&gt;devise&lt;/a&gt; to manage logins. &lt;/p&gt;

&lt;p&gt;Alongside this, &lt;a href="https://github.com/oivoodoo/devise_masquerade"&gt;devise_masquerade&lt;/a&gt; is a fantastic plugin to use with your admin area, allowing you to login as other users. This is helpful for debugging account specific issues etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-email-systems"&gt;
  &lt;/a&gt;
  3. Email systems
&lt;/h2&gt;

&lt;p&gt;Wether it’s just for ‘forgot password’ emails, pretty much any Rails app I am building is going to send email. There are two handy tools I use for this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#letter-opener-web"&gt;
  &lt;/a&gt;
  Letter opener web
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/fgrehm/letter_opener_web"&gt;This gem&lt;/a&gt; makes sure you don’t embarrasingly send emails to real users whilst developing or testing, life-saver!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#postmark"&gt;
  &lt;/a&gt;
  Postmark
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://postmarkapp.com"&gt;Postmark&lt;/a&gt; is a service I have been using for years! It’s really easy to integrate into Rails using their &lt;a href="https://github.com/wildbit/postmark-rails"&gt;postmark-rails gem&lt;/a&gt;, plus the product is great, easy to use and very reliable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-admin-system"&gt;
  &lt;/a&gt;
  4. Admin system
&lt;/h2&gt;

&lt;p&gt;I try to make all of my products as self-serve as possible, requiring as little of my time to set up accounts or keep the product running. &lt;/p&gt;

&lt;p&gt;Because of this, having an in-depth admin system to allow me to check on things, block malicious users or make billing changes is necessary. &lt;/p&gt;

&lt;p&gt;I usually tend to create these from Scratch, but moving forward I’ve started to use thoughtbot’s &lt;a href="https://administrate-demo.herokuapp.com"&gt;administrate&lt;/a&gt; gem. It sticks to the Rails conventions of controllers and routing, so it’s easy to customise and add new functionality to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-tests"&gt;
  &lt;/a&gt;
  5. Tests
&lt;/h2&gt;

&lt;p&gt;I am a big fan of TDD and having decent test coverage, this gives me confidence in continuously deploying code and ultimately helps me to develop apps faster.&lt;/p&gt;

&lt;p&gt;For testing I use &lt;a href="https://github.com/rspec/rspec-rails"&gt;RSpec&lt;/a&gt;, along with &lt;a href="http://github.com/thoughtbot/shoulda-matchers"&gt;shoulda-matchers&lt;/a&gt; for easily testing model relations &amp;amp; validations.&lt;/p&gt;

&lt;p&gt;I use Rails built-in fixtures instead of something like FactoryBot. This is purely for performance reasons, fixtures allow your tests to run much, much faster. Ultimately, I find a fast test suite is more useful and interrupts my workflow a lot less.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-rubocop"&gt;
  &lt;/a&gt;
  6. Rubocop
&lt;/h2&gt;

&lt;p&gt;Sticking with the automated testing side of things, I like to use rubocop to make sure my code is consistent and it also catches some common issues with my code.&lt;/p&gt;

&lt;p&gt;I usually follow the &lt;a href="https://ruby-style-guide.shopify.dev"&gt;Shopify Ruby styleguide&lt;/a&gt; with a few minor tweaks. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-sentry"&gt;
  &lt;/a&gt;
  7. Sentry
&lt;/h2&gt;

&lt;p&gt;Next up is error monitoring with &lt;a href="https://sentry.io"&gt;Sentry&lt;/a&gt;. Exceptions usually happen in production when real users get a hold of your code, and making sure these are tracked helps a ton in seeing what’s going on and fixing it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-sidekiq"&gt;
  &lt;/a&gt;
  8. Sidekiq
&lt;/h2&gt;

&lt;p&gt;I often don’t set this up right away, but within the first week or two of development comes the time for background jobs. I like to stick with what I know and &lt;a href="https://sidekiq.org"&gt;Sidekiq&lt;/a&gt; along with it’s web interface is easy to use and reliable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-metamagic"&gt;
  &lt;/a&gt;
  9. Metamagic
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/lassebunk/metamagic"&gt;This one&lt;/a&gt; is a small, but very useful gem. It helps set page titles, meta keywords and even open graph tags for sharing on social sites. This is a must if you have a lot of publicly accessible pages and want to start doing some SEO.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;% meta(title: &lt;/span&gt;&lt;span class="s2"&gt;"Sign in to your account"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-rack-attack"&gt;
  &lt;/a&gt;
  10. Rack attack
&lt;/h2&gt;

&lt;p&gt;The final gem I like to include in all projects is &lt;a href="https://github.com/rack/rack-attack"&gt;rack-attack&lt;/a&gt;. This is a rate limiting tool which is great for throttling dangerous actions in your app to prevent bot attacks or other malicious users. &lt;/p&gt;

&lt;p&gt;It works great with APIs, but I also like to use it for login/sign up pages too, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Attack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"authentication/ip"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;limit: &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;period: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;post?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
       &lt;span class="sx"&gt;%w[/users/sign_in /users/sign_up /users/password]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;path&lt;/span&gt;
       &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ip&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>rails</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
