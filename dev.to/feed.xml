<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to test HttpClientFactory with Moq</title>
      <author>Davide Bellone</author>
      <pubDate>Wed, 27 Oct 2021 09:30:41 +0000</pubDate>
      <link>https://dev.to/bellons91/how-to-test-httpclientfactory-with-moq-560e</link>
      <guid>https://dev.to/bellons91/how-to-test-httpclientfactory-with-moq-560e</guid>
      <description>&lt;p&gt;When working on any .NET application, one of the most common things you'll see is using dependency injection to inject an &lt;code&gt;IHttpClientFactory&lt;/code&gt; instance into the constructor of a service. And, of course, you &lt;em&gt;should&lt;/em&gt; test that service. To write good unit tests, it is a good practice to mock the dependencies to have full control over their behavior. A well-known library to mock dependencies is &lt;strong&gt;Moq&lt;/strong&gt;; integrating it is pretty simple: if you have to mock a dependency of type &lt;code&gt;IMyService&lt;/code&gt;, you can create mocks of it by using &lt;code&gt;Mock&amp;lt;IMyService&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But here comes a problem: mocking &lt;code&gt;IHttpClientFactory&lt;/code&gt; is not that simple: just using &lt;code&gt;Mock&amp;lt;IHttpClientFactory&amp;gt;&lt;/code&gt; is not enough.&lt;/p&gt;

&lt;p&gt;In this article, we will learn how to mock &lt;code&gt;IHttpClientFactory&lt;/code&gt; dependencies, how to define the behavior for HTTP calls, and finally, we will deep dive into the advanced features of Moq that allow us to mock that dependency. Let's go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-the-issue"&gt;
  &lt;/a&gt;
  Introducing the issue
&lt;/h2&gt;

&lt;p&gt;To fully understand the problem, we need a concrete example.&lt;/p&gt;

&lt;p&gt;The following class implements a service with a method that, given an input string, sends it to a remote client using a DELETE HTTP call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyExternalService&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IHttpClientFactory&lt;/span&gt; &lt;span class="n"&gt;_httpClientFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyExternalService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHttpClientFactory&lt;/span&gt; &lt;span class="n"&gt;httpClientFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_httpClientFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;httpClientFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;objectName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;$"/objects?name=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;objectName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_httpClientFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ext_service"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;httpResponse&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DeleteAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;httpResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnsureSuccessStatusCode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key point to notice is that we are injecting an instance of &lt;code&gt;IHttpClientFactory&lt;/code&gt;; we are also creating a new &lt;code&gt;HttpClient&lt;/code&gt; every time it's needed by using &lt;code&gt;_httpClientFactory.CreateClient("ext_service")&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you may know, you should not instantiate new &lt;code&gt;HttpClient&lt;/code&gt; objects every time to avoid the risk of &lt;strong&gt;socket exhaustion&lt;/strong&gt; (see &lt;a href="#further-readings"&gt;links below&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There is a huge problem with this approach: it's not easy to test it. You cannot simply mock the &lt;code&gt;IHttpClientFactory&lt;/code&gt; dependency, but you have to manually handle the &lt;code&gt;HttpClient&lt;/code&gt; and keep track of its internals.&lt;/p&gt;

&lt;p&gt;Of course, we will not use real &lt;code&gt;IHttpClientFactory&lt;/code&gt; instances: we don't want our application to perform real HTTP calls. We need to mock that dependency.&lt;/p&gt;

&lt;p&gt;Think of mocked dependencies as movies stunt doubles: you don't want your main stars to get hurt while performing action scenes. In the same way, you don't want your application to perform actual operations when running tests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sz9EzvWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.code4it.dev/static/368a64e54d8c8ba705805308dba6c235/29d31/marvel-stunt-doubles.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sz9EzvWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.code4it.dev/static/368a64e54d8c8ba705805308dba6c235/29d31/marvel-stunt-doubles.jpg" alt="Creating mocks is like [using stunt doubles](https://www.boredpanda.com/marvel-avengers-actors-stunt-doubles) for action scenes" title="Marvel actors with their stunt doubles" width="700" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use &lt;strong&gt;Moq&lt;/strong&gt; to test the method and check that the HTTP call is correctly adding the &lt;code&gt;objectName&lt;/code&gt; variable in the query string.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-mocks-of-ihttpclientfactory-with-moq"&gt;
  &lt;/a&gt;
  How to create mocks of IHttpClientFactory with Moq
&lt;/h2&gt;

&lt;p&gt;Let's begin with the full code for the creation of mocked &lt;code&gt;IHttpClientFactory&lt;/code&gt;s:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;handlerMock&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpMessageHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;MockBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Strict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;HttpResponseMessage&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpResponseMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;handlerMock&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Protected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpResponseMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"SendAsync"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReturnsAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verifiable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handlerMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;BaseAddress&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://www.code4it.dev/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mockHttpClientFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpClientFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

&lt;span class="n"&gt;mockHttpClientFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ext_service"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyExternalService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mockHttpClientFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A lot of stuff is going on, right?&lt;/p&gt;

&lt;p&gt;Let's break it down to fully understand what all those statements mean.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mocking-httpmessagehandler"&gt;
  &lt;/a&gt;
  Mocking HttpMessageHandler
&lt;/h3&gt;

&lt;p&gt;The first instruction we meet is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;handlerMock&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpMessageHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;MockBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Strict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does it mean?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HttpMessageHandler&lt;/code&gt; is the fundamental part of every HTTP request in .NET: it performs a &lt;strong&gt;SendAsync&lt;/strong&gt; call to the specified endpoint with all the info defined in a &lt;code&gt;HttpRequestMessage&lt;/code&gt; object passed as a parameter. &lt;/p&gt;

&lt;p&gt;Since we are interested in what happens to the &lt;code&gt;HttpMessageHandler&lt;/code&gt;, we need to mock it and store the result in a variable.&lt;/p&gt;

&lt;p&gt;Noticed that &lt;code&gt;MockBehavior.Strict&lt;/code&gt;? This is an &lt;em&gt;optional&lt;/em&gt; parameter that makes the mock throw an exception when it doesn't have a corresponding setup. To try it, remove that argument to the constructor and comment out the &lt;code&gt;handlerMock.Setup()&lt;/code&gt; part: when you'll run the tests, you'll receive an error of type &lt;code&gt;Moq.MockException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next step: defining the behavior of the mocked &lt;code&gt;HttpMessageHandler&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-the-behavior-of-httpmessagehandler"&gt;
  &lt;/a&gt;
  Defining the behavior of HttpMessageHandler
&lt;/h3&gt;

&lt;p&gt;Now we have to define what happens when we use the &lt;code&gt;handlerMock&lt;/code&gt; object in any HTTP operation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;HttpResponseMessage&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpResponseMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;handlerMock&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Protected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpResponseMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"SendAsync"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReturnsAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verifiable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we meet is that &lt;code&gt;Protected()&lt;/code&gt;. Why?&lt;/p&gt;

&lt;p&gt;To fully understand why we need it, and what is the meaning of the next operations, we need to have a look at the definition of &lt;code&gt;HttpMessageHandler&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Summary: A base type for HTTP message handlers.&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HttpMessageHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// Other stuff here...&lt;/span&gt;

    &lt;span class="c1"&gt;// Summary: Send an HTTP request as an asynchronous operation.&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpResponseMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;SendAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this snippet, we can see that we have a method, &lt;code&gt;SendAsync&lt;/code&gt;, which accepts an &lt;code&gt;HttpRequestMessage&lt;/code&gt; object and a &lt;code&gt;CancellationToken&lt;/code&gt;, and which is the one that deals with HTTP requests. &lt;strong&gt;But this method is protected&lt;/strong&gt;. Therefore we need to use &lt;code&gt;Protected()&lt;/code&gt; to access the protected methods of the &lt;code&gt;HttpMessageHandler&lt;/code&gt; class, and we must set them up by using the method name and the parameters in the &lt;code&gt;Setup&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--noAtrvVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.code4it.dev/static/6c69938aa13945de0fe33096cd9dd1c6/eda93/mr-turner-protected.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--noAtrvVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.code4it.dev/static/6c69938aa13945de0fe33096cd9dd1c6/eda93/mr-turner-protected.jpg" alt="With Protected() you can access protected members" width="573" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two details to notice, then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We specify the method to set up by using its name as a string: &lt;em&gt;"SendAsync"&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;To say that we don't care about the actual values of the parameters, we use &lt;code&gt;ItExpr&lt;/code&gt; instead of &lt;code&gt;It&lt;/code&gt; because we are dealing with the setup of a &lt;em&gt;protected&lt;/em&gt; member.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If SendAsync was a public method, we would have done something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;handlerMock&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SendAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(),&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;())&lt;/span&gt; 
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, since it is a protected method, we need to use the way I listed before.&lt;/p&gt;

&lt;p&gt;Then, we define that the call to &lt;code&gt;SendAsync&lt;/code&gt; returns an object of type &lt;code&gt;HttpResponseMessage&lt;/code&gt;: here we don't care about the content of the response, so we can leave it in this way without further customizations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-httpclient"&gt;
  &lt;/a&gt;
  Creating HttpClient
&lt;/h3&gt;

&lt;p&gt;Now that we have defined the behavior of the &lt;code&gt;HttpMessageHandler&lt;/code&gt; object, we can pass it to the &lt;code&gt;HttpClient&lt;/code&gt; constructor to create a new instance of &lt;code&gt;HttpClient&lt;/code&gt; that acts as we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handlerMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;BaseAddress&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://www.code4it.dev/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I've set up the value of the &lt;code&gt;BaseAddress&lt;/code&gt; property to a valid URI to avoid null references when performing the HTTP call. You can use even non existing URL: the important thing is that the URL must be well-formed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-the-ihttpclientfactory-instance"&gt;
  &lt;/a&gt;
  Configuring the IHttpClientFactory instance
&lt;/h3&gt;

&lt;p&gt;We are finally ready to create the &lt;code&gt;IHttpClientFactory&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mockHttpClientFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpClientFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

&lt;span class="n"&gt;mockHttpClientFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ext_service"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyExternalService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mockHttpClientFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we create the Mock of &lt;code&gt;IHttpClientFactory&lt;/code&gt; and define the instance of &lt;code&gt;HttpClient&lt;/code&gt; that will be returned when calling &lt;code&gt;CreateClient("ext_service")&lt;/code&gt;. Finally, we're passing the instance of &lt;code&gt;IHttpClientFactory&lt;/code&gt; to the constructor of &lt;code&gt;MyExternalService&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-verify-the-calls-performed-by-ihttpclientfactory"&gt;
  &lt;/a&gt;
  How to verify the calls performed by IHttpClientFactory
&lt;/h2&gt;

&lt;p&gt;Now, suppose that in our test we've performed the operation under test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// setup IHttpClientFactory&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How can we check if the &lt;code&gt;HttpClient&lt;/code&gt; actually called an endpoint with "my-name" in the query string? As before, let's look at the whole code, and then let's analyze every part of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// verify that the query string contains "my-name"&lt;/span&gt;

&lt;span class="n"&gt;handlerMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Protected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"SendAsync"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Exactly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// we expected a single external request&lt;/span&gt;
    &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestUri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// Query string contains my-name&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#accessing-the-protected-instance"&gt;
  &lt;/a&gt;
  Accessing the protected instance
&lt;/h3&gt;

&lt;p&gt;As we've already seen, the object that performs the HTTP operation is the  &lt;code&gt;HttpMessageHandler&lt;/code&gt;, which here we've mocked and stored in the &lt;code&gt;handlerMock&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Then we need to verify what happened when calling the &lt;code&gt;SendAsync&lt;/code&gt; method, which is a protected method; thus we use &lt;code&gt;Protected&lt;/code&gt; to access that member.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checking-the-query-string"&gt;
  &lt;/a&gt;
  Checking the query string
&lt;/h3&gt;

&lt;p&gt;The core part of our assertion is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestUri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// Query string contains my-name&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, we are accessing a &lt;code&gt;protected&lt;/code&gt; member, so we need to use &lt;code&gt;ItExpr&lt;/code&gt; instead of &lt;code&gt;It&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Is&amp;lt;HttpRequestMessage&amp;gt;&lt;/code&gt; method accepts a function &lt;code&gt;Func&amp;lt;HttpRequestMessage, bool&amp;gt;&lt;/code&gt; that we can use to determine if a property of the &lt;code&gt;HttpRequestMessage&lt;/code&gt; under test - in our case, we named that variable as &lt;code&gt;req&lt;/code&gt; - matches the specified predicate. If so, the test passes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refactoring-the-code"&gt;
  &lt;/a&gt;
  Refactoring the code
&lt;/h2&gt;

&lt;p&gt;Imagine having to repeat that code for every test method in your class - what a mess!&lt;/p&gt;

&lt;p&gt;So we can refactor it: first of all, we can move the &lt;code&gt;HttpMessageHandler&lt;/code&gt;  mock to the &lt;code&gt;SetUp&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SetUp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlerMock&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpMessageHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;MockBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Strict&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;HttpResponseMessage&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpResponseMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlerMock&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Protected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpResponseMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"SendAsync"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verifiable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;httpClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handlerMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;BaseAddress&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://www.code4it.dev/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;mockHttpClientFactory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHttpClientFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="n"&gt;mockHttpClientFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ext_service"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;Returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpClient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyExternalService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mockHttpClientFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and keep a reference to &lt;code&gt;handlerMock&lt;/code&gt; and &lt;code&gt;service&lt;/code&gt; in some private members.&lt;/p&gt;

&lt;p&gt;Then, we can move the &lt;em&gt;assertion&lt;/em&gt; part to a different method, maybe to an extension method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpMessageHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Protected&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"SendAsync"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Exactly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// we expected a single external request&lt;/span&gt;
        &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HttpRequestMessage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;ItExpr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsAny&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CancellationToken&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that our test can be simplified to just a bunch of lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;Method_Should_ReturnSomething_When_Condition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Arrange occurs in the SetUp phase&lt;/span&gt;

    &lt;span class="c1"&gt;//Act&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DeleteObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//Assert&lt;/span&gt;
    &lt;span class="n"&gt;handlerMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestUri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-name"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#further-readings"&gt;
  &lt;/a&gt;
  Further readings
&lt;/h2&gt;

&lt;p&gt;🔗 &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests"&gt;Why we need HttpClientFactory | Microsoft Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔗 &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpmessagehandler?view=net-5.0"&gt;HttpMessageHandler class | Microsoft Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔗 &lt;a href="https://www.code4it.dev/blog/mock-dependency-with-manifest-resources"&gt;Mock objects with static, complex data by using Manifest resources | Code4IT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔗 &lt;a href="https://github.com/moq/moq"&gt;Moq documentation | GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔗 &lt;a href="https://www.code4it.dev/blog/csharp-extension-methods"&gt;How you can create extension methods in C# | Code4IT&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;In this article, we've seen how tricky it can be to test services that rely on &lt;code&gt;IHttpClientFactory&lt;/code&gt; instances. Luckily, we can rely on tools like Moq to mock the dependencies and have full control over the behavior of those dependencies.&lt;/p&gt;

&lt;p&gt;Mocking &lt;code&gt;IHttpClientFactory&lt;/code&gt; is hard, I know. But here we've found a way to overcome those difficulties and make our tests easy to write and to understand.&lt;/p&gt;

&lt;p&gt;There are lots of NuGet packages out there that help us mocking that dependency: do you use any of them? What is your favourite, and why?&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;🐧&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>unittesting</category>
      <category>moq</category>
      <category>testing</category>
    </item>
    <item>
      <title>Best Successful Web App Ideas for 2021</title>
      <author>Raindrops Infotech</author>
      <pubDate>Wed, 27 Oct 2021 09:16:57 +0000</pubDate>
      <link>https://dev.to/raindropsinfotech/best-successful-web-app-ideas-for-2021-55f3</link>
      <guid>https://dev.to/raindropsinfotech/best-successful-web-app-ideas-for-2021-55f3</guid>
      <description>&lt;p&gt;The internet world, with its latest technologies, has transformed into a small global village. Today, a website has become the need for all big and small companies. So, people have started choosing to design and develop, which will help them to create massive global exposure and thrive in competition with their brand. In this digital age, online presence has become one of the topmost priorities.&lt;/p&gt;

&lt;p&gt;So if you are looking for an ideal website and mobile app development company in India, We, Raindrops InfoTech, is here fulfilling the digital requirements of thousands of companies especially, in India and worldwide. We have an efficient team of designers and developers to serve you the best web solution that exceeds your performance and usability. For any large or small business, non-profit or governmental organizations and institutions, we always create dynamic and appealing websites. We also offer exclusive tailored services for Startups that helps to meet specific business needs, higher data security and endless updating opportunities.&lt;/p&gt;

&lt;p&gt;High-quality solutions with complete clarity are the trademark of our development plan.&lt;/p&gt;

&lt;p&gt;With over 11 years of experience, we are a top-rated mobile app development and website design company in India &amp;amp; USA. We have developed over 700 websites and more than 150 mobile applications. So far, we have successfully achieved 2500+ happy customers. High-quality solutions with complete clarity are the trademark of our development plan.&lt;/p&gt;

&lt;p&gt;Thinking of the web development service in India, we use our creativeness to ensure that you feel satisfied with everything we do for your business. We will produce unique designs for your website, and that would use all our knowledge from scratch.&lt;/p&gt;

&lt;p&gt;Read More here : &lt;a href="https://www.raindropsinfotech.com/blogs/successful-web-app-ideas-for-business/"&gt;https://www.raindropsinfotech.com/blogs/successful-web-app-ideas-for-business/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>news</category>
    </item>
    <item>
      <title>AWS Security Digest</title>
      <author>Victor GRENU</author>
      <pubDate>Wed, 27 Oct 2021 09:07:33 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-security-digest-27ln</link>
      <guid>https://dev.to/aws-builders/aws-security-digest-27ln</guid>
      <description>&lt;p&gt;Folks,&lt;/p&gt;

&lt;p&gt;📬 Issue #42 of my low-volume (once a week) newsletter “AWS Security Digest” is out.&lt;/p&gt;

&lt;p&gt;What you will find:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight of the week 🔦&lt;/li&gt;
&lt;li&gt;Change since last week on AWS Managed IAM Policies 🕵🏻‍♂️&lt;/li&gt;
&lt;li&gt;Curated Cloud Security Newsletters 💌&lt;/li&gt;
&lt;li&gt;AWS API changes 👀&lt;/li&gt;
&lt;li&gt;IAM Permissions changes 🔒&lt;/li&gt;
&lt;li&gt;Most upvoted posts on r/AWS 🆙&lt;/li&gt;
&lt;li&gt;Top shared links on Twitter (by cloudsec folks) 🔗&lt;/li&gt;
&lt;li&gt;Most engaged Tweets from the community 🐦&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adopt a slow-tech 🐌 approach by reading only essential, digest summary of what is going on in the AWS Security landscape.&lt;/p&gt;

&lt;p&gt;With already 300+ subscribers with famous folks from @netflix and @amazon, you can’t go wrong :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.mailbrew.com/zoph/aws-security-digest-HrkhwqNrwBBk"&gt;https://app.mailbrew.com/zoph/aws-security-digest-HrkhwqNrwBBk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>digest</category>
      <category>newsletter</category>
    </item>
    <item>
      <title>Does Money is Everything in Negotiation?</title>
      <author>Negotiating Wisdom</author>
      <pubDate>Wed, 27 Oct 2021 08:58:10 +0000</pubDate>
      <link>https://dev.to/negotiatingwisdom/does-money-is-everything-in-negotiation-3fpg</link>
      <guid>https://dev.to/negotiatingwisdom/does-money-is-everything-in-negotiation-3fpg</guid>
      <description>&lt;p&gt;Image Credit: &lt;a href="https://www.negotiatingwisdom.com"&gt;Negotiating Wisdom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Does &lt;a href="https://www.negotiatingwisdom.com/blog/most-negotiations-arent-about-money"&gt;money isn't everything in negotiation&lt;/a&gt;? That’s what I will be discussing in this article. But before we proceed, let us discuss &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Money is not everything in negotiation&lt;/b&gt;. Many people believe that money and career take priority under career over relationships and family. However studies show that the professional who take the top position or offer also tend to have a more satisfying and well balanced life than those who accept lower offers. If we begin to view money as just one resource then we must separate it from such as such as career prestige, respect, sense of achievement and opportunities. It is important to remember that money does make a difference but its isn't the only motivator to any deal.&lt;/p&gt;

&lt;p&gt;Negotiations depend on the ability to reach agreement, not on the ability to inflict your will but now depend on money.&lt;/p&gt;

&lt;p&gt;I hope you like our article&lt;/p&gt;

</description>
    </item>
    <item>
      <title>convert any website to release android app in a few minutes for free - URLgApp</title>
      <author>AmrElDessouki22</author>
      <pubDate>Wed, 27 Oct 2021 08:56:43 +0000</pubDate>
      <link>https://dev.to/amreldessouki22/convert-website-to-release-android-app-in-a-few-minutes-for-free-3k5l</link>
      <guid>https://dev.to/amreldessouki22/convert-website-to-release-android-app-in-a-few-minutes-for-free-3k5l</guid>
      <description>&lt;p&gt;Today we present &lt;a href="https://urlgapp.com"&gt;https://urlgapp.com&lt;/a&gt; - a tool designed to convert any responsive website into an Android app. 📲&lt;/p&gt;

&lt;p&gt;You don't need to be a coder to use this solution to wrap your website into a professional android app! 🎁&lt;br&gt;
Urlgapp is a website to convert your website to an android app with app bundle &amp;amp; apk with your own key store valid for 10,000 days on google play store&lt;/p&gt;

&lt;p&gt;Features that we provide&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apk &amp;amp; App bundle&lt;/li&gt;
&lt;li&gt;Google play Key&lt;/li&gt;
&lt;li&gt;Firebase Notification&lt;/li&gt;
&lt;li&gt;Media permission&lt;/li&gt;
&lt;li&gt;Admob integration&lt;/li&gt;
&lt;li&gt;Dialog Ask to exit app&lt;/li&gt;
&lt;li&gt;Internet connection error . native page&lt;/li&gt;
&lt;li&gt;Android native spinner&lt;/li&gt;
&lt;li&gt;Ask to open link with different domain name out side the app&lt;/li&gt;
&lt;li&gt;Login by google is working&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you have any example for this tool in google play ❓&lt;br&gt;
yes we have you can download it from here&lt;br&gt;
&lt;a href="https://play.google.com/store/ap"&gt;https://play.google.com/store/ap&lt;/a&gt;...&lt;br&gt;
it’s very simple app&lt;/p&gt;

&lt;p&gt;why you add a media permission ❓&lt;br&gt;
urlgapp doesn`t know what type of website it you but if your user upload or download any file without any permission google play will remove your app from store so, we have added it by default to make sure your app is safe on google play&lt;/p&gt;

&lt;p&gt;No coding.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>wordpress</category>
      <category>beginners</category>
      <category>angular</category>
    </item>
    <item>
      <title>A dev new word - 
    Condensing</title>
      <author>Rushan S J</author>
      <pubDate>Wed, 27 Oct 2021 08:41:51 +0000</pubDate>
      <link>https://dev.to/rushannotofficial/a-dev-new-word-condensing-5hln</link>
      <guid>https://dev.to/rushannotofficial/a-dev-new-word-condensing-5hln</guid>
      <description>&lt;p&gt;Hmm..., You already know what is condensing? Maybe not. You might have heard about pickling which is converting an object in a character stream. This character stream can be used to reconstruct the object and the object retains its properties.&lt;br&gt;
I made a word just like it !&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#origins"&gt;
  &lt;/a&gt;
  Origins:
&lt;/h4&gt;

&lt;p&gt;There isn't a word for some stuff so, I made one. &lt;br&gt;
I thought about it while writing my exams. (I'm in 9th grade)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#meaning"&gt;
  &lt;/a&gt;
  Meaning:
&lt;/h4&gt;

&lt;p&gt;Ok, let's imagine that we have a web server which renders a web page about blogs. When a user posts a blog, we save the content to a file and then render all blogs written so far in a page. The process of getting content and saving it to a file is called (&lt;strong&gt;Drum roll&lt;/strong&gt;) &lt;em&gt;Condensation&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h6&gt;
  &lt;a href="#q-why-did-i-choose-condensation-"&gt;
  &lt;/a&gt;
  Q. Why did I choose condensation ?
&lt;/h6&gt;

&lt;p&gt;A. When water vapour (in our case, raw data),&lt;br&gt;
  condenses in liquid water (ordered data in &lt;br&gt;
      a file) is called CONDENSATION. 🤣&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#how-would-you-use-this-word-"&gt;
  &lt;/a&gt;
  How would you use this word ?
&lt;/h4&gt;

&lt;p&gt;Examples are: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I built a micro service to &lt;em&gt;condense&lt;/em&gt; the 
 users data.&lt;/li&gt;
&lt;li&gt;Let's process the condensed data
&lt;p&gt; &lt;/p&gt;
&lt;em&gt;NOTE: Condensing doesn't mean to write data to a file. It simply means to get data from a remote/non-local system. (In our case, a web server hosted on &lt;a href="https://aws.amazon.com/"&gt;Amazon Web Services&lt;/a&gt;)&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Btw, you're free to use this word anywhere. No Copyrights. 😅&lt;/p&gt;

&lt;p&gt;What do y'all think about this post? Lemme know in the comments. Bye&lt;/p&gt;

</description>
      <category>news</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Switch to a darker image when on dark mode!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Wed, 27 Oct 2021 07:41:58 +0000</pubDate>
      <link>https://dev.to/ziratsu/switch-to-a-darker-image-when-on-dark-mode-2lkh</link>
      <guid>https://dev.to/ziratsu/switch-to-a-darker-image-when-on-dark-mode-2lkh</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Let's learn how to switch images when using a &lt;strong&gt;dark/light mode.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/D5VuRHCfaxA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-how-to-handle-the-dark-mode"&gt;
  &lt;/a&gt;
  1. How to handle the dark mode.
&lt;/h2&gt;

&lt;p&gt;You only need to add a media query so that, when you change the mode from light to dark in your computer settings, the theme of your app changes from light to dark. Here's how to do it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, there are two ways to change images when you switch from dark to light mode (or the other way around). Let's take a look at the first one!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-first-way-to-switch-images"&gt;
  &lt;/a&gt;
  2. The first way to switch images.
&lt;/h2&gt;

&lt;p&gt;You can wrap the images inside a picture element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"ressources/dark-empire.jpg"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"(prefers-color-scheme:dark)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ressources/light-empire.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That way, if you've selected dark theme in your settings, then it will choose the first image, if not it will choose the second one.&lt;/p&gt;

&lt;p&gt;Then, you can style the images however you want! Here's how I did it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-the-second-way-to-switch-images"&gt;
  &lt;/a&gt;
  3. The second way to switch images.
&lt;/h2&gt;

&lt;p&gt;But there's another way to do this! You can create an empty div in HTML and then add the image as a background of this div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.img-toggle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(ressources/light-empire.jgp)&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, you then need to update your media query so that you have the darker image for the dark mode and not the lighter image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nc"&gt;.img-toggle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sx"&gt;url(ressources/dark-empire.jgp)&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You've done it!&lt;/em&gt; Now your dark theme can be even &lt;strong&gt;darker&lt;/strong&gt; than before ;)&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on my &lt;strong&gt;social medias&lt;/strong&gt;:&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/learn_to_create1"&gt;https://www.instagram.com/learn_to_create1&lt;/a&gt;&lt;br&gt;
TikTok : &lt;a href="https://www.tiktok.com/@learn_to_create"&gt;https://www.tiktok.com/@learn_to_create&lt;/a&gt;&lt;br&gt;
Twitter : &lt;a href="https://twitter.com/Learn_To_Create"&gt;https://twitter.com/Learn_To_Create&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon for some easy-to-learn tutorials!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>C Language Cheatsheet</title>
      <author>Rohan Kiratsata</author>
      <pubDate>Wed, 27 Oct 2021 07:39:52 +0000</pubDate>
      <link>https://dev.to/rohankiratsata/c-language-cheatsheet-1fg0</link>
      <guid>https://dev.to/rohankiratsata/c-language-cheatsheet-1fg0</guid>
      <description>&lt;p&gt;Hello Developers ! Today I'm starting cheatsheet Series. I'll be posting cheatsheet for programming languages and many more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;These cheatsheets are also available on my &lt;a href="https://github.com/rohan-kiratsata"&gt;GitHub&lt;/a&gt;.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Improve &lt;a href="https://github.com/rohan-kiratsata/coding-cheatsheets"&gt;this&lt;/a&gt; GitHub repository by contributing to it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Download PDF from &lt;a href="https://github.com/rohan-kiratsata/coding-cheatsheets/tree/main/PDFs"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#c-cheatsheet"&gt;
  &lt;/a&gt;
  C Cheatsheet
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#c-cheatsheet"&gt;C Cheatsheet&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-content"&gt;Table of content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boilerplate-code"&gt;Boilerplate Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#printf-function"&gt;printf() function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scanf-function"&gt;scanf() function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variables"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-data-types"&gt;Basic Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#format-specifiers"&gt;Format Specifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#escape-sequences"&gt;Escape Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operators"&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conditional-statements"&gt;Conditional Statements&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#if-statement"&gt;If Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-else-statements"&gt;If-Else Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-else-if-statements"&gt;If Else-If Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#switch-case-statements"&gt;Switch Case Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#iterative-statements"&gt;Iterative Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#while-loop"&gt;While loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#do-while-loop"&gt;Do-While Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#for-loop"&gt;For Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#break-statement"&gt;Break Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#continue-statement"&gt;Continue Statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#recursion"&gt;Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pointers"&gt;Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arrays"&gt;Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#strings"&gt;Strings&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#important-string-functions"&gt;Important String Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#structures"&gt;Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynamic-memory-allocation"&gt;Dynamic Memory Allocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#file-handling"&gt;File Handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;






&lt;h3&gt;
  &lt;a href="#boilerplate-code"&gt;
  &lt;/a&gt;
  Boilerplate Code
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#printf-function"&gt;
  &lt;/a&gt;
  printf() function
&lt;/h3&gt;

&lt;p&gt;It is used to print anything/show output on console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scanf-function"&gt;
  &lt;/a&gt;
  scanf() function
&lt;/h3&gt;

&lt;p&gt;It is used to take input from user&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"format specifier"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;variable_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;It is data name that is used to store the data value in the memory.&lt;/p&gt;

&lt;p&gt;Rules to declare variables:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable Name&lt;/th&gt;
&lt;th&gt;Valid?&lt;/th&gt;
&lt;th&gt;Why?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Not Valid&lt;/td&gt;
&lt;td&gt;keywords are not allowed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;amount$&lt;/td&gt;
&lt;td&gt;Not Valid&lt;/td&gt;
&lt;td&gt;Dollar Sign is not allowed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;your name&lt;/td&gt;
&lt;td&gt;Not Valid&lt;/td&gt;
&lt;td&gt;Space between variable name is not allowed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;average_score&lt;/td&gt;
&lt;td&gt;Valid&lt;/td&gt;
&lt;td&gt;underscore can be used as space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First_name&lt;/td&gt;
&lt;td&gt;Valid&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int_type&lt;/td&gt;
&lt;td&gt;Valid&lt;/td&gt;
&lt;td&gt;Keywords can be used as combination&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#basic-data-types"&gt;
  &lt;/a&gt;
  Basic Data Types
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;char&lt;/strong&gt; - It stores single character. Size - 1 byte&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;var_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Another example&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;var_name2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;int&lt;/strong&gt; - It stores an integer value. Size - 4 bytes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Another example&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;float&lt;/strong&gt; - It stores an floating point value with 6 digit precision. Size - 4 bytes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Another example&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;double&lt;/strong&gt; - It stores an float value with 14 digit precision. Size - 8 bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1531452&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Another Example&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;more_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;542&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;12452&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;void&lt;/strong&gt; - Represents the absence of type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;//does not return anything.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#format-specifiers"&gt;
  &lt;/a&gt;
  Format Specifiers
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Format Specifier&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%lf&lt;/td&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%l&lt;/td&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%Lf&lt;/td&gt;
&lt;td&gt;long double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%lld&lt;/td&gt;
&lt;td&gt;long long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;octal representation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%p&lt;/td&gt;
&lt;td&gt;pointer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%%&lt;/td&gt;
&lt;td&gt;prints % symbol&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#escape-sequences"&gt;
  &lt;/a&gt;
  Escape Sequences
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Escape Sequence&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\a&lt;/td&gt;
&lt;td&gt;Produces Alarm/Beep Sound&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;Backspace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;Form Feed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;New Line&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;Tab Space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;td&gt;Tab Space - Vertically&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\\&lt;/td&gt;
&lt;td&gt;Backslash&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\"&lt;/td&gt;
&lt;td&gt;Double Quote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\'&lt;/td&gt;
&lt;td&gt;Single Quote&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\?&lt;/td&gt;
&lt;td&gt;Question Mark&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Arithmetic Operators&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operators&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;a+b&lt;/td&gt;
&lt;td&gt;Addition or unary plus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;a-b&lt;/td&gt;
&lt;td&gt;Subtraction or unary minus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;a*b&lt;/td&gt;
&lt;td&gt;Multiplication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;a/b&lt;/td&gt;
&lt;td&gt;Division&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;a%b&lt;/td&gt;
&lt;td&gt;Modulo Division-Gives remainder&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Relational Operators&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;a &amp;lt; b&lt;/td&gt;
&lt;td&gt;is less than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;a &amp;gt; b&lt;/td&gt;
&lt;td&gt;is greater than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;a&amp;lt;=b&lt;/td&gt;
&lt;td&gt;is less than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;a&amp;gt;=b&lt;/td&gt;
&lt;td&gt;is greater than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Logical Operators&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;td&gt;a &amp;amp;&amp;amp; b&lt;/td&gt;
&lt;td&gt;logical AND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;||&lt;/td&gt;
&lt;td&gt;a || b&lt;/td&gt;
&lt;td&gt;logical OR&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;a ! b&lt;/td&gt;
&lt;td&gt;logical NOT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Increment and Decrement Operators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;variable_name++&lt;/code&gt; Here &lt;code&gt;++&lt;/code&gt; is a increment operator, it increments the value of variable by 1.&lt;br&gt;
&lt;code&gt;variable_name--&lt;/code&gt; Here &lt;code&gt;--&lt;/code&gt; is a decrement operator and it decrements the value of variable by 1.&lt;/p&gt;

&lt;p&gt;More examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// a value is 1&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// Now Value becomes 2&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// b value is 5&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// Now, b value is 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conditional-statements"&gt;
  &lt;/a&gt;
  Conditional Statements
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#if-statement"&gt;
  &lt;/a&gt;
  If Statement
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//statements or code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//example&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A is smaller"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#ifelse-statements"&gt;
  &lt;/a&gt;
  If-Else Statements
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//statements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//statements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//example&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A is smaller"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B is smaller"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#if-elseif-statements"&gt;
  &lt;/a&gt;
  If Else-If Statements
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condtion&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;another_condtion&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#switch-case-statements"&gt;
  &lt;/a&gt;
  Switch Case Statements
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;statement1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;statements2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;another_statements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;.....(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#iterative-statements"&gt;
  &lt;/a&gt;
  Iterative Statements
&lt;/h4&gt;

&lt;p&gt;It executes the statements inside a block of loop until condition is false&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#while-loop"&gt;
  &lt;/a&gt;
  While loop
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="c1"&gt;//code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//example&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//will print 1 to 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#dowhile-loop"&gt;
  &lt;/a&gt;
  Do-While Loop
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  For Loop
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#break-statement"&gt;
  &lt;/a&gt;
  Break Statement
&lt;/h5&gt;

&lt;p&gt;Break keyword is used to terminate the loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#continue-statement"&gt;
  &lt;/a&gt;
  Continue Statement
&lt;/h5&gt;

&lt;p&gt;Continue keyword skips the rest of iterative code of loop and return to starting point of loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;Functions are used to divide the code and to avoid repetitive task. It provides reusability and readability to code.&lt;br&gt;
&lt;strong&gt;Function Declaration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;return_type&lt;/span&gt; &lt;span class="nf"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_type&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//  Example of function to add two numbers&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#recursion"&gt;
  &lt;/a&gt;
  Recursion
&lt;/h3&gt;

&lt;p&gt;Recursion is the process of repeating items in a self-similar way.If a program allows you to call a function inside the same function, then it is called a recursive call of the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;   &lt;span class="c1"&gt;//Function calling itself&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Factorial Using Recursion&lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Factorial of %d is %l."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//OUTPUT : Factorial of 5 is 120.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pointers"&gt;
  &lt;/a&gt;
  Pointers
&lt;/h3&gt;

&lt;p&gt;Pointer is a variable that contains the address of another variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;datatype&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;p&gt;Array is an collection of data of same data-type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Declaration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;data_type&lt;/span&gt; &lt;span class="n"&gt;array_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;array_size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Fetching Array Element&lt;/strong&gt;&lt;br&gt;
Array index starts from 0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;data_type&lt;/span&gt; &lt;span class="n"&gt;variable_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Example&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;//OUTPUT : 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h3&gt;

&lt;p&gt;It is basically 1D character array. It character of string is null character (\0)&lt;br&gt;
&lt;strong&gt;Declaration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;string_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#important-string-functions"&gt;
  &lt;/a&gt;
  Important String Functions
&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;gets() function&lt;/strong&gt;&lt;br&gt;
It is used to take input of multi-character string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;puts() function&lt;/strong&gt;&lt;br&gt;
It is used to show string output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;strlen() function&lt;/strong&gt;&lt;br&gt;
It prints the length of string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;strcat() function&lt;/strong&gt;&lt;br&gt;
It is used to concatenate two strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;strcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;strcmp() function&lt;/strong&gt;&lt;br&gt;
It is used to compare two strings. Gives output in 0/1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;strcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;strcpy() function&lt;/strong&gt;&lt;br&gt;
It is used to copy the content of 1st string to another string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#structures"&gt;
  &lt;/a&gt;
  Structures
&lt;/h3&gt;

&lt;p&gt;A structure creates a data type that can be used to group items of possibly different types into a single type.&lt;br&gt;
&lt;strong&gt;Declaration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;college&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;      &lt;span class="c1"&gt;//Notice the semicolon&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dynamic-memory-allocation"&gt;
  &lt;/a&gt;
  Dynamic Memory Allocation
&lt;/h3&gt;

&lt;p&gt;If you are aware of the size of an array, then it is easy and you can define it as an array. For example, to store a name of any person, it can go up to a maximum of 100 characters. But now let us consider a situation where you have no idea about the length of the text you need to store, for example, you want to store a detailed description about a topic. Here we need to define a pointer to character without defining how much memory is required and later. So we use Dynamic Memory Allocation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;malloc() function&lt;/strong&gt;&lt;br&gt;
Stands for 'Memory allocation' and reserves a block of memory with the given amount of bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;casting_type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Example&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;calloc() function&lt;/strong&gt;&lt;br&gt;
Stands for “contiguous allocation” method in C is used to dynamically allocate the specified number of blocks of memory of the specified type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cast_type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;realloc() function&lt;/strong&gt;&lt;br&gt;
If the allocated memory is insufficient, then we can change the size of previously allocated memory using this function for efficiency purposes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#file-handling"&gt;
  &lt;/a&gt;
  File Handling
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating File Pointer&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Opening a File&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;fscanf() function&lt;/strong&gt;&lt;br&gt;
Used to read file content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;fscanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;..);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;fprintf() function&lt;/strong&gt;&lt;br&gt;
Used to write the file content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,..);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Closing a File&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;This cheatsheet is written and managed by &lt;a href="https://rohan-kiratsata.github.io"&gt;Rohan Kiratsata&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Something is missing? Contribute to this &lt;a href="https://github.com/rohan-kiratsata/coding-cheatsheets"&gt;repo&lt;/a&gt; and improve.&lt;/em&gt;&lt;/p&gt;




</description>
      <category>tutorial</category>
      <category>100daysofcode</category>
      <category>c</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building Projects  to impress 🤯🤯 Employers or Hiring Managers -- Intro [VoteSub]</title>
      <author>kiranbansode</author>
      <pubDate>Wed, 27 Oct 2021 07:35:20 +0000</pubDate>
      <link>https://dev.to/kiranbansode/building-projects-to-impress-employers-or-hiring-managers-intro-votesub-2cec</link>
      <guid>https://dev.to/kiranbansode/building-projects-to-impress-employers-or-hiring-managers-intro-votesub-2cec</guid>
      <description>&lt;p&gt;Hey everyone, My name is Kiran A. Bansode. I'm a self-taught Full-Stack web developer.&lt;/p&gt;

&lt;p&gt;As judging from this post's title, you can say that I'm building this web application to impress or to showcase my skills as a Full-Stack web developer to future Employers or Hiring Managers. From this project I think that those peoples can evaluate my abilities and would offer me a &lt;br&gt;
job(fingers cross 🤞🏻🤞🏻) or atleast give me a chance for interview.&lt;/p&gt;

&lt;p&gt;Okay. Mr. Kiran.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-your-project-"&gt;
  &lt;/a&gt;
  So, What is your Project ?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;VoteSub&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A place where students or any other users can vote their favourite school subjects so they will stay on top of famous subjects ranking list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-features-of-this-project-"&gt;
  &lt;/a&gt;
  What are the features of this project ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A new user will be able to sign in using the Registration page.&lt;/li&gt;
&lt;li&gt;Existing users will be able to log in using the Login page.&lt;/li&gt;
&lt;li&gt;Dashboard page will show current status or rank of user’s favourite subject and remaining votes that user has&lt;/li&gt;
&lt;li&gt;Subject information page will show that subject’s little bit of information with some high quality and stunning images.&lt;/li&gt;
&lt;li&gt;A Voting history page will show who voted for that subject&lt;/li&gt;
&lt;li&gt;A Profile page of voters where visitors can see only basic information.&lt;/li&gt;
&lt;li&gt;There will be some admin functionality to help manage voters in the Admin page which will be hidden from normal users.&lt;/li&gt;
&lt;li&gt;Every week the admin will release some votes for users so they can give those votes to their favourite subject.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above features are going to make a MVP(Minimum viable product), which I want release for my students(Yes! I'm a teacher 🧑🏻‍🏫) on Monday, 22 November, 2022, when schools are going re-open after Diwali Vacations. So consider this date as my deadline 👹 for MVP.&lt;/p&gt;

&lt;p&gt;Features that will have in my project after MVP get released&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Works like native app [ PWA ]&lt;/li&gt;
&lt;li&gt;Offline data capabilities&lt;/li&gt;
&lt;li&gt;pdf generation at server&lt;/li&gt;
&lt;li&gt;users can upload their own profile pictures&lt;/li&gt;
&lt;li&gt;more controls for admin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…and much more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-your-tech-stack-"&gt;
  &lt;/a&gt;
  What is your tech stack ?
&lt;/h2&gt;

&lt;p&gt;I'm going use following technologies -&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HTML  |  CSS  |  JavaScript&lt;/li&gt;
&lt;li&gt;React  |  React Hooks&lt;/li&gt;
&lt;li&gt;Redux Toolkit  |  React-Redux&lt;/li&gt;
&lt;li&gt;Style-components  |  SASS&lt;/li&gt;
&lt;li&gt;Material-UI (MUI)&lt;/li&gt;
&lt;li&gt;React Hook Form  |  Yup&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#backend-firebase-"&gt;
  &lt;/a&gt;
  Backend [Firebase 🔥🔥]
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Firestore&lt;/li&gt;
&lt;li&gt;Storage&lt;/li&gt;
&lt;li&gt;Cloud Functions &lt;/li&gt;
&lt;li&gt;Hosting&lt;/li&gt;
&lt;li&gt;Emulators&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;VSCode 🧑🏻‍🎤&lt;/li&gt;
&lt;li&gt;Vite - React&lt;/li&gt;
&lt;li&gt;Nodejs  |  Yarn&lt;/li&gt;
&lt;li&gt;ESLint  |  Prettier  |  Husky  📸&lt;/li&gt;
&lt;li&gt;Figma  |  Draw.io&lt;/li&gt;
&lt;li&gt;Trello&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...and some other tools&lt;/p&gt;

&lt;p&gt;OK. That some pretty impressive tech stack Mr. Kiran. But&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-do-you-want-to-show-to-employers-or-hiring-managers-so-that-they-can-be-impressed-"&gt;
  &lt;/a&gt;
  What exactly do you want to show to employers or hiring managers, so that they can be impressed ?
&lt;/h2&gt;

&lt;p&gt;Few days ago, I read &lt;a href="https://dev.to/profydev/how-to-build-a-react-portfolio-that-gets-you-a-job-part-1-5fh9"&gt;this&lt;/a&gt; blog on Dev.to. In that blog Johannes describes what differs a newbie from a professional developer.&lt;/p&gt;

&lt;p&gt;I was very impresssed. So I decided I should try this to impress employers or hiring managers. I'm going to follow what Johannes suggested in his blog. Also I'm going to add my own twists.&lt;/p&gt;

&lt;p&gt;Also our tech industry is having pretty rough time for hiring skilled developers. Companies are looking for more than what tradional collages are teaching their students. It is becoming very hard to find right candidate for different roles or who can do most of things.&lt;/p&gt;

&lt;p&gt;So, by completing this project I want demonstrate that I have  such required skills that needs to have in a developer. Following is a list of the things that I want to show to my future employers or hiring managers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git Branching Strategies&lt;/li&gt;
&lt;li&gt;Git Issues&lt;/li&gt;
&lt;li&gt;CI/CD using GitHub Actions or other tools&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;Conventional Commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Trello Tasks management&lt;/li&gt;
&lt;li&gt;Wireframes using Diagrams.io&lt;/li&gt;
&lt;li&gt;Designs using Figma&lt;/li&gt;
&lt;li&gt;How I document my codebase ?&lt;/li&gt;
&lt;li&gt;What is my strategy to convert a design into working code.&lt;/li&gt;
&lt;li&gt;If I have issues, How I solve them ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...and many more &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-can-you-find-my-project-related-stuff-"&gt;
  &lt;/a&gt;
  Where can you find my project related stuff ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Source Code : &lt;a href="https://github.com/kiranbansode/votesub"&gt;GitHub VoteSub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Project Managment : &lt;a href="https://trello.com/b/dPmDCweY"&gt;Trello VoteSub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Issues Tracker : &lt;a href="https://github.com/kiranbansode/votesub/issues"&gt;VoteSub GitHub Issues Tracker&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Designs : &lt;a href="https://www.figma.com/file/ibh6SGKzcY9jgaTqusZy7b/VoteSub?node-id=0%3A1"&gt;Figma VotSub&lt;/a&gt; (I'm not a designer 😔😔, but I tried).&lt;/li&gt;
&lt;li&gt;Wireframes : &lt;a href="https://drive.google.com/file/d/1rGm_qjTJ-w6HtVl2RtIug5fPSDrH39co/view?usp=sharing"&gt;Diagrams.net VoteSub&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Wireframes link will only show image(not good quality). I don't know other way to show Diagrams.net files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#to-open-wireframes-file-in-your-computer-do-the-following-steps"&gt;
  &lt;/a&gt;
  To open wireframes file in your computer do the following steps
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Click on download button.&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://app.diagrams.net"&gt;Diagrams.net&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click on Device &amp;gt; Open Existing Diagram&lt;/li&gt;
&lt;li&gt;Choose downloaded file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-you-will-able-to-see-my-progess-on-this-project-"&gt;
  &lt;/a&gt;
  When you will able to see my progess on this project ?
&lt;/h2&gt;

&lt;p&gt;This is going to be a weekly blog series. From now on, every Sunday[IST] you will get a new blog related to this project. That blog will contain all projects related info like prior week's plan or design and past week's completed tasks, calendar schedules, screenshots of git commits and issues, and all ups and downs and last but not list, What did I learn new ?&lt;/p&gt;

&lt;p&gt;Guys if think this is exciting comment this blog. If you want to suggest or want to add something, comment it. I'll be happy to read your comments.&lt;/p&gt;

&lt;p&gt;So, see you on Sunday, till then sit tight. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;pssss.... this is my first ever blog on internet, so please go easy on me in comment section for my grammatical errors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bye 👋🏻👋🏻 ...&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>firebase</category>
      <category>votesub</category>
    </item>
    <item>
      <title>How to be a Productive Web Developer?</title>
      <author>Danish Saleem</author>
      <pubDate>Wed, 27 Oct 2021 07:34:09 +0000</pubDate>
      <link>https://dev.to/mrdanishsaleem/how-to-be-a-productive-web-developer-l1f</link>
      <guid>https://dev.to/mrdanishsaleem/how-to-be-a-productive-web-developer-l1f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-use-frameworks"&gt;
  &lt;/a&gt;
  1. Use Frameworks
&lt;/h2&gt;

&lt;p&gt;Frameworks are crucial for a Frontend Developer! Frameworks are the package of inbuilt templates, which we can use to build our own projects on top of it. Although learning a framework seems hard, the productivity is high.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-create-a-library-of-your-code-snippets"&gt;
  &lt;/a&gt;
  2. Create a library of your code Snippets
&lt;/h2&gt;

&lt;p&gt;This habit will increase your productivity at its peak! Any API or Code your write for a project will definitely be used in the other one. So, maintaining the library for your own code helps you to recycle the function and save a lot of time in debugging!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-write-a-blog-of-your-own-project"&gt;
  &lt;/a&gt;
  3. Write a blog of your own project
&lt;/h2&gt;

&lt;p&gt;This can be your Buy 1, Get 1 Offer!&lt;/p&gt;

&lt;p&gt;After any project or task, you made, you can write up a small blog of how you did it! This is a huge productive task as it helps you to understand the project more and also build a platform network for yourself from &lt;a href="https://www.buymeacoffee.com/mrdanishsaleem/"&gt;Blogs&lt;/a&gt;, &lt;a href="https://www.youtube.com/"&gt;YouTube&lt;/a&gt;, and so on...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-use-tools-amp-extensions"&gt;
  &lt;/a&gt;
  4. Use Tools &amp;amp; Extensions
&lt;/h2&gt;

&lt;p&gt;Tools and Extensions will help you to save time tremendously! There are plenty of browsers and IDE Extensions available to make the tasks simple and clean. And also, many tools to recreate or perform the function you wanted!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-learn-amp-master-git"&gt;
  &lt;/a&gt;
  5. Learn &amp;amp; Master Git
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; is one of the most powerful and life-saving tools for web developers! Upon mastering Git will help you to perform the wide dimensions in it and make your productivity level to the highest! Git can perform a task in seconds that takes unimaginable time without!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect!
&lt;/h2&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/MrDanishSaleem"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mrdanishsaleem/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mrdanishsaleem/"&gt;GitHub&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like this post. Kindly support me by &lt;a href="https://www.buymeacoffee.com/mrdanishsaleem"&gt;Buying Me a Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwzNk0Zq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lh2ipcpv1hzlwj24eop1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwzNk0Zq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lh2ipcpv1hzlwj24eop1.png" alt="Buy Me a Coffee" width="880" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>tooling</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Inspired by Apple's web animations, I have written a JavaScript library.</title>
      <author>Steven Lei</author>
      <pubDate>Wed, 27 Oct 2021 07:16:04 +0000</pubDate>
      <link>https://dev.to/stevenlei/inspired-by-apples-web-animations-i-have-written-a-javascript-library-2ll5</link>
      <guid>https://dev.to/stevenlei/inspired-by-apples-web-animations-i-have-written-a-javascript-library-2ll5</guid>
      <description>&lt;p&gt;Hello, I am Steven Lei.&lt;/p&gt;

&lt;p&gt;I love Apple products, and so do their website. They did a lot of fantastic animations for presenting their products, primarily scrolled-based, when we scroll the webpage up and down, the animation plays forward and backward.&lt;/p&gt;

&lt;p&gt;As a web developer, I tried to reproduce their animation work, learn from the process, and record it as screencasts.&lt;/p&gt;

&lt;p&gt;To achieve the scroll-based animation, we have to do some calculation work with JavaScript, like whether the element has appeared on screen, the scrolled distance, the element offset, and so forth. And we will update the element style accordingly.&lt;/p&gt;

&lt;p&gt;As they have the common requirements mentioned above, I wondered if this development process could be more straightforward. What if we can achieve the same goal without writing a single line of JavaScript?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-design"&gt;
  &lt;/a&gt;
  Initial Design
&lt;/h2&gt;

&lt;p&gt;Scroll-based animations are based on the scrolling distance and position of elements. I would like to have a number when the element starts to appear from the bottom of the page, and disappear from the top. Numbers between &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; would be simple enough, at least in this stage.&lt;/p&gt;

&lt;p&gt;I have used the &lt;code&gt;IntersectionObserver&lt;/code&gt; API to explore if the element is on-screen or not. And next, we have to think about how to use this number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-flexibility"&gt;
  &lt;/a&gt;
  The Flexibility
&lt;/h2&gt;

&lt;p&gt;As animation involves a variety of requirements, for instance, fading in an element, moving the element, changing the color of a text etc. We cannot limit the ability just on some of those. So I have decided to put the number as a CSS variable, this would be flexible enough for working out different animation scenarios.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-name-of-the-library"&gt;
  &lt;/a&gt;
  The Name of the Library
&lt;/h2&gt;

&lt;p&gt;I have started to develop the library and named it &lt;strong&gt;Trigger JS&lt;/strong&gt; because every scroll triggers a new value, just a literal meaning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thoughts-on-the-usage-of-javascript"&gt;
  &lt;/a&gt;
  Thoughts on the usage of JavaScript
&lt;/h2&gt;

&lt;p&gt;I want to simplify the development process, so this library's purpose is to let developers create scroll-based animation without writing JavaScript. I have decided to use HTML attributes and CSS variables.&lt;/p&gt;

&lt;p&gt;As the library name is &lt;strong&gt;Trigger JS&lt;/strong&gt;, I have used &lt;code&gt;tg-&lt;/code&gt; as the prefix of the related HTML attributes. I know &lt;code&gt;tg-&lt;/code&gt; does not quite fulfil the standard of HTML5, that's okay, I will keep an option to set the prefix, for example, &lt;code&gt;data-tg-*&lt;/code&gt;, to completely get rid of this concern. But for now, I will keep using &lt;code&gt;tg-&lt;/code&gt; here first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-first-attribute-raw-tgname-endraw-"&gt;
  &lt;/a&gt;
  The First Attribute: &lt;code&gt;tg-name&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;tg-name&lt;/code&gt; HTML attribute is mainly for two purposes: elements to be monitored and the name of the CSS variable.&lt;/p&gt;

&lt;p&gt;We will add the &lt;code&gt;tg-name&lt;/code&gt; attribute to the element that we want to monitor, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;tg-name=&lt;/span&gt;&lt;span class="s"&gt;"opacity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Hello World
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Trigger JS&lt;/strong&gt; will fetch all HTML elements with &lt;code&gt;tg-name&lt;/code&gt; attribute into an array called &lt;code&gt;activeElements&lt;/code&gt; (via &lt;code&gt;document.querySelector('[tg-name'])&lt;/code&gt;), and observe them with &lt;code&gt;IntersectionObserver&lt;/code&gt; API.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;scroll&lt;/code&gt; event listener is attached to &lt;code&gt;window&lt;/code&gt;, which will calculate the relative position of elements in &lt;code&gt;activeElements&lt;/code&gt; within the browser window: &lt;code&gt;0&lt;/code&gt; when the element appears from the bottom, and &lt;code&gt;1&lt;/code&gt; when the element disappears from the top, and &lt;code&gt;0.5&lt;/code&gt; when it is in the middle.&lt;/p&gt;

&lt;p&gt;Finally, we will put this calculation result to the element with CSS variable, for instance, &lt;code&gt;--opacity: 0.5&lt;/code&gt;. So that we can use the value in the appropriate CSS property, in this example, &lt;code&gt;opacity: var(--opacity);&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-range-setting"&gt;
  &lt;/a&gt;
  The Range Setting
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; is excellent in some situations. But if we want to move an element with &lt;code&gt;transform&lt;/code&gt;, it would be good to adjust the start and end value (We can do the calculation in CSS with &lt;code&gt;calc()&lt;/code&gt; though, but let's make it simpler).&lt;/p&gt;

&lt;p&gt;That's why I have added &lt;code&gt;tg-from&lt;/code&gt; and &lt;code&gt;tg-to&lt;/code&gt;. If we want to move an element by &lt;code&gt;400px&lt;/code&gt; from the right to the left when scrolling up the page, we can set &lt;code&gt;tg-from="200"&lt;/code&gt; and &lt;code&gt;tg-to="-200"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And yes, we have to define the frequency of movement. We can set &lt;code&gt;tg-steps="400"&lt;/code&gt; so that the element is moving pixel-by-pixel. But what if we want to keep the increment to be &lt;code&gt;1&lt;/code&gt; but change the range of &lt;code&gt;tg-from&lt;/code&gt; and &lt;code&gt;tg-to&lt;/code&gt;? We can do the calculation ourselves or use another attribute &lt;code&gt;tg-step="1"&lt;/code&gt; to avoid doing the math.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#numbers-are-not-perfect"&gt;
  &lt;/a&gt;
  Numbers are not Perfect
&lt;/h2&gt;

&lt;p&gt;Sometimes, we need an exact value. Let's say we want to change the text color, what we need is a color code instead.&lt;/p&gt;

&lt;p&gt;That's why &lt;code&gt;tg-map&lt;/code&gt; is being added, this gave us the ability to &lt;em&gt;convert&lt;/em&gt; a value from a number to a value. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt;
  &lt;span class="na"&gt;tg-name=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt;
  &lt;span class="na"&gt;tg-from=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;
  &lt;span class="na"&gt;tg-to=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;
  &lt;span class="na"&gt;tg-step=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;
  &lt;span class="na"&gt;tg-map=&lt;/span&gt;&lt;span class="s"&gt;"0: black; 1: blue; 2: purple"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Hello World
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The calculation value will be 0, 1 or 2 throughout the scroll, and convert to a final value with the setting in &lt;code&gt;tg-map&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt; -&amp;gt; &lt;code&gt;black&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; -&amp;gt; &lt;code&gt;blue&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;2&lt;/code&gt; -&amp;gt; &lt;code&gt;purple&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can update the text color easily with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#noice-reduction"&gt;
  &lt;/a&gt;
  Noice Reduction
&lt;/h2&gt;

&lt;p&gt;Sometimes we are only interested in certain values. For example, we only want to know when &lt;code&gt;25&lt;/code&gt;, &lt;code&gt;50&lt;/code&gt;, &lt;code&gt;75&lt;/code&gt; happens from 0 to 100 (&lt;code&gt;tg-from="0"&lt;/code&gt; and &lt;code&gt;tg-to="100"&lt;/code&gt;). In this situation, &lt;code&gt;tg-filter&lt;/code&gt; takes part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"heading"&lt;/span&gt;
  &lt;span class="na"&gt;tg-name=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt;
  &lt;span class="na"&gt;tg-from=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;
  &lt;span class="na"&gt;tg-to=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt;
  &lt;span class="na"&gt;tg-step=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;
  &lt;span class="na"&gt;tg-filter=&lt;/span&gt;&lt;span class="s"&gt;"25,50,75"&lt;/span&gt;
  &lt;span class="na"&gt;tg-map=&lt;/span&gt;&lt;span class="s"&gt;"25: red; 50: yellow; 75: green"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Red (25), Yellow (50), Green (75)
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* In order to make the page have enough rooms for scrolling */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nf"&gt;#heading&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open Source
&lt;/h2&gt;

&lt;p&gt;The above is the introduction of creating this library, and this project is available on &lt;a href="https://github.com/triggerjs/trigger"&gt;GitHub - triggerjs/trigger&lt;/a&gt;. Please feel free to try out, submit pull requests and share your thoughts. Your opinion is precious.&lt;/p&gt;

&lt;p&gt;Please star it if you like it, and that would be great to have your participation.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>animation</category>
      <category>webdev</category>
    </item>
    <item>
      <title>SQL - Stored Procedure 📦</title>
      <author>Sharanjeet kaur</author>
      <pubDate>Wed, 27 Oct 2021 06:54:52 +0000</pubDate>
      <link>https://dev.to/sharan_710/sql-stored-procedure-4n2m</link>
      <guid>https://dev.to/sharan_710/sql-stored-procedure-4n2m</guid>
      <description>&lt;p&gt;SQL is the standard language for the Relational Database, for storing, manipulating and retrieving stored data. For basics of SQL (&lt;a href="https://www.tutorialspoint.com/sql/"&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;A Stored Procedure is a SQL code that we can save, so the code can be reused again and again. &lt;br&gt;
So, if we have any SQL query which we write over and over again, we can use it as a stored procedure so that we can just call it to execute it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-syntax-for-creating-the-stored-procedure"&gt;
  &lt;/a&gt;
  The Syntax for creating the stored procedure
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bjc-QcNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j2wlzz9nq0w9hvy63mr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjc-QcNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j2wlzz9nq0w9hvy63mr.png" alt="Image description" width="880" height="307"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#executing-stored-procedure"&gt;
  &lt;/a&gt;
  Executing stored procedure
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--njw88bhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qcs3s7xf0r86s7jae3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--njw88bhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qcs3s7xf0r86s7jae3f.png" alt="Image description" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#stored-procedure-with-parameters"&gt;
  &lt;/a&gt;
  Stored Procedure with Parameters
&lt;/h4&gt;

&lt;p&gt;To add Parameters in the procedure, first, we need to alter the procedure for which we can use ALTER procedure statement as follows: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SPNz-03N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi67hi2habd6ye7f3o9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SPNz-03N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xi67hi2habd6ye7f3o9i.png" alt="Image description" width="880" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To Execute the above stored procedure, we have to declare a variable for output parameter and specify the parameter as out&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHmvR7FL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysdwj14a3gj17nkphv0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHmvR7FL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysdwj14a3gj17nkphv0k.png" alt="Image description" width="880" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like this, we can also set multiple parameters by separating each parameter and the data type with a comma &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#drop-a-stored-procedure"&gt;
  &lt;/a&gt;
  Drop a stored procedure
&lt;/h4&gt;

&lt;p&gt;To drop a stored procedure, use the DROP statement as follows:&lt;/p&gt;

&lt;p&gt;DROP PROCEDURE usp_proc;&lt;/p&gt;

&lt;p&gt;Thank you!! Feel free to comment on any type of feedback or error you have 😄✌ &lt;/p&gt;

</description>
      <category>sql</category>
      <category>database</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
