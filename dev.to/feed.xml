<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Triggers en Oracle (campos autoincrementables)</title>
      <author>Adriana Gómez</author>
      <pubDate>Tue, 30 Nov 2021 16:51:02 +0000</pubDate>
      <link>https://dev.to/adrigomez95/triggers-en-oracle-campos-autoincrementables-1gbd</link>
      <guid>https://dev.to/adrigomez95/triggers-en-oracle-campos-autoincrementables-1gbd</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creación de una tabla&lt;/strong&gt;
Primero, debemos tener la tabla con los campos para poder crear su trigger más adelante. Para crear la tabla, lo hacemos desde la interfaz o bien, de la siguiente manera con comandos:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;CREATE TABLE Animales&lt;br&gt;
(id_animal number primary key,&lt;br&gt;
nombre VARCHAR2(25) NOT NULL,&lt;br&gt;
color VARCHAR2(25) NOT NULL);&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creación de una secuencia&lt;/strong&gt; 
Una vez la tabla esté lista, le indicamos con una secuencia, que inicie en 1 y se incremente en 1 cada vez que se vaya a insertar un dato:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;CREATE SEQUENCE canimales&lt;br&gt;
START WITH 1&lt;br&gt;
INCREMENT BY 1;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creación del trigger&lt;/strong&gt; 
Para que el campo 'id_animal' se autoincremente de una manera elegante, utilizaremos el trigger para que se encargue de obtener e insertar el valor de la secuencia automáticamente. La manera correcta de crear uno, es la siguiente:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;CREATE TRIGGER TRIG_ANIMALES&lt;br&gt;
BEFORE INSERT ON Animales&lt;br&gt;
FOR EACH ROW&lt;br&gt;
BEGIN&lt;br&gt;
SELECT canimales.NEXTVAL INTO :NEW.id_animal FROM DUAL;&lt;br&gt;
END;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hH-e37La--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvmysh6kv615ezmsaol4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hH-e37La--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvmysh6kv615ezmsaol4.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este trigger lo podemos encontrar en la carpeta 'Disparadores' de las propiedades de la tabla:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDnvcI59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tsox5h73gljgscveocw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDnvcI59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tsox5h73gljgscveocw.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inserción de datos&lt;/strong&gt; 
Listo, ahora podemos insertar datos y cada uno tendrá un id único gracias al trigger:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;INSERT INTO Animales (nombre, color)&lt;br&gt;
VALUES ('Caballo', 'Blanco');&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qud5S5qS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oemj8q2d5d54cvmhjc9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qud5S5qS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oemj8q2d5d54cvmhjc9z.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_uugZz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m61gdudg5j57jmx2cs86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_uugZz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m61gdudg5j57jmx2cs86.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>oracle</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Fylamynt and Squadcast Team Up To Handle Cloud Incident Response, Management, and Remediation</title>
      <author>Scott Lasica</author>
      <pubDate>Tue, 30 Nov 2021 16:47:24 +0000</pubDate>
      <link>https://dev.to/youngshatner/fylamynt-and-squadcast-team-up-to-handle-cloud-incident-response-management-and-remediation-2dcg</link>
      <guid>https://dev.to/youngshatner/fylamynt-and-squadcast-team-up-to-handle-cloud-incident-response-management-and-remediation-2dcg</guid>
      <description>&lt;p&gt;As much as every company dreams of cloud operations running perfectly all the time, as even junior operations people know the reality is there are issues, things break, and they have to be dealt with constantly. Savvy operations teams prepare for this eventuality and together with industry leading incident management, incident response and incident remediation tools are able to minimize user facing issues and especially dreaded downtime.&lt;/p&gt;

&lt;p&gt;This is where a modern incident management &amp;amp; response platform like &lt;a href="https://squadcast.com"&gt;Squadcast&lt;/a&gt; comes to the rescue, helping organizations in their journey to deliver super-reliable services. Organizations can quickly and easily adopt Site Reliability Engineering (SRE) practices to improve their incident resolution metrics and ultimately, the reliability of their systems.&lt;/p&gt;

&lt;p&gt;The first step towards doing better incident management is adding enough context to incidents while they get detected. With Squadcast, teams can discover everything they need, to take action and achieve best-in-class MTTD (Mean Time To Detect) with highly configurable features like [alert deduplication and tagging(&lt;a href="https://www.squadcast.com/effective-on-call-and-incident-response"&gt;https://www.squadcast.com/effective-on-call-and-incident-response&lt;/a&gt;), thus facilitating on-call teams to streamline high-priority alerts and stay productive. Teams can also collaborate in real-time with virtual &lt;a href="https://support.squadcast.com/docs/incident-notes"&gt;incident war rooms&lt;/a&gt; on Squadcast to get the right responders virtually in one place making operations transparent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--giVUGOae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AciUQI_KkjyYa-JQW" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--giVUGOae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AciUQI_KkjyYa-JQW" alt="Squadcast" width="800" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously the story doesn’t end once an incident has been created, routed and enriched. The incident still needs to be remediated. This is where Fylamynt steps in as the perfect compliment to Squadcast. Fylamynt provides a no-code, drag and drop interface for building workflows &lt;a href="https://www.fylamynt.com/post/whats-a-runbook"&gt;(runbooks)&lt;/a&gt; that can be triggered by a number of ways, including a Squadcast incident.&lt;/p&gt;

&lt;p&gt;Fylamynt integrates with over 40 commonly used tools for dealing with cloud operation incidents, handling all the API calls and the end result is a fully or partially automated workflow that will run in a consistent manner every time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow-as-code"&gt;
  &lt;/a&gt;
  Workflow as Code
&lt;/h2&gt;

&lt;p&gt;We call this “&lt;a href="https://www.fylamynt.com/post/from-ad-hoc-scripting-to-workflow-as-code-the-evolution-of-runbooks"&gt;workflow as code&lt;/a&gt;” because our user interface gets out of your way and lets you switch seamlessly between drag-and-drop and coding scripts in Python and JSON, without loss of information.&lt;br&gt;
You can select from a comprehensive library of connectors and automated actions to connect any part of your cloud. You can select from a list of actions to create a workflow to solve a specific business task such as fixing an incident that caused the website to be down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fbFb8UJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AE2RCkh_uSID6HEc6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fbFb8UJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AE2RCkh_uSID6HEc6" alt="Fylamynt" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By automating the parts of the workflow that are the most tedious and time consuming, SRE teams can focus their expertise where it’s needed to make those critical decisions. We call this “&lt;a href="https://www.fylamynt.com/post/human-in-the-loop"&gt;human in the loop&lt;/a&gt;” and this causes the workflow to pause and can send a message through slack or otherwise. The &lt;a href="https://www.fylamynt.com/post/who-are-sres-and-what-do-they-do"&gt;SRE&lt;/a&gt; can then click a link and have all the needed information at their fingertips, allowing them to quickly make the decision on what to do next (could be transferring traffic to a new instance or destroying an instance that was spiking CPU).&lt;/p&gt;

&lt;p&gt;Another added benefit of defining and automating your workflows is that less experienced support engineers can handle more issues, freeing time for the more senior staff as well as repairing issues more quickly.&lt;/p&gt;

&lt;p&gt;Fylamynt also provides a dashboard that shows all executed and currently executing workflows, with tons of detail about every step that ran, what the inputs and outputs were and what branches and actions were taken.&lt;/p&gt;

&lt;p&gt;At this point you can pop back into Squadcast to handle your &lt;a href="https://www.squadcast.com/post-incident-review"&gt;incident postmortem&lt;/a&gt; — the next logical step after any incident is to dissect and analyze the why, how and the what of the incident.  ​Squadcast’s incident postmortem feature helps build an insightful timeline in a matter of minutes. This is especially useful as automation ensures that you can quickly have a system-generated postmortem for pretty much any incident.&lt;/p&gt;

&lt;p&gt;One of the core principles of SRE is Transparency and Squadcast’s &lt;a href="https://www.squadcast.com/statuspage"&gt;Status Page&lt;/a&gt; helps you communicate to customers and stakeholders with real-time updates. By configuring your public-facing services and their dependent components, you can show their status in real-time directly within Squadcast.&lt;/p&gt;

&lt;p&gt;Squadcast’s native &lt;a href="https://www.squadcast.com/mobile-incident-management"&gt;mobile application&lt;/a&gt; also helps in triggering remediations from anywhere. Teams can also connect via APIs to enhance incident response by bringing their entire toolchain into one platform.&lt;/p&gt;

&lt;p&gt;Together Squadcast and Fylamynt provide the end-to-end solution for handling cloud operations incidents, helping your end users to experience a consistently delightful application experience. Teams can practice site reliability engineering through better Incident Management to proactively respond, resolve, and learn from every incident.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.squadcast.com/register"&gt;Try Squadcast Free →&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.fylamynt.com/sign-up"&gt;Try Fylamynt Free →&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://www.squadcast.com/"&gt;Squadcast&lt;/a&gt; is an incident management tool that’s purpose-built for SRE. Your team can get rid of unwanted alerts, receive relevant notifications, work in collaboration using virtual incident war rooms, and automate repetitive tasks to eliminate toil. Organisations can quickly and easily adopt Site Reliability Engineering practices to improve their incident resolution metrics and ultimately, the reliability of their systems.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://fylamynt.com"&gt;Fylamynt&lt;/a&gt; has created the world’s first low code incident response and remediation platform for building, running and analyzing SRE cloud workflows. With Fylamynt an SRE can automate the parts of the runbook that are the most time consuming, allowing them to make decisions where their expertise is needed.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>sre</category>
      <category>devops</category>
      <category>cloudskills</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>React Developers Visualize Audio Files With ✨ Tarang </title>
      <author>sudarshan</author>
      <pubDate>Tue, 30 Nov 2021 16:37:44 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/react-developers-visualize-audio-files-with-tarang-3550</link>
      <guid>https://dev.to/sudarshansb143/react-developers-visualize-audio-files-with-tarang-3550</guid>
      <description>&lt;p&gt;Hi Folks,&lt;/p&gt;

&lt;p&gt;Have you ever wondered, how to visualize an 🎧 audio 🎧 in your react app ? or how to snow an animated, beat synced UI for currently playing music ?&lt;/p&gt;

&lt;p&gt;Will explore it in this article &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tarang"&gt;
  &lt;/a&gt;
  🎇 Tarang 🎇
&lt;/h2&gt;

&lt;p&gt;Tarang is a NPM package, which enables the visualization of audio files. It uses D3 based chart and line animations in order to create svg-based visualization.&lt;/p&gt;

&lt;p&gt;By using Tarang, any one can visualize audio files with ease. By enabling beat catch-up and some smooth, glorifying animations Tarang allows us to create superbb... USER experience.&lt;/p&gt;

&lt;p&gt;by using cool animation it does fantastic animation's without adding much overhead in front end apps.&lt;/p&gt;

&lt;p&gt;There are several options currently exposed by Tarang enlisted as  :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separate Thumbnail image &lt;/li&gt;
&lt;li&gt;Height and width of Thumbnail image &lt;/li&gt;
&lt;li&gt;Control based of representation of audio&lt;/li&gt;
&lt;li&gt;Mute or unmute audio&lt;/li&gt;
&lt;li&gt;Play on focus and stop on unfocus&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#1-bar-visualizations"&gt;
  &lt;/a&gt;
  1. 📊 Bar Visualizations
&lt;/h3&gt;

&lt;p&gt;Bar visualization enables bar-chart like animations. Which can be used as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Tarang&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tarang&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tarang/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tarang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bar&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;muted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;audioUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url-of-mp3-file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;coverArtUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url-of-cover-art-image-file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-line-graph-"&gt;
  &lt;/a&gt;
  2. 📈 Line Graph :
&lt;/h3&gt;

&lt;p&gt;Line visualization enables typical graph-line like animations. Which are created as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Tarang&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tarang&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tarang/dist/index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tarang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Line&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;muted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;audioUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url-of-mp3-file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;coverArtUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url-of-cover-art-image-file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Tarang, we can directly use the S3 file urls or any other subsequent urls of asset (i.e. both for music files and thumbnails). &lt;/p&gt;

&lt;p&gt;It is easy to use and compatible with many frontend frameworks like &lt;/p&gt;

&lt;p&gt;Next.js, Gatsby etc.&lt;/p&gt;

&lt;p&gt;Currently, it is still in development, but we can some more interesting stuff in upcoming duration &lt;/p&gt;

&lt;p&gt;Github Link : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kamalyesh/tarang"&gt;https://github.com/kamalyesh/tarang&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😇 Thanks for reading... &lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Microservices architecture: The Static Contract Pitfall</title>
      <author>Allan B/H</author>
      <pubDate>Tue, 30 Nov 2021 16:16:16 +0000</pubDate>
      <link>https://dev.to/abarran03/microservices-architecture-the-static-contract-pitfall-2hnn</link>
      <guid>https://dev.to/abarran03/microservices-architecture-the-static-contract-pitfall-2hnn</guid>
      <description>&lt;p&gt;Hi everyone! I would like to show you how &lt;em&gt;&lt;em&gt;The Static Contract pitfall&lt;/em&gt;&lt;/em&gt; could drive APIs to unexpected issues, and how versioning helps to avoid them. For that purpose I will be using &lt;em&gt;&lt;em&gt;O'Reilly's Microservices Antipatterns and Pitfalls&lt;/em&gt;&lt;/em&gt; and Microsoft site related to &lt;em&gt;&lt;em&gt;RESTful web API design&lt;/em&gt;&lt;/em&gt;. References were added at bottom.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-is-a-pitfall"&gt;
  &lt;/a&gt;
  But what is a pitfall?
&lt;/h2&gt;

&lt;p&gt;According to Richards (2016) a pitfall is &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;something that was never a good idea, even from the start.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that is the case for &lt;em&gt;&lt;em&gt;The Static Contract pitfall&lt;/em&gt;&lt;/em&gt;. This assumption leads APIs to be not flexible enough for contract changes in front of client applications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-static-contract-pitfall"&gt;
  &lt;/a&gt;
  The Static Contract Pitfall
&lt;/h2&gt;

&lt;p&gt;Imagine having a REST API endpoint consumed by three different client applications, but one of them needs an extension of a service published. So, the API provider in order to deploy the new changes, requires to check compatibility with the others consumers. Ups! Something goes wrong, the changes imply modifying a JSON contract, then consumers will be impacted and none of them would adapt to those modifications at the same time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0MtDXG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gltyq1c4uqlkg5ren0io.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0MtDXG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gltyq1c4uqlkg5ren0io.PNG" alt="Many clients consume an API endpoint, and changing this service could be complicated" width="444" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It happens all the time, contracts between providers and consumers are not static. They change very often by adding new features to microservices. However, there are some strategies to keep those issues away and implement backward compatibility without breaking all clients.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#versioning-strategies"&gt;
  &lt;/a&gt;
  Versioning strategies
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#header-versioning"&gt;
  &lt;/a&gt;
  Header versioning
&lt;/h3&gt;

&lt;p&gt;This type of versioning allows to manage the API version by adding the version number in a custom HTTP Header. It requires that client applications use this header to specify which service version will be consumed.&lt;br&gt;
Besides, it is important to consider server-side cache in case every request was stored, here using a proxy could help to reduce duplicated cache data.&lt;br&gt;
In the next example is showed the creation of a new order using an &lt;em&gt;&lt;em&gt;api-version&lt;/em&gt;&lt;/em&gt; specified in the &lt;em&gt;&lt;em&gt;Custom-Header&lt;/em&gt;&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST https://enterprise.domain.com/orders/123  
Custom-Header: api-version=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#uri-versioning"&gt;
  &lt;/a&gt;
  URI versioning
&lt;/h3&gt;

&lt;p&gt;This technique consist in defining the version of an API in the uniform resource identifier (URI). It makes very clear to know which version will be consumed for client applications. &lt;br&gt;
For instance, choosing a version of a service used to retrieve an order could be done by &lt;em&gt;&lt;em&gt;v1&lt;/em&gt;&lt;/em&gt; or any custom standard. &lt;br&gt;
It is relevant to mention that this implementation makes harder to follow &lt;a href="https://en.wikipedia.org/wiki/HATEOAS"&gt;HATEOS&lt;/a&gt; constraint because all links associated to resources should have defined their correct version number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET https://enterprise.domain.com/v1/orders/123  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#query-string-versioning"&gt;
  &lt;/a&gt;
  Query string versioning
&lt;/h3&gt;

&lt;p&gt;Regarding to this versioning strategy, the version goes in the query string parameter. In that case, it is recommended to establish a default version number when a client misses sending this parameter. The following example uses &lt;em&gt;&lt;em&gt;?version=3&lt;/em&gt;&lt;/em&gt; as query string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET https://enterprise.domain.com/orders/123?version=3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As URI strategy, the previous approach has the same issue related to implementation of HATEOS. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mediatype-versioning"&gt;
  &lt;/a&gt;
  MediaType versioning
&lt;/h3&gt;

&lt;p&gt;Finally, very closed to header versioning practice, MediaType needs to be sent in the &lt;em&gt;&lt;em&gt;Accept Content Type Header&lt;/em&gt;&lt;/em&gt;. Provider is responsible for handling all possible format responses with their defined versions. For example, deleting an order could be performed if version were specified in &lt;em&gt;&lt;em&gt;Accept header&lt;/em&gt;&lt;/em&gt; along format response required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE https://enterprise.domain.com/orders/123 
Accept: application/vnd.enterprise.domain.com.v2+json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Versioning strategy&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;th&gt;Some Considerations&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Header&lt;/td&gt;
&lt;td&gt;Custom HTTP header&lt;/td&gt;
&lt;td&gt;Server-side cache issues&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URI&lt;/td&gt;
&lt;td&gt;Properly as part of URI&lt;/td&gt;
&lt;td&gt;Very simple and clear which version is used&lt;br&gt;Makes harder to implement HATEOAS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Query String&lt;/td&gt;
&lt;td&gt;Query string param of URI&lt;/td&gt;
&lt;td&gt;Should be defined a default version value &lt;br&gt; Makes harder to implement HATEOAS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mediatype&lt;/td&gt;
&lt;td&gt;Accept Http header&lt;/td&gt;
&lt;td&gt;Handle all possible format responses with their defined versions &lt;br&gt; Server-side cache issues&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Microservices have became an extended practice in software architecture, from those implementations have emerged many lesson to learn and for this reason there are several antipatterns and pitfalls to take in consideration. Learning from the experience of the others and having in mind those best practices is crucial to build a strong architecture. Here is important to evaluate the options and choose the best one according to context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Richards, M. (2016). Microservices Antipatterns and Pitfalls. CA: O’Reilly Media.&lt;/p&gt;

&lt;p&gt;Microsoft (2021). RESTful web API design. Retrieve from &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design"&gt;https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design&lt;/a&gt; &lt;/p&gt;

</description>
      <category>microservices</category>
      <category>beginners</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Phishing Campaigns And YouTube Creators</title>
      <author>Meera Mathews</author>
      <pubDate>Tue, 30 Nov 2021 16:11:18 +0000</pubDate>
      <link>https://dev.to/meeramathews/phishing-campaigns-and-youtube-creators-2cg4</link>
      <guid>https://dev.to/meeramathews/phishing-campaigns-and-youtube-creators-2cg4</guid>
      <description>&lt;p&gt;Phishing attacks are one of the most common forms of cyberattacks leveraged by cybercriminals.&lt;/p&gt;

&lt;p&gt;The latest disclosing of Google’s Threat Analysis Group (TAG) has disrupted financially motivated phishing campaigns targeting YouTubers with Cookie Theft malware. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cookie-theft"&gt;
  &lt;/a&gt;
  Cookie theft
&lt;/h2&gt;

&lt;p&gt;Cookie theft occurs when a third party copies unencrypted session data and uses it to impersonate the real user. Cookie theft most often occurs when a user accesses trusted sites over an unprotected or public Wi-Fi network. It occurs when a person mimicks a person’s cookie over the same network, thus a hacker can access sites and perform malicious actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phishing-campaigns-and-youtube-creators"&gt;
  &lt;/a&gt;
  Phishing campaigns and YouTube creators
&lt;/h2&gt;

&lt;p&gt;The phishing campaigns targets many YouTube creators by sending forged business emails to their email which they have provided in their channel. They impersonate as an existing company requesting a video advertisement collaboration. When the link is clicked, it would infect their computer using a variety of malware programs, usually designed to steal cookies and passwords. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;More detailed version of how you can be safe from cookie thefts&lt;br&gt;
 published at: &lt;a href="https://beaglesecurity.com/blog/article/cookie-theft-youtube-phishing-campaign.html"&gt;https://beaglesecurity.com/blog/article/cookie-theft-youtube-phishing-campaign.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
    <item>
      <title>Two years as a Developer Advocate of DotVVM</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Tue, 30 Nov 2021 16:10:39 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/two-years-as-a-developer-advocate-of-dotvvm-4241</link>
      <guid>https://dev.to/esdanielgomez/two-years-as-a-developer-advocate-of-dotvvm-4241</guid>
      <description>&lt;p&gt;We live in extraordinary times, where participating as a community is more important than ever. On this special occasion, I am celebrating with all of you two years of anniversary as Developer Advocate at &lt;a href="https://www.dotvvm.com/blog/69/Meet-Developer-Advocates"&gt;DotVVM&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-developer-advocate"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is a Developer Advocate?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;From my perspective, a Developer Advocate is a person passionate about technology, who loves to live with the community, so that together we can acquire new knowledge, exchange it with everyone, and live incredible experiences along the way. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/biFyxHBHn9D3BcjMVu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/biFyxHBHn9D3BcjMVu/giphy.gif" alt="" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All this knowledge sharing can be carried out through online and in-person events, tutorial articles, hackathons, podcasts, and why not, in social spaces as well. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-participating-as-a-community-is-more-important-than-ever"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why participating as a community is more important than ever?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Thanks to the pandemic, technological development has increased exponentially. Nowadays, all companies seek to implement computer solutions that allow others to know their different products and services, and also to be able to innovate in the process. And in order to be at the forefront of technology, thanks to the communities we can train ourselves (more than before), thanks to the incredible contributions generated from the community itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Kthj74Ji9JaZ2Wwkei/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Kthj74Ji9JaZ2Wwkei/giphy.gif" alt="" width="500" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are no better times like these to acquire new knowledge and develop our potential. By being able to participate in community, we have the incredible opportunity to develop our skills, connect with different people on the planet, and grow professionally. This is something that personally served me a lot since college about 5 years ago, and thanks to that today I can celebrate two years as a Developer Advocate of DotVVM, work as a Software Engineer at the same time, be recognized as &lt;a href="https://mvp.microsoft.com/en-us/PublicProfile/5004317"&gt;Microsoft MVP&lt;/a&gt; and &lt;a href="https://www.c-sharpcorner.com/members/esdanielgomez"&gt;C# Corner MVP&lt;/a&gt;, and most importantly, be able to interact with super amazing people to exchange knowledge and experiences in different online spaces. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FVQSt_ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a08hwgwga0zql70vhp2e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVQSt_ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a08hwgwga0zql70vhp2e.jpg" alt="" width="880" height="372"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can all empower the world around us and achieve amazing things! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dotvvm-virtual-party"&gt;
  &lt;/a&gt;
  &lt;strong&gt;DotVVM Virtual Party&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This year as a Developer Advocate has been super incredible, a year ago I had a hard time being able to give sessions in English (my native language is Spanish), and to celebrate in a big way, I came up with an event with incredible people from all over the world in English, called DotVVM Virtual Party. In this space we were able to exchange knowledge about the latest technological advances for the development of web applications with DotVVM in .NET, tell stories, participate as a community, even have a live concert to live an unforgettable experience. &lt;/p&gt;

&lt;p&gt;Here you can see the recording of the party with its sessions:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9_Z8AxgUuE0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Speaker&lt;/th&gt;
&lt;th&gt;Session&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Tomáš Herceg.&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://youtu.be/oQF5iX_rqME"&gt;The story behind DotVVM&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ọ́laṣubomì Ọ́lọ́runṣọ́la&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://youtu.be/nN3Fl0ciumw"&gt;The framework to create web applications with C# and HTML in .NET&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tomáš Herceg.&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://youtu.be/4o0zk87TtcY"&gt;Blazing Pizza in DotVVM and ASP.NET&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Daniel Gomez.&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://youtu.be/i8lSakvRPcI"&gt;Facial recognition and language translation in our web applications&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#infinite-thanks"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Infinite thanks!!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As a Developer Advocate I think that in DotVVM we are not only a group of users to develop web applications with HTML and C#, but also an incredible community where we can exchange knowledge, and inspire each other to achieve more. &lt;/p&gt;

&lt;p&gt;In this video, you can know my beginnings as a Developer Advocate:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OANvWN9NYY0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you very much to everyone for this wonderful time, to Tomáš Herceg, Igor Drgonec, Abdul Raulf, Ọ́laṣubomì Ọ́lọ́runṣọ́la, the entire Developer Advocates team, and all the people who have made this possible, every reader, every event attendee, and every developer, 253.97k times thanks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xUOxeX5rYwL64AQTx6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xUOxeX5rYwL64AQTx6/giphy.gif" alt="" width="480" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're still in touch on &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/esdanielgomez/"&gt;LinkedIn&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;We see ourselves in more initiatives, and spaces that allow us to achieve incredible things. Together we will achieve more!&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>devrel</category>
      <category>productivity</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>How to prevent an icon from being cut off?</title>
      <author>Satyen Singh</author>
      <pubDate>Tue, 30 Nov 2021 16:04:20 +0000</pubDate>
      <link>https://dev.to/ssingh1997/how-to-prevent-an-icon-from-being-cut-off-5781</link>
      <guid>https://dev.to/ssingh1997/how-to-prevent-an-icon-from-being-cut-off-5781</guid>
      <description>&lt;p&gt;I have created a timeline component in React and I am trying to include an icon on the timeline. However it is being cut off for some reason and is only showing half of the icon on either side. I know it is an overflow issue but I cannot pinpoint it. This is how it currently looks like: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sAJqU4kv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsu08bi2t0vg4rnqqbft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAJqU4kv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsu08bi2t0vg4rnqqbft.png" alt="Image description" width="880" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I add overflow: visible. It does show the full icon but then the timeline section encroaches on to the next section due its length.&lt;/p&gt;

&lt;p&gt;This is what happens I add overflow: visible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4MPqpEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp6xl2uwtm2nzsomcjlv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4MPqpEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp6xl2uwtm2nzsomcjlv.png" alt="Image description" width="880" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it is encroaching on to Contact. &lt;/p&gt;

&lt;p&gt;How can I show the icon fully but also not have the timeline section encroach on to other sections?&lt;/p&gt;

&lt;p&gt;This is what I have so far.&lt;/p&gt;

&lt;p&gt;TimelineItem.jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import {Person, Mail} from "@material-ui/icons"

    const TimelineItem = ({ data }) =&amp;gt; (
        &amp;lt;div className="timeline-item"&amp;gt;
            &amp;lt;div className="timeline-item-content"&amp;gt;
                &amp;lt;span className="tag" style={{ background: data.category.color }}&amp;gt;
                    {data.category.tag}
                &amp;lt;/span&amp;gt;
                &amp;lt;time&amp;gt;{data.date}&amp;lt;/time&amp;gt;
                &amp;lt;p&amp;gt;{data.text}&amp;lt;/p&amp;gt;
                {data.link &amp;amp;&amp;amp; (
                    &amp;lt;a
                        href={data.link.url}
                        target="_blank"
                        rel="noopener noreferrer"
                    &amp;gt;
                        {data.link.text}
                    &amp;lt;/a&amp;gt;
                )}
                &amp;lt;div className="itemContainer"&amp;gt;
                &amp;lt;Mail classname="icon" /&amp;gt;
                &amp;lt;/div&amp;gt;
                {/* &amp;lt;span className="circle"/&amp;gt; */}
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );

    export default TimelineItem;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Timeline.jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   import TimelineData from './TimelineData';
    import TimelineItem from './TimelineItem'
    import './timeline.scss'


    export default function Timeline() {
        return (
            &amp;lt;div className="reactTimeline"&amp;gt;
                &amp;lt;h1&amp;gt;Satyen Singh Timeline&amp;lt;/h1&amp;gt;
                &amp;lt;div className="timeline-container" id="timeline"&amp;gt;
                    {TimelineData.map((data, idx) =&amp;gt; (
                        &amp;lt;TimelineItem data={data} key={idx} /&amp;gt;
                    ))}
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        )
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;timeline.scss&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
//   overflow-x: visible;
//   background-color: white;
}



h1 {
    text-align: center;
}

body {
    // overflow: visible;

//   line-height: 1.5;
}
.timeline-container {
    display: flex;
    flex-direction: column;
    position: relative;
    margin: 40px 0;
    // height: 200vh;
    overflow-x: visible;
    // position: relative;
  }
  .timeline-container::after {
    background-color: #e17b77;
    content: '';
    position: absolute;
    left: calc(50% - 2px);
    width: 4px;
    height: 100%;
    overflow-x: visible;
  }

  .timeline-item {
    display: flex;
    justify-content: flex-end;
    padding-right: 30px;
    position: relative;
    margin: 10px 0;
    width: 50%;
    // overflow-x: visible;
  }
  .timeline-item:nth-child(odd) {
    align-self: flex-end;
    justify-content: flex-start;
    padding-left: 30px;
    padding-right: 0;
    // overflow-x: visible;
  }

  .timeline-item-content {
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
    border-radius: 5px;
    background-color: #fff;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    padding: 15px;
    position: relative;
    width: 400px;
    max-width: 70%;
    text-align: right;
    z-index: 2;
    overflow-x: visible;
  }
  .timeline-item-content::after {
    content: ' ';
    background-color: #fff;
    box-shadow: 1px -1px 1px rgba(0, 0, 0, 0.2);
    position: absolute;
    right: -7.5px;
    top: calc(50% - 7.5px);
    transform: rotate(45deg);
    width: 15px;
    height: 15px;
    // overflow-x: visible
  }
  .timeline-item:nth-child(odd) .timeline-item-content {
    text-align: left;
    align-items: flex-start;
    // overflow-x: visible
  }
  .timeline-item:nth-child(odd) .timeline-item-content::after {
    right: auto;
    left: -7.5px;
    box-shadow: -1px 1px 1px rgba(0, 0, 0, 0.2);
    overflow-x: visible
  }

  .timeline-item-content .tag {
    color: #fff;
    font-size: 12px;
    font-weight: bold;
    top: 5px;
    left: 5px;
    letter-spacing: 1px;
    padding: 5px;
    position: absolute;
    text-transform: uppercase;
    overflow-x: visible;
  }
  .timeline-item:nth-child(odd) .timeline-item-content .tag {
    left: auto;
    right: 5px;
    overflow: visible;
  }
  .timeline-item-content time {
    color: #777;
    font-size: 12px;
    font-weight: bold;
  }
  .timeline-item-content p {
    font-size: 16px;
    line-height: 24px;
    margin: 15px 0;
    max-width: 250px;
  }
  .timeline-item-content a {
    font-size: 14px;
    font-weight: bold;
  }
  .timeline-item-content a::after {
    content: ' ►';
    font-size: 12px;
    overflow: visible;
  }
  .timeline-item-content .itemContainer {
    position: absolute;
    top: calc(50% - 10px);
    right: -40px;
    width: 20px;
    height: 20px;
    z-index: 100;
    overflow-x: visible;
  }
  .timeline-item:nth-child(odd) .timeline-item-content .itemContainer {
    right: auto;
    left: -40px;
    overflow-x: visible;
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have added my entire code in a sandbox for reference: &lt;br&gt;
&lt;a href="https://codesandbox.io/s/vb2we?file=/src/App.jsx"&gt;https://codesandbox.io/s/vb2we?file=/src/App.jsx&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>How we use API's at Arbington.com</title>
      <author>Kalob Taulien</author>
      <pubDate>Tue, 30 Nov 2021 15:49:34 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/how-we-use-apis-at-arbingtoncom-3n5i</link>
      <guid>https://dev.to/kalobtaulien/how-we-use-apis-at-arbingtoncom-3n5i</guid>
      <description>&lt;p&gt;Let's talk about APIs. This is a subject I feel like every developer needs to know about. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this article we'll be talking about the API's we use at &lt;a href="https://arbington.com"&gt;Arbington.com&lt;/a&gt;, why we use them, and how they make our lives easier.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-on-the-menu"&gt;
  &lt;/a&gt;
  What's on the menu?
&lt;/h2&gt;

&lt;p&gt;Here's a list of API's we'll talk about in this article. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stripe for receiving payments&lt;/li&gt;
&lt;li&gt;MailChimp and Sendy.co for sending emails&lt;/li&gt;
&lt;li&gt;Airtable for slicing and dicing data and keeping track of tasks&lt;/li&gt;
&lt;li&gt;Dropbox for importing videos from server to server to bypass slow user upload speeds &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;boto3&lt;/code&gt; for AWS S3 management. &lt;/li&gt;
&lt;li&gt;CloudFlare for video streaming&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#but-first-what-is-an-api"&gt;
  &lt;/a&gt;
  But first, what is an API?
&lt;/h3&gt;

&lt;p&gt;I'm going to avoid telling you what it stands for, because it doesn't matter. &lt;/p&gt;

&lt;p&gt;What does matter is how they work and why they exist. &lt;/p&gt;

&lt;p&gt;So.. computers have lots of different programming languages and different ways to communicate with each other. You're likely reading this article on dev.to using a standard browser, which uses the HTTP protocol to send and receive data. (That's an oversimplification) &lt;/p&gt;

&lt;p&gt;With all that variation from computer to computer comes the need to be able to talk to each other, make requests from other computers, and ask them to do things for us. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-you-need-to-know"&gt;
  &lt;/a&gt;
  What you need to know.
&lt;/h3&gt;

&lt;p&gt;API's have different ways to make requests. The most common for us is a RESTful API. That means we make explicit requests to a certain computer (called an endpoint) and sometimes pass data to that endpoint to guide the other computer in its task. &lt;/p&gt;

&lt;p&gt;These often look like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt; requests. They GET information and are typically read-only. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST&lt;/code&gt; requests. They SEND information in other to create some data on another computer &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE&lt;/code&gt; requests. They DELETE information on another computer. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT/PATCH&lt;/code&gt; requests. They make updates to existing information on another computer. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a rad 40 minute course that goes into more depth about RESTful APIs on Arbington. &lt;a href="https://arbington.com/courses/restful-apis-and-how-to-understand-apis/"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#payments-with-stripe"&gt;
  &lt;/a&gt;
  Payments with Stripe
&lt;/h3&gt;

&lt;p&gt;Hands down the best API I've ever used. It's simple, supports lots of languages and most importantly the documentation is easy to ready and search through. &lt;/p&gt;

&lt;p&gt;While they offer a bunch of no-code solutions, we prefer to get our hands dirty and handle payments directly. By getting in there and using the Stripe API, we can create subscriptions on the fly when a user does a thing (clicks a page or fills out a form, for instance), and modify existing prices with coupon codes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stripe makes life better because...&lt;/strong&gt;&lt;br&gt;
We can accept one-time payments and monthly subscriptions with just a few lines of code. And it's secure! No storing credit card information on our servers and that's great because it's one less thing we need to deal with. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#email-with-mailchimp"&gt;
  &lt;/a&gt;
  Email with Mailchimp
&lt;/h3&gt;

&lt;p&gt;We aren't using this A LOT but we've used it a handful of times to take lists of users that have opted in to our mailing list, and put them all into a Mailchimp list. &lt;/p&gt;

&lt;p&gt;We do the same with Sendy.co. We also host our own campaign management system called Sendy - it uses Amazon SES and gives us 50,000 free emails per day. It comes with a very light endpoint, but not API client - so we wrote our own using Python and the &lt;code&gt;requests&lt;/code&gt; Python package. &lt;/p&gt;

&lt;p&gt;If you've ever gotten an email from us, chances are you went through this API process to send data from our website to our email sending website where the team can write dedicated emails and updates to you. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mailchimp and Sendy.co makes life better because...&lt;/strong&gt;&lt;br&gt;
We can easily send emails to people expecting to hear from us. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-analysis-and-collection-with-airtable"&gt;
  &lt;/a&gt;
  Data analysis and collection with Airtable
&lt;/h3&gt;

&lt;p&gt;My second favorite tool: Airtable. We use &lt;a href="https://airtable-python-wrapper.readthedocs.io/en/airtable-python-wrapper/"&gt;airtable-python-wrapper&lt;/a&gt; to make basic API requests to send data to Airtable for internal use (like tracking courses) and occasionally to pull data down from Airtable. &lt;/p&gt;

&lt;p&gt;In the last post I talked about scraping 10s of thousands of data points and putting them in Airtable. Well, occasionally we need to pull that data out - so we use their API for that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Airtable makes life better because...&lt;/strong&gt;&lt;br&gt;
It's easier than Google Sheets, has a nice API to work with huge amounts of data, and it's easier to work with the data once it's in Airtable than using Excel. (But it's pricy for big teams with big data) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#files-with-dropbox"&gt;
  &lt;/a&gt;
  Files with Dropbox
&lt;/h3&gt;

&lt;p&gt;My third favorite tool, but frankly their API is overly complicated. It's ultra powerful, but not very friendly for devs that are new to the Dropbox API. &lt;/p&gt;

&lt;p&gt;We use this to move files to and from servers. &lt;/p&gt;

&lt;p&gt;Have you ever had to upload a video and it took AGES to finish? &lt;/p&gt;

&lt;p&gt;We have also run into that. And it sucks. It's a lot of waiting around and slowing down your internet so you can't do very much while it's happening. &lt;/p&gt;

&lt;p&gt;Thankfully I have gig internet - aka super fast lightning power mode internet - so I can upload insanely fast. And I put everything into Dropbox. &lt;/p&gt;

&lt;p&gt;Using the Dropbox API my team can click through the folders (on our site, not on Dropbox.com) and import entire folders worth of content. &lt;/p&gt;

&lt;p&gt;It creates a unique download link for each video and then a background server can download the file and upload it to wherever it needs to go. In this case, it goes to S3 or CloudFlare. More on those in just a second. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dropbox makes life better because...&lt;/strong&gt;&lt;br&gt;
It lets us move large video files from one server to another without human interference. It makes slow uploads a non-problem for us. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-files-with-aws-s3"&gt;
  &lt;/a&gt;
  More files with AWS S3
&lt;/h3&gt;

&lt;p&gt;Ok, I'm not the biggest fan of S3. Frankly, it's expensive compared to other solutions. But it's also one of the oldest unlimited object stores out there and has a decent API. We use &lt;code&gt;boto3&lt;/code&gt; (a Python package) to upload files to S3, and to securely download them too. &lt;/p&gt;

&lt;p&gt;Once a Dropbox file is put into S3, we get a unique URL for video. Then we use CloudFlare Stream's API to copy the video to CloudFlare Stream, where they'll transcode the video and store it for us. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S3 makes life better because...&lt;/strong&gt;&lt;br&gt;
We can store unlimited files in there and securely pull out files when we need them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-streaming-with-cloudflare-stream"&gt;
  &lt;/a&gt;
  Video streaming with CloudFlare Stream
&lt;/h3&gt;

&lt;p&gt;CloudFlare Stream is how we host our videos. It's powerful, relatively inexpensive and handles a lot of video encoding pain points we didn't want to handle in the early days. &lt;/p&gt;

&lt;p&gt;And it comes with a "copy" feature - pass it a URL and it'll download the video. So we pass it an S3 or Dropbox URL and it magically appears in CloudFlare Stream. &lt;/p&gt;

&lt;p&gt;We use plain Python and the &lt;code&gt;requests&lt;/code&gt; library to make this happen. &lt;/p&gt;

&lt;p&gt;Then we have a background server polling CloudFlare for updates to tell us when a video is done encoding and it's ready for playback. (Or if there was an error) &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CloudFlare makes life better because...&lt;/strong&gt;&lt;br&gt;
Honestly, I'm a HUGE fan of CloudFlare. Use them for as much as you can! But CloudFlare Stream makes video encoding super easy and we don't have to worry about a custom video player.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internal-apis"&gt;
  &lt;/a&gt;
  Internal APIs
&lt;/h3&gt;

&lt;p&gt;We have a lot of endpoints that can only be accessed through Ajax/Fetch requests using JavaScript. These use RESTful API methods: GET to get data, POST to create data, and DELETE to delete data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internal APIs make life better because...&lt;/strong&gt;&lt;br&gt;
We can use JavaScript to change/add/delete data without refreshing the page. Some pages are heavy with assets and queries, and this lets the user take an action without reloading the page. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#master-apis"&gt;
  &lt;/a&gt;
  Master APIs
&lt;/h2&gt;

&lt;p&gt;I actually have a best selling course to teach you about RESTful APIs. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://arbington.com/courses/restful-apis-and-how-to-understand-apis/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYGHtKnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9q6v0ypu79i9od0erxxb.jpg" alt="Restful API crash course" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-all-the-things"&gt;
  &lt;/a&gt;
  Learn all the things!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://arbington.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKoazo5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mr8ujryc524ygu92qbcz.png" alt="Arbington.com" width="880" height="185"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;APIs are important to learn, but so is learning a solid programming language like Python or JavaScript (or Java, C, C#, etc). &lt;/p&gt;

&lt;p&gt;Whichever programming language you think you should learn, take a look for those courses on &lt;a href="https://arbington.com/categories/subcategory/web-development/"&gt;Arbington.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#up-next"&gt;
  &lt;/a&gt;
  Up next...
&lt;/h2&gt;

&lt;p&gt;Let's talk about handling payments with Stripe, and why you should 100% use Stripe instead of any other service. &lt;/p&gt;

</description>
      <category>startup</category>
      <category>api</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Full-Stack Monitoring &amp; Incident Response Tendencies 2021</title>
      <author>Sonia Belokur</author>
      <pubDate>Tue, 30 Nov 2021 15:48:33 +0000</pubDate>
      <link>https://dev.to/soniabelokur/full-stack-monitoring-incident-response-tendencies-2021-4jm4</link>
      <guid>https://dev.to/soniabelokur/full-stack-monitoring-incident-response-tendencies-2021-4jm4</guid>
      <description>&lt;p&gt;While figures are persuasive and experiences might be useful (and sometimes painful) - trends might reveal some unexpected facts. We have put them together in a human-readable format to explain the main tendencies in the #monitoring and #incidentresponse niches.&lt;/p&gt;

&lt;p&gt;What are the most frequently used monitoring approaches? What do DevOps struggle with? Why is full-stack monitoring worth investing in?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://insightcat.com/"&gt;InsightCat&lt;/a&gt; has analyzed the survey data from technical experts, the surveys on third-party sources and Social Media, and, of course, our own experience from day-to-day interaction with businesses worldwide, from SMBs to Enterprises.&lt;/p&gt;

&lt;p&gt;There were 100+ respondents in this study, incl. tech experts and managers. The third-party resources are listed below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://victorops.com/incident.../six-ways-reduce-downtime/"&gt;https://victorops.com/incident.../six-ways-reduce-downtime/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wikibon.com/breaking-analysis-cutting-noise-full.../"&gt;https://wikibon.com/breaking-analysis-cutting-noise-full.../&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Learn more about full-stack monitoring and incident response tendencies in 2021 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/insightcat"&gt;https://www.facebook.com/insightcat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--23eVP_zU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5dr8h5v9fubxinonnbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--23eVP_zU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5dr8h5v9fubxinonnbf.png" alt="Image description" width="880" height="816"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yns-Nw1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siu3hojqqfgaxq9x0zsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yns-Nw1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siu3hojqqfgaxq9x0zsy.png" alt="Image description" width="880" height="816"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KfYNL8ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl4w7otplpkfwbxo3jwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KfYNL8ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl4w7otplpkfwbxo3jwg.png" alt="Image description" width="880" height="816"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QoMhezID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9goqg2eyuqzyhnn30ojo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QoMhezID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9goqg2eyuqzyhnn30ojo.png" alt="Image description" width="880" height="816"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ndttp8aM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1401z85bj9lmuz0nzrum.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ndttp8aM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1401z85bj9lmuz0nzrum.png" alt="Image description" width="880" height="816"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t4ouyyRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygdf1c3x48onw88hsqtm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t4ouyyRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygdf1c3x48onw88hsqtm.png" alt="Image description" width="880" height="816"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>devops</category>
      <category>performance</category>
    </item>
    <item>
      <title>Flutter Alert Dialog with Close Button </title>
      <author>rrtutors</author>
      <pubDate>Tue, 30 Nov 2021 15:45:24 +0000</pubDate>
      <link>https://dev.to/rrtutors/flutter-alert-dialog-with-close-button-23d0</link>
      <guid>https://dev.to/rrtutors/flutter-alert-dialog-with-close-button-23d0</guid>
      <description>&lt;p&gt;What is an Alert Dialog?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rrtutors.com/tutorials/alert-dialog-with-close-button-flutter"&gt;Flutter Alert Dialog&lt;/a&gt; is a Popup Box will use to show small messages on Current window. This Alert Box can be of Warning/Info/Network alerts...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DialogButton&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt; &lt;span class="n"&gt;highlightColor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt; &lt;span class="n"&gt;splashColor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Gradient&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;BorderRadius&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Function&lt;/span&gt; &lt;span class="n"&gt;onPressed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;BoxBorder&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;EdgeInsets&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;EdgeInsets&lt;/span&gt; &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;/// DialogButton constructor&lt;/span&gt;
  &lt;span class="nc"&gt;DialogButton&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="nc"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;child&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;40.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;highlightColor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;splashColor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gradient&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;padding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nc"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;left:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;right:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;margin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nc"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nd"&gt;@required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onPressed&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;/// Creates alert buttons based on constructor params&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="nc"&gt;Widget&lt;/span&gt; &lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;margin:&lt;/span&gt; &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="nc"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nc"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;accentColor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;gradient:&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nc"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nc"&gt;Border&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="nc"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="nc"&gt;Material&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="nc"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="nc"&gt;InkWell&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;highlightColor:&lt;/span&gt; &lt;span class="n"&gt;highlightColor&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nc"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;highlightColor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;splashColor:&lt;/span&gt; &lt;span class="n"&gt;splashColor&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nc"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;splashColor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="n"&gt;onPressed&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="nc"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read More about Flutter Alert Dialog with Close Button in the below link&lt;br&gt;
&lt;a href="https://rrtutors.com/tutorials/alert-dialog-with-close-button-flutter"&gt;Flutter alert Dialog with close button&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QY0GL5ic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/Alert-dialog-with-close-button.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QY0GL5ic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/Alert-dialog-with-close-button.png" alt="Flutter alert dialog " width="720" height="1280"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>android</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Asciinema actions</title>
      <author>Oscar Nevárez</author>
      <pubDate>Tue, 30 Nov 2021 15:42:56 +0000</pubDate>
      <link>https://dev.to/insan3/asciinema-actions-bga</link>
      <guid>https://dev.to/insan3/asciinema-actions-bga</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bOZAtkZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja0okslju77h2jboame0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bOZAtkZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja0okslju77h2jboame0.png" alt="Asciinema+Markdown+GithubActions=AWESOMENESS" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;So I had this idea of turning code blocks within markdown files  gifs. That's what this Github Action does :D !&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#introducing-action"&gt;
  &lt;/a&gt;
  Introducing action
&lt;/h4&gt;

&lt;p&gt;Turns this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#Here we go!&lt;/span&gt;
npm i &lt;span class="nt"&gt;-g&lt;/span&gt; @org/awesome-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;into this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tzgVrdX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/oscarnevarezleal/awesome-project/raw/main/.asciicast/block-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tzgVrdX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/oscarnevarezleal/awesome-project/raw/main/.asciicast/block-1.gif" alt="a block of code transformed into a gif image" width="590" height="59"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h4&gt;

&lt;p&gt;There are actually two actions working here.&lt;/p&gt;

&lt;p&gt;1) &lt;a href="https://github.com/oscarnevarezleal/asccinema/actions/asccicast"&gt;asccicast&lt;/a&gt; parses a mardown file and produces description files that helps to traverse its content.&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://github.com/oscarnevarezleal/asccinema/actions/asciicast2gif"&gt;asciicast2gif&lt;/a&gt; use json files produced by &lt;a href="https://github.com/oscarnevarezleal/asccinema/actions/asccicast"&gt;asccicast&lt;/a&gt; and turn them into GIF files. this action also accepts JSON files from &lt;a href="https://asciinema.org/"&gt;asciinema.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a online &lt;a href="https://github.com/oscarnevarezleal/awesome-project"&gt;demo&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ci&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dev'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# This workflow contains a single job called "build"&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="c1"&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Asccinema generation&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;asccinema&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;oscarnevarezleal/asciinema-actions/actions/asccicast@dev&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;generate -s README.template.md -o README.md&lt;/span&gt;
          &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.asciinema.json&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Theme block &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;oscarnevarezleal/asciinema-actions/actions/asciicast2gif@dev&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tango&lt;/span&gt;
          &lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
          &lt;span class="na"&gt;scale&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;block-0.*"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Theme block &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;oscarnevarezleal/asciinema-actions/actions/asciicast2gif@dev&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;solarized-dark&lt;/span&gt;
          &lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
          &lt;span class="na"&gt;scale&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;block-1.*"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Theme block &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;oscarnevarezleal/asciinema-actions/actions/asciicast2gif@dev&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monokai&lt;/span&gt;
          &lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
          &lt;span class="na"&gt;scale&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;block-2.*"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stefanzweifel/git-auto-commit-action@v4&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# Optional, but recommended&lt;/span&gt;
          &lt;span class="c1"&gt;# Defaults to "Apply automatic changes"&lt;/span&gt;
          &lt;span class="na"&gt;commit_message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Automated Change&lt;/span&gt;

          &lt;span class="c1"&gt;# Optional. Used by `git-commit`.&lt;/span&gt;
          &lt;span class="c1"&gt;# See https://git-scm.com/docs/git-commit#_options&lt;/span&gt;
          &lt;span class="na"&gt;commit_options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;--no-verify&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;--signoff'&lt;/span&gt;

          &lt;span class="c1"&gt;# Optional glob pattern of files which should be added to the commit&lt;/span&gt;
          &lt;span class="c1"&gt;# Defaults to all (.)&lt;/span&gt;
          &lt;span class="c1"&gt;# See the `pathspec`-documentation for git&lt;/span&gt;
          &lt;span class="c1"&gt;# - https://git-scm.com/docs/git-add#Documentation/git-add.txt-ltpathspecgt82308203&lt;/span&gt;
          &lt;span class="c1"&gt;# - https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec&lt;/span&gt;
          &lt;span class="na"&gt;file_pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.asciicast/*.gif&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*.md"&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;My recomended workflow is to keep a markdown template ( the one containing the code fences ) e.g &lt;code&gt;README.template.md&lt;/code&gt; so the final process results in a modified version of that file &amp;gt; &lt;code&gt;README.md&lt;/code&gt;. Keeping both files in the repository will guarantee consistency and prevent any content missmatch.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves / Wacky Wildcards&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/oscarnevarezleal"&gt;
        oscarnevarezleal
      &lt;/a&gt; / &lt;a href="https://github.com/oscarnevarezleal/asciinema-actions"&gt;
        asciinema-actions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
asccinema-action&lt;/h1&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/oscarnevarezleal/asciinema-actions"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://asciinema.org/"&gt;https://asciinema.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>10 Things You Didn’t Know You Could Do With Javascript</title>
      <author>Saji Wang</author>
      <pubDate>Tue, 30 Nov 2021 15:35:49 +0000</pubDate>
      <link>https://dev.to/codesphere/10-things-you-didnt-know-you-could-do-with-javascript-3k2l</link>
      <guid>https://dev.to/codesphere/10-things-you-didnt-know-you-could-do-with-javascript-3k2l</guid>
      <description>&lt;p&gt;This Thanksgiving season, I'm especially grateful for Javascript. Since its announcement in December 1995(Javascript's birthday is actually this week!), it has brought life to the web.&lt;/p&gt;

&lt;p&gt;Long gone, however, are the days where all Javascript did was spice up some HTML pages. Today, virtually anything can be done with Javascript. Let's highlight some of the amazing things that you may not have known are possible with JS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-native-desktop-apps-with-electron"&gt;
  &lt;/a&gt;
  1. Native Desktop Apps with Electron
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUDBQ-Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydn4burt96todsmmjvk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUDBQ-Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydn4burt96todsmmjvk5.png" alt="electron logo" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start off, plenty of offline, native desktop apps are actually built with Javascript, usually with Electron or the Chromium Embedded Framework. In fact, some of your favorite desktop applications, including VScode, Spotify, and Slack, are all built using Javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-machine-learning"&gt;
  &lt;/a&gt;
  2. Machine Learning
&lt;/h3&gt;

&lt;p&gt;While Javascript and Machine Learning may not be two things that are often put together in the same sentence. Alas, many in the Machine Learning community have found a home in Javascript.&lt;/p&gt;

&lt;p&gt;Libraries like Tensorflow.js allow people to easily create, train, and use machine learning models all in Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DU9cMrVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcpkuxlzcc2b7nmck5uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DU9cMrVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcpkuxlzcc2b7nmck5uf.png" alt="tensorflowjs logo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-vr-websites"&gt;
  &lt;/a&gt;
  3. VR Websites
&lt;/h3&gt;

&lt;p&gt;If you've been keeping up with our blog, you'll know about Aframe.io, one of many libraries that now allow you to build VR websites with the power of Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zs1-7V_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ori9a179srvbq837c348.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zs1-7V_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ori9a179srvbq837c348.png" alt="vr gif" width="880" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-mobile-development"&gt;
  &lt;/a&gt;
  4. Mobile Development
&lt;/h3&gt;

&lt;p&gt;Okay, this one may not be that surprising to many of you. Regardless, frameworks like React Native allow you to build native mobile apps all with Javascript. React Native has grown massively in popularity over the past couple of years, primarily because it's empowered those from a Web Development background to enter the world of app development.&lt;/p&gt;

&lt;p&gt;Interested in learning how to get started with React Native? Let us know down below and we'll get to work on a tutorial!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-quantum-computing"&gt;
  &lt;/a&gt;
  5. Quantum Computing
&lt;/h3&gt;

&lt;p&gt;Yes - you can simulate quantum computers in Javascript - well sort of. Obviously running Javascript on your Macbook isn't going to suddenly give you the power of a Quantum computer.&lt;/p&gt;

&lt;p&gt;Nevertheless, if you're looking to play around with Quantum circuits and get your hands dirty with Quantum Computing look no further than Q.js&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atUp_flQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us2bln6xu0drd5bz2sy6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atUp_flQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us2bln6xu0drd5bz2sy6.png" alt="quantum logo" width="300" height="80"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-trade-stocks"&gt;
  &lt;/a&gt;
  6. Trade Stocks
&lt;/h3&gt;

&lt;p&gt;While Javascript is rarely used professionally (firms usually opt for lower-level languages which are faster), Javascript can in fact be used to trade stocks.&lt;br&gt;
In fact, we wrote an article showing you just how easy it is to write trading algorithms using APIs. You can check out an article we wrote using Python here, but the exact same API can be used with Javascript!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-game-development"&gt;
  &lt;/a&gt;
  7. Game Development
&lt;/h3&gt;

&lt;p&gt;Though Browser Games certainly don't have the prominence they once had, they are far from dead. There are loads of Javascript libraries that you can use to create complex games that run right out of the browser. Some of our personal favorites are MelonJS and ImpactJS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFK3lBkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hggif7p1oo9wrfkxgqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFK3lBkc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hggif7p1oo9wrfkxgqz.png" alt="melonjs logo" width="880" height="488"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-smart-watch-w-banglejs"&gt;
  &lt;/a&gt;
  8. Smart Watch w/ Bangle.js
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dV7wUhtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88eqzrb7ghw5bphzi6ca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dV7wUhtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88eqzrb7ghw5bphzi6ca.png" alt="smart watch with banglejs" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bangle is a programmable, open-source, smartwatch, running completely on Javascript. BangleJS was created by programmer Gordon Williams, who took an off-the-shelf smartwatch, reverse engineered it, and installed a javascript interpreter to create the first batch of BangleJS smartwatches.&lt;/p&gt;

&lt;p&gt;In fact, the Smart Watch runs on Espruino, an open-source Javascript interpreter for microcontrollers also created by Williams. Using Espruino, you can really use Javascript to get many electronics running Javascript!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-building-dapps-and-smart-contracts-for-ethereum"&gt;
  &lt;/a&gt;
  9. Building dApps and Smart Contracts for Ethereum
&lt;/h3&gt;

&lt;p&gt;While we spoke a number of weeks ago about building Decentralized Databases with GunJS, Javascript can also be used to directly interact with the Ethereum Blockchain. This means that you can make Ethereum dApps and Smart Contacts with libraries like Ethers.js&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-a-web-ide"&gt;
  &lt;/a&gt;
  10. A Web IDE
&lt;/h3&gt;

&lt;p&gt;Finally, at Codesphere, we're using Javascript (mostly Typescript) to build an all-in-one Web IDE and Cloud Platform. Using Web Technologies, we're able to bring the full power of the cloud to any person with a working browser. &lt;a href="https://link.codesphere.com/GM"&gt;Give us a try&lt;/a&gt; and let us know what you think!&lt;/p&gt;

&lt;p&gt;What unconventional Javascript application did we leave out? Let us know down below! Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>machinelearning</category>
      <category>webdev</category>
      <category>gamedev</category>
    </item>
  </channel>
</rss>
