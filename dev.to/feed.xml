<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to analyze top command like a pro?</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Mon, 28 Jun 2021 14:33:18 +0000</pubDate>
      <link>https://dev.to/qainsights/how-to-analyze-top-command-like-a-pro-4j28</link>
      <guid>https://dev.to/qainsights/how-to-analyze-top-command-like-a-pro-4j28</guid>
      <description>&lt;p&gt;In this blog article, we are going to see how to analyze &lt;code&gt;top&lt;/code&gt; command like a pro. I am learning Linux extensively from past couple of years which is helping me to learn more several Linux based tools. One of the frequent command is &lt;code&gt;top&lt;/code&gt; among system administratots and engineers.&lt;/p&gt;

&lt;h2&gt;What is &lt;code&gt;top&lt;/code&gt; command?&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;top&lt;/code&gt; command displays the Linux processes on the host. Here is the definition from the manual:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The top program provides a dynamic real-time view of a running system. It can display system summary information as well as a list of processes&lt;br&gt;or threads currently being managed by the Linux kernel. The types of system summary information shown and the types, order and size of information displayed for processes are all user configurable and that configuration can be made persistent across restarts.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Engineers use &lt;code&gt;top&lt;/code&gt; mostly to view the list of processes, its CPU and memory usage and other details.&lt;/p&gt;

&lt;p&gt;Here is the screenshot of my Raspberry Pi processes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/06/image-1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OyTA3GKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/06/image-1-1024x724.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It displays the processes in a table format with several columns as shown above.&lt;/p&gt;

&lt;p&gt;You can type &lt;code&gt;h&lt;/code&gt; to view the shortcuts which will help you to navigate. E.g. if you type &lt;code&gt;m&lt;/code&gt; which will display the memory info at the top.&lt;/p&gt;

&lt;h2&gt;How to analyze top command like a pro?&lt;/h2&gt;

&lt;p&gt;If you are getting started with Linux and would like to analyze the top command, going thru in the table view might be overwhelming. &lt;/p&gt;

&lt;p&gt;I will share you the cool tool from yCrash which will help you to deep-dive into your &lt;code&gt;top&lt;/code&gt; metrics.&lt;/p&gt;

&lt;p&gt;Copy your &lt;code&gt;top&lt;/code&gt; command output to the clipboard and launch https://ycrash.io/yc-top-analyzer.jsp&lt;/p&gt;

&lt;p&gt;Paste the &lt;code&gt;top&lt;/code&gt; command output and then click on &lt;code&gt;Analyze&lt;/code&gt; button as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/06/image-3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vRnGJnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/06/image-3-1024x605.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click on &lt;code&gt;Analyze&lt;/code&gt;, &lt;code&gt;top command Analyzer&lt;/code&gt; will give you a unique URL like this https://ycrash.io/yc-report-top-public.jsp?ou=yc-public&amp;amp;de=1.1.1.1&amp;amp;ts=2021-06-26T20-28-2&amp;amp;app=top-app&lt;/p&gt;

&lt;p&gt;The tool will analyze the metrics and present it a neat format. In my case, I have got two issues:  &lt;strong&gt;Free memory is less than 5% of total memory&lt;/strong&gt; and  &lt;strong&gt;Used swap memory is more than 10% of total memory&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/06/image-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9mLU06sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/06/image-4-1024x519.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;top&lt;/code&gt; report will display the pie chart, bar chart, and a tabular view of the processes. There are relevant help links for each panel which will help you to learn further.&lt;/p&gt;

&lt;p&gt;As you see, analyzing the &lt;code&gt;top&lt;/code&gt; command output is quick and easy using this cool tool. Please give it a try and let me know if you have any questions.&lt;/p&gt;

&lt;p&gt;Here is a tip, if you want something fancy you can install &lt;code&gt;htop&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/06/image-6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y_LmuV9R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/06/image-6-1024x485.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>performance</category>
      <category>tutorial</category>
      <category>systems</category>
    </item>
    <item>
      <title>Productivity with styled-components</title>
      <author>Diego Silva</author>
      <pubDate>Mon, 28 Jun 2021 14:32:29 +0000</pubDate>
      <link>https://dev.to/coderamos/productivity-with-styled-components-237h</link>
      <guid>https://dev.to/coderamos/productivity-with-styled-components-237h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#two-best-practices-to-improve-your-project-with-this-phenomenal-library"&gt;
  &lt;/a&gt;
  Two best practices to improve your project with this phenomenal library
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;styled-components&lt;/strong&gt; is a library for styling your application through JavaScript and is mainly used in the styling of React and React Native projects.&lt;/p&gt;

&lt;p&gt;When we think about styling something, we should also be thinking about how to organize these styles, and for those just starting out in the frontend development world, these two practices are fundamental to writing and maintaining good code:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-isolated-styles"&gt;
  &lt;/a&gt;
  Create isolated styles
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Whenever possible, create isolated styles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Through this practice we have access to your component styles faster and this generates more productivity and makes maintaining your styles much easier.&lt;/p&gt;

&lt;p&gt;A widely used practice in the market is to create the styles file together with the main file (&lt;code&gt;index.js&lt;/code&gt;) of your component / page.&lt;/p&gt;

&lt;p&gt;Naming your file &lt;code&gt;styles.js&lt;/code&gt; or &lt;code&gt;styled.js&lt;/code&gt; is also good practice. These two names are used a lot.&lt;/p&gt;

&lt;p&gt;As an example, this is the structure of the style files I used in a template for React, on my GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HyN5gUEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4lt44meb4ywjrbpi6zd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HyN5gUEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4lt44meb4ywjrbpi6zd.png" alt="files structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-semantic-styles"&gt;
  &lt;/a&gt;
  Create semantic styles
&lt;/h3&gt;

&lt;p&gt;Although styled-components is well known and adopted, it is common to see many grouping components that should have semantic scope being created as a simple &lt;code&gt;div&lt;/code&gt;. It is extremely important that we do not forget to use tags correctly and consciously.&lt;/p&gt;

&lt;p&gt;This is an example of how we create and export a styled component with styled-components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponentContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can access all other tags as styled properties, like: &lt;code&gt;styled.header&lt;/code&gt;, &lt;code&gt;styled.nav&lt;/code&gt;, &lt;code&gt;styled.section&lt;/code&gt;, &lt;code&gt;styled.article&lt;/code&gt;, &lt;code&gt;styled.aside&lt;/code&gt;, &lt;code&gt;styled.footer&lt;/code&gt;,&lt;br&gt;
among others.&lt;/p&gt;




&lt;p&gt;You can access the template mentioned above by clicking &lt;a href="https://github.com/coderamos/template-reactjs"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Comment there what you think of this file structure :)&lt;/p&gt;




&lt;p&gt;See this post in &lt;strong&gt;portuguese&lt;/strong&gt; directly on my &lt;a href="https://coderamos.vercel.app/produtividade-com-styled-components/"&gt;blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Easy database access with Apache DeltaSpike</title>
      <author>Alejandro Duarte</author>
      <pubDate>Mon, 28 Jun 2021 14:29:01 +0000</pubDate>
      <link>https://dev.to/alejandro_du/easy-database-access-with-apache-deltaspike-4kpa</link>
      <guid>https://dev.to/alejandro_du/easy-database-access-with-apache-deltaspike-4kpa</guid>
      <description>&lt;p&gt;&lt;a href="https://deltaspike.apache.org/"&gt;Apache DeltaSpike&lt;/a&gt; is a project that includes several modules for increased productivity when developing Java applications that use CDI (from the &lt;a href="https://jakarta.ee"&gt;Jakarta EE&lt;/a&gt; specifications). This tutorial shows how to set up a MySQL database, define a connection resource, configure JPA, and use the Data module of Apache DeltaSpike to access the database.&lt;/p&gt;

&lt;p&gt;You can watch a version of this tutorial on &lt;a href="https://www.youtube.com/watch?v=7JcVXpWcdvw"&gt;YouTube&lt;/a&gt; if you prefer:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7JcVXpWcdvw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-database"&gt;
  &lt;/a&gt;
  Setting up the database
&lt;/h2&gt;

&lt;p&gt;We need something to play with, so let's connect to MySQL: and create a database with a table in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;

&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt; &lt;span class="n"&gt;jakartaee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;jakartaee&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;birth_date&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also insert some sample data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;birth_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"test1@test.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"2000-10-15"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;birth_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"test2@test.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"2001-11-16"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;birth_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;"test3@test.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"2002-12-17"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-connection-in-the-server"&gt;
  &lt;/a&gt;
  Setting up the connection in the server
&lt;/h2&gt;

&lt;p&gt;When you develop a Jakarta EE (or Java EE) application you deploy it to a compatible server. There are many Jakarta EE implementations available. For example Eclipse GlassFish, Oracle WebLogic Server, WildFly, Apache TomEE, Payara Server, IBM WebSphere Liberty, JBoss Enterprise Application Platform, and others. Configurations are done in different ways depending on the server you use. This includes database connections.&lt;/p&gt;

&lt;p&gt;In Jakarta EE compatible implementations (or servers) you can define resources such as database connection pools using graphical user interfaces or configuration files. This allows you to decouple the resource definition from the application code, which makes sense, for example, if you realize that you most likely use different databases in your development machine and the production environment. In this tutorial, we'll use Apache TomeEE as a Maven plugin. This is useful during development because you don't have to manually download and install the server making it easier to set up the development environment.&lt;/p&gt;

&lt;p&gt;You can add the Apache TomEE Maven plugin in  section of the &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    ...
    &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.tomee.maven&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tomee-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.0.7&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;context&amp;gt;&lt;/span&gt;ROOT&lt;span class="nt"&gt;&amp;lt;/context&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;libs&amp;gt;&lt;/span&gt;mysql:mysql-connector-java:8.0.25&lt;span class="nt"&gt;&amp;lt;/libs&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we also add the MySQL JDBC driver dependency to the configuration of the TomEE Maven plugin.&lt;/p&gt;

&lt;p&gt;To define the connection resource for the TomEE server, create a new &lt;code&gt;tomee.xml&lt;/code&gt; configuration file inside the &lt;code&gt;src/main/tomee/conf/&lt;/code&gt; directory. Place the following content in the new file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;tomee&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Resource&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"mysqlResource"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"DataSource"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        JdbcDriver com.mysql.jdbc.Driver
        JdbcUrl jdbc:mysql://localhost/jakartaee
        UserName root
        Password password
    &lt;span class="nt"&gt;&amp;lt;/Resource&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tomee&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the username and password accordingly.&lt;/p&gt;

&lt;p&gt;With all this in place, the server is able to create a connection pool that can be referenced by name (&lt;code&gt;mysqlResource&lt;/code&gt;) in the application code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#referencing-the-database-resource-from-the-application-code"&gt;
  &lt;/a&gt;
  Referencing the database resource from the application code
&lt;/h2&gt;

&lt;p&gt;The first thing we need is a Persistence Unit, which defines a collection of classes (or entities) managed by an &lt;code&gt;EntityManger&lt;/code&gt; (that we'll create later), and a data source (the database connection). Create a new &lt;code&gt;persistence.xml&lt;/code&gt; file in the &lt;code&gt;src/main/resource/META-INF/&lt;/code&gt; directory and add the following to the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;persistence&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://java.sun.com/xml/ns/persistence"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;persistence-unit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"jakarataee-pu"&lt;/span&gt; &lt;span class="na"&gt;transaction-type=&lt;/span&gt;&lt;span class="s"&gt;"RESOURCE_LOCAL"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;jta-data-source&amp;gt;&lt;/span&gt;mysqlResource&lt;span class="nt"&gt;&amp;lt;/jta-data-source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;class&amp;gt;&lt;/span&gt;com.example.app.User&lt;span class="nt"&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/persistence-unit&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/persistence&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we are using the name of the database resource we defined in the TomEE server. A production server should define a data source with the same name so you don't have to worry about the configuration details of the database when you deploy the application. As long as there's a data source with the name &lt;code&gt;mysqlResoure&lt;/code&gt;, the application will be able to connect to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-apache-deltaspike-data"&gt;
  &lt;/a&gt;
  Using Apache DeltaSpike Data
&lt;/h2&gt;

&lt;p&gt;The Data module of Apache DeltaSpike allows us to define repository interfaces with query methods without having to implement them. Let's take advantage of this.&lt;/p&gt;

&lt;p&gt;First, add the dependencies to the &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.deltaspike.distribution&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;distributions-bom&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.9.4&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.deltaspike.core&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;deltaspike-core-api&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.deltaspike.core&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;deltaspike-core-impl&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.deltaspike.modules&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;deltaspike-data-module-api&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.deltaspike.modules&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;deltaspike-data-module-impl&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;runtime&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, create a CDI producer that creates new &lt;code&gt;EntityManager&lt;/code&gt; instances used by Apache DeltaSpike:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.enterprise.inject.Disposes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.enterprise.inject.Produces&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.persistence.EntityManager&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.persistence.EntityManagerFactory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.persistence.PersistenceUnit&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EntityManagerProducer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@PersistenceUnit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"jakarataee-pu"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;EntityManagerFactory&lt;/span&gt; &lt;span class="n"&gt;emf&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Produces&lt;/span&gt; &lt;span class="c1"&gt;// you can also make this @RequestScoped&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;EntityManager&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;emf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createEntityManager&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Disposes&lt;/span&gt; &lt;span class="nc"&gt;EntityManager&lt;/span&gt; &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;em&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we used the name of the Persistence Unit we previously defined in the &lt;code&gt;persistence.xml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now, implement the &lt;code&gt;User&lt;/code&gt; entity mapped to the &lt;code&gt;users&lt;/code&gt; SQL table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.persistence.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.time.LocalDate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Objects&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Entity&lt;/span&gt;
&lt;span class="nd"&gt;@Table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"users"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Id&lt;/span&gt;
    &lt;span class="nd"&gt;@GeneratedValue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;GenerationType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;IDENTITY&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"birth_date"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;LocalDate&lt;/span&gt; &lt;span class="n"&gt;birthDate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getEmail&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setEmail&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LocalDate&lt;/span&gt; &lt;span class="nf"&gt;getBirthDate&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;birthDate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setBirthDate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;LocalDate&lt;/span&gt; &lt;span class="n"&gt;birthDate&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;birthDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;birthDate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, add the following repository interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.deltaspike.data.api.EntityRepository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.apache.deltaspike.data.api.Repository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Repository&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;EntityRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't need to implement this interface. Instead, Apache DeltaSpike Data will create instances of this type and dynamically add query methods to it at runtime. In fact, the &lt;code&gt;UserRepository&lt;/code&gt; interface inherits useful methods already. For example, we can create a &lt;a href="https://vaadin.com/flow"&gt;Vaadin Flow&lt;/a&gt; view that uses this repository to show a notification in the browser with the count of users in the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.vaadin.flow.component.notification.Notification&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.vaadin.flow.component.orderedlayout.VerticalLayout&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.vaadin.flow.router.Route&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.inject.Inject&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Route&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainView&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;VerticalLayout&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Inject&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Notification&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Users: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run the application using &lt;code&gt;mvn package tomee:run&lt;/code&gt; and request it at &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;. Here's a screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7O08C2pC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4z9sh76ele8tf3orse2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7O08C2pC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4z9sh76ele8tf3orse2.png" alt="A Vaadin Flow view connected consuming data from MySQL through an Apache DeltaSpike repository"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How mentorship can level up your coding skills after a Bootcamp or as a self-taught developer?</title>
      <author>Hi there ! My name is Clara</author>
      <pubDate>Mon, 28 Jun 2021 14:02:16 +0000</pubDate>
      <link>https://dev.to/clarachaouat/how-mentorship-can-level-up-your-coding-skills-after-a-bootcamp-or-as-a-self-taught-developer-1iin</link>
      <guid>https://dev.to/clarachaouat/how-mentorship-can-level-up-your-coding-skills-after-a-bootcamp-or-as-a-self-taught-developer-1iin</guid>
      <description>&lt;p&gt;“Mentoring is a brain to pick, an ear to listen, and a push in the right direction.” — John Crosby.&lt;br&gt;
According to this article in Forbes, Sun Microsystems compared the career progress of 1,000 employees over a five-year period. And what did their findings tell them? “Both mentors and mentees were approximately 20% more likely to get a raise than people who did not participate in the mentoring program.” They also found that employees who were mentored were promoted five times more often than those that were not. In this article, I’ll share my experience with mentoring with you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-mentoring"&gt;
  &lt;/a&gt;
  What’s mentoring?
&lt;/h2&gt;

&lt;p&gt;I’ve heard the term mentoring used with various meanings, often as a substitute for onboarding, coaching, or helping. I like to narrow this down. In my take, mentorship is a learning relationship between an experienced person and someone who wants to grow. The person receiving mentorship is referred to as the mentee, while the person sharing their expertise is the mentor. With software engineering, the setup is pretty typical: a more senior engineer mentors a more junior person. In my case, my mentor is a senior UX engineer I found on a platform online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-need-a-mentor"&gt;
  &lt;/a&gt;
  Why you need a mentor?
&lt;/h2&gt;

&lt;p&gt;The fastest way to level up as an aspiring developer is through 1-on-1 mentorship. There’s a reason why the largest companies like Google, Microsoft, Airbnb, and the like assign mentors to the junior developers they hire. It’s because it’s a highly effective way to learn.&lt;br&gt;
The fastest way to learn programming is through pair programming.&lt;br&gt;
Coding can be challenging, especially to beginners. Having a more experienced guide who has overcome the same problems you’re facing provides an inspiring example to follow.&lt;br&gt;
Coding mentors are great because they can help you simplify your learning process. They can guide your learning path, and provide additional learning resources that come from experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feedback-is-the-key"&gt;
  &lt;/a&gt;
  Feedback is the key
&lt;/h3&gt;

&lt;p&gt;You can’t learn anything if you don’t get feedback. It’s as simple as that. Feedback is a fundamental requirement of the learning process. Imagine trying to improve your free throws without seeing if your shot went in. It’d be impossible.&lt;br&gt;
A mentor can provide crucial feedback when there normally wouldn’t be any. It puts a stress test on your skills and challenges the knowledge areas where you might be weak. One of the most common ways mentors will give you feedback is via code reviews. Code reviews are my favorite. Either by giving clues to solve a problem or simply by directing the response sending a resource, code reviews are one of the best ways to level up your coding skills. It will also give you info about the industry standards. coding a personal project is one thing, imagining this same code in an industrial development context is another.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-flaws-of-selfstudy"&gt;
  &lt;/a&gt;
  The flaws of self-study
&lt;/h3&gt;

&lt;p&gt;Self-study is important, but there are two big problems.&lt;br&gt;
Firstly, it takes time to hone your skills. Searching for relevant information is intuitive for an experienced developer, but feels more like a wild goose chase for someone who is inexperienced. It might seem simple, but it takes a lot of practice to know how to search Google or figure out the best places to look for answers.&lt;br&gt;
When I first started learning programming, I either didn’t know where to look or didn’t know exactly what I was looking for. I often felt lost and overwhelmed.&lt;br&gt;
Secondly, relying too heavily on self-study makes it hard for you to take a step back and understand big picture concepts. It’s easy to find yourself solving individual problems without having a good understanding of how it fits into everything else. You might learn how to do something, but not know why it’s necessary.&lt;br&gt;
It’s also not always clear if you are going down the right learning path. In the beginning, it’s hard to know where to start. People do a little research and pick a path. As time goes on, the path you initially chose might not be the best route for you. You might not correct the course until much later down the road. You could be wasting time learning something that doesn’t align with your long-term goals.&lt;br&gt;
To avoid these traps, it’s important to supplement self-study feedback with feedback from an outside source. Relying too heavily on self-study can result in wasting time on both the micro and macro levels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-mentorship-can-significantly-help-you"&gt;
  &lt;/a&gt;
  How mentorship can significantly help you?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#mentors-can-advise-you-on-how-to-get-to-your-goals-faster"&gt;
  &lt;/a&gt;
  Mentors can advise you on how to get to your goals faster.
&lt;/h3&gt;

&lt;p&gt;One of the fastest ways to learn how to do something is to find someone who has already achieved your goal and get the inside scoop. With their experience, they know what’s worth learning and what you can skip. Depending on your goals (e.g., first dream job), they will advise you on the minimum skills you need to reach your goal(s). They will send you resources (Books, courses, articles, workshops) based on your skills, levels, and needs and tell you If it worth it to invest a bit of money in this course or another. They simplify your learning process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#great-mentors-know-how-to-challenge-their-mentees"&gt;
  &lt;/a&gt;
  Great mentors know how to challenge their mentees.
&lt;/h3&gt;

&lt;p&gt;The learning approach needs to fit the student’s needs and education level in the subject matter. If what a development mentor teaches you is too easy, you’ll perceive the process of learning as irrelevant and boring. On the other hand, if the content is way over your head, you’re likely to get frustrated and discouraged to the point of giving up. A good mentor can hit the sweet spot for the experience to be both challenging and satisfying.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mentors-who-are-where-you-want-to-go-can-inspire-you-to-get-there"&gt;
  &lt;/a&gt;
  Mentors who are where you want to go can inspire you to get there.
&lt;/h3&gt;

&lt;p&gt;Whether it’s their level of expertise or their role in your dream company, the fact that they achieved what you’re after is inspiring because they’re living proof that your goals can become a reality. They’re in the best position to show you how to get there. This is how I chose my mentor. When I visited her personal web page, I had this eureka moment “This is exactly the kind of developer I’d like to be!”. Thanks to her, I also had the opportunity to get familiar with web accessibility concerns (as it is one of her expertise domains). Before working with her, I had no idea about what web accessibility was and now it became a topic I’d like to dig into as I understood how crucial it is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encouraging-good-habits"&gt;
  &lt;/a&gt;
  Encouraging good habits
&lt;/h3&gt;

&lt;p&gt;Mentorship is an opportunity to get these good habits (What we often hear as “Good practice”) right from the get-go. Even if you don’t personally follow a lot of them (though you should), it’s important to help learners develop these habits early. Here are a few good habits that were pushed on me:&lt;br&gt;
· Document your code (meaningfully)&lt;br&gt;
· Spend more time planning/thinking and less time coding&lt;br&gt;
· Be consistent in how you write code. Don’t have a variable named badApple and another named good_apple&lt;br&gt;
· If you have a question, formulate a precise question. Rather than saying “It doesn’t work,” ask “Why is my method changing the original array rather than creating a copy?” Oftentimes, problems can be solved just by asking the right questions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#acting-as-a-supportive-peer"&gt;
  &lt;/a&gt;
  Acting as a supportive peer
&lt;/h3&gt;

&lt;p&gt;You’re going to struggle to solve complex coding challenges. So you need to know that someone has your back and can walk you through things if you get stuck.&lt;br&gt;
A mentor-mentee relationship is not one with a power dynamic. You are peers. Although you may know exponentially more than the person you’re mentoring, no developer should ever be done learning. Being a student alongside your student is paramount to ensuring that they understand it’s OK to make mistakes. We all make mistakes. The sooner that attitude is adopted, the better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practicing-the-most-common-tools-used-in-industry"&gt;
  &lt;/a&gt;
  Practicing the most common tools used in industry
&lt;/h3&gt;

&lt;p&gt;Let’s take the example of GitHub. I remember the very first time someone tried to explain it to me, I felt quantum physics made more sense to me! I then, had few occasions to practice it while doing my coding Bootcamp so when my mentor told me that we’ll work together via GitHub, I thought that it would be a great occasion to practice it in order to feel more comfortable using what is a basic tool in the tech industry. Now, I feel much more confident using GitHub and of course, I don’t know all its subtleties (yet!) but at least I feel comfortable using it as a junior developer in a professional environment. Now, I feel confident answering the job interview question “Do you feel comfortable using Github?”.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-find-a-mentor-that-fits-your-needs"&gt;
  &lt;/a&gt;
  How to find a mentor that fits your needs?
&lt;/h2&gt;

&lt;p&gt;Identifying your goals is the key to find a good match. As you search for mentors, think about your goals:&lt;br&gt;
· Figure out what role you want this mentor to play in your life.&lt;br&gt;
· What do you want to accomplish in the next six months?&lt;br&gt;
· What are your immediate goals and what are your goals for the next five years?&lt;br&gt;
· Are you looking for someone who will challenge you?&lt;br&gt;
· Someone who will offer advice on career choices?&lt;br&gt;
· How many hours a week will you dedicate to the project?&lt;br&gt;
A few common goals are:&lt;br&gt;
· Find a job or figure out your career path.&lt;br&gt;
· get critique/feedback on your work and improve as an engineer/developer,&lt;br&gt;
· prepare a resume and get ready for job interviews.&lt;br&gt;
· understand how the career path works in certain industries and figure out a career plan.&lt;br&gt;
· would you like to become a freelancer and find clients?&lt;br&gt;
Be strategic, you don’t need to find one mentor who is all of these things, or many mentors who overlap in these things. Find the few that best fit into what you want to accomplish. Communication and sincerity are the keys, be transparent when meeting a mentor for the first time. Don’t start working with a mentor if you already know that’s not going to work, you’ll both waste your time and energy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-most-of-your-mentorship"&gt;
  &lt;/a&gt;
  Making the most of your mentorship
&lt;/h2&gt;

&lt;p&gt;Of course, it’s a win-win relationship but don’t forget that your mentor mentors you during his/her extra time so try to make the most of this time as much as you can.&lt;br&gt;
Try to structure each chat with your mentor ahead of time. Since they’re likely very busy, anything you can do to make their life easier will be greatly appreciated!&lt;br&gt;
· Set an agenda prior to each session,&lt;br&gt;
· Figure out next steps,&lt;br&gt;
· Connect on Github so they can easily review your code,&lt;br&gt;
· Be sure that you pushed your last version of your code,&lt;br&gt;
· Give as many details as you can when asking questions to avoid misunderstanding,&lt;br&gt;
· Be sure to always be on time,&lt;br&gt;
· Be thankful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Now you have the tools you need to find a mentor, get out there and start looking! Mentorship is one of the most rewarding and impactful parts of your journey, and you never know where you might find your future mentor.&lt;br&gt;
From a personal point of view, I’ve been working with my mentor for 5 months now and I’m so grateful for all the things she has been giving me so far. Thanks to her, I like coding more and more day by day, I gained confidence (what is a crucial thing when coding), she opened me to topics I didn’t even know that they existed and most importantly, she’s very supportive.&lt;br&gt;
It’s really worth at least trying it and if you ever need a bit of personal guidance as you learn to code, feel free to chat with me, I’d be happy to share my experience.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>3 ways to send emails with only few lines of code and Gmail - Python - Part 3</title>
      <author>François</author>
      <pubDate>Mon, 28 Jun 2021 14:01:51 +0000</pubDate>
      <link>https://dev.to/fralps/3-ways-to-send-emails-with-only-few-lines-of-code-and-gmail-python-part-3-13e0</link>
      <guid>https://dev.to/fralps/3-ways-to-send-emails-with-only-few-lines-of-code-and-gmail-python-part-3-13e0</guid>
      <description>&lt;p&gt;&lt;em&gt;We will see how to send a simple email with the help of three different programming languages: Javascript, Ruby and Python&lt;br&gt;
Before you start you need to create a Gmail account.&lt;br&gt;
Do not forget to accept and allow the "Less secure apps" access in order use your scripts with your Gmail smtp connection.&lt;br&gt;
I'll let you do this on your own, you don't need a tutorial for this&lt;/em&gt; 😜 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python 🐍
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We are going to use the &lt;a href="https://docs.python.org/3/library/smtplib.html"&gt;Smtplib&lt;/a&gt; and the &lt;a href="https://docs.python.org/3/library/email.mime.html"&gt;MIMEMultipart&lt;/a&gt; libraries:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.multipart&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Define Gmail account info and recipient email:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# The email addresses and password
&lt;/span&gt;&lt;span class="n"&gt;sender_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'youremail@gmail.com'&lt;/span&gt;
&lt;span class="n"&gt;sender_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'yourpassword'&lt;/span&gt;
&lt;span class="n"&gt;gmail_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;

&lt;span class="n"&gt;receiver_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'myfriend@yopmail.com'&lt;/span&gt;
&lt;span class="n"&gt;mail_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Easy peazy lemon squeezy'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Setup the MIME:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'From'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sender_address&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'To'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;receiver_address&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Subject'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Sending email using Python'&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'plain'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create SMTP session for sending the mail:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'smtp.gmail.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gmail_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# enable security
&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receiver_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Email Sent'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here the final code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.multipart&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;

&lt;span class="c1"&gt;# The email addresses and password
&lt;/span&gt;&lt;span class="n"&gt;sender_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'youremail@gmail.com'&lt;/span&gt;
&lt;span class="n"&gt;sender_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'yourpassword'&lt;/span&gt;
&lt;span class="n"&gt;gmail_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;

&lt;span class="n"&gt;receiver_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'myfriend@yopmail.com'&lt;/span&gt;
&lt;span class="n"&gt;mail_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Easy peezy lemon squeezy'&lt;/span&gt;

&lt;span class="c1"&gt;# Setup the MIME
&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'From'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sender_address&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'To'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;receiver_address&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Subject'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Sending email using Python'&lt;/span&gt;

&lt;span class="c1"&gt;# The body and the attachments for the mail
&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'plain'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Create SMTP session for sending the mail
&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'smtp.gmail.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gmail_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# enable security
&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receiver_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Email Sent'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-power-of-python"&gt;
  &lt;/a&gt;
  The power of Python 🐍
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o8doT5DaMjfH3paHC/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o8doT5DaMjfH3paHC/giphy.gif" alt="Python beast"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;With those scripts, we went through the basics of the module, gem and library (read the docs 📚) but you can also do amazing things with them like loops, sending attachments, automated things... feel free to do want you want.&lt;/p&gt;

&lt;p&gt;Thanks for reading this tiny scripts serie 😊 &lt;br&gt;
See you soon &lt;a href="https://kinoba.fr"&gt;@Kinoba&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/fralps/3-ways-to-send-emails-with-only-few-lines-of-code-and-gmail-javascript-part-1-4i92"&gt;Javascript 🚀 - Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/fralps/3-ways-to-send-emails-with-only-few-lines-of-code-and-gmail-ruby-part-2-23nc"&gt;Ruby 💎 - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 🐍 - Part 3&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>smtp</category>
      <category>email</category>
      <category>library</category>
    </item>
    <item>
      <title>Database... or Goose?</title>
      <author>Thomas Hareau</author>
      <pubDate>Mon, 28 Jun 2021 13:56:00 +0000</pubDate>
      <link>https://dev.to/doctolib/database-or-goose-58hi</link>
      <guid>https://dev.to/doctolib/database-or-goose-58hi</guid>
      <description>&lt;p&gt;Once a platform reaches a certain amount of usage, database migration can quickly bring a platform down. For example, adding a column, if not done carefully, &lt;a href="https://medium.com/doctolib/stop-worrying-about-postgresql-locks-in-your-rails-migrations-3426027e9cc9"&gt;can block entirely lock a table&lt;/a&gt; for a few minutes.&lt;/p&gt;

&lt;p&gt;At Doctolib, we developed &lt;a href="https://github.com/doctolib/safe-pg-migrations"&gt;safe-pg-migrations&lt;/a&gt;, a tool which automatically makes migrations safe. In 2018, we open-sourced this library. From an internal solution developed by our team only, it is now used on other projects, and even received contribution from external authors.&lt;/p&gt;

&lt;p&gt;To acknowledge, we decided to give safe-pg-migrations a logo. Our design team came up with two propositions.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mmuhHGVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aveqh0v09mg7s9khd76v.png" alt="parachute logo"&gt;&lt;/th&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsaRL7MV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hh35yxdp132zhcbgmxdq.png" alt="bird logo"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We would like you to help us choose the best logo. To do so, answer to the survey on the tweet bellow: &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvbC4XDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1394945381281243137/lJ-Y2YBp_normal.jpg" alt="Docto Tech Life profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Docto Tech Life
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @doctotechlife
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      So, what is going to be the logo of safe-pg-migrations?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:59 AM - 28 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1409421282773549058" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1409421282773549058" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1409421282773549058" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
 

</description>
    </item>
    <item>
      <title>Uploading Files to IPFS from a Web Application</title>
      <author>Nader Dabit</author>
      <pubDate>Mon, 28 Jun 2021 13:30:46 +0000</pubDate>
      <link>https://dev.to/dabit3/uploading-files-to-ipfs-from-a-web-application-50a</link>
      <guid>https://dev.to/dabit3/uploading-files-to-ipfs-from-a-web-application-50a</guid>
      <description>&lt;p&gt;One of the most common interactions with &lt;a href="https://ipfs.io/#how"&gt;IPFS&lt;/a&gt; is uploading files like images and videos from a client-side application, so I found it surprising that there were not a lot of straightforward tutorials showing how this is done.&lt;/p&gt;

&lt;p&gt;In this tutorial you will learn just that in as few lines of code (and as simply) as possible using &lt;a href="https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs-http-client#readme"&gt;&lt;code&gt;ipfs-http-client&lt;/code&gt;&lt;/a&gt;. The ideas here are implemented in React but should be fairly easily transferrable to doing the same thing in any other JavaScript framework, like Vue, Angular, or Svelte.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-ipfs"&gt;
  &lt;/a&gt;
  About IPFS
&lt;/h2&gt;

&lt;p&gt;IPFS is a decentralized, peer to peer file sharing protocol. &lt;/p&gt;

&lt;p&gt;There are various types of &lt;a href="https://docs.ipfs.io/concepts/ipfs-gateway/#overview"&gt;IPFS gateways&lt;/a&gt; available. Some are free, some are not. Some offer read-only access, and others offer both read and write access.&lt;/p&gt;

&lt;p&gt;You can also run &lt;a href="https://docs.ipfs.io/concepts/ipfs-gateway/#gateway-providers"&gt;your own IPFS gateway&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because we will be uploading / saving files, we need to be sure to choose a gateway that allows us write access. The gateway we will be using today is &lt;a href="https://infura.io/docs/ipfs"&gt;Infura&lt;/a&gt;. Other popular services are &lt;a href="https://pinata.cloud/"&gt;Pinata&lt;/a&gt; or &lt;a href="https://fleek.co/"&gt;Fleek&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For an example of how to pin a file to IPFS with Pinata, check out &lt;a href="https://github.com/dabit3/ipfs-pinata-example"&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already have a React application created, you can skip this step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, create a new React app and change into the new directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app ipfs-example

&lt;span class="nb"&gt;cd &lt;/span&gt;ipfs-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, install the &lt;code&gt;ipfs-http-client&lt;/code&gt; library using either &lt;strong&gt;NPM&lt;/strong&gt; or &lt;strong&gt;Yarn&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;ipfs-http-client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#base-code"&gt;
  &lt;/a&gt;
  Base code
&lt;/h2&gt;

&lt;p&gt;The basic functionality can be summed up in only 3 lines of code, but I'll also be building out an entire UI to show how it all fits together.&lt;/p&gt;

&lt;p&gt;The basic code for getting this to work is here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* import the ipfs-http-client library */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ipfs-http-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* Create an instance of the client */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ipfsHttpClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://ipfs.infura.io:5001/api/v0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* upload the file */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* or a string */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full code
&lt;/h2&gt;

&lt;p&gt;Let's now look at how the above code would be used to actually implement file upload functionality in our app for uploading and viewing images.&lt;/p&gt;

&lt;p&gt;In your project, open &lt;strong&gt;src/App.js&lt;/strong&gt; and update it with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* src/App.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ipfs-http-client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://ipfs.infura.io:5001/api/v0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fileUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateFileUrl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://ipfs.infura.io/ipfs/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;added&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="nx"&gt;updateFileUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error uploading file: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;IPFS&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fileUrl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fileUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;600px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, run the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the app loads, you should see a file upload button.&lt;/p&gt;

&lt;p&gt;Once a file has been successfully uploaded, you should see it rendered in the UI.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>ipfs</category>
    </item>
    <item>
      <title>Best Website Speed and Performance Testing Tools Free</title>
      <author>Vipin Agarwal</author>
      <pubDate>Mon, 28 Jun 2021 13:24:58 +0000</pubDate>
      <link>https://dev.to/startdeesigns/best-website-speed-and-performance-testing-tools-free-238k</link>
      <guid>https://dev.to/startdeesigns/best-website-speed-and-performance-testing-tools-free-238k</guid>
      <description>&lt;p&gt;Site speed can represent the moment of truth of an online business on the web. A successful business website depends on several Key Performance Factors. One of the KPIs to measure the performance of a website is loading speed. It is essential for both user and search engine perspectives.&lt;/p&gt;

&lt;p&gt;Website speed directly affects the completion of business because 40 percent of customers leave websites that take more than 3 seconds to load. Thus to grab that 40% of users on your website, you need to improve your website loading speed.&lt;br&gt;
For that, you need free website speed testing tools. These website speed testing tools show the metrics with several specific factors that affect site performance.&lt;/p&gt;

&lt;p&gt;If you are a developer or marketer you can measure performance and see the opportunities to improve the speed of websites.&lt;br&gt;
Now you got the point of why website speed is important for your online business success. Without further ado, let’s jump right in.&lt;br&gt;
Best Website Speed and Performance Testing Tools Free&lt;/p&gt;

&lt;h3&gt;Pingdom&lt;/h3&gt;

&lt;p&gt;Pingdom is one of the most trusted and well-known website speed testing tools. Pingdom is a free tool to use for any &lt;a href="https://www.startdesigns.com/website-development-company.php"&gt;website development company&lt;/a&gt; and freelance web developer or designer.&lt;/p&gt;

&lt;p&gt;Pingdom uses 70+ global polling locations to test page load time and analyze it. It provides service 24/7 all year long.&lt;/p&gt;

&lt;p&gt;It analyzes and provides data on the Server Response Codes, SSL, DNS, HTML, CSS, Plain content, and JavaScript. You can monitor then optimize them to make a high-performance website user experience.&lt;/p&gt;

&lt;p&gt;You don’t need to sign up to test the website. Copy and paste the webpage URL and click on the start test button. Hang on for a while and get the detailed insights.&lt;/p&gt;

&lt;h3&gt;GTmetrix&lt;/h3&gt;

&lt;p&gt;GTmetrix is another excellent website speed test tool online to measure site performance and loading speed. Tech giants such as PWC, HP, Microsoft, Samsung, SalesForce, Godaddy, and PayPal trusted GTmetrix.&lt;/p&gt;

&lt;p&gt;GTmetrix analyzes web pages with Google lighthouse and shows Key Performance Indicators data like Largest Contentful Paint, Total Blocking Time, Cumulative Layout, and mobile responsiveness. The report focuses on visitor’s experience.&lt;/p&gt;

&lt;p&gt;You can test websites without signing up and will get the detailed performance metrics in one click. Analyze the website loading speed from 65 servers in 22 different locations around the world.&lt;/p&gt;

&lt;h3&gt;Google PageSpeed Insights:&lt;/h3&gt;

&lt;p&gt;Google PageSpeed Insights a free tool from Google to analyze the page speed. PageSpeed Insights(PSI) generates a performance report on both mobile and desktop devices. It provides suggestions to improve web page speed.&lt;/p&gt;

&lt;p&gt;PSI provides both lab and field data about page speed. Lab data is debugged performance issues in a controlled environment, and field data is real-world user-experience issues.&lt;/p&gt;

&lt;p&gt;PSI gives a score of 0 to 100 that summarises the website’s speed performance. A score above 90 or 90 is considered good. Between 50 to 90 needs improvement, and below 50 is poor.&lt;/p&gt;

&lt;h3&gt;WebPageTest:&lt;/h3&gt;

&lt;p&gt;WebPageSpeed is an advanced tool to test website speed. It opens with four options: Advanced Testing, Simple Testing, Visual Comparison, and Traceroute.&lt;/p&gt;

&lt;p&gt;It has advanced features like you can choose different server locations globally, web browsers, chrome mobile device emulation, and one of the cool features of filmstrip of screen snapshots taken during a web page load.&lt;/p&gt;

&lt;p&gt;It provides in-depth metrics of a website with elements like DNS, TCP, TLS, etc. Leverage the testing on modern devices and browser versions. It’s free of cost like other ones, and no sign-up is required.&lt;/p&gt;

&lt;h3&gt;Site24x7&lt;/h3&gt;

&lt;p&gt;Site24x7 is a comprehensive tool to measure website speed and analyze what errors are slowing down your website. This tool is free to access, and no signup is required.&lt;/p&gt;

&lt;p&gt;This tool shows page load time, page size, DNS time, and page speed score. A colorful pie chart visuals to analyze the content breakdown by request and content breakdown by the size marked in percentage can be helpful.&lt;/p&gt;

&lt;p&gt;Web developers and website development companies can use these demographics in the report to be shared with customers.&lt;/p&gt;

&lt;h3&gt;DareBoost:&lt;/h3&gt;

&lt;p&gt;Dareboost is another well-known website speed testing tool online. 450+ web professionals like American Express, NASCAR, GoFundMe, and Postman trusted DareBoost.&lt;/p&gt;

&lt;p&gt;Dareboost is a single-click service that gives real-time data about front-end performance as well as user experience. No signup and subscription is needed.&lt;/p&gt;

&lt;p&gt;Dareboost has unique features like Video analysis, detailed UX analysis, and in-depth web performance analysis. Another feature is that you can compare two websites loading speed on a single screen. It has 13 test server locations in major cities across the world.&lt;/p&gt;

&lt;h3&gt;KeyCDN&lt;/h3&gt;

&lt;p&gt;KeyCDN offers website speed testing online with ten different server locations across the world. It calculates the HTML content loading, checks server responses, HTTP status code, JavaScript, CSS, and video rendering.&lt;/p&gt;

&lt;p&gt;It reports about errors, optimization opportunities, and detailed analyzed data of the complete website. Web Developers and Designers get informed data to improve the website performance.&lt;/p&gt;

&lt;h3&gt;DotcomTools:&lt;/h3&gt;

&lt;p&gt;Dotcomtools reports real-time speed testing from 21 different locations worldwide. This tool empowers you to test website performance on Chrome, Firefox, Edge, iOS, and Android browsers on both desktop and mobile versions.&lt;/p&gt;

&lt;p&gt;You can test web pages using different resolutions and network throttling. It provides browser-based load time testing, identifying slow/missing elements, complete waterfall reports, charts, and graphs.&lt;/p&gt;

&lt;h3&gt;UpTrends:&lt;/h3&gt;

&lt;p&gt;UpTrends tests website speed in major browsers, on desktop, and mobile. It empowers website development companies and web developers to test websites on different bandwidth throttling, screen resolutions, desktop, and different mobile models.&lt;/p&gt;

&lt;p&gt;Uptrends analyze every website element like images, CSS files, HTML, Content, and JavaScript. It gives you a complete waterfall report, metrics, and visual graphics to analyze the elements that slow down your website.&lt;/p&gt;

&lt;p&gt;You can compare web page performance on different web browsers from ten locations worldwide.&lt;/p&gt;

&lt;h3&gt;WebsiteSpeedTest:&lt;/h3&gt;

&lt;p&gt;WebsiteSpeedTest by Cloudinary offers the analysis of images on the website. It reports the size of images that slow down the website. It provides details of the image like path, location, and size.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Summary:&lt;/b&gt; Free website speed testing tools online&lt;br&gt;
• Pingdom&lt;br&gt;
• GTmetrix&lt;br&gt;
• Google PageSpeed Insights&lt;br&gt;
• WebPageTest&lt;br&gt;
• Site24x7&lt;br&gt;
• DareBoost&lt;br&gt;
• KeyCDN&lt;br&gt;
• Dotcom-Tools&lt;br&gt;
• UpTrends&lt;br&gt;
• WebsiteSpeedTest by Cloudinary&lt;/p&gt;

&lt;h2&gt;Conclusion-&lt;/h2&gt;

&lt;p&gt;Optimized web pages rank above the pages that take much time to load in browsers. Google and other search engines continuously work to thrive the visitors’ experience of the web. Thus having a fast-loaded website opens the opportunity to get rank higher in SERP. Simultaneously it drives more visitors, engagement, and sales to your website.&lt;/p&gt;

&lt;p&gt;So having a fast-loading and high-performing website is one of the essential assets to be successful. You can hire a web developer, UI/UX designer, or website development agency to improve your website today.&lt;/p&gt;

&lt;p&gt;Originally published at &lt;a href="https://www.startdesigns.com"&gt;https://www.startdesigns.com&lt;/a&gt; on June 26, 2021.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Use of Font Ligatures in VS Code</title>
      <author>Stacksjar</author>
      <pubDate>Mon, 28 Jun 2021 13:22:26 +0000</pubDate>
      <link>https://dev.to/stacksjar/use-of-font-ligatures-in-vs-code-km4</link>
      <guid>https://dev.to/stacksjar/use-of-font-ligatures-in-vs-code-km4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A9ptqUuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/se93ih8ftqy908wpevle.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A9ptqUuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/se93ih8ftqy908wpevle.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post we are going to learn how to modify the icons of operators we use in our programming languages using vscode font ligatures. For doing this we are going see how to use the Font Ligature settings in VS Code.&lt;/p&gt;

&lt;p&gt;You don't have to do any coding font ligatures are the optional features that are supported by many of the fonts available on the Internet. So follow the below steps for install coding font ligatures in your visual studio code.&lt;/p&gt;

&lt;p&gt;Read Complete Article Here: &lt;a href="https://stacksjar.com/post/use-of-font-ligatures-in-vs-code"&gt;https://stacksjar.com/post/use-of-font-ligatures-in-vs-code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Bits of Xperience: The Hidden Cost of IPageUrlRetriever.Retrieve</title>
      <author>Sean G. Wright</author>
      <pubDate>Mon, 28 Jun 2021 13:19:38 +0000</pubDate>
      <link>https://dev.to/wiredviews/bits-of-xperience-the-hidden-cost-of-ipageurlretriever-retrieve-3oj1</link>
      <guid>https://dev.to/wiredviews/bits-of-xperience-the-hidden-cost-of-ipageurlretriever-retrieve-3oj1</guid>
      <description>&lt;p&gt;There's a lot of new, helpful types and methods in Kentico Xperience 13.0... but it can sometimes be difficult to know when each should be used 🤔.&lt;/p&gt;

&lt;p&gt;Let's look at the simple (or is it?) example of the &lt;code&gt;IPageUrlRetriever&lt;/code&gt; interface and its &lt;code&gt;Retrieve()&lt;/code&gt; method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-we-learn"&gt;
  &lt;/a&gt;
  📚 What Will We Learn?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What &lt;code&gt;IPageUrlRetriever&lt;/code&gt; does&lt;/li&gt;
&lt;li&gt;The multiple overloads of the &lt;code&gt;Retrieve()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;The hidden difference between each overload&lt;/li&gt;
&lt;li&gt;The best way to retrieve Page URLs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-ipageurlretriever"&gt;
  &lt;/a&gt;
  🎣 What is the IPageUrlRetriever?
&lt;/h2&gt;

&lt;p&gt;Using Kentico Xperience's &lt;a href="https://docs.xperience.io/developing-websites/implementing-routing/content-tree-based-routing"&gt;Content Tree based routing&lt;/a&gt; is the option most developers choose. It enables the ability to have some Pages in the Content Tree not participate in URL generation, and also ensures that &lt;a href="https://docs.xperience.io/developing-websites/implementing-routing/content-tree-based-routing#Contenttreebasedrouting-GenerationMultilingualURLgenerationonmultilingualsites"&gt;culture is included in URLs&lt;/a&gt; based on the site's settings.&lt;/p&gt;

&lt;p&gt;All of this means that generating URLs correctly can get a little tricky 😅!&lt;/p&gt;

&lt;p&gt;Fortunately, Kentico Xperience helps us out by providing the &lt;code&gt;IPageUrlRetriever&lt;/code&gt; interface which has 1 method, &lt;code&gt;Retrieve()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This method returns an instance of the &lt;code&gt;PageUrl&lt;/code&gt; type which is defined as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;// Encapsulates page relative path and absolute URL.&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PageUrl&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;PageUrl&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="c1"&gt;// Relative path (starting with ~/) of the page.&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;RelativePath&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="c1"&gt;// Absolute URL of the page.&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;AbsoluteUrl&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can use this &lt;code&gt;PageUrl&lt;/code&gt; instance to render links to other Pages in our Razor Views.&lt;/p&gt;

&lt;p&gt;However, there are multiple overloads of the &lt;code&gt;Retrieve()&lt;/code&gt; method and they have very different use-cases 😮.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#which-method-do-we-choose"&gt;
  &lt;/a&gt;
  🧙🏽‍♀️ Which Method Do We Choose?
&lt;/h2&gt;

&lt;p&gt;Here are all the overloads of &lt;code&gt;IPageUrlRetriever.Retrieve()&lt;/code&gt;, with their XML doc comments summary included:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Retrieves URL for given page&lt;/span&gt;
&lt;span class="n"&gt;PageUrl&lt;/span&gt; &lt;span class="nf"&gt;Retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;keepCurrentCulture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Retrieves URL for the given page in the given culture.&lt;/span&gt;
&lt;span class="n"&gt;PageUrl&lt;/span&gt; &lt;span class="nf"&gt;Retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;cultureCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Retrieves URL for a page based on given properties.&lt;/span&gt;
&lt;span class="n"&gt;PageUrl&lt;/span&gt; &lt;span class="nf"&gt;Retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;nodeAliasPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;keepCurrentCulture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Retrieves URL for a page based on given properties.&lt;/span&gt;
&lt;span class="n"&gt;PageUrl&lt;/span&gt; &lt;span class="nf"&gt;Retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;nodeAliasPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;cultureCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;siteName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It looks like Kentico Xperience is giving us a lot of flexibility here. We can either supply a full &lt;code&gt;TreeNode&lt;/code&gt; instance or, just the &lt;code&gt;nodeAliasPath&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's convenient! If we know there's always an &lt;code&gt;/About&lt;/code&gt; Page in the Content Tree, we can make a call like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;PageUrl&lt;/span&gt; &lt;span class="n"&gt;pageUrl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retriever&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/About"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will give us access to the correctly generated Page URL, &lt;em&gt;and&lt;/em&gt; we don't have to query for the &lt;code&gt;TreeNode&lt;/code&gt;, which means one less database round-trip 😃 (or does it?)&lt;/p&gt;

&lt;p&gt;So, we probably feel pretty confident 😤 in using &lt;code&gt;Retrieve(TreeNode node, ...)&lt;/code&gt; when we have the &lt;code&gt;TreeNode&lt;/code&gt; instance anyway, and using &lt;code&gt;Retrieve(string nodeAliasPath, ...)&lt;/code&gt; when we only know where in the Content Tree the Page is or when we get the Node Alias Path from some other Page's field.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%E2%9A%94-retrievestring-vs-retrievetreenode"&gt;
  &lt;/a&gt;
  ⚔ Retrieve(string) vs Retrieve(TreeNode)
&lt;/h2&gt;

&lt;p&gt;In this situation Xperience asks for what it needs but lets us provide less, however &lt;a href="https://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch"&gt;there's no free lunch&lt;/a&gt; and the convenience provided to us has a cost 🤨!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;IPageUrlRetriever&lt;/code&gt; is implemented by the &lt;code&gt;Kentico.Content.Web.Mvc.PageUrlRetriever&lt;/code&gt; internal class. When we call &lt;code&gt;Retrieve(string nodeAliasPath, ...)&lt;/code&gt; the &lt;code&gt;PageUrlRetriever&lt;/code&gt; uses &lt;code&gt;IPageSystemDataContextRetriever.Retrieve()&lt;/code&gt; internally to get the 'page data' that matches the &lt;code&gt;nodeAliasPath&lt;/code&gt; we provided:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;/// Provides an interface for retrieving the page based on given parameters for system purposes.&lt;/span&gt;
&lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IPageSystemDataContextRetriever&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;

   &lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="nf"&gt;Retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SiteInfoIdentifier&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;nodeAliasPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;cultureCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;IPageSystemDataContextRetriever.Retrieve()&lt;/code&gt; is fortunately cached for 10 minutes, so repeated uses of &lt;code&gt;IPageUrlRetrieve.Retrieve(string nodeAliasPath, ...)&lt;/code&gt; won't result in multiple database calls, but the first call absolutely does hit the database because it needs more information, than what we provided, to generate the correct URL.&lt;/p&gt;

&lt;p&gt;This is an important point to understand... Kentico Xperience provides &lt;em&gt;many&lt;/em&gt; different ways to accomplish the same goal, which is a good thing because we can choose the right one for our use-case. At the same time, if we choose the wrong approach for our use-case, we might end up taking a performance hit we didn't intend 😬!&lt;/p&gt;

&lt;p&gt;How bad can it get? Let's say we are generating URLs for 100 products displayed on a Page using &lt;code&gt;IPageUrlRetriever.Retrieve(string nodeAliasPath, ...)&lt;/code&gt;. This means we are executing &lt;strong&gt;at least&lt;/strong&gt; 100 database queries just to get URLs! Add on to this all the querying we did to get the Product information and images! Ooof 😖!&lt;/p&gt;

&lt;p&gt;This is commonly known at the &lt;a href="https://stackoverflow.com/a/97253/939634"&gt;N + 1 Querying Problem&lt;/a&gt; and is often seen with &lt;a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping"&gt;Object-Relational Mapping tools&lt;/a&gt; like &lt;a href="https://docs.microsoft.com/en-us/ef/core/"&gt;Entity Framework Core&lt;/a&gt; or ... Kentico Xperience's APIs 😋.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-pitfalls"&gt;
  &lt;/a&gt;
  🔥 More Pitfalls 💣
&lt;/h2&gt;

&lt;p&gt;Let say we've avoided the N + 1 query by using the alternative overload of &lt;code&gt;IPageUrlRetriever.Retrieve(TreeNode node, ...)&lt;/code&gt; so that Kentico Xperience doesn't have to go and fetch all the nodes independently.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we still have to get our Pages from &lt;code&gt;string nodeAliasPath&lt;/code&gt; values, we can use the &lt;code&gt;WhereIn(string columnName, ICollection&amp;lt;string&amp;gt; values)&lt;/code&gt; method defined on &lt;code&gt;WhereConditionBase&lt;/code&gt; to query for all &lt;code&gt;TreeNode&lt;/code&gt; objects that match set of &lt;code&gt;nodeAliasPath&lt;/code&gt; values we have. This would be a big query, but at least it's 1 query and not 100.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since we've found the correct API for our use-case, we should be all set now, right? &lt;code&gt;git commit&lt;/code&gt; and deploy 😎!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/143vPc6b08locw/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/143vPc6b08locw/giphy.gif" alt="Ship falling into the water"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, we could now run into a second problem 😫.&lt;/p&gt;

&lt;p&gt;In Kentico Xperience MVC (compared to older Portal Engine sites), the &lt;code&gt;nodeAliasPath&lt;/code&gt; is not the true URL even if parts of it match a URL for a Page. Instead, all generated URL values are stored in the &lt;code&gt;CMS_PageUrlPath&lt;/code&gt; table 🤓 in the database and the actual path is in the &lt;code&gt;PageUrlPathUrlPath&lt;/code&gt; column (what a tongue twister!)&lt;/p&gt;

&lt;p&gt;Without this data, we cannot generate valid Page URLs.&lt;/p&gt;

&lt;p&gt;This means that when we pass a &lt;code&gt;TreeNode&lt;/code&gt; to &lt;code&gt;IPageUrlRetriever.Retrieve(TreeNode node, ...)&lt;/code&gt;, internally it has to check if the &lt;code&gt;PageUrlPathUrlPath&lt;/code&gt; field is in the &lt;code&gt;TreeNode&lt;/code&gt;'s internal data set of field/value pairs. If the value is not populated, then Kentico Xperience has to query the database for it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;PageUrlPathInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WhereEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PageUrlPathNodeID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NodeID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WhereEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PageUrlPathCulture"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cultureCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In addition to having this field populated, the culture of the &lt;code&gt;TreeNode&lt;/code&gt; retrieved from the database needs to match the culture of the URL we are trying to generate.&lt;/p&gt;

&lt;p&gt;If either the &lt;code&gt;PageUrlPathUrlPath&lt;/code&gt; is missing or the cultures don't match, we have to make yet another database call for the URL data, and as far as I can tell, this query &lt;strong&gt;is not cached&lt;/strong&gt; 😨.&lt;/p&gt;

&lt;p&gt;So we're in another situation where we could be making an additional 100 database queries (and if we were using &lt;code&gt;nodeAliasPath&lt;/code&gt; that means at least 200 database calls!) to get Page URLs.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#optimal-url-generation"&gt;
  &lt;/a&gt;
  🏆 Optimal URL Generation
&lt;/h2&gt;

&lt;p&gt;Fortunately, there's a nice extension method &lt;code&gt;WithPageUrlPaths()&lt;/code&gt;, in the &lt;code&gt;CMS.DocumentEngine.Routing&lt;/code&gt; namespace, for &lt;code&gt;IDocumentQuery&lt;/code&gt; that ensures the &lt;code&gt;CMS_PageUrlPath&lt;/code&gt; table is joined when querying for our &lt;code&gt;TreeNode&lt;/code&gt;s 🤩.&lt;/p&gt;

&lt;p&gt;If we had a collection of &lt;code&gt;NodeGUID&lt;/code&gt; values (or &lt;code&gt;string nodeAliasPath&lt;/code&gt; values) that referenced Pages in the Content Tree that we wanted to generate URLs for, I think this would be the best approach:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;linkedNodeGuids&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;linkedDocuments&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;DocumentHelper&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetDocuments&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WithPageUrlPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WhereIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NodeGUID&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;linkNodeGuids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetEnumerableTypedResultAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PageUrl&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nodesAndURLs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linkedDocuments&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlRetriever&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With our &lt;code&gt;nodesAndURLs&lt;/code&gt; array of tuples we have all the data we need to create links to all those Pages 👏!&lt;/p&gt;

&lt;p&gt;Of course, if we instead use Kentico Xperience's &lt;code&gt;IPageRetriever&lt;/code&gt; service, the &lt;code&gt;.WithPageUrlPaths()&lt;/code&gt; extension gets applied for us automatically:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;linkedNodeGuids&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;linkedDocuments&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;pageRetriever&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RetrieveAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WhereIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NodeGUID&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;linkNodeGuids&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PageUrl&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nodesAndURLs&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linkedDocuments&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlRetriever&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Isn't that nice 😁!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The convenience of the Kentico Xperience libraries help us developers create the applications our businesses need, quickly and with a lot of flexibility 💪🏽.&lt;/p&gt;

&lt;p&gt;That flexibility can come at a cost that we might not notice during local development or when a site isn't under heavy load.&lt;/p&gt;

&lt;p&gt;Caching helps solve a lot of inevitable performance limitations and mistakes, but it's best if we can make the right choices the first time (especially if its only the difference of 1 method overload vs another 😉).&lt;/p&gt;

&lt;p&gt;When trying to get URLs for Pages, especially in bulk, our best choice is to use &lt;code&gt;IPageUrlRetriever.Retrieve(TreeNode node, ...)&lt;/code&gt; and then make sure the &lt;code&gt;TreeNode&lt;/code&gt; being passed was retrieved from the database using a &lt;code&gt;DocumentQuery&lt;/code&gt; that called &lt;code&gt;.WithPageUrlPaths()&lt;/code&gt; with the correct culture... otherwise we might end up causing N + 1 (or worse!) querying against the database.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;IPageRetriever.RetrieveAsync()&lt;/code&gt; method can at least make sure &lt;code&gt;.WithPageUrlPaths()&lt;/code&gt; is applied to our query, so we don't have to remember to do it 😄.&lt;/p&gt;

&lt;p&gt;If there are any other APIs you have questions about, let me know in the comments below.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading 🙏!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.xperience.io/developing-websites/implementing-routing/content-tree-based-routing"&gt;Kentico Xperience - Content Tree Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch"&gt;There's No Free Lunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/a/97253/939634"&gt;N + 1 Querying&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping"&gt;Object-Relational Mapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/ef/core/"&gt;Entity Framework Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;We've put together a list over on &lt;a href="https://github.com/Kentico/Home/blob/master/RESOURCES.md"&gt;Kentico's GitHub account&lt;/a&gt; of developer resources. Go check it out!&lt;/p&gt;

&lt;p&gt;If you are looking for additional Kentico content, checkout the Kentico or Xperience tags here on DEV.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5339"&gt;
  
    .ltag__tag__id__5339 .follow-action-button{
      background-color:  !important;
      color:  !important;
      border-color:  !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/kentico" class="ltag__tag__link"&gt;kentico&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag__tag ltag__tag__id__57801"&gt;
  
    .ltag__tag__id__57801 .follow-action-button{
      background-color:  !important;
      color:  !important;
      border-color:  !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/xperience" class="ltag__tag__link"&gt;xperience&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Or my &lt;a href="https://dev.to/seangwright/series"&gt;Kentico Xperience blog series&lt;/a&gt;, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/8185"&gt;Kentico Xperience Xplorations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/9483"&gt;Kentico Xperience MVC Widget Experiments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/seangwright/series/10963"&gt;Kentico Xperience Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>xperience</category>
      <category>kentico</category>
      <category>aspnetcore</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>How to stay consistent with writing team blog posts</title>
      <author>Rudolf Jurišić</author>
      <pubDate>Mon, 28 Jun 2021 13:04:32 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/how-to-stay-consistent-with-writing-team-blog-posts-162n</link>
      <guid>https://dev.to/bornfightcompany/how-to-stay-consistent-with-writing-team-blog-posts-162n</guid>
      <description>&lt;p&gt;For a little more than a year now, we’ve been writing blog posts on various topics related to development. We've created more than 60 blog posts up to now. This is a huge accomplishment for our team since we’ve already tried to write posts on a regular basis. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is hard to be consistent in writing, just as much as it is in staying on a healthy diet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And to be frank, we've had one or two of our cheat days. It’s inevitable. A simple rule of &lt;a href="https://dev.to/bornfightcompany/4-tips-for-creating-habits-1b7h"&gt;not skipping twice&lt;/a&gt; helped.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#team-effort"&gt;
  &lt;/a&gt;
  Team effort
&lt;/h1&gt;

&lt;p&gt;Imagine yourself writing a blog post each week, with all of the obligations your day-to-day job brings to the table. And your primary job is to write code, not blog posts. &lt;/p&gt;

&lt;p&gt;But being a part of a team - now that makes it all easier.&lt;/p&gt;

&lt;p&gt;So, how did we do it? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We’ve set up a goal: attract other developers to notice us (and hopefully be interested in joining us) by writing about our ideas, challenges, findings, etc. (purpose)&lt;/li&gt;
&lt;li&gt;We agreed everyone will participate (a subtle amount of peer pressure)&lt;/li&gt;
&lt;li&gt;With 15 members in our team, it turns out you only write 3 posts a year. And that's not much (perspective)&lt;/li&gt;
&lt;li&gt;If your post helps one person (and it probably will), you should feel good (accomplishment)&lt;/li&gt;
&lt;li&gt;No restrictions on topics or format (autonomy)&lt;/li&gt;
&lt;li&gt;We made a procedure:

&lt;ul&gt;
&lt;li&gt;a schedule so everyone knows in advance when their turn is&lt;/li&gt;
&lt;li&gt;weekly check on who was the last one and who’s up next&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, this would be nothing if it weren’t for the great team players, so thanks everyone&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/aduda091"&gt;@aduda091&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/ajdinmust"&gt;@ajdinmust&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/aleksandarperc"&gt;@aleksandarperc&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/ddrempe"&gt;@ddrempe&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/gh0c"&gt;@gh0c&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/ibrcko"&gt;@ibrcko&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/ilesar"&gt;@ilesar&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6DTl2C8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzcg7ez0c2q38zlz7aux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6DTl2C8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzcg7ez0c2q38zlz7aux.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Turns out you can tag only 7 people in your post, so I'm gonna finish the list in the comments :)&lt;/p&gt;

&lt;p&gt;To be fair, some of these posts were created in our free time.&lt;br&gt;
And to be fair, some of the blog posts were written in the last hour before the deadline.&lt;br&gt;
But we’ve kept the consistency.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#statistics"&gt;
  &lt;/a&gt;
  Statistics
&lt;/h1&gt;

&lt;p&gt;Let the stats say a few words.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lav5GAtt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ip58yef3d5542k8tw1te.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lav5GAtt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ip58yef3d5542k8tw1te.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some posts made a lot of reactions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfjt5N73--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xvl7e3dastphju8l3cv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfjt5N73--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xvl7e3dastphju8l3cv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some posts made a lot of comments.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--duyPZz_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrq95u7bhgho370crmnt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--duyPZz_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vrq95u7bhgho370crmnt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And some posts weren’t that successful.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y_agPI8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0w1atitbrftgid8g9qm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y_agPI8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0w1atitbrftgid8g9qm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-newsletter"&gt;
  &lt;/a&gt;
  The Newsletter
&lt;/h1&gt;

&lt;p&gt;As a result of our consistency in writing, we started our own newsletter.&lt;br&gt;
It consists of &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;our own blog posts&lt;/li&gt;
&lt;li&gt;links we &lt;a href="https://dev.to/bornfightcompany/custom-slack-command-use-case-sharing-urls-2bf0"&gt;share to our Slack channels&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;other materials we produce - podcasts, educational videos, info-packs etc. 
Basically it is a collection of our development employer branding activities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://mailchi.mp/bornfight.com/devtodev"&gt;Check it out&lt;/a&gt; and feel free to leave a comment!&lt;br&gt;
And, of course, &lt;a href="https://bornfight.us19.list-manage.com/subscribe?u=67e7b1cbb978b5e176035a450&amp;amp;id=51a7668afb"&gt;subscribe&lt;/a&gt; if you find it relevant!&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>writing</category>
      <category>consistency</category>
    </item>
    <item>
      <title>Design Cool Registration Form Using HTML &amp; CSS</title>
      <author>Raja Tamil</author>
      <pubDate>Mon, 28 Jun 2021 12:52:24 +0000</pubDate>
      <link>https://dev.to/hirajatamil/design-cool-registration-form-using-html-css-5f4e</link>
      <guid>https://dev.to/hirajatamil/design-cool-registration-form-using-html-css-5f4e</guid>
      <description>&lt;p&gt;In this article, I will be guiding you through how to design a cool HTML CSS Dating Registration Form step-by-step from scratch like in the screenshot below.&lt;/p&gt;

&lt;p&gt;Just so you are aware, I will be only showing you the design of the registration form using HTML and CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEj0WhSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2017/03/Screen-Shot-2017-03-26-at-7.20.51-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEj0WhSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softauthor.com/wp-content/uploads/2017/03/Screen-Shot-2017-03-26-at-7.20.51-PM.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to get the most out of this blog, you should have knowledge of basic HTML and CSS. By the end of this article, you will be able to understand and build your own cool registration form! Let’s get cracking!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-download-the-start-folder"&gt;
  &lt;/a&gt;
  Step 1: Download the Start Folder
&lt;/h3&gt;

&lt;p&gt;I have already created a folder called &lt;strong&gt;Start&lt;/strong&gt; and inside that folder, I have created an HTML file and a CSS file. You can download the folder &lt;a href="https://github.com/softauthor/HTMLCSS/tree/master/Registration%20Form"&gt;here&lt;/a&gt; to follow along.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✅ &lt;em&gt;Recommended:&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/web-design-for-beginners-real-world-coding-in-html-css/?ranMID=39197&amp;amp;ranEAID=nsrC6aUWa3g&amp;amp;ranSiteID=nsrC6aUWa3g-Lyj6Do.TSA1nlFLrEv3Xvg&amp;amp;LSNPUBID=nsrC6aUWa3g&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;&lt;em&gt;Web Design for Beginners: Real World Coding in HTML &amp;amp; CSS&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-2-initialize-the-form"&gt;
  &lt;/a&gt;
  Step 2: Initialize the Form
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;form&lt;/strong&gt; element can be used to initialize a form that could be a contact, register or login form in any HTML page. I am adding a &lt;strong&gt;form&lt;/strong&gt; element inside the &lt;strong&gt;body&lt;/strong&gt; element in your HTML page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Register Form Start&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"signup-form"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/register"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have added three attributes to the &lt;em&gt;form&lt;/em&gt; start tag, which are &lt;strong&gt;class&lt;/strong&gt;, &lt;strong&gt;action&lt;/strong&gt; and &lt;strong&gt;method&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;As you know, &lt;strong&gt;class&lt;/strong&gt; attributes can be used to target an element in CSS or JavaScript normally referred to as selectors.&lt;/p&gt;

&lt;p&gt;The purpose of the &lt;strong&gt;action&lt;/strong&gt; attribute containing a URL or any server-side file name is to tell it to post the form values to that URL or the file name when submitting the form. The &lt;strong&gt;method&lt;/strong&gt; attribute tells which HTTP method the browser should use to submit the form.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✅ &lt;em&gt;Recommended:&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/design-and-develop-a-killer-website-with-html5-and-css3/?ranMID=39197&amp;amp;ranEAID=nsrC6aUWa3g&amp;amp;ranSiteID=nsrC6aUWa3g-3sTkqENJzKb6.MG2xAPISw&amp;amp;utm_source=aff-campaign&amp;amp;LSNPUBID=nsrC6aUWa3g&amp;amp;utm_medium=udemyads"&gt;&lt;em&gt;Build Responsive Real World Websites with HTML5 and CSS3&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-3-form-structure"&gt;
  &lt;/a&gt;
  Step 3: Form Structure
&lt;/h3&gt;

&lt;p&gt;Once we have the &lt;strong&gt;form&lt;/strong&gt; element in place, I add three more DIVs inside it representing the header, body and footer of the &lt;strong&gt;form&lt;/strong&gt; element like in the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"signup-form"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/register"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- form header --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- form body --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- form footer --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;✅ &lt;em&gt;Recommended&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/flexbox-tutorial/?ranMID=39197&amp;amp;ranEAID=nsrC6aUWa3g&amp;amp;ranSiteID=nsrC6aUWa3g-R0.OaijGvPKDybW.Aj_T.g&amp;amp;LSNPUBID=nsrC6aUWa3g&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;&lt;em&gt;Complete Flexbox Course: Learn CSS3 Flexbox in 2020&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-4-form-header"&gt;
  &lt;/a&gt;
  Step 4: Form Header
&lt;/h3&gt;

&lt;p&gt;Add an H1 element inside the &lt;strong&gt;.form-header element&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- form header --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Create Account&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need to add some CSS code for &lt;strong&gt;.form-header&lt;/strong&gt; in our CSS file like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('httpss://fonts.googleapis.com/css?family=Roboto')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#78a7ba&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#385D6C&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#78a7ba&lt;/span&gt; &lt;span class="m"&gt;99%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.signup-form&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Roboto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;650px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#fafafa&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt; &lt;span class="m"&gt;99%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.form-header&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#EFF0F1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-top-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.form-header&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#cccccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have an import statement at the top of the CSS code indicating that I am getting my favorite font from the Google font collection. If you would like to use a different font, you can go &lt;a href="https://fonts.google.com"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The above CSS code is for the main form container and the header part of the form. At this stage, you should be able to see the header design on the browser when you refresh.&lt;/p&gt;

&lt;p&gt;Next, let’s add some HTML form elements inside &lt;strong&gt;.form-body&lt;/strong&gt; one by one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✅ &lt;em&gt;Recommended&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/css-the-complete-guide-incl-flexbox-grid-sass/?ranMID=39197&amp;amp;ranEAID=nsrC6aUWa3g&amp;amp;ranSiteID=nsrC6aUWa3g-xu1pcN.3.MZNXkVh1ZXJtQ&amp;amp;LSNPUBID=nsrC6aUWa3g&amp;amp;ranMID=39197&amp;amp;ranEAID=je6NUbpObpQ&amp;amp;ranSiteID=je6NUbpObpQ-GfIiFUqt3OmoO6KGyqxfmg&amp;amp;LSNPUBID=je6NUbpObpQ&amp;amp;utm_source=aff-campaign&amp;amp;utm_medium=udemyads"&gt;&lt;em&gt;CSS – The Complete Guide 2020 (incl. Flexbox, Grid &amp;amp; Sass)&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-5-form-body-firstname-and-lastname"&gt;
  &lt;/a&gt;
  Step 5: Form Body (Firstname and Lastname)
&lt;/h3&gt;

&lt;p&gt;In the HTML code below, I am creating a div with the class name &lt;strong&gt;.horizontal-group&lt;/strong&gt; inside &lt;strong&gt;.form-body&lt;/strong&gt;. Then, I am creating two more DIVs with the same class name &lt;strong&gt;.form-group&lt;/strong&gt; inside &lt;strong&gt;.horizontal-group&lt;/strong&gt;. Adding an additional &lt;strong&gt;.left&lt;/strong&gt; or &lt;strong&gt;.right&lt;/strong&gt; class represents where the &lt;strong&gt;.form-group&lt;/strong&gt; is to be on the page. There are two more HTML elements &lt;strong&gt;lable&lt;/strong&gt; and &lt;strong&gt;input&lt;/strong&gt; inside &lt;strong&gt;.form-group&lt;/strong&gt; as you can see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- form body --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Firstname and Lastname --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"horizontal-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First name *&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-input"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"enter your first name"&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;"required"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"lastname"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"label-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"lastname"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-input"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"enter your last name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the CSS code for the firstname and lastname &lt;strong&gt;.horizontal-group&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*---------------------------------------*/&lt;/span&gt;
&lt;span class="c"&gt;/* Form Body */&lt;/span&gt;
&lt;span class="c"&gt;/*---------------------------------------*/&lt;/span&gt;
&lt;span class="nc"&gt;.form-body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.form-group&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.form-body&lt;/span&gt; &lt;span class="nc"&gt;.label-title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#1BBA93&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.form-body&lt;/span&gt; &lt;span class="nc"&gt;.form-input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;34px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#d6d6d6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="nc"&gt;.horizontal-group&lt;/span&gt; &lt;span class="nc"&gt;.left&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;49%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.horizontal-group&lt;/span&gt; &lt;span class="nc"&gt;.right&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;49%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"file"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#range-label&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;15%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1BBA93&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;17px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;-8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nd"&gt;::-webkit-input-placeholder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#d9d9d9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/*---------------------------------------*/&lt;/span&gt;
&lt;span class="c"&gt;/* Form Footer */&lt;/span&gt;
&lt;span class="c"&gt;/*---------------------------------------*/&lt;/span&gt;
&lt;span class="nc"&gt;.form-footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you refresh the page at this stage after adding HTML and CSS code into your files, you should be able to see the styles applied to the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://softauthor.com/registration-form-design-in-html-css-with-code/"&gt;Continue Reading...&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
