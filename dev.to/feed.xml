<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Vote: What should the behavior of `WeaponItem`s with a negative damage value do?</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 18 Oct 2021 22:02:24 +0000</pubDate>
      <link>https://dev.to/baenencalin/vote-what-should-the-behavior-of-weaponitems-with-a-negative-damage-value-do-3a7m</link>
      <guid>https://dev.to/baenencalin/vote-what-should-the-behavior-of-weaponitems-with-a-negative-damage-value-do-3a7m</guid>
      <description>&lt;p&gt;I'm back!&lt;br&gt;
I've been working on RuntDeale, and doing some personal things, I've also had some issues recently, but I hope to re-enter the DEV community!&lt;/p&gt;

&lt;p&gt;I've set a vote, What should the behavior of &lt;code&gt;WeaponItem&lt;/code&gt;s with a negative (attack) damage value do?&lt;br&gt;
&lt;a href="https://twitter.com/BaenenCalin/status/1449960631050936321"&gt;You can vote on Twitter&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://www.reddit.com/r/gamedesign/comments/qag3i3/what_should_the_behavior_of_weaponitems_with_a/"&gt;And on Reddit&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;See you all in the next post, coming soon!&lt;/h3&gt;

</description>
      <category>gamedev</category>
      <category>cpp</category>
      <category>watercooler</category>
      <category>runtdeale</category>
    </item>
    <item>
      <title>Application with Elixir, business logic with Gleam</title>
      <author>Paweł Świątkowski</author>
      <pubDate>Mon, 18 Oct 2021 21:25:05 +0000</pubDate>
      <link>https://dev.to/katafrakt/application-with-elixir-business-logic-with-gleam-1960</link>
      <guid>https://dev.to/katafrakt/application-with-elixir-business-logic-with-gleam-1960</guid>
      <description>&lt;p&gt;One of the young programming languages I look at from afar and root for is &lt;a href="https://gleam.run"&gt;Gleam&lt;/a&gt;. It is a statically typed language for BEAM, written in Rust. Similarly to Rust, if focuses on catching many potential bugs at compilation time and providing useful error messages, so it's easy to fix them. Since it's targeting BEAM, it can easily interop with other BEAM languages, such as Elixir or Erlang. And this fact allows to overcome some issues that languages in their infancy stage usually have.&lt;/p&gt;

&lt;p&gt;My recent thought revolve around using Gleam to model the core business logic, while letting Elixir do the heavy application work around it. Let's face the facts: Phoenix is great, Ecto is great, ExUnit is great... It will take years for language such as Gleam to develop ecosystem similar to Elixir. On the other hand, I find modelling business logic with types easier and more maintainable than without them. And Elixir typespecs have their issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dialyzer error messages are not very friendly, it usually takes me couple minutes to figure out what they &lt;em&gt;really&lt;/em&gt; mean.&lt;/li&gt;
&lt;li&gt;Types are optional and there seems to be almost-consensus to write typespecs for public functions only. However, in my experience, because of that, bugs happen a lot in private functions, which are neither typespec'd, nor unit tested.&lt;/li&gt;
&lt;li&gt;Dialyzer simply does not catch everything. In fact sometimes I'm surprised at the things it does not catch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Gleam, all these issues are addressed: types are mandatory in every function, the compiler checks everything and error messages are quite informative. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error: Type mismatch
   ┌─ /home/katafrakt/dev/poligon/gleamixir_test/src/booking.gleam:21:5
   │
21 │     _ -&amp;gt; Error(InvalidRoomNumber)
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This case clause was found to return a different type than the previous
one, but all case clauses must return the same type.

Expected type:

    Bool

Found type:

    Result(a, BookingError)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So I decided to have a look at how the interop between Gleam and Elixir works and if it could be useful. To set things us, I used &lt;a href="https://github.com/gleam-lang/mix_gleam"&gt;mix_gleam&lt;/a&gt; Hex package from Gleam team, which allows you to compile Gleam as part of Mix compilation. I just followed instructions in the readme and everything works. So, time to write the first "business logic" in Gleam.&lt;/p&gt;

&lt;p&gt;To test things, I decided to code a fragment of super simple booking system for my imaginary estate. It's quite small - only has three rooms. But still, you can book them, if the details are valid. Here's the relevant code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/booking.gleam

pub type Booking {
  Booking(surname: String, room_no: Int, number_of_people: Int)
}

pub type BookingError {
  InvalidRoomNumber
  WrongNumberOfPeople
}

// Unfortunately, Gleam does not have default arguments nor multiple dispatch,
// so we have to somehow bypass that by creating two pseudo-constructors
pub fn new2(surname: String, room_no: Int) -&amp;gt; Booking {
  new3(surname, room_no, 1)
}

pub fn new3(surname: String, room_no: Int, number_of_people: Int) -&amp;gt; Booking {
  Booking(surname, room_no, number_of_people)
}

pub fn validate_booking(booking: Booking) -&amp;gt; Result(Booking, BookingError) {
  case booking.room_no {
    1 | 2 | 5 -&amp;gt; validate_capacity(booking)
    _ -&amp;gt; Error(InvalidRoomNumber)
  }
}

fn validate_capacity(booking: Booking) -&amp;gt; Result(Booking, BookingError) {
  case room_capacity(booking.room_no) &amp;gt;= booking.number_of_people {
    True -&amp;gt; Ok(booking)
    False -&amp;gt; Error(WrongNumberOfPeople)
  }
}

fn room_capacity(room_no: Int) -&amp;gt; Int {
  case room_no {
    1 -&amp;gt; 2
    2 | 5 -&amp;gt; 4
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's not exactly Elixir, but I guess you can get what's going on, as it's quite idiomatic.&lt;/p&gt;

&lt;p&gt;When compiled, Gleam modules are available like Erlang modules. So I can write this, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; :booking.new2("Smith", 1)                                    
{:booking, "Smith", 1, 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it turns out, Gleam types, when returned to Elixir, become a tuple with first element being a type name and the following elements field values. This works both ways, so I can pipe the result into another Gleam function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(2)&amp;gt; :booking.new2("Smith", 1) |&amp;gt; :booking.validate_booking()     
{:ok, {:booking, "Smith", 1, 1}}
iex(3)&amp;gt; :booking.new2("Smith", 3) |&amp;gt; :booking.validate_booking()
{:error, :invalid_room_number}
iex(4)&amp;gt; :booking.new3("Smith", 5, 6) |&amp;gt; :booking.validate_booking()
{:error, :wrong_number_of_people}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks pretty good. A nice thing is that Gleam's &lt;code&gt;Result&lt;/code&gt; type maps elegantly into Elixir's &lt;code&gt;{:ok, value}&lt;/code&gt; or &lt;code&gt;{:error, message}&lt;/code&gt; convention.&lt;/p&gt;

&lt;p&gt;Maybe I didn't see a lot, but it brings me close to the conclusion that &lt;strong&gt;yes, Gleam can be mixed with Elixir&lt;/strong&gt; in parts where full static typing is desirable and integration between the two languages goes pretty seamless. I would have to prepare a larger example to check it, but potentially looks good.&lt;/p&gt;

&lt;p&gt;A few things I don't necessarily like in Gleam (or find missing):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Completely unlike Elixir, it relies heavily on filenames - i.e. name of the file is the name of the resulting module. This is not necessarily bad, but I prefer less coupling between the filesystem and the code.&lt;/li&gt;
&lt;li&gt;No support for multiple dispatch or default arguments forces me to write weird things like &lt;code&gt;new2&lt;/code&gt; and &lt;code&gt;new3&lt;/code&gt; pseudo-constructors. Perhaps in real example it wouldn't be so problematic though, as probably I'd be passing all the data at once.&lt;/li&gt;
&lt;li&gt;I was surprised that sometimes the compiler wasn't able to infer the type, even though it should be possible.&lt;/li&gt;
&lt;li&gt;The standard library at the moment does not include things like dates at all, although of course I can define relevant logic myself without a lot of problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bonus-content-accessing-namespaced-gleam-modules"&gt;
  &lt;/a&gt;
  Bonus content: Accessing namespaced Gleam modules
&lt;/h2&gt;

&lt;p&gt;I wrote above that module names accessible to Elixir are named based on the filename of the file where Gleam code is written. It was pretty straightforward when I did it in &lt;code&gt;src/booking.gleam&lt;/code&gt; files and could access via &lt;code&gt;:booking.new()&lt;/code&gt;, but what if I had a file in a subdirectory? I checked it by creating a &lt;code&gt;src/transport/trains.gleam&lt;/code&gt; file and couldn't really find a way to call it from Elixir. I was close to the conclusion that it's impossible and you can only write publicly exported code in top-level namespace, but then I found how to list all the atoms defined for the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(1)&amp;gt; :application.get_key(:gleamixir_test, :modules)
{:ok, [GleamixirTest, :booking, :transport@trains]}
iex(2)&amp;gt; :transport@trains.example()
{:train, {:engine, "EU07", 160},
 [
   {:train_car, "Passenger double-decker", 160, "001"},
   {:train_car, "Postal", 120, "005"},
   {:train_car, "Passenger double-decker", 160, "002"},
   {:train_car, "Restaurant", 160, "600"}
 ]}
iex(3)&amp;gt; :transport@trains.example() |&amp;gt; :transport@trains.max_speed()
{:ok, 120}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, in short, you use &lt;code&gt;@&lt;/code&gt;-sign as a namespace separator.&lt;/p&gt;

&lt;p&gt;And this is the code of &lt;code&gt;trains&lt;/code&gt; module if you're interested:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import gleam/list
import gleam/int

pub type Train {
  Train(engine: Engine, cars: List(TrainCar))
}

pub type Engine {
  Engine(class: String, max_speed: Int)
}

pub type TrainCar {
  TrainCar(car_type: String, max_speed: Int, serial_number: String)
}

pub fn example() {
  Train(
    engine: Engine("EU07", 160),
    cars: [
      TrainCar("Passenger double-decker", 160, "001"),
      TrainCar("Postal", 120, "005"),
      TrainCar("Passenger double-decker", 160, "002"),
      TrainCar("Restaurant", 160, "600"),
    ],
  )
}

pub fn max_speed(train: Train) {
  [
    train.engine.max_speed,
    ..list.map(train.cars, fn(c: TrainCar) { c.max_speed })
  ]
  |&amp;gt; list.sort(by: int.compare)
  |&amp;gt; list.head()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>elixir</category>
      <category>gleam</category>
      <category>interlingua</category>
    </item>
    <item>
      <title>I like Svelte but...!</title>
      <author>BabakFP</author>
      <pubDate>Mon, 18 Oct 2021 20:29:50 +0000</pubDate>
      <link>https://dev.to/babakfp/i-like-svelte-but-14c0</link>
      <guid>https://dev.to/babakfp/i-like-svelte-but-14c0</guid>
      <description>&lt;p&gt;Hi&lt;br&gt;
Honestly, I do like &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; (SvelteJS, Svelte Framework) but there is a big problem...&lt;/p&gt;

&lt;p&gt;Today, I create a &lt;a href="https://github.com/sveltejs/svelte/pull/6851"&gt;PR request&lt;/a&gt; and &lt;strong&gt;it got me blocked&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The short story is that &lt;strong&gt;the community is toxic&lt;/strong&gt;. You can find really good people &lt;a href="https://svelte.dev/chat"&gt;(Svelte discord group)&lt;/a&gt; but a single &lt;code&gt;!good&lt;/code&gt; person can ruin everything (It's more that 1).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-is-my-deleted-comment-content"&gt;
  &lt;/a&gt;
  This is my deleted comment content:
&lt;/h3&gt;

&lt;p&gt;@Rich-Harris Hey, you may want to read this🙂&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;He means Accessibility: &lt;a href="https://en.wikipedia.org/wiki/Web_accessibility"&gt;https://en.wikipedia.org/wiki/Web_accessibility&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Is my changes 100% accessible?😂 Such a silly question!. Let me ask, is the Svelte site 100% accessible? Let me answer, it doesn't even cover the basics. Now I'm confused because I didn't see any PR's from you related to accessibility. Why is that?:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don't know what accessibility is. Maybe you do because you sent me a wiki link about it😂.&lt;/li&gt;
&lt;li&gt;You don't care about accessibility but you mention it in public.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did you (@dummdidumm) look at the commits? I'm sure you didn't because then you would know that I know what the heck accessibility is and I spend a good time making sure that it's accessible. But you didn't bother yourself, did you?&lt;/p&gt;

&lt;p&gt;previous commenters, they didn't look at what is changed, didn't look at the code, not even comments, and not even the commits. "Oh you did this but I don't know why!", You would know why, if you just take your time to review instead of questioning me.&lt;/p&gt;

&lt;p&gt;Thank you (@dummdidumm) for the article, but it's not related, because you don't use a select box for page navigation😂. It's like using a banana🍌 instead of a telephone📞.  Just because it was used before, it doesn't mean that you need to keep it🙂.&lt;/p&gt;

&lt;p&gt;It has keyboard navigation support. It's not a select box, so we don't need to use aria stuff like how explained in that article. I should have used nav. It's a hardcode test, it's not a community project. If you do something wrong, if the maintainers don't like you or for any reason, you'll be failed.&lt;/p&gt;

&lt;p&gt;Just because Microsoft, Apple did something, it doesn't mean that it's right. I'm sure some people going to say "Oh you think you are smarter than Apple and Microsoft?" 😂 Let's don't fool ourselves. Those products have problems that we are all faced with. Even there are some problems that they didn't fix since years ago.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Re the bottom buttons, I'm not sure if the change is needed, since the previous styles are also consistently used in other pages.&lt;br&gt;
@bluwy&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm not gonna explain that how horrible the old buttons are.&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/babakfp"&gt;@babakfp&lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please do, else this is just personal preference which is no good argument, because I for example actually like the previous version better.&lt;br&gt;
@dummdidumm&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;p&gt;"Hey, explain this thing to someone that didn't bother to read the commits, or to someone that didn't even read the code comments"&lt;br&gt;
No thanks😂&lt;/p&gt;

&lt;p&gt;Mr. @pngwn, if you see any problem in the code, you kindly ask the author to do the fixes (and of course you explain the problems and why and how). You don't just close the PR. There is 100 open PR's and you just couldn't help yourself not to close this one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;we don't want to introduce unnecessary dependencies for simple functionality like 'click outside'.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sure, just reinvent the wheels because who knows, you just don't like adding packages👏. Hearing this from someone that uses Svelte!🙂 (Not good for Svelte😂). "Oh, it's not good to import a 20 line pure Svelte component package into your project, it's very bad". Don't let MR. Rich sees it🙂.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'd encourage you to open an issue before making pull requests like this. Closing until that conversation has taken place.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I sawed a problem and I solved it. What is the need for an extra step? You can analyze my PR with the current version and in any subject, it is way much better.&lt;/p&gt;

&lt;p&gt;I don't understand why it has to be like this with the Svelte community.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I designed a UI and a logo for the SvelteKit and sent them into discord chat (it's related topic/group). Some users came and say their opinions. Didn't like any of them but as I said, they were an opinion with some more or less reason behind it. I and other users talk about this stuff and suddenly I see the cat removed. As you guessed, I was completely removed from the community🙂🙂. [🖕🏿] mail this to the person that removed me. Thanks.&lt;/li&gt;
&lt;li&gt;Two times or so, I asked a question on discord community and got replies like (You have a problem if you are trying to do just think/task. No one in the world does that, so you have a problem, and...)🙂.&lt;/li&gt;
&lt;li&gt;I decided to play with SvelteKit source and see what's up... My hours of time were wasted because of the poor documentation. I created a PR and explained very well, step by step to how to set up Svelte to develop it. Literally, some people came and said (Ah I don't understand it, the old version was better). &lt;a href="https://github.com/sveltejs/kit/pull/2399"&gt;You can be the judge&lt;/a&gt;. Then a maintainer came and applied his own version. Yes, the old version became better but it's not the same. I was the one having the problem, not a monster senior developer.&lt;/li&gt;
&lt;li&gt;Finally, I created this PR. Someone take his time to help and in the end he gets such a feedback. IT'T NOT SO GRAT.&lt;/li&gt;
&lt;li&gt;And what I see, I got removed from the discord community again (my second account). I wasn't even active on discord for the last few days. What happened? YOU DO THE MATH.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;COMMENT END'S HERE&lt;/p&gt;

&lt;p&gt;You can see the PR request from &lt;a href="https://github.com/sveltejs/svelte/pull/6851"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/richharris"&gt;@richharris&lt;/a&gt;
 &lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Parsing Addresses With Machine Learning</title>
      <author>Lob</author>
      <pubDate>Mon, 18 Oct 2021 20:10:45 +0000</pubDate>
      <link>https://dev.to/lob/parsing-addresses-with-machine-learning-19ae</link>
      <guid>https://dev.to/lob/parsing-addresses-with-machine-learning-19ae</guid>
      <description>&lt;p&gt;&lt;em&gt;Editor’s note: Dave Currie joined Lob’s Atlas team in June 2020 as a remote contractor. Working as the team’s Machine Learning Engineer, he has helped to improve the accuracy of the Address Verification product by developing microservices that utilize machine learning. This article was written about one of these microservices.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I tell people that my work is focused on improving an address verification product, I sometimes receive confused looks. If you think about a friend’s address, you might picture something like “1600 Pennsylvania Avenue, Washington, DC 20500”. An address as simple as this should be easy for a system to understand and verify if it exists or not. In this case, you’re right. Standard addresses that you’ve seen countless times before are quite easy to verify, but not all addresses are so simple.&lt;/p&gt;

&lt;p&gt;In this post, I’ll share how we use machine learning to continually improve our address verification product at Lob to ensure our customers’ mailpieces get delivered to as many recipients as possible.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-quality-issues"&gt;
  &lt;/a&gt;
  Data quality issues
&lt;/h2&gt;

&lt;p&gt;Lob’s Address Verification product receives millions of addresses everyday. When working at this scale, we see addresses with a range of formats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;757 Lawrence St Apart C Phila PA 23444 Philadelphia PA 23444&lt;/li&gt;
&lt;li&gt;931-29-176  Avenue Top Floor Queens NY 22577&lt;/li&gt;
&lt;li&gt;123 Blueriver Rd 1 Pkwy Court N Dallas TX 93847&lt;/li&gt;
&lt;li&gt;2883 Roosevelt Rd Ste 101 SLot 909 Deerborn MI 41982&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although these addresses all have some complexities, they still follow common patterns. Building a rules-based parsing system could be complex and difficult to iterate on as more patterns are added to it. However, this is where machine learning can excel as it will detect these patterns as you add more training examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ship-fast-and-iterate"&gt;
  &lt;/a&gt;
  Ship fast and iterate
&lt;/h2&gt;

&lt;p&gt;Given the benefits that machine learning can provide to this problem, we wanted to get a solution into production as soon as possible. The question became, how do we quickly train a model, especially when Lob has so much address data to choose from? The answer, active learning.&lt;/p&gt;

&lt;p&gt;Active learning is a cyclical process of identifying the most useful training examples, labelling these, and retraining the model. We started with a list of 100,000 unique addresses (this large number makes it more likely that uncommon address formats will be included in the dataset), labelled 10 of these with their address labels (e.g., primary number, street name, zip code), trained the model using just these 10 examples, then predicted the parsings along with a confidence of these parsings on the remaining 999, 990 addresses.&lt;/p&gt;

&lt;p&gt;After using just 10 training examples, it was easy to see that the model was beginning to understand patterns in the data. For example, primary numbers are often the numbers at the start of an address and states are often the two letters before the zip code. Choosing the next set of 10 addresses to label and add to the training data is easy, pick 10 that the model has low confidence in how to parse.&lt;/p&gt;

&lt;p&gt;This iterative process of training and labelling continued until the model could provide a net benefit to our address verification product. At this point, we moved our machine learning parsing model into production and provided our customers with the added benefit of a more accurate service. Model development will continue to further increase its accuracy, primarily by adding more training examples and better standardization of the input address.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#standardizing-the-input-address"&gt;
  &lt;/a&gt;
  Standardizing the input address
&lt;/h2&gt;

&lt;p&gt;We can train a performant address parser with fewer training examples by standardizing the input address. By reducing the complexity of the task, the model requires fewer training examples to become proficient. Methods to standardize the input address can include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making all of the text uppercase&lt;/li&gt;
&lt;li&gt;Removing unnecessary symbols: #(),%;_:&amp;lt;&amp;gt;{}&lt;/li&gt;
&lt;li&gt;Correcting typos, e.g., “Sourth” to “South”&lt;/li&gt;
&lt;li&gt;Separating words, e.g., “Rodeodrive” to “Rodeo drive”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-need-for-speed"&gt;
  &lt;/a&gt;
  The need for speed
&lt;/h2&gt;

&lt;p&gt;A key feature of our address verification product is speed. Therefore, the library we chose to help build our address parser had to be up for the task. After comparing a few options, we chose &lt;a href="https://github.com/explosion/spaCy"&gt;spaCy&lt;/a&gt;. Given its state-of-the-art speed, named entity recognition feature, and documentation, spaCy is very suitable for this task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-evaluation"&gt;
  &lt;/a&gt;
  Model evaluation
&lt;/h2&gt;

&lt;p&gt;Measuring the performance of an address parser (or any &lt;a href="https://en.wikipedia.org/wiki/Named-entity_recognition"&gt;named entity recognition&lt;/a&gt; [NER] model) won’t use traditional metrics from regression or classification problems. We chose the &lt;a href="https://studymachinelearning.com/jaccard-similarity-text-similarity-metric-in-nlp/"&gt;Jaccard coefficient&lt;/a&gt; as it is well suited for the evaluation of NER models. The parser’s performance on each address label was measured, then these scores were aggregated into a weighted average to compare the overall performance between two versions of the model. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With a well-defined problem and plenty of data that is ready for labelling, a machine learning solution can be delivered in a matter of weeks. The quick feedback loop that active learning provides will help you to reach the desired performance much faster than labelling random examples. If possible, reduce the complexity for the model by standardizing the input data.&lt;/p&gt;

&lt;p&gt;See Lob in action. &lt;a href="https://www.lob.com/sales"&gt;Request a demo today&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>programming</category>
    </item>
    <item>
      <title>Database says NOPE</title>
      <author>Matthew</author>
      <pubDate>Mon, 18 Oct 2021 20:04:40 +0000</pubDate>
      <link>https://dev.to/mtfoley/database-says-nope-41p0</link>
      <guid>https://dev.to/mtfoley/database-says-nope-41p0</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/SXOdjPojfeOXzgc0J1/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SXOdjPojfeOXzgc0J1/giphy.gif" alt="password"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I joined &lt;a href="https://virtualcoffee.io"&gt;Virtual Coffee&lt;/a&gt; last week and they have this awesome zoom meeting that members occasionally spin up for pairing and coworking. A great dev named &lt;a href="https://github.com/LincolnFleet"&gt;Travis Martin&lt;/a&gt; was adapting an existing project that had an app bundled with a Postgres v9 DB in a docker context, and he was trying to redeploy it in a different context with a newer version of Postgres.  At the point I joined the zoom meeting, the app was having trouble authenticating to Postgres.&lt;/p&gt;

&lt;p&gt;I've worked with a few different databases before, and I'd contributed to the &lt;a href="https://github.com/Team-TAU/tau"&gt;TAU project&lt;/a&gt; in the past which uses Django and Postgres.  As I tried to make suggestions, I referred to a few of the bootstrapping scripts I encountered on that project, and they helped to some degree of making sure all the pieces were in place in the database server (pasted below):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check if user exists: &lt;code&gt;SELECT COUNT(*) AS count FROM pg_catalog.pg_user WHERE usename={db_user}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;check if database exists: &lt;code&gt;SELECT COUNT(*) AS count FROM pg_database WHERE datname={db_name}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;create the database if needed: &lt;code&gt;CREATE DATABASE {db_name};&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;create the user if needed: &lt;code&gt;CREATE USER {db_user} WITH ENCRYPTED PASSWORD '{db_pw}';&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;assign privileges: &lt;code&gt;GRANT ALL PRIVILEGES ON DATABASE {db_name} TO {db_user}; # use with care&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;update user password if needed: &lt;code&gt;ALTER USER {db_user} WITH ENCRYPTED PASSWORD '{db_pw}'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, after using statements like these to make sure the DB server was setup correctly, we still were getting the same error message. Travis verified all sorts of things, like whether the app had access to the environment variables he wanted. We had a big clue when he attempted to authenticate to the Postgres over the &lt;code&gt;psql&lt;/code&gt; command with the app's credentials, and he didn't get an opportunity to enter a password.  The trick turned out to be that he was logged into the OS with the same username, configured earlier in the deployment process. As we got to reading further in the &lt;a href="https://www.postgresql.org/docs/12/auth-pg-hba-conf.html"&gt;Postgres docs&lt;/a&gt;, we found that the Postgres configuration file &lt;code&gt;pg_hba.conf&lt;/code&gt; had the authentication method set to "ident", which relies on a separate &lt;br&gt;
"ident" service, and in order to get things working, Travis set the authentication method to different option more appropriate for clients leveraging usernames and encrypted passwords.&lt;/p&gt;

&lt;p&gt;This was a pretty specific use case, but maybe it'll help somebody!&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>javascript</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>How React Works Under The Hood</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 18 Oct 2021 19:38:18 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-react-works-under-the-hood-1jbg</link>
      <guid>https://dev.to/ubahthebuilder/how-react-works-under-the-hood-1jbg</guid>
      <description>&lt;p&gt;How does React actually work beyond the syntactic sugar?  &lt;/p&gt;

&lt;p&gt;This question has dominated my thoughts for a very long time. My curiosity led me into carrying out a deep research on React, and my findings were quite interesting. &lt;/p&gt;

&lt;p&gt;My quest to demystify React was one of the most eye-opening things I have ever undertaken.&lt;/p&gt;

&lt;p&gt;So if you also interested in finding out how React really works under the hood then you’re at the right place. &lt;/p&gt;

&lt;p&gt;In this article, I am going to share some of my interesting discoveries about the inner workings of React, in regards to the rendering process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-the-dom-and-essence-of-react"&gt;
  &lt;/a&gt;
  HTML, The DOM and Essence of React
&lt;/h3&gt;

&lt;p&gt;We all know that a web page is structured using HTML. Hence, web pages are basically HTML Documents. &lt;/p&gt;

&lt;p&gt;A HTML document can be modified through an API called the DOM using methods like &lt;code&gt;querySelectorAll()&lt;/code&gt;, &lt;code&gt;getElementsById()&lt;/code&gt; and so on. &lt;/p&gt;

&lt;p&gt;After modification, the web browser has to re render the page to reflect those changes. &lt;/p&gt;

&lt;p&gt;However, this process is very expensive for the web browser to undertake. So if you have a page which changes regularly (aka a dynamic web page), then directly manipulating the DOM would be very inefficient.&lt;/p&gt;

&lt;p&gt;In fact, it is slower to repaint the DOM than it to create 10,000 objects with JavaScript. &lt;/p&gt;

&lt;p&gt;This fact predicates the existence and usefulness of React as a library.&lt;/p&gt;

&lt;p&gt;React provides you with a declarative way to create user interfaces. In other words, you don’t have to specify how exactly you want your web page to be rendered, or how the elements should be inserted. Instead you are more concerned with what elements to create and describing how they should look and behave.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-elements-are-just-objects"&gt;
  &lt;/a&gt;
  React Elements are just Objects
&lt;/h3&gt;

&lt;p&gt;You may or may not have known this, but React is just a tree of JavaScript objects. &lt;/p&gt;

&lt;p&gt;For example, consider the following functional component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In React, a component is a class or function which describes the UI which you want to create on your webpage. &lt;/p&gt;

&lt;p&gt;A React element is basically a description of the UI which you ultimately want to insert into the DOM. Hence, a React element is not a DOM element until the &lt;code&gt;render()&lt;/code&gt; method of the ReactDOM library is called.&lt;/p&gt;

&lt;p&gt;When a component is called from a Parent, React will call the &lt;code&gt;render()&lt;/code&gt; method on that child element and return a React element, which is just a plain object with certain properties. &lt;/p&gt;

&lt;p&gt;For example, calling the above functional component actually returns the following object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;$$typeof&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
        &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The object contains certain properties.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;type&lt;/strong&gt;: This is a reference to the type of tag used. If an in-built DOM HTML element (such as main, div etc) is used, then the type points to the string representation of that DOM element. But if you import a custom React component using the typical &lt;code&gt;import ...&lt;/code&gt; syntax, then you are referencing to a component element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;key&lt;/strong&gt;: This property is used to identify an element amongst other children using unique values. This is usually when iterating over a list of children elements.&lt;br&gt;
Ref: a reference to an actual DOM node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;typeOf&lt;/strong&gt;: The value of this property is always a symbol. Symbol is a JacaScipt data type introduced in ES6. The object takes in a value and returns a unique symbol. In the case of React, the Symbol object takes in a react.element. This is a protection feature against cross-scripting attacks. The feature  is used a identify React elements to avoid scenarios where malicious values is passed to React.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;props&lt;/strong&gt;: This contains all of the elements children. If the component has multiple children, then the children property will be an array instead of an object. Each object has the same set of properties.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now this object is what we call the &lt;strong&gt;virtual DOM&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The process of building up these objects is significantly cheaper than directly writing to the DOM. So instead of making direct modifications to the DOM, we can create a virtual DOM and make modifications on that object tree instead.&lt;/p&gt;

&lt;p&gt;React creates a tree of elements whenever the render function is called.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reconciliation"&gt;
  &lt;/a&gt;
  Reconciliation
&lt;/h3&gt;

&lt;p&gt;Reconciliation houses the diffing algorithm which determines what part of the tree we should replace. &lt;/p&gt;

&lt;p&gt;In other words, this is how React reconciles the DOM tree with the React element tree when a change is made. &lt;/p&gt;

&lt;p&gt;The diffing algorithm is the way which we can tell difference between the two trees and determine what parts of the tree we need to replace.&lt;/p&gt;

&lt;p&gt;One important behaviour of React is how it reacts to type change on the top-level (root) element. &lt;/p&gt;

&lt;p&gt;In such a case, React tears down the whole element tree and builds up a new tree.&lt;/p&gt;

&lt;p&gt;For example if the &lt;code&gt;div&lt;/code&gt; tag were to change to a &lt;code&gt;span&lt;/code&gt; tag, then React will destroy the entire tree along with the DOM nodes. The following will also happen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All old component instance (in &lt;code&gt;div&lt;/code&gt;) will receive componentWillUnmount and equivalent useEffect hook&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New component tree will be built up with &lt;code&gt;span&lt;/code&gt; as root element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React will start rerendering again&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New nodes will inserted to the DOM&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New components will receive componentWillMont and then ComponentDidMount and their useEffects hook will run&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The old props and state (for div) will be discarded&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there is only a property change, then React will only update  the changed property, and not tear down the entire tree. &lt;/p&gt;

&lt;p&gt;So assuming we are moving from one product item to another product item as in the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ProductList&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="nx"&gt;Five&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ProductList&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ProductList&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="nx"&gt;Six&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ProductList&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React will maintain the same component instances, pass in a new &lt;code&gt;id&lt;/code&gt; props and then rerender so we navigate to a different page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#children"&gt;
  &lt;/a&gt;
  Children
&lt;/h4&gt;

&lt;p&gt;Suppose we have a list of and we insert a new movie to the beginning of the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React has no way of knowing that a changes has occurred and where exactly the change happened. &lt;/p&gt;

&lt;p&gt;As a result, React would tear down the tree and rebuild a new tree, but this is highly inefficient. &lt;/p&gt;

&lt;p&gt;Instead, you should pass a unique value to the key property of each child. &lt;/p&gt;

&lt;p&gt;React will recursively check for the unique values of the key properties and compare them. That way, it will know where on the list to insert the new item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;First&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Second&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rendering-to-the-dom"&gt;
  &lt;/a&gt;
  Rendering to the DOM
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This process triggers the reconciliation process which builds up the DOM tree, the React element tree and the entire diffing process. Then React eventually inserts the React Component tree into the Browser DOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;We have seen that React Elements are just regular objects. For all nested component, React generates a tree of objects which makes up the virtual DOM.&lt;/p&gt;

&lt;p&gt;When then make updates on the virtual DOM through a process known as reconciliation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P/S: Get weekly roundup of the best articles on web development by signing up to my  &lt;a href="https://www.getrevue.co/profile/techwithking"&gt;newsletter&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a unique ID in React JS</title>
      <author>Saleh-Mubashar</author>
      <pubDate>Mon, 18 Oct 2021 19:37:21 +0000</pubDate>
      <link>https://dev.to/salehmubashar/create-a-unique-id-in-react-js-3f75</link>
      <guid>https://dev.to/salehmubashar/create-a-unique-id-in-react-js-3f75</guid>
      <description>&lt;p&gt;Hi Guys&lt;br&gt;
Ok so in this post I will be giving you guys&lt;br&gt;
the simple steps to create a unique reference&lt;br&gt;
ID in react JS.&lt;br&gt;
This has many uses such as giving a user uploaded&lt;br&gt;
image a unique name for saving in a database.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h3&gt;

&lt;p&gt;Install &lt;strong&gt;UUID&lt;/strong&gt; v4 using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install uuidv4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h3&gt;

&lt;p&gt;Import the package into your component, page or code etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;v4&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h3&gt;

&lt;p&gt;You can now assign the Uinique ID to any variable using the below code&lt;br&gt;
&lt;em&gt;Nameref is an example here, it can be any variable name.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila!, you're done.&lt;/p&gt;

&lt;p&gt;Thanks you all for reading this post.&lt;br&gt;
If it was helpful, please consider following :)&lt;br&gt;
Until next time&lt;br&gt;
Bye! &lt;/p&gt;

</description>
    </item>
    <item>
      <title>3 Python Mini Projects with code you can build now.</title>
      <author>Drishti Peshwani</author>
      <pubDate>Mon, 18 Oct 2021 19:31:38 +0000</pubDate>
      <link>https://dev.to/drishtipeshwani/3-python-mini-projects-with-code-you-can-build-now-16cf</link>
      <guid>https://dev.to/drishtipeshwani/3-python-mini-projects-with-code-you-can-build-now-16cf</guid>
      <description>&lt;p&gt;In today's post, I will be sharing three fun python mini projects with code that you can start building now. So, let's begin -&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-random-password-generator"&gt;
  &lt;/a&gt;
  1. Random Password Generator
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;In this project, we will be writing a python program to generate random passwords.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; - Here, we are first asking the user for the size of the desired password. After this, we define a long string consisting of alphabets, numbers, and special symbols. Once we have obtained the size, we will use the random.sample() function to generate a string of random characters of a given size.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzUCPwil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7hqi8vcv5ai9q4fp89r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzUCPwil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7hqi8vcv5ai9q4fp89r.png" alt="import random.py - Visual Studio Code 20-09-2021 10_20_12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-convert-pdf-text-to-audiobook"&gt;
  &lt;/a&gt;
  2. Convert PDF Text to Audiobook
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;In this project, we will be writing a python program that can be used to convert PDF text to audiobook.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; - We will be using pyttsx3 python library to convert text to speech. &lt;br&gt;
&lt;strong&gt;Installation&lt;/strong&gt; - We will first install pyttsx3 and PyPDF2 packages. &lt;br&gt;
&lt;strong&gt;References&lt;/strong&gt; - &lt;a href="https://pypi.org/project/pyttsx3/"&gt;https://pypi.org/project/pyttsx3/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rb9KEYs4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byalh1lvpgbfz2bsvfr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rb9KEYs4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byalh1lvpgbfz2bsvfr1.png" alt="import random.py - Visual Studio Code 20-09-2021 13_03_50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-email-slicer-program"&gt;
  &lt;/a&gt;
  3. Email Slicer Program
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;In this project, we will be writing a python program to fetch our username and domain name from our email address&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; - We know that the username and domain name are separated by a @ character, so we will be basically dividing our entire email into 2 strings using @ as a divider.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlQAuC5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwcka3l709k7efekuy65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlQAuC5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwcka3l709k7efekuy65.png" alt="import random.py - Visual Studio Code 20-09-2021 13_09_55"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found these mini-projects useful and interesting and will build these projects, as the best way to learn any programming language is by building projects.&lt;/p&gt;

&lt;p&gt;If you enjoyed working on these projects, you can also participate in &lt;strong&gt;Hack This Fall 2.0&lt;/strong&gt; and explore building advanced projects. Hack This Fall is a 48 Hours virtual hackathon that aims at nurturing your new ideas and prototypes in various domains. You can check out the official website to get more information and register for the hackathon - &lt;a href="https://hackthisfall.tech/"&gt;https://hackthisfall.tech/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, don't forget to use my referral code &lt;strong&gt;HTFHE092&lt;/strong&gt; while registering.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Functional Programming with JS</title>
      <author>Mahmoud Hassan</author>
      <pubDate>Mon, 18 Oct 2021 19:26:17 +0000</pubDate>
      <link>https://dev.to/trezeguit/functional-programming-with-js-1bgd</link>
      <guid>https://dev.to/trezeguit/functional-programming-with-js-1bgd</guid>
      <description>&lt;p&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; is a programming paradigm designed to handle pure mathematical functions. This paradigm is totally focused on writing more compounded and pure functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Functional programming&lt;/strong&gt; is a particular kind of &lt;strong&gt;declarative programming&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, you need to know the difference between declarative programming and imperative programming, they are js paradigms or techniques to organize your code.&lt;br&gt;
In imperative programming, we specify the program logic describing the flow control.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let name = "Ali";
let Greeting = "Hi, ";
console.log(Greeting , name);  // Hi,  Ali
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the opposite, declarative programming we specify the program logic without describing the flow control&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Greeting = (name) =&amp;gt; {
    console.log('Hi, ',name);
}

Greeting("Ali"); // Hi, Ali
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, as you have noticed, the &lt;strong&gt;functional programming&lt;/strong&gt; focuses on the code being clean, organized, and reused through&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Pure Functions&lt;/strong&gt;: 
  are simple and reusable. They are completely independent of the outside state(global variables), easy to refactor, test and debug.
A pure function is a function which given the same input, will always return the same output.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const add = (x,y) =&amp;gt; {
    console.log(x+y);
}
add(5,4) // 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Math.random&lt;/code&gt; is a popular example of not pure function.&lt;br&gt;
another example for not pure function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let count = 0;
const incCount = (value) =&amp;gt; count += value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;*** Higher-Order Functions***: they can receive a function as a parameter(callback) and also can return a function, they are very helpful for writing complex functions.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const animals = ["Cat", "Dog", "Elephant",
 "Giraffe", "Lion", "Monkey"];
const zooWithoutCat = animals.filter(animal =&amp;gt; animal !== "Cat");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note ==&amp;gt; Don't Iterate&lt;/strong&gt; you can use higher-order functions like map, filter, reduce, find...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let numbers = [2, 4, 6];
let numbersX2 = numbers.map(number =&amp;gt; number*2); // [ 4, 8, 12 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Avoid Mutability&lt;/strong&gt;: you must avoid changing the data.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let num1 = [1, 2, 3];
let num2 = num1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;any change in num2 affects num1 (mutability), we can fix this problem by using higher-order functions or spread operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let num2 = [...num1];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Persistent Data Structures for Efficient Immutability&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Think of all data as immutable, never changing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;the problem with immutability is that you need to copy all data for a little change and this can give you efficiency problems, because you will use a lot of space, so &lt;strong&gt;What is the solution?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Don't Worry&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
there are many of js libraries that handle this problem like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mori&lt;/li&gt;
&lt;li&gt;Immutable.js&lt;/li&gt;
&lt;li&gt;Underscore&lt;/li&gt;
&lt;li&gt;Lodash&lt;/li&gt;
&lt;li&gt;Ramda
they depend on structural sharing idea 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRSXyAn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du4myz2e9lpubaoxljlp.jpg" alt="Image description"&gt;
Note that the yellow squares are shared between 2 variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thanks for your time&lt;/strong&gt;&lt;br&gt;
you can add me on LinkedIn: &lt;a href="https://www.linkedin.com/in/mahmoudhassan7764"&gt;Link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>programming</category>
    </item>
    <item>
      <title>Using the new JavaScript .at() method</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 18 Oct 2021 19:18:15 +0000</pubDate>
      <link>https://dev.to/logrocket/using-the-new-javascript-at-method-7k6</link>
      <guid>https://dev.to/logrocket/using-the-new-javascript-at-method-7k6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ibadehinmojeed/"&gt;Ibadehin Mojeed&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;The JavaScript &lt;code&gt;.at()&lt;/code&gt; method was introduced in the August release of the ECMA International TC39’s relative indexing proposal to allow developers to grab elements based on their indexes.&lt;/p&gt;

&lt;p&gt;Selecting elements in JavaScript is a common occurrence in development, but, before the introduction of the &lt;code&gt;.at()&lt;/code&gt; method, JavaScript had existing methods and techniques to select elements or characters from the start or end of lists or within a string.&lt;/p&gt;

&lt;p&gt;The bracket notation, &lt;code&gt;[]&lt;/code&gt;, is commonly used to get an element at a specific index. But, this has its drawbacks. For instance, we cannot use a negative index syntax like &lt;code&gt;arr[-1]&lt;/code&gt; to access the last item in a list, which has become popular in Python.&lt;/p&gt;

&lt;p&gt;Consequently, developers resort to using the &lt;code&gt;slice()&lt;/code&gt; method and the &lt;code&gt;length&lt;/code&gt; property to grab items from the end of a list. Nonetheless, they also have their respective drawbacks.&lt;/p&gt;

&lt;p&gt;In this tutorial, we’ll look at the JavaScript &lt;code&gt;.at()&lt;/code&gt; method, its use cases, and how it can improve developers’ experiences compared to preexisting methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-indexable-object-prototype"&gt;
  &lt;/a&gt;
  The indexable object prototype
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.at()&lt;/code&gt; method is located on the &lt;a href="https://blog.logrocket.com/interfaces-in-typescript-what-are-they-and-how-do-we-use-them-befbc69b38b3/#indexable-properties-interfaces"&gt;&lt;code&gt;prototype&lt;/code&gt;of indexable objects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These objects, which can formulate index entries, include classes like &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, and &lt;code&gt;TypedArray&lt;/code&gt;, which are &lt;code&gt;Array.prototype.at()&lt;/code&gt;, &lt;code&gt;String.prototype.at()&lt;/code&gt;, and &lt;code&gt;%TypedArray%.prototype.at()&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;p&gt;Because of this, we can perform the &lt;code&gt;.at()&lt;/code&gt; method directly on these indexable objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existing-methods-for-getting-list-elements"&gt;
  &lt;/a&gt;
  Existing methods for getting list elements
&lt;/h2&gt;

&lt;p&gt;To see the benefits of the &lt;code&gt;.at()&lt;/code&gt; method, we will quickly walk through some of the existing methods for comparison purposes. This will also serve as a refresher for beginners.&lt;/p&gt;

&lt;p&gt;Let’s consider an array of elements called &lt;code&gt;arr&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using the bracket notation, &lt;code&gt;[]&lt;/code&gt;, on the &lt;code&gt;arr&lt;/code&gt; array, we can get an element at a specific index. For instance, &lt;code&gt;arr[0]&lt;/code&gt; returns the first element, &lt;code&gt;1&lt;/code&gt;, and so on. But, to get an item from the end of an unknown length, we use the &lt;code&gt;length&lt;/code&gt; property or the &lt;code&gt;slice()&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-raw-length-endraw-property"&gt;
  &lt;/a&gt;
  Using the &lt;code&gt;length&lt;/code&gt; property
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;length&lt;/code&gt; property’s syntax is written as the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;N&lt;/code&gt; equals the nth element from the end of a list, and by using the syntax, we can grab any element from the end of that list.&lt;/p&gt;

&lt;p&gt;In the following code, we use the syntax to grab the last element of the &lt;code&gt;arr&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Expected Output: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works fine, but the syntax can be inconvenient and tedious for a simple task. Besides, one of its drawbacks when working with the returned value of a function compels us to first store the returned value in a variable before applying the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;appendNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tempArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;appendNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tempArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tempArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, the returned value of the &lt;code&gt;appendNumber()&lt;/code&gt; function is first stored in the &lt;code&gt;tempArr&lt;/code&gt; variable before the &lt;code&gt;length&lt;/code&gt; property is applied.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-slice-endraw-method"&gt;
  &lt;/a&gt;
  The &lt;code&gt;slice()&lt;/code&gt; method
&lt;/h3&gt;

&lt;p&gt;Developers can also &lt;a href="https://blog.logrocket.com/javascript-array-methods/slice"&gt;employ the &lt;code&gt;slice()&lt;/code&gt; method&lt;/a&gt; to grab the last item of a list using the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This syntax allows a negative index, something you’ll see in the &lt;code&gt;.at()&lt;/code&gt; method later in this tutorial.&lt;/p&gt;

&lt;p&gt;The negative index here indicates an offset from the end of the array. For instance, &lt;code&gt;slice(-1)&lt;/code&gt; removes the last item from the back and returns a new array; &lt;code&gt;slice(-2)&lt;/code&gt; removes the last two, and so on.&lt;/p&gt;

&lt;p&gt;But here, the focus is on the last item, hence &lt;code&gt;slice(-1)&lt;/code&gt; in the syntax. Then, the &lt;code&gt;[0]&lt;/code&gt; notation selects the item at that index.&lt;/p&gt;

&lt;p&gt;Using the syntax, we can grab the last item of the &lt;code&gt;arr&lt;/code&gt; array like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike the &lt;code&gt;length&lt;/code&gt; property above, this method does not force us to store the returned value of a function before using the syntax. Hence making it more flexible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;appendNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appendNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nonetheless, the syntax looks odd and doesn’t portray its intention. And of course, it can be inconvenient as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-not-access-the-last-array-element-with-raw-arr1-endraw-"&gt;
  &lt;/a&gt;
  Why not access the last array element with&lt;code&gt;arr[-1]&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;This question often comes up from JavaScript beginners, especially if they come from a programming language like Python.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;arr[-1]&lt;/code&gt; notation in JavaScript is a valid object property. Remember everything in JavaScript, including arrays, are objects. So anytime we use the bracket notation, for instance, &lt;code&gt;arr[0]&lt;/code&gt;, we reference the property of the object with the key &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By rewriting the &lt;code&gt;arr&lt;/code&gt; array in the object notation, we have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we don’t have a key &lt;code&gt;-1&lt;/code&gt;. So, &lt;code&gt;arr[-1]&lt;/code&gt; returns a value of &lt;code&gt;undefined&lt;/code&gt;. If the object property has a key &lt;code&gt;-1&lt;/code&gt;, as seen in the code below, &lt;code&gt;arr[-1]&lt;/code&gt; returns its corresponding value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;valid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: valid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means we can’t use the &lt;code&gt;arr[-1]&lt;/code&gt; to grab the last element because it’s a valid syntax already. To use the negative index syntax to return an element from the end of a list, we will use the &lt;code&gt;.at()&lt;/code&gt; method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-at-endraw-syntax"&gt;
  &lt;/a&gt;
  The &lt;code&gt;.at()&lt;/code&gt; syntax
&lt;/h2&gt;

&lt;p&gt;When using the &lt;code&gt;.at()&lt;/code&gt; syntax, it receives an index of an item to return. When passing a negative index, it counts from the end of the list or string and returns the item or character found. Else, it returns &lt;code&gt;undefined&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-raw-at-endraw-method-in-practice"&gt;
  &lt;/a&gt;
  The &lt;code&gt;.at()&lt;/code&gt; method in practice
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, the &lt;code&gt;.at()&lt;/code&gt; method receives an index of the item to return. In this section, we will cover its use cases.&lt;/p&gt;

&lt;p&gt;Let’s revisit the &lt;code&gt;arr&lt;/code&gt; array and see how the &lt;code&gt;.at()&lt;/code&gt; method allows us to seamlessly return an index element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: "three"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a positive index passes to the &lt;code&gt;.at()&lt;/code&gt; method, it returns the element at that index. For a negative index, it counts back from the last element in the list and returns the element.&lt;/p&gt;

&lt;p&gt;In the above code, &lt;code&gt;at(-1)&lt;/code&gt; counts one from the end of the array and returns &lt;code&gt;false&lt;/code&gt;, which is the element found. In the same way, &lt;code&gt;at(-3)&lt;/code&gt; counts three from the end and returns &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Like arrays, we can do the same for strings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The last alphabet is z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: T&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, this method is pleasant to use. With just &lt;code&gt;.at(-1)&lt;/code&gt;, we get the last character of the &lt;code&gt;str&lt;/code&gt; string. If we did the same task with the &lt;code&gt;length&lt;/code&gt; property, we would have a longer syntax, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#working-with-the-returned-value-of-a-function"&gt;
  &lt;/a&gt;
  Working with the returned value of a function
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;.at()&lt;/code&gt; method, unlike the &lt;code&gt;length&lt;/code&gt; property, does not compel us to store the returned value of a function in a variable before we can use it.&lt;/p&gt;

&lt;p&gt;The following code outputs the last element pushed to an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;appendNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;N&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appendNumber&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Expected Output: 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code, the &lt;code&gt;.at()&lt;/code&gt; method applies directly to the returned value without first storing the value in a variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-at-endraw-method-accepts-numbers-with-a-decimal"&gt;
  &lt;/a&gt;
  The &lt;code&gt;.at()&lt;/code&gt; method accepts numbers with a decimal
&lt;/h3&gt;

&lt;p&gt;When a number with a decimal passes to the &lt;code&gt;.at()&lt;/code&gt; method, it considers the value before the decimal point and returns the item at that index.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, the first console outputs the item at the &lt;code&gt;0&lt;/code&gt; index while the second console counts three from the end of the array and outputs the found item.&lt;/p&gt;

&lt;p&gt;This is beneficial when we want to randomly select an index element. This can be demonstrated with a rock-paper-scissors game project. We can use the &lt;code&gt;.at()&lt;/code&gt; method syntax to determine a random selection for the computer.&lt;/p&gt;

&lt;p&gt;The following code illustrates how we can apply the &lt;code&gt;.at()&lt;/code&gt; method to randomly select the computer’s choice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;computerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rock&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;paper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scissors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;computerOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;computerOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjHvoUBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/rock-paper-scissors-generator.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjHvoUBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/rock-paper-scissors-generator.png" alt='Rock-Paper-Scissors Generator Showing "Paper," "Rock,""Paper"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/wonderful-river-dttqe?file=/script.js"&gt;Try it yourself on CodeSandbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/building-random-number-generator-javascript-nodejs/"&gt;With&lt;code&gt;Math.random()&lt;/code&gt;&lt;/a&gt;, we get a floating-point number between &lt;code&gt;0&lt;/code&gt; (inclusive) and the array length. Then, when the &lt;code&gt;.at()&lt;/code&gt; method receives this floating-point number as an index, it considers the value before the decimal point and returns the element at that index.&lt;/p&gt;

&lt;p&gt;Using the square bracket notation for the same task is not possible unless we first floor the random number (that is, round the number down to the nearest integer), as seen in the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;computerOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;computerOptions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because the bracket notation returns an &lt;code&gt;undefined&lt;/code&gt; value for numbers with decimals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Expected Output: undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;.at()&lt;/code&gt; method saves us the extra steps of using &lt;code&gt;Math.floor&lt;/code&gt; to floor a random number.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h3&gt;

&lt;p&gt;At the time of writing this tutorial, the &lt;code&gt;.at()&lt;/code&gt; method works pretty well with the popular modern browsers, except a few. See &lt;a href="https://caniuse.com/mdn-javascript_builtins_array_at"&gt;browser support here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxQFIzLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/at-browser-support.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxQFIzLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/at-browser-support.png" alt="Browser Support For Using The At() Method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.at()&lt;/code&gt; method, as we have seen in this tutorial, is pleasant when grabbing items based on their index. It is also concise to use compared to the preexisting methods.&lt;/p&gt;

&lt;p&gt;If you have any questions or contributions, please share them in the comment section. And if you like this tutorial, endeavor to share it around the web.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-debug-javascript-errors-more-easily-by-understanding-the-context"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Debug JavaScript errors more easily by understanding the context
&lt;/h2&gt;

&lt;p&gt;Debugging code is always a tedious task. But the more you understand your errors the easier it is to fix them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; allows you to understand these errors in new and unique ways. Our frontend monitoring solution tracks user engagement with your JavaScript frontends to give you the ability to find out exactly what the user did that led to an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fD6-0SwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2020/06/reproduce-javascript-errors.gif" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LogRocket records console logs, page load times, stacktraces, slow network requests/responses with headers + bodies, browser metadata, and custom logs. Understanding the impact of your JavaScript code will never be easier!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Angular Developer Roadmap</title>
      <author>CodingTute</author>
      <pubDate>Mon, 18 Oct 2021 19:10:54 +0000</pubDate>
      <link>https://dev.to/codingtute/angular-developer-roadmap-ie3</link>
      <guid>https://dev.to/codingtute/angular-developer-roadmap-ie3</guid>
      <description>&lt;p&gt;&lt;a href="https://codingtute.com/angular-developer-roadmap/"&gt;Angular Developer Roadmap&lt;/a&gt; will help you to start your angular learning path in an organized way.&lt;br&gt;
You can find more useful developer content at &lt;a href="https://codingtute.com"&gt;codingtute&lt;/a&gt; and follow &lt;a href="https://www.facebook.com/codingtute"&gt;facebook&lt;/a&gt; page for latest updates&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eUiTFXH2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codingtute.com/wp-content/uploads/2021/10/Angular-Developer-Roadmap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUiTFXH2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codingtute.com/wp-content/uploads/2021/10/Angular-Developer-Roadmap.png" alt="Angular Developer Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How we created a web-based typing experiment</title>
      <author>Lyokolux</author>
      <pubDate>Mon, 18 Oct 2021 19:10:48 +0000</pubDate>
      <link>https://dev.to/lyokolux/how-we-created-a-web-based-typing-experiment-1mdk</link>
      <guid>https://dev.to/lyokolux/how-we-created-a-web-based-typing-experiment-1mdk</guid>
      <description>&lt;p&gt;We had little time, an experience to build and now to spread.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-goal-of-the-experiment"&gt;
  &lt;/a&gt;
  🎯 The goal of the experiment
&lt;/h2&gt;

&lt;p&gt;The objective of this study is to determine the optimal way to display and to type alphanumeric sequences (such as identifiers, order numbers, etc.). According to research in cognitive psychology, it is easier to read and copy elements that are grouped in chunks of 2 or 3, rather than placed one after the other without grouping. Can we prove it ?&lt;br&gt;
So we made a tiny app everyone can try: &lt;a href="https://ux-typing-experiment-five.vercel.app"&gt;https://ux-typing-experiment-five.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%9B-how-we-created-it-"&gt;
  &lt;/a&gt;
  🏛 How we created it ?
&lt;/h2&gt;

&lt;p&gt;We had 3 well-known challenges to build this project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a web interface&lt;/li&gt;
&lt;li&gt;store the data of the experiment&lt;/li&gt;
&lt;li&gt;make it available&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and a little time dedicated to it :'(&lt;/p&gt;

&lt;p&gt;There is a lot of web framework around here (Vue, React, ...Angular) but we wanted to try something different and new. As Svelte becomes well-tooled, we wanted to give it a try. Its minimalist architecture, while being efficient, convinced us. The learning curve is fast. Perfect ! Add a slider and here we go to design each pages.&lt;/p&gt;

&lt;p&gt;Hosting the data must be fast and easy. The free tier of Firestore fits our need for this project. Drawing and setup a relational database was overkill for it. Its document-based approach to store data is efficient for our need. One user: one document.&lt;/p&gt;

&lt;p&gt;Then we deploy the whole project with Vercel. It is easy, fast and already automated. Moreover Vercel deploy the app for every Pull Request, allowing to make a quick test on the user interface. Thanks for it Vercel.&lt;/p&gt;

&lt;p&gt;That's a summary of it. Here some highlights on this project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-obstacles-that-we-met-and-how-we-solved-them"&gt;
  &lt;/a&gt;
  🚧 Some obstacles that we met and how we solved them
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;svelte-i18n&lt;/code&gt; is not reactive. So we stored the i18n keys instead of their value in the objects that we pass around the components. The translated string is handled directly in the view with &lt;a href="https://svelte.dev/docs#Text_expressions"&gt;text expression&lt;/a&gt;. Okay ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt;

&lt;p&gt;Mixing reactivity inside a callback is no good idea. We don't know why but a reactive value inside a callback was not updated on time on keypress. Moving it into a reactive statement solved the problem (see: &lt;a href="https://github.com/Lyokolux/ux-typing-experiment/commit/adcedf5ad8061de89bb641fd0d8a867e1214afa4"&gt;#adcedf5&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Focusing the first input on the next slide is a must-have for such an experience. It was not so trivial as we thought. We ended up with a small-efficient function, leveraging the Javascript power of DOM manipulation 😅💪 (see: &lt;a href="https://github.com/Lyokolux/ux-typing-experiment/blob/2d6e441572100af3693d4af59cf73311f2c44f70/src/pages/Experiences.svelte#L44"&gt;Experiences.svelte#44&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#each-slide-or-page-runs-smoothly-to-the-next-one"&gt;
  &lt;/a&gt;
  💫 Each slide (or page) runs smoothly to the next one
&lt;/h3&gt;

&lt;p&gt;This is a key point to a good experience: it has to be smooth. Any superfluous actions must be avoided and the necessary ones must fit in the flow.&lt;/p&gt;

&lt;p&gt;When a user fills a form, a smooth button is displayed to validate the input. So they knows everything is ok and they can go on.&lt;/p&gt;

&lt;p&gt;After finishing to type, it transitions to the next one. No button is needed as the input does not have to be checked. Fill the appreciation form after the typing session and go on.&lt;/p&gt;

&lt;p&gt;We want to scroll and go further. Thus every slide contains a small amount of information and are reviewed quickly.&lt;/p&gt;

&lt;p&gt;We hope these thoughts we had are making the experiment, well, smooth. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-it-a-try"&gt;
  &lt;/a&gt;
  Give it a try ❤️
&lt;/h2&gt;

&lt;p&gt;You can participate in this experience too with the following link: &lt;a href="https://ux-typing-experiment-five.vercel.app/"&gt;https://ux-typing-experiment-five.vercel.app/&lt;/a&gt;. You can quit at every moment or you can stay until the end. You choose what the best fit for you ;) &lt;br&gt;
If you find any issues, please feel free to submit an issue on the &lt;a href="https://github.com/Lyokolux/ux-typing-experiment/issues"&gt;Github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can see some results too: &lt;a href="https://ux-typing-experiment-five.vercel.app/results"&gt;https://ux-typing-experiment-five.vercel.app/results&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is again a work in progress. We need first to gather more data, and improve the app.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>firebase</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
