<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introducing Lofi Club - Enjoy Hip hop beats to Relax or Code! üéß</title>
      <author>Savio Martin</author>
      <pubDate>Fri, 14 May 2021 18:20:00 +0000</pubDate>
      <link>https://dev.to/saviomartin/introducing-lofi-club-enjoy-hip-hop-beats-to-relax-or-code-11ij</link>
      <guid>https://dev.to/saviomartin/introducing-lofi-club-enjoy-hip-hop-beats-to-relax-or-code-11ij</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-devs"&gt;
  &lt;/a&gt;
  Hello Devs üëã
&lt;/h2&gt;

&lt;p&gt;This is Savio here. I'm young dev with an intention to enhance as a successful web developer. I love building web apps with React. I have proved my superiority in frontend technologies. Today, I'd like to share my latest project &lt;a href="https://loficlub.now.sh/"&gt;Lofi Club&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#little-flashback"&gt;
  &lt;/a&gt;
  Little flashback
&lt;/h3&gt;

&lt;p&gt;I'm a big fan of lofi music, In fact, many of us are. Lo-fi is a music or production quality in which elements usually regarded as imperfections of a recording or performance are audible, sometimes as a deliberate aesthetic choice. Hearing to lofi music makes us more productive. So, I thought I could make one app with the main goal as &lt;strong&gt;distraction-free lofi music&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#introducing-lofi-club"&gt;
  &lt;/a&gt;
  Introducing Lofi Club
&lt;/h2&gt;

&lt;p&gt;%[&lt;a href="https://www.youtube.com/watch?v=JD6nQrxT5LA"&gt;https://www.youtube.com/watch?v=JD6nQrxT5LA&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Lofi Club is a place for listening to live 24/7 Lofi music. Comes with more than 17 awesome tracks that the app runs 24/7 enabling you to relax all time. Dark minimalist UI, Responsive Design, Live Chat, Distraction-free music player, to-do list, Pomodoro timer, control by keyboard, playlist, fullscreen mode makes the app super productive for daily use! So, sit back and enjoy! üôå&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/saviomartin/loficlub"&gt;Github Repo&lt;/a&gt; /&lt;a href="https://loficlub.now.sh/"&gt; Live Demo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gA_aZVjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/84c8e5ad-9ae2-4e79-a106-135169504786.png%3Fauto%3Dformat%26auto%3Dcompress%26codec%3Dmozjpeg%26cs%3Dstrip%26w%3D507%26h%3D380%26fit%3Dmax%26dpr%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gA_aZVjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/84c8e5ad-9ae2-4e79-a106-135169504786.png%3Fauto%3Dformat%26auto%3Dcompress%26codec%3Dmozjpeg%26cs%3Dstrip%26w%3D507%26h%3D380%26fit%3Dmax%26dpr%3D1" alt=""&gt;&lt;/a&gt;&lt;br&gt;
I'm a fan of lofi music and always wanted to hear some freshly prepared  lofi music. I was introduced to &lt;a href="https://lofi.cafe/"&gt;lofi.cafe&lt;/a&gt; and loved the working. I just really need to expand it with much more awesome feature. Used it as my first source of inspiration. Shoutouts to &lt;a href="https://twitter.com/linuz90"&gt;@linuz90&lt;/a&gt; and &lt;a href="https://twitter.com/maridivi89"&gt;maridivi89&lt;/a&gt; for the inspiration!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  üéâ Features
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AD38MsAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/saviomartin/loficlub/main/public/assets/app-screenshot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AD38MsAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/saviomartin/loficlub/main/public/assets/app-screenshot.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provides a great space for you to relax or just chill. Comes with more than 17 tracks. Dark minimalist UI makes it much more amazing. Live Chat, Pomodoro timer, control by keyboard, playlist, fullscreen mode makes the app super better than its competitors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-tracks"&gt;
  &lt;/a&gt;
  17+ tracks
&lt;/h3&gt;

&lt;p&gt;Lofi Club comes with 17+ tracks making you adjust to your mood.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distractionfree-music-player"&gt;
  &lt;/a&gt;
  Distraction-free music player
&lt;/h3&gt;

&lt;p&gt;Dark, Minimalist, Distraction-free UI to help you concentrate or relax. Also protects your battery life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#control-by-keyboard"&gt;
  &lt;/a&gt;
  Control by Keyboard
&lt;/h3&gt;

&lt;p&gt;Lofi Club supports controlling by the keyboard. You can do a bunch of things make your super productive. Here is the &lt;a href="https://loficlub.now.sh/keyboard-shortcuts"&gt;full list&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-chat-amp-realtime-live-count"&gt;
  &lt;/a&gt;
  Live Chat &amp;amp; Realtime live count
&lt;/h3&gt;

&lt;p&gt;Chat with live members, get help. Be cooperative, chill together. Enjoy with the community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pomodoro-timer"&gt;
  &lt;/a&gt;
  Pomodoro Timer
&lt;/h3&gt;

&lt;p&gt;Lofi Club comes with an amazing super-complex Pomodoro timer to meet your need and stay productive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stared-music-playlist"&gt;
  &lt;/a&gt;
  Stared Music Playlist
&lt;/h3&gt;

&lt;p&gt;Lofi Club allows you to create your own playlist by staring your favoirite. Buzz with that!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todolist"&gt;
  &lt;/a&gt;
  Todolist
&lt;/h3&gt;

&lt;p&gt;Organize daily tasks for work and life. Keep track of your doings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fullscreen-mode"&gt;
  &lt;/a&gt;
  Full-Screen Mode
&lt;/h3&gt;

&lt;p&gt;Enjoy Lofi Club on full-screen mode. I know you're gonna love this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pwa-installable-app"&gt;
  &lt;/a&gt;
  PWA, Installable app
&lt;/h3&gt;

&lt;p&gt;Lofi Club is a PWA, which means you can install on your local device and loads without internet/.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fully-responsive"&gt;
  &lt;/a&gt;
  Fully Responsive
&lt;/h3&gt;

&lt;p&gt;No matter what your device is, Lofi Club is made just for you. Enjoy lofi club in any device! üíª&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to try out: &lt;a href="https://loficlub.now.sh/"&gt;https://loficlub.now.sh/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Star the repo ‚≠ê &lt;a href="https://github.com/saviomartin/loficlub"&gt;https://github.com/saviomartin/loficlub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  üíª Built with
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://material-ui.com/"&gt;Material UI&lt;/a&gt;: for styling and Icons&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://animate.style/"&gt;Animate.css&lt;/a&gt;: for smooth Animations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://michalsnik.github.io/aos/"&gt;AOS&lt;/a&gt;: for scroll animations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;react-router-dom&lt;/a&gt;: for routing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/amplify/"&gt;Vercel&lt;/a&gt;: for hosting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... and much more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-building-and-deploying"&gt;
  &lt;/a&gt;
  Planning, Building, and Deploying
&lt;/h2&gt;

&lt;p&gt;Oh yeah, it was time-consuming, but I enjoyed it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;### Designing
I used Figma for my design, I'm not an expert but I know how to do basic designing and prototyping.&lt;/li&gt;
&lt;li&gt;### Planning
Notion is an awesome tool to be cared for. It is super productive enough for me to plan my daily work. I used Pomodoro timers too, I want to be productive.&lt;/li&gt;
&lt;li&gt;### Time to code
I'm a true React lover. I created Lofi Club with react, I used a lot of amazing libraries. The animations were built with &lt;a href="https://animate.style/"&gt;Animate.css&lt;/a&gt;, used react-router-dom for routing, tailwind for styles and a bunch of amazing libraries to make everything work nice. &lt;/li&gt;
&lt;li&gt;### Deploying
Deploying was done with Vercel. I'm a big fan of Vercel. Vercel is super fast and easy to use and manage. I also setup auto GitHub deploying so I don't have to deploy everytime something changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Challenge&lt;/th&gt;
&lt;th&gt;Solution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Change different URLs without loading&lt;/td&gt;
&lt;td&gt;Used &lt;code&gt;react-router-dom&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Generate thumbnails&lt;/td&gt;
&lt;td&gt;used youtube api&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Make the app 100/100 on PWA Check&lt;/td&gt;
&lt;td&gt;Optimised app, solved errors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Responsiveness of the app&lt;/td&gt;
&lt;td&gt;Used &lt;code&gt;@media&lt;/code&gt; queries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;adding scroll animations&lt;/td&gt;
&lt;td&gt;Used AOS library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Notification withing the app&lt;/td&gt;
&lt;td&gt;Used &lt;code&gt;react-toastify&lt;/code&gt; library&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-whats-next"&gt;
  &lt;/a&gt;
  ‚ú®Ô∏è What's next
&lt;/h2&gt;

&lt;p&gt;These are some of the features, I currently have in mind.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Live Video Chat&lt;/li&gt;
&lt;li&gt;Complex todo page&lt;/li&gt;
&lt;li&gt;Collaboration&lt;/li&gt;
&lt;li&gt;Upvote a tracks&lt;/li&gt;
&lt;li&gt;Share tracks with public&lt;/li&gt;
&lt;li&gt;One tap login (Almost Completed üöÄ)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#licensed-under-raw-mit-endraw-"&gt;
  &lt;/a&gt;
  üõ°Ô∏è Licensed under &lt;code&gt;MIT&lt;/code&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#lofi-club-needs-your-upvote"&gt;
  &lt;/a&gt;
  Lofi Club needs your Upvote
&lt;/h2&gt;

&lt;p&gt;We're on &lt;a href="https://www.producthunt.com/posts/lofi-club"&gt;producthunt&lt;/a&gt; - &lt;a href="https://www.producthunt.com/posts/loficlub"&gt;producthunt.com/posts/loficlub&lt;/a&gt;. Please help us my giving your upvote! üíñ&lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/lofi-club?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-lofi-club"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EPITjah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/featured.svg%3Fpost_id%3D295845%26theme%3Ddark" alt="Lofi Club - Enjoy hip hop beats to relax or study | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  üëÄ Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Yeah, that's a wrap. Hope you enjoyed &lt;a href="https://loficlub.now.sh/"&gt;Lofi Club&lt;/a&gt;. Feel free to use the app. Do not hesitate to share your feedback. Share on Twitter, tag me &lt;a href="https://twitter.com/SavioMartin7"&gt;@saviomartin7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Star the repo ‚≠ê &lt;a href="https://github.com/saviomartin/loficlub"&gt;github.com/saviomartin/loficlub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  üåé Lets connect
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/saviomartin"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/saviomartin7"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/saviomartin/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/teen_developer/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  üé∏ Feedback
&lt;/h2&gt;

&lt;p&gt;Hash tree needs your feedback to improve. Help Hash tree by adding your valuable reviews üíñ &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  üôå Support
&lt;/h2&gt;

&lt;p&gt;My projects are fueled by coffees ‚òï, get one for me! &lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/saviomartin"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vsiOGpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/appcraftstudio/buymeacoffee/raw/master/Images/snapshot-bmc-button.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>linux</category>
      <category>python</category>
    </item>
    <item>
      <title>Authorization mechanisms in Rust web applications</title>
      <author>Artem Medvedev</author>
      <pubDate>Fri, 14 May 2021 18:03:49 +0000</pubDate>
      <link>https://dev.to/ddtkey/authorization-mechanisms-in-rust-web-applications-27ag</link>
      <guid>https://dev.to/ddtkey/authorization-mechanisms-in-rust-web-applications-27ag</guid>
      <description>&lt;p&gt;To ensure application security, we use mechanisms such as authentication and authorization. I think many of you are familiar with these concepts and in this article we will focus on the concept of authorization and related access control models.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgjXNBYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq2a9mm3e4gfh3guv73a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgjXNBYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq2a9mm3e4gfh3guv73a.png" alt="security"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;em&gt;&lt;strong&gt;Definitions of terms used in the article&lt;/strong&gt;&lt;/em&gt;
  &lt;p&gt;It's important to understand the difference between authorization and authentication:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Authentication&lt;/em&gt;&lt;/strong&gt; ‚Äì a process of verifying your identity and proving that you are a user of the system (by means of a password, token or any other form of credentials).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Authorization&lt;/em&gt;&lt;/strong&gt; - a mechanism whose task is to allow or deny a request for a specific system resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Access subject&lt;/em&gt;&lt;/strong&gt; ‚Äì a user or process that is requesting access to the resource.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Access object&lt;/em&gt;&lt;/strong&gt; ‚Äì on the contrary, it's a resource to which access is requested by the subject.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Crate&lt;/em&gt;&lt;/strong&gt; ‚Äì a library or executable (binary) program in Rust.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The authorization process includes the concept of &lt;strong&gt;&lt;em&gt;access control policy&lt;/em&gt;&lt;/strong&gt;, in accordance with which the set of permissible actions of a particular user (access subject) over the system resources (access objects) is determined.&lt;/p&gt;

&lt;p&gt;And also the &lt;strong&gt;&lt;em&gt;access control model&lt;/em&gt;&lt;/strong&gt; is a general scheme for delimiting access through a user policy, which we choose depending on various factors and system requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's take a look at the basic access control models:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;DAC&lt;/strong&gt; - &lt;em&gt;Discretionary access-control&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qKDE9INZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rx2bzzegyfnq8o3uwjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKDE9INZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rx2bzzegyfnq8o3uwjo.png" alt="Discretionary access-control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This paradigm allows users to independently grant the right to any action on their data to other system participants, for which &lt;em&gt;access control lists&lt;/em&gt; (&lt;strong&gt;ACL&lt;/strong&gt;) are used.&lt;/p&gt;

&lt;p&gt;Most often used in cases where users directly own certain resources and can independently decide who to allow interaction with them.&lt;/p&gt;

&lt;p&gt;An example would be operating systems or social networks, where people independently change the visibility of their content.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;MAC&lt;/strong&gt; - &lt;em&gt;Mandatory access-control&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kcUzDP_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atq5t9tpuy5z116vrp1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kcUzDP_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atq5t9tpuy5z116vrp1u.png" alt="Mandatory access-control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was developed for government purposes with a focus on application in extremely secure systems (for example, military), where it was most widespread.&lt;/p&gt;

&lt;p&gt;Data protection is based on confidentiality labels (level of secrecy or importance), through which the level of access of subjects is checked. As a rule, the rights are issued centrally by the management body.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;MAC&lt;/em&gt; is perhaps one of the most rigorous and secure models, but it comes with the complexity and high cost of implementing and maintaining the infrastructure around it (there are many ways that require careful planning).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;RBAC&lt;/strong&gt; - &lt;em&gt;Role-Based access-control&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most common and well-known model that fits well with business domains and correlates with job functions. It is a kind of development of &lt;em&gt;DAC&lt;/em&gt;, where privileges are grouped into their respective roles.&lt;/p&gt;

&lt;p&gt;Each subject can have a list of roles, where the role, in turn, can provide access to a certain list of objects.&lt;/p&gt;

&lt;p&gt;It should be noted that in RBAC the &lt;strong&gt;PBAC&lt;/strong&gt; (&lt;em&gt;Permission-Based access-control&lt;/em&gt;) model is sometimes allocated when a set of actions is allocated for each resource in the system (for example: &lt;code&gt;READ_DOCUMENT&lt;/code&gt;,&lt;code&gt;WRITE_DOCUMENT&lt;/code&gt;,&lt;code&gt;DELETE_DOCUMENT&lt;/code&gt;) and bind it with the subject through the relationship with roles, directly with the user, or a hybrid approach, when the subject can have a role and separate privileges.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;ABAC&lt;/strong&gt; - &lt;em&gt;Attribute-Based access-control&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DCVgHjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jr9g106oo7t46476hdx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DCVgHjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jr9g106oo7t46476hdx.png" alt="Attribute-Based access-control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this approach, it's necessary to maintain special policies that combine the attributes of subjects and objects, and the access decision is provided based on the analysis and comparison of these attributes.&lt;/p&gt;

&lt;p&gt;This is the most flexible of the described models with a huge number of possible combinations, which allows making decisions based on such parameters as request time, location, employee position, etc., but requires more detailed planning of policies to prevent unauthorized access.&lt;/p&gt;

&lt;p&gt;ABAC requires some mechanism for interpreting policies and some syntactic subset, which can entail execution time (in the case of a dynamic implementation) or compilation (in the case of code generation).&lt;/p&gt;

&lt;p&gt;You can read more about some of the models in &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html#permission-based-access-control"&gt;OWASP materials&lt;/a&gt; (Open Web Application Security Project) and in &lt;a href="https://www.ibm.com/docs/en/sig-and-i/10.0.0?topic=planning-access-control-models"&gt;IBM documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Access control is a very important part of web applications, since it is necessary to strictly observe the delimitation of access to resources and data (especially personal ones - the protection of which is provided for by legislative aspects), depending on the privileges of users.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-do-we-have-in-rust-web-frameworks"&gt;
  &lt;/a&gt;
  What do we have in Rust web frameworks?
&lt;/h2&gt;

&lt;p&gt;Typically, to implement anti-tampering mechanisms in popular web frameworks (such as actix-web, Rocket, or tide), &lt;code&gt;Middleware&lt;/code&gt;, &lt;code&gt;FromRequest&lt;/code&gt;, or &lt;code&gt;Guard&lt;/code&gt; (&lt;code&gt;Filter&lt;/code&gt; in the case of warp) implementations are used.&lt;/p&gt;

&lt;p&gt;That is, in some kind of middleware, where data about the subject and object of access can be extracted from requests. This approach is quite convenient, since it will allow you to delimit areas of responsibility.&lt;/p&gt;

&lt;p&gt;It can be both library (in the form of crates), and custom implementations. But at the moment, the preference is often given to own implementations, which is probably due to the small number of production-ready solutions and the specifics of the applied policies in various projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#casbinrs"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/casbin/casbin-rs"&gt;casbin-rs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;
    &lt;a href="https://github.com/casbin/casbin-rs"&gt;
        &lt;img alt="casbin-rs" src="https://res.cloudinary.com/practicaldev/image/fetch/s--6sqdmGk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aajqjgvqnqy76sfxx2w2.png"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yq1gbKY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgii3fx7bmatdzsrtc1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yq1gbKY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgii3fx7bmatdzsrtc1l.png" alt="casbin badges"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most complete production-ready open source solution that I have been able to find is the adaptation of Casbin (&lt;code&gt;casbin-rs&lt;/code&gt;), with an impressive number of supported access models (&lt;em&gt;ACL, RBAC, ABAC&lt;/em&gt; declared) and the ability to flexibly change policy by changing only the configuration file ...&lt;/p&gt;

&lt;p&gt;Casbin uses its own meta-model &lt;em&gt;PERM (Policy, Effect, Request, Matchers)&lt;/em&gt; to build an access model, which gives more flexibility, but introduces the cost of its interpretation and validation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# Request definition
&lt;/span&gt;&lt;span class="nn"&gt;[request_definition]&lt;/span&gt;
&lt;span class="py"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sub, obj, act&lt;/span&gt;

&lt;span class="c"&gt;# Policy definition
&lt;/span&gt;&lt;span class="nn"&gt;[policy_definition]&lt;/span&gt;
&lt;span class="py"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;sub, obj, act&lt;/span&gt;

&lt;span class="c"&gt;# Policy effect
&lt;/span&gt;&lt;span class="nn"&gt;[policy_effect]&lt;/span&gt;
&lt;span class="py"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;some(where (p.eft == allow))&lt;/span&gt;

&lt;span class="c"&gt;# Matchers
&lt;/span&gt;&lt;span class="nn"&gt;[matchers]&lt;/span&gt;
&lt;span class="py"&gt;m&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;r.sub == p.sub &amp;amp;&amp;amp; r.obj == p.obj &amp;amp;&amp;amp; r.act == p.act&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When describing it, you can easily make a mistake, and therefore the &lt;a href="https://casbin.org/editor/"&gt;web editor of models&lt;/a&gt; was developed for convenient and correct modification.&lt;/p&gt;

&lt;p&gt;The administration of privileges for your system occurs through the description of the policy (in a file or database) corresponding to the PERM model format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p, alice, data1, read
p, bob, data2, write
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, this causes a certain duplication of object and subject identifiers and is not obvious at the level of the calling code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;casbin&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Enforcer&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"examples/acl_model.conf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"examples/acl_policy.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="nf"&gt;.enable_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"alice"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// the user that wants to access a resource.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"data1"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// the resource that is going to be accessed.&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;act&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"read"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// the operation that the user performs on the resource.&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;authorized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="nf"&gt;.enforce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;act&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;authorized&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// permit alice to read data1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// deny the request&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// error occurs&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Such a tool definitely deserves respect. Many thanks to the community for contributing to its development üëè&lt;/p&gt;

&lt;p&gt;But, as we can see, developers take into account certain nuances and sometimes want to write their own solutions from project to project, since the requirements can be defined initially, and all the flexibility provided by the library may not be needed, and therefore, we can choose a narrower and lighter solution. that meets our requirements.&lt;/p&gt;

&lt;p&gt;As it was with me when I started writing a backend in Rust. The PBAC model was enough for me, and based on my experience in developing web applications, in most typical projects, the &lt;em&gt;ACL&lt;/em&gt;/&lt;em&gt;RBAC&lt;/em&gt; models are enough.&lt;/p&gt;

&lt;p&gt;I came up with the idea of implementing my own solution as a separate open source crate: &lt;em&gt;actix-web-grants&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actixwebgrants"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/DDtKey/actix-web-grants"&gt;actix-web-grants&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;
    &lt;a href="https://github.com/DDtKey/actix-web-grants"&gt;
        &lt;img alt="actix-web-grants" src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBkCAv_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94wfabr7z24i6jl2qo4z.png"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BzvpkwLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t9uf5azdyae1zcek2z9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BzvpkwLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t9uf5azdyae1zcek2z9.png" alt="actix-web-grants badges"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main idea of the project is to use built-in middleware to get user privileges from a request and specify the necessary permissions directly on your endpoints.&lt;/p&gt;

&lt;p&gt;This is a fairly lightweight crate with simple integration, using which you can at least apply the following models: access lists (ACL), role-based or permission-based access control (&lt;em&gt;RBAC&lt;/em&gt;/&lt;em&gt;PBAC&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Thus, we just need to implement the function of obtaining privileges:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Sample application with grant protection based on extracting by your custom function&lt;/span&gt;
&lt;span class="nd"&gt;#[actix_web::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;HttpServer&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;GrantsMiddleware&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with_extractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nn"&gt;App&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nf"&gt;.wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;.service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nf"&gt;.bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost:8081"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
    &lt;span class="nf"&gt;.run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ServiceRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Here is a place for your code to get user permissions/grants/permissions from a request&lt;/span&gt;
    &lt;span class="c"&gt;// For example from a token or database&lt;/span&gt;

    &lt;span class="c"&gt;// Stub example&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ROLE_ADMIN&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach adds flexibility and allows us to implement authorization regardless of the methods of authentication and storage of user privileges: it can be a &lt;em&gt;JWT token&lt;/em&gt;, a &lt;em&gt;database&lt;/em&gt;, an &lt;em&gt;intermediate cache&lt;/em&gt;, or &lt;em&gt;any other solution&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then we can place restrictions directly on our resources (via macro):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;actix_web_grants&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;proc_macro&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;has_roles&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nd"&gt;#[get(&lt;/span&gt;&lt;span class="s"&gt;"/secure"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
&lt;span class="nd"&gt;#[has_roles(&lt;/span&gt;&lt;span class="s"&gt;"ROLE_ADMIN"&lt;/span&gt;&lt;span class="nd"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;macro_secured&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ADMIN_RESPONSE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ability to change to access policy directly in the code is a distinctive part of &lt;em&gt;actix-web-grants&lt;/em&gt;, reducing duplication of access objects and providing us with visual information about the required privileges.&lt;/p&gt;

&lt;p&gt;For the sake of completeness, minimal examples of applications with an identical usage profile were written and the performance of the authorization process was measured (based on &lt;a href="https://github.com/wg/wrk"&gt;wrk&lt;/a&gt;) to satisfy our own interest.&lt;/p&gt;

&lt;p&gt;The examples are written with a simplified implementation of the RBAC model for two test cases of authorization: a request to a resource is allowed and denied, in accordance with the presence of the necessary roles. Stubs were used for authentication. All code is available on GitHub: &lt;em&gt;&lt;a href="https://github.com/DDtKey/actix-web-authz-benchmark"&gt;actix-web-authz-benchmark&lt;/a&gt;&lt;/em&gt; (more examples can always be found on the pages of these projects).&lt;/p&gt;

&lt;p&gt;The benchmark results can be seen in the table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
   &lt;tr&gt;
       &lt;td rowspan="2"&gt;Benchmark&lt;/td&gt;
       &lt;td colspan="2"&gt;&lt;strong&gt;casbin-rs&lt;/strong&gt;&lt;/td&gt;
       &lt;td colspan="2"&gt;&lt;strong&gt;actix-web-grants&lt;/strong&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Latency&lt;/td&gt;
   &lt;td&gt;Req/Sec&lt;/td&gt;
   &lt;td&gt;Latency&lt;/td&gt;
   &lt;td&gt;Req/Sec&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Allowed Endpoint&lt;/td&gt;
   &lt;td&gt;6.18 ms&lt;/td&gt;
   &lt;td&gt;16.27k&lt;/td&gt;
   &lt;td&gt;4.41 ms&lt;/td&gt;
   &lt;td&gt;22.69k&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Denied Endpoint&lt;/td&gt;
   &lt;td&gt;6.70 ms&lt;/td&gt;
   &lt;td&gt;14.98k&lt;/td&gt;
   &lt;td&gt;4.94 ms&lt;/td&gt;
   &lt;td&gt;20.23k&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;rustc: v1.52.0 (stable); CPU: 2,6 GHz 6-Core Intel Core i7; RAM: 16 GB&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, we see that &lt;a href="https://github.com/DDtKey/actix-web-grants"&gt;actix-web-grants&lt;/a&gt; makes it easier to integrate and administer access policies over endpoints (endpoints), while not inferior in performance compared to &lt;a href="https://github.com/casbin/casbin-rs"&gt;casbin-rs&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#post-scriptum"&gt;
  &lt;/a&gt;
  Post Scriptum
&lt;/h4&gt;

&lt;p&gt;This library does not yet have integrations with many web frameworks in its arsenal, but I have plans to introduce some abstractions and write modules for other frameworks, make some improvements (for example, the ability to inherit roles and support custom types). Any suggestions and contributions will be welcome!&lt;/p&gt;

</description>
      <category>rust</category>
      <category>security</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to build your own Utility classes using plain Scss alone</title>
      <author>Ahmed Sarhan</author>
      <pubDate>Fri, 14 May 2021 17:50:08 +0000</pubDate>
      <link>https://dev.to/ahmedsarhan/how-to-build-your-own-utility-framework-using-scss-25dh</link>
      <guid>https://dev.to/ahmedsarhan/how-to-build-your-own-utility-framework-using-scss-25dh</guid>
      <description>&lt;p&gt;In this article, we will talk and code about using couple of the amazing Sass features to give us some utility classes for spacing, justify and align content and items in the slickest way I was able to think of using a fairly small amount of code &lt;/p&gt;

&lt;p&gt;Now, the question might be why don't I just use TailwindCss or any other framework where I can just use pre-made utility classes, tbh personally I love Tailwind and might have a future article about it, but to answer the question, maybe you land a job and the company like to do everything pure sass no frameworks and believe me they do exist more than you imagine, receive a recruitment task with the same requirement "pure css or sass" or you just feel interested in trying new stuff&lt;/p&gt;

&lt;p&gt;we will be using Scss and I will be leaving a link to a GitHub repo of the code at the end of the article&lt;/p&gt;

&lt;p&gt;this article assumes you know how to set Scss to work on your project, it has different ways to it with React.js, vue.js or just static HTML so look into this according to your project&lt;/p&gt;

&lt;p&gt;So enough talk let's jump into the code part of it&lt;/p&gt;

&lt;p&gt;So there's how your folder structure should look like in regular static project:&lt;/p&gt;

&lt;p&gt;Root&lt;br&gt;
 --&amp;gt; Index.html&lt;br&gt;
 --&amp;gt; CSS "left empty" &lt;br&gt;
 --&amp;gt; Scss&lt;br&gt;
  --&amp;gt; styles.scss&lt;/p&gt;

&lt;p&gt;the CSS file should be left untouched as browsers don't understand sass, we transform scss to css through packages like node-sass &lt;br&gt;
personally I installed sass globally and ran this command in the terminal in my project root folder&lt;br&gt;
&lt;code&gt;sass --watch scss/styles.scss css/styles.css&lt;/code&gt;&lt;br&gt;
so to sum it up; our main work will be with &lt;strong&gt;syles.scss&lt;/strong&gt; and index.html&lt;/p&gt;

&lt;p&gt;this is how your index.html should look like at the start&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;link rel="stylesheet" href="css/styles.css"
    &amp;lt;title&amp;gt;Scss Tutorial&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;

    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see pretty basic html file, and it's connected to the css file and not scss file and this because as we mentioned earlier browsers don't  understand scss so we need to convert it to plain css&lt;/p&gt;

&lt;p&gt;Now what we aim to accomplish is to make spacing utility classes for margin and padding e.g : &lt;code&gt;&amp;lt;div class="my-3 ml-2 mx-2 my-auto&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spacing-utility-classes"&gt;
  &lt;/a&gt;
  Spacing Utility Classes
&lt;/h3&gt;

&lt;p&gt;now the idea of using scss in not to create each class on its own but rather create all the classes dynamically with one piece of code &lt;/p&gt;

&lt;p&gt;Granted, it won't be a small piece of code but it will much smaller and faster than creating it using plain css&lt;/p&gt;

&lt;p&gt;so this is how you will create it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$spaceAmounts: (1, 2, 3, 4, 5, 6, 7, 8, auto);

@each $space in $spaceAmounts {
  @if $space==auto {
    .m-#{$space} {
      margin: #{$space};
    }

    .mx-#{$space} {
      margin-left: #{$space};
      margin-right: #{$space};
    }

    .my-#{$space} {
      margin-top: #{$space};
      margin-bottom: #{$space};

    }

    .ml-#{$space} {
      margin-left: #{$space};
    }

    .mr-#{$space} {
      margin-right: #{$space};
    }

    .mb-#{$space} {
      margin-bottom: #{$space};
    }

    .mt-#{$space} {
      margin-top: #{$space};
    }
  }

  @else {
    .m-#{$space} {
      margin: #{$space}rem;
    }

    .mx-#{$space} {
      margin-left: #{$space}rem;
      margin-right: #{$space}rem;
    }

    .my-#{$space} {
      margin-top: #{$space}rem;
      margin-bottom: #{$space}rem;

    }

    .ml-#{$space} {
      margin-left: #{$space}rem;
    }

    .mr-#{$space} {
      margin-right: #{$space}rem;
    }

    .mb-#{$space} {
      margin-bottom: #{$space}rem;
    }

    .mt-#{$space} {
      margin-top: #{$space}rem;
    }

    .p-#{$space} {
      padding: #{$space}rem;
    }

    .px-#{$space} {
      padding-left: #{$space}rem;
      padding-right: #{$space}rem;
    }

    .py-#{$space} {
      padding-top: #{$space}rem;
      padding-bottom: #{$space}rem;

    }

    .pl-#{$space} {
      padding-left: #{$space}rem;
    }

    .pr-#{$space} {
      padding-right: #{$space}rem;
    }

    .pb-#{$space} {
      padding-bottom: #{$space}rem;
    }

    .pt-#{$space} {
      padding-top: #{$space}rem;
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is simple, you are going to make a variable list of the amounts of space you want to make classes of, then  loop through these amounts and create your own classes, the tricky part is with &lt;code&gt;margin-auto&lt;/code&gt; utility classes and for that we shall use the if statement of scss ... pretty slick I know&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#align-amp-justify-utility-classes"&gt;
  &lt;/a&gt;
  Align &amp;amp; Justify Utility Classes
&lt;/h3&gt;

&lt;p&gt;now one more trick using the same concept&lt;/p&gt;

&lt;p&gt;while working with css3 flex box and grid system, we use css properties like;&lt;br&gt;
&lt;code&gt;justify-content, align-items, justify-items&lt;/code&gt; a lot and using the same trick we are going to create our own utility classes for them using yet another piece of code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$alignments: ("center", "space-between", "space-around", "space-evenly", "flex-start", "flex-end");

@each $align in $alignments {
  .justify-#{$align} {
    justify-content: #{$align};
  }

  .items-#{$align} {
    align-items: #{$align};
  }

  .justify-items-#{$align} {
    justify-items: #{$align};
  }

  .content-#{$align} {
    align-content: #{$align};
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now the idea is the same as for spacing but the class names are going to be a bit different, e.g &lt;code&gt;items-center&lt;/code&gt; class is equal to &lt;code&gt;align-items: center&lt;/code&gt; css property&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#display-and-textalign-utility-classes"&gt;
  &lt;/a&gt;
  Display and Text-Align Utility Classes
&lt;/h3&gt;

&lt;p&gt;similarly enough we are going to make our display and text-align utility classes &lt;/p&gt;

&lt;p&gt;here's our code for them&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#display-classes"&gt;
  &lt;/a&gt;
  Display classes
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$displayProps: ("block", "inline-block", "inline", "flex", "grid", "inline-flex", "inline-grid", "table", "inline-table", "list-item", "none", "contents");

@each $disp in $displayProps {
  .d-#{$disp} {
    display: #{$disp};
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#text-align-classes"&gt;
  &lt;/a&gt;
  Text Align classes
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$textAlignments: ("left", "right", "center", "revert");

@each $textAlign in $textAlignments {
  .text-#{$textAlign} {
    text-align: #{$textAlign};
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now hit save, make sure new classes are added in your css/styles.css and take a look at all the new utility classes we just created in few minutes using that few lines of code&lt;/p&gt;

&lt;p&gt;No it is time to try our classes in the Html file&lt;br&gt;
here's how the body of the html file should look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;body&amp;gt;
    &amp;lt;div class="d-flex justify-center items-center my-3 mx-auto"&amp;gt;
      &amp;lt;div class="pt-2 pb-4 px-3"&amp;gt;
        &amp;lt;h3 class="text-center"&amp;gt;This plain Scss&amp;lt;/h3&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="pt-2 pb-4 px-3"&amp;gt;
        &amp;lt;h3 class="text-right"&amp;gt;It's amazing&amp;lt;/h3&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="d-grid scss-grid"&amp;gt;
      &amp;lt;div class="px-3 py-2"&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;List item&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;another list item&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;one more of those&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="pt-2 pb-3 px-2"&amp;gt;
        &amp;lt;h3 class="text-center"&amp;gt;Pretty Dope stuff&amp;lt;/h3&amp;gt;
        &amp;lt;p class="text-left"&amp;gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi libero maxime adipisci quos,
          asperiores omnis?
        &amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;as you can see I have used all the classes we have created to create the following image &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7t7mO77V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/masas9esa0o6bhaij1n2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7t7mO77V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/masas9esa0o6bhaij1n2.png" alt="Final Shape"&gt;&lt;/a&gt;&lt;br&gt;
pretty basic I'm very aware, but I'm sure you too are aware of the possibilities of all you can build with this&lt;br&gt;
you can also realize I have a custom class called &lt;strong&gt;scss-grid&lt;/strong&gt; in my second main div, this is a class I applied to this one css property in my main scss file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.scss-grid {
  grid-template-columns: repeat(2, minmax(0, 1fr));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will also encourage you to try on your own to solve the scss-grid issue with the same way we did with all those utility classes, maybe create some classes for box-shadow, font-size, font-weight, text and background colors and many more and share with me your thoughts&lt;/p&gt;

&lt;p&gt;Thank you for joining me today &lt;/p&gt;

&lt;p&gt;you can also reach me on twitter  @SuperSarhan15&lt;/p&gt;

&lt;p&gt;you can check the code from here: &lt;a href="https://github.com/AhmedSarhan/scss-utilites-"&gt;GitHubRepo&lt;/a&gt;&lt;br&gt;
I also included the plain css files so you can read through them&lt;/p&gt;

</description>
      <category>saas</category>
      <category>frontend</category>
      <category>css</category>
    </item>
    <item>
      <title>üîÑ C# 9.0 Features and Expectations of C# 10</title>
      <author>Dotnetsafer</author>
      <pubDate>Fri, 14 May 2021 17:22:35 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/c-9-0-features-and-expectations-of-c-10-n7c</link>
      <guid>https://dev.to/dotnetsafer/c-9-0-features-and-expectations-of-c-10-n7c</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ze8VBWtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c54ps3axcpfrtuyxcyqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze8VBWtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c54ps3axcpfrtuyxcyqy.png" alt="csharp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The latest version of &lt;em&gt;C#, 9.0,&lt;/em&gt; was officially released with¬†&lt;em&gt;.NET 5&lt;/em&gt; in November 2020. These days there are already rumors of the features of the future version, &lt;strong&gt;C# 10&lt;/strong&gt;. ‚úÖ&lt;/p&gt;

&lt;p&gt;One of the biggest advantages of open source software is being able to &lt;strong&gt;see how the project evolves over time&lt;/strong&gt; as the days go by. With this we want to refer to the same &lt;em&gt;C#&lt;/em&gt;, since we can follow its progress on GitHub and see its main news.&lt;/p&gt;

&lt;p&gt;Let's start with &lt;strong&gt;the most important features&lt;/strong&gt; of &lt;em&gt;C# 9.0&lt;/em&gt; ü§ó&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#module-initializers"&gt;
  &lt;/a&gt;
  üîº Module Initializers
&lt;/h3&gt;

&lt;p&gt;In this latest version of &lt;em&gt;C # 9.0&lt;/em&gt;, the &lt;em&gt;[ModuleInitializer]&lt;/em&gt; attribute is used to specify a method that we can invoke before any code in the module, the destination method must be static, without any type of parameter and returned empty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;system&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Runtime.CompilerServices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"Data=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ModuleInitializer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"This static method is invoked before any other method in the module"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extension-getenumerator"&gt;
  &lt;/a&gt;
  üîº Extension GetEnumerator
&lt;/h3&gt;

&lt;p&gt;The foreach statement normally operates on a variable of type &lt;em&gt;IEnumerator &lt;/em&gt; when it contains a definition of any public extension for &lt;em&gt;GetEnumerator&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how we can see it in this example üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;system&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is my favorite color"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Extensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#covariant-return%C2%A0types"&gt;
  &lt;/a&gt;
  üîº Covariant Return¬†Types
&lt;/h3&gt;

&lt;p&gt;In &lt;em&gt;C# 9.0&lt;/em&gt;, the return types of override methods are usually much more specific than the declarations in the base type üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Weather&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt; &lt;span class="nf"&gt;GetTemperature&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Spain&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Weather&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Celsius&lt;/span&gt; &lt;span class="nf"&gt;GetTemperature&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;USA&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Weather&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Farenheit&lt;/span&gt; &lt;span class="nf"&gt;GetTemperature&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt; &lt;span class="nf"&gt;Farenheit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Farenheit&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;GetTemperature ()&lt;/em&gt; method has the return type &lt;em&gt;Temperature&lt;/em&gt;, the derived class Spain overrides this method and returns a specific type &lt;em&gt;Celsius&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is a feature that makes our code &lt;strong&gt;more flexible&lt;/strong&gt;. ‚úÖ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#init%C2%A0accessor"&gt;
  &lt;/a&gt;
  üîº Init¬†Accessor
&lt;/h3&gt;

&lt;p&gt;The init accessor makes immutable objects easier to create and use üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The init accessor can be used with Structures, &lt;em&gt;Registers&lt;/em&gt; and &lt;em&gt;Classes&lt;/em&gt;. The init accessor can be used with &lt;em&gt;Classes, Structures, and Registers&lt;/em&gt; üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#records"&gt;
  &lt;/a&gt;
  üîº Records
&lt;/h3&gt;

&lt;p&gt;Now we have a new type of reference called record that gives us equal value. To better understand it, we have this example üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the point record is immutable, you can greatly simplify the syntax using init accesor, since its properties are read-only.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda-discard-parameters"&gt;
  &lt;/a&gt;
  üîº Lambda Discard Parameters
&lt;/h3&gt;

&lt;p&gt;The next &lt;em&gt;C# 9.0&lt;/em&gt; improvement is being able to use discard (_) as an input parameter of a lambda expression in case that parameter is not used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//C#8&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Button clicked"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//C#9&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Button clicked"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a feature that also allows us to read the code in a &lt;strong&gt;cleaner&lt;/strong&gt; and more beautiful way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#targettyped-new"&gt;
  &lt;/a&gt;
  üîº Target-Typed new
&lt;/h3&gt;

&lt;p&gt;Another very important feature in this latest version of &lt;em&gt;C#&lt;/em&gt; is the ability to omit the type of a new expression when the object type is explicitly known.&lt;/p&gt;

&lt;p&gt;Let's see a quick and simple example üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"point:(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a very useful feature since it allows you to read the code in a clean way without having to duplicate the type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"point:(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#toplevel-statements"&gt;
  &lt;/a&gt;
  üîº Top-Level Statements
&lt;/h3&gt;

&lt;p&gt;In C# 9.0, it is possible to write a top-level program after using declarations.&lt;/p&gt;

&lt;p&gt;Here we can see the example üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With top-level declarations, you wouldn't need to declare any space between names, main method, or class program. This new feature can be very useful for programmers just starting out, as the compiler does all of these things for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CompilerGenerated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nc"&gt;program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seeing the new features in &lt;em&gt;C# 9.0&lt;/em&gt;, which help make programming &lt;strong&gt;much simpler&lt;/strong&gt; and &lt;strong&gt;more intuitive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What can we expect in the future version?&lt;/p&gt;

&lt;p&gt;Okay, let's talk about the future version üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;What could bring new?&lt;/em&gt; ü§î&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;What would you like me to have?&lt;/em&gt; ü§î&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;What is the possibility of it being added?&lt;/em&gt;ü§î&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the upcoming features are still &lt;strong&gt;debatable&lt;/strong&gt; and are not certain to appear in &lt;em&gt;C# 10&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Keep in mind that they are not simply ideas or contributions from the community. These features that I am going to mention are being shuffled by its developers. And although they are not implemented in the next version, today they are being refined so that they come out in future versions of C#.&lt;/p&gt;

&lt;p&gt;Let's start üëç&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filelevel-namespaces"&gt;
  &lt;/a&gt;
  üîº File-level namespaces
&lt;/h3&gt;

&lt;p&gt;All of us when we started programming in &lt;em&gt;C#&lt;/em&gt; we have created a &lt;em&gt;"Hello World"&lt;/em&gt; application. Knowing this we also know that &lt;em&gt;C#&lt;/em&gt; uses a block structure for namespaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;HelloWorld&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt; 
     &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The best thing about this is that namespaces can be overlaid very easily, simply by nesting blocks. In the same way that a single file can contain types in any combination of namespaces and multiple files can share the same namespace between them.&lt;/p&gt;

&lt;p&gt;If we want to scratch the negative part a bit, this system adds a bit of indentation if we compare it with bracket languages such as &lt;em&gt;JavaScript&lt;/em&gt; or &lt;em&gt;Java&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The question we ask ourselves at this point is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it possible to keep that functionality, but at the same time reduce excess indentation?&lt;/strong&gt; ü§î&lt;/p&gt;

&lt;p&gt;Yes ‚úÖ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is it possible?&lt;/strong&gt; ü§î&lt;/p&gt;

&lt;p&gt;It simply opened that entering namespaces with file scope, this would allow to establish a default namespace that would be applied automatically to the entire file eliminating the indentation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is normal to only have one file scoped namespace per file, so there would be no problem. Likewise, most &lt;em&gt;C#&lt;/em&gt; code files do not include more than one namespace.&lt;/p&gt;

&lt;p&gt;If for example we add a namespace block to a file that uses a file-scoped namespace, a nested namespace is simply created.&lt;/p&gt;

&lt;p&gt;Let's see a quick example üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Company.Product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Component&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Component&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is clear that it is not a very big feature, but it is preferable that the more improvements there are, the easier and more intuitive the task of programming will be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#primary-constructors"&gt;
  &lt;/a&gt;
  üîº Primary constructors
&lt;/h3&gt;

&lt;p&gt;In the latest released versions of &lt;em&gt;C#&lt;/em&gt;, the topic of boilerplate code has been reduced considerably with features like automatic properties.&lt;/p&gt;

&lt;p&gt;The main improvement of this is not simply reducing the amount of code that is written, but reducing the amount of code that has to be read. It makes navigating code bases &lt;strong&gt;easier&lt;/strong&gt; and &lt;strong&gt;reduces the most common places where errors can occur&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Primary constructors are a very good implementation that would again reduce the amount of code that is written. We can see it with this simple example that has a class that has a constructor and two read-only properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataSlice&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;DataLabel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;DataValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DataSlice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;dataLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;DataLabel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataLabel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;DataValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the statistics tell us, is that &lt;strong&gt;70%&lt;/strong&gt; of its classes have constructors, and more than &lt;strong&gt;90%&lt;/strong&gt; of all of them simply do nothing more than copy parameters into properties.&lt;/p&gt;

&lt;p&gt;If you haven't written any kind of constructor code yet, don't worry as we can still create and use the class in the same way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;adultData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DataSlice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Vaccinated adults"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;741&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using the main constructor, property validation is not excluded. In the same way, its rules can be enforced in a property setter.&lt;/p&gt;

&lt;p&gt;Let's see an example üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataSlice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;dataLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;DataLabel&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dataLabel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;set&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="n"&gt;dataLabel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;DataValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other details are also possible (calling the base constructor in a derived class, adding constructors). The main downside to all of this is that the primary constructors could collide with the position registers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#raw-string%C2%A0literals"&gt;
  &lt;/a&gt;
  üîº Raw string¬†literals
&lt;/h3&gt;

&lt;p&gt;We already know that the ordinary strings that &lt;em&gt;C#&lt;/em&gt; has, tend to be quite messy since they need quotation marks &lt;strong&gt;('')&lt;/strong&gt;, newlines &lt;strong&gt;(\ n)&lt;/strong&gt; and backslashes &lt;strong&gt;()&lt;/strong&gt;. What &lt;em&gt;C#&lt;/em&gt; offers before this little problem is the use of special characters.&lt;/p&gt;

&lt;p&gt;For example, we can prefix a string with @ and have free rein to add all these details without any problem üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"c:\\path\\backslashes"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@"c:\pathh\backslashes"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the raw string literal string allows is to create new paths to avoid escaping problems. Using the delimiter of a series of quotes followed by a line break to start, and a line break followed by the same number of quotes to close.&lt;/p&gt;

&lt;p&gt;To understand it more simply, I leave you this example below üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""
&lt;/span&gt;          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2021"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
             &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2020"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="s"&gt;""";
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your concern is that there is a possibility of a triple quote sequence within the string, you can simply extend the delimiter so that you can use all the quotes you want, as long as the beginning and end are respected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""""&lt;/span&gt; 
             &lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="s"&gt;""" is safe to use in your raw string.
&lt;/span&gt;             &lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the same way as @ strings, newlines and whitespace are preserved in a raw string. What happens is that the common white space, that is, the amount that is used to bleed, is cut off.&lt;/p&gt;

&lt;p&gt;Let's see more simply with an example üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2021"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
             &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2020"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2021"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2021"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this I want to explain to you that the raw strings are not intended to replace the @ strings that you are using right now.&lt;/p&gt;

&lt;p&gt;Rather, they are prepared for the specific moments when you need a marked block or arbitrary code and in turn you need a coding approach that is guaranteed to be safe.&lt;/p&gt;

&lt;p&gt;üü¢ Conclution:&lt;/p&gt;

&lt;p&gt;To finish this article, my conclusion is that C# still has many years of travel ahead of it and it still has many things to add to make the task of programming even easier and more optimal.&lt;/p&gt;

&lt;p&gt;What do you think?ü§î&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>netcore</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 14 May 2021 17:17:42 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-7cj</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-7cj</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week ‚Äî what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count ‚Äî big or small üéâ&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Exploring a new neighborhood in your town ... or whatever else might spark joy ‚ù§Ô∏è &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fdlcvptCs4qsM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fdlcvptCs4qsM/giphy.gif" alt="Dog in hammock"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Missing Azure REST APIs. Need not Worry</title>
      <author>Ilyas F</author>
      <pubDate>Fri, 14 May 2021 17:10:52 +0000</pubDate>
      <link>https://dev.to/ilyasit83/missing-azure-rest-apis-need-not-worry-36nb</link>
      <guid>https://dev.to/ilyasit83/missing-azure-rest-apis-need-not-worry-36nb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_IROmIIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7z5c3xj5yvrhavy9kj2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_IROmIIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7z5c3xj5yvrhavy9kj2.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I came across a situation where I had to automate the process of creating and setting up an Azure IoT Central solution entirely using Azure REST APIs and found they are not available or not documented as of May 14th, 2021. However, you would definitely find &lt;code&gt;AZ CLI&lt;/code&gt; commands available, finding the REST APIs for the specific action is very simple. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/cli/azure/iot/central?view=azure-cli-latest"&gt;Azure IoT Central - AZ CLI commands&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/rest/api/iotcentral/"&gt;Azure IoT Central - REST API reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gap might be fixed when you read this article in the future, so I highly recommend to refer the &lt;a href="https://docs.microsoft.com/en-us/rest/api/iotcentral/"&gt;Azure IoT Central - REST API reference&lt;/a&gt; to check if the APIs are documented. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution-az-cli-to-the-rescue"&gt;
  &lt;/a&gt;
  The Solution - AZ CLI to the rescue
&lt;/h2&gt;

&lt;p&gt;Login to your &lt;code&gt;AZ CLI&lt;/code&gt; and set the default subscription.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;az login
&lt;/span&gt;&lt;span class="gp"&gt;az account set -s &amp;lt;&amp;lt;subscription name or id&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next fire the respective AZ CLI command that you didn't find the REST API, in my case creating a new Azure IoT Central App with the &lt;strong&gt;--debug&lt;/strong&gt; argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;az iot central app create --name myiotcentral001
                          --resource-group rg_iotcentral
                          --subdomain myiotcentral001
                          --debug
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a lot of debugging statements, but give your attention to the lines where it makes a call to the REST API. Refer to the below screenshot. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIBxtz30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lpuk51wq81bxtqplqep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIBxtz30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lpuk51wq81bxtqplqep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So you know, how to find the REST APIs of Azure!&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Happy Azure!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azcli</category>
      <category>azurerestapi</category>
      <category>restfulapi</category>
    </item>
    <item>
      <title>From Java to Kotlin in 20 minutes ‚ö°Ô∏è</title>
      <author>Jean-Michel Fayard üá´üá∑üá©üá™üá¨üáßüá™üá∏üá®üá¥</author>
      <pubDate>Fri, 14 May 2021 16:55:07 +0000</pubDate>
      <link>https://dev.to/jmfayard/from-java-to-kotlin-in-20-minutes-d9f</link>
      <guid>https://dev.to/jmfayard/from-java-to-kotlin-in-20-minutes-d9f</guid>
      <description>&lt;p&gt;What is the experience like as a Java developer to start programming in Kotlin?&lt;/p&gt;

&lt;p&gt;I didn't remember, it was years ago for me!&lt;/p&gt;

&lt;p&gt;Fortunately a mob-programming session with my colleagues gave me the chance to see again things with a beginner's mind.&lt;/p&gt;

&lt;p&gt;Story time!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#show-me-the-code"&gt;Show me the code!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mob-programming"&gt;Mob-programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tools--kotlin--configure-kotlin-in-project"&gt;&lt;code&gt;Tools &amp;gt; Kotlin &amp;gt; Configure Kotlin in project&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tell-java-that-parametersarenonnullbydefault"&gt;Tell Java that &lt;code&gt;@ParametersAreNonnullByDefault&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pinguesser-convert-java-file-to-kotlin-file"&gt;PinGuesser: &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pinguessertest-convert-java-file-to-kotlin-file--and-manual-fixes"&gt;PinGuesserTest: &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;  and manual fixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-the-kotlin-standard-library"&gt;Use the Kotlin standard library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#replace-stream-api-with-kotlin-stdlib"&gt;Replace stream() API with Kotlin stdlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#default-to-read-only-properties"&gt;Default to read-only properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fail-fast"&gt;Fail fast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functional-style"&gt;Functional style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#listfold"&gt;List.fold()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-do-we-go-from-here"&gt;Where do We Go From Here?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#show-me-the-code"&gt;
  &lt;/a&gt;
  Show me the code!
&lt;/h2&gt;

&lt;p&gt;To follow along, checkout the code.&lt;/p&gt;

&lt;p&gt;You need to have &lt;a href="https://www.jetbrains.com/idea"&gt;IntelliJ Community Edition&lt;/a&gt; installed. It's free!&lt;/p&gt;

&lt;p&gt;On MacOS for example, that's &lt;code&gt;$ brew install intellij-idea-ce&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The code is here, and you can see all the changes described below &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1"&gt;&lt;strong&gt;in this pull-request&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jmfayard"&gt;
        jmfayard
      &lt;/a&gt; / &lt;a href="https://github.com/jmfayard/from-java-to-kotlin"&gt;
        from-java-to-kotlin
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Kata: the observed PIN&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.codewars.com/kata/5263c6999e0f40dee200059d/train/java" rel="nofollow"&gt;https://www.codewars.com/kata/5263c6999e0f40dee200059d/train/java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alright, detective, one of our colleagues successfully observed our target person, Robby the robber. We followed him to a secret warehouse, where we assume to find all the stolen stuff. The door to this warehouse is secured by an electronic combination lock. Unfortunately our spy isn't sure about the PIN he saw, when Robby entered it.&lt;/p&gt;
&lt;p&gt;The keypad has the following layout:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 1 ‚îÇ 2 ‚îÇ 3 ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚î§
‚îÇ 4 ‚îÇ 5 ‚îÇ 6 ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚î§
‚îÇ 7 ‚îÇ 8 ‚îÇ 9 ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îò
    ‚îÇ 0 ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îò
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="zeroclipboard-container position-absolute right-0 top-0"&gt;
  
    

    

  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;He noted the PIN 1357, but he also said, it is possible that each of the digits he saw could actually be another adjacent digit (horizontally or vertically, but not diagonally). E.g. instead of the 1 it could also be the 2 or 4. And instead of the 5 it could also be the‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jmfayard/from-java-to-kotlin"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;But first some context&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobprogramming"&gt;
  &lt;/a&gt;
  Mob-programming
&lt;/h2&gt;

&lt;p&gt;My colleagues Sarah and Peter and I were doing in a session of &lt;a href="https://en.wikipedia.org/wiki/Mob_programming"&gt;Mob programming&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The goal was to solve the &lt;a href="https://www.codewars.com/kata/5263c6999e0f40dee200059d/train/java"&gt;kata of The observed PIN&lt;/a&gt;, where an unreliable spy tells that he saw the PIN &lt;strong&gt;1357&lt;/strong&gt; being used, but actually, he's not quite sure, each digit could be instead one of its neighbor on the keyboard layout. It could be &lt;strong&gt;1357&lt;/strong&gt; but also for example &lt;strong&gt;2357&lt;/strong&gt; or &lt;strong&gt;1368.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project was a Java project built with Maven. It contains two files: &lt;code&gt;PinGuesser.java&lt;/code&gt; and &lt;code&gt;PinGuesserTest.java&lt;/code&gt;. It compiles and run the unit tests in a matter of seconds, not minutes like in many Android apps. That makes for a better developer experience IMHO.&lt;/p&gt;

&lt;p&gt;We were using &lt;a href="https://www.jetbrains.com/help/idea/code-with-me.html"&gt;IntelliJ's Code With Me&lt;/a&gt; to share the code.&lt;/p&gt;

&lt;p&gt;We were doing well and had solved the Kata in Java, then had refactored it to a satisfactory state.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Is there anything else we could improve?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : I don't know, looks good to me.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Well, we have 20 minutes left, why not rewriting the whole thing in Kotlin?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Oh, I've heard about Kotlin but haven't had the chance to use it yet. 20 minutes though, do you think we can do it?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Let's get started and see where it leads us!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-tools-gt-kotlin-gt-configure-kotlin-in-project-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Tools &amp;gt; Kotlin &amp;gt; Configure Kotlin in project&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Ok, so I have never done any Kotlin in my life, tell me what to do.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : There is a command IntelliJ called &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;. It's a great starting point!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Let's give it a try.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f5UjXm3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118158571-42ef6000-b41c-11eb-89df-c32de3ffe8f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5UjXm3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118158571-42ef6000-b41c-11eb-89df-c32de3ffe8f0.png" alt="https://user-images.githubusercontent.com/459464/118158571-42ef6000-b41c-11eb-89df-c32de3ffe8f0.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIa61Rsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118158602-4d115e80-b41c-11eb-8cb6-ee85143251ae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIa61Rsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118158602-4d115e80-b41c-11eb-8cb6-ee85143251ae.png" alt="https://user-images.githubusercontent.com/459464/118158602-4d115e80-b41c-11eb-8cb6-ee85143251ae.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : IntelliJ tells me that Kotlin is not configured, that makes sense.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : How do I configure Kotlin in Maven?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : I don't know, I always used Gradle.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Just let IntelliJ do it!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : By the way, what it will do is the same thing as &lt;code&gt;Tools &amp;gt; Kotlin &amp;gt; Configure Kotlin in project&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Let's do it&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : It seems to have worked. There are updates to the file &lt;code&gt;pom.xml&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/caaab696fa50e57e5bcb7c0a23f70de29b43b480"&gt;first commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tell-java-that-raw-parametersarenonnullbydefault-endraw-"&gt;
  &lt;/a&gt;
  Tell Java that &lt;code&gt;@ParametersAreNonnullByDefault&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Before we try the Java to Kotlin converter, there is something we want to take are of.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : As you know, Kotlin has integrated nullability in the type system while Java by default has not.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Therefore the converter is going to allow nulls everywhere, which is technically correct but not what you want.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : But there are annotations in Java to say if something is nullable or not, right?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Exactly! And the one we want is to tell by default everything is non-null. Conveniently, it's exactly how it works in Kotlin too.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/pom.xml b/pom.xml
&lt;/span&gt;     &amp;lt;dependencies&amp;gt;
&lt;span class="gi"&gt;+        &amp;lt;dependency&amp;gt;
+            &amp;lt;groupId&amp;gt;com.google.code.findbugs&amp;lt;/groupId&amp;gt;
+            &amp;lt;artifactId&amp;gt;jsr305&amp;lt;/artifactId&amp;gt;
+            &amp;lt;version&amp;gt;3.0.2&amp;lt;/version&amp;gt;
+        &amp;lt;/dependency&amp;gt;
&lt;/span&gt;
+++ b/src/main/java/pin/package-info.java
&lt;span class="p"&gt;@@ -0,0 +1,4 @@&lt;/span&gt;
&lt;span class="gi"&gt;+@ParametersAreNonnullByDefault
+package pin;
+
+import javax.annotation.ParametersAreNonnullByDefault;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#pinguesser-raw-convert-java-file-to-kotlin-file-endraw-"&gt;
  &lt;/a&gt;
  PinGuesser: &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : I guess I now open &lt;code&gt;PinGuesser.java&lt;/code&gt; and just relaunch the converter  &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Correct&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : It seems that... it worked? There is a file &lt;code&gt;PinGuesser.kt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : How do you know it worked, though?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : You should run the unit tests&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-7fw-xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117936889-aaff5280-b305-11eb-9c84-be7205e9673c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-7fw-xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117936889-aaff5280-b305-11eb-9c84-be7205e9673c.png" alt="https://user-images.githubusercontent.com/459464/117936889-aaff5280-b305-11eb-9c84-be7205e9673c.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : It's still all green. Amazing, I have written my first Kotlin code ever, and it is bug-free!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Good job!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What about the tests? Shouldn't we convert those too?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : You don't need to. Java and Kotlin can co-exist peacefully in the same codebase.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Ok, but it looks fun, I want to try it out too!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : First let me &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/08f5f3d1d5f84a8746a671e3828c18d3d703ae06"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#pinguessertest-raw-convert-java-file-to-kotlin-file-endraw-and-manual-fixes"&gt;
  &lt;/a&gt;
  PinGuesserTest: &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;  and manual fixes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : So I open &lt;code&gt;PinGuesserTest.java&lt;/code&gt; and run the command. How is it called?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Let's go!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : I now have a &lt;code&gt;PinGuesserTest.kt&lt;/code&gt; . It has some errors though&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tG7_8uNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117937632-80fa6000-b306-11eb-931b-7642e4aac07a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tG7_8uNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117937632-80fa6000-b306-11eb-931b-7642e4aac07a.png" alt="https://user-images.githubusercontent.com/459464/117937632-80fa6000-b306-11eb-931b-7642e4aac07a.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Maybe apply the suggestion to optimize imports?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Ok.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : It worked.&lt;/li&gt;
&lt;li&gt;Me : as you see it's not perfect, but it's an awesome learning tool: you start with what you already know (in Java) and see it converted in what you want to learn (in Kotlin)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Let me run the unit tests&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : I have some weird JUnit errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---az0IFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118160523-b3977c00-b41e-11eb-8151-a4dea10aa9e2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---az0IFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118160523-b3977c00-b41e-11eb-8151-a4dea10aa9e2.png" alt="https://user-images.githubusercontent.com/459464/118160523-b3977c00-b41e-11eb-8151-a4dea10aa9e2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Ok, so I understand that. Java has &lt;strong&gt;static&lt;/strong&gt; methods while Kotlin has the concept of a &lt;a href="https://kotlinlang.org/docs/object-declarations.html#companion-objects"&gt;companion object { ... }&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Its methods &lt;em&gt;look like&lt;/em&gt; static methods but are a bit different. Here JUnit really wants static methods, and we need an annotation to make it happy
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-        fun testSingleDigitParameters(): Stream&amp;lt;Arguments&amp;gt; {
&lt;/span&gt;&lt;span class="gi"&gt;+        @JvmStatic fun testSingleDigitParameters(): Stream&amp;lt;Arguments&amp;gt; {
&lt;/span&gt;             return Stream.of(
                 Arguments.of("1", java.util.Set.of("1", "2", "4")),
                 Arguments.of("2", java.util.Set.of("1", "2", "3", "5")),
&lt;span class="p"&gt;@@ -61,7 +58,7 @@&lt;/span&gt; internal class PinGuesserTest {
             )
         }

-        fun invalidParams(): Stream&amp;lt;Arguments&amp;gt; {
&lt;span class="gi"&gt;+        @JvmStatic  fun invalidParams(): Stream&amp;lt;Arguments&amp;gt; {
&lt;/span&gt;             return Stream.of(
                 Arguments.of("   "),
                 Arguments.of("A"),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Unit tests now work!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : The project is now 100% in Kotlin&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/f4d60faa3949f21064edda02f69503d57e37941b"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#use-the-kotlin-standard-library"&gt;
  &lt;/a&gt;
  Use the Kotlin standard library
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What comes next?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : It's possible to create &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt; the traditional Java way, but the Kotlin standard library contains plenty of small utilities to streamline that, that would be my first change. Let me do it:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OctTc2Es--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118299183-b6f33c00-b4e0-11eb-9458-c8322d65cae9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OctTc2Es--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118299183-b6f33c00-b4e0-11eb-9458-c8322d65cae9.png" alt="https://user-images.githubusercontent.com/459464/118299183-b6f33c00-b4e0-11eb-9458-c8322d65cae9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : that looks better. Are the unit tests still green?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : They are, let's &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/1a5c8dbe3415be22713b3f765f4050515bb91b72"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#replace-stream-api-with-kotlin-stdlib"&gt;
  &lt;/a&gt;
  Replace stream() API with Kotlin stdlib
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Something else contained in the Kotlin Standard Library are functions found in the functional programming languages like &lt;code&gt;.map()&lt;/code&gt;, &lt;code&gt;.filter()&lt;/code&gt;, &lt;code&gt;.flatmap()&lt;/code&gt; and much more.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : A bit like the Java Stream API that we are using?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Yes, like this but less verbose and more performant under the hood!
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-    fun combineSolutions(pins1: Set&amp;lt;String&amp;gt;, pins2: Set&amp;lt;String&amp;gt;): Set&amp;lt;String&amp;gt; {
-        return pins1.stream()
-            .flatMap { pin1: String -&amp;gt;
-                pins2
-                    .stream()
-                    .map { pin2: String -&amp;gt; pin1 + pin2 }
-            .collect(Collectors.toSet())
-    }
&lt;/span&gt;
+    fun combineSolutions(pins1: Set&amp;lt;String&amp;gt;, pins2: Set&amp;lt;String&amp;gt;): Set&amp;lt;String&amp;gt; =
&lt;span class="gi"&gt;+        pins1.flatMap { pin1 -&amp;gt;
+            pins2.map { pin2 -&amp;gt;
+                "$pin1$pin2"
+             }
+        }.toSet()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Unit tests are still green.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/82070f0b8e9a39c030da723ddb00f1510efb810c"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#default-to-readonly-properties"&gt;
  &lt;/a&gt;
  Default to read-only properties
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Next, in idiomatic Kotlin style, we tend to use &lt;code&gt;val property&lt;/code&gt; instead of &lt;code&gt;var property&lt;/code&gt; most of the time.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What's the difference?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : &lt;code&gt;val property&lt;/code&gt; is read-only, it has no setter, it's like a &lt;code&gt;final field&lt;/code&gt; in Java&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : I see. So, I just change the var property with a val?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Pretty much so.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Easy enough&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/33b089cad9c90996f2800a0657c0f38d57ba992b"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#fail-fast"&gt;
  &lt;/a&gt;
  Fail fast
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Is there an idiomatic way to validate the parameters of a function?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : The PIN should be something like &lt;code&gt;7294&lt;/code&gt; with all characters being digits&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Yes, you use &lt;code&gt;require(condition) { "error message" }&lt;/code&gt;  for that&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : How would that look here?
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="sc"&gt;'9'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"PIN $observedPin is invalid"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// rest goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Thanks!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/2424c592495db6f444e30708b88d9b8e2d26cd5e"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#functional-style"&gt;
  &lt;/a&gt;
  Functional style
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : What comes next?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : I would like to liberate the functions&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What do you mean?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Look, we have this &lt;code&gt;PinGuesser&lt;/code&gt; class, but what it is doing exactly?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : It's doing nothing, it's a dumb namespace.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : It's a &lt;strong&gt;noun&lt;/strong&gt; that prevents us for accessing directly the &lt;strong&gt;verbs&lt;/strong&gt; who are doing the real work.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : One of my favorite programming language of all time is &lt;a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html"&gt;Execution in the kingdom of nouns by Steve Yegge.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : I know that rant, pure genius!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : How do we free up the verbs/functions?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : We remove the class and use top-level functions
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="n"&gt;a20b3&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mf"&gt;38e457&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;100644&lt;/span&gt;
&lt;span class="p"&gt;---&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="p"&gt;+++&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="err"&gt;@@&lt;/span&gt;
 &lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;pin&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.stream.Collectors&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PinGuesser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mapPins&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mapOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"4"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"5"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PinGuesser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="s"&gt;"9"&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"9"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"8"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toCharArray&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PinGuesser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;pins2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;pin2&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                 &lt;span class="s"&gt;"$pin1$pin2"&lt;/span&gt;
             &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;        &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;toSet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;-}&lt;/span&gt;


&lt;span class="p"&gt;---&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesserTest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="p"&gt;+++&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesserTest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PinGuesserTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;pinGuesser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

     &lt;span class="nd"&gt;@ParameterizedTest&lt;/span&gt;
     &lt;span class="nd"&gt;@MethodSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"testSingleDigitParameters"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;testSingleDigit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;actual&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;+&lt;/span&gt;        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;actual&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="nc"&gt;Assertions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/commit/76273f16bd754477c5a558c003d8434b2cb28c98"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#listfold"&gt;
  &lt;/a&gt;
  List.fold()
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Can we go a step back? What does it bring us to make the code nicer like this? At the end of the day, the customer doesn't care.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Well, I don't know you, but often I don't really understand the code I'm supposed to work on. I tend to work hard to simplify it and at some point it fits in my head and the solution becomes obvious.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What would it looks like here?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Now that the code is in a nice functional idiomatic Kotlin, I realize that the program can be solved using a single functional construct: &lt;strong&gt;List.fold()&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Show me the code&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/025fab52f042a3b077204594f8dd2237b8659304"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mapPins&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"PIN $observedPin is invalid"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Char&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;pinsForChar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;
        &lt;span class="nf"&gt;combineSolutions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pinsForChar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;combineSolutions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pins1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;pins2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;pins1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;pin1&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;pins2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;pin2&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="s"&gt;"$pin1$pin2"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;toSet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#where-do-we-go-from-here"&gt;
  &lt;/a&gt;
  Where do We Go From Here?
&lt;/h2&gt;

&lt;p&gt;I hope that you liked this article.&lt;/p&gt;

&lt;p&gt;If you want to get in touch, you are welcome to do so via &lt;a href="https://jmfayard.dev/"&gt;https://jmfayard.dev/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is available at &lt;a href="https://github.com/jmfayard/from-java-to-kotlin"&gt;https://github.com/jmfayard/from-java-to-kotlin&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Start in the &lt;code&gt;java&lt;/code&gt; branch and compare with what is the &lt;code&gt;kotlin&lt;/code&gt; branch. &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1"&gt;&lt;strong&gt;See this pull-request&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested to learn more about Kotlin, I've written about it here&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/best-ways-to-learn-kotlin-from-scratch-or-from-java-with-books-or-tutorials-online-or-in-the-ide-52cm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to learn Kotlin: browser vs IDE, books vs tutorials, for newbies and Java devs&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard üá´üá∑üá©üá™üá¨üáßüá™üá∏üá®üá¥ „Éª Dec 15 '19 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>java</category>
      <category>kotlin</category>
      <category>android</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript Interviews: Implement Memoization in JavaScript</title>
      <author>Amit Khonde</author>
      <pubDate>Fri, 14 May 2021 16:47:25 +0000</pubDate>
      <link>https://dev.to/amitkhonde/javascript-interviews-implement-memoization-in-javascript-eaf</link>
      <guid>https://dev.to/amitkhonde/javascript-interviews-implement-memoization-in-javascript-eaf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-this-series-about"&gt;
  &lt;/a&gt;
  What is this series about?
&lt;/h1&gt;

&lt;p&gt;Hello all! Welcome to the JavaScript interview questions series. In each post of this series, I will talk about the questions (specific to JavaScript) I faced in my recent interviews. This series will be helpful for you if you are preparing for JavaScript interviews or just started to deep dive into JavaScript and want to test your knowledge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#post-2-implement-memoization-in-javascript"&gt;
  &lt;/a&gt;
  Post 2: Implement Memoization in JavaScript
&lt;/h2&gt;

&lt;p&gt;Imagine you do not have a memory inside your brain. And someone asks you a question like, &lt;em&gt;"What is 14353 * 34789?"&lt;/em&gt;. You do the calculation and give the answer. Because you do not have any memory, this question and its answer have been wiped out of your mind. Now again if someone asks you the same question, you will again do the calculation and give the answer. Doing this calculation is tedious and it used some of your energy. Isn't this frustrating?&lt;/p&gt;

&lt;p&gt;Now let us come to the real world. You have the memory. Someone asks &lt;em&gt;"What is 14353 * 34789?"&lt;/em&gt;. You do the calculation and give the answer. Now, this question and answer are stored inside your short-term memory. If again in few seconds, you are asked the same question, you will directly access the memory and give the answer without any calculation.&lt;/p&gt;

&lt;p&gt;This technique is known as Memoization. In computer science also, this technique is used to avoid heavy calculations. Now enough of imagination. Let us dive into the real interview question. üë®‚Äçüíªüë®‚Äçüíª&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h2&gt;

&lt;p&gt;Write a function &lt;code&gt;memoize&lt;/code&gt; which will receive a function and return its memoized version. When the memoized function is called with the same parameters, again and again, it will just log the value with a message "Did not perform calculations. Here is your answer: ". If those parameters have never been passed, it will just print the answer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Write your code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedMultiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;memoizedMultiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Expected Output: &lt;/span&gt;
&lt;span class="mi"&gt;90&lt;/span&gt;

&lt;span class="nx"&gt;memoizedMultiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Expected Output: &lt;/span&gt;
&lt;span class="nx"&gt;Did&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;perform&lt;/span&gt; &lt;span class="nx"&gt;calculations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Here&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;

&lt;span class="nx"&gt;memoizedMultiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Expected Output: &lt;/span&gt;
&lt;span class="mi"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Before diving into the solution, I highly suggest that you try to solve this problem on your own. Here is a hint: Think Closures.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;As mentioned in the previous post, I always start with the basic stuff being asked in the question. The problem statement tells us that we have to return a function that will call the function that we want to memoize and print the result. Let us write that part first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great. The next thing problem asks us to memoize the result if we pass the same parameters to the memoized function. This seems like a good opportunity to use Closures. If you are unfamiliar with closures, please read about them &lt;a href="https://www.freecodecamp.org/news/lets-learn-javascript-closures-66feb44f6a44/"&gt;here&lt;/a&gt;. With the help of the closure, our returned function will have to the variables declared in its parent scope. Let us add the Closure now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;argumentsMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea we are trying to follow here is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When the memoized function is called, we will store the arguments in the &lt;code&gt;argumentsMap&lt;/code&gt; as keys and store the result for that argument as its value.&lt;/li&gt;
&lt;li&gt;If the function is called for the same parameters, we will check if &lt;code&gt;argumentsMap&lt;/code&gt; has the parameters as key. If yes, will directly get the value and not perform any calculations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The obvious question here is that how will we store the arguments as a key in &lt;code&gt;argumentsMap&lt;/code&gt;? For that, I have chosen an approach where I will apply &lt;code&gt;JSON.stringify&lt;/code&gt; on arguments and then store them as keys. You can come with a different approach for this which you might think is better. I Would love to see what you think about how this can be done. Please share your approaches in the comments.&lt;/p&gt;

&lt;p&gt;With that sorted out, the rest of the code is very simple. We will just add few checks and print the results. The final version of my answer looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;argumentsMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;argumentKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argumentsMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;argumentKey&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Did not perform calculations. Here is your answer: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argumentsMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;argumentKey&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;argumentsMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;argumentKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Yay!! This looks like a working solution for now. I would love to know what approaches you can come up with for this problem. Do post your suggestions in the comments. And for more interesting questions like this, keep following this series. Until then, Happy Coding!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>career</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Redux alternative. Redoor new state manger for react, preact, inferno</title>
      <author>Ruslan</author>
      <pubDate>Fri, 14 May 2021 16:45:02 +0000</pubDate>
      <link>https://dev.to/rubender/redux-alternative-redoor-new-state-manger-for-react-preact-inferno-29hm</link>
      <guid>https://dev.to/rubender/redux-alternative-redoor-new-state-manger-for-react-preact-inferno-29hm</guid>
      <description>&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;I want to introduce you with my &lt;a href="https://github.com/rubender/redoor"&gt;redoor&lt;/a&gt; library alternative to redux. My team and I have been successfully using it in various projects for a year now, and now we want to share it with you.&lt;/p&gt;

&lt;p&gt;What's new&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;size only 3KB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;convenient work with asynchronous code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;have your own events&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;works with react, preact, inferno&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;debugger on websockets&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of projects on redoor: &lt;a href="https://github.com/rubender/redoor_todo_example"&gt;TODO&lt;/a&gt; app &lt;a href="https://github.com/rubender/react_redoor_ws_example"&gt;Websockets&lt;/a&gt; app&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>redux</category>
      <category>statemanager</category>
    </item>
    <item>
      <title>üî• Next JS TypeScript Template Free using Tailwind 2.0, ESLint, Prettier and Husky</title>
      <author>Remi W.</author>
      <pubDate>Fri, 14 May 2021 16:24:24 +0000</pubDate>
      <link>https://dev.to/ixartz/next-js-typescript-template-free-using-tailwind-2-0-eslint-prettier-and-husky-301k</link>
      <guid>https://dev.to/ixartz/next-js-typescript-template-free-using-tailwind-2-0-eslint-prettier-and-husky-301k</guid>
      <description>&lt;p&gt;A Next JS TypeScript template free and open source made with great tooling for developers: Tailwind 2.0, Webpack 5, ESLint, Prettier, Husky and Bundle Analyzer.&lt;/p&gt;

&lt;p&gt;The GitHub repo have already reached 100+ stars üåü.&lt;/p&gt;

&lt;p&gt;Built for production with high-quality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üéâ Type checking, TypeScript&lt;/li&gt;
&lt;li&gt;‚úèÔ∏è Linter, ESLint&lt;/li&gt;
&lt;li&gt;üõ† Code Formatter, Prettier&lt;/li&gt;
&lt;li&gt;ü¶ä SEO friendly&lt;/li&gt;
&lt;li&gt;üöÄ Production-ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/"&gt;NextJS TypeScript Template live demo&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;
        Next-js-Boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üöÄ Boilerplate and Starter for Next.js 10+, Tailwind CSS 2.0 and TypeScript ‚ö°Ô∏è Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, PostCSS, Tailwind CSS.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Boilerplate and Starter for Next JS 10+, Tailwind CSS 2.0 and TypeScript&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fst2T_oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-js-Boilerplate/master/public/assets/images/nextjs-starter-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;üöÄ Boilerplate and Starter for Next.js, Tailwind CSS and TypeScript ‚ö°Ô∏è Made with developer experience first: &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;, &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;, &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt;, &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
üî• &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
üé® Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üíÖ &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt; for processing &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üéâ Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
‚úèÔ∏è Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üõ† Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
ü¶ä SEO metadata, &lt;a href="https://developers.google.com/search/docs/guides/intro-structured-data" rel="nofollow"&gt;JSON-LD&lt;/a&gt; and &lt;a href="https://ogp.me/" rel="nofollow"&gt;Open Graph&lt;/a&gt; tags with &lt;a href="https://github.com/garmeeh/next-seo"&gt;Next SEO&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
‚öôÔ∏è &lt;a href="https://www.npmjs.com/package/@next/bundle-analyzer" rel="nofollow"&gt;Bundler Analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üåà Include a FREE minimalist theme&lt;/li&gt;
&lt;li&gt;
üíØ Maximize lighthouse score&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built-in feature from Next.js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
‚òï Minify HTML &amp;amp; CSS&lt;/li&gt;
&lt;li&gt;
üí® Live reload&lt;/li&gt;
&lt;li&gt;
‚úÖ Cache busting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
Philosophy&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Minimal code&lt;/li&gt;
&lt;li&gt;SEO-friendly&lt;/li&gt;
&lt;li&gt;
üöÄ Production-ready&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
Premium Themes (&lt;a href="https://creativedesignsguru.com/category/nextjs/" rel="nofollow"&gt;Nextjs Themes&lt;/a&gt;)&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/" rel="nofollow"&gt;Green Nextjs Landing&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;&lt;/div&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-js-Boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#other-next-js-templates-and-themes"&gt;
  &lt;/a&gt;
  Other Next JS Templates and Themes
&lt;/h2&gt;

&lt;p&gt;I've also built others components and UI blocks in React. You can find them on my &lt;a href="https://creativedesignsguru.com/category/nextjs/"&gt;Next JS templates&lt;/a&gt; to quickly start your project:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/"&gt;Green Nextjs Tailwind Template&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;Indigo Nextjs Landing Page Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CbDAFVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-green-modern-nextjs-theme-xs.png" alt="Green Nextjs Tailwind Template"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvlCiWRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-indigo-modern-nextjs-theme-xs.png" alt="Indigo Nextjs Landing Page Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;Purple Responsive Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-blue-modern-react-theme/"&gt;Blue SaaS Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsLIO5h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-purple-modern-nextjs-theme-xs.png" alt="Purple Responsive Nextjs Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-blue-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--az4i2Gg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-blue-modern-nextjs-theme-xs.png" alt="Blue SaaS Nextjs Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can easily customize the themes based on your needs by saving you development and design time.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Privacy focused search engine DuckDuckGo.</title>
      <author>Sumit kumar singh</author>
      <pubDate>Fri, 14 May 2021 16:21:22 +0000</pubDate>
      <link>https://dev.to/thecorrupttech/privacy-focused-search-engine-duckduckgo-3pm</link>
      <guid>https://dev.to/thecorrupttech/privacy-focused-search-engine-duckduckgo-3pm</guid>
      <description>&lt;p&gt;Every move you make, every click you take, someone's watching you online. According to &lt;a href="https://gs.statcounter.com/"&gt;Statcounter&lt;/a&gt; (search engine market share of April-May 2021) 92.21% of internet users use the Google search engine. Popular search engines like Google, Yahoo, Bing are tracking and collecting your search behavior and analyzing your searches with their algorithms.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-BKEFjg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa7uyfzwlgc71c3lecsa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-BKEFjg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa7uyfzwlgc71c3lecsa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-avoid-or-fight-with-this-issue"&gt;
  &lt;/a&gt;
  How can we avoid or fight with this issue?
&lt;/h3&gt;

&lt;p&gt;Using, DuckDuckGo that is a privacy-focused search engine and the top choice for those who care about protecting their data. DuckDuckGo is a web search engine that doesn't collect your data or track your searches. It doesn't store cookies, search history, nor your IP.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Em2QIpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzaj3naq6hf8hijg67hp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Em2QIpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzaj3naq6hf8hijg67hp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Since it doesn't associate your search queries with your IP address, personalized ads won't follow you around. DuckDuckGo also doesn't offer any personalized results according to your search patterns. Everyone gets the same results for the same search. Using the DuckDuckGo is free at all.&lt;/p&gt;

&lt;p&gt;If you want know more please visit &lt;a href="https://the-corrupt-tech.com/"&gt;The Corrupt Tech&lt;/a&gt; or refer on dev community &lt;a class="mentioned-user" href="https://dev.to/thecorrupttech"&gt;@thecorrupttech&lt;/a&gt;
.&lt;/p&gt;

</description>
      <category>privacy</category>
      <category>cybersecurity</category>
      <category>cybertips</category>
    </item>
    <item>
      <title>How to define Open Graph / Twitter image alt text (and why it might not matter...)</title>
      <author>Stefan Judis</author>
      <pubDate>Fri, 14 May 2021 16:06:25 +0000</pubDate>
      <link>https://dev.to/stefanjudis/how-to-define-open-graph-twitter-image-alt-text-and-why-it-might-not-matter-12f7</link>
      <guid>https://dev.to/stefanjudis/how-to-define-open-graph-twitter-image-alt-text-and-why-it-might-not-matter-12f7</guid>
      <description>&lt;p&gt;You know all these fancy link previews that you see on social media when people share articles and resources, right? These previews are based on various meta elements defined in your website's &lt;code&gt;head&lt;/code&gt;. You can define the Twitter card layout using &lt;code&gt;&amp;lt;meta property="twitter:card" content="summary_large_image"&amp;gt;&lt;/code&gt;, specify the Facebook preview image with &lt;code&gt;&amp;lt;meta property="og:image" content="https://.../your-image.jpg"/&amp;gt;&lt;/code&gt; and many more configuration options. &lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/59yNEa6BuvIHW6OVgYPuM6/68a43de0febd017c8462404745403d1e/Screenshot_2021-05-14_at_17.41.21.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/59yNEa6BuvIHW6OVgYPuM6/68a43de0febd017c8462404745403d1e/Screenshot_2021-05-14_at_17.41.21.png" alt="Example of a Twitter card preview."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read more about the details in the documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ogp.me/"&gt;the Open Graph Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/markup"&gt;Twitter cards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recently I learned that the two standards (Open Graph and Twitter cards) support alternative text for preview images. I want to be a good web citizen and implemented it right away.&lt;/p&gt;

&lt;p&gt;Unfortunately, I discovered that the alternative text definition might not matter much for Facebook or Twitter. That's a bummer; read on to learn more. üòâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-graph-and-twitter-cards-support-image-alternative-text"&gt;
  &lt;/a&gt;
  Open Graph and Twitter cards support image alternative text
&lt;/h2&gt;

&lt;p&gt;Thanks to my friend Feli (and Lea Rosema and Manuel Matuzoviƒá) I discovered Open Graph's &lt;code&gt;&amp;lt;meta property="og:image:alt " content="Your image alt text"/&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kotzendekrabbe/status/1389142654395555841"&gt;She tweeted the following&lt;/a&gt;. üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/3Uy58qYA5gaaLlhOZUOqtl/34afe922dfbba152bf1d68a7cdd61729/Screenshot_2021-05-14_at_15.33.52.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/3Uy58qYA5gaaLlhOZUOqtl/34afe922dfbba152bf1d68a7cdd61729/Screenshot_2021-05-14_at_15.33.52.png" alt="Feli's Tweet: &amp;quot;TIL Open Graph Tags provide alt for images og:image:alt. Thank you @terabaud for letting me know ‚ô•Ô∏è&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turns out that not only Open Graph but also Twitter allows alternative text using &lt;code&gt;&amp;lt;meta property="twitter:image:alt" content="Your image alt text"&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;That's very exciting! Ideally, these meta elements would allow us to define the alternative text for the images displayed on Twitter and Facebook to make them more accessible for assistive technology.&lt;/p&gt;

&lt;p&gt;Let's look at how Facebook and Twitter render my site's URL previews!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-image-alt-text-might-not-make-a-big-difference-for-assistive-technology"&gt;
  &lt;/a&gt;
  The image alt text might not make a big difference for assistive technology
&lt;/h2&gt;

&lt;p&gt;Let's have a look at how Facebook and Twitter render image alternative text in their previews.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twitters-preview-cards"&gt;
  &lt;/a&gt;
  Twitter's preview cards
&lt;/h3&gt;

&lt;p&gt;I went to &lt;a href="https://cards-dev.twitter.com/validator"&gt;the Twitter Card validator&lt;/a&gt; to check my site, and it looked great!&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/7rKMZIpScuRku3qBT1nz9h/9c327165ebb197eab80520b0dad13eff/Screenshot_2021-05-14_at_16.29.52.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/7rKMZIpScuRku3qBT1nz9h/9c327165ebb197eab80520b0dad13eff/Screenshot_2021-05-14_at_16.29.52.png" alt="Twitter Card Validator showing the correctly displayed alt text define in meta elements."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The alternative text was set correctly in the validator preview. The next step was to check how Twitter renders the previews inside of their UI.&lt;/p&gt;

&lt;p&gt;Twitter caches all their previews for a while, and because I just deployed the &lt;code&gt;twitter:image:alt&lt;/code&gt; I couldn't check if it's rendered the same way the validator did. &lt;/p&gt;

&lt;p&gt;Nevertheless, I still had a look at the rendered HTML and found out that Twitter renders the preview image in many many divs and one of them includes the &lt;code&gt;aria-hidden="true"&lt;/code&gt; attribute. üò≤&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/2jhHTZcJT8EQp6I4Zhn5ju/999ae22c868bd9141de2c552af1c5270/Screenshot_2021-05-14_at_16.43.16.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/2jhHTZcJT8EQp6I4Zhn5ju/999ae22c868bd9141de2c552af1c5270/Screenshot_2021-05-14_at_16.43.16.png" alt='Twitter markup showing the surrounding div including an aria-hidden="true"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute"&gt;&lt;code&gt;aria-hidden&lt;/code&gt; removes the element and all its children from the accessibility tree&lt;/a&gt;. That means that the new alternative text (if it shows up) won't improve the screen reader experience because screen readers won't discover the image after all. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit: Twitter uses &lt;code&gt;twitter:image:alt&lt;/code&gt; to define the preview image alt text. üéâ&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This discovery was disappointing, but I moved on to Facebook to find some improvements over there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#facebooks-link-preview"&gt;
  &lt;/a&gt;
  Facebook's link preview
&lt;/h3&gt;

&lt;p&gt;Similar to Twitter, Facebook also provides a preview tool ‚Äì &lt;a href="https://developers.facebook.com/tools/debug/"&gt;the sharing debugger&lt;/a&gt;. I checked one of the URLs that now include &lt;code&gt;og:image:alt&lt;/code&gt;. Everything showed up correctly in the debugger's info section. üéâ&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/1ks6Hip3LaZJG2HY5xaPRc/b1222700db8cff64a5e4e1d1956ffe87/Screenshot_2021-05-14_at_16.57.26.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/1ks6Hip3LaZJG2HY5xaPRc/b1222700db8cff64a5e4e1d1956ffe87/Screenshot_2021-05-14_at_16.57.26.png" alt="Facebook debugger preview showing the correct content for og:image:alt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, the alternative text was not showing up in the debugger's preview. I shared a URL on Facebook to see my new alternative text in production. Luckily the image doesn't seem to be hidden from the accessibility tree, but(!) it appears that Facebook uses &lt;code&gt;og:title&lt;/code&gt; instead of &lt;code&gt;og:image:alt&lt;/code&gt; for the image alternative text. üò¢&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/42aeQPbqcglNLjOOt9LjEh/b17bcd95bf7a88ace40d5e9d1dc6b609/Screenshot_2021-05-14_at_17.04.50.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/42aeQPbqcglNLjOOt9LjEh/b17bcd95bf7a88ace40d5e9d1dc6b609/Screenshot_2021-05-14_at_17.04.50.png" alt="Facebook UI preview showing that og:title is used for the image alt text."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I guess too few people are using &lt;code&gt;og:image:alt&lt;/code&gt; so that Facebook goes with the title to be on the safe side. &lt;/p&gt;

&lt;p&gt;These two discoveries bring up the question: &lt;strong&gt;should we bother implementing social media preview alternative texts if it doesn't improve the previews' accessibility&lt;/strong&gt;?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I will keep the &lt;code&gt;og:image:alt&lt;/code&gt; and &lt;code&gt;twitter:image:alt&lt;/code&gt; meta elements on my site. The elements are not harming the overall experience (I'm ignoring the few bytes of additional HTML), but unfortunately, they're not making social media previews more accessible either. &lt;/p&gt;

&lt;p&gt;If Facebook and Twitter change their implementation in the future, I'll be ready with correct alternative texts at least.&lt;/p&gt;




&lt;p&gt;Side note: &lt;a href="https://twitter.com/jkc_codes/status/1393234667206320132"&gt;John Kemp Cruz also pointed out that Twitter falls back to Open Graph for particular properties&lt;/a&gt;. Good to know!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>a11y</category>
    </item>
  </channel>
</rss>
