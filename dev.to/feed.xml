<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Kid Me wouldn't believe I got an iMac in 2020</title>
      <author>Alejandra Quetzalli üêæ</author>
      <pubDate>Fri, 01 Jan 2021 19:47:02 +0000</pubDate>
      <link>https://dev.to/alejandra_quetzalli/kid-me-wouldn-t-believe-i-got-an-imac-in-2020-4j26</link>
      <guid>https://dev.to/alejandra_quetzalli/kid-me-wouldn-t-believe-i-got-an-imac-in-2020-4j26</guid>
      <description>&lt;p&gt;If we were to time travel to the early 90s when I was a kid, and you were to tell me that one day I would be able to afford an iMac, I wouldn't have believed you. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Granted, iMacs specifically didn't obviously exist when I was a kiddo, but you know what I mean.)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9hR43GyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/up70bj19n0psqd0mrs7h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9hR43GyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/up70bj19n0psqd0mrs7h.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-grew-up-poor" class="anchor"&gt;
  &lt;/a&gt;
  We grew up poor
&lt;/h2&gt;

&lt;p&gt;I was never one of those kids who got to own Mac laptops all through high school and college. In fact, &lt;strong&gt;I did not even touch one until I was in my early 20s!&lt;/strong&gt; The first time I was able to afford a MacBook Air laptop was in my late 20s.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today-i-am-privileged-i-can-afford-an-imac" class="anchor"&gt;
  &lt;/a&gt;
  Today, I am privileged. I can afford an iMac!
&lt;/h2&gt;

&lt;p&gt;My iMac arrived literally on the last day of the year for 2020. 2020 was a hard hit financially in so many ways, all over the world. I cannot believe my privilege, in being able to buy an iMac in what will probably go down in history as one of the most insane world criseses faced by humanity. &lt;/p&gt;

&lt;p&gt;Because that is what it is! It is a privilege to be able to own fancy cool tech gadgets, at a time when many people around the world have lost their jobs due to COVID-19 closures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-know-someone-who-has-less-than-you-do" class="anchor"&gt;
  &lt;/a&gt;
  Do you know someone who has less than you do?
&lt;/h3&gt;

&lt;p&gt;Of course you do! &lt;/p&gt;

&lt;p&gt;We all know someone who has less than we do. If you are like me - a techie who is living a fairly privileged life in 2021 - then I know you can give to others more.&lt;/p&gt;

&lt;p&gt;Don't take your cool stuff and life for granted! Think of those who have less, and think of how you can give back in 2021.&lt;/p&gt;

&lt;p&gt;We have a lot of reconstruction work ahead of us. It's time to give back even more and get to work. ‚ù§Ô∏è ‚ù§Ô∏è ‚ù§Ô∏è &lt;/p&gt;

&lt;p&gt;~AlejandraüíÅüèª‚Äç‚ôÄÔ∏è y Canelaüêæ&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>giveback</category>
    </item>
    <item>
      <title>How to use Google One Tap in your React or Vue project?</title>
      <author>Burak G√ºr</author>
      <pubDate>Fri, 01 Jan 2021 16:52:35 +0000</pubDate>
      <link>https://dev.to/burakgur/how-to-use-google-one-tap-in-your-react-or-vue-project-3jbb</link>
      <guid>https://dev.to/burakgur/how-to-use-google-one-tap-in-your-react-or-vue-project-3jbb</guid>
      <description>&lt;p&gt;Hi there,&lt;br&gt;
I will show you how to use Google One Tap in your project. For this, i use my own npm package &lt;a href="https://github.com/BurakGur/google-one-tap#readme"&gt;google-one-tap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rk3fjMFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rdsu09bx39kbswojoo9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rk3fjMFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rdsu09bx39kbswojoo9w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#get-your-google-api-client-id" class="anchor"&gt;
  &lt;/a&gt;
  Get your Google API client ID
&lt;/h4&gt;

&lt;p&gt;Open the "Credentials" page of the &lt;a href="https://console.developers.google.com/apis"&gt;Google APIs console&lt;/a&gt;.&lt;br&gt;
Create or select a Google APIs project. If you already have a Google Sign-In button, use the existing project and the web client ID.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Install package on your project.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install google-one-tap
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add google-one-tap
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. After this, import package.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import googleOneTap from 'google-one-tap';
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Use googleOneTap method with options.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const options = {
    client_id: '___CLIENT_ID___', // required
    auto_select: false, // optional
    cancel_on_tap_outside: false, // optional
    context: 'signin' // optional
};

googleOneTap(options, (response) =&amp;gt; {
    // Send response to server
    console.log(response);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Vue.js Full Code Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import googleOneTap from 'google-one-tap';
export default {
    mounted() {
        const options = {
            client_id: '___CLIENT_ID___', // required
            auto_select: false, // optional
            cancel_on_tap_outside: false, // optional
            context: 'signin', // optional
        };
        googleOneTap(options, (response) =&amp;gt; {
            // Send response to server
            console.log(response);
        });
    },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After all this, you must send response to server. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node.js Server Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { OAuth2Client } = require('google-auth-library');
const client = new OAuth2Client(CLIENT_ID);
async function verify() {
    const ticket = await client.verifyIdToken({
        idToken: token,
        audience: CLIENT_ID, // Specify the CLIENT_ID of the app that accesses the backend
        // Or, if multiple clients access the backend:
        //[CLIENT_ID_1, CLIENT_ID_2, CLIENT_ID_3]
    });
    const payload = ticket.getPayload();
    const userid = payload['sub'];
    // If request specified a G Suite domain:
    // const domain = payload['hd'];
}
verify().catch(console.error);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thanks for reading üòä&lt;/p&gt;

</description>
      <category>react</category>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a portfolio site in GatsbyJS</title>
      <author>Will Holmes</author>
      <pubDate>Fri, 01 Jan 2021 16:40:10 +0000</pubDate>
      <link>https://dev.to/willholmes/building-a-portfolio-site-in-gatsbyjs-12i5</link>
      <guid>https://dev.to/willholmes/building-a-portfolio-site-in-gatsbyjs-12i5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-do-i-want-a-portfolio-site" class="anchor"&gt;
  &lt;/a&gt;
  Why do I want a portfolio site?
&lt;/h1&gt;

&lt;p&gt;I wanted to build a portfolio site so that I can experiment with new technologies and also showcase what I have been working on recently. In addition to this, it also allows me to keep refining my skills and testing out new ways of building things without the fear of breaking changes with brand new tech.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-gatsby" class="anchor"&gt;
  &lt;/a&gt;
  What Is Gatsby?
&lt;/h1&gt;

&lt;p&gt;I'd heard a lot of buzz about Gatsby but never fully understood what it was. Turns out it's pretty powerful and really simple to use. If you've ever had the pleasure of working with NextJS then it's a fairly similar concept.&lt;/p&gt;

&lt;p&gt;Gatsby is a static site generator that allows you to build websites and progressive web apps using modern javascript tools / utils / frameworks such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ReactJS&lt;/li&gt;
&lt;li&gt;Webpack&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#why-gatsby" class="anchor"&gt;
  &lt;/a&gt;
  Why Gatsby?
&lt;/h1&gt;

&lt;p&gt;As I wanted to build a portfolio &lt;strong&gt;website&lt;/strong&gt; I want to optimise load times for my users. So having a traditional React web app to serve this up didn't make sense. But I also wanted the benefits of developing in the React ecosystem which meant a traditional html / css / js route wasn't favorable. With Gatsby compiling our React app into static assets it also means that load times will be a lot faster than without using it. A key selling factor for me.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-how-did-it-go" class="anchor"&gt;
  &lt;/a&gt;
  So how did it go?
&lt;/h1&gt;

&lt;p&gt;After reading a few articles and the documentation for Gatsby it was pretty clear to see how neat it is. I love how dev friendly the CLI is for Gatsby. To get started you need to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;gatsby&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you have installed Gatsby you can then run the following to get started with a brand new project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;gatsby&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;website&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then once it's finished installing and configuring you can run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;website&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;develop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then you should be greeted to a template website that has been created for you with navigation all setup and examples of how to build in Gatsby, setting you up for success!&lt;/p&gt;

&lt;p&gt;What stood out to me was how nice the functionality they provide out the box is. An SEO component is created for you which you simply implement into all of your pages and is very extensible. This sort of helping hand when onboarding developers onto your framework is what sets aside the competition.&lt;/p&gt;

&lt;p&gt;Plugins are what Gatsby's ecosystem really relies on. There is pretty much a plugin to do anything needed for your website in the Gatsby world. For example, I wanted to optimise how I load content into my website. So I wanted to be able to add markdown files as part of my 'content' folder and read them in my components without having my content sitting hard coded in my components or pages. To do this all I had to do was install a plugin called &lt;strong&gt;gatsby-transformer-remark&lt;/strong&gt;. Then add a little configuration to my Gatsby setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-transformer-remark`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// CommonMark mode (default: true)&lt;/span&gt;
      &lt;span class="na"&gt;commonmark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// Footnotes mode (default: true)&lt;/span&gt;
      &lt;span class="na"&gt;footnotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// Pedantic mode (default: true)&lt;/span&gt;
      &lt;span class="na"&gt;pedantic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// GitHub Flavored Markdown mode (default: true)&lt;/span&gt;
      &lt;span class="na"&gt;gfm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// Plugins configs&lt;/span&gt;
      &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now I can call my markdown files from GraphQL queries inside my components or pages meaning the content sits in a content directory and my components and pages are in their own worlds too.&lt;/p&gt;

&lt;p&gt;Once I understood this concept of doing things, I realised the power of Gatsby.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#closing-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Closing thoughts...
&lt;/h1&gt;

&lt;p&gt;Overall I really enjoyed using Gatsby to build my portfolio site. I will definitely be upgrading and getting more involved with it overtime as it is a fun and powerful tool to use. I didn't experience anything that put me off of using it. So for me it's full steam ahead!&lt;/p&gt;

&lt;p&gt;Have you used Gatsby before? If so how did you find using it?&lt;/p&gt;

&lt;p&gt;Let me know in the comments below! üëá&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Generate Accessible Button Colors With ButtonBuddy</title>
      <author>Stephanie Eckles</author>
      <pubDate>Fri, 01 Jan 2021 15:42:44 +0000</pubDate>
      <link>https://dev.to/5t3ph/generate-accessible-button-colors-with-buttonbuddy-41mg</link>
      <guid>https://dev.to/5t3ph/generate-accessible-button-colors-with-buttonbuddy-41mg</guid>
      <description>&lt;p&gt;Introducing &lt;a href="https://buttonbuddy.dev"&gt;ButtonBuddy.dev&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn what it takes to ensure your buttons or button-styled links have accessible contrast across all states and surfaces, then use the generator to check and adjust your button palette.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cjIrW061--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8itfu2xjkvown3tyeyhf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cjIrW061--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8itfu2xjkvown3tyeyhf.gif" alt="Preview of Buddy the Button which is a blue button with a cartoon face. A speech bubble animates upwards then displays &amp;quot;Hello, I'm ButtonBuddy!&amp;quot; after which the cartoon face's left eye winks twice."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, Buddy will help you learn about what it takes to create accessible button color palettes.&lt;/p&gt;

&lt;p&gt;Then, you can use the interactive generator to create or check your own button color palette to ensure accessible contrast.&lt;/p&gt;

&lt;p&gt;The more successful contrast ratios you have, the happier Buddy will be!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6ypPq9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rtnlm0ydvgzftswo6q9i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6ypPq9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rtnlm0ydvgzftswo6q9i.gif" alt="Buddy's face first has a frown, then a partial closed mouth smile as the contrast improves, then finally a full open mouth smile plus a wink when the contrast is fully passing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using the generator you have the option of either using the browser's native color pickers (the default) or switching to text input. Text inputs allow you to more easily enter your existing palette and will accept any valid CSS color value, including ones with an alpha channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EqtLmpQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xxep0hdji03ofr1joa6c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EqtLmpQ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xxep0hdji03ofr1joa6c.gif" alt='Interacting first with the native color picker to select a purple, then toggling on the text inputs and changing the purple hex code to the CSS color value of "rebeccapurple"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With every color change, by color picker or text input, the associated color contrast ratios will update. Emojis indicate "passing" or "invalid". The default text contrast is for normal text size which is 4.5:1, but if your button will use large text (18.66px and bold &lt;em&gt;or&lt;/em&gt; larger than 24px) you can use the "Large text ratio" switch to update text ratios to the reduced ratio of 3:1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DeM1EeUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/diw95l58ciq9ywpn6ied.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DeM1EeUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/diw95l58ciq9ywpn6ied.gif" alt='Shows the contrast ratios dynamically updating and the emoji indicator changing when the ratio passes, followed by updating the text ratio to 3.0 by using the "Large text ratio" switch.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Visit &lt;a href="https://buttonbuddy.dev"&gt;ButtonBuddy.dev&lt;/a&gt;&lt;/strong&gt; to learn more about accessible button contrast and create your own accessible palettes!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creators-notes" class="anchor"&gt;
  &lt;/a&gt;
  Creator's Notes
&lt;/h2&gt;

&lt;p&gt;ButtonBuddy was created by myself, &lt;a href="https://twitter.com/5t3ph"&gt;Stephanie Eckles&lt;/a&gt;, to help folx solve a common issue I see as both a code reviewer and a web user. ButtonBuddy is also a utility I myself have wanted to see exist, and know I will use! &lt;/p&gt;

&lt;p&gt;If you encounter any issues or have a feature request, &lt;a href="https://github.com/5t3ph/buttonbuddy/issues"&gt;file an issue on GitHub&lt;/a&gt;. Please be sure to read the intro learning content which describes the specific scenario ButtonBuddy was created for before suggesting a feature.&lt;/p&gt;

</description>
      <category>news</category>
      <category>css</category>
      <category>webdev</category>
      <category>a11y</category>
    </item>
    <item>
      <title>From politics to programming: how I changed careers during a pandemic</title>
      <author>Jing-Jing Hu</author>
      <pubDate>Fri, 01 Jan 2021 15:35:44 +0000</pubDate>
      <link>https://dev.to/jingjing142/from-politics-to-programming-how-i-changed-careers-during-a-pandemic-bap</link>
      <guid>https://dev.to/jingjing142/from-politics-to-programming-how-i-changed-careers-during-a-pandemic-bap</guid>
      <description>&lt;p&gt;I knew 2020 would be different. Because unlike other years, this one started with a resignation. After almost three years working in politics and policy in London and Beijing, I decided to call it quits; say goodbye to a career I had been working towards for years. It wasn't an easy decision to make, to leave a job without another one lined up, or even a proper plan. But I felt relieved when I finally handed in that resignation. My goal? To transition to a career in tech.&lt;/p&gt;

&lt;p&gt;Moving into tech had been in the back of my mind since living in Beijing three years ago and being surrounded by a vibrant tech community. There is just so much you can do, even without any coding skills. But back then, everything was still new and it felt too early to make a decision. Now that I had already worked at different organisations in politics before, in the public, private and non-profit sector, it was time to try something new.&lt;/p&gt;

&lt;p&gt;So there I was a few weeks later: bags packed, unemployed and full of hope. I moved from London back home, to a small town in southern Germany. I wanted to take a break before embarking on my career changing venture. But what came next probably sounds all too familiar: more and more countries in Europe started closing their borders. People were urged to stay at home. Hospitals were overwhelmed. A pandemic was raging and taking lives around the world. &lt;/p&gt;

&lt;p&gt;How I felt? Probably like much of the rest of the world: anxious, worried, and stuck. I mean, what do you do when you just quit your job and are confronted with news of a pandemic, a declining economy and mass unemployment? Well... first, you take a moment to acknowledge that you probably didn't choose the best time to make a 180 degree switch in your career. Second, you realise that timing is not a decisive factor. Third, you pull yourself together. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-theres-a-will-theres-a-way" class="anchor"&gt;
  &lt;/a&gt;
  Where there's a will, there's a way
&lt;/h2&gt;

&lt;p&gt;So here is what I did. The very first step I took was simply to get my day-night-rhythm back in order. Wake up at a reasonable hour, and go to bed around midnight. It sounds odd to even mention it, but I think a lot of people underestimate the importance of essentials like sleep and food. I also dressed properly, took regular walks and stopped watching the news. Because by then, corona was pretty much all you would hear. And you didn't need to be a fortune teller to know that things weren't going to change anytime soon.&lt;/p&gt;

&lt;p&gt;Before quitting my job, I had done my fair share of research. I looked at possible roles, career paths, schooling options, and attended tech and startup-focused events. I did so to get a sense of the industry and the way it was heading. After researching the field and assessing my skills and interests, I narrowed it down to UX/UI design and software development. I wanted to work in teams to solve human-centred problems, acquire skills applicable to different domains, and write at least some code.  &lt;/p&gt;

&lt;p&gt;But I didn't know which one it was going to be. At the time, I had only touched HTML and CSS and just started to learn JavaScript. Throughout this period, I also read other people's career changing stories, which helped me to stay motivated. While reading those stories, I realised that there was also a lot of switching between roles in tech. And some unicorns did both code and design. So I decided to try both. After all, you won't know until you try. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-art-of-doityourself" class="anchor"&gt;
  &lt;/a&gt;
  The Art of Do-It-Yourself
&lt;/h3&gt;

&lt;p&gt;What I did next is what lots of people do when they don't really know what to do: google my way through the internet. And googling I did. I started with freeCodeCamp and The Odin Project, but kept switching forth and back between different sources. From Codeacademy to Codewars to SoloLearn, Skillshare, Treehouse, the Interaction Design Foundation, Youtube and whatever other resource I could find. It's insane how much information is out there. But it can also be quite overwhelming.&lt;/p&gt;

&lt;p&gt;After some time, I had read and seen so much that I thought I kinda knew what I was doing. I had experimented with Figma, Photoshop, Illustrator, learned about Git and Github, set up a development environment, solved some JavaScript problems. I was kinda heading in the right direction. Except that I felt stuck at the basics. I tried to create a curriculum for myself, but couldn't quite stick to it. So in the end, I narrowed down my main focus to three resources: The Odin Project, the Interaction Design Foundation and Skillshare. &lt;/p&gt;

&lt;p&gt;While going through these resources, I somehow got hooked. I was building projects as part of The Odin Project when I found myself thinking more about coding problems than design questions. By then, I was no longer following a set schedule ‚Äì I coded when I felt like it and took a break when I felt like I needed it. I also tried creative classes beyond product design. But I still finished one coding project after another until I had a handful to show on Github. They were simple, but presentable. And a way for me to measure my progress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-a-people-world" class="anchor"&gt;
  &lt;/a&gt;
  It's a People World
&lt;/h3&gt;

&lt;p&gt;At the same time, I started talking to more and more people in tech. Since I didn't really know anyone in software development or UX/UI design before my career change, I started looking for online communities to join early on. I became part of whatever tech-related group I could find on Slack and Discord, reached out to people, and attended online events. I also found myself a pair programming buddy through the Odin community and joined a study group through a supportive and helpful fellow learner (thanks Ciaran!).&lt;/p&gt;

&lt;p&gt;Those communities are also how I found out about my current job and other opportunities. A recruiter posted the ad in a Slack channel I was part of and I reached out to see if they would also consider self-taught people. There was an initial chat with this recruiter and other people and before I knew it, I was in the midst of several application processes. During this time I also received a scholarship for a new online coding bootcamp, the Coyotiv School of Engineering. Even though I managed to secure job offers before class started, I loved being part of this community and am still grateful to the instructors and my fellow students for making the learning process so much fun.&lt;/p&gt;

&lt;p&gt;Since joining Klarna as a software engineer, some people have reached out to me to ask about my career change. And a common question that I get is "how did you know you were ready to apply?". But truth is, I never really felt ready, and I still don't. If I had waited until I felt ready, I might never have applied. I just kept going until I felt like I had enough evidence to prove that I am serious about this career switch, and then I just talked to people. Because after all, we live in a people's world, and your attitude and willingness to learn matters. It's not all about your technical skills, but also about you as a potential colleague.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-new-beginning" class="anchor"&gt;
  &lt;/a&gt;
  A New Beginning
&lt;/h2&gt;

&lt;p&gt;And that's my story: how I went from political and security analyst to software engineer in 2020. &lt;/p&gt;

&lt;p&gt;Now I can officially call myself a software engineer. But that's just the beginning. I still have a lot to learn and am grateful to Klarna for giving me the opportunity to grow as part of an amazing team. I hope that this story helps at least some people the way all those career changing stories out there helped me. Thanks for stopping by and happy new year! ‚ú®&lt;/p&gt;

</description>
      <category>career</category>
      <category>womenintech</category>
    </item>
    <item>
      <title>How do you know when you‚Äôre ready to apply for front-end developer positions?</title>
      <author>James Robinson</author>
      <pubDate>Fri, 01 Jan 2021 15:05:28 +0000</pubDate>
      <link>https://dev.to/jrobind/how-do-you-know-when-you-re-ready-to-apply-for-front-end-developer-positions-319a</link>
      <guid>https://dev.to/jrobind/how-do-you-know-when-you-re-ready-to-apply-for-front-end-developer-positions-319a</guid>
      <description>&lt;p&gt;When I was learning front-end development I would Google this question often. When you‚Äôre teaching yourself it‚Äôs a lot more difficult to measure your own ‚Äòreadiness‚Äô. When you take a course or attend a bootcamp it‚Äôs easier to define this because there is a set start and finish. Those that are self-teaching will have to define this for themselves.&lt;/p&gt;

&lt;p&gt;Many factors play into this state of ‚Äòreadiness‚Äô. The main factor is people's own expectations, one developer's definition of ready may be the complete polar opposite to another‚Äôs. What really matters to us is &lt;strong&gt;what employers think&lt;/strong&gt;. In this article, we will attempt to produce a definition to put your mind at ease.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-own-experience" class="anchor"&gt;
  &lt;/a&gt;
  My own experience
&lt;/h2&gt;

&lt;p&gt;I am completely self-taught with no previous relatable experience in tech. I did build my own computer many moons ago but that had little bearing on my ability to code, I‚Äôd just about heard of HTML! &lt;br&gt;
It took me around 11 months to land my first position and on reflection, I felt I could have started applying for roles a little sooner than I did. I was all too focused on trying to perfect my knowledge and get to a place where I considered myself to be ‚Äòready‚Äô.&lt;/p&gt;

&lt;p&gt;The truth is, you‚Äôll probably never reach a place where you are entirely happy with your readiness. If I had waited until I felt ready, my hair would be white and I‚Äôd be collecting my pension and &lt;strong&gt;I‚Äôd still be asking the same question&lt;/strong&gt;. Thankfully my hair is still (mostly) brown and I have a few more years before I can start collecting my pension. Ultimately, it's about learning just enough to land yourself a job - you'll learn so much faster once you have one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-ready" class="anchor"&gt;
  &lt;/a&gt;
  Defining ‚Äòready‚Äô
&lt;/h2&gt;

&lt;p&gt;If you are seriously willing to put in the time to learn, you‚Äôll inevitably give yourself the best chances of landing a junior developer position. My definition of job-ready would look something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thorough knowledge of HTML, CSS, and JavaScript (especially JavaScript)&lt;/li&gt;
&lt;li&gt;An understanding of web accessibility&lt;/li&gt;
&lt;li&gt;Some experience with a JavaScript framework/library&lt;/li&gt;
&lt;li&gt;Some understanding and experience with build tools, task runners &amp;amp; preprocessors&lt;/li&gt;
&lt;li&gt;Willingness and aptitude to learn&lt;/li&gt;
&lt;li&gt;Passion and enthusiasm for development&lt;/li&gt;
&lt;li&gt;A portfolio of projects to showcase coding ability&lt;/li&gt;
&lt;li&gt;Some open-source contributions (probably a nice-to-have)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs have a look at each of these criteria in more detail:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thorough-knowledge-of-html-css-and-javascript-especially-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Thorough knowledge of HTML, CSS, and JavaScript - especially JavaScript
&lt;/h3&gt;

&lt;p&gt;You can‚Äôt cut too many corners here - this is your bread and butter. These are the core browser technologies, and this is where you will be spending your time as a front-end developer. Whatever job you take, whatever framework, templating system, or library you work with, you &lt;strong&gt;will be utilising these technologies&lt;/strong&gt; - even if there is a fairly thick layer of abstraction over them.&lt;/p&gt;

&lt;p&gt;For those that are looking to become UX-focused front-end developers you‚Äôll probably want to centre more of your time toward the HTML, CSS side of things. For those wanting to become JavaScript focused front-end developers (now commonly termed ‚Äòfront-end engineers‚Äô), you‚Äôll want to point your focus toward JavaScript ‚Äì make sure you learn the fundamentals, as well as more advanced concepts such as closures, prototypes and inheritance, promises, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-experience-with-a-javascript-framework-andor-library" class="anchor"&gt;
  &lt;/a&gt;
  Some experience with a JavaScript framework and/or library
&lt;/h3&gt;

&lt;p&gt;This is probably the most contentious of all of the items on this list. It‚Äôs become very common for job descriptions to ask for proficiency or some experience with a front-end framework or library (usually, Angular, Vue, or React. Sometimes jQuery is thrown into the mix even though it‚Äôs a less opinionated utility library).  &lt;/p&gt;

&lt;p&gt;I‚Äôve compiled some results on a random selection of 20 job adverts (for junior front-end developer positions advertised in the UK), to see what proportion place an emphasis on JavaScript frameworks as an essential prerequisite for the job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esAE30BE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/25qp81ayutr5ph5l1e1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esAE30BE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/25qp81ayutr5ph5l1e1i.png" alt="A pie chart representing the proportion of JavaScript frameworks mentioned in a random selection of job adverts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Personally, I wouldn‚Äôt lose too much sleep over this one.  As you can see there are plenty of jobs that look for JavaScript proficiency in general, rather than tied to a specific framework.&lt;/p&gt;

&lt;p&gt;If you‚Äôve got the basics nailed down, then by all means have a play with a framework that takes your fancy. Build a small project to show you can pick up some new tech and make something productive. Ultimately, you‚Äôre applying for junior developer positions so there &lt;strong&gt;shouldn‚Äôt be too much expectation on you to know a wide range of frameworks&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-understanding-of-web-accessibility" class="anchor"&gt;
  &lt;/a&gt;
  An understanding of web accessibility
&lt;/h3&gt;

&lt;p&gt;Thankfully, more companies are now taking the accessibility of their websites more seriously. Inaccessible websites shouldn't just be the responsibility of designers. As front-end developers, it is important that we take web accessibility seriously and with the growing complexity of the front-end landscape sometimes accessibility get's left behind.&lt;/p&gt;

&lt;p&gt;You don't need to be an expert, but showing an &lt;strong&gt;understanding and appreciation&lt;/strong&gt; for web accessibility will certainly help once you start applying for positions. The chances are high that you'll be asked a question on this in an interview too. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-experience-with-build-tools-task-runners-and-preprocessors" class="anchor"&gt;
  &lt;/a&gt;
  Some experience with build tools, task runners, and preprocessors
&lt;/h3&gt;

&lt;p&gt;Junior front-end developer job descriptions tend to have this listed as a nice-to-have skill. If you have a general understanding of their purpose, when you‚Äôd probably reach for one and how they generally fit into the front-end tooling landscape then this is probably enough to satisfy most employers. If you‚Äôve already picked up a front-end framework, then you almost certainly will have used some form of build tool/bundler such as Webpack anyway. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#willingness-and-aptitude-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  Willingness and aptitude to learn
&lt;/h3&gt;

&lt;p&gt;If you‚Äôre not willing or capable to learn new things, then you‚Äôve definitely picked the wrong industry! Don‚Äôt panic if you think you‚Äôre a slow or ineffective learner ‚Äì &lt;a href="https://www.thefrontendcoach.com/blog/improve-your-learning-ability"&gt;you can get better at this&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Remember, skills and technologies will come and go, but if you are able to learn and adapt then you‚Äôll be extremely sought-after and your career will be more &lt;strong&gt;on your terms&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passion-and-enthusiasm-for-development" class="anchor"&gt;
  &lt;/a&gt;
  Passion and enthusiasm for development
&lt;/h3&gt;

&lt;p&gt;You‚Äôd be surprised how many people there are working in the industry who aren't passionate or enthusiastic about what they do. If you‚Äôre in this for the money and the job opportunities alone, then it‚Äôs going to be a bumpy ride. &lt;/p&gt;

&lt;p&gt;When the poop hits the fan and you have a deadline looming and you can‚Äôt get your code to compile or you can‚Äôt fix a release-blocking bug then you‚Äôll hate every minute and wonder why you even got into this industry. Development is tough and it will be a lot tougher if you have no passion or enthusiasm for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-portfolio-of-projects-to-showcase-coding-ability" class="anchor"&gt;
  &lt;/a&gt;
  A portfolio of projects to showcase coding ability
&lt;/h3&gt;

&lt;p&gt;This is your time to impress prospective employers and &lt;strong&gt;let your code do the talking&lt;/strong&gt;. You don‚Äôt necessarily need to have a dedicated portfolio site, you could just pin some of your best repositories on your GitHub profile and share that with employers.&lt;/p&gt;

&lt;p&gt;Don‚Äôt sweat too much about code perfection, but do make sure the code you write is &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;. It should be maintainable and clean (if you can write some tests too then extra points for you!). Ultimately the proof is in the pudding, if an employer can actually see you know how to code and you can do so without potentially causing an immediate firestorm then they are more likely to give you a shot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-opensource-contributions-probably-a-nicetohave" class="anchor"&gt;
  &lt;/a&gt;
  Some open-source contributions (probably a nice-to-have)
&lt;/h3&gt;

&lt;p&gt;Although I‚Äôve listed this as a nice-to-have, I would strongly encourage you to get involved with open source projects. Your contributions don‚Äôt have to be substantial. Even contributing documentation is a hugely worthwhile endeavor that many library authors will be grateful for.&lt;/p&gt;

&lt;p&gt;Contributing to open source can be a scary prospect for beginner developers. Too many beginners find themselves trapped in tutorial land, spending too long passively churning out todo apps - this can be a hard trap to escape from. I‚Äôm not saying tutorials aren‚Äôt useful, it‚Äôs just that &lt;strong&gt;contributing to open source is pretty much as close as you‚Äôll get to being a professional developer&lt;/strong&gt;. Depending on what libraries/frameworks you end up contributing to, your contributions could be considered genuine work experience.&lt;/p&gt;

&lt;p&gt;Making open source contributions will require you to have been exposed to a few important conecepts, practices, and transferable skills:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Version control&lt;/li&gt;
&lt;li&gt;Working with tickets &amp;amp; issues&lt;/li&gt;
&lt;li&gt;Working with professional developers&lt;/li&gt;
&lt;li&gt;Creating pull requests&lt;/li&gt;
&lt;li&gt;Experiencing a code review process&lt;/li&gt;
&lt;li&gt;Setting up a local development environment &lt;/li&gt;
&lt;li&gt;Contributing code to a pre-existing codebase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is essentially what you‚Äôll be doing in a real job, so having these experiences will stand you in good stead once you begin applying for roles. It already proves that you have what it takes to write code at a useful standard.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;If you can tick off most of the criteria in my ‚Äòready‚Äô list, then you‚Äôll probably be set to start applying for positions. The length of time it takes to get here will be highly individualized and will depend on whether you can commit to learning full-time or part-time, so your mileage will vary. Don‚Äôt become too fixated on time and hours invested. Although there will be a correlation between time invested and progress, time spent is &lt;strong&gt;not always the best measure of progress&lt;/strong&gt;. Likewise, don't fuss over every item in the list, if your learning processes are polished and you think you‚Äôre ready to start applying a little sooner than you originally envisioned then I would encourage you to go for it.&lt;/p&gt;

&lt;p&gt;The job searching process probably warrants an article of its own but for now, just bear in mind that to many companies, entry-level really means 'senior-level experience at an entry-level salary', so don‚Äôt become too disheartened when you get rejected for positions. Persist, keep learning and you‚Äôll eventually land a job.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>How to monitor CPU utilization in Linux</title>
      <author>Javed Shaikh</author>
      <pubDate>Fri, 01 Jan 2021 14:14:09 +0000</pubDate>
      <link>https://dev.to/shaikh/how-to-monitor-cpu-utilization-in-linux-5aeb</link>
      <guid>https://dev.to/shaikh/how-to-monitor-cpu-utilization-in-linux-5aeb</guid>
      <description>&lt;p&gt;Monitoring CPU utilization is one of the very important tasks of a back-end system engineer. CPU utilization is nothing but the total works or tasks being processed by your central processing unit or CPU. Its always a good practice for every developer to know the common utilities to monitor cpu utilization of the system they are working.&lt;/p&gt;

&lt;p&gt;In windows we use Task manager to check the statistical performance of CPU, memory ,disk network.. But what about Linux operating system. Lets check it out.&lt;/p&gt;

&lt;p&gt;We will go through these utilities one by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;top&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;htop&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nmon&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vmstat&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#top" class="anchor"&gt;
  &lt;/a&gt;
  top
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;top&lt;/strong&gt; is one of the oldest command or utility to monitor system performance. It is a built in utility for any Linux operating system. It will display information like no of tasks, no of users, cpu utilization, statistical data about memory usage and list of active processes.&lt;/p&gt;

&lt;p&gt;Just input top and enter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;top
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;here is the output of the &lt;strong&gt;top&lt;/strong&gt; command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;top - 11:23:33 up  3:11,  2 &lt;span class="nb"&gt;users&lt;/span&gt;,  load average: 0.86, 0.69, 1.01
Tasks: 317 total,   2 running, 315 sleeping,   0 stopped,   0 zombie
%Cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;: 34.6 us,  9.5 sy,  0.0 ni, 55.0 &lt;span class="nb"&gt;id&lt;/span&gt;,  0.0 wa,  0.0 hi,  0.8 si,  0.0 st
MiB Mem :   7814.9 total,    938.9 free,   2650.3 used,   4225.7 buff/cache
MiB Swap:   3906.0 total,   3906.0 free,      0.0 used.   3753.6 avail Mem 
    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
  7427 shaikh    20   0 9309320 483092 306628 S  65.7   6.0  24:12.65 chrome    
   1935 shaikh    20   0 4556040 288016 108556 S  17.6   3.6  10:12.54 gnome-shell  
   1655 shaikh    20   0  843820  76204  41576 S  10.8   1.0   5:44.07 Xorg 
   2831 shaikh    20   0 1574816 502964 363492 S   8.2   6.3   9:03.78 chrome  
   1572 shaikh     9 &lt;span class="nt"&gt;-11&lt;/span&gt; 2539652  19556  15264 S   7.2   0.2   2:08.94 pulseaudio
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now there are few quick commands available for top utility like press below keys for respective output on top command screen&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;k&lt;/strong&gt;  to kill a process. It will ask for process id or pid to kill&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;p&lt;/strong&gt;  to display processes based on cpu usage&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;m&lt;/strong&gt; to display list of processes based on memory usage&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;q&lt;/strong&gt; to quit&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#htop" class="anchor"&gt;
  &lt;/a&gt;
  htop
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;htop&lt;/strong&gt; is another realtime cpu performance monitoring tool and is almost similar to &lt;strong&gt;top&lt;/strong&gt; command but with expanded screen. It is more user friendly and will give better viewing experience than top. You may need to install this utility using below command for ubuntu os&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;htop
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets take a look&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;htop
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is the output of &lt;strong&gt;htop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yTuDs43D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602874819950/DHBDHt0J_.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yTuDs43D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602874819950/DHBDHt0J_.jpeg" alt="rsz_1rsz_screenshot_from_2020-10-16_11-53-00.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nmon" class="anchor"&gt;
  &lt;/a&gt;
  nmon
&lt;/h3&gt;

&lt;p&gt;nmon is system admin tool to monitor performance of a Linux operating system. This is developed by IBM's Nigel Griffiths and the name nmon is a short hand for &lt;strong&gt;N&lt;/strong&gt;igel's &lt;strong&gt;Mon&lt;/strong&gt;itor. It has nice colorful screen with many different statistical views.&lt;/p&gt;

&lt;p&gt;First lets install this utility using below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;nmon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;lets start it, type nmon and enter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;nmon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You will see below menu screen for nmon &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kndNOPL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jsxi2dacbw6q8ocwx76h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kndNOPL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jsxi2dacbw6q8ocwx76h.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown above you have to select which realtime statistical data you want to see and use the keys accordingly&lt;br&gt;
Lets  type &lt;strong&gt;m&lt;/strong&gt; and &lt;strong&gt;c&lt;/strong&gt; to check realtime cpu and memory usage&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xpbb1oD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602876427577/fg8IfdRkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xpbb1oD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1602876427577/fg8IfdRkj.png" alt="Screenshot from 2020-10-16 12-26-22.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vmstat" class="anchor"&gt;
  &lt;/a&gt;
  vmstat
&lt;/h3&gt;

&lt;p&gt;This command can be used to display information about system processes, memory, swap, disk and cpu usage&lt;/p&gt;

&lt;p&gt;Lets type vmstat and enter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat
procs &lt;span class="nt"&gt;-----------memory----------&lt;/span&gt; &lt;span class="nt"&gt;---swap--&lt;/span&gt; &lt;span class="nt"&gt;-----io----&lt;/span&gt; &lt;span class="nt"&gt;-system--&lt;/span&gt; &lt;span class="nt"&gt;------cpu-----&lt;/span&gt;
 r  b   swpd   free   buff  cache   si   so    bi    bo   &lt;span class="k"&gt;in   &lt;/span&gt;cs us sy &lt;span class="nb"&gt;id &lt;/span&gt;wa st
 0  0  10240 645752 313692 3789356    0    0    55    66  493  109 18  5 76  0  0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you want to display vmstat for every 2 seconds, use below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above command will display system status every 2 seconds unless you interrupt it.&lt;br&gt;
Lets take another example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;shaikh@shaikhu-com:~&lt;span class="nv"&gt;$ &lt;/span&gt;vmstat 5 10
procs &lt;span class="nt"&gt;-----------memory----------&lt;/span&gt; &lt;span class="nt"&gt;---swap--&lt;/span&gt; &lt;span class="nt"&gt;-----io----&lt;/span&gt; &lt;span class="nt"&gt;-system--&lt;/span&gt; &lt;span class="nt"&gt;------cpu-----&lt;/span&gt;
 r  b   swpd   free   buff  cache   si   so    bi    bo   &lt;span class="k"&gt;in   &lt;/span&gt;cs us sy &lt;span class="nb"&gt;id &lt;/span&gt;wa st
 0  0  10240 512428 315012 3869748    0    0    52    65  487  154 18  5 77  0  0
 0  0  10240 512428 315020 3869588    0    0     0    45  396  738  2  1 98  0  0
 0  0  10240 481684 315028 3900856    0    0     0     7  726 1153  3  1 96  0  0
 0  0  10240 467320 315036 3914636    0    0     0    37  743 1730  6  2 92  0  0
 1  0  10240 486756 315052 3894072    0    0     0    90  694 1586  5  2 93  0  0
 0  0  10240 494316 315064 3887496    0    0     0    12  592 1264  3  1 95  0  0
 0  0  10240 500900 315072 3879552    0    0     0     9  623 1461  5  1 94  0  0
 0  0  10240 505200 315072 3874556    0    0     0    30  893 2205  8  2 90  0  0
 0  0  10240 474204 315080 3906004    0    0     0   156  971 2396  8  3 89  0  0
 0  0  10240 469416 315088 3910568    0    0     0    14  920 2261  8  2 89  0  0

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above command will display system status every 5 seconds for 10 times &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Knowing and practicing above commands can help troubleshoot any process and performance related issue.&lt;br&gt;&lt;br&gt;
I know there are many more utilities out there  including iostat,sar,mpstat.. and what not üòä but I have been using these four for most of the times to keep an eye on the system. Out of these, nmon and top are my favorite utility to check the system usage data and manage the processes accordingly. Let me know which utility you have been using to monitor system health.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Farrow: A new web framework in the new year</title>
      <author>Jade Gu</author>
      <pubDate>Fri, 01 Jan 2021 13:28:59 +0000</pubDate>
      <link>https://dev.to/lucifier129/farrow-a-new-web-framework-in-the-new-year-1l47</link>
      <guid>https://dev.to/lucifier129/farrow-a-new-web-framework-in-the-new-year-1l47</guid>
      <description>&lt;p&gt;Today I'd like to introduce you to a new project I've recently developed - &lt;a href="https://github.com/Lucifier129/farrow"&gt;Farrow&lt;/a&gt;. a type-friendly functional style Node.js web framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation" class="anchor"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;In the current Node.js open source ecosystem, there are already expressjs, koajs, hapi, restify, fastify, nestjs, and perhaps countless other web services frameworks, so do we need another one?&lt;/p&gt;

&lt;p&gt;The answer may vary from person to person, so I'd like to share my personal opinion here.&lt;/p&gt;

&lt;p&gt;Most of the popular web service frameworks in Node.js were developed with a JavaScript perspective before TypeScript became really popular.&lt;/p&gt;

&lt;p&gt;They take full advantage of the expressive power of JavaScript's dynamic typing, no doubt about it.&lt;/p&gt;

&lt;p&gt;If we take into account the ability of the Static Type-System to capture as many potential problems as possible in Compile-Time, then redeveloping a Web services framework in TypeScript might be a worthwhile endeavor.&lt;/p&gt;

&lt;p&gt;Farrow is one of my outputs in this direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#middleware-design-from-a-typescript-perspective" class="anchor"&gt;
  &lt;/a&gt;
  Middleware design from a TypeScript perspective
&lt;/h2&gt;

&lt;p&gt;Rich Harris, the author of Rollup and Svelte, recently shared his thoughts on &lt;a href="https://twitter.com/Rich_Harris/status/1304082928490733573"&gt;Next-gen Node HTTP APIs&lt;/a&gt;, and I was inspired.&lt;/p&gt;

&lt;p&gt;It started with a poll tweeted by Wes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0i_UiZxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/592g6n0qcnilhfdpvxq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0i_UiZxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/592g6n0qcnilhfdpvxq8.png" alt="a poll tweeted by Wes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Close to 70% of developers, opted for expressjs style middleware function design. An overwhelming choice.&lt;/p&gt;

&lt;p&gt;Rich Harris' choice, with only 14.5% support.&lt;/p&gt;

&lt;p&gt;In that Gist, Rich Harris explains why he doesn't like the first option. Roughly, it goes as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always need to ugly pass &lt;code&gt;res&lt;/code&gt; parameters&lt;/li&gt;
&lt;li&gt;When combining middleware, you often have to do monkey-patching on &lt;code&gt;res&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He gave what he felt was a better alternative design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i1s-yV6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cj4y2y9ixp5y4dgkx3wh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i1s-yV6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cj4y2y9ixp5y4dgkx3wh.png" alt="a better alternative design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simply put, the &lt;code&gt;res&lt;/code&gt; parameter is eliminated, only the &lt;code&gt;req&lt;/code&gt; parameter is retained, the response result is expressed by return response, and the next middleware &lt;code&gt;next()&lt;/code&gt; is called by return void/undefined.&lt;/p&gt;

&lt;p&gt;Another developer, Oliver Ash, tweeted about one of the shortcomings of expressjs' middleware design - it does not take full advantage of Compile-Time's troubleshooting capabilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlNLdnoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tm3lytpc372m23x2theh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlNLdnoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tm3lytpc372m23x2theh.png" alt="a tweet of Oliver Ash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In brief, when the response is the return value of middleware, TypeScript can type-check that each request must have a return value without fear of omission.&lt;/p&gt;

&lt;p&gt;Giulio Canti, the author of fp-ts, also has his own attempt - &lt;a href="https://github.com/gcanti/hyper-ts"&gt;hyper-ts&lt;/a&gt;. inspired by purescript's hyper project, hyper-ts uses TypeScript's Type- System to circumvent some common errors, such as: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PqvA0jhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhm2ez67q0i8aypfqyg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqvA0jhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhm2ez67q0i8aypfqyg3.png" alt="some common errors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These clues all point to the conclusion that it may be possible to design the HTTP middleware API in a functional style (immutable way).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#farrowpipeline-typefriendly-middleware-function-design" class="anchor"&gt;
  &lt;/a&gt;
  Farrow-Pipeline: Type-friendly middleware function design
&lt;/h2&gt;

&lt;p&gt;Farrow's middleware functions are inspired by Koa middleware, but are different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN-N-5ej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z73ca7v3jlaos8ttvjad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN-N-5ej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z73ca7v3jlaos8ttvjad.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the above figure, we can learn the following information.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Response&lt;/code&gt; is not in the parameters of the middleware function, but from the plain function exported by farrow-http module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;response&lt;/code&gt; is the return value of the middleware function, which can be checked in Compile-Time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If there is no return value, it will look like the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SK9QvpUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xxf4nt1zzlidnl38zh34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SK9QvpUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xxf4nt1zzlidnl38zh34.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If an incorrect value is returned, it will look like the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGcTfw1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t0v42vy8nl32ukaryglq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGcTfw1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/t0v42vy8nl32ukaryglq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response to the client must be made by means of &lt;code&gt;Response.{method}()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdbpXLLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gni8qn1xxxi2vqs6bxkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdbpXLLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gni8qn1xxxi2vqs6bxkg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Response's API is designed to support Method Chaining, which can be called as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---AG9kFYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nwyewwr9zjcy41elnf7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---AG9kFYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nwyewwr9zjcy41elnf7v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As above, setting response status, setting response headers, response cookies, and response content can all be written together elegantly.&lt;/p&gt;

&lt;p&gt;So, how does multiple middlewares collaborate with each other in Farrow?&lt;/p&gt;

&lt;p&gt;For example, in the upstream middleware, pass a new request to the downstream middleware, like the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wjx1h-Xk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3yhuyep14xjfblikh9g8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wjx1h-Xk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3yhuyep14xjfblikh9g8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second parameter of the Farrow middleware function is the &lt;code&gt;next&lt;/code&gt; function. Unlike expressjs/koajs middleware functions, the Farrow middleware function has both parameters and return values.&lt;/p&gt;

&lt;p&gt;Its parameter is the optional &lt;code&gt;request&lt;/code&gt; and its return value is &lt;code&gt;response&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;next()&lt;/code&gt; call is made without passing parameters, the downstream middleware gets the same &lt;code&gt;request&lt;/code&gt; as the upstream middleware.&lt;/p&gt;

&lt;p&gt;If a new &lt;code&gt;request&lt;/code&gt; is passed when &lt;code&gt;next&lt;/code&gt; is called, the downstream middleware will get the new &lt;code&gt;request&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;With this very natural parameter passing mechanism, we don't need to modify the current request. Even, Farrow sets the request type to read-only.&lt;/p&gt;

&lt;p&gt;Farrow encourages keeping the request/response immutable.&lt;/p&gt;

&lt;p&gt;Similarly, we can filter or manipulate the response returned by the downstream middleware in the upstream middleware, as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbKxSFPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eopw3ynymipui7pdmky0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbKxSFPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eopw3ynymipui7pdmky0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Response object provides a merge method to easily merge the status, headers, cookies, content, and other components of multiple responses.&lt;/p&gt;

&lt;p&gt;Farrow also provides a fractal-enabled Router design that helps us to fine-grained segment business logic into different modules and organically combines them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EUEjMzy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iuzees3xuf37qdxrq80w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EUEjMzy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iuzees3xuf37qdxrq80w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#farrowschema-typesafe-routing-design" class="anchor"&gt;
  &lt;/a&gt;
  Farrow-Schema: Type-Safe Routing Design
&lt;/h2&gt;

&lt;p&gt;Farrow implements a powerful and flexible Schema-Based Validation that can match specific request objects in a type-safe manner.&lt;/p&gt;

&lt;p&gt;The basic usage is shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G3G6QZvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7k3bvnfal8ey2klihuk8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G3G6QZvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7k3bvnfal8ey2klihuk8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;http.match&lt;/code&gt; method accepts parameters as &lt;code&gt;{ pathname, method, query, params, headers, cookies }&lt;/code&gt; objects to form a &lt;code&gt;Request Schema&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;schema.pathname&lt;/code&gt; adopts expressjs-like style via &lt;code&gt;path-to-regexp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Farrow will extract the exact type of the matching request object through type infer according to the Request Schema, and validate it in the runtime to ensure the type safety of the request object.&lt;/p&gt;

&lt;p&gt;In addition, Farrow also implements type-safe route matching based on the Template Literal Types feature of TypeScript V4.1.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YkiEtzfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e302q8yh3lk610vtfeju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YkiEtzfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e302q8yh3lk610vtfeju.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the  format in the path, we can combine { pathname, params, query }, write only one path, and extract the corresponding type from the path by type infer.&lt;/p&gt;

&lt;p&gt;A more complex case is shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RclhvNc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/icp0hadjywozhe9ztu0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RclhvNc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/icp0hadjywozhe9ztu0i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When &lt;code&gt;&amp;lt;key:type&amp;gt;&lt;/code&gt; appears before &lt;code&gt;?&lt;/code&gt; is treated as part of &lt;code&gt;params&lt;/code&gt;. The order is sensitive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;code&gt;&amp;lt;key:type&amp;gt;&lt;/code&gt; appears after &lt;code&gt;?&lt;/code&gt; appears after it, it is treated as part of the &lt;code&gt;query&lt;/code&gt;, where the order is not sensitive.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more about Farrow's Router-Url-Schema, you can check out its &lt;a href="https://github.com/Lucifier129/farrow/blob/master/docs/http.md#router-url-schema"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#farrowhooks-mechanism" class="anchor"&gt;
  &lt;/a&gt;
  Farrow-Hooks mechanism
&lt;/h2&gt;

&lt;p&gt;Another noteworthy feature in Farrow is that we take a cue from React-Hooks and provide a Farrow-Hooks mechanism to integrate with other parts of the server, such as logger, database-connection, etc.&lt;/p&gt;

&lt;p&gt;In contrast to koajs, which mounts extended methods with mutable &lt;code&gt;ctx&lt;/code&gt; arguments, in Farrow, the context is not an argument, but a Hooks.&lt;/p&gt;

&lt;p&gt;Like React-Hooks &lt;code&gt;useState&lt;/code&gt;, it can be seen as a fine-grained slicing of the &lt;code&gt;this.state&lt;/code&gt; shared in the class-component.&lt;/p&gt;

&lt;p&gt;Context.use in Farrow cuts the shared ctx in the same way. This is shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3u4mSn4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m8mjh950pmh73jizx52r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3u4mSn4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m8mjh950pmh73jizx52r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We define a User type, create a Farrow Context in a similar way to React.createContext, and provide the default value (in this case, null).&lt;/p&gt;

&lt;p&gt;UserContext.use() is a built-in hook that provides access to the corresponding user context, and all Contexts are new and independent during each request -&amp;gt; response.&lt;/p&gt;

&lt;p&gt;Instead of having one big ctx, we have multiple small Context units.&lt;/p&gt;

&lt;p&gt;We can wrap custom hooks based on &lt;code&gt;Context.use()&lt;/code&gt;, such as &lt;code&gt;useUser&lt;/code&gt; in the above image.&lt;/p&gt;

&lt;p&gt;To dynamically update the value of a Context, do something like the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CXT608kR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i1fe7rmcxyjuh3bo4w1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXT608kR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i1fe7rmcxyjuh3bo4w1k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Implement a Provider Middleware that dynamically and asynchronously updates the context value for consumption by the downstream middleware. The relationship is similar to that of Provider and Consumer in React Context. The upstream middleware is the Context Provider and the downstream middleware is the Context Consumer.&lt;/p&gt;

&lt;p&gt;With the Context Hooks mechanism, our middleware function type is always simple and stable, it only focuses on request -&amp;gt; response processing, other additional things can be provided through Hooks on demand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#farrowreact-a-builtin-componentbased-ssr" class="anchor"&gt;
  &lt;/a&gt;
  Farrow-React: A built-in component-based SSR
&lt;/h2&gt;

&lt;p&gt;Farrow provides an official SSR library, farrow-react, but you can also build your own SSR library based on methods like &lt;code&gt;Response.html&lt;/code&gt; or &lt;code&gt;Response.stream&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9j-__rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c86xtyhiq6msyq7w67b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9j-__rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c86xtyhiq6msyq7w67b2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see above, &lt;code&gt;farrow-react&lt;/code&gt; provides a Farrow-Hooks and through &lt;code&gt;useReactView&lt;/code&gt; we get a ReactView object that renders JSX into HTML and sends it to the browser through &lt;code&gt;farrow-http&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;farrow-react&lt;/code&gt; provides a &lt;code&gt;Link&lt;/code&gt; component to help us handle prefix-related auto-completion. To learn more, check out the official farrow &lt;a href="https://github.com/Lucifier129/farrow/blob/master/docs/react.md"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;At this point, we have broadly described a few of Farrow's core features.&lt;/p&gt;

&lt;p&gt;Farrow's goal doesn't stop there, we will build more farrow ecosystem in the future. For example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;farrow-restapi&lt;/code&gt; and &lt;code&gt;farrow-restapi-client&lt;/code&gt; support reusing the schema/type of the server project in the client project to achieve type-safe functionality on the server/client side of the data transfer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;farrow-graphql&lt;/code&gt; and &lt;code&gt;farrow-graphql-client&lt;/code&gt;, similar to &lt;code&gt;farrow-restapi&lt;/code&gt; but with support for implementation via graphql.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;farrow-server-component&lt;/code&gt;, supports React Server Component.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is still a lot of work to be done, so if you are also interested, feel free to contribute to the &lt;a href="https://github.com/Lucifier129/farrow"&gt;Farrow&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>react</category>
    </item>
    <item>
      <title>When to Switch your Current Job as a Software Engineer?</title>
      <author>Nikhil</author>
      <pubDate>Fri, 01 Jan 2021 13:09:47 +0000</pubDate>
      <link>https://dev.to/nikscode/when-to-switch-your-current-job-as-a-software-engineer-5alh</link>
      <guid>https://dev.to/nikscode/when-to-switch-your-current-job-as-a-software-engineer-5alh</guid>
      <description>&lt;p&gt;When to switch your current job as a Software Engineer? This question may or may not have bugged you but it's important to know when it's time to move on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwwKvLo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pn2nkursldukfsj90i2n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwwKvLo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pn2nkursldukfsj90i2n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey, I am perfectly happy with my current job. Why should I switch? Well, you may be satisfied today but it doesn't guarantee that it will remain like this forever.&lt;/p&gt;

&lt;p&gt;So, what should I consider before deciding to spend 5 or 10 or more years at a company?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How good is the Tech Stack that you are working on?&lt;/strong&gt; It's a very important aspect of your career that may change where you end up after 20 years in life. Try to talk to people in their late 30s or so, most of them will regret not learning or working on something that they should have. Software Industry is harsh, technologies changes fast. If you don't keep up with the change, you may become unhirable. And someday if your current company decides to let you go? Screwed. Don't spend years in a company that is very conservative to the new technologies or open-source frameworks &amp;amp; libraries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How good is the Pay?&lt;/strong&gt; Important. I want to be paid what I am worth. It's important to know your worth. How hardworking you are? How versatile you are? Can you adapt to new technologies fast? Are you really good at something that you are working on? Based on all of these, determine your worth. Companies love underpaid employees, as they are getting more value from you. Once you decide that you deserve more, only one thing happens going forward - You get more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Work-Life Balance?&lt;/strong&gt; It's a debatable point as some people don't care about it. Depending on the type of person you are, take your decision. But remember that for now, you may not be valuing personal time but in the future, it may change.  So, account for the health demands that may arise in the future, family &amp;amp; friends. For me, I prefer working out 5 days a week, prepare &amp;amp; eat clean meals, spend time with my girlfriend, hanging out with friends on weekends &amp;amp; travel every quarter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;People at work?&lt;/strong&gt; Your office is your second home. Will you live with a bunch of toxic people at your house? No. I prefer to work at a place where your colleagues can be your friend, your seniors respect you, and your opinion is valued. Think about it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are someone who is not satisfied with one or more of the above-discussed points, you should definitely switch. If you have an imposter syndrome and think you are not that good, trust me you are. It's a fairly common thing in Software Industry, don't think about it. Prepare well, interview, fail, note the questions, study, repeat. This has worked for me, will work for you as well.&lt;/p&gt;

&lt;p&gt;Drop your questions, if any. Check out my other blogs for &lt;a href="https://www.javascriptinterviewquestions.com/"&gt;Frontend Interview questions and experiences&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>java</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Calculating Run Time of a function using Python Decorators</title>
      <author>Shubham Saxena</author>
      <pubDate>Fri, 01 Jan 2021 11:32:49 +0000</pubDate>
      <link>https://dev.to/s9k96/calculating-run-time-of-a-function-using-python-decorators-148o</link>
      <guid>https://dev.to/s9k96/calculating-run-time-of-a-function-using-python-decorators-148o</guid>
      <description>&lt;p&gt;Many times we need to check the running time of a function, so that we can see which functions are taking a lot of time and improve them. &lt;br&gt;
In this post I'm writing about a simple but elegant way to do this using Python Decorators. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-what-is-a-decorator" class="anchor"&gt;
  &lt;/a&gt;
  But, What is a Decorator?
&lt;/h3&gt;

&lt;p&gt;Decorators are a design pattern in python that lets us modify the functionality of an object without changing its structure. Here I'll use this to modify a function to also print the time taken by it. &lt;/p&gt;

&lt;p&gt;Lets see how I'm using this to track function run time: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-target-function" class="anchor"&gt;
  &lt;/a&gt;
  1. Target Function:
&lt;/h3&gt;

&lt;p&gt;Suppose we have a basic function which reads a csv and returns the pd.DataFrame. Now depending on the size of the csv, it can take some time to run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIGYq3TE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/13352807/103288112-2b35b300-4a0a-11eb-89e1-7d13598487de.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIGYq3TE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/13352807/103288112-2b35b300-4a0a-11eb-89e1-7d13598487de.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-decorator-function" class="anchor"&gt;
  &lt;/a&gt;
  2. Decorator Function:
&lt;/h3&gt;

&lt;p&gt;Here we can define the function &lt;code&gt;calc_runtime&lt;/code&gt; which will act as a decorator for calculating runtime. This function will take a function &lt;code&gt;f&lt;/code&gt; as input and will return an updated version of the same function. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8LcXH9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/13352807/103288177-54eeda00-4a0a-11eb-859e-16c0ac4fe4d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LcXH9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/13352807/103288177-54eeda00-4a0a-11eb-859e-16c0ac4fe4d6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-using-the-decorator-over-target-function" class="anchor"&gt;
  &lt;/a&gt;
  3. Using the Decorator over target function:
&lt;/h3&gt;

&lt;p&gt;As the decorator is ready, we can simply call this over any function to print its runtime. Here we are calling over our target function like this :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e0AOeTZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/13352807/103288303-94b5c180-4a0a-11eb-9a07-acc3eeaad4f7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0AOeTZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/13352807/103288303-94b5c180-4a0a-11eb-9a07-acc3eeaad4f7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically the &lt;code&gt;load_csv&lt;/code&gt; gets passed on as an argument to the &lt;code&gt;calc_runtime&lt;/code&gt;, there we handle its arguments by using &lt;code&gt;args&lt;/code&gt;&lt;br&gt;
and &lt;code&gt;kwargs&lt;/code&gt; easily. Finally we return the value to the calling space. &lt;/p&gt;

&lt;p&gt;By using this kind of decorators, its straightforward to change the return value of a function, or print some additional layers over a function. &lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to sync your local git and remote git repository changes?</title>
      <author>stephin007</author>
      <pubDate>Fri, 01 Jan 2021 11:14:04 +0000</pubDate>
      <link>https://dev.to/forcommunity/how-to-sync-your-local-git-and-remote-git-repository-changes-4h37</link>
      <guid>https://dev.to/forcommunity/how-to-sync-your-local-git-and-remote-git-repository-changes-4h37</guid>
      <description>&lt;p&gt;Today we will focus on how we can synchronize our GitHub local repository master with an upstream repository branch of the GitHub project.&lt;br&gt;
Now, you might think what is an upstream branch,&lt;br&gt;
 &lt;strong&gt;Upstream branches&lt;/strong&gt; define the branch tracked on the remote repository by your local remote branch (also called the remote-tracking branch), the below figure will help ya'll understand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umqhpqcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609477544959/F3072bw2g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umqhpqcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609477544959/F3072bw2g.png" alt="upstream-1-768x527.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;** &lt;em&gt;NOTE&lt;/em&gt; : When we made any CLONE/PULL for the first time this is not required as we do fork the repository for the first time all the content in both will be the same.**&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-why-do-we-need-this-process-to-be-done" class="anchor"&gt;
  &lt;/a&gt;
  So, Why do we need this process to be done?
&lt;/h4&gt;




&lt;p&gt;This is very much necessary if you are working in a team and the teammates are working on different aspects of the project and you yourselves are working on something, &lt;br&gt;
Certain files will differ in both repositories as there are many other developers are merging the code upstream and your branch will not have that changes unless you sync the repository with the current upstream, so you might need to keep up with their code changes as well, this is called syncing your changes with your local and remote repo.&lt;/p&gt;

&lt;p&gt;Synching will override the local repository with a master remote repository. And if there are files in the local repository that do not exist in the remote repo, local files get removed&lt;/p&gt;

&lt;p&gt;If you don't, this will cause conflicts while you raise a PULL REQUEST.&lt;/p&gt;

&lt;p&gt;Now, let me walk you through how to sync your changes with other changes by other developers.&lt;br&gt;
Here I have the taken example of the &lt;strong&gt;Opencart&lt;/strong&gt; GitHub project. First, change your working directory to the file location where you want to clone the project with the command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cd your/local/storage/path&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-clone-your-project-with-the-command" class="anchor"&gt;
  &lt;/a&gt;
  STEP 1: Clone your project with the command.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7o_0SLpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609480354853/Md7b1oX8H.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7o_0SLpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609480354853/Md7b1oX8H.png" alt="clone.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the clone is completed then move to the Opencart folder&lt;br&gt;
This will move to the current working directory as &lt;code&gt;opencart&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-list-the-current-configured-remote-repository-for-your-fork" class="anchor"&gt;
  &lt;/a&gt;
  STEP 2: List the current configured remote repository for your fork.
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;$ git remote -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will list your forked repository response will be as below :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQ40t325--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609480596471/_nY9P5z5H.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQ40t325--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609480596471/_nY9P5z5H.png" alt="remote.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is our repository branch content now we have to get a project from the upstream repository&lt;br&gt;
Now Specify a new remote upstream repository that will be synced with the fork. In Opencart Project this &lt;em&gt;&lt;a href="https://github.com/opencart/opencart.git"&gt;https://github.com/opencart/opencart.git&lt;/a&gt;&lt;/em&gt; is my upstream repository. Run the following command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git remote add upstream https://github.com/opencart/opencart.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you cross-check that the new upstream repository created for your forked repo. To do this run the same command again as below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git remote -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now it will show the response as below and it will also include your upstream repository from your master project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVJ9-t9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609480801024/wv6NPQDPH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVJ9-t9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609480801024/wv6NPQDPH.png" alt="upstream.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-make-your-origin-repository-the-same-as-your-upstream-repository" class="anchor"&gt;
  &lt;/a&gt;
  STEP 3: Make your origin repository the same as your upstream repository.
&lt;/h2&gt;

&lt;p&gt;Now we have created upstream branches for our local repository. Now we will match the content from the upstream repository to the local repository.  In this, we will have all the code which is not in our local repository from the upstream repository&lt;/p&gt;

&lt;p&gt;Run the commands as mentioned below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git fetch upstream&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will respond by fetching the content from the upstream for your Master repo. All the new branches and files, contents will the fetched from the upstream repository. And the response for the command as below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iH_ANe5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609480983405/8YXnCNyhE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iH_ANe5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609480983405/8YXnCNyhE.png" alt="fetchupstream.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now checkout to your master branch with the command (if not on the master branch)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git checkout master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And run the command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ git merge upstream/master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anYDFboB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609484801379/TF1Yf_fj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anYDFboB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609484801379/TF1Yf_fj5.png" alt="mergemaster.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will sync all the changes to your local repository if any, Now your local repository is synced with the upstream repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And that's it, If you have any queries let me know in the comments and it would be great if you leave a reaction as well  and follow our community&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>upstream</category>
      <category>branching</category>
    </item>
    <item>
      <title>Finding a single item in an array  </title>
      <author>/[Abejide Femi Jr]\s/</author>
      <pubDate>Fri, 01 Jan 2021 11:13:11 +0000</pubDate>
      <link>https://dev.to/bjhaid_93/finding-a-single-item-in-an-array-2kol</link>
      <guid>https://dev.to/bjhaid_93/finding-a-single-item-in-an-array-2kol</guid>
      <description>&lt;p&gt;If we have an array, and we want to find the item(s) that appears once in the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The single item in the array above is 5, how can we solve this using JavaScript? We can use a hashmap aka &lt;a href="https://en.wikipedia.org/wiki/Hash_table"&gt;Hash table&lt;/a&gt;, we need to convert the array to an object with the item as the key and their number of occurrence as the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hashMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hashMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hashMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We declared an empty object, and loop through the array, our array item is passed in as the key, and we check to see if this item appears in the array more than once, if it does, we increment the value, if it appears once we set the value to 1.&lt;/p&gt;

&lt;p&gt;We get the result below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As we can see 5 is the only number that appears once in the array, with a value of 1.&lt;/p&gt;

&lt;p&gt;We need to loop through the object and get the keys with the value of 1, then push it into an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;single&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;hashMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The single item in the array is a string, it is converted to a number as we push it into the array.&lt;/p&gt;

&lt;p&gt;We get the value below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thank you for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
  </channel>
</rss>
