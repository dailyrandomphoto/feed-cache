<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>💯 Blur All Sensitive Data While Screen Sharing, Recording Video
</title>
      <author>BlurData</author>
      <pubDate>Wed, 25 Aug 2021 01:29:18 +0000</pubDate>
      <link>https://dev.to/blurdata/blur-all-sensitive-data-while-screen-sharing-recording-video-9pl</link>
      <guid>https://dev.to/blurdata/blur-all-sensitive-data-while-screen-sharing-recording-video-9pl</guid>
      <description>&lt;p&gt;We've all been in a situation where we sometimes want to hide sensitive information while screen sharing, recording video, or live.&lt;/p&gt;

&lt;p&gt;💯 Blur All Sensitive Data (text, image, input, or paragraphs) While Screen Sharing, Recording Video Or Live.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n1aJ1fkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx7sf5fbp8o7ijy7mabg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n1aJ1fkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx7sf5fbp8o7ijy7mabg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Powerful Features To Save Hours Of Post Video Editing Hassles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Free Lifetime Updates.&lt;/li&gt;
&lt;li&gt; Chrome Extension (Works on Opera too).&lt;/li&gt;
&lt;li&gt; Add Or Remove Blur With One Single Click.&lt;/li&gt;
&lt;li&gt; Blur Part/All Selected Text With One Single Click.&lt;/li&gt;
&lt;li&gt; Draw Blur Area Anywhere The Page.&lt;/li&gt;
&lt;li&gt; Save All Blur Areas Even After Reloading The Page.&lt;/li&gt;
&lt;li&gt; Control Blur Intensity, Hide Tab Title &amp;amp; Favicon, Clear All Blur.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Grab Blurry Today! 👉👉 &lt;a href="https://blurdata.net/"&gt;https://blurdata.net/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Sharpen your Ruby: Part 3</title>
      <author>Eric The Coder</author>
      <pubDate>Wed, 25 Aug 2021 00:52:33 +0000</pubDate>
      <link>https://dev.to/ericchapman/sharpen-your-ruby-part-3-5gcd</link>
      <guid>https://dev.to/ericchapman/sharpen-your-ruby-part-3-5gcd</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP, and Ruby. By far Ruby is my favorite programming language. &lt;/p&gt;

&lt;p&gt;Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you have any questions/comments or you are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Numbers Type in Ruby&lt;/h2&gt;

&lt;p&gt;In Ruby the two numbers primary types are Integer and Float.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Integer&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;

&lt;span class="c1"&gt;# Float&lt;/span&gt;
&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;79.99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Attention: In Ruby manipulating integers always end up with an integer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why does this division return 0? Because both numbers are integer and Ruby assumed that you would want a rounded value, so it rounded it to the nearest whole number, which is 0 in this case.&lt;/p&gt;

&lt;p&gt;Ok but what can I get the right value with a decimal? Yes just use a float in the equation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c1"&gt;# 0.01&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;String to number&lt;/h2&gt;

&lt;p&gt;Sometimes you will have a string that represents numbers and would like to perform a math operation on those.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;
&lt;span class="n"&gt;other_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'2'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other_number&lt;/span&gt; &lt;span class="c1"&gt;# 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This operation will return 12. String is not a number.&lt;/p&gt;

&lt;p&gt;To make it work we have to convert string to number using the to_i method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other_number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to_i convert string to an integer. You can also use to_f to convert your string to a float number.&lt;/p&gt;

&lt;h2&gt;Arithmetic Order of Operations&lt;/h2&gt;

&lt;p&gt;If we try to run this code what will be the value? In which order the operation will be run?&lt;/p&gt;

&lt;p&gt;In Ruby the order of operation is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parentheses&lt;/li&gt;
&lt;li&gt;Exponent&lt;/li&gt;
&lt;li&gt;Multiplication&lt;/li&gt;
&lt;li&gt;Division&lt;/li&gt;
&lt;li&gt;Addition&lt;/li&gt;
&lt;li&gt;Subtraction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An old trick to remember this order is to take the first letter of each item that gives the word PEMDAS&lt;/p&gt;

&lt;p&gt;Let's do example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="c1"&gt;# 10330&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the order of operation to make that result possible&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 1. Parentheses&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;# 2. Exponent&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;# 3. Multiplication&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

&lt;span class="c1"&gt;# 4. Division&lt;/span&gt;
&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

&lt;span class="c1"&gt;# 5. Final Addition and Subtraction&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10330&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Numbers methods&lt;/h2&gt;

&lt;p&gt;Here are some numbers manipulation methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Round&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt; &lt;span class="mf"&gt;2.68&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;

&lt;span class="c1"&gt;# Round down&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;floor&lt;/span&gt; &lt;span class="mf"&gt;2.68&lt;/span&gt;  &lt;span class="c1"&gt;# 2&lt;/span&gt;

&lt;span class="c1"&gt;# Round up&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ceil&lt;/span&gt; &lt;span class="mf"&gt;2.68&lt;/span&gt;   &lt;span class="c1"&gt;# 3&lt;/span&gt;

&lt;span class="c1"&gt;# Next&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;  &lt;span class="c1"&gt;# 3&lt;/span&gt;

&lt;span class="c1"&gt;# Is number event?&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;even?&lt;/span&gt;  &lt;span class="c1"&gt;# true&lt;/span&gt;

&lt;span class="c1"&gt;# Is number odd?&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;odd?&lt;/span&gt;   &lt;span class="c1"&gt;# false&lt;/span&gt;

&lt;span class="c1"&gt;# Generate a random number&lt;/span&gt;
&lt;span class="n"&gt;random_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercise&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generate a random number between 1.0 and 100. That will generate a float number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the round method to round your random number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an arithmetic operation using all the PEMDAS items and try to figure out the result without looking at Ruby result.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;
&lt;span class="c1"&gt;# 74&lt;/span&gt;

&lt;span class="c1"&gt;# Example only&lt;/span&gt;
&lt;span class="n"&gt;number2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="c1"&gt;# 391&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tuned for the next post very soon&lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;EricTheCoder_&lt;/a&gt; &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Wed, 25 Aug 2021 00:25:52 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3ea8</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3ea8</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-often"&gt;
  &lt;/a&gt;
  "Interview Often"
&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/molly"&gt;@molly&lt;/a&gt;
 for this insightful post about the value of being well-prepared for your next interview — and how exactly to accomplish that. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/molly" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMrAIHhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qARnw-JH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/119473/4fe2a414-c5d4-4cfe-b9da-8b9da90fb5e6.jpg" alt="molly"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/molly/setting-yourself-up-for-interview-success-15b7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Setting Yourself Up for Interview Success &lt;/h2&gt;
      &lt;h3&gt;Molly Struve (she/her) ・ Aug 18 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#interviewing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#job&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-road-to-being-a-developer-is-paved-with-mystery-but-it-shouldnt-be"&gt;
  &lt;/a&gt;
  The road to being a developer is paved with mystery — but it shouldn't be!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/ruppysuppy"&gt;@ruppysuppy&lt;/a&gt;
 is here to demystify the oftentimes winding road of becoming a developer. Thanks for these signposts, Tapajyoti!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ruppysuppy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oA7zxE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E69pqyft--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/530414/941751d8-06b8-41bd-9de9-6ea056b7199f.png" alt="ruppysuppy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Zero to Hero: Front End Developer Roadmap&lt;/h2&gt;
      &lt;h3&gt;Tapajyoti Bose ・ Aug 22 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#1-no-one-can-stop-you-when-you-master-the-basics"&gt;
  &lt;/a&gt;
  "#1. No one can stop you when you master the basics."
&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/tyaga001"&gt;@tyaga001&lt;/a&gt;
 for this veritable treasure trove of learnings from over a decade in software development. Solid gold!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/tyaga001" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLEVy15e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--r5R8g_-j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/350031/8417c751-9076-4e36-a6f5-757c7e279615.jpg" alt="tyaga001"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/tyaga001/top-9-lessons-learned-in-12-years-as-a-software-developer-4o9h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 9 Lessons learned in 12 years as a software developer.&lt;/h2&gt;
      &lt;h3&gt;Ankur Tyagi ・ Aug 19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#1-app-5-ways"&gt;
  &lt;/a&gt;
  1 app, 5 ways.
&lt;/h2&gt;

&lt;p&gt;I can't get over how &lt;em&gt;good&lt;/em&gt; this idea is, &lt;a class="mentioned-user" href="https://dev.to/sammyshear"&gt;@sammyshear&lt;/a&gt;
. Thanks for sharing your learnings of building the same app five different ways! More of this!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sammyshear" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0GU1vtoV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DuJeoF_H--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/681541/a1aee287-d78d-4e6a-b3f1-f5827877aa87.png" alt="sammyshear"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sammyshear/building-the-same-app-5-times-5d8l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building the Same App 5 Times&lt;/h2&gt;
      &lt;h3&gt;Sammy Shear ・ Aug 18 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#angular&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#defense-against-the-dark-arts"&gt;
  &lt;/a&gt;
  Defense against the dark arts
&lt;/h2&gt;

&lt;p&gt;... of cybersecurity threats! Thanks for sharing your thoughts on how to defend against these attacks and how to secure our online experience, &lt;a class="mentioned-user" href="https://dev.to/ms_74"&gt;@ms_74&lt;/a&gt;
   &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ms_74" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phL9ewEQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_OgsWlF5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/663759/4d6b0bd1-c91a-4a82-8f9b-6f4d8822670d.jpg" alt="ms_74"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ms_74/authentication-vulnerabilities-15po" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Authentication vulnerabilities&lt;/h2&gt;
      &lt;h3&gt;Mariam Reba Alexander ・ Aug 21 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#showandtell-app-store-edition"&gt;
  &lt;/a&gt;
  Show-and-Tell: App Store Edition
&lt;/h2&gt;

&lt;p&gt;Huge props to &lt;a class="mentioned-user" href="https://dev.to/patrickweb"&gt;@patrickweb&lt;/a&gt;
 for building their own store for ElectronJS apps. Appreciate the showcase on DEV!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/patrickweb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBVADV87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--x-yA7Ww0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386219/2b2f9ab9-9bfe-4677-89b1-91af72e264d6.png" alt="patrickweb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/patrickweb/i-made-an-app-store-283m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I made an App Store &lt;/h2&gt;
      &lt;h3&gt;Patrick Waweru ・ Aug 22 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#journey-to-the-center-of-vim"&gt;
  &lt;/a&gt;
  Journey to the Center of Vim 🔥
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/phantas0s"&gt;@phantas0s&lt;/a&gt;
 describes their series on Vim as a look "inside the Vim caves, helping you discover the finest diamonds." Sounds &lt;em&gt;pretty&lt;/em&gt; compelling to me! In this installment, you'll get a glimpse at some Vim "treasures for the mind" — specifically for those more advanced with Vim. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/phantas0s" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QaZr9Qpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FNc_7DhC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/87901/3099dc70-8d96-41bb-845a-be6c1286e0b5.jpeg" alt="phantas0s"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/phantas0s/a-vim-guide-for-veteran-users-3p50" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Vim Guide for Veteran Users&lt;/h2&gt;
      &lt;h3&gt;Matthieu Cneude ・ Aug 17 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vim&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#terminal&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>A very simple introduction to Functional Programming </title>
      <author>sigfried</author>
      <pubDate>Tue, 24 Aug 2021 23:54:33 +0000</pubDate>
      <link>https://dev.to/sigfriedcub1990/a-very-simple-introduction-to-functional-programming-1fp4</link>
      <guid>https://dev.to/sigfriedcub1990/a-very-simple-introduction-to-functional-programming-1fp4</guid>
      <description>&lt;p&gt;If you’ve heard the "buzzwords" &lt;em&gt;Functional Programming&lt;/em&gt; (FP), &lt;em&gt;composition&lt;/em&gt;, &lt;em&gt;point free&lt;/em&gt;, etc, and you were completely lost… you’re NOT alone. Here’s a sneak peak of the things you can do if you compose things and follow a functional and point free style of programming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const _ = require('lodash/fp');

const lines = [
  {
    name: "We're the eggmen",
    order: 2,
  },
  {
    name: "I'm the eggman",
    order: 1
  },
  {
    name: "I'm the walrus",
    order: 3
  }
]

function main(lines) {
  // generateSelectObject :: Object -&amp;gt; Object
  const generateSelectObject = ({ name, order }) =&amp;gt; ({
    value: `${name}_${order},
    label: name,
  });

  const sortAndMapLines = _.compose(
    _.map(generateSelectObject),
    _.sortBy(['order'])
  )

  const orderedLines = sortAndMapLines(lines);

  orderedLines.unshift({
    label: 'All lines',
    value: 'All lines'
  })

  return orderedLines;
}

const res = main(lines);
console.log(res)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’ll argue that the most interesting part of this boring code is this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const sortAndMapLines = _.compose(
    _.map(generateSelectObject),
    _.sortBy(['order'])
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what &lt;em&gt;FP&lt;/em&gt; is all about, you define the steps you need in order to achieve something, in this case the sorted and then mapped results of &lt;code&gt;lines&lt;/code&gt;. Notice we’re composing two functions there, the &lt;code&gt;sort&lt;/code&gt; and the &lt;code&gt;map&lt;/code&gt; from &lt;a href="https://github.com/lodash/lodash/wiki/FP-Guide"&gt;Lodash&lt;/a&gt; and it’s &lt;em&gt;point free&lt;/em&gt; because neither function declares explicitly with what data they will work with.&lt;/p&gt;

&lt;p&gt;Hopefully this rambling is helpful and it will whet your appetite to search for better ways to do your work and improve the overall quality of our code. A very good place to start with is Prof. Frisby's &lt;a href="https://mostly-adequate.gitbook.io/mostly-adequate-guide/"&gt;Mostly Adequate Guide to Functional Programming&lt;/a&gt; which I very much recommend.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>javascript</category>
      <category>lodash</category>
    </item>
    <item>
      <title>How to create sticky headers and footers with CSS</title>
      <author>Juan Belieni</author>
      <pubDate>Tue, 24 Aug 2021 23:50:29 +0000</pubDate>
      <link>https://dev.to/juanbelieni/how-to-create-sticky-headers-and-footers-with-css-2cmi</link>
      <guid>https://dev.to/juanbelieni/how-to-create-sticky-headers-and-footers-with-css-2cmi</guid>
      <description>&lt;p&gt;CSS offers a native way to create headers and footers that fix at the top (or at the bottom) of the screen.&lt;/p&gt;

&lt;p&gt;Both ways, your elements have to be placed like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the &lt;code&gt;#container&lt;/code&gt; element is the one that users will scroll by. In other words, your header or footer will not be sticky to the screen if it has another element surrounding them.&lt;/p&gt;

&lt;p&gt;At your CSS, you will just have to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sticky&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sticky&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/juanbelieni/embed/bGRNEbp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deploying a Python Flask App to Kubernetes</title>
      <author>Mrinalini Sugosh (Mrina)</author>
      <pubDate>Tue, 24 Aug 2021 22:21:03 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/deploying-a-python-flask-application-to-kubernetes-1n76</link>
      <guid>https://dev.to/ibmdeveloper/deploying-a-python-flask-application-to-kubernetes-1n76</guid>
      <description>&lt;p&gt;Welcome to back to THINK Tuesdays!&lt;/p&gt;

&lt;p&gt;Today we will walk through the steps to deploy a Python Flask application on to a Kubernetes cluster. We will build just the simple ‘hello-world’ app. The technologies we would be working with are &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt;, &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, and Kubernetes on &lt;a href="https://www.ibm.com/cloud/kubernetes-service"&gt;IBM Cloud Kubernetes Service&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-flask"&gt;
  &lt;/a&gt;
  Why Flask?
&lt;/h4&gt;

&lt;p&gt;Flask is lightweight, minimalistic Python web framework designed to get an app up and running quickly. It is sometimes called a micro-framework as it does not require specific tools or plug-ins to run. Also, thought I would explore Python while I am at it :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An IBM Cloud account – (sign up for a free account)&lt;/li&gt;
&lt;li&gt;A basic, foundational knowledge of Flask and Python&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-and-containerizing-the-flask-app"&gt;
  &lt;/a&gt;
  Building and Containerizing the Flask App
&lt;/h2&gt;

&lt;p&gt;On a code editor of you choice, create a folder (ie py-app) and a file &lt;code&gt;main.py&lt;/code&gt; file and enter the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello World from Pycon Flask"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Only for debugging while developing
&lt;/span&gt;    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a &lt;code&gt;Dockerfile&lt;/code&gt; in the root directory of the project and enter the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM tiangolo/uwsgi-nginx-flask:python3.7
COPY ./py-app /py-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's containerize this simple app by running the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker build -t hello-world .
$ docker run -d --name pycon -p 80:80 hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test the output from the Flask app just use curl to ping the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl http://localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pushing-the-image-to-ibm-cloud-container-registry"&gt;
  &lt;/a&gt;
  Pushing the image to IBM Cloud Container Registry
&lt;/h2&gt;

&lt;p&gt;I will quickly walk through the steps on the CLI, but do check out my &lt;a href="https://dev.to/ibmdeveloper/deploy-a-nodejs-app-to-ibm-cloud-container-registry-46m2"&gt;previous blog&lt;/a&gt; on a detail walkthrough to push containers to IBM Cloud Container Registry .&lt;/p&gt;

&lt;p&gt;Log in to your IBM Cloud account:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud login -a https://cloud.ibm.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note, if you have a federated ID, like I do, log in to the IBM Cloud CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud login --sso
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the Select a region prompt select an approporiate region in my case that would be &lt;code&gt;us-south&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can ensure that you're targeting the correct IBM Cloud Container Registry region by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud cr region-set us-south
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you don't already have one, create a namespace by running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud cr namespace-add $(kubectl config view --minify --output 'jsonpath={..namespace}')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To view and confirm your namespace run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl config view --minify --output 'jsonpath={..namespace}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Log your local Docker daemon into the IBM Cloud Container Registry.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud cr login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select your repository and tag by which you can identify your image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker tag hello-world us.icr.io/&amp;lt;namespace&amp;gt;/hello-world:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, Push the image to the registry:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker push us.icr.io/&amp;lt;namespace&amp;gt;/hello-world:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#kubernetes-deployment"&gt;
  &lt;/a&gt;
  Kubernetes Deployment
&lt;/h2&gt;

&lt;p&gt;Before we dig in here's a summary of what we get to accomplish wit Kubernetes. Kubernetes is a container orchestration tool used to manage and aid in deployments. Deployments are used to manage pods, which include containerized instances of an app. The following command deploys the app in a single pod by referring to the image that we built in the private registry. For the purposes of this walkthrough, the deployment is named hello-world-deployment, but you can give the deployment any name that you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl create deployment hello-world-deployment --image=us.icr.io/&amp;lt;namespace&amp;gt;/hello-world:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should output:&lt;br&gt;
&lt;code&gt;deployment "hello-world-deployment" created&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But we aren't done just yet. We need to make the app available to the world. We do this by exposing the deployment as a NodePort service. NodePorts are randomly assigned when they are generated with the expose command, but within 30000-32767. The NodePort that you expose is the port on which the worker node listens for traffic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl expose deployment/hello-world-deployment --type=NodePort --port=80 --name=hello-world-service --target-port=80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that all the deployment work is done, you can test the app in a browser. To do that, we need to get the details to from the URL.&lt;/p&gt;

&lt;p&gt;First, let's get information about the service to see which NodePort was assigned:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl describe service hello-world-service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get the public IP address for the worker node in the cluster, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ibmcloud ks worker ls --cluster &amp;lt;cluster_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open a browser and check out the app with the following URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://&amp;lt;IP_address&amp;gt;:&amp;lt;NodePort&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you enter that URL in a browser, you can see the following text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello World from Pycon Flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oila! You have successfully built setup a Python Flask App then containerized it using a Docker Image and deployed it onto an IBM Cloud Kubernetes Service.&lt;/p&gt;

&lt;p&gt;Thank you for following along this THINK Tuesday's Tutorial and be sure to look out for my next post, where I will continue sharing my Journey with IBM Cloud Services!!!&lt;/p&gt;

&lt;p&gt;==== Follow me on Social Media(&lt;code&gt;@mrinasugosh&lt;/code&gt;) ====&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;
 &lt;br&gt;
Github: &lt;a href="https://github.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/mrinasugosh/"&gt;@mrinasugosh&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>docker</category>
      <category>kubernetes</category>
      <category>cloud</category>
    </item>
    <item>
      <title>FP in JS: 0x02</title>
      <author>Muhammad Ahmad</author>
      <pubDate>Tue, 24 Aug 2021 21:10:10 +0000</pubDate>
      <link>https://dev.to/0xf10yd/fp-in-js-0x02-1li4</link>
      <guid>https://dev.to/0xf10yd/fp-in-js-0x02-1li4</guid>
      <description>&lt;h3&gt;
  &lt;a href="#functional-programming-in-javascript-part-2"&gt;
  &lt;/a&gt;
  Functional Programming in JavaScript: Part 2
&lt;/h3&gt;

&lt;p&gt;You could say that the profound enlightenment you experience when you finally “get it” will make learning functional programming worth it. An experience such as this will make you a better programmer for the rest of your life, whether you actually become a full-time functional programmer or not.&lt;/p&gt;

&lt;p&gt;But we’re not talking about learning to meditate; we’re talking about learning an extremely useful tool that will make you a better programmer.&lt;/p&gt;

&lt;p&gt;Formally speaking, what exactly are the practical advantages of using functional programming?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#cleaner-code"&gt;
  &lt;/a&gt;
  Cleaner code:
&lt;/h4&gt;

&lt;p&gt;Functional programs are cleaner, simpler, and smaller. This simplifies debugging, testing, and maintenance.&lt;br&gt;
For example, let’s say we need a function that converts a two dimensional array into a one-dimensional array. Using only imperative techniques, we could write it the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;merge2dArrayIntoOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;jlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;merged&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;merged&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And using functional techniques, it could be written as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;varmerge2dArrayIntoOne2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both of these functions take the same input and return the same output. However, the functional example is much more concise and clean.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#modularity"&gt;
  &lt;/a&gt;
  Modularity
&lt;/h4&gt;

&lt;p&gt;Functional programming forces large problems to be broken down into smaller instances of the same problem to be solved. This means that the code is more modular. &lt;br&gt;
Programs that are modular are clearly specified, easier to debug, and simpler to maintain. Testing is easier because each piece of modular code can potentially be checked for correctness.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#reusability"&gt;
  &lt;/a&gt;
  Reusability
&lt;/h4&gt;

&lt;p&gt;Functional programs share a variety of common helper functions, due to the modularity of functional programming. You’ll find that many of these functions can be reused for a variety of different applications.&lt;br&gt;
Many of the most common functions will be covered later in this series. However, as you work as a functional programmer, you will inevitably compile your own library of little functions that can be used over and over again. For example, a well-designed function that searches through the lines of a configuration file could also be used to search through a hash table.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#reduced-coupling"&gt;
  &lt;/a&gt;
  Reduced coupling
&lt;/h4&gt;

&lt;p&gt;Coupling is the amount of dependency between modules in a program. Because the functional programmer works to write first-class, higher-order, pure functions that are completely independent of each other with no side effects on global variables, coupling is greatly reduced. Certainly, functions will unavoidably rely on each other. But modifying one function will not change another, so long as the one-to-one mapping of inputs to outputs remains correct.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mathematically-correct"&gt;
  &lt;/a&gt;
  Mathematically correct
&lt;/h4&gt;

&lt;p&gt;This last one is on a more theoretical level. Thanks to its roots in Lambda calculus, functional programs can be mathematically proven to be correct. This is a big advantage for researchers who need to prove the growth rate, time complexity, and mathematical correctness of a program.&lt;/p&gt;

&lt;p&gt;Let’s look at Fibonacci’s sequence. Although it’s rarely used for anything other than a proof-of-concept, it illustrates this concept quite well. The standard way of evaluating a Fibonacci sequence is to create a recursive function that expresses &lt;code&gt;fibonnaci(n) = fibonnaci(n-2) + fibonnaci(n–1)&lt;/code&gt; with a base case to return &lt;code&gt;1&lt;/code&gt; when &lt;code&gt;n &amp;lt; 2&lt;/code&gt;, which makes it possible to stop the recursion and begin adding up the values returned at each step in the recursive call stack. &lt;br&gt;
This describes the intermediary steps involved in calculating the sequence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// Output: 34&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, with the help of a library that implements a lazy execution strategy, an indefinite sequence can be generated that states the mathematical equation that defines the entire sequence of numbers. Only as many numbers as needed will be computed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fibonacci2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Lazy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}());&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fibonacci2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Lazy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}());&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fibonacci2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Output: undefined&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fibonacci2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fibonacci3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Lazy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fibonacci3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; 
&lt;span class="c1"&gt;// Output: [34]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second example is clearly more mathematically sound. It relies on the &lt;code&gt;Lazy.js&lt;/code&gt; library of JavaScript. There are other libraries that can help here as well, such as &lt;code&gt;Sloth.js&lt;/code&gt; and &lt;code&gt;wu.js&lt;/code&gt;. These will be covered later, on setting up the functional programming environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functional-programming-in-a-nonfunctional-world"&gt;
  &lt;/a&gt;
  Functional programming in a nonfunctional world
&lt;/h3&gt;

&lt;p&gt;Can functional and nonfunctional programming be mixed together? Although this is the subject of a later part, Functional &amp;amp; Object-oriented Programming in JavaScript, it is important to get a few things straight before we go any further.&lt;br&gt;
This series is not intended to teach you how to implement an entire application that strictly adheres to the rigors of pure functional programming. Such applications are rarely appropriate outside Academia. Rather, this series will teach you how to use functional programming design strategies within your applications to complement the necessary imperative code.&lt;/p&gt;

&lt;p&gt;For example, if you need the first four words that only contain letters out of some text, they could naively be written like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In contrast, a functional programmer might write them as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;1-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, with a library of functional programming utilities, they can be simplified even further:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toSequence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key to identifying functions that can be written in a more functional way is to look for loops and temporary variables, such as words and count instances in the preceding example. &lt;br&gt;
We can usually do away with both temporary variables and loops by replacing them with higher-order functions, which we will explore later in this series.&lt;/p&gt;

&lt;p&gt;On the next part, we'll have an overview about functions, their types and with examples, if you found my content helpful consider following me on twitter (@_0xf10yd) as I'll be posting stuff their too and it would great if you pull up and say hi :) &lt;/p&gt;

</description>
      <category>functional</category>
      <category>javascript</category>
      <category>codequality</category>
      <category>coding</category>
    </item>
    <item>
      <title>⚡️ 6 Serverless CLI Commands You Didn't Know Existed
</title>
      <author>Sebastian Bille</author>
      <pubDate>Tue, 24 Aug 2021 20:57:31 +0000</pubDate>
      <link>https://dev.to/aws-builders/6-serverless-cli-commands-you-didn-t-know-existed-d1k</link>
      <guid>https://dev.to/aws-builders/6-serverless-cli-commands-you-didn-t-know-existed-d1k</guid>
      <description>&lt;p&gt;The Serverless Framework CLI can do a lot more than just deploy your app. Here are a few more ways you can use it in your everyday work that might not be obvious at first sight!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-bootstrap-a-project"&gt;
  &lt;/a&gt;
  1. Bootstrap a Project
&lt;/h2&gt;

&lt;p&gt;The CLI can help you initialize and bootstrap your new project, letting you choose between quite a few different project types and languages.&lt;/p&gt;

&lt;p&gt;Running just &lt;code&gt;serverless&lt;/code&gt; lets you configure your project through a setup wizard with the most common project types and leads you all the way up to deploying the project for the first time.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;serverless create&lt;/code&gt; is similar but instead expects you to provide it with either the name of a built-in project starter or an external one from Github or Bitbucket. Example usage: &lt;code&gt;serverless create --template aws-nodejs-typescript&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YoTV-HLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ib1k6mtnwvznd6jjheb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YoTV-HLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ib1k6mtnwvznd6jjheb.png" alt="sls_boilerplat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com/framework/docs/providers/aws/cli-reference/create/"&gt;CLI Reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want a slightly more fully-fledged starter project that includes testing, linting &amp;amp; optional TS support with esbuild, feel free to check out &lt;a href="https://www.npmjs.com/package/generator-sls-node"&gt;my Yeoman generator&lt;/a&gt; or my post on how to set up lightning fast builds with esbuild instead! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders "&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMOJkW1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---0KMh0T7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/269325/505c1a64-b1d1-4a2f-a52a-fcc2226c2f1d.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/lightning-fast-simple-typescript-serverless-builds-33ed" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Lightning fast &amp;amp; simple Typescript Serverless builds&lt;/h2&gt;
      &lt;h3&gt;Sebastian Bille for AWS Community Builders  ・ Jul 1 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-generate-mock-events"&gt;
  &lt;/a&gt;
  2. Generate Mock Events
&lt;/h2&gt;

&lt;p&gt;Have you ever deployed a project, published a message to the SNS topic, gone to CloudWatch, scoured the logs for the right output from your Lambda - just so that you could copy the SNS payload to use for local debugging or as a test event? I sure have.&lt;/p&gt;

&lt;p&gt;As it turns out, there's a much easier way! The Serverless CLI can help generate mock events from SNS, SQS, DynamoDB, and many other service integrations, just by running &lt;code&gt;serverless generate-event&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fzuGR2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiga114a2i854g9tevim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fzuGR2_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eiga114a2i854g9tevim.png" alt="sls_generate-event"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com/framework/docs/providers/aws/cli-reference/generate-event/"&gt;CLI Reference&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-install-tabcompletion"&gt;
  &lt;/a&gt;
  3. Install tab-completion
&lt;/h2&gt;

&lt;p&gt;Install tab-completion to get the CLI to help you suggest available parameters and subcommands!&lt;/p&gt;

&lt;p&gt;Currently supported shells are fish, bash, and zsh.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXfLPIzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0vp35plcglsgpbk4u8p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXfLPIzh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0vp35plcglsgpbk4u8p.gif" alt="2021-08-09_20-55-31_(1)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com/framework/docs/providers/aws/cli-reference/config-tabcompletion/"&gt;CLI Reference&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-invoke-deployed-functions"&gt;
  &lt;/a&gt;
  4. Invoke Deployed Functions
&lt;/h2&gt;

&lt;p&gt;How to invoke Lambda functions locally, with the popular &lt;a href="https://www.npmjs.com/package/serverless-offline"&gt;serverless-offline&lt;/a&gt; plugin, or by running &lt;code&gt;serverless invoke local&lt;/code&gt; is something that I think new serverless devs usually pick up on pretty fast.&lt;/p&gt;

&lt;p&gt;Something that's surprisingly easy to overlook, however, is that the "invoke" command can also be used to invoke already deployed functions. This can be incredibly helpful in shortening the feedback loop when debugging those pesky issues that never seem to happen on your local machine!&lt;/p&gt;

&lt;p&gt;Simply run &lt;code&gt;serverless invoke --function myFunction&lt;/code&gt;, optionally including a payload, to run the deployed function!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGfBDDEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ipybyabiuj35hoc5712.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGfBDDEx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ipybyabiuj35hoc5712.png" alt="sls_invoke"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com/framework/docs/providers/aws/cli-reference/invoke/"&gt;CLI Reference&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-print-or-tail-logs"&gt;
  &lt;/a&gt;
  5. Print or Tail Logs
&lt;/h2&gt;

&lt;p&gt;Another nifty feature to further shorten the feedback loop is the ability to print or tail the logs of a deployed Lambda function to avoid having to open up the console for the CloudWatch logs. With this, you can even tail multiple function logs at the same time, side by side, by running the command in more than one window.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;serverless logs --function myFunction [--tail]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gruWGDm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odeyixgg2d8iuuqf944o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gruWGDm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odeyixgg2d8iuuqf944o.png" alt="sls_logs"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com/framework/docs/providers/aws/cli-reference/logs/"&gt;CLI Reference&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-print-metrics"&gt;
  &lt;/a&gt;
  6. Print Metrics
&lt;/h2&gt;

&lt;p&gt;Print the metrics for the service or a given function to get a glance at how it's performing, right from the comfort of your CLI. This could for example be used to quickly figure out whether or not there have been any errors in any of the functions in the service or if the average execution time is creeping up. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;serverless metrics [--function]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-4Edb38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71tybvoypwsi7uz56zw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-4Edb38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71tybvoypwsi7uz56zw5.png" alt="sls_metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.serverless.com/framework/docs/providers/aws/cli-reference/metrics/"&gt;CLI Reference&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you enjoyed this post and want to see more, follow me on Twitter at &lt;a href="https://twitter.com/TastefulElk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS, and developer productivity! This post even &lt;a href="https://twitter.com/TastefulElk/status/1424817977615134724"&gt;started out as a thread&lt;/a&gt; over there!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>productivity</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Iniciando com o jest</title>
      <author>nicolasteofilo</author>
      <pubDate>Tue, 24 Aug 2021 20:51:16 +0000</pubDate>
      <link>https://dev.to/nicolasteofilo/iniciando-com-o-jest-3ogl</link>
      <guid>https://dev.to/nicolasteofilo/iniciando-com-o-jest-3ogl</guid>
      <description>&lt;p&gt;Neste posts nos vamos ver como iniciar os teus estudos com Jest, vamos ver o que é, e como pode ajudar no seu desenvolvimento de aplicações.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YORpNZ5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5clicw559gztoxmzowp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YORpNZ5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5clicw559gztoxmzowp.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⠀⠀⠀⠀⠀⠀⠀⠀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#para-que-server-o-jest"&gt;
  &lt;/a&gt;
  Para que server o Jest?
&lt;/h3&gt;

&lt;p&gt;O Jest foi inicialmente criado para testar o framework React(front-end),criado pelo Facebook. Porém sua implementação se tornou muito mais ampla, sendo utilizado como ferramenta de teste unitário para diversas plataformas JavaScript como Node(back-end) e Redux, e até mesmo plataformas em TypeScript como Angular e Ionic.&lt;/p&gt;

&lt;p&gt;⠀⠀⠀⠀⠀⠀⠀⠀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quais-problemas-resolve"&gt;
  &lt;/a&gt;
  Quais problemas resolve
&lt;/h3&gt;

&lt;p&gt;O jest pode ser muito útil ao decorer do desenvolvimento de uma aplicação, por váriados motivos, mais alguns é que você tem muito mais controle e segunrança do que aconteçe na sua aplicação.&lt;/p&gt;

&lt;p&gt;⠀⠀⠀⠀⠀⠀⠀⠀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#como-come%C3%A7ar-a-estudar-sobre-o-jest"&gt;
  &lt;/a&gt;
  Como começar a estudar sobre o Jest
&lt;/h3&gt;

&lt;p&gt;Agora que você já sabe para que server e como pode te ajudar eu vou te passar algumas indicações , para começar a estudar está ferramenta incrivél.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jestjs.io/pt-BR/"&gt;Documentação oficial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=18Dgf7lb9QA"&gt;Vídeo introturio de Jest Rocketseat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⠀⠀⠀⠀⠀⠀⠀⠀&lt;/p&gt;

&lt;p&gt;Agora que você já tem por onde seguir com os seus estudos, peço que me segui nas outras redes socias minhas, por lá posso muito conteúdo de qualidade.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://instagram.com/onicolasteofilo"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://linkedin/in/nicolasteofilo"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>testing</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Insomnia+Resurface: API Usage Logger plugin</title>
      <author>Ramón Márquez</author>
      <pubDate>Tue, 24 Aug 2021 20:51:11 +0000</pubDate>
      <link>https://dev.to/monrax/insomnia-resurface-api-usage-logger-plugin-3nkh</link>
      <guid>https://dev.to/monrax/insomnia-resurface-api-usage-logger-plugin-3nkh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#we-have-an-insomnia-plugin"&gt;
  &lt;/a&gt;
  We have an Insomnia plugin!
&lt;/h2&gt;

&lt;p&gt;It’s no surprise that API design platforms and clients like &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt; have become part of every developer's toolbox. Being able to create a collection of request templates for specific RESTful endpoints in a matter of seconds, and have them are ready for use with the click of a button is incredibly useful for testing, probing, designing, and even consuming APIs. We added API observability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#were-insomniacs"&gt;
  &lt;/a&gt;
  We're Insomniacs
&lt;/h2&gt;

&lt;p&gt;Insomnia’s GraphQL support in particular is superb. With integrated schema fetching, auto-complete and linting features, querying GraphQL endpoints has never been easier.&lt;/p&gt;

&lt;p&gt;Another great aspect of Insomnia (and the folks at &lt;a href="https://konghq.com/"&gt;Kong&lt;/a&gt;) is their support for Open Source Software, with initiatives such as plugins to extend Insomnia's functionality. With this, and as big fans of OSS ourselves, we decided that it was time Insomnia had yet another feature: A global API system of record.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-api-observability"&gt;
  &lt;/a&gt;
  Design + API Observability
&lt;/h2&gt;

&lt;p&gt;Not a lot of API design tools include observability features, and when they do it is usually part of an enterprise plan (often with a pay-per-request billing model). Currently, Insomnia offers a &lt;a href="https://github.com/kong/insomnia/issues/576"&gt;somewhat hidden feature&lt;/a&gt;, which shows past responses for a given request template. However, there is no place where you can quickly explore all the API calls that you've made, regardless of the endpoint. This could be very useful if you're trying to switch environments and compare results between servers. Furthermore, once a request template is deleted, this record is also gone. This can happen when either the individual request or the collection of requests are deleted, or even if any file in the workspace gets corrupted.&lt;/p&gt;

&lt;p&gt;Enter &lt;strong&gt;Resurface&lt;/strong&gt; for Insomnia: &lt;a href="http://resurface.io"&gt;Your very own API system of record&lt;/a&gt;. Resurface logs all the HTTP request-response pairs directly from Insomnia and shows them in a single place where you can explore each one, at any point in time. In addition, Resurface shows &lt;a href="https://www.youtube.com/watch?v=mRyP87SGCy0"&gt;hidden errors&lt;/a&gt; that you might've missed the first time. Since Resurface works as an append-only database, there is no risk of overwriting or accidentally deleting any individual records. (BTW, OWASP recommends an &lt;a href="https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring"&gt;append-only database&lt;/a&gt; for API security.) Resurface runs as a separate containerized solution, so if any Insomnia internal file gets corrupted or accidentally deleted, you will still be able to find all of your records safe and sound in Resurface. This also means that all of it runs locally, on your machine. No data is ever sent to Resurface Labs or anywhere else. The Resurface container is small and it doesn't consume a significant amount of resources.&lt;/p&gt;

&lt;p&gt;We are very excited about this, so we've made a little get-started guide over at the Resurface GitHub repo for all the developers, testers, and API designers out there:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/resurfaceio"&gt;
        resurfaceio
      &lt;/a&gt; / &lt;a href="https://github.com/resurfaceio/insomnia-plugin"&gt;
        insomnia-plugin
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Log API requests and responses made with Insomnia
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Resurface Insomnia Plugin&lt;/h1&gt;
&lt;p&gt;Log API requests and responses made with Insomnia to your own &lt;a href="https://resurface.io" rel="nofollow"&gt;system of record&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://resurface.io/installation" rel="nofollow"&gt;Resurface&lt;/a&gt; (free Docker container)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Set up&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;em&gt;Insomnia &amp;gt; Preferences &amp;gt; Plugins&lt;/em&gt;, type in &lt;code&gt;insomnia-plugin-usage-logger&lt;/code&gt; and click &lt;strong&gt;Install Plugin&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/resurfaceio/insomnia-plugin/raw/master/assets/readme/install_plugin.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suGdoUjy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/resurfaceio/insomnia-plugin/raw/master/assets/readme/install_plugin.gif" width="768" height="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Alternatively, check out the &lt;a href="https://github.com/resurfaceio/insomnia-plugin#manual-installation"&gt;manual installation&lt;/a&gt;.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new Environment to store the &lt;a href="https://github.com/resurfaceio/insomnia-plugin#environment-variables"&gt;variables&lt;/a&gt; used by the logger.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/resurfaceio/insomnia-plugin/raw/master/assets/readme/insomnia_env.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aI3AT3uB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/resurfaceio/insomnia-plugin/raw/master/assets/readme/insomnia_env.gif" width="768" height="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Make sure to select the &lt;a href="https://github.com/resurfaceio/insomnia-plugin#set-up"&gt;environment you created before&lt;/a&gt; (also, make sure the plugin is enabled).&lt;/li&gt;
&lt;li&gt;Use Insomnia as you would normally.&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;http://localhost:4002&lt;/code&gt; to explore all your logs using the included &lt;a href="https://resurface.io#explore" rel="nofollow"&gt;API Explorer&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/resurfaceio/insomnia-plugin/raw/master/assets/readme/insomnia_usage.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yA8IaInj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/resurfaceio/insomnia-plugin/raw/master/assets/readme/insomnia_usage.gif" width="768" height="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy loggin' 📝&lt;/p&gt;
&lt;h2&gt;
Environment variables&lt;/h2&gt;
&lt;p&gt;This plugin has access to three environment variables, but only one them is required for the logger to work properly.&lt;/p&gt;
&lt;h4&gt;
✔ All API calls are sent to the database running inside the docker container&lt;/h4&gt;
&lt;p&gt;The environment variable &lt;code&gt;USAGE_LOGGERS_URL&lt;/code&gt; stores this address, which by default should be…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/resurfaceio/insomnia-plugin"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Here's how-to video on installing the Insomnia plugin:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OJQWt_FuPRk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also find the plugin on the Insomnia Plugin Hub: &lt;a href="https://insomnia.rest/plugins/insomnia-plugin-usage-logger"&gt;API Usage Logger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy loggin'&lt;/p&gt;

&lt;p&gt;Resurface Lumberjacks&lt;/p&gt;

&lt;p&gt;P.S. If you are more on the server-side of things but still a Kong fan, &lt;a href="https://github.com/resurfaceio/kong-plugin#readme"&gt;we also got you covered&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;See original article &lt;a href="https://resurface.io/blog/resurface-insomnia-plugin"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>tooling</category>
      <category>owasp</category>
      <category>api</category>
    </item>
    <item>
      <title>The power of custom hooks in React (responsive design example)</title>
      <author>Matan Levi</author>
      <pubDate>Tue, 24 Aug 2021 20:44:17 +0000</pubDate>
      <link>https://dev.to/mlevi1806/the-power-of-custom-hooks-in-react-responsive-design-example-4flb</link>
      <guid>https://dev.to/mlevi1806/the-power-of-custom-hooks-in-react-responsive-design-example-4flb</guid>
      <description>&lt;p&gt;Generally, custom hook is a great pattern in order to handle modularity and composition in your app. you can write a custom hook for almost everything!&lt;/p&gt;

&lt;p&gt;BTW, if you're interested in custom hooks, I assume you are familiar with React hooks concept. if not, no worries, you can read about it &lt;a href="https://reactjs.org/docs/hooks-overview.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Something that worth to mention here (taken from React docs):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hooks are functions that let you “hook into” React state and lifecycle features from function components. Hooks don’t work inside classes — they let you use React without classes. (We don’t recommend rewriting your existing components overnight but you can start using Hooks in the new ones if you’d like.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/B4ZgcoPTHYXL2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/B4ZgcoPTHYXL2/giphy.gif" alt='"Captain hook"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's take responsive window handling as an example..&lt;/p&gt;

&lt;p&gt;The most common approach for responsive design is &lt;strong&gt;CSS media queries&lt;/strong&gt;, but in some cases, we will want to handle it via &lt;strong&gt;JavaScript&lt;/strong&gt; (conditionally render components, execute some logic when window size is changing to some point, etc.)&lt;/p&gt;

&lt;p&gt;In the example below you will see how we can use &lt;strong&gt;React hooks&lt;/strong&gt; for that purpose + compose code and reuse/share it across an app(s).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-declarations"&gt;
  &lt;/a&gt;
  Some declarations
&lt;/h3&gt;

&lt;p&gt;Our custom hook is called &lt;code&gt;useResponsiveWindow&lt;/code&gt; and gets &lt;code&gt;sizes&lt;/code&gt; as an optional object.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hook name convention is a &lt;code&gt;use&lt;/code&gt; prefix followed by a story telling, camel cased name (like &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useRef&lt;/code&gt;, &lt;code&gt;useContext&lt;/code&gt;, etc.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of the apps use these common sizes which declared as a default using &lt;code&gt;DEFAULT_SIZES&lt;/code&gt;, but feel free to change or pass your own to the hook.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DESKTOP_MIN&lt;/code&gt; size is also a standard minimum resolution for a desktop view (Again, not a taboo..). we will use it later.&lt;/p&gt;

&lt;p&gt;First, we will want to save state for first, on load, width &amp;amp; height using &lt;code&gt;useState&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const DEFAULT_SIZES = {
  small: [1366, 768],
  medium: [1400, 900],
  large: [1920, 1080],
  mobile: [360, 640]
};

export enum ResolutionState {
  XS = "Extra Small",
  SMALL = "Small",
  MEDIUM = "Medium",
  LARGE = "Large"
}

const DESKTOP_MIN = [1280, 720];

const useResponsiveWindow = (sizes = DEFAULT_SIZES) =&amp;gt; {
  const [width, setWidth] = useState(window.innerWidth);
  const [height, setHeight] = useState(window.innerHeight);
  const resizeTimer = useRef(null);

.........
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#track-window-size-and-store-it"&gt;
  &lt;/a&gt;
  Track window size and store it
&lt;/h3&gt;

&lt;p&gt;Adding resize event listener (remove it on unmount) and execute &lt;code&gt;handleWindowResize&lt;/code&gt; which will save the new values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.....

  const handleWindowResize = useCallback((e) =&amp;gt; {
    clearTimeout(resizeTimer.current);
    resizeTimer.current = setTimeout(() =&amp;gt; {
      setWidth(e.target.innerWidth);
      setHeight(e.target.innerHeight);

    }, 200);

  }, [setWidth, setHeight, resizeTimer]);

  useEffect(() =&amp;gt; {
    window.addEventListener('resize',handleWindowResize);
    return () =&amp;gt; {
      window.removeEventListener('resize', handleWindowResize);
    };
  }, [handleWindowResize]);

.....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useful-insights"&gt;
  &lt;/a&gt;
  Useful insights
&lt;/h3&gt;

&lt;p&gt;Now that we have width, height and resolution thresholds, we get some insights that we can use in our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.....

  const resolutionState = useCallback((type) =&amp;gt; {
    const index = type === 'width' ? 0 : 1;
    const value = type === 'width' ? width : height;
    if(value &amp;gt;= sizes?.small[index] &amp;amp;&amp;amp; value &amp;lt; sizes?.medium[index]) {
      return ResolutionState.SMALL;
    } else if(value &amp;gt;= sizes?.medium[index] &amp;amp;&amp;amp; value &amp;lt; sizes?.large[index]) {
      return ResolutionState.MEDIUM;
    } else if(value &amp;gt;= sizes?.large[index]) {
      return ResolutionState.LARGE;
    } else {
      return ResolutionState.XS;
    }
  }, [width, height]);

  const widthState = resolutionState('width');
  const heightState = resolutionState('height');

  const isMobile = useMemo(() =&amp;gt; sizes?.mobile &amp;amp;&amp;amp; width &amp;lt;= sizes?.mobile[0] &amp;amp;&amp;amp; height &amp;lt;= sizes?.mobile[1], [width, height]);

  const isDesktop = useMemo(() =&amp;gt; width &amp;gt;= DESKTOP_MIN[0] &amp;amp;&amp;amp; height &amp;gt;= DESKTOP_MIN[1], [width, height]);

.....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#consuming-the-hook"&gt;
  &lt;/a&gt;
  Consuming the hook
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const SomeComponent= () =&amp;gt; {
  const {
    width,
    height,
    isMobile,
    isDesktop,
    widthState,
    heightState
  } = useResponsiveWindow();

  useEffect(() =&amp;gt; {
    console.log(`Width state now is: ${widthState}`);
    // do something here...
  }, [widthState]);

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;{`${width} (${widthState}) x ${height} (${heightState})`}&amp;lt;/p&amp;gt;
      {isMobile &amp;amp;&amp;amp; &amp;lt;div&amp;gt;Mobile View&amp;lt;/div&amp;gt;}
      {isDesktop &amp;amp;&amp;amp; &amp;lt;div&amp;gt;Desktop View&amp;lt;/div&amp;gt;}
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can view an example &lt;a href="https://stackblitz.com/edit/"&gt;here&lt;/a&gt; and the source code here:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-ts-8gfbuo?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There are many libraries providing many custom hooks as a solution, and probably your app has a lot of those, but try to find some that you can implement yourself, it will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;saves you bundle size.&lt;/li&gt;
&lt;li&gt;gives you a full control of your code.&lt;/li&gt;
&lt;li&gt;extend your code skills outside app borders, into the infra zone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About this hook - it's  not perfect, and probably able to offer much more insights and useful data, according to your needs.&lt;/p&gt;

&lt;p&gt;Suggestions and thought are more than welcome :)&lt;/p&gt;

&lt;p&gt;Image by &lt;a href="https://pixabay.com/users/terimakasih0-624267/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=2309593"&gt;Dean Moriarty&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=2309593"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Lifecycles of Vue.js</title>
      <author>Amolik Vivian Paul</author>
      <pubDate>Tue, 24 Aug 2021 20:44:14 +0000</pubDate>
      <link>https://dev.to/amolikvivian/the-lifecycles-of-vue-js-lhh</link>
      <guid>https://dev.to/amolikvivian/the-lifecycles-of-vue-js-lhh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Lifecycle Hooks&lt;/strong&gt; are special methods, or peepholes to give us ideas on how things work behind-the-scenes of a library (React) or framework (Vue). These methods allow you to know when a component is created, added to the DOM, updated, or destroyed in the Vue instance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; All lifecycle hooks automatically have their this context bound to the instance, so that you can access data, computed properties, and methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hooks"&gt;
  &lt;/a&gt;
  The Hooks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HeZefgi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i9mpo1pogaav6q7puoe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HeZefgi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i9mpo1pogaav6q7puoe.png" alt="Lifecycle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-creation-hooks"&gt;
  &lt;/a&gt;
  The Creation Hooks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;beforeCreate&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;beforeCreate&lt;/code&gt; hook runs whenever a component is initialized. None of the data, or methods are setup during this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;beforeCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lifecycle Initialized&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;created&lt;/strong&gt;&lt;br&gt;
During the &lt;code&gt;created&lt;/code&gt; hook, we can access all reactive data members and methods as part of our component. The DOM is yet to be mounted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Created lifecycle called&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-mounting-hooks"&gt;
  &lt;/a&gt;
  The Mounting Hooks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;beforeMount&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;beforeMount&lt;/code&gt; hook runs before the initial render of the components and after the template or render functions have been compiled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;beforeMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`vm.$el has not been created yet`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;mounted&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;mounted&lt;/code&gt; hook, we have access to the reactive components, and rendered DOM (via this.$el).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`At this point, vm.$el has been created and el has been replaced.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-updating-hooks"&gt;
  &lt;/a&gt;
  The Updating Hooks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;beforeUpdate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;beforeUpdate&lt;/code&gt; hook runs after data changes on your component, right before the DOM is patched and re-rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="nx"&gt;beforeUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;updated&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;updated&lt;/code&gt; hook runs after data changes on your component and the DOM re-renders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`At this point, Virtual DOM has  re-rendered and patched.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Fired every second, should always be true&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-destroying-hooks"&gt;
  &lt;/a&gt;
  The Destroying Hooks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;beforeDestroy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;beforeDestroy&lt;/code&gt; is invoked right before teardown or destroyed. The component completely exists and is totally functional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;beforeDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`At this point, watchers, child components, and event listeners have not been teared down yet.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;destroyed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;destroyed&lt;/code&gt; hook is when everything part of the component has been torn down, or destroyed from existence. This method is useful for all cleanup required within the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;destroyed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`At this point, watchers, child components, and event listeners have been torn down.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more to learn about VueJS, click &lt;a href="//www.v3.vuejs.org"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
