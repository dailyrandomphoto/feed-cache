<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Time to say goodbye to Webpack?</title>
      <author>Gaurav Behere</author>
      <pubDate>Thu, 13 Jan 2022 09:50:25 +0000</pubDate>
      <link>https://dev.to/gauravbehere/time-to-say-goodbye-to-webpack-2kn8</link>
      <guid>https://dev.to/gauravbehere/time-to-say-goodbye-to-webpack-2kn8</guid>
      <description>&lt;p&gt;Before we answer the big question, lets look at why we are even considering it.&lt;/p&gt;

&lt;p&gt;If you look at bestofJS data for 2021, you would see that the rising star in the build tools category is &lt;code&gt;Vite&lt;/code&gt;, leaving &lt;code&gt;Webpack&lt;/code&gt; far behind in terms of popularity.&lt;br&gt;
Check out more stats here:&lt;br&gt;
&lt;a href="https://risingstars.js.org/2021/en#section-build"&gt;2021 JavaScript Rising Stars&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZfhCvmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trt3d86jztveuw01blup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZfhCvmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trt3d86jztveuw01blup.png" alt="Popular build tools" width="880" height="790"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-have-a-closer-look-at-raw-vite-endraw-"&gt;
  &lt;/a&gt;
  Lets have a closer look at &lt;code&gt;Vite&lt;/code&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Vite (French word for "quick", pronounced /vit/, like "veet") is a build tool that aims to provide a faster and leaner &lt;code&gt;development&lt;/code&gt; experience for modern web projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please note the emphasis on &lt;code&gt;development&lt;/code&gt;. &lt;code&gt;Vite&lt;/code&gt; does not promise a multifold optimization or better production experience. So don't expect your production build to be optimized or any drastic reduction in the bundle size you generate.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#so-what-does-raw-vite-endraw-do-to-make-the-development-experience-better"&gt;
  &lt;/a&gt;
  So what does &lt;code&gt;Vite&lt;/code&gt; do to make the development experience better?
&lt;/h3&gt;

&lt;p&gt;It consists of two major parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A dev server that provides rich feature enhancements over native ES modules, for example extremely fast Hot Module Replacement (HMR).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A build command that bundles your code with Rollup, pre-configured to output highly optimized static assets for production.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Vite&lt;/code&gt; is opinionated and comes with sensible defaults out of the box, but is also highly extensible via its Plugin API and JavaScript API with full typing support.&lt;/p&gt;




&lt;p&gt;It has been long since we have been writing JS code in a modular fashion specially since ES6 modules. Since not a lot of browsers were handling loading ES6 modules natively, we have the concept of bundling our code, using tools that crawl, process and concatenate our source modules into files that can run in the browser.&lt;/p&gt;

&lt;p&gt;Tools like Webpack, parcel &amp;amp; rollup do the same job.&lt;br&gt;
When you start a project, the size &amp;amp; number of JS modules may look like a smaller problem but as you write more code, the project grows &amp;amp; you see that starting a dev server takes a long time.&lt;br&gt;
Since it has to transpile the code &amp;amp; concatenate the code in a way that can be loaded in browsers.&lt;br&gt;
The slow feedback loop can greatly affect developers' productivity and happiness.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vite aims to address these issues by leveraging new advancements in the ecosystem: the availability of native ES modules in the browser, and the rise of JavaScript tools written in compile-to-native languages.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Vite&lt;/code&gt; splits the bundles into two parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;External dependencies (Vendor code): Dependencies are mostly plain JavaScript that do not change often during development. &lt;br&gt;
&lt;strong&gt;Vite pre-bundles dependencies using esbuild.&lt;/strong&gt; Esbuild pre-bundles dependencies 10-100x faster than JavaScript-based bundlers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your code (ES modules): &lt;strong&gt;Vite serves source code over native ESM.&lt;/strong&gt; This is essentially letting the browser take over part of the job of a bundler. &lt;code&gt;Vite&lt;/code&gt; only needs to transform and serve source code on demand, as the browser requests it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here, &lt;code&gt;Vite&lt;/code&gt; assumes that while you are developing in your local machine you would have latest of browsers that support loading ES6 modules natively.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#that-essentially-means-no-time-spent-on-bundling-your-code-before-the-server-can-start"&gt;
  &lt;/a&gt;
  That essentially means no time spent on bundling your code before the server can start.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcXNN3_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/656g1l249uei8twera71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcXNN3_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/656g1l249uei8twera71.png" alt="Bundling before server start" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfFc3pZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y8bsd1kkkxj7c69jg4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfFc3pZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y8bsd1kkkxj7c69jg4s.png" alt="No Bundling" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#awesome-so-why-bundle-for-production"&gt;
  &lt;/a&gt;
  Awesome, so why bundle for production?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Though most of the browsers now support loading ES modules natively, if not all of your target audience is on latest browsers, you still need bundling.&lt;/li&gt;
&lt;li&gt;If you don't bundle, you are going to make a lot of round trips on the network to fetch modules. To get the optimal loading performance in production, it is still better to bundle your code with tree-shaking, lazy-loading and common chunk splitting (for better caching).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#getting-started-with-raw-vite-endraw-"&gt;
  &lt;/a&gt;
  Getting started with &lt;code&gt;Vite&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;With minimal dev dependencies you can be off to a flying start&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"devDependencies": {
  "@vitejs/plugin-react": "^1.1.4",
  "vite": "^2.7.10"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A very basic &lt;code&gt;vite.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()]
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two simple commands to start a dev server &amp;amp; make a production build:&lt;br&gt;
&lt;code&gt;vite&lt;/code&gt; &amp;amp; &lt;code&gt;vite build&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Vite&lt;/code&gt; looks for an index html entry in the root directory from where you need to load the root/index module of your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAIMXBeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rik9cy9ifbbfq8xqo86y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAIMXBeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rik9cy9ifbbfq8xqo86y.png" alt="Server startup" width="302" height="333"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div id="root"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;script type="module" src="./index.jsx"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;index.jsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom'
import App from './src/app';

ReactDOM.render(
    &amp;lt;React.StrictMode&amp;gt;
        &amp;lt;App /&amp;gt;
    &amp;lt;/React.StrictMode&amp;gt;,
    document.querySelector('#root')
);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;src/app.jsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';

const App = () =&amp;gt; {
  return &amp;lt;&amp;gt;
    &amp;lt;div&amp;gt;Hello There&amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;Time right now: {new Date().toTimeString()}&amp;lt;/div&amp;gt;
  &amp;lt;/&amp;gt;
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without bundling the code, server starts in a fraction of a second&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vO4W0-4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c26w1mjhy4v0cf1wazbo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vO4W0-4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c26w1mjhy4v0cf1wazbo.png" alt="Server startup" width="469" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look at how the ES modules are loaded in the browser, note that app.jsx loaded as a native ES module&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXbVP7fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ddunvl623gn0i0dm68r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXbVP7fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ddunvl623gn0i0dm68r.png" alt="Resources" width="880" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hot-replacement-of-modules-hmr"&gt;
  &lt;/a&gt;
  Hot replacement of modules (HMR)
&lt;/h2&gt;

&lt;p&gt;Developers need to get an immediate feedback of changes made in the code. You can't wait for full bundling to happen again &amp;amp; reloading the page which breaks the current state &amp;amp; flow.&lt;br&gt;
This is why some bundlers support Hot Module Replacement (HMR), allowing a module to "hot replace" itself without affecting the rest of the page. Again as the project grows, HMR also takes a longer time which can be a productivity killer.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Vite&lt;/code&gt; takes an edge over other bundling tools by performing HMR over native ESM. When a file is edited, &lt;code&gt;Vite&lt;/code&gt; only needs to precisely invalidate the chain between the edited module and its closest HMR boundary (most of the time only the module itself), making HMR updates consistently fast regardless of the size of your application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Vite&lt;/code&gt; also takes advantage of HTTP headers to speed up full page reloads. Source code module requests are made conditional via 304 Not Modified, and dependency module requests are strongly cached via Cache-Control: max-age=31536000,immutable so they don't hit the server again once cached.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Vite&lt;/code&gt; starts your dev server fast by skipping the bundling.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Vite&lt;/code&gt; make use of HTTP status codes for a faster reload &amp;amp; caching.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Vite&lt;/code&gt; uses native ESM for hot module replacement. Thus your changes reflect in your app faster.&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;Vite&lt;/code&gt; is a bit opinionated about the config, with a minimal config you are good to go.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jnZ346d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/0f/67/90/0f67908cde5b012edffeb5ff5e96bcd4.gif" alt="Wow" width="498" height="245"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#server-side-rendering"&gt;
  &lt;/a&gt;
  Server side rendering
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Vite&lt;/code&gt; is also pre-configured to handle your build as a universal app. &lt;code&gt;Vite&lt;/code&gt; can pre-render the HTML pages, so robot crawlers can fetch your page content without executing js.&lt;br&gt;
Read more &lt;a href="https://vitejs.dev/guide/ssr.html"&gt;https://vitejs.dev/guide/ssr.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-should-we-just-move-to-raw-vite-endraw-amp-stop-using-tools-like-webpack"&gt;
  &lt;/a&gt;
  So should we just move to &lt;code&gt;Vite&lt;/code&gt; &amp;amp; stop using tools like Webpack?
&lt;/h2&gt;

&lt;p&gt;Coming back to the question that we started with. With all the benefits listed above, it seems promising to move to &lt;code&gt;Vite&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What gives you a lot of simpler APIs with a lot of abstraction with an opinion is often hard to configure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Based on this principle if you use some very specific long tail configurations of Webpack, it won't be a good idea to jump to Vite rightaway. If you use Webpack with basic configurations, you should move to &lt;code&gt;Vite&lt;/code&gt; for a better developer experience.&lt;/p&gt;

&lt;p&gt;If I am starting a new project, it will be using &lt;code&gt;Vite&lt;/code&gt; for sure.&lt;/p&gt;

&lt;p&gt;Thank you for reading. If you have moved a large scale project from Webpack to &lt;code&gt;Vite&lt;/code&gt;, do share your experience. It will be great to learn from your experience.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>webpack</category>
    </item>
    <item>
      <title>What are the uses of JavaScript</title>
      <author>Vik 📈</author>
      <pubDate>Thu, 13 Jan 2022 09:40:54 +0000</pubDate>
      <link>https://dev.to/heyvik/what-are-the-uses-of-javascript-gk6</link>
      <guid>https://dev.to/heyvik/what-are-the-uses-of-javascript-gk6</guid>
      <description>&lt;p&gt;JavaScript is a lightweight object-oriented programming language that is used to script webpages by a number of websites. It's a full-featured, interpreted programming language. When applied to an HTML document, JavaScript allows for dynamic interactivity on websites.&lt;/p&gt;

&lt;p&gt;JavaScript enables users to create modern web applications that allow users to engage without having to reload the page every time. The DOM API frequently uses JavaScript to dynamically modify HTML and CSS to update a user interface. It is primarily employed in web-based applications.&lt;/p&gt;

&lt;p&gt;Let's talk about how JavaScript is used. The following image depicts some of the applications of JavaScript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#make-sure-to-subscribe-to-my-newsletter"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Make sure to &lt;a href="https://devdairy.substack.com/"&gt;Subscribe to my Newsletter&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#1-web-development"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Web Development&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript is a scripting language that is often used to create web pages. It enables us to add dynamic behaviour to the homepage as well as special effects. It is primarily used on websites for validation purposes. JavaScript allows us to do complicated tasks and allows websites to communicate with users. It is also feasible to load the content of a document without reloading the webpage using JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-mobile-applications"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Mobile Applications&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Mobile devices are widely utilized to access the internet nowadays. We can also create an application for non-web environments using JavaScript. JavaScript's strengths and applications make it a powerful tool for developing mobile apps. The React Native framework is a popular JavaScript framework for developing mobile apps. We can create mobile applications for a variety of operating systems using React Native. We don't need to write separate codes for the iOS and Android platforms. It only needs to be written once and run on multiple platforms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-making-games"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Making Games&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript can also be used to make games. It comes with a number of libraries and frameworks that can be used to make a game. The game can be in two dimensions or three dimensions. We can use JavaScript game engines like PhysicsJS and Pixi.js to make a web game. We can also utilize WebGL (web graphics library), a JavaScript API that allows us to render 2D and 3D pictures in browsers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-presentations"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Presentations&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We can also use JavaScript to make website presentations. RevealJs and BespokeJs are two libraries that may be used to create a web-based slide presentation. They are simpler to utilise, allowing us to create something spectacular in a short amount of time.&lt;/p&gt;

&lt;p&gt;With the use of HTML, Reveal.js is used to create dynamic and stunning slide decks. These presentations perform well on tablets and mobile devices. It also works with all CSS colour formats. Animated bullet lists, responsive scaling, and a wide range of features are included in BespokeJS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-server-applications-"&gt;
  &lt;/a&gt;
  *&lt;em&gt;5. Server Applications *&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;A server-side component is present in a vast number of web applications. To generate content and process HTTP requests, JavaScript is employed. Node.js allows JavaScript to execute on servers. Node.js provides a server-side environment with all of the tools required for JavaScript to run.&lt;/p&gt;

&lt;p&gt;There are many other uses of JavaScript too, but for this blog, listing 5 of them are enough.&lt;/p&gt;

&lt;p&gt;Hope you did like the blog, make sure to give it a like.&lt;/p&gt;

&lt;p&gt;For some exclusive tech content, you can &lt;a href="https://devdairy.substack.com/"&gt;subscribe to my newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Security Pillar - AWS Well-Architected Framework | AWS White Paper Summary</title>
      <author>Adit Modi</author>
      <pubDate>Thu, 13 Jan 2022 09:37:07 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/security-pillar-aws-well-architected-framework-aws-white-paper-summary-5cbj</link>
      <guid>https://dev.to/awsmenacommunity/security-pillar-aws-well-architected-framework-aws-white-paper-summary-5cbj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The AWS Well-Architected Framework helps you understand trade-offs for decisions you make while building workloads on AWS. By using the Framework, you will learn current architectural best practices for designing and operating reliable, secure, efficient, and cost-effective workloads in the cloud. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It provides a way for you to consistently measure your workload against best practices and identify areas for improvement. We believe that having well-architected workloads greatly increases the likelihood of business success.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The framework is based on five pillars:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Operational Excellence&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Performance Efficiency&lt;/li&gt;
&lt;li&gt;Cost Optimization&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This paper focuses on the security pillar. This will help you meet your business and regulatory requirements by following current AWS recommendations. It’s intended for those in technology roles, such as chief technology officers (CTOs), chief information security officers (CSOs/CISOs), architects, developers, and operations team members.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#security-foundations"&gt;
  &lt;/a&gt;
  Security Foundations
&lt;/h1&gt;

&lt;p&gt;The security pillar describes how to take advantage of cloud technologies to protect data, systems, and assets in a way that can improve your security posture. This paper provides in-depth, best-practice guidance for architecting secure workloads on AWS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-principles"&gt;
  &lt;/a&gt;
  Design Principles
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the cloud, there are a number of principles that can help you strengthen your workload security:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Implement a strong identity foundation:&lt;/strong&gt; Implement the principle of least privilege and enforce separation of duties with appropriate authorization for each interaction with your AWS resources. Centralize identity management, and aim to eliminate reliance on long-term static credentials.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Enable traceability:&lt;/strong&gt; Monitor, alert, and audit actions and changes to your environment in real time. Integrate log and metric collection with systems to automatically investigate and take action.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Apply security at all layers:&lt;/strong&gt; Apply a defense in depth approach with multiple security controls. Apply to all layers (for example, edge of network, VPC, load balancing, every instance and compute service, operating system, application, and code).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automate security best practices:&lt;/strong&gt; Automated software-based security mechanisms improve your ability to securely scale more rapidly and cost-effectively. Create secure architectures, including the implementation of controls that are defined and managed as code in version-controlled templates.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Protect data in transit and at rest:&lt;/strong&gt; Classify your data into sensitivity levels and use mechanisms, such as encryption, tokenization, and access control where appropriate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keep people away from data:&lt;/strong&gt; Use mechanisms and tools to reduce or eliminate the need for direct access or manual processing of data. This reduces the risk of mishandling or modification and human error when handling sensitive data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Prepare for security events:&lt;/strong&gt; Prepare for an incident by having incident management and investigation policy and processes that align to your organizational requirements. Run incident response simulations and use tools with automation to increase your speed for detection, investigation, and recovery.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#shared-responsibility"&gt;
  &lt;/a&gt;
  Shared Responsibility
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Security and Compliance is a shared responsibility between AWS and the customer. This shared model can help relieve the customer’s operational burden as AWS operates, manages, and controls the components from the host operating system and virtualization layer down to the physical security of the facilities in which the service operates. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The customer assumes responsibility and management of the guest operating system (including updates and security patches), and other associated application software in addition to the configuration of the AWS provided security group firewall. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customers should carefully consider the services they choose as their responsibilities vary depending on the services used, the integration of those services into their IT environment, and applicable laws and regulations. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The nature of this shared responsibility also provides the flexibility and customer control that permits the deployment. As shown in the following chart, this differentiation of responsibility is commonly referred to as Security “of” the Cloud versus Security “in” the Cloud.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;AWS responsibility “Security of the Cloud”&lt;/strong&gt;– AWS is responsible for protecting the infrastructure that runs all of the services offered in the AWS Cloud. This infrastructure is composed of the hardware, software, networking, and facilities that run AWS Cloud services.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Customer responsibility “Security in the Cloud”&lt;/strong&gt;– Customer responsibility will be determined by the AWS Cloud services that a customer selects. This determines the amount of configuration work the customer must perform as part of their security responsibilities. &lt;/li&gt;
&lt;li&gt;For example, a service such as Amazon Elastic Compute Cloud (Amazon EC2) is categorized as Infrastructure as a Service (IaaS) and, as such, requires the customer to perform all of the necessary security configuration and management tasks. &lt;/li&gt;
&lt;li&gt;Customers that deploy an Amazon EC2 instance are responsible for management of the guest operating system (including updates and security patches), any application software or utilities installed by the customer on the instances, and the configuration of the AWS-provided firewall (called a security group) on each instance. &lt;/li&gt;
&lt;li&gt;For abstracted services, such as Amazon S3 and Amazon DynamoDB, AWS operates the infrastructure layer, the operating system, and platforms, and customers access the endpoints to store and retrieve data. &lt;/li&gt;
&lt;li&gt;Customers are responsible for managing their data (including encryption options), classifying their assets, and using IAM tools to apply the appropriate permissions.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yzh1csTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnc390nfee3ae3id8pai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yzh1csTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnc390nfee3ae3id8pai.png" alt="Image description" width="880" height="482"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 1: AWS Shared Responsibility Model.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This customer/AWS shared responsibility model also extends to IT controls. Just as the responsibility to operate the IT environment is shared between AWS and its customers, so is the management, operation, and verification of IT controls shared. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS can help relieve customer burden of operating controls by managing those controls associated with the physical infrastructure deployed in the AWS environment that may previously have been managed by the customer. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As every customer is deployed differently in AWS, customers can take advantage of shifting management of certain IT controls to AWS, which results in a (new) distributed control environment. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customers can then use the AWS control and compliance documentation available to them to perform their control evaluation and verification procedures as required. The following are examples of controls that are managed by AWS, AWS customers, or both.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Inherited Controls&lt;/strong&gt; – Controls that a customer fully inherits from AWS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Physical and Environmental controls&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Shared Controls&lt;/strong&gt; – Controls that apply to both the infrastructure layer and customer layers, but in separate contexts or perspectives. In a shared control, AWS provides the requirements for the infrastructure and the customer must provide their own control implementation within their use of AWS services. Examples include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Patch Management&lt;/strong&gt; – AWS is responsible for patching and fixing flaws within the infrastructure, but customers are responsible for patching their guest operating system and applications.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration Management&lt;/strong&gt; – AWS maintains the configuration of its infrastructure devices, but customers are responsible for configuring their own guest operating systems, databases, and applications.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Awareness and Training&lt;/strong&gt; – AWS trains AWS employees, but customers must train their own employees.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Customer Specific&lt;/strong&gt; – Controls that are solely the responsibility of the customer based on the application they are deploying within AWS services. Examples include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service and Communications Protection or Zone Security, which might require a customer to route or zone data within specific security environments.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-response-to-abuse-and-compromise"&gt;
  &lt;/a&gt;
  AWS Response to Abuse and Compromise
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Abuse activities are observed behaviors of AWS customers' instances or other resources that are malicious, offensive, illegal, or could harm other internet sites. AWS works with you to detect and address suspicious and malicious activities from your AWS resources. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unexpected or suspicious behaviors from your resources can indicate that your AWS resources have been compromised, which signals potential risks to your business. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#governance"&gt;
  &lt;/a&gt;
  Governance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Security governance, as a subset of the overall approach, is meant to support business objectives by defining policies and control objectives to help manage risk. Achieve risk management by following a layered approach to security control objectives–each layer builds upon the previous one. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understanding the AWS Shared Responsibility Model is your foundational layer. This knowledge provides clarity on what you are responsible for on the customer side and what you inherit from AWS. A beneficial resource is AWS Artifact, which gives you on-demand access to AWS’ security and compliance reports and select online agreements.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#operating-your-workloads-securely"&gt;
  &lt;/a&gt;
  Operating Your Workloads Securely
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Operating workloads securely covers the whole lifecycle of a workload from design, to build, to run, and to ongoing improvement. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One of the ways to improve your ability to operate securely in the cloud is by taking an organizational approach to governance. Governance is the way that decisions are guided consistently without depending solely on the good judgment of the people involved. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your governance model and process are the way you answer the question “How do I know that the control objectives for a given workload are met and are appropriate for that workload?” Having a consistent approach to making decisions speeds up the deployment of workloads and helps raise the bar for the security capability in your organization.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources.html"&gt;learn more about operating your workload securely&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-account-management-and-separation"&gt;
  &lt;/a&gt;
  AWS Account Management and Separation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We recommend that you organize workloads in separate accounts and group accounts based on function, compliance requirements, or a common set of controls rather than mirroring your organization’s reporting structure. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In AWS, accounts are a hard boundary. For example, account-level separation is strongly recommended for isolating production workloads from development and test workloads.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-1.html"&gt;learn more about AWS recommendations for deploying and managing multiple AWS accounts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#identity-and-access-management"&gt;
  &lt;/a&gt;
  Identity and Access Management
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To use AWS services, you must grant your users and applications access to resources in your AWS accounts. As you run more workloads on AWS, you need robust identity management and permissions in place to ensure that the right people have access to the right resources under the right conditions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS offers a large selection of capabilities to help you manage your human and machine identities and their permissions. The best practices for these capabilities fall into two main areas.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#identity-management"&gt;
  &lt;/a&gt;
  Identity Management
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two types of identities you need to manage when approaching operating secure AWS workloads.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Human Identities&lt;/strong&gt;: The administrators, developers, operators, and consumers of your applications require an identity to access your AWS environments and applications. These can be members of your organization, or external users with whom you collaborate, and who interact with your AWS resources via a web browser, client application, mobile app, or interactive command-line tools.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Machine Identities&lt;/strong&gt;: Your workload applications, operational tools, and components require an identity to make requests to AWS services, for example, to read data. These identities include machines running in your AWS environment, such as Amazon EC2 instances or AWS Lambda functions. You can also manage machine identities for external parties who need access. Additionally, you might also have machines outside of AWS that need access to your AWS environment.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-2.html"&gt;learn more about AWS best practices for protecting your AWS credentials&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#permissions-management"&gt;
  &lt;/a&gt;
  Permissions Management
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Manage permissions to control access to human and machine identities that require access to AWS and your workloads. Permissions control who can access what, and under what conditions. Set permissions to specific human and machine identities to grant access to specific service actions on specific resources. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, specify conditions that must be true for access to be granted. For example, you can allow developers to create new Lambda functions, but only in a specific Region. When managing your AWS environments at scale, adhere to the following best practices to ensure that identities only have the access they need and nothing more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-3.html"&gt;learn more about current AWS best practices for fine-grained authorization&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#detection"&gt;
  &lt;/a&gt;
  Detection
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Detection consists of two parts: detection of unexpected or unwanted configuration changes, and the detection of unexpected behavior. The first can take place at multiple places in an application delivery lifecycle. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using infrastructure as code (for example, a CloudFormation template), you can check for unwanted configuration before a workload is deployed by implementing checks in the CI/CD pipelines or source control. Then, as you deploy a workload into non-production and production environments, you can check configuration using native AWS, open source, or AWS Partner tools. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These checks can be for configuration that does not meet security principles or best practices, or for changes that were made between a tested and deployed configuration. For a running application, you can check whether the configuration has been changed in an unexpected fashion, including outside of a known deployment or automated scaling event.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In AWS, there are a number of approaches you can use when addressing detective mechanisms. The following sections describe how to use these approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configure&lt;/li&gt;
&lt;li&gt;Investigate&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#configure"&gt;
  &lt;/a&gt;
  Configure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Configure service and application logging: A foundational practice is to establish a set of detection mechanisms at the account level. This base set of mechanisms is aimed at recording and detecting a wide range of actions on all resources in your account. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They allow you to build out a comprehensive detective capability with options that include automated remediation, and partner integrations to add functionality.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-4.html"&gt;learn more about current AWS recommendations for capturing and analyzing logs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#investigate"&gt;
  &lt;/a&gt;
  Investigate
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Implement actionable security events&lt;/strong&gt;: For each detective mechanism you have, you should also have a process, in the form of a runbook or playbook, to investigate. For example, when you enable Amazon GuardDuty, it generates different findings. You should have a runbook entry for each finding type, for example, if a trojan is discovered, your runbook has simple instructions that instruct someone to investigate and remediate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automate response to events&lt;/strong&gt;: In AWS, investigating events of interest and information on potentially unexpected changes into an automated workflow can be achieved using Amazon EventBridge. This service provides a scalable rules engine designed to broker both native AWS event formats (such as CloudTrail events), as well as custom events you can generate from your application. Amazon GuardDuty also allows you to route events to a workflow system for those building incident response systems (Step Functions), or to a central Security Account, or to a bucket for further analysis.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-5.html"&gt;learn more about current AWS best practices for integrating auditing controls with notification and workflow&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#infrastructure-protection"&gt;
  &lt;/a&gt;
  Infrastructure Protection
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Infrastructure protection encompasses control methodologies, such as defense in depth, that are necessary to meet best practices and organizational or regulatory obligations. Use of these methodologies is critical for successful, ongoing operations in the cloud.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Infrastructure protection is a key part of an information security program. It ensures that systems and services within your workload are protected against unintended and unauthorized access, and potential vulnerabilities. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, you’ll define trust boundaries (for example, network and account boundaries), system security configuration and maintenance (for example, hardening, minimization and patching), operating system authentication and authorizations (for example, users, keys, and access levels), and other appropriate policy-enforcement points (for example, web application firewalls and/or API gateways).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Regions, Availability Zones, AWS Local Zones, and AWS Outposts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure you are familiar with Regions, Availability Zones, AWS Local Zones, and AWS Outposts, which are components of the AWS secure global infrastructure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In AWS, there are a number of approaches to infrastructure protection. The following sections describe how to use these approaches.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protecting Networks&lt;/li&gt;
&lt;li&gt;Protecting Compute&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#protecting-networks"&gt;
  &lt;/a&gt;
  Protecting Networks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Users, both in your workforce and your customers, can be located anywhere. You need to pivot from traditional models of trusting anyone and anything that has access to your network. When you follow the principle of applying security at all layers, you employ a Zero Trust approach. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zero Trust security is a model where application components or microservices are considered discrete from each other and no component or microservice trusts any other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The careful planning and management of your network design forms the foundation of how you provide isolation and boundaries for resources within your workload. Because many resources in your workload operate in a VPC and inherit the security properties, it’s critical that the design is supported with inspection and protection mechanisms backed by automation. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Likewise, for workloads that operate outside a VPC, using purely edge services and/or serverless, the best practices apply in a more simplified approach. Refer to the AWS Well-Architected Serverless Applications Lens for specific guidance on serverless security.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-6.html"&gt;learn more about AWS best practices for protecting networks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#protecting-compute"&gt;
  &lt;/a&gt;
  Protecting Compute
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Compute resources include EC2 instances, containers, AWS Lambda functions, database services, IoT devices, and more. Each of these compute resource types require different approaches to secure them. However, they do share common strategies that you need to consider: defense in depth, vulnerability management, reduction in attack surface, automation of configuration and operation, and performing actions at a distance. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In this section, you will find general guidance for protecting your compute resources for key services. For each AWS service used, it’s important for you to check the specific security recommendations in the service documentation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Perform vulnerability management&lt;/strong&gt;: Frequently scan and patch for vulnerabilities in your code, dependencies, and in your infrastructure to help protect against new threats.&lt;/li&gt;
&lt;li&gt;**Reduce attack surface: Reduce your exposure to unintended access by hardening operating systems and minimizing the components, libraries, and externally consumable services in use. Start by reducing unused components, whether they are operating system packages, applications, etc. (for EC2-based workloads) or external software modules in your code (for all workloads). &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Enable people to perform actions at a distance&lt;/strong&gt;: Removing the ability for interactive access reduces the risk of human error, and the potential for manual configuration or management. For example, use a change management workflow to manage EC2 instances using tools such as AWS Systems Manager instead of allowing direct access, or via a bastion host. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Implement managed services&lt;/strong&gt;: Implement services that manage resources, such as Amazon RDS, AWS Lambda, and Amazon ECS, to reduce your security maintenance tasks as part of the shared responsibility model. For example, Amazon RDS helps you set up, operate, and scale a relational database, automates administration tasks such as hardware provisioning, database setup, patching, and backups. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Validate software integrity&lt;/strong&gt;: Implement mechanisms (e.g. code signing) to validate that the software, code and libraries used in the workload are from trusted sources and have not been tampered with. For example, you should verify the code signing certificate of binaries and scripts to confirm the author, and ensure it has not been tampered with since created by the author. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automate compute protection&lt;/strong&gt;: Automate your protective compute mechanisms including vulnerability management, reduction in attack surface, and management of resources. The automation will help you invest time in securing other aspects of your workload, and reduce the risk of human error.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-7.html"&gt;learn more about AWS best practices for protecting compute&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#data-protection"&gt;
  &lt;/a&gt;
  Data Protection
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Before architecting any workload, foundational practices that influence security should be in place. For example, data classification provides a way to categorize data based on levels of sensitivity, and encryption protects data by way of rendering it unintelligible to unauthorized access. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These methods are important because they support objectives such as preventing mishandling or complying with regulatory obligations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In AWS, there are a number of different approaches you can use when addressing data protection. The following section describes how to use these approaches.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data Classification&lt;/li&gt;
&lt;li&gt;Protecting Data at Rest&lt;/li&gt;
&lt;li&gt;Protecting Data in Transit&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#data-classification"&gt;
  &lt;/a&gt;
  Data Classification
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data classification provides a way to categorize organizational data based on criticality and sensitivity in order to help you determine appropriate protection and retention controls.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Identify the data within your workload&lt;/strong&gt;: You need to understand the type and classification of data your workload is processing, the associated business processes, data owner, applicable legal and compliance requirements, where it’s stored, and the resulting controls that are needed to be enforced. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Define data protection controls&lt;/strong&gt;: By using resource tags, separate AWS accounts per sensitivity (and potentially also per caveat / enclave / community of interest), IAM policies, Organizations SCPs, AWS KMS, and AWS CloudHSM, you can define and implement your policies for data classification and protection with encryption. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Define data lifecycle management&lt;/strong&gt;: Your defined lifecycle strategy should be based on sensitivity level as well as legal and organization requirements. Aspects including the duration for which you retain data, data destruction processes, data access management, data transformation, and data sharing should be considered. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automate identification and classification&lt;/strong&gt;: Automating the identification and classification of data can help you implement the correct controls. Using automation for this instead of direct access from a person reduces the risk of human error and exposure. You should evaluate using a tool, such as Amazon Macie, that uses machine learning to automatically discover, classify, and protect sensitive data in AWS. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-8.html"&gt;learn more about data classification&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#protecting-data-at-rest"&gt;
  &lt;/a&gt;
  Protecting Data at Rest
&lt;/h2&gt;

&lt;p&gt;Data at rest represents any data that you persist in non-volatile storage for any duration in your workload. This includes block storage, object storage, databases, archives, IoT devices, and any other storage medium on which data is persisted. Protecting your data at rest reduces the risk of unauthorized access, when encryption and appropriate access controls are implemented.&lt;/p&gt;

&lt;p&gt;Encryption and tokenization are two important but distinct data protection schemes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tokenization is a process that allows you to define a token to represent an otherwise sensitive piece of information (for example, a token to represent a customer’s credit card number). A token must be meaningless on its own, and must not be derived from the data it is tokenizing–therefore, a cryptographic digest is not usable as a token. By carefully planning your tokenization approach, you can provide additional protection for your content, and you can ensure that you meet your compliance requirements. For example, you can reduce the compliance scope of a credit card processing system if you leverage a token instead of a credit card number.&lt;/p&gt;

&lt;p&gt;Encryption is a way of transforming content in a manner that makes it unreadable without a secret key necessary to decrypt the content back into plaintext. Both tokenization and encryption can be used to secure and protect information as appropriate. Further, masking is a technique that allows part of a piece of data to be redacted to a point where the remaining data is not considered sensitive. For example, PCI-DSS allows the last four digits of a card number to be retained outside the compliance scope boundary for indexing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Implement secure key management&lt;/strong&gt;: By defining an encryption approach that includes the storage, rotation, and access control of keys, you can help provide protection for your content against unauthorized users and against unnecessary exposure to authorized users. AWS KMS helps you manage encryption keys and integrates with many AWS services. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Enforce encryption at rest&lt;/strong&gt;: You should ensure that the only way to store data is by using encryption. AWS KMS integrates seamlessly with many AWS services to make it easier for you to encrypt all your data at rest. For example, in Amazon S3 you can set default encryption on a bucket so that all new objects are automatically encrypted. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Enforce access control&lt;/strong&gt;: Different controls including access (using least privilege), backups (see Reliability whitepaper), isolation, and versioning can all help protect your data at rest. Access to your data should be audited using detective mechanisms covered earlier in this paper including CloudTrail, and service level log, such as S3 access logs. You should inventory what data is publicly accessible, and plan for how you can reduce the amount of data available over time. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Audit the use of encryption keys&lt;/strong&gt;: Ensure that you understand and audit the use of encryption keys to validate that the access control mechanisms on the keys are appropriately implemented. For example, any AWS service using an AWS KMS key logs each use in AWS CloudTrail. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use mechanisms to keep people away from data&lt;/strong&gt;: Keep all users away from directly accessing sensitive data and systems under normal operational circumstances. For example, use a change management workflow to manage EC2 instances using tools instead of allowing direct access or a bastion host. This can be achieved using AWS Systems Manager Automation, which uses automation documents that contain steps you use to perform tasks. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automate data at rest protection&lt;/strong&gt;: Use automated tools to validate and enforce data at rest controls continuously, for example, verify that there are only encrypted storage resources. You can automate validation that all EBS volumes are encrypted using AWS Config Rules. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-9.html"&gt;learn more about AWS best practices for protecting data at rest&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#protecting-data-in-transit"&gt;
  &lt;/a&gt;
  Protecting Data in Transit
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data in transit is any data that is sent from one system to another. This includes communication between resources within your workload as well as communication between other services and your end users. By providing the appropriate level of protection for your data in transit, you protect the confidentiality and integrity of your workload’s data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Implement secure key and certificate management&lt;/strong&gt;: Store encryption keys and certificates securely and rotate them at appropriate time intervals with strict access control. The best way to accomplish this is to use a managed service, such as AWS Certificate Manager (ACM).
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Enforce encryption in transit&lt;/strong&gt;: Enforce your defined encryption requirements based on appropriate standards and recommendations to help you meet your organizational, legal, and compliance requirements. AWS services provide HTTPS endpoints using TLS for communication, thus providing encryption in transit when communicating with the AWS APIs. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Authenticate network communications&lt;/strong&gt;: Using network protocols that support authentication allows for trust to be established between the parties. This adds to the encryption used in the protocol to reduce the risk of communications being altered or intercepted. Common protocols that implement authentication include Transport Layer Security (TLS), which is used in many AWS services, and IPsec, which is used in AWS Virtual Private Network (AWS VPN).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automate detection of unintended data access&lt;/strong&gt;: Use tools such as Amazon GuardDuty to automatically detect suspicious activity or attempts to move data outside of defined boundaries. For example, GuardDuty can detect S3 read activity that is unusual with the Exfiltration:S3/ObjectRead.Unusual finding. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-10.html"&gt;learn more about AWS best practices for protecting data in transit&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#incident-response"&gt;
  &lt;/a&gt;
  Incident Response
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Even with mature preventive and detective controls, your organization should implement mechanisms to respond to and mitigate the potential impact of security incidents. Your preparation strongly affects the ability of your teams to operate effectively during an incident, to isolate, contain and perform forensics on issues, and to restore operations to a known good state. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Putting in place the tools and access ahead of a security incident, then routinely practicing incident response through game days, helps ensure that you can recover while minimizing business disruption.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design Goals of Cloud Response&lt;/li&gt;
&lt;li&gt;Educate&lt;/li&gt;
&lt;li&gt;Prepare&lt;/li&gt;
&lt;li&gt;Simulate&lt;/li&gt;
&lt;li&gt;Iterate&lt;/li&gt;
&lt;li&gt;Resources&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#design-goals-of-cloud-response"&gt;
  &lt;/a&gt;
  Design Goals of Cloud Response
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Establish response objectives&lt;/strong&gt;: Work with your stakeholders, legal counsel, and organizational leadership to determine the goal of responding to an incident. Some common goals include containing and mitigating the issue, recovering the affected resources, preserving data for forensics, and attribution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Document plans&lt;/strong&gt;: Create plans to help you respond to, communicate during, and recover from an incident.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Respond using the cloud&lt;/strong&gt;: Implement your response patterns where the event and data occurs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know what you have and what you need&lt;/strong&gt;: Preserve logs, snapshots, and other evidence by copying them to a centralized security cloud account. Use tags, metadata, and mechanisms that enforce retention policies. For example, you might choose to use the Linux dd command or a Windows equivalent to make a complete copy of the data for investigative purposes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use redeployment mechanisms&lt;/strong&gt;: If a security anomaly can be attributed to a misconfiguration, the remediation might be as simple as removing the variance by redeploying the resources with the proper configuration. When possible, make your response mechanisms safe to execute more than once and in environments in an unknown state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automate where possible&lt;/strong&gt;: As you see issues or incidents repeat, build mechanisms that programmatically triage and respond to common situations. Use human responses for unique, new, and sensitive incidents.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose scalable solutions&lt;/strong&gt;: Strive to match the scalability of your organization's approach to cloud computing, and reduce the time between detection and response.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learn and improve your process&lt;/strong&gt;: When you identify gaps in your process, tools, or people, implement plans to fix them. Simulations are safe methods to find gaps and improve processes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In AWS, there are a number of different approaches you can use when addressing incident response. The following section describes how to use these approaches:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Educate&lt;/strong&gt; your security operations and incident response staff about cloud technologies and how your organization intends to use them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prepare&lt;/strong&gt; your incident response team to detect and respond to incidents in the cloud, enable detective capabilities, and ensure appropriate access to the necessary tools and cloud services. Additionally, prepare the necessary runbooks, both manual and automated, to ensure reliable and consistent responses. Work with other teams to establish expected baseline operations, and use that knowledge to identify deviations from those normal operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simulate&lt;/strong&gt; both expected and unexpected security events within your cloud environment to understand the effectiveness of your preparation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iterate&lt;/strong&gt; on the outcome of your simulation to improve the scale of your response posture, reduce time to value, and further reduce risk.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Refer to the following resources to &lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/resources-11.html"&gt;learn more about current AWS best practices for incident response&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Security is an ongoing effort. When incidents occur, they should be treated as opportunities to improve the security of the architecture. Having strong identity controls, automating responses to security events, protecting infrastructure at multiple levels, and managing well-classified data with encryption provides defense in depth that every organization should implement. This effort is easier thanks to the programmatic functions and AWS features and services discussed in this paper.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS strives to help you build and operate architectures that protect information, systems, and assets while delivering business value.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/welcome.html"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>architecture</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Improve Page Rank of Your Blog by Creating Quality Backlinks.</title>
      <author>Shivashish Yadav</author>
      <pubDate>Thu, 13 Jan 2022 09:25:14 +0000</pubDate>
      <link>https://dev.to/shivashish/how-to-improve-page-rank-of-your-blog-by-creating-quality-backlinks-2oce</link>
      <guid>https://dev.to/shivashish/how-to-improve-page-rank-of-your-blog-by-creating-quality-backlinks-2oce</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FzVXl6do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiyhwplis14panpoe358.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FzVXl6do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wiyhwplis14panpoe358.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you have read about SEO somewhere, or you are a newbie blogger, then you must be a little familiar with the word 'Backlinks'. You must have also thought that what is Backlink and what is its importance on SEO. You use &lt;a href="https://dev.to/shivashish/best-seo-techniques-to-increase-website-traffic-quickly-bek-temp-slug-8251237"&gt;On-Site / On-Page SEO Techniques&lt;/a&gt; like Keywords, Meta Description, etc. to increase the traffic of your websites, but in the absence of more information, keep ignoring the importance of Backlinks.&lt;/p&gt;

&lt;p&gt;Backlinks are very important for your blog because, because of backlinks, search engines check the authority of any website. Backlinks are an important factor in determining the search rank of a website by search engines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-backlinks"&gt;
  &lt;/a&gt;
  What are Backlinks?
&lt;/h2&gt;

&lt;p&gt;Backlinks, as the name suggests, are links that connect your web page to another web page. That second page can be on your own website and can also be on any other website. The link appearing on any other page, on clicking which visitors come to your page, is called a backlink. These are also called Inbound Links (IBLs). They are called backlinks because they point back to your page from another page.&lt;/p&gt;

&lt;p&gt;The backlinks that are in our own domain are called internal links, and the backlinks on other websites are called external links. Proper use of Quality Backlinks improves the Search Engine Ranking of your website.&lt;/p&gt;

&lt;p&gt;Backlinks also help search engines a lot in finding links to your website and accessing your website through them. Especially for a new website or blog, it is even more necessary to create Quality Backlinks because they make quick search and indexing of your site easier for Search Engines. They send referral traffic to your website or blog, which is Targeted Traffic and its bounce rate is very low.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meaning-and-importance-of-quality-backlinks"&gt;
  &lt;/a&gt;
  Meaning and Importance of Quality Backlinks
&lt;/h2&gt;

&lt;p&gt;Quality Backlinks are those backlinks that are got from a High PageRank website and such website which is related to the content of your blog. Like if you are blogging on Health Niche, then it is important for you to have the backlinks that you are getting from other high-page ranked health websites.&lt;/p&gt;

&lt;p&gt;A High-Quality Backlink can be a thousand times more effective than any Normal Backlink. Quality Backlinks are very important to improve the Search Rankings of our website. If your content is getting organic backlinks from a good and high page ranked website, then the chances of getting a higher position in the search engine ranking increase manifold compared to other pages of that page or content. Therefore, it should be your goal to create quality backlinks for your homepage and other pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-ways-to-build-quality-backlinks"&gt;
  &lt;/a&gt;
  6 Ways to Build Quality Backlinks
&lt;/h2&gt;

&lt;p&gt;Many times bloggers do not get any benefit in SEO even after creating many backlinks of their blog or website. The only reason for this is that their backlinks do not have quality backlinks. For example, suppose your website is about Technology Reviews and you have created your backlink on a website related to Dog Care. Such backlinks will not bring much benefit to your SEO. Because Search Engines see the similarity of both Backlink Hosting Site and Targeted Site along with Quantity.&lt;/p&gt;

&lt;p&gt;Before creating backlinks, keep in mind that any blog post you are making links to should have High-Quality Content in that blog post and if the user clicks and reads your blog post, then it should benefit. The second important thing is that do not make backlinks everywhere, only on such relevant websites, on which the user will benefit by leaving the link.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-use-the-following-ways-to-create-quality-backlinks"&gt;
  &lt;/a&gt;
  You can use the following ways to create Quality Backlinks-
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#guest-blogging"&gt;
  &lt;/a&gt;
  Guest Blogging
&lt;/h3&gt;

&lt;p&gt;Guest blogging is one of the best ways to generate quality backlinks. This is the most commonly used method. Find some Famous Blogs related to your website that accept Guest Posting. Then write an attractive and Informative Post on those blogs and include a link to your blog in that post. Not only will you get a good backlink from this, but the visitors of that website will read your post and will be attracted to your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comment-on-other-blogs"&gt;
  &lt;/a&gt;
  Comment on other blogs:
&lt;/h3&gt;

&lt;p&gt;Commenting on the posts of other blogs is also a good way to get backlinks. It should be kept in mind that the blog supports Do-Follow Links. Do-Follow Links means those links from which we get the benefit of Backlinks. Not all blogs support Do-Follow Links and hence we do not get any referral from the comments made on them. Therefore, we should comment on more and more Do-Follow Blogs. Leave only a small comment, the comment also does some value addition, then only you will get the benefit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-discussion-platforms"&gt;
  &lt;/a&gt;
  Use Discussion Platforms
&lt;/h3&gt;

&lt;p&gt;Some discussion platforms are also very helpful in generating quality backlinks. The most prominent of these are Quora.com and Yahoo Answers. Take part in the discussion related to your Blogging Niche going on these Discussion Platforms, answer the questions logically and leave the link of your website there. Their people will visit your website after being impressed by your answer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-blogging-community"&gt;
  &lt;/a&gt;
  Use Blogging Community:
&lt;/h3&gt;

&lt;p&gt;Make the most of blogging communities like Indiblogger, DoSplash, Inbound, and Blog Engage. Post the content of your website on it. If your content is good and informative, then you will get Upvotes. This will not only improve your search engine ranking, as well as the backlink of your website on these communities will also increase the traffic of your website in a big way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exchange-the-link-with-other-bloggers-related-to-your-niche"&gt;
  &lt;/a&gt;
  Exchange the link with other bloggers related to your niche:
&lt;/h3&gt;

&lt;p&gt;Link Exchange with other bloggers related to the area of ​​your website. Your website will also get backlinks from this. In Link Exchange, two bloggers place each other's links in their own blog posts, due to which both get quality backlinks. This is a freeway to get Quality Backlinks, and it also has a Guaranteed SEO Boost. But keep in mind that this should not be only for backlinks, your links should benefit the user, otherwise, this link can harm your search engine. Create links in such a way that they should look real and if the user clicks on that link, then he should get useful information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-internal-links"&gt;
  &lt;/a&gt;
  Use internal links:
&lt;/h3&gt;

&lt;p&gt;Internal links are those quality backlinks that we use to give a link to another post in one post of our website. If they are used properly, then there can be a significant improvement in search engine ranking. Search Engine Ranking is determined by your keywords, visitors, and the time they spend on your website. The biggest advantage of internal links is that they are helpful in taking the visitor from one post to another, due to which the visitor spends more time on your website. In this way, your Search Rankings improve.&lt;/p&gt;

&lt;p&gt;Apart from these methods, you can also use Social Media, Blog Directories, and Public Forums to get quality backlinks. Quality Backlinks always prove to be useful in increasing traffic and SEO.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Best SEO Techniques to Increase Website Traffic quickly.</title>
      <author>Shivashish Yadav</author>
      <pubDate>Thu, 13 Jan 2022 08:24:11 +0000</pubDate>
      <link>https://dev.to/shivashish/best-seo-techniques-to-increase-website-traffic-quickly-11gk</link>
      <guid>https://dev.to/shivashish/best-seo-techniques-to-increase-website-traffic-quickly-11gk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TXIMU98g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc2qs5mzc4rb4esi0h0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TXIMU98g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc2qs5mzc4rb4esi0h0d.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SEO means Search Engine Optimization. It gets more traffic by providing a higher ranking to your website in search results of search engines.&lt;/p&gt;

&lt;p&gt;SEO is the best way to get maximum traffic on your website. Knowing some of the best SEO techniques and applying them, you will see a significant increase in the traffic of your website. Although there are many other ways to get traffic to the website apart from SEO, all others send temporary traffic to your website. When you post any content on your website and share it on social media, you get some referral traffic, which is temporary traffic and stops coming after a day or two. But when you use these SEO Techniques properly, then the traffic will keep coming for a long time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onpage-seo-techniques-to-increase-organic-traffic"&gt;
  &lt;/a&gt;
  On-Page SEO Techniques To Increase Organic Traffic
&lt;/h2&gt;

&lt;p&gt;On-Page SEO Techniques are those which we usually use on our website's Page, Posts, Titles, Headlines, etc. because of being used on the website or page itself, they are called On-Page SEO Techniques.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-keyword-in-title-tag"&gt;
  &lt;/a&gt;
  Use Keyword in Title Tag
&lt;/h3&gt;

&lt;p&gt;The title tag of your website is an important factor in SEO. Your title should be keyword-rich. You should use a Keyword Rich Phrase as the title, and it should also be attractive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adopt-longtail-strategy"&gt;
  &lt;/a&gt;
  Adopt Long-Tail Strategy
&lt;/h3&gt;

&lt;p&gt;Using Long-Tail Keywords on your Page or Post is called Long-Tail Strategy. Long-Tail Keywords are some keywords or a group of Keyword Phrases that are very much related to the product or service you provide. Whenever a client or visitor searches for that key phrase, your website is more likely to get a higher rank in the search results. For example, if your keyword is “SEO Techniques”, then your Long Tail Keywords can be something like: “10 SEO Techniques to Improve Your Search Ranking”. Long Tail Keywords are very important nowadays because they are very specific and hence Search Engines give more importance to such posts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-sure-to-use-keywords-on-your-page-and-headline"&gt;
  &lt;/a&gt;
  Be sure to use keywords on your page and headline
&lt;/h3&gt;

&lt;p&gt;Keywords contribute the most in increasing your Search Engine Ranking. Therefore, wherever you feel we can use our keyword here, be sure to use it. Use your keyword on your Homepage, About Page, or any other page as well. To increase the traffic on your website, you should also use keywords in the headlines of your post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-the-right-keywords"&gt;
  &lt;/a&gt;
  Use the right keywords
&lt;/h3&gt;

&lt;p&gt;Where appropriate keywords help in getting a high rank in the search engine, inappropriate keywords also harm your ranking. Therefore, before selecting keywords, do enough Keyword Research. Always adopt any keyword, keeping in mind its search volume. Using the keyword to be searched more will increase the traffic on your website soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-your-website-easy-to-navigate"&gt;
  &lt;/a&gt;
  Make Your Website Easy to Navigate
&lt;/h3&gt;

&lt;p&gt;You should keep your website easy to navigate. Easy to navigate means that any of your content or pages should be within two or over three clicks from the homepage of your website. With this, both the visitor and the search engine will not have trouble finding your content. When you keep your content within three clicks, then it comes quickly in the eyes of Search Engines, and it increases traffic easily. You can know how many clicks your content is from the homepage by looking at its URL. For example, in the site &lt;a href="https://shiva.hashnode.dev/series/blockchain-tutorial"&gt;https://shiva.hashnode.dev/series/blockchain-tutorial&lt;/a&gt; the page blockchain-tutorial is on two clicks, and finding it will be a less difficult task for both search engines and visitors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reduce-the-loadtime-of-your-website"&gt;
  &lt;/a&gt;
  Reduce the load-time of your website
&lt;/h3&gt;

&lt;p&gt;Do you know that the ideal time for any website to load is 2 to 3 seconds? If the load-time is over 3 seconds, the visitors of our website can decrease by up to 40%. Sometimes we include more size pictures in our posts or install many unwanted plugins. Along with this, the load-time of our website increases because of many other reasons, due to which the chances of decrease in traffic also increase. For this, we should uninstall all unnecessary plugins and optimize pictures for websites with the help of Photoshop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-meta-description-attractive"&gt;
  &lt;/a&gt;
  Make Meta Description attractive
&lt;/h3&gt;

&lt;p&gt;Meta Description does not help much in the Search Engine Optimization of our website, but it attracts people towards our website. Its 160 characters appear in the search result just below our headline, and visitors often visit the website only after reading it. If our Meta Description will be attractive, then more and more people will visit our website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-offpage-seo-techniques-to-improve-website-traffic"&gt;
  &lt;/a&gt;
  Best Off-Page SEO Techniques To Improve Website Traffic:
&lt;/h2&gt;

&lt;p&gt;Off-Page SEO Techniques are those that we apply outside our website or page on other websites, blogs, social media, or any offline medium.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-linkable-assets"&gt;
  &lt;/a&gt;
  Using Linkable Assets
&lt;/h3&gt;

&lt;p&gt;Linkable Assets are called those graphics that provide information to the viewers, and they can be easily linked with any other website. People like to share and recommend them more. The best example of Linkable Assets is Infographics, which are currently being used a lot. Nowadays, Free Tools are easily available to create Infographics, but if you use Premium Contents for Personalization, then its effect is more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-social-media"&gt;
  &lt;/a&gt;
  Use Social Media
&lt;/h3&gt;

&lt;p&gt;Full use of social media to build the audience of your website. Share every content of your website on social media, but only for a short time, but visitors come to your website. This also affects your Search Engine Ranking. The more visitors visit your website and share your content on Like, Share, Tweet, the more your ranking will improve.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-highquality-backlinks"&gt;
  &lt;/a&gt;
  Create High-Quality Backlinks
&lt;/h3&gt;

&lt;p&gt;Backlink means having links to your website on other websites. The link on which a visitor clicks to come to your website from another website is called a Backlink. Backlinks are a very important part of Search Engine Optimization. The more good and high PageRank websites have links to your website, the more your website's PageRank will improve.&lt;/p&gt;

&lt;p&gt;When you write a comment or guest post or comment on any other blog or website, it creates the possibility of backlinks. To create High-Quality Backlinks, do Guest Blogging on a famous blog related to the Niche / Field of your website.&lt;/p&gt;

&lt;p&gt;Using SEO techniques well provides targeted traffic to our website continuously. If you apply the above Best SEO Techniques on your website, then soon your website will also make a place in the initial search results.&lt;/p&gt;

&lt;p&gt;If you have found the above SEO Techniques useful, then like and share this article. If you have any queries, you can ask me in the comments.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>3 ways to add conditional properties to an object [...]</title>
      <author>prem jethwa</author>
      <pubDate>Thu, 13 Jan 2022 08:21:58 +0000</pubDate>
      <link>https://dev.to/premjethwa/3-ways-to-add-conditional-properties-to-an-object--91n</link>
      <guid>https://dev.to/premjethwa/3-ways-to-add-conditional-properties-to-an-object--91n</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sCEvS0xS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqhtavku44brnccvksmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sCEvS0xS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqhtavku44brnccvksmr.png" alt="3 ways to add conditional properties to an object" width="279" height="181"&gt;&lt;/a&gt;&lt;br&gt;
1 - Using Spread Operator&lt;/p&gt;

&lt;p&gt;What is Spread Operatot?&lt;br&gt;
source: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spread syntax (...)  allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.&lt;/p&gt;

&lt;p&gt;Example:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
   ...(someCondition &amp;amp;&amp;amp; {a: “hi”})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const greed = {
  ...(true) &amp;amp;&amp;amp; {a: “hi”},
  ...(false) &amp;amp;&amp;amp; {b: "bye"},
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;2 - Using Object.assign&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Object.assign(a, conditionB ? { b: 1 } : null,
                 conditionC ? { c: 2 } : null,
                 conditionD ? { d: 3 } : null);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Object.assign modifies the first argument in-place while returning the updated object: so you can use it in a bigger formula to further manipulate the object.&lt;/p&gt;

&lt;p&gt;You can pass undefined or {} instead of null, with the same result. &lt;/p&gt;

&lt;p&gt;Number has no own enumerable properties, so you could even provide 0 instead since primitive values are wrapped.&lt;/p&gt;

&lt;p&gt;For jQuery Developers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a = $.extend({}, {
    b: conditionB ? 5 : undefined,
    c: conditionC ? 5 : undefined,
    // and so on...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;3 - To remove Undefined Values form Object not remove other falsely values like “”, 0 or null&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const me = {
  name: “prem”,
  age: undefined ,
  height: null
}

const cleanup = JSON.parse(JSON.stringify(me)); // { name: “prem”, height: null }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shot Tip:-&lt;/p&gt;

&lt;p&gt;Use !!value to get result in Boolean values if its truthy value the will return true otherwise False.&lt;/p&gt;

&lt;p&gt;Eg:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let isTruthy = “hello” 

console.log(!!isTruthy) // true

isTruthy = “”; //can be 0 or undefined or null

Console.log(!!isTruthy) // false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>DOGECART an ecommerce platform</title>
      <author>Abhijeet Gavali</author>
      <pubDate>Thu, 13 Jan 2022 07:31:43 +0000</pubDate>
      <link>https://dev.to/abhijeetgavali/dogecart-an-ecommerce-platform-5an9</link>
      <guid>https://dev.to/abhijeetgavali/dogecart-an-ecommerce-platform-5an9</guid>
      <description>&lt;p&gt;hey guys,&lt;br&gt;
First of all I want to thank &lt;a href="http://dev.to"&gt;dev.to&lt;/a&gt; and &lt;a href="http://mongoDB.com"&gt;mongoDB&lt;/a&gt; for hosting this amazing hackathon to explore non SQL database as I Wanted to do...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#for-quick-readers"&gt;
  &lt;/a&gt;
  For quick readers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview of Submission&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#submission-category"&gt;Submission Category&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#link-to-code"&gt;Code of the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stack-and-framework-used"&gt;Resources, frameworks and code-stack Used in project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#screenshots-demo-video"&gt;Screenshots and Demo video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's talk about submission as this post is for overview of what I have build, what I have learnt, and the next plan..&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It is an online e-commerce platform, I always wanted to create a platform so every one can generate sell from online market, till date no one is providing a platform to explore market for free. yes, there are some but they are not clear about the seller policy they charge before seller makes profit from online market, When I'm exploring the drop shipping I end up with subscription for using platform, so with the help of this hackathon I bound myself to the project for creating a platform, and here is what I come with &lt;a href="https://dogecart.vercel.app"&gt;dogecart&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-of-the-project"&gt;
  &lt;/a&gt;
  Code of the project &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/AbhijeetGavali"&gt;
        AbhijeetGavali
      &lt;/a&gt; / &lt;a href="https://github.com/AbhijeetGavali/dogecart"&gt;
        dogecart
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Repo created for hackthon
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
About Doge cart&lt;/h1&gt;
&lt;p&gt;It is an ecomerce platform build to give exprence of online market to seller and provide quality producs to customers from nearby seller&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dogecart.vercel.app" rel="nofollow"&gt;Explore Platform&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
build it on local for explore&lt;/h2&gt;
&lt;p&gt;first of all you need to clone the repository and provide the environmental variables
get variables from sample.env file and provide values&lt;/p&gt;
&lt;p&gt;move to backend folder and configure env file as same&lt;/p&gt;
&lt;p&gt;run following command in backend folder to start server&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm start&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;now move to dogecart and run&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run dev&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;it will start a local development server&lt;/p&gt;
&lt;p&gt;happy coding:)&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/AbhijeetGavali/dogecart"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#resources-frameworks-and-codestack-used-in-project"&gt;
  &lt;/a&gt;
  Resources, frameworks and code-stack Used in project  &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In frontend : 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org"&gt;Next Js&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org"&gt;React Js&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://redux.js.org"&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;In Backend :

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://expressjs.com"&gt;express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/auth0/node-jsonwebtoken"&gt;JWT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mongoosejs.com"&gt;mongoose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodemailer.com/"&gt;nodemailer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://outlook.live.com/"&gt;outlook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;In DataBase:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.atlas.mongodb.com"&gt;MongoDB Atlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.atlas.mongodb.com/atlas-search/"&gt;Atlas Search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#screenshots-and-demo-videos"&gt;
  &lt;/a&gt;
  Screenshots and demo videos&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#demo-video"&gt;
  &lt;/a&gt;
  demo video
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/srINFCR-PrU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#home-page-for-searching-what-you-want"&gt;
  &lt;/a&gt;
  Home page for searching what you want
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJOYVCX0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl4641neiob7qni09neq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJOYVCX0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl4641neiob7qni09neq.png" alt="home page search bar" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#auto-couple-when-you-type-black"&gt;
  &lt;/a&gt;
  Auto couple when you type black
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wCuRj8Ui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4ynermk1aaarcbfiysp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wCuRj8Ui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4ynermk1aaarcbfiysp.png" alt="auto complete functionality" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#browsing-categories-subcategories"&gt;
  &lt;/a&gt;
  Browsing categories/ subcategories
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aCWDfhyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gyectoo8pho262vry9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aCWDfhyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gyectoo8pho262vry9h.png" alt="Browsing categories/ subcategories" width="732" height="1084"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmDDup64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc0rf47n4bfulhtk0uob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmDDup64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc0rf47n4bfulhtk0uob.png" alt="groups product according to categories subcategories" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#product-details-page"&gt;
  &lt;/a&gt;
  Product details page
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9FfOQck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocji7jktpj03tirnjif6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9FfOQck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ocji7jktpj03tirnjif6.png" alt="product page" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#user-cart-small"&gt;
  &lt;/a&gt;
  User cart Small
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YFDwQFDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjpr680pq42w4s5jbtr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YFDwQFDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjpr680pq42w4s5jbtr8.png" alt="cart page" width="650" height="1158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dogecart.vercel.app"&gt;explore more...&lt;/a&gt; [feedback is appreciated]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#details-of-the-project"&gt;
  &lt;/a&gt;
  Details of the Project
&lt;/h2&gt;

&lt;p&gt;so long you have gone through what I build, Now allow mi to give a quick overview of what I build till now,&lt;br&gt;
First thing first I am a second year engineering student from India, and this project is build by me alone, with some inspiration from YouTube.&lt;br&gt;
Now if your gone through the video you'll probably&lt;br&gt;
know that, idea behind building this project is to build a platform where sellers can cell their products online in there area as well in hole globe and experience market without any subscription charges, I haven't any experience in web UI design so this is a challenge for me, although I have backend ready for hole project I can't come with the actual Idea, so currently users can search, view and place order for my prebuilt store, if you want to know more stay tune in comments ill make hole brief of the model of the platform&lt;/p&gt;

&lt;p&gt;Images used for creating the platform are demo images and used from direct e-commerce platform such as Myntra, flip cart etc&lt;/p&gt;

&lt;p&gt;Thanks for reading, don't forget to comment!&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>javascript</category>
      <category>node</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>A11y tips: hide content from screen readers</title>
      <author>Carlos Espada</author>
      <pubDate>Thu, 13 Jan 2022 07:28:19 +0000</pubDate>
      <link>https://dev.to/carlosespada/a11y-tips-hide-content-from-screen-readers-3mj3</link>
      <guid>https://dev.to/carlosespada/a11y-tips-hide-content-from-screen-readers-3mj3</guid>
      <description>&lt;p&gt;If you want to &lt;strong&gt;hide content for screen readers&lt;/strong&gt; but still be available to sighted or keyboard users, just use &lt;code&gt;aria-hidden="true"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A classic example where it is useful is to hide icons that serve as visual support for a text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
  .icon-star: before {content: "★"; }
&amp;lt;/style&amp;gt;

&amp;lt;span&amp;gt;
  &amp;lt;span class="icon-star" aria-hidden="true"&amp;gt;&amp;lt;/span&amp;gt;
  Favorite
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way the icon that we insert with CSS only appears for sighted users, while screen readers will announce only "&lt;em&gt;Favorite&lt;/em&gt;", instead of "&lt;em&gt;Black Star Favorite&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;It is best to &lt;strong&gt;avoid using this ARIA attribute on focusable elements&lt;/strong&gt;, as being able to receive focus but hiding from screen readers can cause confusion for their users. You could use a &lt;code&gt;tabindex="- 1"&lt;/code&gt; to avoid focus but then it would be out of use for sighted keyboard users.&lt;/p&gt;

&lt;p&gt;This and other tips on the use of &lt;code&gt;aria-hidden="true"&lt;/code&gt; can be found in the &lt;a href="https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html#:~:text=Hiding%20Content%20from%20Assistive%20Technology"&gt;already named article&lt;/a&gt; by Scott O'Hara, and on the use of icon fonts in &lt;a href="https://www.filamentgroup.com/lab/bulletproof_icon_fonts.html"&gt;the article&lt;/a&gt; by Zach Leathermann, from which the example is taken.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>tips</category>
      <category>html</category>
    </item>
    <item>
      <title>Will a couple of line markers in IDE make your microservice code mode readable?</title>
      <author>Yuriy Artamonov</author>
      <pubDate>Thu, 13 Jan 2022 07:17:34 +0000</pubDate>
      <link>https://dev.to/jreznot/will-a-couple-of-line-markers-make-your-microservice-code-mode-readable-5h5g</link>
      <guid>https://dev.to/jreznot/will-a-couple-of-line-markers-make-your-microservice-code-mode-readable-5h5g</guid>
      <description>&lt;p&gt;Writing microservices has never been easy and does not become easier with growing codebases. All the complexity strives from tons of interactions between the moving parts of your applications.&lt;/p&gt;

&lt;p&gt;And then we had this year's holidays and I had enough free time to think about it. Many complex measures can be used to make the code of microservices more readable, numerous expressive APIs, modern languages, we already use all of these, but the situation does not get better.&lt;/p&gt;

&lt;p&gt;Finally, I've found a stupid simple approach to simplify the reading of code — just show a couple of icons for the most dangerous places where services interact with file systems, networks, make database queries, etc. And wow! It finally makes the code easier to read for me; I clearly see those important interaction points where things may go wrong.&lt;/p&gt;

&lt;p&gt;Please welcome, the result of my Christmas holidays: &lt;a href="https://plugins.jetbrains.com/plugin/18361-microservices-annotator"&gt;Microservices Annotator&lt;/a&gt; plugin for IntelliJ IDEA. Because what else do developers from the IntelliJ IDEA team do on holidays — of course, they do plugins for IntelliJ IDEA!&lt;/p&gt;

&lt;p&gt;In a nutshell, it just shows line markers for method calls in Java and Kotlin code where you call some well-known API methods, such as Spring Data or Spring Feign Client calls.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJu9D9BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8xru6zdnoejia7k5r3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJu9D9BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8xru6zdnoejia7k5r3i.png" alt="Line markers in editor" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But that is just the tip of the iceberg. I know for sure, people use tons of custom APIs and not only OSS things like Spring Framework. That's why this plugin also enables you to mark any method in your codebase as some meaningful interaction point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hSZb237O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1shlsd9n4s6ox6og9hv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSZb237O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1shlsd9n4s6ox6og9hv.png" alt="Intention menu" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many interaction types supported: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSsUdfrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p69zqf56uospm2abr52d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSsUdfrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p69zqf56uospm2abr52d.png" alt="Supported types" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the plugin just remembers your method signature in the project settings and you will be able to share the &lt;code&gt;.idea/microserviceCalls.xml&lt;/code&gt; file with your colleagues. Also, if you try to annotate some API from a known public library, such as code inside org.springframework package, this usage will be reported to our server so this setting can be distributed to all users of the plugin after moderation. You can check APIs that have been recently approved on &lt;a href="https://msa.strangeway.org/"&gt;https://msa.strangeway.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And this is a community-driven project, so all the data of marked public APIs are available on &lt;a href="https://github.com/strangeway-org/microservices-annotator-db"&gt;Github&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Finally, it is just that simple for you: Hit &lt;code&gt;Alt-Enter&lt;/code&gt; on a method cal and Choose &lt;code&gt;Mark microservice interaction method&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bDK2gu-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34uu4e7j0ng9u0m74y7j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDK2gu-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34uu4e7j0ng9u0m74y7j.gif" alt="Using intention in IDE" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please try and &lt;a href="https://github.com/strangeway-org/microservices-annotator-db/issues"&gt;give us some feedback&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Would be great to hear not only positive feedback but also some criticism of this approach, maybe some better options exist. What do you think?&lt;/p&gt;

&lt;p&gt;And answering the original question from the title: Yes, I believe this is a good thing for code reviews that will make your microservice code mode readable!&lt;/p&gt;

</description>
      <category>ide</category>
      <category>programming</category>
      <category>microservices</category>
      <category>java</category>
    </item>
    <item>
      <title>Virtual and Actual Events 2022</title>
      <author>Ingo Steinke</author>
      <pubDate>Thu, 13 Jan 2022 07:16:43 +0000</pubDate>
      <link>https://dev.to/ingosteinke/virtual-and-actual-events-2022-237i</link>
      <guid>https://dev.to/ingosteinke/virtual-and-actual-events-2022-237i</guid>
      <description>&lt;p&gt;Events to look forward to in 2022, just a small and subjective selection from the perspective of a European web developer focused on front-end development, accessibility, and sustainability.&lt;/p&gt;

&lt;p&gt;This is a repost, you can read the &lt;a href="https://www.open-mind-culture.org/en/1947/virtual-and-actu%E2%80%A6tech-events-2022/"&gt;same content&lt;/a&gt; in my blog "Open Mind Culture" which used to feature less technological topics, but somehow I want to switch back to more Indie Web publishing to be more independent of "social" networks like ("Tech") Twitter, Meetup, and maybe even DEV (which is currently the only social platform for technical content that doesn't either suck or is nearly abandoned like mastodon seems to be.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdirections.org/remixed/"&gt;Remix Conference&lt;/a&gt; Friday, 14 January 2022 from 12:00 to 16:00 CET. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://ti.to/smashingmagazine/a-smashing-hour-sara-part2"&gt;A Smashing Hour with Sara Soueidan&lt;/a&gt; Part 2, 20 January 2022 from 17 p.m. CET.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.meetup.com/CSS-Cafe/events/283116732/"&gt;CSS Café: Understanding the Cascade&lt;/a&gt;, Online-Meetup with Bramus van Damme on Thursday, 27 January 2022 also at 17:00 (5 p.m.).&lt;/p&gt;

&lt;p&gt;Also looking forward to the upcoming &lt;a href="https://beyondtellerrand.com/"&gt;beyond tellerrand conferences&lt;/a&gt; &lt;a href="https://beyondtellerrand.com/events/dusseldorf-2022"&gt;on 2 and 3 May 2022 in Düsseldorf&lt;/a&gt; and on &lt;a href="https://beyondtellerrand.com/events/berlin-2022"&gt;1 and 2 September 2022 in Berlin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another conference that will hopefully continue to take  place in place as an actual event: &lt;a href="https://blog.nevercodealone.de/php-testing-refactoring-nca-conference-duisburg/"&gt;Never Code Alone&lt;/a&gt; in the quiet media harbor of Duisburg in the west of the German Ruhrgebiet region.&lt;/p&gt;

&lt;p&gt;Hope to meet you at one of the few actual conferences!&lt;/p&gt;

&lt;p&gt;Stay tuned for more upcoming events!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>eventsinyourcity</category>
    </item>
    <item>
      <title>Different bullet for each item in the list using simple CSS</title>
      <author>Basharath</author>
      <pubDate>Thu, 13 Jan 2022 07:12:55 +0000</pubDate>
      <link>https://dev.to/basharath/customize-each-list-item-style-with-this-simple-css-jbc</link>
      <guid>https://dev.to/basharath/customize-each-list-item-style-with-this-simple-css-jbc</guid>
      <description>&lt;p&gt;Lists are the form of data representation commonly used by all types of documents. In HTML there are two types of lists namely ordered and unordered lists. &lt;/p&gt;

&lt;p&gt;In an ordered list, the items are indicated by serial numbers or letters that are in some order. In an unordered list, the list items are indicated by various types of bullets viz., disc, circle, square, or by an image. &lt;/p&gt;

&lt;p&gt;By default, the ordered list items are indicated by numbers and unordered list items by disc bullets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Unordered list --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Ordered list --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3X5HFQic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977633472/Bkjwpjzgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3X5HFQic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977633472/Bkjwpjzgm.png" alt="image.png" width="730" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-list-style-types"&gt;
  &lt;/a&gt;
  Styling list style types
&lt;/h2&gt;

&lt;p&gt;For styling lists, there are CSS list properties using which we can change the list style type, list position, and add an image as a list type nothing but the image as the bullet of the list item.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-list-property"&gt;
  &lt;/a&gt;
  CSS list property
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* list-style is a shorthand property */&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;list-style-type&lt;/span&gt; &lt;span class="n"&gt;list-style-position&lt;/span&gt; &lt;span class="n"&gt;list-style-image&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;list-style-type&lt;/code&gt; - to change the bullet styles of the list&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;list-style-position&lt;/code&gt; - to change the position of the list, two values outside and inside&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;list-style-image&lt;/code&gt; - to add an image as a bullet for the list, if the image fails to show then list-style-type will be shown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in order to change the bullet type for the list, we just need to use CSS list style type with the bullet we need. Let's see how to change the bullets for the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Unordered list */&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'❤️'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;or&lt;/span&gt; &lt;span class="c"&gt;/* list-style: '❤️'; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Orderedlist */&lt;/span&gt;
&lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'👍'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t1rm9fz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977591471/NqpRKa_ek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t1rm9fz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977591471/NqpRKa_ek.png" alt="image.png" width="746" height="224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just by changing the CSS list style type value, we can change the bullets of any list. The possible value for the list style type can be anything, even language-specific letters, roman numerals, etc. To know various supported list style types in CSS head over to &lt;a href=""&gt;this MDN Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But using this way all the style types are going to be the same for all the items of the list. In order to customize style type for every individual item, we need to define it by using CSS at-rule, &lt;code&gt;@counter-style&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customize-individual-list-style-type"&gt;
  &lt;/a&gt;
  Customize individual list style type
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;@counter-style&lt;/code&gt; we can define the custom list style type for individual items of the list. It has so many properties for customizing the list. There are three important properties that we need to know to customize the list style types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@counter-style&lt;/span&gt; &lt;span class="n"&gt;custom-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cyclic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"😀"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;custom-type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/*or list-style-type: custom-type; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;system&lt;/code&gt; - defines how the list bullets should show. The possible values for it are: cyclic, numeric, alphabetic, symbolic, additive, or fixed, etc&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;symbols&lt;/code&gt; - here is where you need to give different list style types you want to show for the list items. It can be numbers, alphabets, symbols, even images separated by a space&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;suffix&lt;/code&gt; - usually, this one should be space, to have a space after the style type. Other than space you can have anything as a suffix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see all the above in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Unordered list --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;One&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Two&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Three&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Four&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Ordered list --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;One&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Two&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Three&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Four&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* style type for unordered list */&lt;/span&gt;
&lt;span class="k"&gt;@counter-style&lt;/span&gt; &lt;span class="n"&gt;custom-unordered&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cyclic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s2"&gt;'❓'&lt;/span&gt; &lt;span class="s2"&gt;'✌️'&lt;/span&gt; &lt;span class="s2"&gt;'❤️'&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* style type for ordered list */&lt;/span&gt;
&lt;span class="k"&gt;@counter-style&lt;/span&gt; &lt;span class="n"&gt;custom-ordered&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'➡️'&lt;/span&gt; &lt;span class="s2"&gt;'😀'&lt;/span&gt; &lt;span class="s2"&gt;'👍'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;custom-unordered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* or list-style-type: custom-unordered; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;custom-ordered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3OyIY5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977791593/uO54HIt7W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3OyIY5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977791593/uO54HIt7W.png" alt="image.png" width="698" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image of the result is put here because we can't edit the CSS in dev.to. To see the actual result on the webpage, see the original article on the &lt;a href="https://devapt.com/customize-css-list-style-type"&gt;devapt&lt;/a&gt; site.&lt;/p&gt;

&lt;p&gt;So using the @counter-style that is how we can add individual list style types. If you see when &lt;code&gt;system&lt;/code&gt; is defined as &lt;code&gt;cyclic&lt;/code&gt; the same list style type repeats after all types are done, and when it is &lt;code&gt;fixed&lt;/code&gt; the style type for the item number more than the number of symbols defined, get the default style type i.e., a number for the ordered list and disc for the unordered list.&lt;/p&gt;

&lt;p&gt;You need &lt;code&gt;system&lt;/code&gt; value as &lt;code&gt;fixed&lt;/code&gt; only when you know that the number of items are fixed else it's better to go for &lt;code&gt;cyclic&lt;/code&gt; or any other type. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Safari is the only modern browser that doesn't support this CSS feature. You can see the compatibility &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style#browser_compatibility"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That is all about styling the individual list item types using CSS.&lt;/p&gt;

&lt;p&gt;I'll be sharing interesting tips, tricks and hacks about web development and technology on &lt;a href="https://twitter.com/wahVinci"&gt;Twitter @wahVinci&lt;/a&gt; and &lt;a href="https://www.instagram.com/dev_apt/"&gt;Instagram @dev_apt&lt;/a&gt;, follow if you are interested.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>It's Prisma Time - Pagination</title>
      <author>Luca Del Puppo</author>
      <pubDate>Thu, 13 Jan 2022 07:10:33 +0000</pubDate>
      <link>https://dev.to/this-is-learning/its-prisma-time-pagination-218e</link>
      <guid>https://dev.to/this-is-learning/its-prisma-time-pagination-218e</guid>
      <description>&lt;p&gt;Hi Guys 👋&lt;br&gt;
Today we are going to see how to paginate our results.&lt;br&gt;
So don't waste time and let's go!&lt;/p&gt;

&lt;p&gt;With Prisma there are two ways to paginate results: &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client/pagination#offset-pagination"&gt;Offset pagination&lt;/a&gt; or &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination"&gt;Cursor-based pagination&lt;/a&gt;.&lt;br&gt;
What are the differences though?&lt;br&gt;
The first one is used when we need to create a sequence of pages and get their datas according to the page. The second one, instead, is used when we want the items after a specific record, to continue the list after that element.&lt;/p&gt;

&lt;p&gt;But let's see an example of both, starting with the first one &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;take&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageOnePosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Page 1: `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageOnePosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageTwoPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Page 2: `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageTwoPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result of this example is this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the first &lt;code&gt;findMany&lt;/code&gt; has the orderBy and the take options. The orderBy is used to give a sort to our results and the take option is used to get the first 3 elements of the results. In this case the skip option isn't indicated so its value is 0 (default value). Instead, in the second &lt;code&gt;findMany&lt;/code&gt; method there is also the skip option, and it's indicated with the value 3. In this case, the findMany method returns 3 elements (take: 3) after the third element (skip: 3), so we can see the results of the second page.&lt;br&gt;
I think it's not so difficult to understand it, so let's go on to the cursor implementation.&lt;br&gt;
Let's start from the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageOnePosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Page 1: `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageOnePosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageTwoPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pageOnePosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pageOnePosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Page 2: `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageTwoPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may notice, the results are the same of the previous example but the implementation is a little bit different in the second part.&lt;br&gt;
In this case, the second findMany has the same orderBy and take options as in the first example, but it has a different skip and uses the cursor option. First let's focus on the cursor option. This option allows us to indicate the last item returns by the previous search, so we can restart our pagination from this element and combining it with the &lt;code&gt;skip: 1&lt;/code&gt;, we'll get the results after this element.&lt;br&gt;
&lt;em&gt;It's important to indicate the skip option with the one value, otherwise the element indicates in the cursor is part of the results.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you can tell, both implementations are correct but each of them resolve a different type of pagination. Now it's your job to take the right one. &lt;/p&gt;

&lt;p&gt;Ok guys that's all!&lt;br&gt;
I hope now you have an idea of how you can paginate your datas using prisma.&lt;br&gt;
In the next article, we are going to see how to aggregate and group the datas.&lt;/p&gt;

&lt;p&gt;See you soon!&lt;br&gt;
Bye Bye 👋&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/Puppo/it-s-prisma-time/tree/10-pagination"&gt;Here&lt;/a&gt; you can find the code of this article.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>database</category>
      <category>orm</category>
    </item>
  </channel>
</rss>
