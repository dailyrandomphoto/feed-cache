<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Eloquent JS: Chapter 3, the World of Functions</title>
      <author>Alex Kharouk</author>
      <pubDate>Tue, 10 Aug 2021 16:31:10 +0000</pubDate>
      <link>https://dev.to/kharouk/eloquent-js-chapter-3-the-world-of-functions-il6</link>
      <guid>https://dev.to/kharouk/eloquent-js-chapter-3-the-world-of-functions-il6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#quick-update"&gt;
  &lt;/a&gt;
  Quick update
&lt;/h2&gt;

&lt;p&gt;It's been almost a month since I published the first part of the Eloquent JavaScript Book Club series. I enjoyed the feedback I received from the Dev.to community and was happy to see folks wanting to join the book club and read along. However, as it has been almost a month, I'm sure many of you continued and finished the book without me. It's cool; I get it. Personally, a lot has happened in my life.&lt;/p&gt;

&lt;p&gt;I quit my current job and am very happy to have accepted an excellent offer at a great company. I received an unconditional offer for a Masters in Computer Science &amp;amp; Artificial Intelligence, where I'll be studying part-time for the next two years. I learned a heck load of data structures, algorithms, systems design, and everything in between.&lt;/p&gt;

&lt;p&gt;It's been a wild month, but I'm ready to sit back a bit. Drink a nice cold brew. Open up the dusty textbook and get into some &lt;em&gt;eloquent JavaScript&lt;/em&gt;. Before we start, I want to quickly mention that I also completed the &lt;a href="https://justjavascript.com/"&gt;Just JavaScript&lt;/a&gt; book/workshop/mini-course by Dan Abramov. I've already seen some parallels between eloquent JS and that course. I would wholeheartedly recommend getting into both. It helped solidify my mental model of how things like variables (and functions) work. There should be a blog post to analyse the two texts.&lt;/p&gt;

&lt;p&gt;Right, &lt;strong&gt;functions&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People think that computer science is the art of geniuses, but the actual reality is the opposite, just many people doing things that build on each other, like a wall of mini stones.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Donald Knuth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without functions, our code wouldn't function well. It will still do its job. Expressions and statements will continue to execute whilst our bindings (variables) will continue latching onto data. But without some order or a way of keeping related code together, it'd be complicated to manage.&lt;/p&gt;

&lt;p&gt;We can create functions with a function expression. It's similar to how we have defined variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;num&lt;/code&gt; is a &lt;em&gt;parameter&lt;/em&gt;, whilst the curly braces encapsulate the &lt;em&gt;body&lt;/em&gt; of the function. The code above creates a constant called &lt;code&gt;addTwo&lt;/code&gt; and binds it to a function that takes in a number and adds two to it.&lt;/p&gt;

&lt;p&gt;Some functions have a return statement. Others return nothing at all. Yet just because it seems like it returns nothing in the code, in reality, all operations with no explicit return statement return &lt;code&gt;undefined.&lt;/code&gt; Another example is to open your browser's console, and type in &lt;code&gt;console.log('hello')&lt;/code&gt;. You'll see hello being printed, but you'll also get the type &lt;code&gt;undefined&lt;/code&gt; returned. That's because the &lt;code&gt;.log()&lt;/code&gt; is a function that doesn't return anything. It just runs a side effect, which is the printed message.&lt;/p&gt;

&lt;p&gt;Side note, the same thing happens when we execute an expression like &lt;code&gt;let x =&lt;br&gt;
  42;&lt;/code&gt; as variable declarations do not produce a value but returns something.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-scope"&gt;
  &lt;/a&gt;
  Understanding Scope
&lt;/h3&gt;

&lt;p&gt;A crucial advantage that a function has is being able to have it's own scope. It's a mechanism that allows a function to deal with its internal state and prevent other functions from manipulating state. It creates separation of scope, where you have the &lt;em&gt;global&lt;/em&gt; scope (outside the function), and the &lt;em&gt;inner&lt;/em&gt; scope. Global scope is like setting some variables at the top of your file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;closingTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions have the ability to read those variables, and even manipulate them (we will discuss why this is not necessarily good). However, we can't reach into functions and control the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;personalSchedule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;doctorsAppointment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doctorsAppointment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// doctorsAppointment is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These variables are known as local variables (or local bindings). They only exist for a limited amount of time, when the function is called. Then, once the the function has finished executing, they cease to exist. It's quite melancholic.&lt;/p&gt;

&lt;p&gt;A key thing to note is that variables declared with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; are local to the &lt;strong&gt;block&lt;/strong&gt; they are called in, and therefore can not be called outside the block, unlike &lt;code&gt;var&lt;/code&gt;. A great example is a for loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// execute code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// execute code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the difference in the highlights&lt;/p&gt;

&lt;p&gt;Another thing to note is that whilst we can't &lt;em&gt;look inside&lt;/em&gt; a function to get its variables, we can look outside the scope of the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;halve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;divided&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divided&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;halve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function inside halve can interact with both the &lt;code&gt;x&lt;/code&gt; variable in the global scope, as well as the &lt;code&gt;divided&lt;/code&gt; variable within the scope of the &lt;code&gt;halve&lt;/code&gt; function. This is also known as &lt;strong&gt;lexical scoping&lt;/strong&gt;, where each local scope can also see all the local scopes that contain it. On top of that, all scopes can see the global scope.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaring-functions"&gt;
  &lt;/a&gt;
  Declaring Functions
&lt;/h2&gt;

&lt;p&gt;We've seen functions declared as an expression. We can also assign them in a shorter way through what is known as &lt;strong&gt;function declarations&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;booDeclare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`BOO! Did I scare you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// how we would write it before&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a difference between the two, and it's primarily due to something called &lt;em&gt;hoisting&lt;/em&gt; (we won't get into this right now). If you were to call &lt;code&gt;booDeclare&lt;/code&gt; before it was declared, you would see that it still works. However, we can't say the same for the other function. This is due to function declarations being &lt;em&gt;hoisted&lt;/em&gt; up to the top of the conceptual page, and thus is able to be used anywhere in the code.&lt;/p&gt;

&lt;p&gt;This kind of makes sense, as the second function is more like how we declare a variable, and that we are unable to know what the variable binds to before it is declared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am walking through a haunted house&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;booDeclare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// works&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;booDeclare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`BOO! Did I scare you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Cannot access 'boo' before initialization&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`BOO! Did I scare you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ghost&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Cannot access 'ghost' before initialization&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ghost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nice ghost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;You might be familiar with arrow functions as well. They are newer syntax, and they provide us a way of writing small function expressions in a (my opinion) cleaner manner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;owedMoney&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// can be written as&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;owedMoney&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code is less verbose, as it now implicitly returns the value that sum is bound to, and there are no curly braces. There is another difference between the arrow function and a function expression, and that is regarding the keyword &lt;a href=""&gt;this&lt;/a&gt;. We will talk about it more once we get to Chapter 6 (can't wait).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-arguments"&gt;
  &lt;/a&gt;
  Optional Arguments
&lt;/h3&gt;

&lt;p&gt;The beauty of JavaScript is that it's quite lenient in what you can do (compared to other languages).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I have no args&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// I have no args&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No errors! What happens here is that JavaScript will ignore all these arguments if they're not being used. Simple. Even if you specified the arguments, and didn't provide any parameters, JavaScript will still not error out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 19 undefined undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript assigns missing parameters to &lt;code&gt;undefined&lt;/code&gt; (similar to when you declare &lt;code&gt;let x;&lt;/code&gt;). It also dismisses any parameters provided if there's no explicit use for them. As you can tell, this is not so beautiful. The downside here is that you can accidentally pass the wrong number of arguments, or none at all, and you might not realise that you have a bug.&lt;/p&gt;

&lt;p&gt;One way to assign a value to an argument even when it's not passed is to use optional arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 22 99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this is not the ultimate solution as it will only assign the parameters in order. So if you don't pass anything in the second argument, &lt;code&gt;person2&lt;/code&gt; will always default to 99. That's why it's common to see code like this (albeit this is very contrived).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions-and-side-effects"&gt;
  &lt;/a&gt;
  Functions and Side Effects
&lt;/h3&gt;

&lt;p&gt;As we've seen, functions can be split into two types. Functions that execute other functions or side effects, and functions that have return values. At times, you will have functions that do both. Each have their own use cases, and their own advantages. Functions with return values will almost always be called more often, since we rely on the values returned to execute more code.&lt;/p&gt;

&lt;p&gt;There are &lt;code&gt;pure&lt;/code&gt; functions, that have the pleasure of always being reliable. The &lt;em&gt;purity&lt;/em&gt; comes from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;relying on global variables whose values might change&lt;/li&gt;
&lt;li&gt;always returning/producing the same value&lt;/li&gt;
&lt;li&gt;can easily be replaced with a simple value:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;return5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;return5&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They are easily testable, making unit tests a breeze to write. They usually are quick to understand, as you don't need to scour other parts of the codebase to see what's being called. In essence, they're great. Yet, that ease comes with a bit of difficulty. Whilst you can write primarily pure functions, you'll realise quickly that some side effects are needed. So unless you're a total purist who despises side effects, I'd say it's fine to have a mixture of both. Like the author says:&lt;/p&gt;

&lt;p&gt;"There'd be no way to write a pure version of console.log, for example, and console.log is good to have."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;So, functions. A brilliant addition to our JavaScript tool-belt that allows us to manage multiple kinds of scope, separating code logic, not repeating ourselves, and understanding side effects. The chapter gave us a lot of information, and I think it's an important fundamental to really grasp. The author also brings up concepts like the Call Stack, and Recursion. I decided not to include that in this chapter as I felt it deserved a separate &lt;code&gt;snack-esque&lt;/code&gt; post. You can read more about it on my website, although the blog post is still "growing."&lt;/p&gt;

&lt;p&gt;Thanks for reading! The next chapter will be about some rather essential data structures, &lt;a href="https://eloquentjavascript.net/04_data.html"&gt;Objects and Arrays&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you'd like to attempt the exercises for the chapter, you can find them &lt;a href="https://eloquentjavascript.net/03_functions.html#h_TcUD2vzyMe"&gt;at the bottom of the chapter&lt;/a&gt;. Let me know how you get on. I definitely recommend going through them, to help solidify your knowledge.&lt;/p&gt;

</description>
      <category>bookclub</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Mobile Payments with Expo &amp; Stripe</title>
      <author>Thor 雷神</author>
      <pubDate>Tue, 10 Aug 2021 16:04:44 +0000</pubDate>
      <link>https://dev.to/stripe/mobile-payments-with-expo-stripe-1gc2</link>
      <guid>https://dev.to/stripe/mobile-payments-with-expo-stripe-1gc2</guid>
      <description>&lt;p&gt;React Native is an important framework for indie hackers, startups, and established businesses to build and ship native mobile experiences quickly to a large user base. At Stripe, we have maintained both iOS and Android SDKs and are now enabling new experiences for developers building on React Native.&lt;/p&gt;

&lt;p&gt;To best support React Native developers, we're thrilled to work with &lt;a href="https://expo.dev/"&gt;Expo.dev&lt;/a&gt;, the popular framework and platform for building universal React Native applications. With Expo's tools and &lt;code&gt;stripe-react-native&lt;/code&gt;, it's never been easier to build secure and delightful mobile experiences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-the-developer-experience"&gt;
  &lt;/a&gt;
  Improving the developer experience
&lt;/h2&gt;

&lt;p&gt;In building the &lt;a href="https://github.com/stripe/stripe-react-native"&gt;stripe-react-native&lt;/a&gt; library with Expo Go support, our goal is to enable developers to create intuitive applications using tools that just work out-of-the-box. In addition, developers also want the ability to add customization as needed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;To get up and running with Expo and Stripe, follow the docs reference: &lt;a href="https://docs.expo.dev/versions/latest/sdk/stripe/"&gt;https://docs.expo.dev/versions/latest/sdk/stripe/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existing developers using &lt;code&gt;expo-stripe-payments&lt;/code&gt; should follow this migration guide to get up and running with &lt;code&gt;@stripe/stripe-react-native&lt;/code&gt;: &lt;a href="https://github.com/expo/fyi/blob/master/payments-migration-guide.md#how-to-migrate-from-expo-payments-stripe-to-the-new-stripestripe-react-native-library"&gt;Read on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;Expo is working to make &lt;em&gt;all&lt;/em&gt; React Native development as fast and friendly as it is to work in the classic managed workflow with Expo Go, while at the same time allowing you to use any custom native code you'd like. &lt;/p&gt;

&lt;p&gt;Here are some of the new features we're planning to implement for Stripe React Native:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/stripe/stripe-react-native/issues/9"&gt;Standalone Google Pay support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stripe/stripe-react-native/issues/52"&gt;WeChatPay app-to-app redirect support,&lt;/a&gt; which is the most convenient checkout experience for over 800 million customers in China&lt;/li&gt;
&lt;li&gt;Investigating the demand for a separate React Native SDK to enable Stripe Terminal in-person payment experiences. If you’re interested in this, please comment or leave a thumbs up &lt;a href="https://github.com/stripe/stripe-react-native/issues/95"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to the Expo team for working with us and to the React Native developer community for the many PR contributions and invaluable feedback! We’d love for you to test out the new SDK and submit feedback and issues on GitHub, and if you want to learn more about the inner workings of the SDK tune in for our talk at &lt;a href="https://www.react-native.eu/"&gt;https://www.react-native.eu/&lt;/a&gt; and watch our developer videos on &lt;a href="https://youtube.com/stripedevelopers"&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you'd like to try out the new Stripe React Native module, check out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.expo.io/versions/latest/sdk/stripe/"&gt;the Expo docs page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stripe/stripe-react-native"&gt;Stripe's GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=DZlAET7Tgx4"&gt;this excellent YouTube video that walks through integrating Stripe in your Expo app&lt;/a&gt; by &lt;a href="https://twitter.com/nathvarun"&gt;Varun Nath&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>reactnative</category>
      <category>expo</category>
      <category>mobile</category>
      <category>payments</category>
    </item>
    <item>
      <title>VS Code - How many extensions is too much?</title>
      <author>Rob OLeary</author>
      <pubDate>Tue, 10 Aug 2021 16:04:35 +0000</pubDate>
      <link>https://dev.to/robole/vs-code-the-perfect-number-of-extensions-is-25ic</link>
      <guid>https://dev.to/robole/vs-code-the-perfect-number-of-extensions-is-25ic</guid>
      <description>&lt;p&gt;VS Code is a (relatively) lightweight editor with a core set of features. It is up to the user to extend the editor to their particular needs through extensions. In fact, many core features are written as extensions. You can see the builtin extensions by searching with &lt;code&gt;@builtin&lt;/code&gt; in the extensions sidebar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GnEYKFQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz0krjzpb6wfdr9hv49u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnEYKFQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz0krjzpb6wfdr9hv49u.png" alt="builtin extension list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People have contrasting attitudes to extensions. Some people have a long list of extensions they use and rhapsodize about "must-use" extensions. Other people refrain from using many extensions because they want to avoid "bloat". Other people might be somewhere between these 2 attitudes. Other people will tell you to use Vim!  😉&lt;/p&gt;

&lt;p&gt;The thing is you don't need to belong to a particular camp. If you understand a bit more about VS Code, you can be more pragmatic, and do what suits you.&lt;/p&gt;

&lt;p&gt;Central to this is the recognition that at one time, only a portion of your extensions are loaded. As you see above extensions such as CSS Language Features and Emmet are builtin to VS Code, would you expect them to be loaded always?&lt;/p&gt;

&lt;p&gt;I wouldn't, and they aren't! We will explain more on this in the next section.&lt;/p&gt;

&lt;p&gt;Also, you should recognise what your perceived performance of VS Code is. It is based on the initial time it takes to load the editor and become active, and how long it takes you to do certain actions. This is affected by what extensions are loaded for your typical project, when they are loaded, and if they are well behaved (well written).&lt;/p&gt;

&lt;p&gt;I will show you how you can see what extensions are loaded, and how extensions affects performance generally. VS Code has added some visual cues to the UI to make this easier recently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-are-extensions-loaded"&gt;
  &lt;/a&gt;
  When are extensions loaded?
&lt;/h2&gt;

&lt;p&gt;Extensions are conditionally loaded based on their &lt;a href="https://code.visualstudio.com/api/references/activation-events"&gt;Activation Events&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the common activation events are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; (Startup event): An extension is loaded when VS Code starts up. These extensions will always be active. This impacts the startup time of VS Code, so these should be reserved for critical extensions. You don't want a tonne of these, or the startup time will begin to suck!&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onStartupFinished&lt;/code&gt; event: An extension is  loaded sometime after VS Code starts up. This is like the &lt;code&gt;*&lt;/code&gt; activation event, but it will not slow down VS Code's startup.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onLanguage&lt;/code&gt; event: The extension will be loaded whenever a file of a certain language is opened.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An extension can be loaded based on a collection of activation events. When the activation events are no longer met for an extension, the extension is unloaded.&lt;/p&gt;

&lt;p&gt;To find out the activations events for an extension, you can look at the extension details in the extensions sidebar. They are shown on the "Feature Contributions" tab. It may be right at the bottom, as per screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y15fqwOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2qvzdaoi1viepwn2mq0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y15fqwOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2qvzdaoi1viepwn2mq0.png" alt="activation events show in Feature Contributions tab for ESLint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generally, you will find that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Critical and frequently used extensions are loaded on startup e.g. Git.&lt;/li&gt;
&lt;li&gt;Language-specific extensions use the &lt;code&gt;onLanguage&lt;/code&gt; event e.g. HTML Language Features, Emmet. If you have a HTML file open, then HTML Language Features and Emmet are loaded.&lt;/li&gt;
&lt;li&gt;And more niche, less frequently used extensions tend to use the &lt;code&gt;onCommand&lt;/code&gt; event more often e.g. Gulp support for VS Code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You hope that the author of extension doesn't take liberties and always load their extension!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-check-which-extensions-are-loaded"&gt;
  &lt;/a&gt;
  How do I check which extensions are loaded?
&lt;/h2&gt;

&lt;p&gt;You can see a full list by running the command &lt;code&gt;Developer: Show Running Extensions&lt;/code&gt; to get the basic stats about the running extensions.&lt;/p&gt;

&lt;p&gt;You can also quickly see which extensions have been loaded in the extensions sidebar. If an extension was loaded, you will see a loading time next to its name (see yellow highlight). You can see in the screenshot below that the extensions, ESLint and Format Code Action, have been loaded for my project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O-fbpozE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfjhc3ehckx2d2jclaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-fbpozE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfjhc3ehckx2d2jclaz.png" alt="activation time show in extensions sidebar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By clicking on the extension, you also see this info in the "Runtime Status" tab also (see second yellow highlight).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-review-performance"&gt;
  &lt;/a&gt;
  How do I review performance?
&lt;/h2&gt;

&lt;p&gt;I think the best way to see where you are is to load VS Code without any extensions from the command-line with &lt;code&gt;code my-project --disable-extensions&lt;/code&gt;, and then compare to open it with all your extensions &lt;code&gt;code my-project&lt;/code&gt;. Open some files in your workspace to ensure you get a realistic impression.&lt;/p&gt;

&lt;p&gt;Is there a big difference? If there is, review your extensions.&lt;/p&gt;

&lt;p&gt;You can see the currently running extensions by running the command &lt;code&gt;Developer: Show Running Extensions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Sn4Cq1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i7zusm02afxz0m62mpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Sn4Cq1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i7zusm02afxz0m62mpc.png" alt="view of running extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote a more detailed article for FreeCodeCamp on this topic, &lt;a href="https://www.freecodecamp.org/news/optimize-vscode-performance-best-extensions/"&gt;VS Code Performance – How to Optimize Visual Studio Code and Choose the "Best" Extensions&lt;/a&gt;, you can give it a read if you want to know more.&lt;/p&gt;

&lt;p&gt;My own investigation led me to remove a couple of extensions that had an activation event of &lt;code&gt;*&lt;/code&gt; and that were not critical for me. I removed a couple of extensions with poor performance e.g. Live Server.&lt;/p&gt;

&lt;p&gt;Also, keep in mind that extensions that are bundled can be much more performant, so favour extensions that are bundled. Suggest it to the maintainers of the extension if they are not doing this.&lt;/p&gt;

&lt;p&gt;I took an the extra step of writing a few of my own extensions. I found &lt;a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"&gt;Markdown All in One&lt;/a&gt; was quite slow. It loads in 263ms, and it has a &lt;em&gt;lot&lt;/em&gt; of features that I don't use. So, I wrote 2 smaller extensions to meet my needs more specifically: &lt;a href="https://marketplace.visualstudio.com/items?itemName=robole.marky-edit"&gt;Marky Edit&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=robole.marky-dynamic"&gt;Marky Dynamic&lt;/a&gt;. They both load in approximately 5ms!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yqhWF0iS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u33gj4j2ra2e2ywq42q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yqhWF0iS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u33gj4j2ra2e2ywq42q.png" alt="activation time of marky dynamic and marky edit in running extensions view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You shouldn't be overly concerned with the number of extensions you have installed. This is the wrong way to think about it. The important thing is to recognize the impact an extension can have on initial startup time of VS Code, and how an extension behaves on a typical project for you. When you install an extension, do a quick review of the activation events of the extension, and see how it performs generally. You won't go too far wrong if you do this habitually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-attribution"&gt;
  &lt;/a&gt;
  Image Attribution
&lt;/h2&gt;

&lt;p&gt;Cover image source: &lt;a href="http://getdrawings.com/goldilocks-and-the-three-bears-clipart"&gt;Goldilocks And The Three Bears&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>performance</category>
    </item>
    <item>
      <title>Dealing with Environment Variables in Flask</title>
      <author>kubona Martin Yafesi</author>
      <pubDate>Tue, 10 Aug 2021 16:00:05 +0000</pubDate>
      <link>https://dev.to/kubona_my/dealing-with-environment-variables-in-flask-o1</link>
      <guid>https://dev.to/kubona_my/dealing-with-environment-variables-in-flask-o1</guid>
      <description>&lt;p&gt;Welcome to yet another article. Thanks for being a dedicated reader. More knowledge unto you, more skills learnt, and a better you. Before we begin on today's article, we will just have a brief recap of what we have learned over the course of time together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dKmsNTBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fe3c7avfr87u9k26n8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dKmsNTBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fe3c7avfr87u9k26n8a.png" alt="recap-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-python"&gt;
  &lt;/a&gt;
  What is Python?
&lt;/h2&gt;

&lt;p&gt;Python is a widely-used, interpreted, object-oriented, and high-level programming language with dynamic semantics, used for general-purpose programming.&lt;br&gt;
It was created by Guido van Rossum as a 'hobby' programming project. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-do-we-love-python"&gt;
  &lt;/a&gt;
  Why do we love Python?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Because it is an easy and intuitive language;&lt;/li&gt;
&lt;li&gt;Open source programming language. As a result, everyone may contribute to its growth;&lt;/li&gt;
&lt;li&gt;Code that is as simple to comprehend as plain English;&lt;/li&gt;
&lt;li&gt;Appropriate for day-to-day work, with quick development times&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-is-python-used-for"&gt;
  &lt;/a&gt;
  What is Python used for?
&lt;/h2&gt;

&lt;p&gt;Python has its application domains in many areas and these are but not limited to;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Web Applications&lt;/li&gt;
&lt;li&gt;Data Science&lt;/li&gt;
&lt;li&gt;Mobile Applications&lt;/li&gt;
&lt;li&gt;Big Data&lt;/li&gt;
&lt;li&gt;Artificial Intelligence&lt;/li&gt;
&lt;li&gt;Automation &lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To have a more detailed Introduction to Python, please feel free to check out this resource. &lt;a href="https://dev.to/kubona_my/python-basics-pythons-101-dj2"&gt;Python Basics, Pythons 101!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once that article has been read, we have a look at some concepts in Python worth remembering. These may not be explained exhaustively for beginners but gives a refresher to intermediate and expert python programmers. Even beginners can relate, good news!!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h3&gt;

&lt;p&gt;Literals are data whose values are decided by the literal itself, which Python provides out of the box. &lt;/p&gt;

&lt;p&gt;Common literals in Python include;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numeric literals&lt;/li&gt;
&lt;li&gt;Strings literals&lt;/li&gt;
&lt;li&gt;Special literal None&lt;/li&gt;
&lt;li&gt;Boolean literals&lt;/li&gt;
&lt;li&gt;Collection literals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In simple terms, literals are the raw data that are assigned to variables or constants while programming.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#arithmetic-operations-in-python"&gt;
  &lt;/a&gt;
  Arithmetic operations in Python
&lt;/h3&gt;

&lt;p&gt;Python supports out of the box support for arithmetic operations. With it you can perform these operations using expressions and operators. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;A variable is a named location reserved to store values in the memory.&lt;/p&gt;

&lt;p&gt;Whenever you want to store results from operations, use a container called a &lt;em&gt;variable&lt;/em&gt; to store them.  When naming variables, make sure you follow the &lt;strong&gt;PEP Standards&lt;/strong&gt; defined here, &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8 --Style Guide for Python Code&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h3&gt;

&lt;p&gt;Comments can be used to add more information to your code. At runtime, they are removed. Human readers are addressed by the information left in source code. A comment in Python is a line of text that starts with &lt;code&gt;#&lt;/code&gt; for single line and &lt;code&gt;"""&lt;/code&gt; for multi-line comments&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;A function is a group of related statements that perform a given task. So whenever you call a function, those statements will perform that task, however many times you call the function.&lt;/p&gt;

&lt;p&gt;Functions help us as programmers to;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid code repetitions&lt;/li&gt;
&lt;li&gt;Have cleaner and readable code&lt;/li&gt;
&lt;li&gt;Decompose large problems into small chunks. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are 3 major types of functions these are;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In-built functions&lt;/li&gt;
&lt;li&gt;User defined functions&lt;/li&gt;
&lt;li&gt;Pre-Installed module functions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For a more detailed guide on functions, please check out this resource. &lt;a href="https://dev.to/kubona_my/introduction-to-python-functions-ije"&gt;Introduction to Python Functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ntr0Hva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms0xa64zooklrcvzywes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ntr0Hva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms0xa64zooklrcvzywes.png" alt="Recap-done-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great, welcome back from that recap about Python. Remember, the more you familiarize yourself with what Python is and how you use it, the better programmer you become at Python. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every expert was once a beginner.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#web-development-in-python"&gt;
  &lt;/a&gt;
  Web development In Python
&lt;/h2&gt;

&lt;p&gt;So one of the application domains of Python is &lt;strong&gt;Web development&lt;/strong&gt;. You can use it to make powerful and fast web applications. In so making, a number of tools and frameworks have been developed to aid web development in Python. &lt;/p&gt;

&lt;p&gt;Some of these are but not limited to;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Pyramid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;em&gt;The picture below shows a list of web frameworks using Python&lt;/em&gt;) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KcgWKoes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4zmujxd51z3ne0de1e8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcgWKoes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4zmujxd51z3ne0de1e8.jpg" alt="web-frameworks-python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our focus will be on the Flask framework. For an Introduction to FLASK, please checkout their official documentation.&lt;br&gt;
 &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Official Flask Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for a quick overview on how to get started with Python Web development, consider looking into, &lt;a href="https://dev.to/grayhat/getting-started-with-python-web-development-1jl9"&gt;Getting Started with Python Web Development using FLASK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have mastered the basic overview of flask, we will dive into the topic of the day. Phew!!! What an introduction !!! Hope you are enjoying the article. Let us refocus now. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jyzOJ2_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvuk6gt4q5y404rw6lfs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jyzOJ2_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvuk6gt4q5y404rw6lfs.png" alt="refocus-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given a minimal Flask application, such as;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello World, dear Friend!'&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/page/&amp;lt;int:page_num&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;h1&amp;gt;Yoo.. It is your page &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;page_num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/h1&amp;gt;'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The minimal application can be run following the steps below, &lt;em&gt;(as you might be familiar)&lt;/em&gt;, &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Bash&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app.py
flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other scenarios you might want to specify the host and port number, environment, debug mode etc.  for which you want your flask application to run, you would have to include all that into the &lt;code&gt;export command&lt;/code&gt; above. &lt;br&gt;
That can become tedious over time as you develop your cool project, pressing up arrow key many times to retrace the export command (&lt;em&gt;bash users, you know what I mean&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;Our goal is to save some time and when running our flask application, we simply do; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Bash&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variables that we add to the &lt;code&gt;export command&lt;/code&gt; are known as &lt;strong&gt;environment variables&lt;/strong&gt;. These variables are used by your flask application to serve your project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples-of-environment-variables-include"&gt;
  &lt;/a&gt;
  Examples of environment variables include;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;FLASK_ENV&lt;/li&gt;
&lt;li&gt;FLASK_DEBUG.&lt;/li&gt;
&lt;li&gt;FLASK_RUN_EXTRA_FILES &lt;/li&gt;
&lt;li&gt;FLASK_RUN_HOST&lt;/li&gt;
&lt;li&gt;FLASK_RUN_PORT &lt;/li&gt;
&lt;li&gt;FLASK_RUN_CERT&lt;/li&gt;
&lt;li&gt;FLASK_RUN_KEY &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are default flask environment variables defined by the framework. If not specified, they use their default values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-defined-variables"&gt;
  &lt;/a&gt;
  User defined variables
&lt;/h3&gt;

&lt;p&gt;Also, if you wanted to connect your application to a database, you would have to hard code your credentials into your python code, &lt;strong&gt;which is not recommended&lt;/strong&gt;. &lt;br&gt;
A simple example would be;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"your_username"&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MYSQL_HOST&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MYSQL_DB&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"my_appdb"&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"your_password"&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;That kind of hard coding credentials is not ideal if you are working on a large project with other people&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Incase you do not follow &lt;em&gt;Strict password policies&lt;/em&gt; and use one password everywhere....&lt;strong&gt;You are hacked!!!&lt;/strong&gt;. You just shared your password with the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-do-we-deal-with-the-flask-environment-variables"&gt;
  &lt;/a&gt;
  So how do we deal with the &lt;strong&gt;flask environment variables&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;We are going to see how to load flask environment variables automatically. You are here because you're tired of setting environment variables every time you are running your flask app? Variables like FLASK_APP or FLASK_ENV using &lt;code&gt;export command&lt;/code&gt;. Am going to help you do just that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-pythondotenv"&gt;
  &lt;/a&gt;
  Step 1: Install python-dotenv
&lt;/h3&gt;

&lt;p&gt;In your virtual environment, run;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;python-dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I emphasize, always use virtual environments on your system to prevent corrupting your main Python installation. In case you want a recap on how to create virtual environments, refer to this guide. &lt;a href="https://docs.python.org/3/library/venv.html"&gt;Creation of Virtual Environments&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-raw-env-endraw-and-raw-flaskenv-endraw-files-in-your-project-root-folder"&gt;
  &lt;/a&gt;
  Step 2: Create &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;.flaskenv&lt;/code&gt; files in your project root folder
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;On Bash&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .env
&lt;span class="nb"&gt;touch&lt;/span&gt; .flaskenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-place-your-flask-environment-variables-in-flaskenv"&gt;
  &lt;/a&gt;
  Step 3: Place your flask environment variables in .flaskenv
&lt;/h3&gt;

&lt;p&gt;Depending on your use case, this will guide you on what to include.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In .flaskenv&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;//this is the .flaskenv file
FLASK_ENV - Controls the environment.
FLASK_DEBUG - Enables debug mode.
FLASK_RUN_EXTRA_FILES - A list of files that will be watched by the re-loader &lt;span class="k"&gt;in &lt;/span&gt;addition to the Python modules.
FLASK_RUN_HOST - The host you want to &lt;span class="nb"&gt;bind &lt;/span&gt;your app to.
FLASK_RUN_PORT - The port you want to use.
FLASK_RUN_CERT - A certificate file &lt;span class="k"&gt;for &lt;/span&gt;so your app can be run with HTTPS.
FLASK_RUN_KEY - The key file &lt;span class="k"&gt;for &lt;/span&gt;your cert.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for example; &lt;code&gt;FLASK_APP=app.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Boom, great work done. To run your app now, Simply do run;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68w7Bd0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5nayohyahnarf80y82f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68w7Bd0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5nayohyahnarf80y82f.png" alt="flask-run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was fast,.... right?? Yes so you can now focus on programming instead of looking for which flask environment variable is missing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-about-mysecretlydefined-environment-variables"&gt;
  &lt;/a&gt;
  So how about &lt;strong&gt;my-secretly-defined environment variables&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;Yes getting to that now. Follow this guide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-place-raw-yoursecretlydefined-environment-variables-endraw-in-raw-env-endraw-"&gt;
  &lt;/a&gt;
  Step 1. Place &lt;code&gt;your-secretly-defined environment variables&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These can include;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login credentials to the database&lt;/li&gt;
&lt;li&gt;API keys&lt;/li&gt;
&lt;li&gt;SECRET_KEY
&lt;em&gt;(among others)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In .env&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;//This is the .env file
&lt;span class="nv"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root
&lt;span class="nv"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;my_mysql_password
&lt;span class="nv"&gt;MYSQL_DB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;userdb
&lt;span class="nv"&gt;MYSQL_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;localhost
&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;topsecretkey
&lt;span class="nv"&gt;API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;donotsharethisapikeywithanyone

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-create-a-settingspy-file"&gt;
  &lt;/a&gt;
  Step 2: Create a settings.py file
&lt;/h3&gt;

&lt;p&gt;(&lt;em&gt;Since these variables are not served automatically, we have to load them through this &lt;code&gt;settings.py&lt;/code&gt; file&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In settings.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;//This is the settings.py file

from os import environ
&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SECRET_KEY)
API_KEY=environ.get('&lt;/span&gt;API_KEY&lt;span class="s1"&gt;')
MYSQL_USER=environ.get('&lt;/span&gt;MYSQL_USER&lt;span class="s1"&gt;')
//add any more variables you have

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For consistency, it is good to keep the same variable name as the environment variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-the-configurations-to-our-app"&gt;
  &lt;/a&gt;
  Step 3: Add the configurations to our app
&lt;/h3&gt;

&lt;p&gt;In your &lt;code&gt;app.py&lt;/code&gt; , the file that has your flask object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pyfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'settings.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# loading all environment variables from settings.py
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what happens is that the settings.py will read the values you placed in your .env file and store them in variables as you defined them in settings.py.&lt;/p&gt;

&lt;p&gt;When you use the flask object's config method, together with the &lt;code&gt;from_pyfile&lt;/code&gt; sub-method, the app will have access to the secretly defined variables in a secure way.&lt;/p&gt;

&lt;p&gt;Run your app as before, and boom you can now serve the world with your cool project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  Bonus Tip:
&lt;/h3&gt;

&lt;p&gt;To avoid surbotaging your efforts to secure your credentials, when using a version control system such as &lt;strong&gt;git&lt;/strong&gt; , do not push the &lt;em&gt;.flaskenv&lt;/em&gt; and &lt;em&gt;.env&lt;/em&gt; files. You can use &lt;em&gt;.gitignore&lt;/em&gt; file to ignore them in your project directory. They remain on your local system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-was-the-article"&gt;
  &lt;/a&gt;
  How was the article?
&lt;/h2&gt;

&lt;p&gt;I love to learn with you dear reader. Share your feedback with me in the discussion section below. Are there better ways to do this?&lt;br&gt;
A great friend improves another, feel free to share &lt;br&gt;
I appreciate all the feedback in advance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/u3axz3PUbjJpQeysaP/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/u3axz3PUbjJpQeysaP/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>security</category>
      <category>environment</category>
    </item>
    <item>
      <title>Attacks on privacy. Why do we need PETs?</title>
      <author>Jack F.</author>
      <pubDate>Tue, 10 Aug 2021 15:26:13 +0000</pubDate>
      <link>https://dev.to/oblivious/attacks-on-privacy-why-do-we-need-pets-18an</link>
      <guid>https://dev.to/oblivious/attacks-on-privacy-why-do-we-need-pets-18an</guid>
      <description>&lt;p&gt;&lt;em&gt;In this post we are going to look at some examples of reconstruction attacks i.e. how from seemingly anonymous data, one can reveal most sensitive information about individuals.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s say you are analysing data. Maybe you are running some ML prediction algorithms, training your models, calculating different statistics, and sharing your outputs. It may seem that simply removing all the personally identifiable information such as names, addresses or telephone numbers should suffice to make sure that no private information is revealed after the analysis. That might even be sufficient to be considered anonymous data according to some privacy laws. If so, then surely you don’t need to be too worried, right?&lt;/p&gt;

&lt;p&gt;Perhaps instead you are aggregating data over many individuals so you don’t even think about any privacy issues. An extremely trivial example of how things might go wrong with aggregate statistics is revealing an average salary of say 100 employees and then publishing an average of 101 after a new employee has joined. This allows anyone with access to these aggregates to easily figure a salary of a new employee. Even though that might seem like an obvious thing one can easily avoid, it becomes much trickier when revealing a range of statistics and aggregates, in different contexts. Things get even more challenging when such information is combined with other data sources about the same individuals.&lt;/p&gt;

&lt;p&gt;If you don't follow a structured approach to data sharing, you've got a good chance of compromising the privacy of the data source. Many large companies and governments have made these mistakes, so let's talk about how you can avoid the same peril! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#few-data-points-suffice-to-identify-individuals"&gt;
  &lt;/a&gt;
  Few data points suffice to identify individuals
&lt;/h2&gt;

&lt;p&gt;Even if we think of ourselves as a needle in a haystack of 7.7bn people in the world, a range of studies has shown that very few data points suffice to uniquely or with high probability identify an individual. As an example, 4 spatiotemporal points taken from credit card metadata are sufficient to uniquely reidentify 90% of individuals [1]. &lt;/p&gt;

&lt;p&gt;Similarly, in another study that considered mobility data taken from mobile phone devices with a time resolution of 1h and the spatial resolution determined by the distance between antennas, only 4 randomly drawn points sufficed to identify 95% of individuals (and two randomly drawn points identified over 50%) [2]. The task is even easier for an attacker who cleverly uses non-uniform sampling e.g. by exploiting the fact that calls from an office at 2 am might provide more information about an individual than calls at 3 pm, when the office is crowded. Similar attacks can be performed by using other mobility data from geotagging used by social media platforms, smartphone apps, and others.&lt;/p&gt;

&lt;p&gt;It means that even when you completely remove addresses, account numbers, and other PII it is very easy to reidentify people from such a dataset. Almost all re-identification attacks make use of this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4qb0sqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgv479147qdml6p87c8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4qb0sqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgv479147qdml6p87c8j.png" alt="Taking a closer look."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, sensitive information can be compromised even if the identifiers are not unique. It is well known that 87% of Americans can be uniquely identified just from their gender, birthday, and ZIP code [3]. To prevent such attacks, the commonly used method is to group and coarsen the identifiers by reporting only the age brackets, giving only the first three digits of ZIP codes etc. resulting in quasi-identifiers. This is done in such a way as to guarantee k-anonymity. As a result, for any record and any set of quasi-identifiers there are at least k-1 other records with the same quasi-identifiers. It is a very common and natural way of trying to ensure privacy. Unfortunately, it can often fail in protecting sensitive information too. A straightforward example of that is the so-called homogeneity attack.&lt;/p&gt;

&lt;p&gt;Given a dataset of different medical conditions (clearly very sensitive information) for individuals, whose age, ZIP codes, and other identifiers have been coarsened in such a way as to ensure k-anonymity, it may still be possible to recover the sensitive information [4]. Simply all k individuals for a given set of quasi-identifiers can have the same medical conditions. Hence, if a neighbour knows your age, your ZIP code, and gender, it may well be that you fall in the category where all other k-1 individuals have the same condition as you. Basically, the situation arises whenever the sensitive information is not very diverse. The scarcity of data severely impacts k-anonymity. The effect becomes even more dominant for high-dimensional data with a large number of quasi-identifiers, when even ensuring k-anonymity becomes harder [5].&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The lesson from this is that inference attacks are often successful even when very few and coarse-grained data points are revealed.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linkage-attacks-connecting-information-from-different-sources"&gt;
  &lt;/a&gt;
  Linkage attacks - connecting information from different sources
&lt;/h2&gt;

&lt;p&gt;Information disclosed by one dataset might not be all the information publicly available about the individual. This may initially be obvious but implies very non-trivial attacks. By joining information from such a dataset with another one or some background information can allow for very successful inference attacks. Such background information might not even be sensitive. Background information that a particular medical condition is much more prevalent in a given age group or sex can increase the probability of identifying medical conditions for individuals in our previous example. Exploiting side information about individuals can lead to spectacular attacks. Arguably, one of the most famous is the one performed by Latanya Sweeney in 1997. A couple of years before that, Massachusetts Group Insurance Company had shared with researchers and sold to industry medical data that included performed medical procedures, prescribed medications, ethnicity but also people's gender, date of birth, and ZIP code. Governor Bill Weld assured that the data had been fully anonymised. Sweeney paid $20 for the Cambridge Massachusetts voter registration list, which also contained these 3 characteristics. Thus by cross-referencing the two databases, she identified Weld's entry in GIC and his medical records.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mqT65xbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u829dyhlf06cww4bei99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mqT65xbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u829dyhlf06cww4bei99.png" alt="Linkage attacks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another example comes from journalist Svea Eckert and data scientist Andreas Dewes. They set up a fake AI start-up, pretended to be needing some data for training their ML models and they did obtain a free database of browsing history for 3m German users with a long list of 9bn URLs and associated timestamps. All this from a data broker. Even though no other identifiers were available, they still managed to re-identify the browsing history of politicians, judges, and even their work colleagues. One way they could achieve it was by noticing that a Twitter’s user who visits Twitter's analytics page, leaves a trace of his or her username in the corresponding URL. Hence, by going to the corresponding Twitter profiles Eckert and Dewes could identify such individuals. Interestingly, they also found out about a police force’s undercover operation. The information about it was in Google Translate URLs, which contain the whole text one inputs to the translator.&lt;/p&gt;

&lt;p&gt;Even what might seem like fairly insensitive data can tell a lot about us. Netflix learned it the hard way when it shared the database with movie ratings made by its users for the Netflix Prize competition. They stripped off all the PII from the data, but as you probably know by now, it was still possible to identify some of the users. This was done by the research from the University of Texas, which linked Netflix’s dataset to IMDB [6]. In this way information about people’s political preferences and even their sexual orientation was compromised.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The main takeaway from this part is that linking information from different data sources can lead to severe privacy leakages. *&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#attacks-on-ml-models"&gt;
  &lt;/a&gt;
  Attacks on ML models
&lt;/h2&gt;

&lt;p&gt;All the examples so far were considered with attacks based on some publicly released data. However, one does not need to have direct access to such data to learn about sensitive information of individuals. Another example comes from attacks on machine learning models. It has been shown that that one can learn about statistical properties of trained datasets simply from parameters of trained machine learning models. Not only that, it is also possible to perform attacks given only black-box access to a model by using it to run predictions on input data. Researchers from Cornell Tech have shown that even models trained on MLaaS offerings of Google and Amazon can be open to membership inference attacks [7]. In this scenario, an attacker can say whether a given record was used as a training dataset.‌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-handle-this"&gt;
  &lt;/a&gt;
  How to handle this?
&lt;/h2&gt;

&lt;p&gt;‌&lt;br&gt;
In the current data economy, a vast of information is shared between companies, organisations, and individuals. Banning this is probably unfeasible and counterproductive in the long term. We believe that privacy-enhancing technologies need to employ in order to tackle the privacy challenges. Multi-party computation can allow for encryption during computation. &lt;/p&gt;

&lt;p&gt;Secure enclaves can ensure that data is processed only according to a pre-agreed specification. Differential privacy can be employed in training ML models, building synthetic data, and sharing aggregates with privacy guarantees. We will be writing more about all these different PETs.&lt;/p&gt;

&lt;p&gt;However, if you have encountered any such privacy challenges and you wish to run PETs in your environment, give us a shout!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] De Montjoye, Yves-Alexandre, Laura Radaelli, and Vivek Kumar Singh. "Unique in the shopping mall: On the reidentifiability of credit card metadata." Science 347.6221 (2015): 536-539.&lt;/p&gt;

&lt;p&gt;[2] De Montjoye, Yves-Alexandre, et al. "Unique in the crowd: The privacy bounds of human mobility." Scientific reports 3.1 (2013): 1-5.&lt;/p&gt;

&lt;p&gt;[3] Sweeney, Latanya. "k-anonymity: A model for protecting privacy." International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems 10.05 (2002): 557-570.&lt;/p&gt;

&lt;p&gt;[4] Machanavajjhala, Ashwin, et al. "l-diversity: Privacy beyond k-anonymity." ACM Transactions on Knowledge Discovery from Data (TKDD) 1.1 (2007): 3-es.&lt;/p&gt;

&lt;p&gt;[5] Shokri, Reza, et al. "Membership inference attacks against machine learning models." 2017 IEEE Symposium on Security and Privacy (SP). IEEE, 2017.&lt;/p&gt;

&lt;p&gt;[6] Narayanan, Arvind, and Vitaly Shmatikov. "Robust de-anonymization of large sparse datasets." 2008 IEEE Symposium on Security and Privacy (sp 2008). IEEE, 2008.&lt;/p&gt;

&lt;p&gt;[7] Aggarwal, Charu C. "On k-anonymity and the curse of dimensionality." VLDB. Vol. 5. 2005.&lt;/p&gt;

</description>
      <category>security</category>
      <category>privacy</category>
      <category>machinelearning</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Destructuring en Javascript</title>
      <author>AngelO </author>
      <pubDate>Tue, 10 Aug 2021 15:22:21 +0000</pubDate>
      <link>https://dev.to/angeluchh/destructuting-en-javascript-57j9</link>
      <guid>https://dev.to/angeluchh/destructuting-en-javascript-57j9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYF4Mnh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bp1sxpzp8tlp62z4aex.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYF4Mnh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bp1sxpzp8tlp62z4aex.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definici%C3%B3n"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Definición.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Destructuring&lt;/em&gt;, o destructuración, es una nueva característica de ES6 para Javascript que nos da la posibilidad de poder tomar los datos de objetos o arrays directamente y de manera múltiple, para extraerlos a variables o constantes. Lo cuál la desestructuración nos permite escribir código limpio y legible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#d%C3%B3nde-se-puede-aplicar"&gt;
  &lt;/a&gt;
  &lt;strong&gt;¿Dónde se puede aplicar?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;El &lt;em&gt;destructuring&lt;/em&gt; se puede aplicar en diferentes sitios, suelen ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retornos de funciones&lt;/li&gt;
&lt;li&gt;Parámetros en las funciones&lt;/li&gt;
&lt;li&gt;Funciones de trabajo con arrays&lt;/li&gt;
&lt;li&gt;Destructuring múltiple&lt;/li&gt;
&lt;li&gt;Importación de objetos&lt;/li&gt;
&lt;li&gt;Destructuring en React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;"Desestructurar" no significa "destructivo".&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se llama "asignación de desestructuración" porque se "desestructura" copiando elementos en variables. Pero la matriz en sí no se modifica.&lt;/p&gt;

&lt;p&gt;Es solo una forma más corta y limpia de escribir y/o entender el código.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sintaxis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Sintaxis&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;La sintaxis del &lt;strong&gt;&lt;em&gt;destructuring&lt;/em&gt;&lt;/strong&gt; es muy sencilla. Por un lado tenemos el objeto que queremos destructurar. Para extraer sus propiedades usamos las &lt;strong&gt;"llaves"&lt;/strong&gt; &lt;strong&gt;{ }&lt;/strong&gt;, metiendo dentro de ellas sus respectivos nombres y con esto tenemos nuevas variables que contienen estas propiedades:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pq7MBdf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/bdcNks1S/destructuring-javascript-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pq7MBdf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/bdcNks1S/destructuring-javascript-01.png" alt="destructuring-javascript-01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si queremos poner nombres específicos para estas nuevas variables bastará con poner &lt;strong&gt;"dos puntos"&lt;/strong&gt; &lt;strong&gt;:&lt;/strong&gt;, seguido del nuevo nombre de variable que queramos asignar en las propiedades destructuradas:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPWEErfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/XYgdNb0k/destructuring-javascript-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPWEErfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/XYgdNb0k/destructuring-javascript-02.png" alt="destructuring-javascript-02"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desestructuraci%C3%B3n-de-objetos-object-destructuring"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Desestructuración de objetos (Object destructuring)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;La asignación de &lt;em&gt;destructuring&lt;/em&gt; también funciona con objetos, como lo vimos en las anteriores imágenes.&lt;/p&gt;

&lt;p&gt;En la siguiente imagen observamos las propiedades &lt;code&gt;options.title&lt;/code&gt;, &lt;code&gt;options.width&lt;/code&gt; y &lt;code&gt;options.height&lt;/code&gt; que se asignan a las variables correspondientes.&lt;/p&gt;

&lt;p&gt;Por ejemplo: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tzSm5Dgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/J79bPxqZ/destructuring-javascript-03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tzSm5Dgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/J79bPxqZ/destructuring-javascript-03.png" alt="destructuring-javascript-03"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El orden no importa. Esto también funciona:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--660sgRuc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/hv7tX9Qq/destructuring-javascript-04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--660sgRuc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/hv7tX9Qq/destructuring-javascript-04.png" alt="destructuring-javascript-04"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si tenemos un objeto complejo con muchas propiedades, podemos extraer solo lo que necesitamos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lEv74q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/c1KRR2Qd/destructuring-javascript-05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lEv74q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/c1KRR2Qd/destructuring-javascript-05.png" alt="destructuring-javascript-05"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;El patrón de descanso "..."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¿Qué pasa si el objeto tiene más propiedades de las variables que tenemos? ¿Podemos tomar un poco y luego asignar el "resto" a alguna parte?&lt;/p&gt;

&lt;p&gt;Podemos usar el patrón de descanso, (también se puede realizar en matrices). No es compatible con algunos navegadores más antiguos (IE, use Babel para rellenarlo), pero funciona en los modernos.&lt;/p&gt;

&lt;p&gt;Un ejemplo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j90m3Z9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/T3xnXPBP/destructuring-javascript-06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j90m3Z9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/T3xnXPBP/destructuring-javascript-06.png" alt="destructuring-javascript-06"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desestructuraci%C3%B3n-de-arreglos-arrays-destructuring"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Desestructuración de arreglos (Arrays destructuring)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Acceder a los elementos de la matriz manualmente&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En la siguiente imagen se muestra un ejemplo para acceder manualmente a los elementos de la matriz:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQ1pNJZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Jh4JG2rV/destructuring-javascript-07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQ1pNJZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Jh4JG2rV/destructuring-javascript-07.png" alt="destructuring-javascript-07"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La mayoría de las veces, el tamaño de una matriz es grande y usamos un bucle para recorrer cada elemento de las matrices. A veces, es posible que tengamos arreglos cortos. Si el tamaño de la matriz es muy corto, está bien acceder a los elementos manualmente como se muestra arriba, pero a continuación veremos una mejor manera de acceder al elemento de la matriz que se está desestructurando.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acceder a elementos de la matriz mediante desestructuración&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En la siguiente imagen se muestra un ejemplo para acceder mediante &lt;em&gt;destructuring&lt;/em&gt; a los elementos de la matriz: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OezDKumu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ncBq5mR5/destructuring-javascript-08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OezDKumu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ncBq5mR5/destructuring-javascript-08.png" alt="destructuring-javascript-08"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Durante el &lt;em&gt;destructuring&lt;/em&gt;, cada variable debe coincidir con el índice del elemento deseado en la matriz. Por ejemplo, la variable &lt;strong&gt;mex&lt;/strong&gt; coincide con el índice 0 y la variable &lt;strong&gt;col&lt;/strong&gt; coincide con el índice 2. ¿Cuál sería el valor de &lt;strong&gt;arg&lt;/strong&gt; si tiene una variable &lt;strong&gt;arg&lt;/strong&gt; después de &lt;strong&gt;col&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPV-OELj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/HLZM59nJ/destructuring-javascript-09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPV-OELj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/HLZM59nJ/destructuring-javascript-09.png" alt="destructuring-javascript-09"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si intento la tarea anterior, confirmó que el valor no está definido. En realidad, podemos pasar un valor predeterminado a la variable, y si el valor de ese índice específico no está definido, se utilizará el valor predeterminado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d9a3_4nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/76jTtPgw/destructuring-javascript-10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d9a3_4nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/76jTtPgw/destructuring-javascript-10.png" alt="destructuring-javascript-10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desestructuraci%C3%B3n-anidada-nested-destructuring"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Desestructuración anidada (Nested destructuring)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Si un objeto o una matriz contiene otros objetos y matrices anidados, podemos usar patrones del lado izquierdo más complejos para extraer porciones más profundas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5cejK2sZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/RhfJkrRf/destructuring-javascript-11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5cejK2sZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/RhfJkrRf/destructuring-javascript-11.png" alt="destructuring-javascript-11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Saltarse un objeto durante la desestructuración&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Durante el &lt;em&gt;destructuring&lt;/em&gt;, si no estamos interesados ​​en todos los elementos, podemos omitir un elemento determinado poniendo una coma en ese índice. Saquemos solo México, Colombia y Brasil de la matriz. A continuación en la siguiente imagen se puede observar con más claridad:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jt2R-Gfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/B6jKCPPm/destructuring-javascript-12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jt2R-Gfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/B6jKCPPm/destructuring-javascript-12.png" alt="destructuring-javascript-12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obtener el resto de la matriz usando el operador de propagación usamos tres puntos (...) para extender u obtener el resto de una matriz durante el &lt;em&gt;destructuring&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDkePOm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/7Y3TXkbr/destructuring-javascript-13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDkePOm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/7Y3TXkbr/destructuring-javascript-13.png" alt="destructuring-javascript-13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desestructuraci%C3%B3n-en-react-react-destructuring"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Desestructuración en React (React Destructuring)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destructuring&lt;/em&gt;&lt;/strong&gt; es una técnica usada mucho en los componentes React ya que les da mucha más legibilidad. Las &lt;strong&gt;&lt;em&gt;props&lt;/em&gt;&lt;/strong&gt; suelen ser un blanco fácil para poder realizar el destructuring siempre que se use más de una.&lt;/p&gt;

&lt;p&gt;Si comparamos las siguiente imágenes con o sin destructuring podemos ver la diferencia y legibilidad entre ellos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sin &lt;em&gt;destructuring&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cTNw7RM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/kX3bx4Jy/destructuring-javascript-14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cTNw7RM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/kX3bx4Jy/destructuring-javascript-14.png" alt="destructuring-javascript-14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Con &lt;em&gt;destructuring&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cSUdPtW3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ryt40Wkm/destructuring-javascript-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cSUdPtW3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ryt40Wkm/destructuring-javascript-15.png" alt="destructuring-javascript-15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusión&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destructuring&lt;/em&gt;&lt;/strong&gt; es una nueva característica muy potente del lenguaje que nos permite escribir código más legible, aunque por mi experiencia, como todo no hay que abusar de ella. En este artículo hablamos de pequeños ejemplos, pero seguramente si lo que vas a destructurar solamente tiene una propiedad, la mejor opción es no hacerlo, debido a que el &lt;em&gt;Destructuring&lt;/em&gt; agarra mucha fuerza sobre todo cuando se usan varias propiedades de un mismo objeto que se pueden destructurar, ya que al hacer el desglose de las propiedades todo suele quedar más limpio y claro. Te lo recomiendo, al leer un código con &lt;em&gt;destructuring&lt;/em&gt; lo vas agradecer.&lt;/p&gt;

&lt;p&gt;Sígueme:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/angeluchh"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>What is Good Project As Frontend Developer</title>
      <author>Nikhil Bobade </author>
      <pubDate>Tue, 10 Aug 2021 15:03:49 +0000</pubDate>
      <link>https://dev.to/nikhil27b/what-is-good-project-as-frontend-developer-4k9l</link>
      <guid>https://dev.to/nikhil27b/what-is-good-project-as-frontend-developer-4k9l</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-is-good-project-"&gt;
  &lt;/a&gt;
  What is Good Project :
&lt;/h4&gt;

&lt;p&gt;Hey guys today I talk about the good project in this post. A good project create a important role in your placement or job. &lt;/p&gt;

&lt;p&gt;A Good project is really helpful to improve your programming skills also you learn lot with that types of projects almost your all quarries are solved with good projects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-bad-practice-"&gt;
  &lt;/a&gt;
  What is bad practice :
&lt;/h4&gt;

&lt;p&gt;A single page website or static website with fixed content  for e.g. Single Page Business Website , Single Page portfolio website or no other use of any rest api in your project.&lt;/p&gt;

&lt;p&gt;also a website builds with drag or drop platform or WordPress website this are all bad project for the your resume.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-good-practice-"&gt;
  &lt;/a&gt;
  What is good practice :
&lt;/h4&gt;

&lt;p&gt;We talk about bad practice but you can fixed that using this projects ideas  :) &lt;/p&gt;

&lt;p&gt;A Social media app , E-commerce App , Messaging app this are all the good projects you can be create your own version with this ideas or clone this website like WhatsApp clone website or Instagram clone website. &lt;/p&gt;

&lt;p&gt;Use apis with your project or also you can be try firebase or mongodb and maps api to your projects that create your project and resume strong.&lt;/p&gt;

&lt;p&gt;If you done this all then follow this step also please host your project makes live to use other also there are many free hosting companies like firebase or Heroku also keep your project open source there are really helpful for other too.d if are you reading till now then please like this post and follow for more.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you ....&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>I'm making a Retro Sci-Fi Series that teaches UI Design (Trailer)</title>
      <author>designcourse</author>
      <pubDate>Tue, 10 Aug 2021 14:46:42 +0000</pubDate>
      <link>https://dev.to/designcourse/i-m-making-a-retro-sci-fi-series-that-teaches-ui-design-trailer-3bj1</link>
      <guid>https://dev.to/designcourse/i-m-making-a-retro-sci-fi-series-that-teaches-ui-design-trailer-3bj1</guid>
      <description>&lt;p&gt;Hey all, I run the &lt;a href="https://youtube.com/designcourse"&gt;DesignCourse&lt;/a&gt; YouTube channel. Over there, I've taught millions of people UI/UX &amp;amp; Frontend dev over the last decade+.&lt;/p&gt;

&lt;p&gt;I've been thinking of ways to make learning more entertaining. Combine that with my other interests (music, snakes/reptiles, 80's aesthetic), and you get '&lt;strong&gt;The Boja&lt;/strong&gt;'. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Boja&lt;/strong&gt; takes place in the year 2082 with a fictional character (Jon Frok) played by myself, who's stationed in an unknown location and tasked with defeating an aggressive alien species by building an advanced user interface. The problem? Frok isn't a designer, &lt;em&gt;he's a soldier&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Over the next 2 years, I plan to release episodes that will teach Jon Frok and my audience the essentials of UI design. Every episode will contain a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learning some topic of UI design&lt;/li&gt;
&lt;li&gt;Retrowave/synthwave music with a guitar solo&lt;/li&gt;
&lt;li&gt;A reptile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the trailer I just released:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6bvutYtLsqY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope people enjoy it. I put a lot of $ and work into this. I almost didn't publish it on YouTube today, because it's so &lt;em&gt;out there&lt;/em&gt; and ridiculous. &lt;/p&gt;

&lt;p&gt;Give me your thoughts!&lt;/p&gt;

</description>
      <category>ui</category>
      <category>design</category>
      <category>tutorials</category>
      <category>ux</category>
    </item>
    <item>
      <title>Storybook: its usefulness and implementation.</title>
      <author>Victor Adeleke Afolayan</author>
      <pubDate>Tue, 10 Aug 2021 14:25:31 +0000</pubDate>
      <link>https://dev.to/rephidimc/storybook-its-usefulness-and-implementation-h55</link>
      <guid>https://dev.to/rephidimc/storybook-its-usefulness-and-implementation-h55</guid>
      <description>&lt;p&gt;In the past two weeks, I have been working on a new service for the app we're building at work - the launch is scheduled for August and I am excited to be entering a new phase. This piece looks at my most recent discovery and how I wish I knew it earlier.&lt;/p&gt;

&lt;p&gt;In one of my previous posts titled &lt;a href="https://dev.to/rephidimc/read-your-way-to-programming-salvation-1doe"&gt;Reading your way to programming salvation&lt;/a&gt;, I expressed how privileged I regard myself being in a place where I am constantly working, and in turn taken to new grounds that open my eyes to bigger, brighter possibilities in the tech world; I must admit that having more experienced developers around me has been of huge advantage, as they discuss new discoveries, creating a desire within me to level up in experience. It could pass for a case of the new, exciting discovery on the blocks which everyone speaks highly of, yet, you have neither seen nor used it: That in a nutshell was my story with Storybook before the last week.&lt;/p&gt;

&lt;p&gt;While having my weekly demo, my boss encouraged me to implement a storybook for my end of the project. I set out to read the storybook documentation and also saw a few videos. Although these helped, &lt;a href="https://levelup.gitconnected.com/why-you-should-always-use-storybook-when-developing-user-interfaces-4c69b93b2f65"&gt;this article&lt;/a&gt; solidified my understanding and perspective of what it is and does.&lt;/p&gt;

&lt;p&gt;Interestingly, I had to build a component right before trying out my hands-on storybook and in the process, I encountered&lt;br&gt;
the challenge of knowing how to show and position it appropriately as we hadn't decided on where it would be rendered. Although I eventually picked a random place to stage it, little did I know that a problem like that already had the perfect provision: Storybook.&lt;/p&gt;

&lt;h1&gt;What is a storybook and what is it used for?&lt;/h1&gt;

&lt;p&gt;A storybook is more like a folder that helps to render User Interface(UI) components called "stories"; hence, it is just logical to name where they all lie in a storybook. It is valuable as a playground for displaying components built in isolation before placing them in a position in the project where they belong.&lt;/p&gt;

&lt;p&gt;With a storybook, one can comfortably build, pass in dummy data to and style UI components appropriately. In addition to that, they are vital in that they provide a platform for staging components that are being readied for future use.&lt;/p&gt;

&lt;p&gt;How is a storybook built?&lt;br&gt;
The steps below can be followed to set up and run a storybook.&lt;/p&gt;

&lt;h2&gt;Step 1. Create a new file and with the extension ".stories.tsx" (e.g. victor.stories.tsx for typescript-based setup) and write default Imports and Exports&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWLKDg6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h0haotyx89o5jvn58ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWLKDg6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h0haotyx89o5jvn58ye.png" alt="Screenshot 2021-08-07 at 18.46.28"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;Step 2. Import your UI components(stories) and write new export functions - passing the appropriate props, if any.&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yMN1w_iv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9osueqi6m8cog6wfp53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yMN1w_iv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9osueqi6m8cog6wfp53.png" alt="Screenshot 2021-08-07 at 18.40.46"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;Step 3. Check your package.json file for the command to start storybook. Depending on the package manager your project is configured with, start your storybook in your terminal using the command stated from your package manager - I use yarn; I run "yarn start-storybook".&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3b5rAU7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcs534226cdsjlkrzezy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3b5rAU7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcs534226cdsjlkrzezy.png" alt="Screenshot 2021-08-07 at 18.51.13"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Overly, taking from my experience, a storybook is vital for the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It gives a platform for staging and testing out both new and existing UI components.&lt;/li&gt;
&lt;li&gt;UI components can be built in isolation from the main app.&lt;/li&gt;
&lt;li&gt;By keeping all components(stories) together(storybook), it helps to give awareness to other developers on the team of available stories, which they can also 'play around with'.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I am new to this and although I realise there might be more usages than I know of right now, I am loving the little I have experienced, and can't wait to try my hands in maximising its usage. For another dimension on storybook, do check out this &lt;a href="https://levelup.gitconnected.com/why-you-should-always-use-storybook-when-developing-user-interfaces-4c69b93b2f65"&gt;brilliant piece&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>frontend</category>
      <category>storybook</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>CSS3 flexbox in simple way for beginners to Advance. </title>
      <author>menomanabdulla</author>
      <pubDate>Tue, 10 Aug 2021 14:18:58 +0000</pubDate>
      <link>https://dev.to/menomanabdulla/css3-flexbox-in-simple-way-for-beginners-to-advance-408k</link>
      <guid>https://dev.to/menomanabdulla/css3-flexbox-in-simple-way-for-beginners-to-advance-408k</guid>
      <description>&lt;p&gt;Today’s world you can’t survive without flex-box  as a frontend developer whether you are expert or beginner. Flex-box give you extra superiority for managing your content in final layout, also flex-box has huge market demand for building complex web-layouts.&lt;/p&gt;

&lt;p&gt;CSS flexbox will added new weapon in your visual development portfolio. Here I am explained all CSS3 flex-box property in simple way with visual example and copy ready code. So stick till to the end and give your CSS expertise next shape.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css3-flexbox.netlify.app/"&gt;Here is live examples, you can check it from here.&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/menomanabdulla/all-css3-flex-property"&gt;Here is github, you can see source-code from here.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1display"&gt;
  &lt;/a&gt;
  1.Display:
&lt;/h2&gt;

&lt;p&gt;Display is CSS box-model properties,  it’s primary properties  for next all flex related properties. This defines a flex container, inline or block depending on the giver value. It enables a flex content for all its direct children. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQVdOmSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5opurevdgxqxo1saz2lt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQVdOmSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5opurevdgxqxo1saz2lt.png" alt="Display is CSS box-model properties"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2flex-order"&gt;
  &lt;/a&gt;
  2.Flex Order
&lt;/h2&gt;

&lt;p&gt;Flex item maintain default order as a source order.  Order properties can controls order in which they appear in the flex-container.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bmvXtdDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uji28chsf6bk8ps32dfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bmvXtdDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uji28chsf6bk8ps32dfj.png" alt="Flex item maintain default order"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3flex-direction"&gt;
  &lt;/a&gt;
  3.Flex Direction
&lt;/h2&gt;

&lt;p&gt;Flex-direction defines how flex-box items are ordered within a flex-box container. Value example and use case: &lt;br&gt;
&lt;strong&gt;row:&lt;/strong&gt; Same as text direction&lt;br&gt;
&lt;strong&gt;row-reverse:&lt;/strong&gt;  Alternative to text direction&lt;br&gt;
&lt;strong&gt;column:&lt;/strong&gt; Same as row but top to bottom&lt;br&gt;
&lt;strong&gt;column-reverse:&lt;/strong&gt; Same as row-reverse but top to bottom &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mn8YMskz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wdemjgziob5pgzr6o0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mn8YMskz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wdemjgziob5pgzr6o0x.png" alt="Flex-direction defines how flex-box items are ordered"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4flex-wrap"&gt;
  &lt;/a&gt;
  4.Flex Wrap
&lt;/h2&gt;

&lt;p&gt;For Flex-wrap stick by-default inline, flex-wrap is also flexible like others property. You can change that and allow the items to wrap as needed with its property. Value example and use case:&lt;br&gt;
&lt;strong&gt;nowrap:&lt;/strong&gt; all flexf items will be on one line&lt;br&gt;
&lt;strong&gt;wrap:&lt;/strong&gt; flex items will wrap onto multiple lines, fro&lt;br&gt;
&lt;strong&gt;wrap-reverse:&lt;/strong&gt; flex items will wrap into multiple lines, from bottom to top &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rf52j5H_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quo6i0pxhhqa3frvjxyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rf52j5H_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quo6i0pxhhqa3frvjxyi.png" alt="For Flex-wrap stick by-default inline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5flex-shrink"&gt;
  &lt;/a&gt;
  5.Flex Shrink
&lt;/h2&gt;

&lt;p&gt;Flex-shrink is just opposite of flex grow. It only comes into play if the elements must shrink to fit into their container(when the container is just too small).&lt;br&gt;
By-default every item has flex-shrink of 1 which means it will shrink as the box contracts. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEpQ3H4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otmijgqjszarhl90oy3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEpQ3H4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otmijgqjszarhl90oy3w.png" alt="Flex-shrink is just opposite of flex grow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6flex-flow"&gt;
  &lt;/a&gt;
  6.Flex Flow
&lt;/h2&gt;

&lt;p&gt;CSS This is short-hand for the flex-direction and flex-wrap properties, simultaneously they define flex containers main and cross axis. The default value is row and nowrap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3dY4fldJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83kqcbf8ku3fxqcbyxmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3dY4fldJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83kqcbf8ku3fxqcbyxmm.png" alt="CSS This is short-hand for the flex-direction and flex-wrap properties"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7flex-basis"&gt;
  &lt;/a&gt;
  7.Flex Basis
&lt;/h2&gt;

&lt;p&gt;This defines the default size of an element before the remaining space is distributed. It could be a length with unit or keyword like auto, content flex-basis default value is “auto”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yEIf9AuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/646ems4udq1fcwdmklix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yEIf9AuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/646ems4udq1fcwdmklix.png" alt="This defines the default size of an element before the remaining space is distributed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8justify-content"&gt;
  &lt;/a&gt;
  8.Justify Content
&lt;/h2&gt;

&lt;p&gt;This properties define alignment of flex item along with ‘x’ axis or main axis. Justify-content’s default value is “flex-start”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;flex-start:&lt;/strong&gt; item will appear at the starting of the flex-container along with ‘x’ axis.&lt;br&gt;
&lt;strong&gt;flex-end:&lt;/strong&gt; item will appear at the end of the flex-container along with ‘x’ axis. &lt;br&gt;
&lt;strong&gt;space-between:&lt;/strong&gt; items get space between those mainly left and right side when they appear along with ‘x’ axis.&lt;br&gt;
&lt;strong&gt;space-around:&lt;/strong&gt;  items get space combinedly mainly left and right side along with ‘x’ axis.&lt;br&gt;
&lt;strong&gt;center:&lt;/strong&gt; items will align center along with ‘x’ axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zhZ5koAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvh8fpxyoj5ppwispyvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zhZ5koAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvh8fpxyoj5ppwispyvm.png" alt="This properties define alignment of flex item along with ‘x’ axis or main axis."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9flex"&gt;
  &lt;/a&gt;
  9.Flex
&lt;/h2&gt;

&lt;p&gt;Flex properties determine short-hand of flex-grow, flex-shrink and flex-basis combined. The second and third property are optional. The default is ‘0 1 auto’ but if you set it with a single number value it’s like ‘1 0’;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-a1o8Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v079nrvvng1z74yc8t7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-a1o8Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v079nrvvng1z74yc8t7k.png" alt="Flex properties determine short-hand of flex-grow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10align-items"&gt;
  &lt;/a&gt;
  10.Align Items
&lt;/h2&gt;

&lt;p&gt;Align-items properties defines the default behavior for how flex items are aligned or laid out along with ‘y’ or cross axis.&lt;br&gt;
&lt;strong&gt;flex-start:&lt;/strong&gt; item will appear at the starting of the flex-container along with ‘y’ axis.&lt;br&gt;
&lt;strong&gt;flex-end:&lt;/strong&gt; item will appear at the end of the flex-container along with ‘y’ axis.&lt;br&gt;
&lt;strong&gt;center:&lt;/strong&gt; item will appear at the center point of the flex-container along with ‘y’ axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f5gQAUUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7m8pvhas2ivuhc1d4ip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5gQAUUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7m8pvhas2ivuhc1d4ip.png" alt="Align-items properties defines the default behavior for how flex items are aligned or laid out along with ‘y’ or cross axis."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11align-self"&gt;
  &lt;/a&gt;
  11.Align Self
&lt;/h2&gt;

&lt;p&gt;For This allows the default alignment, to be overridden for individual flex items. We can overridden align-items properties only for any individuals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9gw4gU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za62sv71yide9feaob37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9gw4gU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za62sv71yide9feaob37.png" alt="For This allows the default alignment, to be overridden for individual flex items."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12align-content"&gt;
  &lt;/a&gt;
  12.Align Content
&lt;/h2&gt;

&lt;p&gt;This property define flex container’s lines within when there is extra space in the ‘y’ axis, similar to how justify-content aligns individuals items within  the man the main-axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djTMNQZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwao7c7ozslqvie2j85g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djTMNQZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwao7c7ozslqvie2j85g.png" alt="This property define flex container’s lines within when there is extra space in the ‘y’ axis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this article I tried to cover all CSS3 flex-box properties with example and also include &lt;a href="https://css3-flexbox.netlify.app/"&gt;live example&lt;/a&gt; with&lt;a href="https://github.com/menomanabdulla/all-css3-flex-property"&gt; github source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed it, please let me know your words. If you want to deep drive with CSS3 coding guidelines and front-end web development best practices please &lt;a href="https://dev.to/menomanabdulla/15-css3-best-practices-of-for-beginners-to-pro-253d"&gt;check it&lt;/a&gt;. Also you can check my 15 Best practices of HTML5 for beginners for give your markup good shape from &lt;a href="https://dev.to/menomanabdulla/15-html5-best-practices-for-beginners-to-master-47fb"&gt;here&lt;/a&gt;. If you find any errors or mistakes then do let me know. Thanks for this journey  &amp;amp; Happy Coding.&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Stay alert</title>
      <author>Rich Harris</author>
      <pubDate>Tue, 10 Aug 2021 14:16:18 +0000</pubDate>
      <link>https://dev.to/richharris/stay-alert-d</link>
      <guid>https://dev.to/richharris/stay-alert-d</guid>
      <description>&lt;p&gt;A short while ago, Chrome broke the web by disabling &lt;code&gt;alert()&lt;/code&gt;, &lt;code&gt;confirm()&lt;/code&gt; and &lt;code&gt;prompt()&lt;/code&gt; dialogs from cross-origin iframes. The justification was that "the current UX is confusing, and has previously led to spoofs where sites pretend the message comes from Chrome or a different website"; removing the feature was deemed preferable to fixing the UX.&lt;/p&gt;

&lt;p&gt;But legitimate uses were affected too. Users of &lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt;, the widely-used code-sharing site co-founded by Chris Coyier, &lt;a href="https://css-tricks.com/choice-words-about-the-upcoming-deprecation-of-javascript-dialogs"&gt;suddenly discovered&lt;/a&gt; that they were unable to use these functions in their projects, since CodePen runs your code inside a cross-origin iframe to &lt;a href="https://twitter.com/chriscoyier/status/1420033471376920578"&gt;guard against XSS attacks&lt;/a&gt;. Reports from other sites followed, and in the ensuing chaos the change was &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1065085#c72"&gt;rolled back until 2022&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hidden in the replies to &lt;a href="https://twitter.com/chriscoyier/status/1420027533005836298"&gt;Coyier's tweet&lt;/a&gt; was a &lt;a href="https://twitter.com/domenic/status/1422647331804037120"&gt;surprising statement&lt;/a&gt; from Domenic Denicola, an engineer on the Chrome team:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's best that such teaching sites be prepared for the eventual end state where these are removed from the web platform entirely.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Wait, what?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Reading the &lt;a href="https://groups.google.com/a/chromium.org/g/blink-dev/c/hTOXiBj3D6A/m/JtkdpDd1BAAJ"&gt;intent to remove&lt;/a&gt; thread confirms that this is indeed Chrome's stance: blocking dialogs (including &lt;code&gt;onbeforeunload&lt;/code&gt;) were a mistake, and their future removal is a &lt;em&gt;fait accompli&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After I &lt;a href="https://twitter.com/Rich_Harris/status/1422930436850860033"&gt;tweeted&lt;/a&gt; about the situation last week, my notifications tab became a Boschian hellscape, so I'm hesitant to write this post. But there are several aspects to this story that are too important for us not to talk about. It's not just a story about unloved APIs, it's a story about power, standards design, and who owns the platform — and it makes me afraid for the future of the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onramps"&gt;
  &lt;/a&gt;
  Onramps
&lt;/h2&gt;

&lt;p&gt;Facebook's Dan Abramov &lt;a href="https://twitter.com/dan_abramov/status/1422601734153723908"&gt;pointed out&lt;/a&gt; that the changes nuked many programming tutorials. Google's Emily Stark &lt;a href="https://twitter.com/estark37/status/1422645947708760067"&gt;suggested&lt;/a&gt; they should use the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element instead. For the moment, we'll gloss over the fact that &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; is sufficiently flawed that Denicola &lt;a href="https://github.com/whatwg/html/pull/4184#issuecomment-440405059"&gt;floated&lt;/a&gt; removing it from the spec — or that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#javascript"&gt;MDN's suggested fallback&lt;/a&gt; for browsers that don't support it is none other than &lt;code&gt;alert&lt;/code&gt; — and instead consider what this would look like in real life.&lt;/p&gt;

&lt;p&gt;Often, when I'm teaching people web development, they begin learning JavaScript by building a simple number guessing game along these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Guess a number between 1 and 100`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Too low! Guess again`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Too high! Guess again`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`That's right! The number was &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty straightforward-looking stuff, but in the space of a few lines of code the students are exposed to many unfamiliar concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data types (strings vs numbers, and converting between them)&lt;/li&gt;
&lt;li&gt;Functions, both built-in and the ones you write yourself&lt;/li&gt;
&lt;li&gt;Loops and if-else statements&lt;/li&gt;
&lt;li&gt;Operators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's a popular lesson, and even foreshadows future discussions of algorithms (the smartest students soon intuit that they can 'win' by conducting a binary search), but it's hard — easily an hour's worth of material. Imagine now that before they could complete it they were required to learn about the DOM, event handling, and asynchronous programming. Educators gravitated towards blocking dialog APIs &lt;em&gt;for a reason&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/yoavweiss/status/1422655032273641479"&gt;Failing to understand&lt;/a&gt; why these APIs are so valuable in an educational context is inevitable if you &lt;a href="https://twitter.com/ag_dubs/status/1423323533036429315"&gt;don't consider teachers part of your constituency&lt;/a&gt; when designing standards. It's cliché (and only partly accurate) to say that the web used to have better onramps for developers, but there's truth behind the nostalgic grumbling: the web platform's learnability has long been essential to its success. We damage it at our peril.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hidden-signals"&gt;
  &lt;/a&gt;
  Hidden signals
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://docs.google.com/document/d/1RC-pBBvsazYfCNNUSkPqAVpSpNJ96U8trhNkfV0v9fk/edit#heading=h.mqfkui78vo5z"&gt;'primary signal'&lt;/a&gt; Chrome uses to determine whether something can safely be removed from the web platform is the number of page views impacted. A feature appearing on 0.001% of page views is considered 'small but non-trivial' usage. (Cross-origin &lt;code&gt;alert&lt;/code&gt; is at around &lt;a href="https://chromestatus.com/metrics/feature/timeline/popularity/1411"&gt;0.006%&lt;/a&gt;, significantly above this threshold; with same-origin the figure is &lt;a href="https://chromestatus.com/metrics/feature/timeline/popularity/950"&gt;50x higher&lt;/a&gt; still.)&lt;/p&gt;

&lt;p&gt;It's easy to overindex on the things you can quantify, especially if you're Google. But not all things that count as &lt;em&gt;uses&lt;/em&gt; of some feature show up in the data, when the data is predominantly public-facing production websites. Teaching is one such case. There are others.&lt;/p&gt;

&lt;p&gt;For example, I've had several experiences in which a well-placed &lt;code&gt;alert&lt;/code&gt; was the only way to test hypotheses during debugging. In an ideal world we'd all have well-stocked device labs and be able to remotely inspect our code wherever it's running, no matter how imminent the deadline. Reality isn't always so accommodating.&lt;/p&gt;

&lt;p&gt;Even when my code is working as intended — it happens sometimes — I'm likely to reach for &lt;code&gt;alert&lt;/code&gt; before adding complex error handling, if I'm building something for myself or my coworkers and I expect errors to be rare occurrences.&lt;/p&gt;

&lt;p&gt;And security researchers frequently use &lt;code&gt;alert&lt;/code&gt; to demonstrate vulnerabilities. (Yes, in future they could use something less concise and less visible like &lt;code&gt;console.log&lt;/code&gt;, but in the meantime years' worth of literature would instantly fall out of date if &lt;code&gt;alert&lt;/code&gt; vanished.)&lt;/p&gt;

&lt;p&gt;All of these are legitimate uses, but none will affect the metric that determines whether they're important enough to be supported by Chrome. Even when we &lt;em&gt;do&lt;/em&gt; focus solely on production websites, usage doesn't necessarily correlate with importance, as &lt;a href="https://twitter.com/dan_abramov/status/1422943317512364037"&gt;noted by Dan Abramov&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breakage"&gt;
  &lt;/a&gt;
  Breakage
&lt;/h2&gt;

&lt;p&gt;According to Emily Stark, a security expert on the Chrome team, breakage is &lt;a href="https://twitter.com/estark37/status/1422694856544059396"&gt;something that happens often&lt;/a&gt; on the web.&lt;/p&gt;

&lt;p&gt;But if that's true, it's very largely &lt;em&gt;because&lt;/em&gt; of Chrome. For a long time, 'don't break the web' was considered something of a &lt;a href="https://twitter.com/BenLesh/status/1422659445126057989"&gt;prime directive&lt;/a&gt; in standards work. Recall #smooshgate: a proposal to add a &lt;code&gt;flatten&lt;/code&gt; method to &lt;code&gt;Array.prototype&lt;/code&gt; turned out to be a breaking change because an ancient version of MooTools, still in use by a handful of sites, added its own incompatible &lt;code&gt;flatten&lt;/code&gt;. &lt;a href="https://twitter.com/Rich_Harris/status/971753488739954688"&gt;Disappointingly&lt;/a&gt;, some developers argued that breaking the web was acceptable, but TC39 took its backwards compatibility responsibilities seriously and ended up renaming &lt;code&gt;flatten&lt;/code&gt; to &lt;code&gt;flat&lt;/code&gt; instead. Google's Mathias Bynens &lt;a href="https://developers.google.com/web/updates/2018/03/smooshgate"&gt;wrote&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As it turns out, “don’t break the Web” is the number one &lt;a href="https://www.w3.org/TR/html-design-principles/#support-existing-content"&gt;design principle&lt;/a&gt; for HTML, CSS, JavaScript, and any other standard that’s widely used on the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This time around, the approach was rather more cavalier.&lt;/p&gt;

&lt;p&gt;Reasonable people can disagree about the balance of priorities when considering breaking changes, but it's good to be clear-eyed about what 'breakage' means. One of the many anecdotes I heard in the wake of the cross-origin alert changes &lt;a href="https://twitter.com/bigtimebuddy/status/1422953235111825416"&gt;stood out&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was attempting to delete my recurring payments account from my local waste management's super old-school site. I was bit by the cross-domain confirm() in Chrome 92. I switched to Firefox to complete.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What if Firefox was no longer an option, either because a cash-strapped Mozilla had stopped developing it, or because they had implemented the &lt;a href="https://github.com/whatwg/html/pull/6297"&gt;now standardized&lt;/a&gt; spec changes? We're not talking about the Space Jam website rendering incorrectly, we're talking about people being unable to use &lt;a href="https://twitter.com/NOVALISTIC/status/1423184584686981120"&gt;essential services&lt;/a&gt; on the web. A frequent implication in the discussion last week was that website owners could simply re-engineer their apps to not use blocking dialogs, regardless of the cost of doing so. But many sites are no longer maintained, and they're no less valuable because of it.&lt;/p&gt;

&lt;p&gt;We can't normalise the attitude that collateral damage is the price of progress, even if we accept the premise — which I don't — that removing APIs like &lt;code&gt;alert&lt;/code&gt; represents progress. For all its flaws, the web is generally agreed to be a stable platform, where investments made today will stand the test of time. A world in which websites are treated as inherently transient objects, where APIs we commonly rely on today could be cast aside as unwanted baggage by tomorrow's spec wranglers, is a world in which the web has already lost.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-if-alert-is-good-actually"&gt;
  &lt;/a&gt;
  What if alert is... good, actually?
&lt;/h2&gt;

&lt;p&gt;We're often reminded to use the web's built-in form elements instead of recreating checkboxes and buttons with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; salad. Not only are they &lt;a href="https://drewdevault.com/2021/06/27/You-cant-capture-the-nuance.html"&gt;more accessible than what you'd likely build yourself&lt;/a&gt;, the visual consistency makes your app easier for users to navigate even if you consider the default appearance 'ugly'.&lt;/p&gt;

&lt;p&gt;Yet when it comes to dialogs, the ugly default is treated as a bug rather than a feature. Why? As Heydon Pickering &lt;a href="https://twitter.com/heydonworks/status/1423565599947513856"&gt;puts it&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using alert(), prompt(), and confirm() in an MVP is the closest most devs will get to providing accessible dialogs. Chrome removing them just cuts out that step. Devs can go straight onto building their own underperforming, inaccessible dialogs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the bad old days, the behaviour of &lt;code&gt;alert&lt;/code&gt; was somewhat obnoxious — it would focus the tab in question, and prevent you from navigating away. Thanks to &lt;a href="https://docs.google.com/document/d/1wtV5rmLhbf1OZkbg7crtCt6h1mMtig_ctTQt3BLLEIU/edit#heading=h.uivr1mgjyut2"&gt;years of hard work&lt;/a&gt;, that's no longer the case, to the extent that I'd argue &lt;code&gt;alert&lt;/code&gt; is in many cases better than whatever you'd have cobbled together yourself.&lt;/p&gt;

&lt;p&gt;There &lt;em&gt;are&lt;/em&gt; security issues with cross-origin iframes. I remain unconvinced that removal is a better solution than improving the design in a way that makes their provenance clearer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-owns-the-web"&gt;
  &lt;/a&gt;
  Who owns the web?
&lt;/h2&gt;

&lt;p&gt;A common response to last week's kerfuffle was 'use Firefox'. But that's not a solution. Even though the change was proposed by Chromium (the &lt;a href="https://groups.google.com/a/chromium.org/g/blink-dev/c/hTOXiBj3D6A/m/JtkdpDd1BAAJ"&gt;intent to remove&lt;/a&gt; preceded any discussion with other browser vendors), Firefox ultimately supported it. That's all it takes for something to become a 'standard' — support from two vendors, and stated opposition from none.&lt;/p&gt;

&lt;p&gt;Put differently: when it comes to web standards, browsers call the shots exclusively.&lt;/p&gt;

&lt;p&gt;Whenever I've questioned the wisdom of this or that proposal, I've been told I should simply get involved in the standards discussions — they're right there on GitHub! But openness means nothing without the power to effect change, and browsers have all the power. This should strike us as odd — the W3C's &lt;a href="https://www.w3.org/TR/html-design-principles/#priority-of-constituencies"&gt;priority of constituencies&lt;/a&gt; explicitly states that the needs of users and authors (i.e. developers) should be treated as higher priority than those of implementors (i.e. browser vendors), yet the higher priority constituencies are at the mercy of the lower priority ones. (&lt;a href="https://twitter.com/yoavweiss/status/1423380609968353280"&gt;Chrome developers argue&lt;/a&gt; that they are acting in the interests of users in this case, but this &lt;a href="https://twitter.com/mikesherov/status/1423271360357351432"&gt;thread from Mike Sherov&lt;/a&gt; makes a convincing case that this is a fig leaf for the real motivation, which is technical debt.)&lt;/p&gt;

&lt;p&gt;Meanwhile, we don't seem to be learning from the past. If &lt;code&gt;alert&lt;/code&gt; is fair game for removal, then so is every API we add to the platform if the web's future stewards deem it harmful. Given that, you'd think we'd expand the platform's surface area with extreme caution; instead, we're &lt;a href="https://web-confluence.appspot.com/#!/confluence"&gt;adding APIs at breakneck speed&lt;/a&gt;, to the almost-guaranteed detriment of its future stability.&lt;/p&gt;

&lt;p&gt;Given Chrome's near-monopoly control of the browser market, I'm genuinely concerned about what this all means for the future of the web. An ad company shouldn't have this much influence over something that belongs to all of us. I don't know how to fix the standards process so that it's more representative of the diversity of the web's stakeholders, but I'm increasingly convinced that we need to figure it out.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>How I almost won an NLP competition without knowing any Machine Learning</title>
      <author>Ferdinand Boas</author>
      <pubDate>Tue, 10 Aug 2021 13:51:28 +0000</pubDate>
      <link>https://dev.to/ferdi05/how-i-almost-won-an-nlp-competition-without-knowing-any-machine-learning-24la</link>
      <guid>https://dev.to/ferdi05/how-i-almost-won-an-nlp-competition-without-knowing-any-machine-learning-24la</guid>
      <description>&lt;p&gt;One of the cool things about Machine Learning is that you can see it as a competition. Your models can be evaluated with many performance indicators, and be ranked on various leaderboards. You can compete against other Machine Learning practitioners around the world, and your competitors can be a student in Malaysia or the largest AI lab at Stanford University.&lt;br&gt;
&lt;a href="https://www.kaggle.com/"&gt;Kaggle&lt;/a&gt; started as a platform to host such Machine Learning contests, and it gained a lot of attention from the data science community. The best data scientists exhibit on Kaggle their most sophisticated Machine Learning skills, craft the most elaborated models to reign over these competitions.&lt;br&gt;
Kaggle is now a broader platform, where you can enter these competitions but also learn data science, discuss it, and collaborate with fellow data scientists.&lt;/p&gt;

&lt;p&gt;Most of the Kaggle competitors are Machine Learning practitioners. Many software engineers do not enter these competitions, mostly because &lt;em&gt;they think&lt;/em&gt; that they do not have the needed skill set, tools, or time to be successful in them.&lt;/p&gt;

&lt;p&gt;Machine Learning can be hard to learn and use. It’s a very technical field.&lt;br&gt;
Running a Machine Learning project is complex: you will have to gather and clean data, choose a pre-trained model or train a model that suits your needs, fine-tune it for your curated dataset, and deploy the model in a production environment. You will also need to worry about monitoring, scalability, latency, reliability...&lt;br&gt;
This is usually a resource-intensive process, it takes time, knowledge, compute resources, and money. &lt;em&gt;This does not fit well with the regular activities of a software engineer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At this stage, I need to point out that I am not a data scientist. &lt;br&gt;
&lt;strong&gt;You may now wonder how I ranked among the best data scientists in a Kaggle Natural Language Processing (NLP) challenge without using any Machine Learning.&lt;/strong&gt;&lt;br&gt;
This blog post explains how I successively leveraged &lt;a href="https://huggingface.co/"&gt;Hugging Face&lt;/a&gt; 🤗 AutoNLP web interface and 🤗 Inference API to achieve this result.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find all the scripts and assets used in this GitHub repository.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ferdi05"&gt;
        ferdi05
      &lt;/a&gt; / &lt;a href="https://github.com/ferdi05/kaggle-disaster-tweet-competition"&gt;
        kaggle-disaster-tweet-competition
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Participating to a Kaggle competition without coding any Machine Learning
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-kaggle-competition"&gt;
  &lt;/a&gt;
  The Kaggle competition
&lt;/h2&gt;

&lt;p&gt;Entering a Kaggle competition is straightforward. You are asked to perform a task such as &lt;a href="https://en.wikipedia.org/wiki/Sentiment_analysis"&gt;sentiment analysis&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Object_detection"&gt;object detection&lt;/a&gt; that can be solved with Machine Learning. Kaggle provides a  training dataset with examples of the task to achieve. You can use this dataset to train a Machine Learning model. Then you can use this model to perform the same task on a test dataset (also provided by Kaggle). This is your attempt at solving the challenge. Then you will submit your model predictions for this test dataset to Kaggle and they will evaluate it and give you a ranking in the competition that you entered.&lt;/p&gt;

&lt;p&gt;You will find plenty of NLP competitions on the Kaggle website. I participated in the &lt;a href="https://www.kaggle.com/c/nlp-getting-started/"&gt;Natural Language Processing with Disaster Tweets&lt;/a&gt; competition as it is quite recent (7 months when writing this post) and has over 3,000 submissions from other teams.&lt;br&gt;
This competition challenged me to build a Machine Learning model that predicts if a tweet is about a real disaster or not.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kzn3kssE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/900725654928453633/ve6WRjfU_normal.jpg" alt="Charlie Langa profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Charlie Langa
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @charlielanga
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      @marksmaponyane Hey!Sundowns were annihilated in their previous meeting with Celtic.Indeed its an improvement.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:27 PM - 05 Aug 2015
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=629010812728963072" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=629010812728963072" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=629010812728963072" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This tweet is not about a real disaster&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kaggle provides a &lt;a href="https://github.com/ferdi05/kaggle-disaster-tweet-competition/blob/main/assets/train_original.csv"&gt;training&lt;/a&gt; dataset of around 7,500 tweets (the input object) with their associated label (the desired output value). These labels tell if each tweet is about a disaster (its label is 1) or not (its label is 0). This dataset will be used to train a few Machine Learning models and evaluate them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7-SS0jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9hjmvhmrdqlsuvhcaip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7-SS0jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9hjmvhmrdqlsuvhcaip.png" alt="Kaggle training dataset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kaggle also provides a &lt;a href="https://github.com/ferdi05/kaggle-disaster-tweet-competition/blob/main/assets/test.csv"&gt;test&lt;/a&gt; dataset of around 3,200+ tweets without any paired label. We will use the newly created Machine Learning model to predict if they are about a disaster, asking the Machine Learning model to apply labels to each of these tweets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VV_4HD_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0lb2urf4q5ppiiqk6nm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VV_4HD_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0lb2urf4q5ppiiqk6nm.png" alt="Kaggle test dataset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both datasets also contain two other data columns that will not be used: a keyword and the location of the tweet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autonlp-web-interface-to-the-rescue"&gt;
  &lt;/a&gt;
  🤗 AutoNLP web interface to the rescue
&lt;/h2&gt;

&lt;p&gt;The process of training a Machine Learning model is not straightforward. It requires collecting cleaning and formatting data, selecting a Machine Learning algorithm, playing with the algorithm parameters, training the model, evaluating its performance, and iterating. And this does not guarantee that performances will reach your expectations.&lt;br&gt;
This is a resource-intensive process. Fortunately, I used a web interface to do all the heavy-lifting and save hours of Machine Learning-induced head-scratching.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-autonlp"&gt;
  &lt;/a&gt;
  What is 🤗 AutoNLP?
&lt;/h3&gt;

&lt;p&gt;Leveraging its experience with the most performant architectures of NLP, Hugging Face offers the &lt;a href="https://ui.autonlp.huggingface.co/"&gt;🤗 AutoNLP web interface&lt;/a&gt; to automatically train, evaluate and deploy state-of-the-art NLP models for different tasks. All you need to do is feed it your datasets.&lt;/p&gt;

&lt;p&gt;🤗 AutoNLP uses &lt;a href="https://machinelearningmastery.com/supervised-and-unsupervised-machine-learning-algorithms/"&gt;supervised learning algorithms&lt;/a&gt; to train the candidate Machine Learning models. This means that these models will try to reproduce what they learned from examples that pair an input object and its desired output value. After their training, these models should successfully pair unseen input objects with their correct output values.&lt;/p&gt;

&lt;p&gt;🤗 AutoNLP will train a range of NLP models suitable for the task required by the competition and will use a various set of configurations for each of them. Then each model’s performance will be automatically evaluated. I saved a lot of resources and money by avoiding their computer-intensive training.&lt;br&gt;
Later I selected the most performant model to make predictions for the Kaggle competition.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#training-machine-learning-models-with-data-only"&gt;
  &lt;/a&gt;
  Training Machine Learning models with data only
&lt;/h3&gt;

&lt;p&gt;The competition requires to label each tweet as related to a disaster or not. And binary text classification is one of the tasks achievable with the 🤗 AutoNLP web interface. So I started a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OtSwS2Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7rgczuy00q3v18k2m85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OtSwS2Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7rgczuy00q3v18k2m85.png" alt="New AutoNLP project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this competition, Kaggle provides only one training dataset but you need one dataset to train the models (the training dataset) and another one (the validation dataset) to evaluate their performance.&lt;br&gt;
I split the original dataset provided by Kaggle into 2 datasets using a rule of thumb ratio of 80%-20%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hLSapoFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a2t14e2u2mn4w3tzrbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hLSapoFp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a2t14e2u2mn4w3tzrbg.png" alt="Column mapping"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The columns of both datasets need to be mapped. The &lt;em&gt;text&lt;/em&gt; column is the input object and the &lt;em&gt;target&lt;/em&gt; column is the desired output value. Here the input object is the tweet content, and the output value is its associated label.&lt;/p&gt;

&lt;p&gt;Then the web interface started the training and did its magic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ePeuynJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d30g1p6jgyvrpv3c7bx7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ePeuynJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d30g1p6jgyvrpv3c7bx7.gif" alt="training models with AutoNLP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a few minutes, models were trained, evaluated, and uploaded on the &lt;a href="https://huggingface.co/models"&gt;Hugging Face Hub&lt;/a&gt; (with private visibility). They were ready to serve, still without any Machine Learning instructions, as you will see later.&lt;/p&gt;

&lt;p&gt;For this competition, Kaggle evaluates the performance of the predictions with their &lt;a href="https://en.wikipedia.org/wiki/F-score"&gt;F1 score&lt;/a&gt;. This is an accuracy metric for a machine learning model. So the best model was the one with the highest F1 score.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GlrlWJIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lklovjp5gkspu5zosrxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlrlWJIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lklovjp5gkspu5zosrxy.png" alt="Model metrics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kaggle sometimes evaluates results with more sophisticated metrics. Conveniently 🤗 AutoNLP web interface automatically uploads every trained model’s file on the Hugging Face Hub with &lt;a href="https://huggingface.co/ferdinand/autonlp-kaggle-competition-6381329"&gt;their associated card&lt;/a&gt;. Each card includes the model metrics (that you may combine according to your need) and code snippets to use the model. And there is even a widget to quickly experiment with the model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rrMiKnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiw0mde4zsxvnw62y95v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rrMiKnl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiw0mde4zsxvnw62y95v.png" alt="Model card"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solving-the-kaggle-challenge-with-the-inference-api"&gt;
  &lt;/a&gt;
  Solving the Kaggle challenge with the 🤗 Inference API
&lt;/h2&gt;

&lt;p&gt;It is now time to use the most performant model on the test dataset provided by Kaggle.&lt;br&gt;
There are two different ways to use the model:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the data scientist way: deploying the model on a dedicated infrastructure, or on a Machine Learning platform&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;developer-friendly&lt;/em&gt; way of using it: through API calls. This is the one that I will describe here.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#serving-machine-learning-models-with-the-inference-api"&gt;
  &lt;/a&gt;
  Serving Machine Learning models with the 🤗 Inference API
&lt;/h3&gt;

&lt;p&gt;Using Machine Learning models in production is hard, even for Machine Learning engineers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you may have a difficult time handling large and complex models&lt;/li&gt;
&lt;li&gt;your tech architecture can be unoptimized&lt;/li&gt;
&lt;li&gt;your hardware may not meet your requirements
Your model may not have the scalability, reliability or speed performances that you were expecting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I relied on the &lt;a href="https://huggingface.co/inference-api"&gt;🤗 Inference API&lt;/a&gt; to use my model, still without coding any Machine Learning. The API allows to reach up to &lt;a href="https://huggingface.co/blog/accelerated-inference"&gt;100x speedup&lt;/a&gt; compared to deploying my model locally or on a cloud, thanks to many optimization techniques. And the API has built-in scalability which makes it a perfect addition to a software production workflow, while controlling the costs as I will not need any extra infrastructure resources.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-few-api-calls-to-solve-the-challenge"&gt;
  &lt;/a&gt;
  A few API calls to solve the challenge
&lt;/h3&gt;

&lt;p&gt;Let’s call the 🤗 Inference API for each row of the test dataset, and write the output value in the submission file.&lt;br&gt;
I could have used the API via regular HTTP calls, but there is an alternate way: the &lt;a href="https://github.com/huggingface/huggingface_hub/"&gt;huggingface_hub library&lt;/a&gt; conveniently offers a wrapper client to handle these requests, and I used it to call the API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;huggingface_hub.inference_api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;InferenceApi&lt;/span&gt;

&lt;span class="n"&gt;inference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InferenceApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ferdinand/autonlp-kaggle-competition-6381329"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;API_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# URL of our model with our API token
&lt;/span&gt;&lt;span class="n"&gt;MODEL_MAX_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="c1"&gt;# parameter of our model, can be seen in config.json at "max_position_embeddings"
&lt;/span&gt;
&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"assets/test.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Kaggle test data
&lt;/span&gt;&lt;span class="n"&gt;csv_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_read&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# skipping the header row
&lt;/span&gt;
&lt;span class="n"&gt;fw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"assets/submission.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"UTF8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# our predictions data
&lt;/span&gt;&lt;span class="n"&gt;csv_write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;csv_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'target'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# writing the header row
&lt;/span&gt;
&lt;span class="c1"&gt;#returns a label : about a disaster or not given a tweet content
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet_content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

   &lt;span class="c1"&gt;# calling the API, payload is the tweet content , possibly truncated to meet our model requirements
&lt;/span&gt;   &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tweet_content&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;MODEL_MAX_LENGTH&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

   &lt;span class="c1"&gt;# Determining which label to return according to the prediction with the highest score
&lt;/span&gt;   &lt;span class="c1"&gt;# example of an API call response: [[{'label': '0', 'score': 0.9159180521965027}, {'label': '1', 'score': 0.08408192545175552}]]
&lt;/span&gt;   &lt;span class="n"&gt;max_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="n"&gt;max_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;dic&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
       &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'label'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
           &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'score'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_score&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="n"&gt;max_score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;
               &lt;span class="n"&gt;max_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;max_label&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# call the API for each row
&lt;/span&gt;
   &lt;span class="c1"&gt;# writing in the submission file the tweet ID and its associated label: about a disaster or not
&lt;/span&gt;   &lt;span class="n"&gt;write_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt; &lt;span class="c1"&gt;# row[0] is the tweet ID, row[3] is the tweet content
&lt;/span&gt;   &lt;span class="n"&gt;csv_write&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the 🤗 Inference API on all the input data (it may take a while), I ended up with a file that I submitted to Kaggle for evaluation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QdsHeL6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4wlvodvndhx0evy3kqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QdsHeL6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4wlvodvndhx0evy3kqu.png" alt="Kaggle evaluation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This model made it to the top 15% of the competitors with a 0.83 mean score!&lt;br&gt;
At first, I was surprised to not rank higher. Unfortunately, the test dataset and its associated label used for this competition are available publicly. So a few clever contestants submitted it and received an approximate 1.00 score, which is not something realistic in a data science problem.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NOmuM7aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w3nf4fvr6qgxkskm0kw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NOmuM7aH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w3nf4fvr6qgxkskm0kw.png" alt="Kaggle leaderboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having a second look at the leaderboard, I saw that the best data science teams have a 0.85 score. This is very close to the score that I obtained, and another 🤗AutoNLP test may give better results, depending on how lucky I am with the random variations of each model’s parameters. Given the time and resources invested in solving this challenge, this is almost a win!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-more-with-the-autonlp-python-package"&gt;
  &lt;/a&gt;
  Do more with the AutoNLP Python package
&lt;/h2&gt;

&lt;p&gt;With the 🤗 AutoNLP web interface, the 🤗 Inference API, and a very few lines of code, NLP models were automatically created, deployed, and used to achieve a great ranking in an NLP competition without learning or using any Machine Learning techniques.&lt;/p&gt;

&lt;p&gt;🤗 AutoNLP can also be used as a Python package and can support more Machine Learning tasks than those provided by the web interface - but the interface is quickly catching up. You can use the package to perform tasks like speech recognition and enter even more Kaggle competitions!&lt;/p&gt;

&lt;p&gt;If you want to win a Kaggle competition or to train a model for your business or pleasure, you can get started with AutoNLP &lt;a href="https://huggingface.co/autonlp"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nlp</category>
      <category>kaggle</category>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
  </channel>
</rss>
