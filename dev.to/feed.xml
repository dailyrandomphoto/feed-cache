<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>beCoditive API</title>
      <author>Max</author>
      <pubDate>Fri, 21 May 2021 09:57:59 +0000</pubDate>
      <link>https://dev.to/max2408/becoditive-api-l51</link>
      <guid>https://dev.to/max2408/becoditive-api-l51</guid>
      <description>&lt;p&gt;Hi, I have made a api with many endpoints like memes, animal images,&lt;br&gt;
text manipulation, image manipulation, url shortner, fake data, and many more.&lt;/p&gt;

&lt;p&gt;The project is open source so people can learn from it.&lt;/p&gt;

&lt;p&gt;Github - &lt;a href="https://github.com/beCoditive/Becoditive-API"&gt;https://github.com/beCoditive/Becoditive-API&lt;/a&gt;&lt;br&gt;
API - &lt;a href="https://api.becoditive.xyz/"&gt;https://api.becoditive.xyz/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Staring the Page will be really helpful to make the project grow.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>becoditive</category>
      <category>api</category>
    </item>
    <item>
      <title>In-depth Interview Questions</title>
      <author>Krowser Web Services </author>
      <pubDate>Fri, 21 May 2021 09:42:43 +0000</pubDate>
      <link>https://dev.to/krowser/in-depth-interview-questions-eg4</link>
      <guid>https://dev.to/krowser/in-depth-interview-questions-eg4</guid>
      <description>&lt;p&gt;In-depth questions are used to evaluate your work ethic in your chosen profession. They also help hiring managers determine how you solve problems and handle certain situations.&lt;/p&gt;

&lt;p&gt;This article is a continuation of the previous article we published:&lt;br&gt;
&lt;a href="https://dev.to/krowser/interview-questions-about-experience-and-background-2h63/"&gt;https://dev.to/krowser/interview-questions-about-experience-and-background-2h63/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;• Tell me about your typical day in your current or most recent role as a developer.&lt;br&gt;
• Have you ever had a failed project? Give me an example and explain why you think it was a failure. What would you have done differently to ensure its success?&lt;br&gt;
• How do you prioritize your tasks as a developer?&lt;br&gt;
• What do you hope to learn from your manager?&lt;br&gt;
• If we gave you several tasks due at the end of the day and you weren't able to finish them in time, how would you handle this situation?&lt;br&gt;
• Can you briefly tell me about some projects you worked on recently and the approach you took from start to finish?&lt;br&gt;
• Tell me about a tough development problem you've had in the past and how you solved it.&lt;br&gt;
• Is there anything you would change about how you performed in your most recent role? Why?&lt;br&gt;
• Why should we choose you for this position?&lt;br&gt;
• Tell me about a time when miscommunication impacted one of your projects. How did you handle it?&lt;br&gt;
• Describe a time when you experienced a significant project change last minute. How did you handle it and complete the project on time?&lt;/p&gt;

&lt;p&gt;In our next post, we would be sharing interview questions with sample answers.&lt;/p&gt;

</description>
      <category>hiring</category>
      <category>career</category>
    </item>
    <item>
      <title>Solution: Find and Replace Pattern</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 21 May 2021 09:15:17 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-find-and-replace-pattern-2hm</link>
      <guid>https://dev.to/seanpgallivan/solution-find-and-replace-pattern-2hm</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/find-and-replace-pattern/discuss/1221188"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-890-medium-find-and-replace-pattern"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/find-and-replace-pattern/"&gt;Leetcode Problem #890 (&lt;em&gt;Medium&lt;/em&gt;): Find and Replace Pattern&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a list of strings &lt;code&gt;words&lt;/code&gt; and a string &lt;code&gt;pattern&lt;/code&gt;, return &lt;em&gt;a list of &lt;code&gt;words[i]&lt;/code&gt; that match &lt;code&gt;pattern&lt;/code&gt;&lt;/em&gt;. You may return the answer in &lt;strong&gt;any order&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A word matches the pattern if there exists a permutation of letters &lt;code&gt;p&lt;/code&gt; so that after replacing every letter &lt;code&gt;x&lt;/code&gt; in the pattern with &lt;code&gt;p(x)&lt;/code&gt;, we get the desired word.&lt;/p&gt;

&lt;p&gt;Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;["mee","aqq"]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;"mee" matches the pattern because there is a permutation {a -&amp;gt; m, b -&amp;gt; e, ...}.&lt;br&gt;"ccc" does not match the pattern because {a -&amp;gt; c, b -&amp;gt; c, ...} is not a permutation, since a and b map to the same letter.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;words = ["a","b","c"], pattern = "a"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;["a","b","c"]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= pattern.length &amp;lt;= 20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= words.length &amp;lt;= 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;words[i].length == pattern.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pattern&lt;/code&gt; and &lt;code&gt;words[i]&lt;/code&gt; are lowercase English letters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Right away, we can realize that if we can remap characters in an attempt to match the pattern, it doesn't actually matter which characters map to other characters, just that the locations are consistent.&lt;/p&gt;

&lt;p&gt;At this point, then, the goal is to make the comparison as easy as possible. To do that, we can reimagine the words as an alphabetic sequence, where the first new character we come across is always &lt;strong&gt;masked&lt;/strong&gt; to &lt;strong&gt;"a"&lt;/strong&gt;, the second to &lt;strong&gt;"b"&lt;/strong&gt;, and so on. If we apply this same process to the &lt;strong&gt;pattern&lt;/strong&gt; first, then it should be much easier to compare the words to the &lt;strong&gt;pattern&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, we can define a helper function to &lt;strong&gt;translate&lt;/strong&gt; characters for us. We'll have to create a &lt;strong&gt;map&lt;/strong&gt; or &lt;strong&gt;array&lt;/strong&gt; structure (&lt;strong&gt;codex&lt;/strong&gt;) to keep track of the character mapping for a given word. The &lt;strong&gt;translate&lt;/strong&gt; function will then check to see if the character has already been mapped, and if so, &lt;strong&gt;return&lt;/strong&gt; its mapped value. If not, it assigns it the next unused alphabetic value.&lt;/p&gt;

&lt;p&gt;We can then easily &lt;strong&gt;translate&lt;/strong&gt; the &lt;strong&gt;pattern&lt;/strong&gt; into a &lt;strong&gt;cipher&lt;/strong&gt; mask which we can then &lt;strong&gt;compare&lt;/strong&gt; to each &lt;strong&gt;word&lt;/strong&gt; in &lt;strong&gt;words&lt;/strong&gt; using another helper function. The &lt;strong&gt;compare&lt;/strong&gt; function will clear the &lt;strong&gt;codex&lt;/strong&gt; for each &lt;strong&gt;word&lt;/strong&gt;, then we can compare each character of &lt;strong&gt;word&lt;/strong&gt; to the corresponding character in &lt;strong&gt;cipher&lt;/strong&gt;. If at any time we fail to match, we can quickly &lt;strong&gt;return&lt;/strong&gt; out of the comparison and continue with the next &lt;strong&gt;word&lt;/strong&gt;. If the translated &lt;strong&gt;word&lt;/strong&gt; fully matches &lt;strong&gt;cipher&lt;/strong&gt;, it can be added to our answer array (&lt;strong&gt;ans&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Then we can &lt;strong&gt;return ans&lt;/strong&gt; once we're done.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N * M)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of words and &lt;strong&gt;M&lt;/strong&gt; is the length of each &lt;strong&gt;word&lt;/strong&gt;/&lt;strong&gt;pattern&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;strong&gt;Space Complexity: O(M)&lt;/strong&gt; for the &lt;strong&gt;codex&lt;/strong&gt;&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;or &lt;strong&gt;O(N + M)&lt;/strong&gt; if you count the space of the output (&lt;strong&gt;ans&lt;/strong&gt;)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;findAndReplacePattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;codex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="nx"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compare&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="nx"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;findAndReplacePattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Character&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Character&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findAndReplacePattern&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;codex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toCharArray&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="nf"&gt;translate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;findAndReplacePattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;unordered_map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;codex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>A few Markdown tips</title>
      <author>Siddharth</author>
      <pubDate>Fri, 21 May 2021 08:59:56 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/a-few-markdown-tips-2db1</link>
      <guid>https://dev.to/siddharthshyniben/a-few-markdown-tips-2db1</guid>
      <description>&lt;p&gt;Here are a few markdown tricks which I recently discovered&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-a-button"&gt;
  &lt;/a&gt;
  Make a button
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://dev.to/siddharthshyniben"&gt;Button&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;center&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://dev.to/siddharthshyniben"&gt;Button&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;/center&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://dev.to/siddharthshyniben"&gt;Button&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://dev.to/siddharthshyniben"&gt;Group&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Doesn't that look cool? &lt;/p&gt;

&lt;p&gt;It's just a hack of the table. Here's the source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;| &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://dev.to/siddharthshyniben&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; |
|----------|
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for groups:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;| &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://dev.to/siddharthshyniben&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; | &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://dev.to/siddharthshyniben&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; |
|----------|----------|
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out &lt;a href="#centering"&gt;Centering&lt;/a&gt; for how to center stuff&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-a-box"&gt;
  &lt;/a&gt;
  Make a box
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pulvinar vehicula erat quis tincidunt. Mauris sed elementum leo. Quisque ex neque, ullamcorper ut quam at, aliquet vehicula dolor. Donec nec ultricies mauris. Nam eros nisl, placerat sit amet gravida at, condimentum sed justo. Duis eget placerat diam. Duis sed turpis non erat porta vehicula ac non massa. Maecenas ac turpis quis nibh dapibus hendrerit. Phasellus a iaculis dolor, ut cursus nibh. Cras et risus ut mauris accumsan imperdiet vel eu dolor. Aliquam porta tortor lectus, sed elementum augue lacinia id.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Important Header!&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pulvinar vehicula erat quis tincidunt. Mauris sed elementum leo. Quisque ex neque, ullamcorper ut quam at, aliquet vehicula dolor. Donec nec ultricies mauris. Nam eros nisl, placerat sit amet gravida at, condimentum sed justo. Duis eget placerat diam. Duis sed turpis non erat porta vehicula ac non massa. Maecenas ac turpis quis nibh dapibus hendrerit. Phasellus a iaculis dolor, ut cursus nibh. Cras et risus ut mauris accumsan imperdiet vel eu dolor. Aliquam porta tortor lectus, sed elementum augue lacinia id.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Once again, this is also a hack of the table.&lt;/p&gt;

&lt;p&gt;Here's the source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;| Lorem ipsum... |
|  :------:  |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the one with the header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;| Important Header! |
|  :------:  |
| Lorem ipsum... |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#centering"&gt;
  &lt;/a&gt;
  Centering
&lt;/h2&gt;


&lt;center&gt;
&lt;br&gt;
To center stuff, wrap them in center tags. The only problem is that you can't type markdown in center tags. You need to type in HTML. &lt;br&gt;&lt;br&gt;

&lt;p&gt;On GitHub, you can use &lt;code&gt;&amp;lt;p align="center"&amp;gt;&lt;/code&gt; instead&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;h2&gt;
  &lt;a href="#linking-anywhere"&gt;
  &lt;/a&gt;
  Linking anywhere
&lt;/h2&gt;

&lt;p&gt;(Dummy text to separate other stuff from the link)&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pulvinar vehicula erat quis tincidunt. Mauris sed elementum leo. Quisque ex neque, ullamcorper ut quam at, aliquet vehicula dolor. Donec nec ultricies mauris. Nam eros nisl, placerat sit amet gravida at, condimentum sed justo. Duis eget placerat diam. Duis sed turpis non erat porta vehicula ac non massa. Maecenas ac turpis quis nibh dapibus hendrerit. Phasellus a iaculis dolor, ut cursus nibh. Cras et risus ut mauris accumsan imperdiet vel eu dolor. Aliquam porta tortor lectus, sed elementum augue lacinia id&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pulvinar vehicula erat quis tincidunt. Mauris sed elementum leo. Quisque ex neque, ullamcorper ut quam at, aliquet vehicula dolor. Donec nec ultricies mauris. Nam eros nisl, placerat sit amet gravida at, condimentum sed justo. Duis eget placerat diam. Duis sed turpis non erat porta vehicula ac non massa. Maecenas ac turpis quis nibh dapibus hendrerit. Phasellus a iaculis dolor, ut cursus nibh. Cras et risus ut mauris accumsan imperdiet vel eu dolor. Aliquam porta tortor lectus, sed elementum augue lacinia id&lt;/p&gt;

&lt;p&gt;Here's a &lt;a&gt;link which goes nowhere&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Dummy text to separate other stuff from the link)&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pulvinar vehicula erat quis tincidunt. Mauris sed elementum leo. Quisque ex neque, ullamcorper ut quam at, aliquet vehicula dolor. Donec nec ultricies mauris. Nam eros nisl, placerat sit amet gravida at, condimentum sed justo. Duis eget placerat diam. Duis sed turpis non erat porta vehicula ac non massa. Maecenas ac turpis quis nibh dapibus hendrerit. Phasellus a iaculis dolor, ut cursus nibh. Cras et risus ut mauris accumsan imperdiet vel eu dolor. Aliquam porta tortor lectus, sed elementum augue lacinia id&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pulvinar vehicula erat quis tincidunt. Mauris sed elementum leo. Quisque ex neque, ullamcorper ut quam at, aliquet vehicula dolor. Donec nec ultricies mauris. Nam eros nisl, placerat sit amet gravida at, condimentum sed justo. Duis eget placerat diam. Duis sed turpis non erat porta vehicula ac non massa. Maecenas ac turpis quis nibh dapibus hendrerit. Phasellus a iaculis dolor, ut cursus nibh. Cras et risus ut mauris accumsan imperdiet vel eu dolor. Aliquam porta tortor lectus, sed elementum augue lacinia id&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pulvinar vehicula erat quis tincidunt. Mauris sed elementum leo. Quisque ex neque, ullamcorper ut quam at, aliquet vehicula dolor. Donec nec ultricies mauris. Nam eros nisl, placerat sit amet gravida at, condimentum sed justo. Duis eget placerat diam. Duis sed turpis non erat porta vehicula ac non massa. Maecenas ac turpis quis nibh dapibus hendrerit. Phasellus a iaculis dolor, ut cursus nibh. Cras et risus ut mauris accumsan imperdiet vel eu dolor. Aliquam porta tortor lectus, sed elementum augue lacinia id&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pulvinar vehicula erat quis tincidunt. Mauris sed elementum leo. Quisque ex neque, ullamcorper ut quam at, aliquet vehicula dolor. Donec nec ultricies mauris. Nam eros nisl, placerat sit amet gravida at, condimentum sed justo. Duis eget placerat diam. Duis sed turpis non erat porta vehicula ac non massa. Maecenas ac turpis quis nibh dapibus hendrerit. Phasellus a iaculis dolor, ut cursus nibh. Cras et risus ut mauris accumsan imperdiet vel eu dolor. Aliquam porta tortor lectus, sed elementum augue lacinia id&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras pulvinar vehicula erat quis tincidunt. Mauris sed elementum leo. Quisque ex neque, ullamcorper ut quam at, aliquet vehicula dolor. Donec nec ultricies mauris. Nam eros nisl, placerat sit amet gravida at, condimentum sed justo. Duis eget placerat diam. Duis sed turpis non erat porta vehicula ac non massa. Maecenas ac turpis quis nibh dapibus hendrerit. Phasellus a iaculis dolor, ut cursus nibh. Cras et risus ut mauris accumsan imperdiet vel eu dolor. Aliquam porta tortor lectus, sed elementum augue lacinia id&lt;/p&gt;

&lt;p&gt;Now here's a &lt;a href="#link"&gt;link which links to the earlier link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, create a link which has a name attribute (something like &lt;code&gt;"something-here"&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Then, you can link to it like &lt;code&gt;[Link](#name-attribut-content-here)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That's all for now. I might add a few more posts with some more ideas!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>markdown</category>
      <category>tips</category>
    </item>
    <item>
      <title>Why product development is the beautiful game</title>
      <author>rich_marshall</author>
      <pubDate>Fri, 21 May 2021 08:15:21 +0000</pubDate>
      <link>https://dev.to/ctowestmidlands/why-product-development-is-the-beautiful-game-30p8</link>
      <guid>https://dev.to/ctowestmidlands/why-product-development-is-the-beautiful-game-30p8</guid>
      <description>&lt;p&gt;Building Teams&lt;/p&gt;

&lt;p&gt;Firstly, I need to apologise to any football fans out there. I’m the first to admit I don’t follow the “Beautiful Game” but I keep turning back to it as a useful example. I could use many other team sports as a comparison instead but football seems to be the most universal. &lt;/p&gt;

&lt;p&gt;One of the greatest challenges and in all honesty, frustrations, I’ve experienced over the past years is the treatment of highly skilled, talented, creative people as “resources”. I can’t begin to count the number of times a financial director or project manager has asked, suggested or requested “resources to be re-assigned, so a project goes faster”. &lt;/p&gt;

&lt;p&gt;So much of this thinking dates back to the emergence of heavy-duty industrial and civil engineering projects where dockworkers would line up for selection in the morning and the one’s who could set the most rivets would be chosen that day. There is an increasing body of evidence and library of resources that demonstrate that building software products, especially those delivered in through a SaaS model, needs to be planed and managed very differently - I won’t go into the details of that here, but if you’re interested I can’t recommend &lt;a href="https://soonersaferhappier.com/"&gt;Sooner, Safer, Happier&lt;/a&gt; enough.&lt;/p&gt;

&lt;p&gt;It was during one of these many discussion that I was searching for a way to describe what they were requesting and a football team came to mind. &lt;/p&gt;

&lt;p&gt;You’ll have to bear with me, because as I said, I don’t follow football but I know for a fact there have been many examples of where “super teams” have failed. It doesn’t matter if you put the worlds 11 best players in the same team; you’re not guaranteed success. More likely you’ll get 11 individuals, all of whom want to prove they’re the best. &lt;/p&gt;

&lt;p&gt;The role of the manager is well understood in football, as is that of coach and captain. In fact all these roles are recognised as being vital to the success of a team and yet in software development, (from the outside, at least) these roles are often absent or seriously undervalued. &lt;/p&gt;

&lt;p&gt;It’s also true to say that you can’t simply move a player from another team and expect instant success. Teams are carefully selected from squads and each player within that team is selected for the role they need to play and hw their skills and talents benefit the team. Managers will also pay attention to how any player’s deficits might affects others - people always have both good and bad traits.&lt;/p&gt;

&lt;p&gt;I should all emphasise the value of cross-functional teams over silos squads of developers. Teams need to have all the skills in them, in order to be successful and you’re unlikely to find all of those skills in one person. For a football team to be successful, you need strikers, midfield, defenders and goal keepers - not to mention the coach, captain and manager roles. Product development teams are the same. 11 software developers is not going to solve the problem. You need product managers, designers, and often other subject matter experts in there too. Yes, you can get them on loan in the same way you can bring a substitute on to the pitch, but they still need to be part of the squad and know the team inside out. &lt;/p&gt;

&lt;p&gt;I’m pretty happy with this analogy so far but how much can I push it…!? The rules of football dictate 11 people on the pitch from one team. So you can’t just keep adding more people to win. Product development teams don’;t have the same rules applied  - at least officially, but there is significant evidence (start with Dunbar’s number and go from there) that there &lt;em&gt;is&lt;/em&gt; a practical upper limit to the size of a high performing team and adding more people doesn’t improve performance but often makes things worse. If you tried putting 100 players on the pitch everyone would trip over each other!  There’s also a lot to be said about how a team actually work together. It’s still common practice to attend a standup and hear from each individual what they were working on and their progress, their blockers. It’s routine to see a team have each developer working on a different problem and then request support from their peers, who are in a different context. Some might see this is giving a football team a ball each - more opportunity to score a goal! But that’s far from the actual outcome. It also increases the likelihood of an own goal and who are you going to pass to when you get tackled. In fact, it’s not even like that! It’s more akin to expecting each individual player to be on a different pitch, playing a different game and we all know how that’s going to work out. &lt;/p&gt;

&lt;p&gt;I’m pleased to say there is a growing body of evidence to shift thinking but it’s high time that we and our peers stop thinking of software engineers as being heavy engineering. That we stop using methods and languages that describe what we produce as projects like railway lines, with the idea that it’s finished when it reaches it’s destination and we can leave it for the next 100 years and most importantly, that we stop treating people with thoughts, ideas and passion as faceless resources, to be dragged and dropped at will where ever there’s a problem of a task to be completed. &lt;/p&gt;

&lt;p&gt;Instead we need to think of our products and services as more akin to the service that runs on the railways and or teams as complex, ever evolving people who need support, coaching and management to work most effectively. &lt;/p&gt;

&lt;p&gt;Sure, you can keep moving players from one team to the next or put a midfielder in goal or even send every player to have a different game but you’re not going to win the cup or the league that way and you’re probably going to get relegated pretty quickly if you try it. &lt;/p&gt;

&lt;p&gt;Header image courtesy &lt;a href=""&gt;Chris Leipelt&lt;/a&gt;&lt;/p&gt;

</description>
      <category>team</category>
    </item>
    <item>
      <title>Migration from JCenter to Maven Central</title>
      <author>Caio Faustino</author>
      <pubDate>Fri, 21 May 2021 08:09:27 +0000</pubDate>
      <link>https://dev.to/adyen/migration-from-jcenter-to-maven-central-4hbg</link>
      <guid>https://dev.to/adyen/migration-from-jcenter-to-maven-central-4hbg</guid>
      <description>&lt;p&gt;Everything started on the cold evening of February 3rd, Android Twitter was suddenly agitated with the news. &lt;a href="https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/"&gt;JCenter is shutting down!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since I can remember, JCenter has been the default repository for all Android libraries.&lt;/p&gt;

&lt;p&gt;Ever since Android development was most commonly done on Eclipse IDE, when you create a new project, the template will have generated the whole project structure, which includes the Gradle files, and in those files a small statement that says&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;repositories &lt;span class="o"&gt;{&lt;/span&gt;
    jcenter&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Over the years Google decided to have their own Maven repository, so they added &lt;code&gt;google()&lt;/code&gt; to that statement as well. But for simple projects, that’s all you needed. And because of that, it became common that newly developed libraries would also try to be included in JCenter for convenience. It’s a well-known open-source repository, it also mirrors Maven Central, and developers don’t need to worry about adding a new repository to their project. Easy right?&lt;/p&gt;

&lt;p&gt;Well, what a big shock when all of a sudden we all get the news that JCenter will soon be gone! What about all the thousands of libraries that are there? How will I build my project now?&lt;/p&gt;

&lt;p&gt;As developers, we all have tasks where we underestimate the amount of effort it’s going to require, right? That’s normal, estimations are pretty hard. We might not fully understand the requirements, we might find problems along the way, or we might simply not grasp the sheer scope of the task ahead of us. Well, for me, this task was a bit of all of the above.&lt;/p&gt;

&lt;p&gt;And so the journey begins…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deciding-where-to-migrate"&gt;
  &lt;/a&gt;
  Deciding where to migrate
&lt;/h2&gt;

&lt;p&gt;One of the beautiful things about being an Android developer is the community around it. I think the fact that the OS is Open Source has pushed the mentality of ownership to everyone in one way or another. Most people will never dig into the Framework code (although it is an interesting experience), but knowing that you can is already empowering. So no later than the next day, there were already great guides and blog posts on how to migrate your project to another widely used open-source repository, Maven Central.&lt;/p&gt;

&lt;p&gt;The decision to move our public Android libraries ( &lt;a href="https://github.com/Adyen/adyen-android"&gt;Components&lt;/a&gt; and &lt;a href="https://github.com/Adyen/adyen-3ds2-android"&gt;3DS2 SDK&lt;/a&gt;) from JCenter to Maven Central seemed like a no-brainer. But here at Adyen, we like to “include &lt;strong&gt;different people&lt;/strong&gt; to sharpen our ideas”, so I started to ask around and check if this was indeed the best approach. One thing we also considered was to do what Google did and host our own repository, this would protect us from having to worry about the external service shutting down on us again.&lt;/p&gt;

&lt;p&gt;First I reached out to our awesome Security team to explain the situation and see if they had any concerns, and talk about the pros and cons of each approach. There were a few questions about making sure that our release process was solid, and how hosting our own repository actually looks like.&lt;/p&gt;

&lt;p&gt;So I reached out to our Infrastructure team to get a feeling for the feasibility of this approach. We had some nice discussions and they were pretty enthusiastic about the idea as well. They presented a well-structured plan on how we could use a Nexus repository with good scalability and reliability in mind. But in the end, we all agreed that this was not really necessary and that leveraging the existing infrastructure of Maven Central was a good approach for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-the-investigation"&gt;
  &lt;/a&gt;
  Starting the investigation
&lt;/h2&gt;

&lt;p&gt;Like I mentioned earlier, there were a few blog posts about moving to Maven Central. One of the best ones for me was this post by Márton Braun. In it, Márton describes the whole process of how to upload a library to the Central repository. In summary, this includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Registering a &lt;a href="https://issues.sonatype.org/"&gt;Jira&lt;/a&gt; account with &lt;a href="https://www.sonatype.com/"&gt;Sonatype&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Claiming ownership of your namespace&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting up a &lt;a href="https://gnupg.org/"&gt;GPG&lt;/a&gt; key to sign your artifacts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting up the Gradle task in your project that publishes the release.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to use the &lt;a href="https://oss.sonatype.org/"&gt;Nexus Repository Manager&lt;/a&gt; on &lt;a href="https://central.sonatype.org/pages/ossrh-guide.html"&gt;OSSRH&lt;/a&gt; to make your release public.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of this would have been a huge help to anyone already, and it was pretty similar to the setup we already had for JCenter so I felt pretty confident. But wait, there’s more! Márton also explains how you can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use an extra &lt;a href="https://github.com/Codearte/gradle-nexus-staging-plugin"&gt;gradle plugin&lt;/a&gt; to automate the public release of your artifact.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automate all of the above using &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This was simply perfect! We already use GitHub Actions to automate our CI process on Components, so I could simply follow along and adjust any improvements I could find.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migrating-the-release-process"&gt;
  &lt;/a&gt;
  Migrating the release process
&lt;/h2&gt;

&lt;p&gt;This seemed pretty straightforward. I opened my Sonatype account, used the same namespace we already had set up for our &lt;a href="https://github.com/Adyen/adyen-java-api-library"&gt;Java API library&lt;/a&gt;Java API library, and started working on the CI adjustments. Soon enough I opened a &lt;a href="https://github.com/Adyen/adyen-android/pull/356"&gt;PR&lt;/a&gt; and felt like this was going to be a piece of cake, just a couple more details to go. But there was one small detail I forgot to take into consideration…&lt;/p&gt;

&lt;p&gt;What about the old artifacts? The versions that are already released.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migrating-the-old-artifacts"&gt;
  &lt;/a&gt;
  Migrating the old artifacts
&lt;/h2&gt;

&lt;p&gt;Ah, this must surely be another common issue for Android Developers, lots of people need to migrate their libraries, so blog posts to the rescue!&lt;/p&gt;

&lt;p&gt;So initially I found &lt;a href="https://www.marcogomiero.com/posts/2021/move-libray-jcenter-to-maven/"&gt;this&lt;/a&gt; post by Marco Gomiero where he suggests the following approach:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to the JCenter website and click on the files you want to download.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sign the files one by one using the command-line GPG tool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to OSSRH and click on the option to manually upload artifacts.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That sounds pretty good, pretty straightforward. I did it once, and it worked! Brilliant! Now I just need to repeat this process…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1134 times.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is where I started to worry a little bit. See, we have several modules in our library to make it more modular and each module is its own little library. Each one has several versions, and as it turns out, this scales up pretty quickly. The solution is to try and automate this process somehow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automating-the-migration"&gt;
  &lt;/a&gt;
  Automating the migration
&lt;/h2&gt;

&lt;p&gt;Let me start by saying that I’m definitely not the best at scripting. My knowledge of Shell scripting is very basic at best, but this seemed like a good opportunity to learn by doing, so I started digging in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#downloading-the-artifacts"&gt;
  &lt;/a&gt;
  Downloading the artifacts
&lt;/h3&gt;

&lt;p&gt;The first step seemed to be to download all of our existing artifacts from JCenter. The most common and powerful tool to download stuff from the internet seems to be curl so with only one command I could do a lot.&lt;/p&gt;

&lt;p&gt;First I noticed that if the URL is a folder, the repository would return a simple HTML with the links to the next folders or files. So first I try to filter that out and find the links inside it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;curl_result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nv"&gt;$download_path&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$curl_result&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;&lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I clean up the result a bit and use it to move on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;for &lt;/span&gt;f &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$filter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  &lt;/span&gt;&lt;span class="nv"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"href="&lt;/span&gt;
  &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$f&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$pattern&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So with this, I was able to write a small script that navigates the repository folders. and with a small assumption of what should be a file or a folder, I could either download it or navigate inside and start the script again recursively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;a-z][a-z][a-z] &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Downloading file: &lt;/span&gt;&lt;span class="nv"&gt;$download_path$path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$local_path&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl &lt;span class="nt"&gt;-O&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$download_path$path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Creating folder at: &lt;/span&gt;&lt;span class="nv"&gt;$local_path$path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-pv&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$local_path&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nv"&gt;$script_path&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$download_path$path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$local_path$path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the end, I have a local folder with the same structure as the repository and all the files were downloaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/caiofaustino/1c93708878e2088a6a33ad042d3c9ab3"&gt;Here is the full script&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signing-the-artifacts"&gt;
  &lt;/a&gt;
  Signing the artifacts
&lt;/h3&gt;

&lt;p&gt;JCenter didn’t require that the artifacts were signed, but due to changes in the release process over time, in our case, some were and some weren’t. Since this was an opportunity to start from scratch I decided to have a new key to sign all the artifacts, the old and the future ones.&lt;/p&gt;

&lt;p&gt;So I asked our internal security team to create an email dedicated to associate with the new signature and then used it to sign all of the files I had downloaded. A similar approach to the previous script worked well, just navigate the folders and sign the files with GPG.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gpg &lt;span class="nt"&gt;-ab&lt;/span&gt; &lt;span class="nt"&gt;--default-key&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="nv"&gt;$file_name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/caiofaustino/f59fcab599dc2529317c43ac9c6313b5"&gt;Here is the full script&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-the-artifacts"&gt;
  &lt;/a&gt;
  Uploading the artifacts
&lt;/h3&gt;

&lt;p&gt;Now all I had to do was upload the artifacts and the signatures to Maven Central. I thought my recursive script approach would work well again. But how could I upload the files? Probably curl would help me again.&lt;/p&gt;

&lt;p&gt;After some research, I found &lt;a href="https://support.sonatype.com/hc/en-us/articles/213465868-Uploading-to-a-Staging-Repository-via-REST-API"&gt;this post&lt;/a&gt; on the Sonatype support page that seemed like a good idea. With my profile ID and credentials at hand, I could make a POST call to OSSRH to create a staging repository. Then I could use that repository ID to upload the files. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="nt"&gt;-d&lt;/span&gt; @file.xml &lt;span class="nt"&gt;-u&lt;/span&gt; &lt;span class="nv"&gt;$username&lt;/span&gt;:&lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type:application/xml"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-v&lt;/span&gt; https://oss.sonatype.org/nexus/service/local/staging/profiles/&lt;span class="nv"&gt;$profile_id&lt;/span&gt;/start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this seemed to work fine in the beginning. I was able to open the repositories and upload the files. But then when I wanted to close the repository to publish it, OSSRH would give me errors. Invalid signatures, missing metadata. I was pretty lost at this point.&lt;/p&gt;

&lt;p&gt;I decided to reach out to the people that had helped me without knowing until now, the blog post writers! I was already following Márton on Twitter so I decided to send him a message to see if he knew anything about this process. Unfortunately, he didn’t, but after a few days, he messaged me back with another article he had found. My hope rekindled!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-the-artifacts-again"&gt;
  &lt;/a&gt;
  Uploading the artifacts… again.
&lt;/h3&gt;

&lt;p&gt;He had sent me &lt;a href="https://jeroenmols.com/blog/2021/03/24/migrate-artifacts-mavencentral/"&gt;this&lt;/a&gt; great article by &lt;a href="https://twitter.com/molsjeroen"&gt;Jeroen Mols&lt;/a&gt; that was pretty recent. Jeroen was facing the same problem as me, but he was much better at finding answers for it. This part specifically humbled me a bit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To sign and upload the artifacts to Maven Central, what better tool to use than Maven itself?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, I hadn’t even considered that. Unfortunately, I couldn’t directly use his script but it gave me a lot of insight into how I could approach the problem differently.&lt;/p&gt;

&lt;p&gt;First I tried to upload the files with the signatures already using &lt;code&gt;mvn deploy:deploy-file&lt;/code&gt;, but that didn’t work so well for some reason, so instead, I deleted my existing signature files and decided to mimic his approach.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;find &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;-type&lt;/span&gt; f &lt;span class="nt"&gt;-name&lt;/span&gt; &lt;span class="s1"&gt;'*.asc'&lt;/span&gt; &lt;span class="nt"&gt;-delete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The little trick for me was to set the new GPG key as the default signature key since I couldn’t specify the key as a parameter to Maven, so I created the configuration file for it. The file is located at &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt; and contains the line &lt;code&gt;default-key &amp;lt;your_key&amp;gt;&lt;/code&gt; in it.&lt;/p&gt;

&lt;p&gt;I also set up my credentials in the maven configuration file like Jeroen mentions in his post and started making some tests. Luckily he also mentions this &lt;a href="https://central.sonatype.org/pages/manual-staging-bundle-creation-and-deployment.html"&gt;Sonatype documentation&lt;/a&gt; a couple of times, and that’s where I could see he did a much better job than me at researching. This helped me in finding out how to also add the sources and javadocs files to my script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/

mvn gpg:sign-and-deploy-file &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-Durl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-DrepositoryId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ossrh &lt;span class="nt"&gt;-DpomFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ossrh-test-1.2.pom &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-Dfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ossrh-test-1.2-sources.jar &lt;span class="nt"&gt;-Dclassifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sources

mvn gpg:sign-and-deploy-file &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-Durl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-DrepositoryId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ossrh &lt;span class="nt"&gt;-DpomFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ossrh-test-1.2.pom &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-Dfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ossrh-test-1.2-javadoc.jar &lt;span class="nt"&gt;-Dclassifier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;javadoc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/caiofaustino/314075ee3d3bef5da16c69dd3257f954"&gt;Here is the full snippet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I then found out I still had one more thing to solve, the POM file &lt;a href="https://central.sonatype.org/pages/requirements.html#sufficient-metadata"&gt;requirements&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adapting-pom-files"&gt;
  &lt;/a&gt;
  Adapting POM files
&lt;/h3&gt;

&lt;p&gt;Since we have several small libraries from different older release processes, there was not a standard I could rely on. So I created a template XML file with some placeholders to replace the original POM files. Shoutout to Rodrigo Rocco here at Adyen who helped me a LOT with writing this script.&lt;/p&gt;

&lt;p&gt;We read the original POM file to get some tags and replace them in the template file that has all the requirements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;artifact&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$pom_file&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'s/(&amp;lt;\/artifactId&amp;gt;).*/\1/g'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'s/.*(&amp;lt;artifactId&amp;gt;)/\1/g'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$pom_file&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'s/(&amp;lt;\/version&amp;gt;).*/\1/g'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'s/.*(&amp;lt;version&amp;gt;)/\1/g'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$pom_file&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;name | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'s/(&amp;lt;\/name&amp;gt;).*/\1/g'&lt;/span&gt; | &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s1"&gt;'s/.*(&amp;lt;name&amp;gt;)/\1/g'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/\&amp;lt;description\\&amp;gt;/,/\&amp;lt;\/description\&amp;gt;/'&lt;/span&gt; &lt;span class="nv"&gt;$pom_file&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'/\&amp;lt;dependencies\\&amp;gt;/,/\&amp;lt;\/dependencies\&amp;gt;/'&lt;/span&gt; &lt;span class="nv"&gt;$pom_file&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;$pom_template&lt;/span&gt; | &lt;span class="se"&gt;\&lt;/span&gt;
          &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s2"&gt;"s#%%%ARTIFACT%%%#&lt;/span&gt;&lt;span class="nv"&gt;$artifact&lt;/span&gt;&lt;span class="s2"&gt;#g"&lt;/span&gt; | &lt;span class="se"&gt;\&lt;/span&gt;
          &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s2"&gt;"s#%%%VERSION%%%#&lt;/span&gt;&lt;span class="nv"&gt;$version&lt;/span&gt;&lt;span class="s2"&gt;#g"&lt;/span&gt; | &lt;span class="se"&gt;\&lt;/span&gt;
          &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s2"&gt;"s#%%%NAME%%%#&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="s2"&gt;#g"&lt;/span&gt; | &lt;span class="se"&gt;\&lt;/span&gt;
          &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s2"&gt;"s#%%%DESCRIPTION%%%#&lt;/span&gt;&lt;span class="nv"&gt;$description&lt;/span&gt;&lt;span class="s2"&gt;#g"&lt;/span&gt; | &lt;span class="se"&gt;\&lt;/span&gt;
          &lt;span class="nb"&gt;sed&lt;/span&gt; &lt;span class="s2"&gt;"s#%%%DEPENDENCIES%%%#&lt;/span&gt;&lt;span class="nv"&gt;$dependencies&lt;/span&gt;&lt;span class="s2"&gt;#g"&lt;/span&gt; | &lt;span class="se"&gt;\&lt;/span&gt;
          xmllint - &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$pom_file&lt;/span&gt;&lt;span class="s2"&gt;.new"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/caiofaustino/d1435a529cd80193fe420866f4f6ed2b"&gt;Here&lt;/a&gt; is the full snippet and &lt;a href="https://gist.github.com/caiofaustino/ac9c536b9f1f5c13ff610f63b45da1e7"&gt;here&lt;/a&gt; is the template&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So finally with the correct POM files, the correct signatures, the right tool, lot of help from a lot of people, running the upload script for approximately 8 hours, a result log file with 130.000 lines, all the 1134 versions have been successfully uploaded to Maven Central.&lt;/p&gt;

&lt;p&gt;It’s been a wild ride, but I learned a lot in the process. As an Android Developer, this is not what we are used to dealing with every day, but it’s exactly the kind of challenge that makes us learn and grow as professionals. I’m super happy that here at Adyen we get the ownership and the encouragement to face them head-on, and also get to have fun while doing it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-careers-at-adyen"&gt;
  &lt;/a&gt;
  Technical careers at Adyen
&lt;/h2&gt;

&lt;p&gt;We are on the lookout for talented engineers and technical people to help us build the infrastructure of global commerce!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.adyen.com/careers/vacancies/development"&gt;Check out developer vacancies&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-newsletter"&gt;
  &lt;/a&gt;
  Developer newsletter
&lt;/h2&gt;

&lt;p&gt;Get updated on new blog posts and other developer news.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.adyen.com/newsletter/developers"&gt;Subscribe now&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://www.adyen.com/blog/migration-from-jcenter-to-maven-central"&gt;https://www.adyen.com&lt;/a&gt; on May 19, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>maven</category>
      <category>gradle</category>
      <category>migration</category>
    </item>
    <item>
      <title>JS Iterator objects</title>
      <author>Diego Cachafeiro</author>
      <pubDate>Fri, 21 May 2021 08:08:00 +0000</pubDate>
      <link>https://dev.to/producthackers/js-iterator-objects-19ne</link>
      <guid>https://dev.to/producthackers/js-iterator-objects-19ne</guid>
      <description>&lt;p&gt;When we want to iterate through an object we usually fall in the trap (or not) to use always the same iterators, like &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt;, but there is a whole world of &lt;strong&gt;iterators&lt;/strong&gt; in JS each one with their respective functions and differences between each other.&lt;/p&gt;

&lt;p&gt;In this post I will explain to you practical uses and differences between &lt;code&gt;.map()&lt;/code&gt;,&lt;code&gt;.filter()&lt;/code&gt;, &lt;code&gt;.find()&lt;/code&gt;, &lt;code&gt;.reduce()&lt;/code&gt; and &lt;code&gt;.forEach()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-starting-with-map"&gt;
  &lt;/a&gt;
  1. Starting  with .map()
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.map()&lt;/code&gt; iterator will go through the elements in the array to &lt;strong&gt;populate&lt;/strong&gt; a new array with the results of the function you provide inside of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = ["name1", "name2", "name3"];

// pass a function to map
const map = array.map((x, i) =&amp;gt; {
  return x.concat(` surname${i+1}`);
});

console.log(map);
// expected output: Array ["name1 surname1", "name2 surname2", "name3 surname3"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the &lt;code&gt;.map()&lt;/code&gt; iterator creates a new array populated with what we passed inside of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-raw-filter-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;.filter()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.filter()&lt;/code&gt; iterates through the array and will return a new array populated with the elements that passes the &lt;strong&gt;condition&lt;/strong&gt; provided inside of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = ["name1", "name2", "name3"];

// pass a function to filter
const filter = array.filter(x =&amp;gt; !x.includes(2));

console.log(map);
// expected output: Array ["name1", "name3"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-raw-find-endraw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;.find()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.find()&lt;/code&gt; method will return the &lt;strong&gt;first&lt;/strong&gt; element that passes the condition inside of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = ["name1", "name2", "name3"];

// pass a function to filter
const find = array.find(x =&amp;gt; x.includes(2));

console.log(map);
// expected output: Array "name2"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-raw-reduce-endraw-"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;.reduce()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.reduce()&lt;/code&gt; method will execute a reducer function that you will provide inside of it, this will result in a &lt;strong&gt;single output value&lt;/strong&gt; from the multiple elements inside of the array.&lt;/p&gt;

&lt;p&gt;The reducer function can take four arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Accumulator&lt;/li&gt;
&lt;li&gt;Current Value&lt;/li&gt;
&lt;li&gt;Current Index&lt;/li&gt;
&lt;li&gt;Source Array
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const reducer = (sum, val) =&amp;gt; sum + val;
const initialValue = 0;
const arr = [1, 3, 5, 7];

const sumReduce = arr.reduce(reducer, initialValue);
console.log(sumReduce);
// 16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-raw-foreach-endraw-"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;.forEach()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;.forEach()&lt;/code&gt; method will execute a function for each one of the elements in the array that iterates.&lt;/p&gt;

&lt;p&gt;In case you are wondering why ever use foreach instead of the other ones, well forEach is more of a &lt;em&gt;generic tool&lt;/em&gt; provided by Js, I'll tell you to use it when you don't have any better and more specific tool as we saw in the previous methods.&lt;/p&gt;

&lt;p&gt;For example, the one that you can confuse it more is with &lt;code&gt;.map()&lt;/code&gt; the difference between them is that map is for modifying the array and returning modified, while &lt;code&gt;.forEach()&lt;/code&gt; can iterate through the array with any necessary modification like just console.log the array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWKpvqm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7kyqqdyrtvhu7ea43vr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWKpvqm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7kyqqdyrtvhu7ea43vr.gif" alt="tenor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well I hope this article helped you and provided you with a little more knowledge for your day to day coding, any suggestions or comments are welcome in the comment section.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Javascript session storage - beginner's guide</title>
      <author>Arika O</author>
      <pubDate>Fri, 21 May 2021 07:51:30 +0000</pubDate>
      <link>https://dev.to/arikaturika/javascript-session-storage-beginner-s-guide-1i5e</link>
      <guid>https://dev.to/arikaturika/javascript-session-storage-beginner-s-guide-1i5e</guid>
      <description>&lt;p&gt;In the last article we talked about &lt;code&gt;local storage&lt;/code&gt; (see the link above), what is it and how can we use it. Today we'll talk about &lt;code&gt;session storage&lt;/code&gt;. It is similar to &lt;code&gt;local storage&lt;/code&gt; and it can be used for the same things but there are a few differences between these two: the biggest is that, unlike the data found in the &lt;code&gt;local storage&lt;/code&gt; which never expires, the one in the &lt;code&gt;session storage&lt;/code&gt; gets cleared when the page session ends. Another difference is that it is tab specific, even for pages sharing the same domain (opening multiple pages with the same URL will create a new &lt;code&gt;session storage&lt;/code&gt; for each tab). &lt;/p&gt;

&lt;p&gt;I'm using Chrome for this article, but for most browsers, the way we can access the &lt;code&gt;session storage&lt;/code&gt; is similar. In Chrome, open the console (F12), navigate to &lt;code&gt;Application&lt;/code&gt; and in the left side menu you will see the &lt;code&gt;Storage&lt;/code&gt; section. Pick &lt;code&gt;Session Storage&lt;/code&gt; and expand the dropdown. You shoudl see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ojIIX6yY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zy1b9sjj60dj67mrnww5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ojIIX6yY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zy1b9sjj60dj67mrnww5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks very similar to &lt;code&gt;local storage&lt;/code&gt; and it stores data in the same way, using &lt;code&gt;key - value&lt;/code&gt; pairs. The way we access it is using the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;windows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;

&lt;span class="c1"&gt;// or&lt;/span&gt;

&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have methods we can use to interact with the &lt;code&gt;session storage&lt;/code&gt; and we can perform operations like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adding an item:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Retrieveing an item:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Removing one particular item:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Clearing all the data in the &lt;code&gt;session storage&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now write some code. I will be using the console for that and you can follow along.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// We store today's date in the storage&lt;/span&gt;
&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weekDay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thursday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="c1"&gt;// We set some details about the user, using an object as a value &lt;/span&gt;
&lt;span class="c1"&gt;// First we need to convert the object to a string&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arika&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;profession&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Web developer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Now we set the value to the storage&lt;/span&gt;
&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The session storage should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvRqxaVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba5vtxx9j88fejk0lsiq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvRqxaVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba5vtxx9j88fejk0lsiq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's now retrieve something from the &lt;code&gt;session storage&lt;/code&gt;, delete an item and then clear the whole storage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// We retrieve the user details&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// We convert the string back to an object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUserDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// We delete the day from the storage&lt;/span&gt;
&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;weekDay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// We remove everything&lt;/span&gt;
&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the usage is pretty straight forward. Now you might ask yourself, since we already have the &lt;code&gt;local storage&lt;/code&gt;, why would we want to use the &lt;code&gt;session storage&lt;/code&gt;? For one thing, developers can use it to improves security, since the data will be deleted after the tab/ browser is closed (therefore, no third parties can access that data afterwards, unlike with &lt;code&gt;local storage&lt;/code&gt;). Another example would be the situation in which we want the current state of an UI to be session specific (say the user changed the page theme from light to dark but the next time they access the website or open another tab, we want them to see the initial state of the page). Generally, whenever you don't want the data to persist beyond a session, you should use &lt;code&gt;session storage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A VERY IMPORTANT THING TO REMEMBER ABOUT SESSION STORAGE&lt;/strong&gt;&lt;br&gt;
Even though the data gets removed after we close the tab/ browser, while storing it, &lt;code&gt;session storage&lt;/code&gt; is also vulnerable to XSS (cross-site scripting) attacks (just like &lt;code&gt;local storage&lt;/code&gt;). Therefore, you should never store sensitive information inside it (username/ password, API keys, credit card info, personal information etc).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;THINGS TO REMEMBER ABOUT SESSION STORAGE&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is tab specific, even for pages that share the same domain;&lt;/li&gt;
&lt;li&gt;it can only store strings, so any other data types must be serialized (converted to strings) before use;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Data types in Python</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 21 May 2021 06:43:23 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/data-types-in-python-3f7p</link>
      <guid>https://dev.to/dailydevtips1/data-types-in-python-3f7p</guid>
      <description>&lt;p&gt;Data types are an essential aspect of a programming language.&lt;br&gt;
As it comes down to Python there are several categorized data types built-in that we can leverage.&lt;/p&gt;

&lt;p&gt;This article will guide you through the categories and which type each category has.&lt;/p&gt;

&lt;p&gt;This guide will show you the basics of each. I will do a more detailed guide on some of these.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#text-type-data-type-in-python"&gt;
  &lt;/a&gt;
  Text type data type in Python
&lt;/h2&gt;

&lt;p&gt;As it comes to string in Python, there is only one option: the &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As single or double quotes define string as we can see here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"String"&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'string'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both variables will hold the exact same string.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#numeric-type-data-type-in-python"&gt;
  &lt;/a&gt;
  Numeric type data type in Python
&lt;/h2&gt;

&lt;p&gt;With numeric types, there is three built-in option we can leverage.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;complex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I'll first show you what they look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Int
&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt; &lt;span class="c1"&gt;# Float
&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1j&lt;/span&gt; &lt;span class="c1"&gt;# Complex
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Integers can be numbers of any length, and they can even be negative.&lt;br&gt;
The only thing is they can't have decimals.&lt;/p&gt;

&lt;p&gt;Some examples of different int in Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;83458903489734890&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2323434&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for a float, this again is a number, but it can hold decimals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;40.53&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complex to me is a new addition in programming, and it can define an imaginary part defined by the letter &lt;code&gt;j&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;2j&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5j&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3j&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sequence-type-data-type-in-python"&gt;
  &lt;/a&gt;
  Sequence type data type in Python
&lt;/h2&gt;

&lt;p&gt;Sequence types are sets of data. See them as arrays or objects.&lt;/p&gt;

&lt;p&gt;There are four basic types we can use.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;list&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I'll show you the basics of each sequence.&lt;/p&gt;

&lt;p&gt;The list can be used to store multiple items in a single variable. These are generally compared to arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"penguin"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The list can store data, change, add or remove.&lt;/p&gt;

&lt;p&gt;Tuples, however, can't be changed. This is the main difference from lists.&lt;br&gt;
Tuples are also created by using regular brackets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"penguin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A set is unordered and unindexed, meaning it can't contain multiple of the same entry.&lt;br&gt;
Curly brackets define a set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"penguin"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then there is also the range option which allows us to create a range of numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us a range from 0-6.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mapping-type-data-type-in-python"&gt;
  &lt;/a&gt;
  Mapping type data type in Python
&lt;/h2&gt;

&lt;p&gt;There is another sequence type, but it falls under a mapping type, and it's the &lt;code&gt;dict&lt;/code&gt; one.&lt;/p&gt;

&lt;p&gt;Dictionaries are used to store data as a key-value pair.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"pet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"animal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Yaatree"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A dictionary is changeable, so items can be removed, added, or changed.&lt;br&gt;
We can, however, not have duplicates in a &lt;code&gt;dict&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#boolean-type-data-type-in-python"&gt;
  &lt;/a&gt;
  Boolean type data type in Python
&lt;/h2&gt;

&lt;p&gt;As for the boolean, which we know holds a true/false statement can be used as the &lt;code&gt;bool&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;For instance, we can check random values for True or False.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; &lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#data-types-in-python"&gt;
  &lt;/a&gt;
  Data types in Python
&lt;/h2&gt;

&lt;p&gt;These are the basic built-in data types of Python you need to know when getting started with Python.&lt;/p&gt;

&lt;p&gt;I would strongly suggest creating some basic Python script to run these and have a play around with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>How to become a better learner as a developer</title>
      <author>Paul Ccari</author>
      <pubDate>Fri, 21 May 2021 06:32:16 +0000</pubDate>
      <link>https://dev.to/paulclindo/how-to-become-a-better-learner-as-a-developer-2h30</link>
      <guid>https://dev.to/paulclindo/how-to-become-a-better-learner-as-a-developer-2h30</guid>
      <description>&lt;p&gt;When I started learning how to code, I looked for many online resources such as blog posts, youtube videos, online courses, and I used to take them and do the same thing they were doing and then jumped to another resource to do the same over and over again. From my point of view at that time, I was learning a lot but actually, I got an illusion of learning, which is when you think you know more than you actually do, you overestimate what you know about a topic when you can only recognize.&lt;/p&gt;

&lt;p&gt;So I failed plenty of times and that's OK, it's a part of the process but I decided to do research and learn more about effective learning and here's what I do to counter the illusion of learning and get the most value from it.&lt;/p&gt;

&lt;p&gt;Note: We all have our learning style, this blog post doesn't pretend to change your way of learning. I'm only showing you what works best for me during my developer career but I would encourage you to give it a try and see what happens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-one-thing"&gt;
  &lt;/a&gt;
  Focus on one thing
&lt;/h2&gt;

&lt;p&gt;When I started learning front end development on my own, I realized that we had a bunch of technologies to learn and I didn't have an idea how to start, so I looked for a &lt;a href="https://roadmap.sh/frontend"&gt;roadmap to become a front end developer&lt;/a&gt; which is very helpful to guide you step by step but at first, I felt very intimidating and challenging. In consequence, I planned my day to learn basics about Web development, HTML, CSS, JS, and a bit of ReactJS but that ended up making me feel overwhelming during the first 2 months. Each topic contains a lot of content and that was just basics knowledge. In addition, I had a list of several online resources about each topic and I couldn't finish all of them at the end, it was kind of overwhelming. So I would say that you should try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Focus on one topic and take your time&lt;/strong&gt;: You don't need to rush and ignore the fundamentals of each topic even when it seems pretty straightforward, do more research and be curious about why it works in that way.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Focus on a few learning resources&lt;/strong&gt;: I would say choose your best top 3 resources you enjoy watching, reading, or listening to.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create focused and productive study sessions:&lt;/strong&gt; No distractions! I usually put away my phone and turn off all notifications and I use a Pomodoro technique to get more out of less.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pomodoro technique is a time management system that helps to be productive and make as much progress on a task as possible in 25 minutes. You break your workday into 25-minute chunks separated by five-minute breaks. After about 4 pomodoros, you take a longer break of about 15 to 20 minutes. I usually use &lt;a href="https://www.forestapp.cc/"&gt;Forest App&lt;/a&gt; to make it work! Try it out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-a-break"&gt;
  &lt;/a&gt;
  Take a break
&lt;/h2&gt;

&lt;p&gt;As I mentioned before, I used to spent many hours studying and even at night, I didn't want to go to sleep because of my enthusiasm and motivation of learning new things. But after a few weeks, I felt less motivated, I had a high level of stress that leaves me emotionally and physically burned out and it seems like nothing you do matters. Later, I realized that it's always good to push ourselves to the limit and do the hard work but there's a fine line between testing your limits and pushing past your breaking point. So I would recommend doing few things to avoid burnout and be more productive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pomodoro technique&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't skip out on sleep to get more studying done:&lt;/strong&gt; Getting enough sleep is essential for good health and well-being throughout your life. Take at least from 7-9 hours and make it a priority. I found so much information about why sleeping is so important &lt;a href="https://www.youtube.com/watch?v=pwaWilO_Pig&amp;amp;t=98s"&gt;here&lt;/a&gt;. Check it out.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do physical activities&lt;/strong&gt;: You can start by stretching yourself in your five-minute breaks. Or you start doing swimming, jogging, walking, dancing, etc. Physical activities regulate stress, anxiety and can be a real energy booster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#apply-what-you-learn"&gt;
  &lt;/a&gt;
  Apply what you learn
&lt;/h2&gt;

&lt;p&gt;To be honest, I've watched plenty of videos since I started learning how to code and I don't quite remember all things I studied. Consequently, I ended up wasting so much time because I need to read, watch, research, and learn again and again the same topic I studied before. Why does that happen? Because I didn't build anything from it. It's just simple as that, I used to code along with courses and videos, doing the same thing and when I completed them, I jumped to another course and so on which is commonly called Tutorial Hell. In this way, I noticed that "Output is more important than input" and we can't learn just by watching, so you need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Be curious about certain behaviors&lt;/strong&gt;: Break the codebase, and make some changes to test it out and see what happens and how it works, and I'm sure you'll learn more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build projects:&lt;/strong&gt; After finishing watching any course or tutorial, built the project from scratch by yourself now or you can add extra features to the final project but make it challenging and you'll see what you learn. Coding along is not bad, but don't just do that because it brings you an illusion of learning like you won't get any errors while coding and that's not the real world.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#learn-in-public"&gt;
  &lt;/a&gt;
  Learn In Public
&lt;/h2&gt;

&lt;p&gt;I've never been selfish to not teach or share something I do know about a topic to someone but I was very timid and reserved and it might be a consequence of growing in my entire life since school where I used to keep what I learned to myself and be a better student.&lt;/p&gt;

&lt;p&gt;However, I recognize that Tech industry is not like that, we have many open source projects that are available to us to read and learn from its codebases, besides that most developers in the community give away knowledge in articles, tutorials, tweets, etc. That's incredible, right? So I would propose you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Share what you're learning on any social media&lt;/strong&gt;: Not only on social media, you can tell someone what you learned and start discussing it. Or you can take advantage of social media to get some feedback and support from the community! You can start by posting a tweet, then you can create a blog post, an e-book, or produce a video, podcasts. You can try them and see what you like most.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't be afraid to learn in public:&lt;/strong&gt; It's your process! if sharing in public makes you feel uncomfortable, that's totally fine. That means you're pushing yourself, so keep doing your best and don't blame yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h2&gt;

&lt;p&gt;I strongly believe these techniques can help us to be more productive and learn more effectively anything we want and not only coding topic related. It can be cooking, playing a new instrument, anything new we want to learn in our lives. Try it out!&lt;/p&gt;

&lt;p&gt;Here are some links related that help me to be a better learner:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About the importance of quality sleep: &lt;a href="https://youtu.be/pwaWilO_Pig"&gt;Joe Morgan Experience w. Matthew Walker&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ujxvy5NjeRQ"&gt;How to Learn Anything! For Creatives &amp;amp; Self Learners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Strongly recommend this book: &lt;a href="https://www.learninpublic.org/"&gt;The Coding Career Handbook by Shawn Wang&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you enjoyed it. Thanks for reading!&lt;br&gt;
... As always, enjoy your process of learning 🚀&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href="https://paulccari.com/"&gt;reach out&lt;/a&gt; if you wanna chat about anything.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>How We Saved $428/Mo &amp; Boosted Performance by 200 times</title>
      <author>AscendixTech</author>
      <pubDate>Fri, 21 May 2021 06:30:40 +0000</pubDate>
      <link>https://dev.to/ascendixtech/how-we-saved-428-mo-boosted-performance-by-200-times-3ncg</link>
      <guid>https://dev.to/ascendixtech/how-we-saved-428-mo-boosted-performance-by-200-times-3ncg</guid>
      <description>&lt;p&gt;&lt;em&gt;The article was originally published on &lt;a href="https://ascendixtech.com/dot-net-core-migration-case/"&gt;Ascendix Tech Blog&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, we achived these results through &lt;strong&gt;.NET to .NET Core migration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The need emerged while we have been supporting a complex KnockoutJS-based web application with a server on .NET 4.5.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;The first need to migrate from .NET to .NET Core appeared while working on a KnockoutJS-based web app with a server on .NET 4.5. We had several Razor pages, JavaScript bundles in .NET Framework, and a physical copy of jQuery.&lt;/p&gt;

&lt;p&gt;We wanted to restructure many code parts in order to use the latest technologies. Thus, we decided to start with backend towards migration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What were the core goals of .NET to .NET Core migration?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, we needed to split up the front-end and back-end logic and avoid lots of old code blocks and poor code quality. It would have helped us to accelerate the future development time and boost the page loading speed. &lt;/p&gt;

&lt;p&gt;Second, we found out that .NET Core had lots of out-of-the-box tools. This way, we saw a great benefit of migrating from .NET to .NET Core and get rid of multiple third-party libraries that would allow us to save lots of time in the future. &lt;/p&gt;

&lt;p&gt;Third, .NET vs .NET Core migration would have enabled us to use Linux thus leveraging the benefits of using Docker and Kubernetes. &lt;/p&gt;

&lt;p&gt;Fourth, we would have become able to use Visual Studio Code for development. &lt;/p&gt;

&lt;p&gt;Fifth, we intended to make our software engineers more happy and motivated by using advanced and new technologies. What’s more, it’s much easier to find and recruit new developers while operating new and ‘hot’ tools. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6YG3s5TM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0gngopi0sf6sn10edyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6YG3s5TM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0gngopi0sf6sn10edyg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h2&gt;

&lt;p&gt;Now let’s take a closer look at the migration process we have undergone. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client-side&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To begin with, we have minimized Razor involvement and needed to build JavaScript bundles in order to somehow organize and build our client code without ASP.NET. The application still used KnockoutJS and jQuery despite the dominance of React/Angular/Vue.js. &lt;/p&gt;

&lt;p&gt;Then, we concluded to use Gulp to create JS bundles that would have greatly helped us prior to migrating our codebase to Vue and Webpack. &lt;/p&gt;

&lt;p&gt;However, bundles are still static resources which means that we couldn’t use hot reload yet, but, nevertheless, we could start taking care of server. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server-side&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We started our backend migration with using out-of-the-box Dependency Injection which gave us more convenience easier integration. Despite the fact that it required multiple enhancements and codebase restructure, it was also a great option to perform a code audit and add/remove/modify some functionality. &lt;/p&gt;

&lt;p&gt;During the optimization process, we moved many code parts from our filesystem and memory to the caching service (Razor/Couchbase). &lt;/p&gt;

&lt;p&gt;What’s more, we removed several blocks of code with unverified logic dedicated to threading and next made our application stateless for more greater scalability. &lt;/p&gt;

&lt;p&gt;Once done with the health-check and monitoring processes, we turned to using Azure Kubernetes Service for deployment orchestration. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadblocks"&gt;
  &lt;/a&gt;
  Roadblocks
&lt;/h2&gt;

&lt;p&gt;In terms of the key problems that emerged throughout the migration process, we had a single roadblock and a way-out solution. &lt;/p&gt;

&lt;p&gt;Simply put, we bumped into the lack of several important libraries supported by .NET Core and concluded to search for and utilize alternative solutions. Over time, we found out that there were no analogs to XML and decided to drop the entire XML-based functionality. &lt;/p&gt;

&lt;p&gt;So, we created a separate application for that which was a beneficial solution as we could make the required operations there avoiding runtime. &lt;/p&gt;

&lt;p&gt;This way, we reduced the server-side logic greatly and reached the last phase of making our app stateless. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;We shared our brief story of migrating from .NET to .NET Core in terms of our project. Wondering what were the results of that migration? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We boosted the performance of our app by 200 times compared to the old server. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We drastically cut down environmental costs. In total, the migration process allowed us to save $428/mo along with the great scalability opportunities. Next, we can turn to F2 nodes on Prod and save additional $336 per month. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.NET Core enabled us to perform old codebase audit and refactoring which led to better KPIs of the application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ultimately, .NET Core helped us analyze and optimize our technical approaches multiple times. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To date, we are utilizing .NET Core for all new .NET related projects in order to get all the benefits it offers.  &lt;/p&gt;

&lt;p&gt;If we require some sort of a specific logic and .NET Framework is a must-have option, then we create a separate microservice for that logic only. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;We hope our case study of .NET to .NET Core migration will become helpful for you. &lt;/p&gt;

&lt;p&gt;Actually, we recommend to analyze your tech stack and always try to optimize the solution architecture by using the latest technologies which will help boost your applications’ performance.&lt;/p&gt;

&lt;p&gt;If you want to learn the case in detail, check the full blog article &lt;strong&gt;&lt;a href="https://ascendixtech.com/dot-net-core-migration-case/"&gt;.NET Core Migration Case: How We Saved $428/Mo &amp;amp; Boosted Performance by 200 times&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>kubernetes</category>
      <category>docker</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Deep Dive into Front-End Accessibility Issues</title>
      <author>Mayank Pathela</author>
      <pubDate>Fri, 21 May 2021 06:18:21 +0000</pubDate>
      <link>https://dev.to/starkblaze01/deep-dive-into-the-accessibility-issues-of-front-end-34je</link>
      <guid>https://dev.to/starkblaze01/deep-dive-into-the-accessibility-issues-of-front-end-34je</guid>
      <description>&lt;p&gt;Looking into the complexity of the web-development one of the most common issue that arises in handling big websites is the accessibility issue. Let's deep dive into some common problems and learn how to avoid those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-term-accessibility-in-frontend-context"&gt;
  &lt;/a&gt;
  The term "Accessibility" in front-end context
&lt;/h2&gt;

&lt;p&gt;Accessibility for a web app aims to make it usable by as many people in as many contexts as possible, varying from low to high powered desktop users, and making it sensible for people with disability. We may be not able to achieve 100% of it but can develop a web app keeping our target audience in mind. &lt;br&gt;
Before Jumping into the development it's better to have a User Persona and the limitations they have. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-you-say-what-possibly-could-go-wrong-with-it"&gt;
  &lt;/a&gt;
  HTML you say? What possibly could go wrong with it?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrFGasbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biq7rpyqhhz21bfu8njf.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrFGasbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biq7rpyqhhz21bfu8njf.jpeg" alt="HTML Easy-Peasy"&gt;&lt;/a&gt;&lt;br&gt;
Most people think that HTML is a piece of cake and underestimates the power it has. There are over 100 HTML5 tags that are supported by modern browsers &lt;em&gt;(Find the whole list &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;here&lt;/a&gt;).&lt;/em&gt; We don't use all the tags on day to day basis but it might come in handy to use them sometimes which can avoid the excess use of JS in your codebase. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic Issues:&lt;/strong&gt;&lt;br&gt;
Always use proper HTML tags instead of implementing things just to make things work out the way you want.&lt;br&gt;
Here are some of the key issues I notice very often:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Often use of &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tag instead of wrapping up their content in the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag. &lt;/li&gt;
&lt;li&gt;Multiple &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags on a single webpage. The title inside the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is supposed to reflect the purpose of that very webpage. If you want to highlight any section of the page use different Heading tags and use only a single &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag per page. Have proper signposts in the form of headings to help users find their concerned part of content quickly.&lt;/li&gt;
&lt;li&gt;Unstructured Content flow on the Page. Either the CSS is being used or not the content of the page itself should make the sense. If you want to validate that then try disabling the CSS and check if it looks good(you can download &lt;a href="https://chrispederick.com/work/web-developer/"&gt;Web Developer&lt;/a&gt; extension for your browser and Disable CSS). Don't use CSS to control fonts if it can be done by using different HTML tags.&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;alt&lt;/code&gt; attribute for &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. Always add this property to let the user know what was supposed to be there in case a broken image is loaded because of low network bandwidth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from semantic issues, there are few things worth noting to make your web page from better to best, Sometimes, users want more keyboard accessibility rather than using a mouse. They just use &lt;code&gt;Tab&lt;/code&gt; and &lt;code&gt;Shift + Tab&lt;/code&gt; to move around the webpage. So, try to ensure that the flow of the page is going in the right direction and it's easier for a user to navigate around. Always check for cross-browser compatibility of your elements, for example, IE9 behaves differently than most other browsers when a &lt;code&gt;poster&lt;/code&gt; attribute is set in the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag. Most browsers interpret the presence of a &lt;code&gt;poster&lt;/code&gt; attribute to mean that the specified image is to be displayed until the user chooses to play the video. IE9 will only use the specified poster image in this way if preload="none" is set; otherwise, it will take the first still of the video and display that instead. Also, try using the &lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt; tag to add subtitles for your video to be understandable by people with disability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ah-css-thats-where-everything-goes-wrong"&gt;
  &lt;/a&gt;
  Ah CSS! That's where everything goes wrong
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVMdayeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq1aifiv62sxiaqtso4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVMdayeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq1aifiv62sxiaqtso4b.png" alt="CSS you say?"&gt;&lt;/a&gt;&lt;br&gt;
It can be summarized in a simple sentence: &lt;em&gt;Don't Overkill!&lt;/em&gt; There's a lot you can do with CSS but it doesn't mean to use it everywhere even when it's not needed. Pouring in the extra animations and transitions can be distracting. As a developer, we may appreciate the work and thought process you have put into it to make it happen but if it's distracting the target audience from focusing on the concerned content then it's of no use. Always keep it simple. &lt;br&gt;
Adding extra colours never helps. Decide on a theme with the minimum set of colours. You are creating a web page, not a colour palate(unless you are). And always check if the different colours are in contrast and make the content more readable. You can use &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;WebAIM&lt;/a&gt; to pick colours for better contrast. &lt;br&gt;
On a side note check for cross-browser compatibility for CSS too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-js-its-complicated"&gt;
  &lt;/a&gt;
  For JS it's complicated
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9rbEqg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phm61o522b96zg2y86nl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9rbEqg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phm61o522b96zg2y86nl.jpeg" alt="JS, it's Complicated"&gt;&lt;/a&gt;&lt;br&gt;
It always adds complexity to a webpage. Always be sure whether to use it or not. Sometimes it hard to decide whether to use repetitive &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or simply put in a JS snippet. Try to optimize your code as much you can, because low-computation devices might not be able to render that and it's not scalable. There isn't much data you can store on the browser using cookies. Decide for yourself what's important data which user wants to quickly access first when visiting the webpage and compare trade-offs storing it on client-side or server-side. &lt;br&gt;
Nowadays every other website has content dynamically loaded and JS is heavily used to fetch and update the data, to minimize the use of JS for controlling the data try using &lt;a href="https://www.w3.org/TR/wai-aria-1.1/"&gt;WAI-ARIA&lt;/a&gt; which provides semantics in the form of new HTML attributes. For example, if the content is regularly updated then use the &lt;code&gt;aria-live&lt;/code&gt; attribute to decide when to update the data so that the user doesn't miss it depending on its importance. You can set its value to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;off&lt;/code&gt;: The default. Updates should not be announced&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;polite&lt;/code&gt;: Updates should be announced only if the user is idle&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;assertive&lt;/code&gt;: Updates should be announced to the user as soon as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's a wrap! But there are many more things you can explore and do, and knowing your target audience always ends up creating a better web app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/wai-aria-1.1/"&gt;WAI-ARIA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webaim.org/resources/contrastchecker/"&gt;WebAIM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>frontend</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
