<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Are you using React ? Then I think you must know this</title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Sat, 15 May 2021 02:37:03 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/are-you-using-react-then-i-think-you-must-know-this-47cg</link>
      <guid>https://dev.to/sudarshansb143/are-you-using-react-then-i-think-you-must-know-this-47cg</guid>
      <description>&lt;p&gt;At the time of writing this, React is at version &lt;strong&gt;17.02&lt;/strong&gt;. It is fascinating to see the exponential growth of this library. Everyone one is writing code in the react with the amusing speed and efficiency. But, still there are plenty of rabbit holes where most of the programmers got into the jargon. &lt;/p&gt;

&lt;p&gt;If you are using react for a while, then I think you have faced the weird behavior of react sometimes like :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tooooo many re-renders error&lt;/li&gt;
&lt;li&gt;Async behavior of setState() 
etc. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, In this article I will touch over some of the situations where we have to be careful 🔍&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#%E2%9C%82-destructure-props-with-default-values-"&gt;
  &lt;/a&gt;
  ✂ Destructure Props With Default Values :-
&lt;/h3&gt;

&lt;p&gt;React Components heavily relies on the data forwarded using props. Whether it is a state object or a callback function. Handling  props and destructing them before actual using them is  one of good practice. It makes your code less error prone  and more robust in order to sustain the uncertain behavior of  inputs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anonymous&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, In this snippet props are destructured with  default  values to avoid undefined error. Also, while using the props are used with &lt;em&gt;??&lt;/em&gt; operator to avoid any further conflicts &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#using-usememo-"&gt;
  &lt;/a&gt;
  😷 Using useMemo()  :
&lt;/h3&gt;

&lt;p&gt;Every state change comes with the cost of re-rendering the virtual DOM. Sometimes this re-render is less costly, but  sometimes it does make the difference. So, when re-render happens every bit of code inside the function body is re-defined and it is unnecessary to re-render the &lt;em&gt;Dumb Code&lt;/em&gt;. Because, it is not going change its functionality.  hence, we use ** useMemo() **&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExecuteCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Increment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As, everyone can notice, the execute counter is DUMB Components. Hence, here it is wrapped in the memo(). This will re-render the ExecuteCounter() only  when the  props are changed.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setstate-is-async-"&gt;
  &lt;/a&gt;
  🔨 setState() is async :
&lt;/h3&gt;

&lt;p&gt;setState() is async in nature. When  we call the  setState() in  the callback function, it is not  going to update the state  instantly. rather, it will batch the any subsequent changes and then apply them once it's done. This avoids the several heavy lifting because the setState() applies huge computations while re-rendering&lt;/p&gt;

&lt;p&gt;This is probably the haven't estimated by many but, it's worth mentioning it here. Reason behind making the setState() async is pretty simple. As JavaScript is single threaded, making the setState() synchronous can block the browser's main execution thread and ultimately results in the unresponsive page. Hence, to avoid this the React's DEV team  created the setState() as async in nature.&lt;/p&gt;

&lt;p&gt;This is experienced by many dev's if we immediatly querying state values after we call the setState()&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-thunk-"&gt;
  &lt;/a&gt;
  🎉 Use thunk() :
&lt;/h3&gt;

&lt;p&gt;If anyone already using redux may know this, but still I will explain It. Making async changes in the redux reducer is pretty easy  with actios. But, any newbie ever tried to make ajax requests from the actions of the redux, then here is the trick,&lt;/p&gt;

&lt;p&gt;while creating store in redux, we have to wrap the redux thunk inside the create store&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;thunk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux-thunk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;middelware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thunk&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;middelware&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this you can dispatch the async request from  the action creaters like  this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;userInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//fetch data &lt;/span&gt;

    &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ACTION_TYPE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VIRUS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;err&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;)
   }

}

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This, is simplistic example of thunk. We can exploit it to do more actions then that of simple ajax requests&lt;/p&gt;




&lt;p&gt;😎 Final Views :&lt;/p&gt;

&lt;p&gt;Re-rendering the components in react cost us more. Avoid re-rendering of the dumb code can significantly  increase the render speed and avoid the any pitfall or lag in the interaction between the user and the we application&lt;/p&gt;

&lt;p&gt;Thanks For Reading 🙏&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Have you taken part in a coding challenge or hackathon before? How did it help you grow?</title>
      <author>Fum</author>
      <pubDate>Fri, 14 May 2021 23:09:19 +0000</pubDate>
      <link>https://dev.to/inspirezone/have-you-taken-part-in-a-coding-challenge-or-hackathon-before-how-did-it-help-you-grow-1kdn</link>
      <guid>https://dev.to/inspirezone/have-you-taken-part-in-a-coding-challenge-or-hackathon-before-how-did-it-help-you-grow-1kdn</guid>
      <description>&lt;p&gt;Let us know what challenges or hackathons you’ve participated in before. What did you like about them and what did you learn?&lt;/p&gt;

&lt;p&gt;I’m building a developer community called &lt;a href="https://community.inspirezone.tech/"&gt;inspirezone&lt;/a&gt; all about encouraging devs to keep a regular coding habit through various coding challenges and events. We are also focused on using accountability to push each other to reach our goals.&lt;/p&gt;

&lt;p&gt;Read the post below for more details on our community and challenges!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/funbeedev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ls-S8Zoy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6nTSlYfM--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/451342/745b9200-9a73-40ed-af7c-30e174b9a3c4.jpg" alt="funbeedev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inspirezone/a-developer-community-encouraging-active-coding-practice-4koh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Developer Community Encouraging Active Coding Practice 🏁 &lt;/h2&gt;
      &lt;h3&gt;Fum ・ Apr 24 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>programming</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Developer Enablement Unpacked: Developer Experience, Relations, and Marketing</title>
      <author>Matt Hawkins</author>
      <pubDate>Fri, 14 May 2021 22:20:16 +0000</pubDate>
      <link>https://dev.to/hoss/developer-enablement-unpacked-developer-experience-relations-and-marketing-4cee</link>
      <guid>https://dev.to/hoss/developer-enablement-unpacked-developer-experience-relations-and-marketing-4cee</guid>
      <description>&lt;p&gt;Public APIs create value—for the provider and the consumer—only when they’re used. That’s why fields that attract and support developers have grown in recent years. These individuals and teams &lt;em&gt;enable&lt;/em&gt; developers to discover and better use APIs and other technical tools. Once a part of only the largest companies, these roles are now more common at medium-sized businesses and even startups.&lt;/p&gt;

&lt;p&gt;We’ll cover three common areas companies use to interact with a developer audience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developer Experience&lt;/li&gt;
&lt;li&gt;Developer Relations&lt;/li&gt;
&lt;li&gt;Developer Marketing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may find these by other names, but they’re the core pieces of developer enablement—and they’re crucial to both attracting and retaining developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-experience-how-you-guide-the-developer-journey"&gt;
  &lt;/a&gt;
  Developer Experience: How You Guide the Developer Journey
&lt;/h2&gt;

&lt;p&gt;Once a developer has discovered your API, they may want to use it. Your &lt;a href="https://www.hoss.com/blog/developer-onboarding-best-practices"&gt;developer onboarding&lt;/a&gt; will determine whether they can quickly get started. These earliest interactions determine their initial developer experience. How you further guide them will determine whether they stick around to be successful with your API.&lt;/p&gt;

&lt;p&gt;There are many factors that go into this hands-off developer enablement. There are product decisions, user interface elements, and technical education that all need to come together. If you’re clear about why and how to use your API, you’ll enable developers to accomplish their goals. &lt;/p&gt;

&lt;p&gt;A robust developer experience will quickly answer what is possible and help them take the next step. The most valuable tools of the developer trade are all varying forms of documentation. Yes, there are various types of documentation you need to provide a developer to enable them to succeed. Make sure you have at least all of the following, if applicable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A getting started guide;&lt;/li&gt;
&lt;li&gt;Tutorials;&lt;/li&gt;
&lt;li&gt;An up-to-date reference guide;&lt;/li&gt;
&lt;li&gt;Sample applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, &lt;a href="https://developers.deepgram.com/"&gt;Deepgram&lt;/a&gt; meets developer needs in its documentation portal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nelUm6NO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lP8M99K3De5Q6YmhnMi6jAhpqzsMBconLSI1GL7W-6j7KyFp3i8pjXUyIknqu-oRzLYaqDpNYUsLboRz7F6JU94UrPGSORvfRQupX9grB23jFooo6GE3W-y2CNh_ky5puPTKM7OY" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nelUm6NO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/lP8M99K3De5Q6YmhnMi6jAhpqzsMBconLSI1GL7W-6j7KyFp3i8pjXUyIknqu-oRzLYaqDpNYUsLboRz7F6JU94UrPGSORvfRQupX9grB23jFooo6GE3W-y2CNh_ky5puPTKM7OY" alt="Deepgram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For someone brand new to Deepgram, it provides a guide to get started. The complete reference is useful for a quick glance at what’s possible or an experienced developer checking on syntax. Finally, guides and samples bridge the gap between first interactions and complete integrations.&lt;/p&gt;

&lt;p&gt;Of course, the specifics of your documentation will vary based on your API. This is a great chance to use your product knowledge to customize the documentation with the context needed to truly empower your users. Just make sure you avoid these &lt;a href="https://www.hoss.com/blog/10-common-mistakes-in-developer-experience"&gt;10 common developer experience mistakes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As great as your self serve experience should be, remember developers are people, too. Sometimes direct interaction and the support of others unlocks their full potential. Let's look at how developer relations can amplify your developer enablement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-relations-coders-helping-coders"&gt;
  &lt;/a&gt;
  Developer Relations: Coders Helping Coders
&lt;/h2&gt;

&lt;p&gt;Communication is a crucial element of your developer onboarding, but it doesn’t all have to be in your developer experience. Self-serve signup is great, but so is a friendly face to point out the time-wasting gotchas. No documentation can cover all of those, nor have the same empathy as another person. The field of developer relations can fill these gaps.&lt;/p&gt;

&lt;p&gt;Some of the common titles you’ll see in developer relations include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developer advocate&lt;/li&gt;
&lt;li&gt;Developer evangelist&lt;/li&gt;
&lt;li&gt;Community manager&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The exact responsibilities may vary, based on title and organization, but the overall duties are to enable fellow coders to be successful. Google first popularized the “advocate” title, which it meant to include bringing product feedback from the outside into the company (being an internal advocate for external developers). By contrast, “evangelists” face outward and spread the good word of the company. In practice, some advocates may be promotional and some evangelists bring tremendous insights back to their employers.&lt;/p&gt;

&lt;p&gt;While the example of a new developer onboarding can look like customer support, that’s only one type of communication. Developer relations practitioners attend events, host live coding sessions, and jump into open source forums, among many others.&lt;/p&gt;

&lt;p&gt;Even after integrating with  your product, developers run into issues the documentation may not answer. It might be specific to their situation or industry. In traditional developer fashion, they could just go down a rabbit hole of hit-or-miss StackOverflow threads. But often an advocate, evangelist, or community manager can provide a quick, helpful point in the right direction.&lt;/p&gt;

&lt;p&gt;Once you develop those relationships, it's important to take steps to &lt;em&gt;maintain&lt;/em&gt; them throughout their time using your product. A great way to be helpful to developers and to support those relationships is through having a presence in the communities where they congregate. These communities can be of your creation, such as product-specific forums, or be of pre-existing platforms, such as Twitter and Reddit. Just look at all the ways developers can interact with each other from &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;'s website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQ_UYH87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ciDjY5RrWOP14HmuoYKIr99sxlwr1L_Wv0txUbvpl6i3iSq2DzVozoEk9Ir5PmqMSM0vRJEitZZt9p2_A6IOikrhUU06asUVqd1_xWDTwXtTOcu0s0ySJ3XTKt1gLpf-CVl67M86" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQ_UYH87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ciDjY5RrWOP14HmuoYKIr99sxlwr1L_Wv0txUbvpl6i3iSq2DzVozoEk9Ir5PmqMSM0vRJEitZZt9p2_A6IOikrhUU06asUVqd1_xWDTwXtTOcu0s0ySJ3XTKt1gLpf-CVl67M86" alt="Twilio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Making use of one of these should not be mutually exclusive from using the other; each has its own advantages. By having a presence on pre-existing platforms, you'll reach developers who might not have realized your product is the solution to their problems otherwise. And by having your own product-focused community, you create an informative, communicative dynamic between people using your product.&lt;/p&gt;

&lt;p&gt;We believe that communicating with developers is important, as you can see, but that assumes you’ve helped them discover you in the first place. Let's look at what you can do to address that concern.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-marketing-go-find-your-technical-audience"&gt;
  &lt;/a&gt;
  Developer Marketing: Go Find Your Technical Audience
&lt;/h2&gt;

&lt;p&gt;Before a developer can enjoy their first experience or ask a question of your advocate, they need to find out you exist. As with other fields, marketing can help you find an audience. Unlike other fields, developers are especially uncertain about most marketing activities, so you’ll need to be careful how you reach out.&lt;/p&gt;

&lt;p&gt;Luckily, most developers are always looking to learn and expand their abilities. If you can help them on their journey—before they’ve even used your product—then they’re more likely to trust what might otherwise come across as promotional messages.&lt;/p&gt;

&lt;p&gt;Some common and successful developer marketing tactics are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Events and webinars&lt;/li&gt;
&lt;li&gt;Content marketing&lt;/li&gt;
&lt;li&gt;Community sponsorship&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use any of these approaches to show up where developers already participate.&lt;/p&gt;

&lt;p&gt;Bring information to developers when you participate and host events. Help them find the next new thing, or understand better how the current things work. Keep your product promotion low key or non-existent and instead focus on how you can communicate about the problems to developers before working on the solutions.&lt;/p&gt;

&lt;p&gt;You can do the same in SEO-focused content marketing and advertising-focused community sponsorships. Show yourself to be a key resource and developers will be willing to hear from you. Use other tactics like retargeting and email newsletter to stay top of mind.&lt;/p&gt;

&lt;p&gt;For example, cloud database &lt;a href="https://www.snowflake.com/"&gt;Snowflake&lt;/a&gt; puts it all together in this email:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DnA6lWCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/b3GMXnmzv64ySuxr_bgeibwAwL2IhzMaUF36kFPHfxIGeaq2FqLEt0w8fDViemz7RjtaXzYSyEKXJ1e14vqUYDsHRt0GFSgsYWmkKpbCJT2diP35Yr7aUekXpA9R_FOqtfVytF2J" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DnA6lWCz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/b3GMXnmzv64ySuxr_bgeibwAwL2IhzMaUF36kFPHfxIGeaq2FqLEt0w8fDViemz7RjtaXzYSyEKXJ1e14vqUYDsHRt0GFSgsYWmkKpbCJT2diP35Yr7aUekXpA9R_FOqtfVytF2J" alt="Snowflake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s an event related to specific problems that Snowflake solves. A Q&amp;amp;A session offers the chance to ask questions of experts (perhaps their developer relations team?). All of these resources could then be bundled into content to attract more developers to their platform in the future.&lt;/p&gt;

&lt;p&gt;Naturally, you’ll want to include all of these resources within a framework that provides the best experience and access to your own team of experts. How you treat developer enablement in your organization will greatly determine the success of your API. Consider the &lt;a href="https://www.hoss.com/docs"&gt;Hoss developer hub&lt;/a&gt; to host not just your documentation, but the full enablement experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hoss.com/contact/"&gt;Reach out to us&lt;/a&gt; to learn more about what we’ve built.&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>developerexperience</category>
      <category>developermarketing</category>
      <category>docs</category>
    </item>
    <item>
      <title>Run Node.js app with ES6 features</title>
      <author>Muhammad Iqbal</author>
      <pubDate>Fri, 14 May 2021 21:43:55 +0000</pubDate>
      <link>https://dev.to/muhammadiqbal/run-node-js-app-with-es6-features-59o3</link>
      <guid>https://dev.to/muhammadiqbal/run-node-js-app-with-es6-features-59o3</guid>
      <description>&lt;p&gt;In this article, we will learn how to use ES6 syntax to write your &lt;strong&gt;Node Server&lt;/strong&gt; in few simple steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-babel-as-dev-dependencies-in-the-project"&gt;
  &lt;/a&gt;
  Installing babel as dev dependencies in the project
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Babel is a toolchain that is mainly used to convert ECMAScript 2015+&lt;br&gt;
code into a backward-compatible version of JavaScript in current and&lt;br&gt;
older browsers or environments. Here are the main things Babel can do&lt;br&gt;
for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Transform syntax&lt;/li&gt;
&lt;li&gt;  Polyfill features that are missing in your target environment (through a third-party polyfill such as
&lt;a href="https://github.com/zloirock/core-js"&gt;core-js&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  Source code transformations (codemods)&lt;/li&gt;
&lt;li&gt;  And more! (check out these &lt;a href="https://babeljs.io/videos.html"&gt;videos&lt;/a&gt; for inspiration)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Installation with npm&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev @babel/core @babel/node @babel/preset-env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installation with yarn&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @babel/core @babel/node @babel/preset-env -D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After successful installations of dev-dependencies create a file named &lt;strong&gt;.babelrc&lt;/strong&gt; like this. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewy-c3al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/SXNjpYV/Screenshot-2021-05-15-at-2-23-46-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewy-c3al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/SXNjpYV/Screenshot-2021-05-15-at-2-23-46-AM.png" alt=".babelrc-file"&gt;&lt;/a&gt;&lt;br&gt;
and paste the following code in it and save the .babelrc file.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "presets":  ["@babel/preset-env"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#running-the-es6-code"&gt;
  &lt;/a&gt;
  Running the ES6 Code
&lt;/h2&gt;

&lt;p&gt;Now you can run your node.js project with ES6 features by running the following command.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn babel-node index.js
or
npx babel-node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;That is it for this short article. &lt;/p&gt;

&lt;p&gt;I am writing this first time please forgive me for my mistakes. I hope you guys find it informative.&lt;/p&gt;

</description>
      <category>node</category>
      <category>es6</category>
      <category>babel</category>
      <category>babelnode</category>
    </item>
    <item>
      <title>Everything you need to know to deploy an Azure Static Web App</title>
      <author>Yönet</author>
      <pubDate>Fri, 14 May 2021 21:39:44 +0000</pubDate>
      <link>https://dev.to/azure/everything-you-need-to-know-to-deploy-an-azure-static-web-app-fm6</link>
      <guid>https://dev.to/azure/everything-you-need-to-know-to-deploy-an-azure-static-web-app-fm6</guid>
      <description>&lt;p&gt;With &lt;a href="https://azure.microsoft.com/en-us/services/app-service/static/?WT.mc_id=aiml-28641-ayyonet#overview"&gt;Azure Static Web Apps&lt;/a&gt; you can host your serverless web app, continiously deploy with Github actions and easily integrate with your Azure APIs or add your custom authentications and domains. &lt;/p&gt;

&lt;p&gt;Sounds too good to be true? Well I would think so if I didn't get to deploy and set up automations with Github Actions, without needing to know anything about actions, in minutes. &lt;/p&gt;

&lt;p&gt;You can read more about the key &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/overview?WT.mc_id=aiml-28641-ayyonet#key-features"&gt;Azure Static Web App features&lt;/a&gt; or dive right into it. &lt;strong&gt;Seeing is believing&lt;/strong&gt;, so here are all the things that you can get started with depending on your preference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#tutorials"&gt;Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-guides"&gt;How to Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-samples"&gt;Code Samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tutorials"&gt;
  &lt;/a&gt;
  Tutorials
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/learn/paths/azure-static-web-apps/?WT.mc_id=aiml-28641-ayyonet"&gt;Azure Learn Modules&lt;/a&gt; covering everything from &lt;strong&gt;Angular, React, Svelte, Vue, Gatsby&lt;/strong&gt; and plain old &lt;strong&gt;JavaScript&lt;/strong&gt; to publishing a &lt;strong&gt;Blazor WebAssembly app and .NET API&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/azure/static-web-apps/publish-gatsby?WT.mc_id=aiml-28641-ayyonet"&gt;Tutorials&lt;/a&gt;  for working with static site generators to working with databases. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-guides"&gt;
  &lt;/a&gt;
  How to Guides
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/local-development?WT.mc_id=aiml-28641-ayyonet"&gt;Setup your local development environment&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/front-end-frameworks?WT.mc_id=aiml-28641-ayyonet"&gt;Configure your frontend framework of your choice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/functions-bring-your-own?WT.mc_id=aiml-28641-ayyonet"&gt;How to integrate with your Azure Functions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/add-mongoose?WT.mc_id=aiml-28641-ayyonet"&gt;How to use a database with Azure Static Web Apps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/custom-domain?tabs=azure-dns&amp;amp;WT.mc_id=aiml-8567-ayyonet"&gt;Set up your custom domain&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=aad&amp;amp;WT.mc_id=aiml-8567-ayyonet"&gt;How to do custom authentication with Azure Static Web Apps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code-samples"&gt;
  &lt;/a&gt;
  Code Samples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/static-web-apps-gallery-code-samples?WT.mc_id=aiml-28641-ayyonet"&gt;Microsoft code samples&lt;/a&gt; with lots of cool projects and for different frameworks and integrations like &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/?WT.mc_id=aiml-28641-ayyonet"&gt;Azure Functions&lt;/a&gt; or &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/?WT.mc_id=aiml-28641-ayyonet"&gt;Azure Cognitive Services&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LGobyE_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q26kcreul2ecpxvir9xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LGobyE_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q26kcreul2ecpxvir9xa.png" alt="PoseDance: A TikTok Trainer App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/microsoft/static-web-apps-gallery-code-samples/blob/master/media/angular-search-experience.gif"&gt;Awesome List of Azure Static Web Apps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, join us at &lt;a href="https://www.microsoft.com/en-us/devrel/cognitiveservices/?WT.mc_id=aiml-28641-ayyonet"&gt;AI Show Live&lt;/a&gt; to see how we build and deploy with Cognitive Services for &lt;a href="https://github.com/aiadvocates/AIPlayground"&gt;AI Playground&lt;/a&gt;. Ask your questions and let us know the features you want to see on our &lt;a href="https://github.com/aiadvocates/AIPlayground/discussions/?WT.mc_id=aiml-8567-ayyonet"&gt;Github Discussion&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLlrxD0HtieHinivDFATQd5qyjL6ijKHUF"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OzBl0c_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/vRNG8BCtTeU/0.jpg" alt="AI Show Live"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us know in the comments what you think and what you would like to see as a tutorial, code sample or a video about Azure Static Web Apps.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__29"&gt;
  
    .ltag__tag__id__29 .follow-action-button{
      background-color: #F54D27 !important;
      color: #413932 !important;
      border-color: #F54D27 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/git" class="ltag__tag__link"&gt;git&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="ltag__tag ltag__tag__id__8"&gt;
  
    .ltag__tag__id__8 .follow-action-button{
      background-color: #562765 !important;
      color: #ffffff !important;
      border-color: #562765 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/webdev" class="ltag__tag__link"&gt;webdev&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>azure</category>
      <category>serverless</category>
    </item>
    <item>
      <title>CSS Gradients: An Introduction</title>
      <author>Mehmed Duhovic</author>
      <pubDate>Fri, 14 May 2021 21:04:12 +0000</pubDate>
      <link>https://dev.to/bracikaa/css-gradients-an-introduction-ci6</link>
      <guid>https://dev.to/bracikaa/css-gradients-an-introduction-ci6</guid>
      <description>&lt;p&gt;This article will cover CSS gradients and take a took at some real-life uses for them.&lt;/p&gt;

&lt;p&gt;Most of the time we use solid background colors to style our web application, using the &lt;code&gt;background&lt;/code&gt; property. There is actually more to the &lt;code&gt;background&lt;/code&gt; property, as it is a shorthand for many different properties including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;background-image&lt;/code&gt; - can set a background image or generate a color gradient (we will talk about this!)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-position&lt;/code&gt; - can set the position of the background image&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-size&lt;/code&gt; - sets the size of the rendered background image&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-repeat&lt;/code&gt; - can set the 'repeat' property of the image in order to fill the entire element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-origin&lt;/code&gt; - can set the background positioning, being relative to the element's &lt;code&gt;border-box&lt;/code&gt;, &lt;code&gt;padding-box&lt;/code&gt; or &lt;code&gt;content-box&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;background-color &lt;/code&gt;- sets a specific background color which will render behind any set background image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While using some of these single properties, we should also keep in mind that if we at a later time style elements with the &lt;code&gt;background&lt;/code&gt; property, we will &lt;a href="https://thedukh.com/2021/04/on-css-shorthand-properties/" rel="noreferrer noopener"&gt;reset all the others back to their initial value&lt;/a&gt;. We should instead write individual properties unless we are definitely sure that we won't override them later.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#backgroundimage-and-css-gradients"&gt;
  &lt;/a&gt;
  Background-image and CSS gradients
&lt;/h1&gt;

&lt;p&gt;We usually use &lt;code&gt;background-image&lt;/code&gt; property to accept a path to an image URL (&lt;code&gt;background-image: url(url-to-image.png&lt;/code&gt;) in order to set the image as the element's background. But the &lt;code&gt;background-property &lt;/code&gt;actually serves one additional use - we can define gradients, which are actually extremely useful effects. Let us see them in use: &lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-wrapper wrapper-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Two-Color linear gradient&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
      &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.pinimg.com/originals/02/c5/13/02c5130828505d0365ca6afdb047c888.png"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-wrapper wrapper-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Two-Color linear gradient with an angle&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
      &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.pinimg.com/originals/02/c5/13/02c5130828505d0365ca6afdb047c888.png"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.image-wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#e66465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#9198e5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* linear gradient example */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e66465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#9198e5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* linear gradient example */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The two listing above would produce the following two images:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bVuIrGqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradients1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bVuIrGqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradients1.png" alt="CSS Gradients Example - Using Two-Color Linear Gradients"&gt;&lt;/a&gt;CSS Gradients Example - Using Two-Color Linear Gradient&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;linear-gradient&lt;/code&gt; function used above consists of three basic parameters that define its behavior: angle, starting color, and ending color. In the first example (the basic two-color linear gradient) we omitted the angle so the style was automatically reverted to the default &lt;em&gt;top to bottom angle&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The second example actually has a set angle of 45 degrees, and it visually appears to be different than the first  - even though they use the same colors! We can set gradient angles using several different controls. For example, by using predefined keywords such as &lt;code&gt;to top&lt;/code&gt;, &lt;code&gt;to bottom&lt;/code&gt;, or even a corner such as &lt;code&gt;to bottom right&lt;/code&gt;. In each of these cases, the gradient would start from the top, from the bottom, or from the bottom-right corner of the element. &lt;/p&gt;

&lt;p&gt;In the second example above, using a precise angle, we used &lt;em&gt;degrees&lt;/em&gt; as the unit. &lt;code&gt;0deg&lt;/code&gt; would be equivalent to the to top command, and by increasing the degree value we would move the gradient clockwise around the circle. We can also use &lt;code&gt;rad&lt;/code&gt; (or radians), &lt;code&gt;turn&lt;/code&gt; (turns) or &lt;code&gt;grad&lt;/code&gt; (gradians). For more information about angles, please click &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/angle" rel="noreferrer noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#multiple-color-stops"&gt;
  &lt;/a&gt;
  Multiple color stops
&lt;/h1&gt;

&lt;p&gt;Now let us take a look at this:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e66465&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#9198e5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#12045b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#1afe49&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#e66465&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#9198e5&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#12045b&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="m"&gt;#1afe49&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which would produce the following (&lt;code&gt;.wrapper-3&lt;/code&gt; is the left image, while &lt;code&gt;.wrapper-4&lt;/code&gt; is the right image in the listing):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IDwUZ9fE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradients2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IDwUZ9fE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradients2.png" alt="CSS Gradients Example -Multi colored gradients"&gt;&lt;/a&gt;CSS Gradients Example -Multi colored gradients&lt;/p&gt;

&lt;p&gt;Above we defined gradients using more than two colors, each of which are called &lt;em&gt;color stops.&lt;/em&gt; The listing above has a gradient function that accepts four colors. New colors can be simply inserted by adding them to the &lt;code&gt;linear-gradient&lt;/code&gt; function. We can add any number of colors, separated by a comma, and the function will spread them evenly. We can additionally explicitly set the position of the color stops, and they do not need to be evenly spaced. Instead of percentages, we could also use pixels, ems, and any other length units.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hard-stops-and-repeating-linear-gradients"&gt;
  &lt;/a&gt;
  Hard stops and repeating linear gradients
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper-5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt; &lt;span class="m"&gt;33%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt; &lt;span class="m"&gt;33%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;blue&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;salmon&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;blue&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above inside the &lt;code&gt;.wrapper-5&lt;/code&gt; block we set the colors inside the &lt;code&gt;linear-gradient()&lt;/code&gt; function at the same position. This will have the effect of instant switch between colors, rather than a smooth transition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHHCgud5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradient3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHHCgud5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradient3.png" alt="CSS Gradients - Linear gradient with a hard stop and repeating linear gradient"&gt;&lt;/a&gt;CSS Gradients - Linear gradient with a hard stop and repeating linear gradient&lt;/p&gt;

&lt;p&gt;We created the left image (having the appearance of the Italian flag) using hard stops. The right image is created using a new function - &lt;code&gt;repeating-linear-gradient()&lt;/code&gt; in which - wait for it - the pattern repeats, alternating between blue, salmon, and red colors.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#radial-and-repeating-radial-gradients"&gt;
  &lt;/a&gt;
  Radial and repeating radial gradients
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper-7&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper-8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="no"&gt;black&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Key6FKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradient4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Key6FKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thedukh.com/wp-content/uploads/2021/05/gradient4.png" alt="CSS Gradients - Radial and Repeating radial gradient"&gt;&lt;/a&gt;CSS Gradients - Radial and Repeating radial gradient&lt;/p&gt;

&lt;p&gt;We have created some really cool effects above, using a new type of gradient or the &lt;code&gt;radial-gradient&lt;/code&gt;. This type of gradients starts at a single point and proceeds outward in all directions. By default, it is centered, and transitions evenly to every corner. We can also change the appearance of the radial gradient, by specifying where the gradient should be centered, or by making the gradient a circle rather than an ellipse. On the right, we used the &lt;code&gt;repeating-radial-gradient()&lt;/code&gt; function in order to repeat the pattern in concentric rings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h1&gt;

&lt;p&gt;Gradients can be a lot more expressive and complex and in this article, we only mentioned the basics of using them. For a more detailed explanation, you can visit the official developer documentation for&lt;code&gt;linear-gradient()&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient()" rel="noreferrer noopener"&gt;here&lt;/a&gt;, for &lt;code&gt;radial-gradient()&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient()" rel="noreferrer noopener"&gt;here&lt;/a&gt;, and from there you can start exploring the concepts more deeply.&lt;/p&gt;

&lt;p&gt;Here we have our codepen for this article:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/brachika/embed/bGqdOLo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please check other blog posts on &lt;a href="http://thedukh.com" rel="noreferrer noopener"&gt;thedukh.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Why Regular Expressions Are Super Powerful, But A Terrible Coding Decision</title>
      <author>Joseph Maurer</author>
      <pubDate>Fri, 14 May 2021 20:40:33 +0000</pubDate>
      <link>https://dev.to/mwrpwr/why-regular-expressions-are-super-powerful-but-a-terrible-coding-decision-m8i</link>
      <guid>https://dev.to/mwrpwr/why-regular-expressions-are-super-powerful-but-a-terrible-coding-decision-m8i</guid>
      <description>&lt;p&gt;We’ve all been there. You have a string input and need a fast and efficient way to parse something important out of it. Your options are relatively low since manually parsing a string for a pattern is tedious and often very inefficient as the string gets larger. So what do you do? You turn to Regular Expressions! What’s the problem with that? Let’s explore.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Impossible To Read or Debug&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A huge assumption that is made when creating regular expressions is that the schema you are programming to won’t change. If it does, it could require rewriting the regular expression to hopefully produce the same usable output. But let’s say you are tasked with fixing a broken regular expression that fell victim to a changing schema. It means that you would have to first understand how the regex worked with the old schema, before understanding how the new schema changed. Only then can you rewrite the regular expression to account for the new input. That’s a fairly tedious process that is potentially very error prone. And the level of difficulty goes up exponentially with the length and complexity of regular expressions. I would hate to be the only one in charge of fixing this&lt;a href="http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html"&gt; 6.2kb monster that validates RFC822 email addresses&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Regex Abuse&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A common use case for regular expression is something like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egjwOHNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/555/0%2AIS5fzV7OCtIXAwsR" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--egjwOHNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/555/0%2AIS5fzV7OCtIXAwsR"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This regular expression tries to emulate a parser to rip out useful information into named capture groups from a structured data set like &lt;a href="https://www.json.org/json-en.html"&gt;json&lt;/a&gt;. The benefit of this is that (in c# at least) you then can have reference to exactly what the regular expression matched on.&lt;/p&gt;

&lt;p&gt;The downside of this is that you are using the wrong tool for the job. As much as it might seem like a quick and easy solution, it causes more problems than it solves. Parsing json, xml, or even html with regular expressions is a terrible idea. And it’s mostly a solved problem. &lt;a href="https://docs.python.org/3/library/html.parser.html"&gt;Check out this HTML Python Parser&lt;/a&gt;. Using a tool like this will make your coding easier and make code maintenance easier in the future.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Balancing Act&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I know most of this article has been bashing the use of regular expressions, but there are some benefits to using them (if used correctly). &lt;strong&gt;All developers and engineers should learn to use basic regular expressions, because they’ll produce better, more flexible, more maintainable code with them.&lt;/strong&gt; When used responsibly, regular expressions are a huge net positive. For example, writing a regular expression to validate a phone number is relatively straightforward:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJ0XiZSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/374/0%2AyClX3Avq7-2wvB3T" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJ0XiZSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/374/0%2AyClX3Avq7-2wvB3T"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Regular expressions are extremely powerful and useful in the right situation. When abused and used in incorrect situations, they can lead to ugly and unmaintainable code. So use them wisely!&lt;/p&gt;

&lt;p&gt;Comment below your opinion on Regular Expressions and if you use them regularly!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lz6JYuNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3De4cd37fe957f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lz6JYuNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3De4cd37fe957f" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>watercooler</category>
      <category>development</category>
      <category>performance</category>
    </item>
    <item>
      <title>TypeScript enum guide: get started in 5 minutes</title>
      <author>Erin Schaffer</author>
      <pubDate>Fri, 14 May 2021 20:25:02 +0000</pubDate>
      <link>https://dev.to/educative/typescript-enum-guide-get-started-in-5-minutes-4447</link>
      <guid>https://dev.to/educative/typescript-enum-guide-get-started-in-5-minutes-4447</guid>
      <description>&lt;p&gt;Enumerations (or enums) are a supported data type in &lt;a href="https://www.educative.io/blog/typescript-tutorial"&gt;TypeScript&lt;/a&gt;. Enums are used in most object-oriented programming languages like Java and C# and are now available in TypeScript too. They are one of the few features of TypeScript which isn’t a type-level extension of JavaScript. Enums allow you to define a set of named constants. Using them makes it easier to document intent or create a set of distinct cases. Today, we’ll explore the basics of TypeScript enums along with use cases, various enum types, and next steps for your learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#enum"&gt;What is enum in TypeScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why"&gt;Why use enums in TypeScript?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alternatives"&gt;Enums vs. alternatives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#numeric"&gt;Numeric enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#string"&gt;String enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#heterogeneous"&gt;Heterogeneous enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reverse"&gt;Reverse mapping with enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#const"&gt;Const enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#computed"&gt;Computed enums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#nextsteps"&gt;What to learn next&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-enum-in-typescript"&gt;
  &lt;/a&gt;
  What is enum in Typescript?
&lt;/h2&gt;

&lt;p&gt;TypeScript enums &lt;strong&gt;allow you to define a set of named constants&lt;/strong&gt;. Using them can make it easier to document intent or to create a set of distinct cases. Many programming languages, like C, C#, and Java, have an &lt;code&gt;enum&lt;/code&gt; data type, but JavaScript doesn’t. However, TypeScript does. &lt;strong&gt;TypeScript has both numeric and string-based enums&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The syntax for enums is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum States {
    Oregon,
    Washington,
    Idaho,
    Montana,
    Wyoming
}

// usage 
var region = States.Washington;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we look more closely at a few different enum types, let’s discuss the benefits of enums in TypeScript.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-use-enums-in-typescript"&gt;
  &lt;/a&gt;
  Why use enums in TypeScript?
&lt;/h2&gt;

&lt;p&gt;Enums are a great way to organize your code in TypeScript. Let’s look at some pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides flexibility making it easier to express and document intentions and use cases&lt;/li&gt;
&lt;li&gt;Saves compile-time and runtime with inline code in JavaScript&lt;/li&gt;
&lt;li&gt;Allows for the creation of memory-efficient custom constants in JavaScript&lt;/li&gt;
&lt;li&gt;Etc.

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enums-vs-alternatives"&gt;
  &lt;/a&gt;
  Enums vs. alternatives
&lt;/h2&gt;

&lt;p&gt;While there are many benefits of using TypeScript enums, there are some times you &lt;em&gt;shouldn’t&lt;/em&gt; use them, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reassigning or changing enum member values&lt;/strong&gt;: enums are type-safe and would return compile errors on reassignment&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Recording dynamic values&lt;/strong&gt;: enums are suited for finite items and help to create a user-defined constants system&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Using variables&lt;/strong&gt;: enums can’t be used as variables and doing so would return errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let’s dive deeper into some enum types.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#numeric-enums"&gt;
  &lt;/a&gt;
  Numeric enums
&lt;/h2&gt;

&lt;p&gt;Numeric enums &lt;strong&gt;store string values as numbers&lt;/strong&gt;. They can be defined using the &lt;code&gt;enum&lt;/code&gt; keyword. Let’s say you wanted to store a set of different types of cars. The following example shows a numeric enum in TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda,
    Toyota,
    Subaru,
    Hyundai
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The enum value &lt;code&gt;CarType&lt;/code&gt; has four values: Honda, Toyota, Subaru, and Hyundai. Enum values start from zero and increment by one for each member, which would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Honda = 0
Toyota = 1
Subaru = 2
Hyundai = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want, you can initialize the first numeric value yourself like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = 1,
    Toyota,
    Subaru,
    Hyundai
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we initialized the first member &lt;code&gt;Honda&lt;/code&gt; with the numeric value of one. The remaining numbers will be incremented by one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It’s not necessary to assign sequential values to your enum members. You can assign them any values you want.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-enums"&gt;
  &lt;/a&gt;
  String enums
&lt;/h2&gt;

&lt;p&gt;String enums are similar to numeric enums, but their &lt;strong&gt;enum values are initialized with string values instead of numeric values&lt;/strong&gt;. String enums have &lt;strong&gt;better readability&lt;/strong&gt; than numeric enums, making it easier to debug your programs. &lt;/p&gt;

&lt;p&gt;The following example uses the same info as the numeric enum example, but is represented as a string enum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = "HONDA",
    Toyota = "TOYOTA",
    Subaru = "SUBARU",
    Hyundai = "HYUNDAI"
}
// Access String Enum
CarType.Toyota; //returns TOYOTA
CarType['Honda']; //returns HONDA
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example, we defined the string enum &lt;code&gt;CarType&lt;/code&gt; with the same values as the numeric enum, except the enum values are initialized as string literals. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: String enum values need to be individually initialized.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heterogeneous-enums"&gt;
  &lt;/a&gt;
  Heterogeneous enums
&lt;/h2&gt;

&lt;p&gt;Heterogeneous enums &lt;strong&gt;contain both numeric and string values&lt;/strong&gt;. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum BooleanHeterogeneousEnum {
    Yes = 0,
    No = "NO",
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reverse-mapping-with-enums"&gt;
  &lt;/a&gt;
  Reverse mapping with enums
&lt;/h2&gt;

&lt;p&gt;You know that num values can be retrieved using their corresponding enum member values. With reverse mapping, you can &lt;strong&gt;access the value of a member and a member name from its value&lt;/strong&gt;. Let’s look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = 1,
    Toyota,
    Subaru,
    Hyundai
}

CarType.Subaru; // returns 3
CarType["Subaru"]; // returns 3
CarType[3]; // returns Subaru
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;CarType[3]&lt;/code&gt; returns its member name “Subaru” because of reverse mapping. Let’s look at another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = 1,
    Toyota,
    Subaru,
    Hyundai
}
console.log(CarType)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would see the following output in your browser console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    '1': 'Honda',
    '2': 'Toyota',
    '3': 'Subaru',
    '4': 'Hyundai',
    Honda: 1,
    Toyota: 2,
    Subaru: 3,
    Hyundai: 4
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each value of the enum appears two times in the internally stored enum object. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#const-enums"&gt;
  &lt;/a&gt;
  Const enums
&lt;/h2&gt;

&lt;p&gt;You can use const enums to improve the performance of your numeric enums. They are defined using the &lt;code&gt;const&lt;/code&gt; modifier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const enum Enum {
    X = 1
    Y = X * 2,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike regular enums, const enums are completely removed during compilation. They can only use constant enum expressions and are inlined at use sites.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#computed-enums"&gt;
  &lt;/a&gt;
  Computed enums
&lt;/h2&gt;

&lt;p&gt;The value of an enum member can be a &lt;em&gt;constant value&lt;/em&gt; or a &lt;em&gt;computed value&lt;/em&gt;. The following example includes computed values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda = 1,
    Toyota = getCarTypeCode('toyota'),
    Subaru = Toyota * 3,
    Hyundai = 10
}

function getCarTypeCode(carName: string): number {
    if (carName === 'toyota') {
        return 5;
    }
}

CarType.Toyota; // returns 5
CarType.Subaru; // returns 15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the enum includes both computed and constant members, then uninitiated enum members either come first or after other initialized members with numeric constants. This next example will show an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Toyota = getCarTypeCode('toyota'),
    Honda, // Error: Enum member must have initializer
    Subaru,
    Hyundai = Toyota * 3,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can declare the above enum like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum CarType {
    Honda,
    Hyundai,
    Toyota = getCarTypeCode('toyota'),
    Subaru = Toyota * 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn-next"&gt;
  &lt;/a&gt;
  What to learn next
&lt;/h2&gt;

&lt;p&gt;TypeScript provides many advantages for client-side developers. It’s easier to pick up than some other alternatives because you can jump in with a JavaScript background. TypeScript enums make it easier to document intent or to create a distinct set of cases. &lt;/p&gt;

&lt;p&gt;Now that you know more about different TypeScript enums and their benefits, you’re ready to learn more about advanced TypeScript concepts. Some recommended topics to cover next are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strict types&lt;/li&gt;
&lt;li&gt;Generic functions&lt;/li&gt;
&lt;li&gt;Mapped types&lt;/li&gt;
&lt;li&gt;And much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning these concepts, check out Educative’s text-based course, &lt;a href="https://www.educative.io/courses/advanced-typescript-masterclass"&gt;&lt;strong&gt;Advanced TypeScript Masterclass&lt;/strong&gt;&lt;/a&gt;. In this course, you’ll explore the advanced features of TypeScript with in-browser coding exercises. By the end, you’ll be more confident in your advanced TypeScript skills, and you’ll be ready to apply them to your next project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-reading-about-typescript"&gt;
  &lt;/a&gt;
  Continue reading about TypeScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/typescript-tutorial"&gt;TypeScript Tutorial: A step-by-step guide to learn TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/advanced-typescript-concepts"&gt;Understanding Advanced Concepts in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/top-50-typescript-interview-questions"&gt;Top 50 TypeScript Interview Questions Explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>programming</category>
      <category>javascript</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Live Dev: How to set up a Node project with Typescript</title>
      <author>Adam Coster</author>
      <pubDate>Fri, 14 May 2021 20:01:24 +0000</pubDate>
      <link>https://dev.to/adamcoster/how-to-set-up-a-node-project-with-typescript-d5c</link>
      <guid>https://dev.to/adamcoster/how-to-set-up-a-node-project-with-typescript-d5c</guid>
      <description>&lt;p&gt;Learning how to code is a long process. Structured coursework and tutorials are a great way for most people to learn, especially at the beginning, but at some point you start to wonder... what does the &lt;em&gt;actual work&lt;/em&gt; of development look like? How do you go from identifying a problem to a deployable project that &lt;em&gt;solves&lt;/em&gt; that problem?&lt;/p&gt;

&lt;p&gt;I had a (relatively) small side project I wanted to tackle for fun, and decided to do it live on video so that people could see the whole process from start to finish.&lt;/p&gt;

&lt;p&gt;If you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Love the Node/JavaScript/Typescript ecosystem and want to get &lt;em&gt;real deep&lt;/em&gt; into how it all works together; or&lt;/li&gt;
&lt;li&gt;Are having trouble using your programming knowledge to build full solutions; or&lt;/li&gt;
&lt;li&gt;Are actively developing your fluency in programming in general or JavaScript/Node/Typescript in specific; or&lt;/li&gt;
&lt;li&gt;Enjoy the calming background sounds of someone talking about nerd stuff&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... then this will be right up your alley!&lt;/p&gt;

&lt;p&gt;In Episode 1 I go through the process of setting up a new Node + Typescript project and present the problem being solved: converting Git logs into changelogs/patchnotes.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OMCAAcfWLD4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you want to joint the next one live to ask questions or tell me when I'm wrong, &lt;a href="https://twitch.tv/bscotch"&gt;subscribe on Twitch&lt;/a&gt; and/or &lt;a href="https://twitter.com/costerad"&gt;follow me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Remove duplicate value from array</title>
      <author>Suprabha</author>
      <pubDate>Fri, 14 May 2021 19:49:18 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/remove-duplicate-value-from-array-3i52</link>
      <guid>https://dev.to/suprabhasupi/remove-duplicate-value-from-array-3i52</guid>
      <description>&lt;p&gt;&lt;span&gt;T&lt;/span&gt;here are multiple ways to filter out duplicates from an array and return only the unique values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-set"&gt;
  &lt;/a&gt;
  1️⃣ Using Set 🔥
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-set"&gt;
  &lt;/a&gt;
  What is Set?
&lt;/h4&gt;

&lt;p&gt;Set is a new data object introduced in ES6. A Set is a collection of unique values.&lt;/p&gt;

&lt;p&gt;Here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The array is converted to &lt;code&gt;Set&lt;/code&gt; and all the duplicate elements are automatically removed.&lt;/li&gt;
&lt;li&gt;The spread syntax &lt;code&gt;...&lt;/code&gt; is used to include all the elements of the &lt;code&gt;Set&lt;/code&gt; to a new array.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌼&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌵&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍄&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredArr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//["🌼", "🌴", "🌹", "🌵", "🍄"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Convert Set to an Array using &lt;code&gt;Array.from&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;Array.from&lt;/code&gt; to convert a &lt;code&gt;Set&lt;/code&gt; into an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌼&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌵&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍄&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredArr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//["🌼", "🌴", "🌹", "🌵", "🍄"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-filter-%F0%9F%95%B8"&gt;
  &lt;/a&gt;
  2️⃣ Using filter 🕸
&lt;/h3&gt;

&lt;p&gt;If the element passes and returns true, it will be included in the filtered array and any element that fails or return false, it will be NOT be in the filtered array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌼&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌵&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍄&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredArr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//["🌼", "🌴", "🌹", "🌵", "🍄"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-foreach-method"&gt;
  &lt;/a&gt;
  3️⃣  Using forEach Method 🚀
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;forEach&lt;/code&gt;, you can iterate over the elements in the array and push into the new array if it doesn’t exist in the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌼&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌵&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍄&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;uniqueVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;uniqueVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;uniqueVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;uniqueVal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredArr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//["🌼", "🌴", "🌹", "🌵", "🍄"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-reduce-method"&gt;
  &lt;/a&gt;
  4️⃣ Using Reduce Method 😎
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;reduce&lt;/code&gt; method is used to reduce the elements of the array and combine them into a final array based on some reducer function that you pass.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌼&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌵&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍄&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredArr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//["🌼", "🌴", "🌹", "🌵", "🍄"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unique-method-to-the-array-prototype"&gt;
  &lt;/a&gt;
  5️⃣ Unique Method to the Array Prototype 📔
&lt;/h3&gt;

&lt;p&gt;In Javascript the array prototype constructor allows you to add new properties and methods to the Array object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌼&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌵&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍄&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌴&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filteredArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filteredArr&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//["🌼", "🌴", "🌹", "🌵", "🍄"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference 🧐
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;MDN Docs — Set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;MDN Docs — Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"&gt;MDN Docs — Reduce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>True Is Not Always True In JavaScript</title>
      <author>Bibek</author>
      <pubDate>Fri, 14 May 2021 19:40:08 +0000</pubDate>
      <link>https://dev.to/bibekkakati/true-is-not-always-true-in-javascript-2n7m</link>
      <guid>https://dev.to/bibekkakati/true-is-not-always-true-in-javascript-2n7m</guid>
      <description>&lt;p&gt;Hello everyone👋&lt;/p&gt;

&lt;p&gt;In this article, I will try to explain the behaviour of the &lt;code&gt;boolean&lt;/code&gt; data type of JavaScript.&lt;/p&gt;

&lt;p&gt;We often use &lt;code&gt;if&lt;/code&gt; statements in JavaScript to check if a value, that can be of any data type is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. But do you know that these values are not really &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, rather they are considered as &lt;code&gt;truthy&lt;/code&gt; or &lt;code&gt;falsy&lt;/code&gt; values?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;Let's understand this with an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in the above code snippet, we declared a variable &lt;code&gt;val&lt;/code&gt; which is storing a string &lt;code&gt;"blog"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In general, &lt;code&gt;if&lt;/code&gt; statements expect a boolean expression or a boolean condition but here we are passing the variable &lt;code&gt;val&lt;/code&gt; directly without any boolean expression.&lt;/p&gt;

&lt;p&gt;And this &lt;code&gt;if&lt;/code&gt; statement evaluates the value of &lt;code&gt;val&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and execute its block. But why?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h3&gt;

&lt;p&gt;In JavaScript, any non-zero number including the negative numbers and non-empty strings are termed as &lt;code&gt;truthy&lt;/code&gt; values and the &lt;code&gt;truthy&lt;/code&gt; values are translated to boolean &lt;code&gt;true&lt;/code&gt; when evaluated in a Boolean context.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unhIj_Tr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6jicxhbucsnai2f38dq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unhIj_Tr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6jicxhbucsnai2f38dq.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in our example, as the value of the variable &lt;code&gt;val&lt;/code&gt; is a string with data i.e, not empty, it is considered as a &lt;code&gt;truthy&lt;/code&gt; value which evaluates to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement condition.&lt;/p&gt;

&lt;p&gt;And the values other than the &lt;code&gt;truthy&lt;/code&gt; values are termed as &lt;code&gt;falsy&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;falsy&lt;/code&gt; values in JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NAN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;''&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;""&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conversion"&gt;
  &lt;/a&gt;
  Conversion
&lt;/h3&gt;

&lt;p&gt;Convert the &lt;code&gt;truthy&lt;/code&gt; and &lt;code&gt;falsy&lt;/code&gt; values to boolean &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can pass the &lt;code&gt;truthy&lt;/code&gt; or &lt;code&gt;falsy&lt;/code&gt; value to the &lt;code&gt;Boolean()&lt;/code&gt; and it will return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can use the following syntax to convert it to a pure boolean value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We know this &lt;code&gt;truthy&lt;/code&gt; or &lt;code&gt;falsy&lt;/code&gt; concept is not so impacting but it is always better to handle pure boolean values.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/true-is-not-always-true-in-javascript"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading 🙏&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Feel free to connect 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pOmeWpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Converting My Vanilla JavaScript Project into React</title>
      <author>Jessica</author>
      <pubDate>Fri, 14 May 2021 19:36:43 +0000</pubDate>
      <link>https://dev.to/jesspaul/converting-my-vanilla-javascript-project-into-react-4iob</link>
      <guid>https://dev.to/jesspaul/converting-my-vanilla-javascript-project-into-react-4iob</guid>
      <description>&lt;p&gt;When I first learned React, my mind immediately went to the Super Tic Tac Toe game I built three months ago using Vanilla JavaScript. I thought this project was the perfect candidate to refactor into React because of the potential for reusable components and the use of state for the game logic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Follow along with the code:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/jesspaul/super-tic-tac-toe"&gt;Original Project Repo&lt;/a&gt; | &lt;a href="https://thirsty-bartik-47f936.netlify.app/"&gt;Deployed Original Project&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/jesspaul/react-super-tic-tac-toe"&gt;React Project Repo&lt;/a&gt; | &lt;a href="https://super-ttt.netlify.app/"&gt;Deployed React Project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#game-rules"&gt;
  &lt;/a&gt;
  Game Rules
&lt;/h1&gt;

&lt;p&gt;If you haven't played Super Tic Tac Toe, it's an advanced version of the original game where there is a tic tac toe grid inside each of the nine squares of the gameboard's exterior grid. Players take turns placing their symbol anywhere in the exterior grid space that corresponds to the interior grid space the previous player selected. &lt;br&gt;
&lt;a href="https://i.giphy.com/media/w4QLaaFAWs7WhZNETM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/w4QLaaFAWs7WhZNETM/giphy.gif" alt="demonstrating how to take turns in the game"&gt;&lt;/a&gt;&lt;/p&gt;
demonstrating how to take turns in the game


&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;I began by creating basic React components to match the original HTML, which was a lot of copy and pasted &lt;code&gt;div&lt;/code&gt; elements. It was so quick and easy to dynamically render the nine squares of the exterior grid and nine squares of each interior grid using the &lt;code&gt;.map()&lt;/code&gt; method on an array with nine elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [extValues, setExtValues] = useState([null, null, null, null, null, null, null, null, null]);

return (
    &amp;lt;div className="Gameboard"&amp;gt;
        {
            extValues.map((extValue, extIdx) =&amp;gt; (
                    &amp;lt;ExteriorSquare /&amp;gt;
            ))
        }
    &amp;lt;/div&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State
&lt;/h2&gt;

&lt;p&gt;I saved these values in state in order to render what is displayed in the square: an 'X', an 'O', or &lt;code&gt;null&lt;/code&gt; to display nothing. Also saved in state is the current player, the exterior grid square the current player can play in, and the game winner. Because these values are saved in state, the components will re-render whenever their value is changed. This replaces the need to manipulate the DOM as I did in the original project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onclick"&gt;
  &lt;/a&gt;
  onClick
&lt;/h2&gt;

&lt;p&gt;In addition to learning React, I also leveled up my JavaScript knowledge since I wrote the original project. In the original, I wrote six (6!!!) separate functions to add or remove click event listeners which provide functionality for the player to place their symbol in the space. In the React version, every interior grid space has the &lt;code&gt;onClick&lt;/code&gt; function, but I used ternary logic to determine if there is no winner yet, the space is currently empty, and the exterior grid space is valid (based on where the previous player played). If this expression evaluates to true, the space is clickable, if not, nothing will happen if the player tries to click on an invalid square.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleClick = (index) =&amp;gt; {
    if (!winner &amp;amp;&amp;amp; values[index] === null &amp;amp;&amp;amp; currentSquare.includes(extIdx)) {
         // functionality to handle click event
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#check-for-win"&gt;
  &lt;/a&gt;
  Check for Win
&lt;/h2&gt;

&lt;p&gt;I'm a little embarrassed to share the original code I wrote to check for a win because of how repetitive it is! But it got the job done and I couldn't think of a better way to do it at the time. This is just evidence of my growth as a dev. &lt;br&gt;
&lt;a href="https://i.giphy.com/media/8Y1lJFeb5QumDAhcaO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/8Y1lJFeb5QumDAhcaO/giphy.gif" alt="scrolling through scary, repetitive code"&gt;&lt;/a&gt;&lt;a href="https://i.giphy.com/media/D8sPFkUbKomTItk9Dl/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/D8sPFkUbKomTItk9Dl/giphy.gif" alt="scrolling through more scary, repetitive code"&gt;&lt;/a&gt;&lt;/p&gt;
scrolling through scary, repetitive code



&lt;p&gt;To be honest, I didn't come up with the new code, I turned to Google for help. But googling when you don't know the answer or to find a better, more efficient solution is a valid and necessary skill as a developer. The code in the GIFs above and the code block below are doing the same thing - checking for three matching values to determine if a player has three in a row and won the square. The two GIFs show checking for a win in the interior grid and in the exterior grid. The code below can check both from one function. Yay for efficiency!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const winningPositions = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
];

const checkWin = (squares) =&amp;gt; {
    for (let i = 0; i &amp;lt; winningPositions.length; i++) {
        const [a, b, c] = winningPositions[i];
        if (squares[a] &amp;amp;&amp;amp; squares[a] === squares[b] &amp;amp;&amp;amp; squares[a] === squares[c]) {
            return squares[a];
        }
    }
    return null;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h2&gt;

&lt;p&gt;The final piece of this refactor project is the styling, which I tried to keep the same between versions. I have since learned about CSS variables and that it's better to use relative sizes instead of sizing with hard coded pixels. In addition to those minor adjustments, I originally coded borders around the interior grids and used DOM manipulation to remove the borders on the 8 squares with outside edges. Because React works with the Virtual DOM, I decided to simplify this approach and just use background colors and grid gaps to display the borders around each square.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3uwjP6_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfolebsdi4he9dexrgis.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3uwjP6_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfolebsdi4he9dexrgis.png" alt="Refactored CSS in JS to CSS"&gt;&lt;/a&gt;&lt;/p&gt;
comparing CSS in JS to just CSS



&lt;h2&gt;
  &lt;a href="#thats-all-for-now"&gt;
  &lt;/a&gt;
  That's All... For Now!
&lt;/h2&gt;

&lt;p&gt;Thank you for reading about this refactor! If you're just starting to learn development, I would advise you to build projects however you can with your existing knowledge and you can always level up and refactor in the future. Who knows what kind of improvements I'll be able to make in three months!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>refactorit</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
