<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Is there a suitable equivalent to `Function.caller` in modern JS?</title>
      <author>Calin Baenen</author>
      <pubDate>Fri, 19 Nov 2021 01:20:19 +0000</pubDate>
      <link>https://dev.to/baenencalin/is-there-a-suitable-equivalent-to-functioncaller-in-js-1kn7</link>
      <guid>https://dev.to/baenencalin/is-there-a-suitable-equivalent-to-functioncaller-in-js-1kn7</guid>
      <description>&lt;p&gt;So, as MDN (Mozilla Developer Network) says, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller"&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt; is not only deprecated, but removed from the Relevant Web Standards.&lt;br&gt;
But, this isn't good for me, as I want to know what function is calling a function I have.&lt;br&gt;&lt;br&gt;
I have a set of private variables, and I only want "friend functions" to see those variables without having to return every function from another function. (Also because these private variables are user-defined, and thus can't be predicted, or written in advance.)&lt;/p&gt;

&lt;p&gt;So, I was wondering, does modern JS provide anything similar to &lt;code&gt;Function.caller&lt;/code&gt;?&lt;/p&gt;



&lt;center&gt;&lt;h1&gt;Thanks!&lt;br&gt;Cheers!&lt;/h1&gt;&lt;/center&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>help</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Guide to model training: Part 3 — Estimating your missing data</title>
      <author>Mage</author>
      <pubDate>Fri, 19 Nov 2021 00:59:11 +0000</pubDate>
      <link>https://dev.to/mage_ai/guide-to-model-training-part-3-estimating-your-missing-data-5h90</link>
      <guid>https://dev.to/mage_ai/guide-to-model-training-part-3-estimating-your-missing-data-5h90</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Oftentimes when collecting consumer data, there are times when you’re unable to retrieve all the data. Instead of having a lack of data ruin your results, you’ll want to “guestimate” what the data should be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Recap&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before we begin&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What does impute mean?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3 ways to impute&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Impute in Pandas&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next step&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://www.mage.ai/blog/scaling-numerical-data"&gt;last section&lt;/a&gt;, we completed scaling categorical and numerical data so that all of our data is scaled properly. The higher ups want a list of past customers to target for our sales campaign, so we’re given new data that shows the history of how past customers interacted with our past 4 promotional emails.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_c383C2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vy4daji5k05bk2z325fb.png" alt="Image description" width="574" height="300"&gt;&lt;em&gt;Big sales are coming soon!&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Using the new data, our goal is to build a model for the remarketing campaign. There’s just one small problem. Code embedded in the marketing campaign email contained bugs, leaving us unable to identify what actions the people who clicked the email took. The bug occurs every 5 emails, but was patched by the 2nd wave of emails. In this section, we’ll go over imputing, a technique used to fill in unknown results.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nm_GTjU---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elot5gyuy1r5dggj8l06.png" alt="Image description" width="164" height="164"&gt;&lt;em&gt;Bugs poke holes in my data (Source: &lt;a href="https://assets.website-files.com/577717ef3dcedd7133bc0ac5/58b95ce05d75b92f63032310_silverfish-damage.jpg"&gt;Pest Control&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;This guide will use the &lt;a href="https://app.box.com/s/ktd1t87fl925hjxkzsclp1343eq822f1"&gt;big_data&lt;/a&gt; dataset along with the new, &lt;a href="https://app.box.com/s/ybntbd8uibb2fzo61ljy1960bxpntozq"&gt;promo&lt;/a&gt; dataset. It is recommended to read our guide on transforming data, using &lt;a href="https://www.mage.ai/blog/surfing-through-dataframes"&gt;filters&lt;/a&gt;, and &lt;a href="https://www.mage.ai/blog/product-developers-guide-to-getting-started-with-ai-pt3-terraforming-dataframes"&gt;groups&lt;/a&gt;, to understand this section. Additionally, start reading from &lt;a href="https://www.mage.ai/blog/qualitative-data"&gt;part 1&lt;/a&gt;, to understand all the different data types we’ll be working with and how we got to this point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-impute-mean"&gt;
  &lt;/a&gt;
  What does impute mean?
&lt;/h2&gt;

&lt;p&gt;Impute is a technique used to fill in the missing information when given a dataset. When you impute, you use existing data to create references to missing data. Through imputing, data scientists are able to repair or patch parts of the data to give back its meaning. The quality of the data depends on how you handle imputing the data. The more complex a method is, the better the results. I’ll be showing 3 methods that are straightforward and easy for beginners, but do note that there are more out there that utilize other forms of AI, such as deep learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ways-to-impute"&gt;
  &lt;/a&gt;
  3 ways to impute
&lt;/h2&gt;

&lt;p&gt;To get started, let’s think about what kind of references we can use in the data. The simplest and the most common method is by filling in the missing value with the value with the most occurences. Another method is by computing the average and storing the value there. Finally, the 3rd utilizes a mix of both methods, it checks the closest values to the term, then averages it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mean-average-value"&gt;
  &lt;/a&gt;
  Mean average value
&lt;/h3&gt;

&lt;p&gt;Similarly, for mean average inputting, we calculate the average value out of all values in a column and then change the null values with the average value. Note that since this is an average, it will only work for numerical data and not categorical data, as categories are a classifier and not a count. In the case of a categorical variable, use a different method.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FkzCvYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj0zan1qy685pe05wvl7.png" alt="Image description" width="460" height="283"&gt;&lt;em&gt;Take the sum and divide by the total (Source: &lt;a href="https://getcalc.com/formula/math/average.png"&gt;getcalc&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#most-frequent-value"&gt;
  &lt;/a&gt;
  Most frequent value
&lt;/h3&gt;

&lt;p&gt;To calculate the most frequent value, first we search for the value that appears the most. Then we find all occurrences of the value and replace it with the most common value. A downside to this approach is that, since the value that is most common is used, it tends to skew data by adding bias towards the majority.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADF-YjbD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62kvv9kfychzwjdpg0u8.png" alt="Image description" width="880" height="462"&gt;&lt;em&gt;The hand of bias tips the scales (Source: Global Government Forum)&lt;/em&gt;
&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#knearest-neighbors"&gt;
  &lt;/a&gt;
  K-Nearest Neighbors
&lt;/h3&gt;

&lt;p&gt;K-Nearest Neighbors (KNN) is an algorithm that computes the closest “k” values in the graph. In imputation we’ll utilize this algorithm to determine a more accurate method that combines the best of both prior methods. Similar to taking the average, it takes into account portions of the dataset, but it only compares values nearby, resulting in less bias and more accuracy. Instead of repeating the most frequent value, it takes into consideration the other values, and constructs a graph to visit each neighborhood, or set of data points. However, since it is a brute force method that visits every value, it takes a long amount of time to run as the datasets grow larger.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dDLU7Zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nzis3rsfuxveow3lvi2.gif" alt="Image description" width="525" height="393"&gt;&lt;em&gt;KNN graph (Source: &lt;a href="https://towardsdatascience.com/6-different-ways-to-compensate-for-missing-values-data-imputation-with-examples-6022d9ca0779"&gt;Towards Data Science&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#impute-in-pandas"&gt;
  &lt;/a&gt;
  Impute in Pandas
&lt;/h2&gt;

&lt;p&gt;First, we identify what type of data the promotional data we’re imputing is. By the looks of it, the value represents whether a user accepted the email campaign. In this case it’s a categorical variable, which represents the categories of “did accept” and “didn’t accept”.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3q221jpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l3sf9yrmlo74okp1bgq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3q221jpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l3sf9yrmlo74okp1bgq.png" alt="Image description" width="574" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a result, we cannot apply the mean average method and will use the most frequent value and K-nearest-neighbors to impute the &lt;strong&gt;AcceptedCmp1&lt;/strong&gt; in the promo dataset. Most frequent and mean average can be calculated using a &lt;a href="https://scikit-learn.org/stable/modules/generated/sklearn.impute.SimpleImputer.html#sklearn.impute.SimpleImputer"&gt;SimpleImputer&lt;/a&gt;, but we’ll be using Pandas to show the basic steps taken.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#most-frequent"&gt;
  &lt;/a&gt;
  Most frequent
&lt;/h3&gt;

&lt;p&gt;Using Pandas, along with grouping the values into True, False, and None, we can find the most frequently used of the 1s and 0s then set the NaN values to be equal. First, to find the count, we group the data to be 0 or 1 and take the count using &lt;strong&gt;size&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_BwMT81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xd3f3zlmf2g77zouuc7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_BwMT81--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xd3f3zlmf2g77zouuc7u.png" alt="Image description" width="540" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we’ll use fillna to replace the values with 0. Previously, NaN couldn’t be an integer, so we also convert the float back to int, since true/false values should be 0 or 1.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4Wu01Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xj765j0ktpmxupt2arz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4Wu01Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xj765j0ktpmxupt2arz.png" alt="Image description" width="574" height="22"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Taking a look at the output, we now have this as our final dataset.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--48dnfFIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pii3hjan93c2bkumw2lw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--48dnfFIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pii3hjan93c2bkumw2lw.png" alt="Image description" width="574" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The breakdown can be found again by grouping and taking the &lt;strong&gt;size&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XM6Ub0ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzul464r4cugmmp1xfm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XM6Ub0ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzul464r4cugmmp1xfm2.png" alt="Image description" width="540" height="185"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knearest-neighbors"&gt;
  &lt;/a&gt;
  K-Nearest Neighbors
&lt;/h3&gt;

&lt;p&gt;The algorithm of K-Nearest Neighbors is more complex and it visits each and every point. In this case, we’ll leverage the &lt;strong&gt;KNNImputer&lt;/strong&gt; function from SciKit Learn.&lt;/p&gt;

&lt;p&gt;Start by importing the functions we’ll be using, then select a value for “k”. This will determine the depth of the graph, and larger values will increase the time.&lt;/p&gt;

&lt;p&gt;Since there are 2240 rows, we’ll pick a k value of 3 which is the floor of log(2240). I chose this arbitrarily by taking the log, since the function grows exponentially. Please note there may be better ways to determine the k value, which is better learned through trial and error.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U_hsMB8B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf6zoxrb5flc6dz8qyys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U_hsMB8B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf6zoxrb5flc6dz8qyys.png" alt="Image description" width="543" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we can take our imputer, and apply it to our promo dataframe.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-DW3SPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5skku9nv1pq81mfpvbir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-DW3SPW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5skku9nv1pq81mfpvbir.png" alt="Image description" width="574" height="21"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBAejgtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbf88pr0u5czddrbl6x9.png" alt="Image description" width="574" height="233"&gt;&lt;em&gt;Upon inspection, we notice that some values aren’t exactly 1 or 0, but are in between.&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;We’ll take an extra step to round off, so “maybe” values become strictly “yes” or “no”.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-K6hqcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bk7st2zytgufk47d361v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-K6hqcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bk7st2zytgufk47d361v.png" alt="Image description" width="574" height="173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-step"&gt;
  &lt;/a&gt;
  Next Step
&lt;/h2&gt;

&lt;p&gt;KNN was able to give more accurate results, but this doesn’t mean that the choices were correct. With such a big difference between accepted or not, using the most frequent value can save time compared to using the KNN. On the other hand, when you value accuracy and are dealing with smaller datasets or have a lot of time, KNNs will pick values in the middle of actual and frequent. Now that we’ve prepared all our data, we are now ready to begin training models. In the next series, we’ll look at how to train machine learning models for our remarketing use case. We’ll go deeper into what a model means, metrics, and answer the big question, which users should be part of the remarketing campaign?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zRYnrM5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgrsf0vyepuh2an0bxvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zRYnrM5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgrsf0vyepuh2an0bxvn.png" alt="Image description" width="574" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>deved</category>
      <category>machinelearning</category>
      <category>modeltraining</category>
      <category>mage</category>
    </item>
    <item>
      <title>Absolute Beginner's Guide to Deploy ML model with Flask (Part-1)</title>
      <author>Afroza Nowshin</author>
      <pubDate>Thu, 18 Nov 2021 23:10:05 +0000</pubDate>
      <link>https://dev.to/afrozansenjuti/absolute-beginners-guide-to-deploy-ml-model-with-flask-part-1-deo</link>
      <guid>https://dev.to/afrozansenjuti/absolute-beginners-guide-to-deploy-ml-model-with-flask-part-1-deo</guid>
      <description>&lt;p&gt;Data Science Kitty is so happily purring because she can now predict heart disease with her model (&lt;a href="https://dev.to/orthymarjan/beginners-journey-in-machine-learning-3ei9?fbclid=IwAR02yqZ8RVT13XW1-MP66RJiNKMnHvOyhw8Dvgu2AcWPuq1kzqnjByjEc0s"&gt;https://dev.to/orthymarjan/beginners-journey-in-machine-learning-3ei9?fbclid=IwAR02yqZ8RVT13XW1-MP66RJiNKMnHvOyhw8Dvgu2AcWPuq1kzqnjByjEc0s&lt;/a&gt;). She now wishes to use the model for a website where hoomans will give input and after submitting the data will receive a prediction. This means that the model has to be incorporated with an interactive medium; hoomans will give their inputs on a form and the model will give the prediction based on the form data. But how?&lt;/p&gt;

&lt;p&gt;Kitty remembers that her friend ML engineer doge is an expert at bonking everything. Doge promised kitty, “I’ll teach you how to deploy your model.” The Data science kitty is confused now. “What is deploy, doge?” &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YKgNLEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unkzn4hp73arae3g6hxe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YKgNLEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unkzn4hp73arae3g6hxe.jpg" alt="Confused" width="880" height="753"&gt;&lt;/a&gt;&lt;br&gt;
Doge drew a diagram for explaining the basics:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1_i40zAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpqngq431q1ogrdjbvk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1_i40zAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpqngq431q1ogrdjbvk6.png" alt="Process" width="681" height="211"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step1-installing-virtual-environment-and-flask"&gt;
  &lt;/a&gt;
  Step-1: Installing virtual environment and Flask
&lt;/h2&gt;

&lt;p&gt;The first and foremost thing to do for any type of Python development is to set up a virtual environment where you will manage all the tools and dependencies within a Python version of your choice. Python comes with &lt;a href="https://docs.python.org/3/library/venv.html#module-venv"&gt;venv&lt;/a&gt; module to manage virtual environments. You can either use this or opt for Python Virtual Environment or pyenv which you can install from the links below - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/pyenv/pyenv"&gt;https://github.com/pyenv/pyenv&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pyenv/pyenv-virtualenv"&gt;https://github.com/pyenv/pyenv-virtualenv&lt;/a&gt; - This plugin makes managing multiple Python virtual environments on Unix like systems so much easier.
You can use &lt;a href="https://docs.conda.io/en/latest/"&gt;Conda&lt;/a&gt; as well for setting up your virtual environment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After setting up a virtual environment, you can install Flask from the &lt;a href="https://flask.palletsprojects.com/en/2.0.x/installation/"&gt;official document&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step2-load-the-model"&gt;
  &lt;/a&gt;
  Step-2: Load the model
&lt;/h2&gt;

&lt;p&gt;Kitty has the model for predicting heart disease as a joblib file. You need to ensure that your model file’s Python version is the same as that of Flask’s version. There are two approaches to ensure the same Python version:&lt;/p&gt;

&lt;p&gt;If you have run your entire machine learning project in Colab then just run the below command in a Colab cell, and install this particular version of Python Virtual environment for the Flask project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!python --version

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create your model and extract the joblib file from the Jupyter notebook. That way, your model file and Flask project will remain within the same Python version. &lt;br&gt;
This solves kitty’s issue of matching the python versions of joblib and the system that doge is making for her. Inside project directory, at first create afile named app.py and write the following line of codes to start with the Flask skeleton:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello_world():
    return "&amp;lt;p&amp;gt;Hello, World!&amp;lt;/p&amp;gt;"

if __name__ == "__main__":
    app.run()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the following command, you can see on &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt; that there is a webpage with the text “Hello, World!”&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
python app.py

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For clarity, doge put the joblib file inside a folder called “resource”. To load the model in our app, we will import the load function and save the model in variable named pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from joblib import load 
pipeline = load("resource/diseaseprediction.joblib")

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can return an html page with our app function. All we have to do is to write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def hello_world():
    return render_template('home.html')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Import the function render_template with Flask and you are good to go till now. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step3-write-a-template-for-input"&gt;
  &lt;/a&gt;
  Step-3: Write a template for input
&lt;/h2&gt;

&lt;p&gt;This is the most bonking, I mean the most boring part of the whole process. We wrote render_template(‘home.html’) but there is no html to render. In a Flask project, you need to create a directory named “templates” which will have all the web pages. For this project, we will require just the home page. We have &lt;a href="https://www.w3schools.com/"&gt;W3Schools&lt;/a&gt; to get this basic layout done. &lt;/p&gt;

&lt;p&gt;The user input will be the feature columns of Kitty’s model, which means there are 13 fields in the form. I checked the value type of each input and based on that, the code for the form will be like the following -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h2 style="text-align:center"&amp;gt;Do I have heart disease?&amp;lt;/h2&amp;gt;

&amp;lt;p style="text-align:center"&amp;gt;Fill out this form and check!&amp;lt;/p&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;form&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="age"&amp;gt;Age&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="text" id="age" name="age" placeholder="Your Age" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Sex&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="sex" name="sex" value="1"&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Male&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="sex" name="sex" value="0" required&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Female&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="cp"&amp;gt;Chest Pain Type&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;select id="cp" name="cp" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Mild&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="rbp"&amp;gt;Resting Blood Pressure&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="text" id="trestbps" name="trestbps" placeholder="Your bp in mm Hg" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="chol"&amp;gt;Cholesterol&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="text" id="chol" name="chol" placeholder="Your serum cholestoral in mg/dl" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Fasting Blood Sugar&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="fbs" name="fbs" value="1" required&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Diabetic&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="fbs" name="fbs" value="0"&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Non diabatic&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div
                &amp;lt;label for="restecg"&amp;gt;Resting Electrocardiographic Results&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div
                &amp;lt;select id="restecg" name="restecg" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="thalach"&amp;gt;Maximum Heart Rate Achieved&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div
                &amp;lt;input type="text" id="thalach" name="thalach" placeholder="Your maximum achieved heart rate" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div
            &amp;lt;div&amp;gt;
                &amp;lt;label for="exang"&amp;gt;Exercise Induced Angina&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="exang" name="exang" value="1"&amp;gt;
                &amp;lt;label for="exang"&amp;gt;Yes&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="radio" id="exang" name="exang" value="0" required&amp;gt;
                &amp;lt;label for="exang"&amp;gt;No&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="oldpeak"&amp;gt;OldPeak (floating point value)&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;input type="text" id="oldpeak" name="oldpeak"
                       placeholder="ST depression induced by exercise relative to rest" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="slope"&amp;gt;The Slope of the Peak Exercise ST Segment&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;select id="slope" name="slope" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="ca"&amp;gt;Number of Major Vessels (0-3)&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;select id="ca" name="ca" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;0&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;label for="thal"&amp;gt;Thal: 3 = normal; 6 = fixed defect; 7 = reversable defect&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div&amp;gt;
                &amp;lt;select id="thal" name="thal" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;0&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;
                    &amp;lt;option value="4"&amp;gt;4&amp;lt;/option&amp;gt;
                    &amp;lt;option value="5"&amp;gt;5&amp;lt;/option&amp;gt;
                    &amp;lt;option value="6"&amp;gt;6&amp;lt;/option&amp;gt;
                    &amp;lt;option value="7"&amp;gt;7&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div&amp;gt;
            &amp;lt;button type="submit"&amp;gt;Submit Data&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of this html file looks like this - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNbe6nyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u71m803fdufmxquh3gw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNbe6nyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u71m803fdufmxquh3gw6.png" alt="html" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks too plain because we didn’t do the styling. It’s also tiring I know. Doge wants to keep the template basic, so she searched for a form template in W3School. Without this website, learning html and CSS would be no hard for doge. Form template link - &lt;a href="https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_contact_form"&gt;https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_contact_form&lt;/a&gt;. As our target is to deploy the model, we need to make sure that all 13 data are posted to this form, extracted and used as the input to the model that we loaded earlier. Do the following two tasks to ensure that:&lt;/p&gt;

&lt;p&gt;In the “form” tag, set the destination of where the data will be posted. As this is a single page web application, the form action attribute is the address of where this application is running, that is &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt;, and the method attribute is of type post.&lt;br&gt;
Input to the model is a data frame; therefore you have to match every data to their designated column. If you set the id, name and for attribute to the original data frame column name and set the value attribute (only the tags that require a value attribute such as a selection tag) to the finite intended value of the column, the form will be able to generate an object of the type immutablemultidict, which is a Flask form object. We will process this object in the following section, but for now, let me explain with just one code snippet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--upFUGBYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0fmxn47orkbxppziv8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--upFUGBYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0fmxn47orkbxppziv8i.png" alt="cp" width="452" height="221"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ‘cp’ column in the dataset can take values 0,1,2 or 3, which I mapped for textual values; in the website, we can see this and not what the value attributes contain. After incorporating all the CSS classes and sources for styling the html looked like the following. We are almost there, yems!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css"&amp;gt;
    &amp;lt;style&amp;gt;
        * {
            box-sizing: border-box;
        }

        input[type=text], select, textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: vertical;
        }

        label {
            padding: 12px 12px 12px 0;
            display: inline-block;
        }

        input[type=submit]:hover {
            background-color: #45a049;
        }

        .container {
            border-radius: 5px;
            background-color: #f2f2f2;
            padding: 20px;
        }

        .col-25 {
            float: left;
            width: 25%;
            margin-top: 6px;
        }

        .col-75 {
            float: left;
            width: 75%;
            margin-top: 6px;
        }

        /* Clear floats after the columns */
        .row:after {
            content: "";
            display: table;
            clear: both;
        }

        .center {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }

        /* Responsive layout - when the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other */
        @media screen and (max-width: 600px) {
            .col-25, .col-75, input[type=submit] {
                width: 100%;
                margin-top: 0;
            }
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h2 style="text-align:center"&amp;gt;Do I have heart disease?&amp;lt;/h2&amp;gt;

&amp;lt;p style="text-align:center"&amp;gt;Fill out this form and check!&amp;lt;/p&amp;gt;
&amp;lt;div class="container"&amp;gt;
    &amp;lt;form action="http://localhost:5000/" method="post"&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="age"&amp;gt;Age&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="age" name="age" placeholder="Your Age" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Sex&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="sex" name="sex" value="1"&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Male&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="sex" name="sex" value="0" required&amp;gt;
                &amp;lt;label for="sex"&amp;gt;Female&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="cp"&amp;gt;Chest Pain Type&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="cp" name="cp" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Mild&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="rbp"&amp;gt;Resting Blood Pressure&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="trestbps" name="trestbps" placeholder="Your bp in mm Hg" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="chol"&amp;gt;Cholesterol&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="chol" name="chol" placeholder="Your serum cholestoral in mg/dl" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Fasting Blood Sugar&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="fbs" name="fbs" value="1" required&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Diabetic&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="fbs" name="fbs" value="0"&amp;gt;
                &amp;lt;label for="fbs"&amp;gt;Non diabatic&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="restecg"&amp;gt;Resting Electrocardiographic Results&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="restecg" name="restecg" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="thalach"&amp;gt;Maximum Heart Rate Achieved&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="thalach" name="thalach" placeholder="Your maximum achieved heart rate" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="exang"&amp;gt;Exercise Induced Angina&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="exang" name="exang" value="1"&amp;gt;
                &amp;lt;label for="exang"&amp;gt;Yes&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;input type="radio" id="exang" name="exang" value="0" required&amp;gt;
                &amp;lt;label for="exang"&amp;gt;No&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="oldpeak"&amp;gt;OldPeak (floating point value)&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;input type="text" id="oldpeak" name="oldpeak"
                       placeholder="ST depression induced by exercise relative to rest" required&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="slope"&amp;gt;The Slope of the Peak Exercise ST Segment&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="slope" name="slope" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;None&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;Medium&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;Severe&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="ca"&amp;gt;Number of Major Vessels (0-3)&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="ca" name="ca" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;0&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-25"&amp;gt;
                &amp;lt;label for="thal"&amp;gt;Thal: 3 = normal; 6 = fixed defect; 7 = reversable defect&amp;lt;/label&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-75"&amp;gt;
                &amp;lt;select id="thal" name="thal" required&amp;gt;
                    &amp;lt;option value="0"&amp;gt;0&amp;lt;/option&amp;gt;
                    &amp;lt;option value="1"&amp;gt;1&amp;lt;/option&amp;gt;
                    &amp;lt;option value="2"&amp;gt;2&amp;lt;/option&amp;gt;
                    &amp;lt;option value="3"&amp;gt;3&amp;lt;/option&amp;gt;
                    &amp;lt;option value="4"&amp;gt;4&amp;lt;/option&amp;gt;
                    &amp;lt;option value="5"&amp;gt;5&amp;lt;/option&amp;gt;
                    &amp;lt;option value="6"&amp;gt;6&amp;lt;/option&amp;gt;
                    &amp;lt;option value="7"&amp;gt;7&amp;lt;/option&amp;gt;
                &amp;lt;/select&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;div class="center"&amp;gt;
            &amp;lt;button class="w3-button w3-green" type="submit"&amp;gt;Submit Data&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks a bit fancy now too. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2pb8g_2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w79avmhf72xano8vy7nu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2pb8g_2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w79avmhf72xano8vy7nu.png" alt="website" width="880" height="734"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step4-process-the-input"&gt;
  &lt;/a&gt;
  Step-4: Process the input
&lt;/h2&gt;

&lt;p&gt;We have collected the form data. We have to feed this form into the model so that it can predict. Let us write a function for that. At first, we will check the type of object that form creates after we hit the submit button. &lt;strong&gt;Pro-tip, while coding in python and javascript, pass the object through the built-in “type” function. This will yield the type of object that you are going to deal with.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@app.route('/', methods=['GET', 'POST'])
def inputForm():
    print("type", type(request.form))
# type ImmutableMultiDict

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can transform this object into a dictionary, and transform it again into a pandas data frame. This dataframe is the input to the model. We will save the output in a variable named “prediction”. &lt;/p&gt;

&lt;p&gt;The whole function will look like something like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import pandas as pd

@app.route('/', methods=['GET', 'POST'])
def inputForm():
    print("type", type(request.form.to_dict(flat=False))) #changing to a dictionary
    print("checking form", request.form.to_dict()) #dictionary to datframe
    data = request.form.to_dict() 
    df = pd.DataFrame(data, index=[0]) 
    print("prediction", pipeline.predict(df)) 
    if pipeline.predict(df) == [1]: 
    prediction = "You are in risk of heart disease" 
    elif pipeline.predict(df) == [0]: 
    prediction = "You don't have risk of heart disease" 
    else: prediction = "Can't predict anything" 
    return render_template('home.html', prediction = prediction, show_predictions_modal = True )

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step5-show-the-prediction"&gt;
  &lt;/a&gt;
  Step-5: Show the prediction
&lt;/h2&gt;

&lt;p&gt;“We have the prediction but how to show that now?” Kitty asked Doge. Doge assured her that she has got it covered. “In our html we will incorporate a modal that will pop after we hit the submit button, said Doge.”&lt;/p&gt;

&lt;p&gt;We will pop the modal first. Doge is getting impatient, so she headed to W3schools again (&lt;a href="https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_modal2"&gt;https://www.w3schools.com/w3css/tryit.asp?filename=tryw3css_modal2&lt;/a&gt;) and created this modal named “See Result”. &lt;/p&gt;

&lt;p&gt;The button action of this modal is to show the prediction variable that we are returning from app.py file. We also set a flag inside the render_template function. When the prediction is done, we will conditionally render the modal. After hitting the submit button, we will get to see the modal. Click that and you can see the prediction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
{% if show_predictions_modal %}
        &amp;lt;div class="center"&amp;gt;
            &amp;lt;button onclick="document.getElementById('id01').style.display='block'" class="w3-button w3-black"
                    type="submit"&amp;gt;See
                Result
            &amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id="id01" class="w3-modal"&amp;gt;
            &amp;lt;div class="w3-modal-content"&amp;gt;
                &amp;lt;div class="w3-container"&amp;gt;
                        &amp;lt;span onclick="document.getElementById('id01').style.display='none'"
                              class="w3-button w3-display-topright"&amp;gt;&amp;amp;times;&amp;lt;/span&amp;gt;
                    &amp;lt;div class="w3-container"&amp;gt;
                        &amp;lt;p style="text-align:center"&amp;gt;{{ prediction }}&amp;lt;/p&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    {% endif %}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PIbngmZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu2g1nz5u39ymkkdmx5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PIbngmZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu2g1nz5u39ymkkdmx5n.png" alt="modal" width="880" height="387"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9k7JXgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xito8d1e3m735owzbhid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9k7JXgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xito8d1e3m735owzbhid.png" alt="modal result" width="880" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The entire project is uploaded in my GitHub repository on the branch Project_HeartDiseasPrediction, where you can see the entire html code as I didn’t write the incorporated version in the end - &lt;a href="https://github.com/Afroza2/Production-Based-ML-portfolio/tree/Project_HeartDiseasePrediction"&gt;https://github.com/Afroza2/Production-Based-ML-portfolio/tree/Project_HeartDiseasePrediction&lt;/a&gt;. The dataframe that you passed as the argument of the prediction function can now be created from user input and the output will be shown in the modal. For Part-2, I am planning to write on how to host this entire project as a Heroku application so that you can access the project online. Till then, bonk!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>python</category>
    </item>
    <item>
      <title>What are the coolest coding + music projects out there?</title>
      <author>Ben Halpern</author>
      <pubDate>Thu, 18 Nov 2021 22:28:45 +0000</pubDate>
      <link>https://dev.to/ben/what-are-the-coolest-coding-music-projects-out-there-3kno</link>
      <guid>https://dev.to/ben/what-are-the-coolest-coding-music-projects-out-there-3kno</guid>
      <description>&lt;p&gt;Take this question any way you want, but what projects marry scripting and coding, or just music projects that lend themselves to development in any way.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>music</category>
    </item>
    <item>
      <title>The Developer's Guide TO Building Notification Systems: Part 3 - Routing &amp; Preferences</title>
      <author>Micah Zayner</author>
      <pubDate>Thu, 18 Nov 2021 22:21:41 +0000</pubDate>
      <link>https://dev.to/courier/the-developers-guide-to-building-notification-systems-part-3-routing-preferences-3g27</link>
      <guid>https://dev.to/courier/the-developers-guide-to-building-notification-systems-part-3-routing-preferences-3g27</guid>
      <description>&lt;p&gt;Your CTO handed you a project to revamp or build your product’s notification system recently. You realized the complexity of this project around the same time as you discovered that there’s not a lot of information online on how to do it. Companies like LinkedIn, Uber, and Slack have large teams of over 25 employees working just on notifications, but smaller companies like yours don’t have that luxury. So how can you meet the same level of quality with a team of one? This is the third post in our series on how you, a developer, can build or improve the best notification system for your company. It follows the first post about identifying &lt;a href="https://www.courier.com/blog/the-developers-guide-user-requirements"&gt;user requirements&lt;/a&gt; and designing with &lt;a href="https://www.courier.com/blog/scalability-and-reliability"&gt;scalability and reliability&lt;/a&gt; in mind. In this piece, we will learn about setting up routing and preferences.&lt;/p&gt;

&lt;p&gt;Notifications serve a range of purposes, from delivering news to providing crucial security alerts that require immediate attention. A reliable notification system both enables valuable interactions between an organization and its customers and prospects and also drives user engagement. These systems combine software engineering with the art of marketing to the right people at the right time.&lt;/p&gt;

&lt;p&gt;Building a service capable of dynamically routing notifications and managing preferences is vital to any notification system. But if you’ve never built a system like this, it might be difficult to figure out what the requirements are and where the edge cases lie. &lt;/p&gt;

&lt;p&gt;In this article, you’ll learn invaluable points to consider when building your own routing service.  You’ll understand the requirements for multi-channel support and in choosing the right API providers. You’ll also learn how to design user preferences so that you can make the most out of each message. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multichannel-support-a-necessity"&gt;
  &lt;/a&gt;
  Multi-channel support: a necessity
&lt;/h2&gt;

&lt;p&gt;Let’s say that you have just built a web-based application. The first channel that you’ll use to connect with your users is likely email because of how ubiquitous it is. However, with the diversification of channels and depending on your use case, email might not be the most efficient notification channel for you. Compared to other channels, emails typically have a low delivery rate, a low open rate, and a high time to open rate. It’s not uncommon for people to take a full day to even notice your email. If your email gets to the user, it might take awhile before they open it, if at all. &lt;/p&gt;

&lt;p&gt;To engage with your users more effectively, you’ll want to support channels across a broad range of systems not limited to any one application or device. It’s vital to understand not only which channels are most relevant for you but also for your users. If you opt to use Telegram and your users don’t have it, it won’t be a very useful channel to interact with them. Multi-channel support is also vital because while you might pick appropriate channels today, you won’t know which channels you will need to support in the future. Typically, the more appropriate channels you support, the higher the chances of intersecting with applications your users actually use now and in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-notification-channels-and-providers"&gt;
  &lt;/a&gt;
  Choosing notification channels and providers
&lt;/h2&gt;

&lt;p&gt;You’ll have to select relevant channels and appropriate providers for each channel. For example, two core providers for mobile push notifications are &lt;a href="https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1"&gt;Apple Push Notification Service (APNs)&lt;/a&gt; and &lt;a href="https://firebase.google.com/docs/cloud-messaging"&gt;Firebase Cloud Messaging (FCM)&lt;/a&gt;. APNs only supports Apple devices while Firebase supports both Android and iOS as well as Chrome web apps. &lt;/p&gt;

&lt;p&gt;In the world of email providers, SendGrid, Mailgun, and Postmark are all popular but there are hundreds more. All email APIs differ in what they offer, both in supported functionality and API flexibility. Some providers, like Mailgun, only support transactional emails triggered by user activity. Other providers, like SendGrid and Sendinblue, offer both transactional and marketing emails. If your company opts for a provider that can handle both, you’ll still want to separate the traffic sources, by using different email addresses or domains, to aid email deliverability. If you only have one domain for sending both types of emails and the domain gets flagged as spam, your critical transactional emails will also be affected. Whichever provider you choose, you’ll still want to meticulously verify your DKIM, SPF, and DMARC checks, and domain and IP blacklisting using your own tools or a site like &lt;a href="https://www.mail-tester.com/"&gt;Mail-Tester&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Making requests and receiving responses also differs with each email API provider. Some providers, like Amazon SES, require the developer to &lt;a href="https://www.courier.com/blog/send-email-attachments-aws-s3"&gt;handle sending attachments&lt;/a&gt;, while others, like Mailgun, &lt;a href="https://documentation.mailgun.com/en/latest/api-sending.html#sending"&gt;provide fields in the API schema&lt;/a&gt; for including attachment files directly. &lt;/p&gt;

&lt;p&gt;There are minute variances in formatting HTTPS requests. The maximum payload sizes range from 10MB with Amazon SES API and up to 50MB with Postmark. There are also differences between the rate limits for requests.&lt;/p&gt;

&lt;p&gt;In terms of API responses, Amazon SES &lt;a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_SendEmail.html"&gt;provides&lt;/a&gt; a message identifier when an email is sent successfully through the API, but, for example, SendGrid &lt;a href="https://docs.sendgrid.com/api-reference/mail-send/mail-send"&gt;returns an empty response&lt;/a&gt; in that situation. The HTTP response codes also differ slightly depending on the provider. For example, AWS SES uses the response code &lt;a href="https://docs.aws.amazon.com/ses/latest/APIReference-V2/API_SendEmail.html#API_SendEmail_Errors"&gt;200&lt;/a&gt; for successful email send operations, while Sendinblue uses &lt;a href="https://developers.sendinblue.com/reference/sendtransacemail"&gt;201&lt;/a&gt;, and SendGrid uses &lt;a href="https://docs.sendgrid.com/api-reference/mail-send/mail-send#responses"&gt;202&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No matter which provider you end up choosing, don’t build your application solely to fit &lt;em&gt;their&lt;/em&gt; logic and specifications. If you do so, it will be much more difficult to change providers in the future as you’ll have to overhaul your backend. It’s crucial to invest in a layer of abstraction based on your own paradigm. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamically-routing-notifications-between-channels"&gt;
  &lt;/a&gt;
  Dynamically routing notifications between channels
&lt;/h2&gt;

&lt;p&gt;How do you determine which channels to use and when? Just because you’re able to use email, SMS and mobile push doesn’t mean that you should use all of them simultaneously, since doing so carries a high risk of annoying your users. This is where you begin to formulate an algorithm to route messages between the different channels and the different providers within each channel. The algorithm needs to be robust to handle delivery failures and other errors. For example, if the user hasn’t engaged with a push notification after a day, do you resend it or use email instead? &lt;/p&gt;

&lt;p&gt;You can begin constructing the algorithm using basic criteria. For example, if there is no phone number, eliminate SMS as an option for that user. If email is the primary channel, opting to send at 10 a.m. or 1 p.m. local time typically improves read rates. If the user is present or active in the app, consider sending an in-app push notification instead of an email. Finally, and especially important, get your user’s preferences for how and when they want to be contacted and integrate these preferences into your routing service. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-user-preferences-to-your-system"&gt;
  &lt;/a&gt;
  Adding user preferences to your system
&lt;/h2&gt;

&lt;p&gt;Once you’ve got your channels, providers, and routing algorithm figured out, you need to think about providing users with granular control over notification preferences instead of just a binary opt-in/opt-out switch.&lt;/p&gt;

&lt;p&gt;Consider this: if you only allow opting in to or out of all notifications at once, your users might unsubscribe from all your communications because they find one specific notification annoying. As a result, you will lose out on valuable user engagement.&lt;/p&gt;

&lt;p&gt;With granular control over preferences, a user identifies exactly how and when they hear from you. If a user doesn’t like email but wants SMS messages (not common, but possible!), they can adjust their preferences and keep the SMS line of communication open. Every enabled notification channel is another opportunity to engage the user in a way that’s productive for them. From the end user’s perspective, it’s empowering to control how and when they are contacted.&lt;/p&gt;

&lt;p&gt;Note that for some channels, the user’s preferences should be ignored. For instance, two-factor authentication should go to SMS or mobile push regardless of the user’s preference for email. The possibility to override the default logic should be incorporated into your algorithm while you are designing your routing engine. &lt;/p&gt;

&lt;p&gt;If you want to take user engagement further, allow users to opt-in/opt-out of specific channels, frequency, timing and topics. You can allow them to set up their preferences based on time of day, frequency per period, or to specify more than one email address. You can give them the option to receive transactional, digest emails, daily newsletters, or only the critical ones. You can also allow them to redirect their notifications to another address, for example if the user is out of office. &lt;/p&gt;

&lt;p&gt;Granular preferences also extend past the dominion of developers and the user’s experience. Granularity of consent is becoming part of privacy &lt;a href="https://edpb.europa.eu/sites/default/files/files/file1/edpb_guidelines_202005_consent_en.pdf"&gt;compliance laws in Europe&lt;/a&gt; and in the &lt;a href="https://src.bna.com/MVJ?utm_source=ANT&amp;amp;utm_medium=ANP"&gt;state of California&lt;/a&gt; and might follow elsewhere in the future. Separately, granular preferences are an extremely advantageous analytical tool for the marketing team to improve brand strategy and personalization efforts. Is there a particular channel or topic that seems to be more popular? That information can be highly helpful to pivot in line with your users and grow your company. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-futureproof-maintenance"&gt;
  &lt;/a&gt;
  Tips for future-proof maintenance
&lt;/h2&gt;

&lt;p&gt;When you’re starting with notifications for a new product, there is nothing wrong with sticking to one channel and one provider. The most important principle to keep in mind is to design your notification system so that you can expand it in the future. You should leave the door open to include more providers when you need them. &lt;/p&gt;

&lt;p&gt;Don’t assume that &lt;strong&gt;API paradigms&lt;/strong&gt; are the same for each provider or notification type. For example, you want to send an email, and if delivery fails to send a push notification instead. But you won’t get a 400 HTTP response from the email provider in case of failure. The provider will retry your email over a couple of days. Instead, you’ll want to include &lt;a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks"&gt;webhooks&lt;/a&gt; or queues to notify you of the failure, and you’ll need to track the state of the message here. If you make blanket assumptions about how API calls work or how errors are returned, you’ll have trouble adapting to a different paradigm in the future. Instead, you can add a layer of abstraction on top of the API.&lt;/p&gt;

&lt;p&gt;It’s also invaluable to &lt;strong&gt;centralize the way you call the provider APIs&lt;/strong&gt;. If you spread out calls to an API throughout your code base, it will be more difficult to integrate other channels or API providers in the future. Let’s say you’re starting with email and &lt;a href="https://docs.courier.com/docs/setup-email-using-aws-ses"&gt;AWS SES&lt;/a&gt; as the provider. In two years’ time, you might decide to integrate mobile push notifications as well. What might that look like? The incurred technical debt will include scouring the code base for all instances of calls to the AWS SES API before you can integrate mobile push as an additional channel. But with centralized calls, you’ll have more consistent, cleaner, and reusable code as you grow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-many-notification-channels-should-you-have"&gt;
  &lt;/a&gt;
  How many notification channels should you have?
&lt;/h2&gt;

&lt;p&gt;Typically, having three or four channels that are relevant to your product is an ideal scenario for a mature product. When you intersect channels with the preferences and availability of users, you create higher levels of complexity for your algorithm. Offering many channels for notifications might become too complex to maintain. But offering too few channels might harm your chances of interacting with users since some channels might not be viable for all users. For instance, you might decide to offer email and push notifications. But if a user didn’t download your product, your interaction with them is limited only to email. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-technologies-for-routing-and-preferences-engines"&gt;
  &lt;/a&gt;
  Best technologies for routing and preferences engines
&lt;/h2&gt;

&lt;p&gt;It ultimately pays to choose technologies that will be a good fit for your routing and preferences needs. There will be a great deal of &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts"&gt;asynchronous programming&lt;/a&gt;, as the routing service will often be waiting to receive responses for each function. You’ll want to pick a language or a framework that allows you to respond to async events at scale. &lt;/p&gt;

&lt;p&gt;The routing service also involves considerable state tracking, as most of the routing will depend on waiting on a response for each notification before changing state. The routing service will also need to be re-activated every time it receives a response from a provider and will need to determine if the notification was sent successfully or if it has to pursue next steps. See the example below of how a notification function’s state might be tracked.&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.contentful.com/z7iqk1q8njt4/5VU4MymXGGHdDqPJPJtr4J/5096e7e427e0838b89969927f207f4c7/image1.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.contentful.com/z7iqk1q8njt4/5VU4MymXGGHdDqPJPJtr4J/5096e7e427e0838b89969927f207f4c7/image1.png" alt="routing-and-preferences-rough-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At Courier, we use &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;. Since our usage tends to come in bursts, serverless technology allows us to adjust and scale for changes in demand throughout each day as well as handle asynchronous operations efficiently. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-forget-compliance-in-notification-routing"&gt;
  &lt;/a&gt;
  Don’t forget: compliance in notification routing
&lt;/h2&gt;

&lt;p&gt;When creating your own routing and preferences service, you will need to ensure that whichever channels you implement are fully compliant with applicable laws. For example, there are legal mandates on how users may be contacted or how they can unsubscribe from contact.&lt;/p&gt;

&lt;p&gt;For commercial email messages, the &lt;a href="https://www.ftc.gov/sites/default/files/documents/cases/2007/11/canspam.pdf"&gt;CAN-SPAM Act&lt;/a&gt; of 2003 is a federal United States law that spells out distinct rules and gives recipients a way to stop all contact. Penalties can cost as much as $16,000 per email in violation. This law also outlines requirements such as not using misleading header information or subject lines, identifying ads, and telling recipients how they can opt out of all future email from you. The opt-out process itself is strictly regulated.&lt;/p&gt;

&lt;p&gt;For SMS, the United States &lt;a href="https://www.fdic.gov/resources/supervision-and-examinations/consumer-compliance-examination-manual/documents/8/viii-5-1.pdf"&gt;Telephone Consumer Protection Act (TCPA)&lt;/a&gt; of 1991 sets forth rules against telemarketing and SMS marketing. Under this law, businesses cannot send messages to a recipient without their consent. This consent needs to be explicit and documented. The consent is also twofold: recipients need to consent to receiving SMS marketing messages and they need to consent to receiving them on their mobile device. Recipients need to be provided a description of what they are subscribing to, how many messages they should expect, a link to the terms and conditions of the privacy policy, and instructions on how to opt-out. &lt;/p&gt;

&lt;p&gt;In California especially, the &lt;a href="https://leginfo.legislature.ca.gov/faces/codes_displayText.xhtml?division=3.&amp;amp;part=4.&amp;amp;lawCode=CIV&amp;amp;title=1.81.5"&gt;California Consumer Privacy Act (CCPA)&lt;/a&gt; of 2018 provides additional rights for California residents only. These rights include the right to know which information a company has collected about them and how it’s used as well as the right to delete it or to opt-out of the sale of this information. Information that qualifies under the consumers’ right-to-know includes names, email addresses, products purchased, browsing history, geolocation information, fingerprints, and anything else that can be used to infer preferences. Should a consumer request this information, the company has to share the preceding 12 months of records, and also include sources of this information and with whom it was shared and why. In 2020, &lt;a href="https://src.bna.com/MVJ?utm_source=ANT&amp;amp;utm_medium=ANP"&gt;California Privacy Rights Act (CPRA)&lt;/a&gt; of 2020 amended the CCPA. The CRPA provides further consumer rights to limit the use and disclosure of their personal information.&lt;/p&gt;

&lt;p&gt;Other countries have their own compliance laws for businesses reaching out to leads and customers. Canada has its &lt;a href="https://laws-lois.justice.gc.ca/eng/acts/E-1.6/index.html"&gt;Anti-Spam Legislation (CASL)&lt;/a&gt;. The European Union has the &lt;a href="https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:32016R0679"&gt;General Data Protection Regulation (GDPR)&lt;/a&gt; which now also covers granularity of consent. The United Kingdom has its own regulations along with the GDPR, the &lt;a href="https://www.legislation.gov.uk/uksi/2003/2426/pdfs/uksi_20032426_en.pdf"&gt;Privacy and Electronic Communications Regulations (PECR)&lt;/a&gt; and &lt;a href="https://www.legislation.gov.uk/ukpga/2018/12/contents/enacted"&gt;Data Protection Act&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Compliance itself needs to be integrated at the developer level. Providers, like SendGrid, don’t know what you’re sending. It’s up to the developer to ensure that all applicable compliance laws are followed for their choice of channels. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Building a notification system into a product is not for everyone. The process is time-consuming, complex, and expensive. The level of notification customizability and routing options you decide to implement will ultimately dictate a preference for either maximizing user engagement or optimizing cost. A startup with a product that hasn’t yet found its product-market fit has to focus on finding early customers and getting their feedback. But established companies with a proven customer base will have concerns related to more complex routing logic, future-proofing and compliance. This would require more functionality and higher maintenance costs.&lt;/p&gt;

&lt;p&gt;This piece taught us about the necessity of sending data for notifications to the right people, at the right frequency, at the right time and how this can be done through routing and customized preferences. Tune in for the next post in this series to learn about observability and analytics to monitor the functioning and performance of your in-house notifications system. To stay in the loop about the upcoming content, subscribe below or follow us &lt;a href="https://twitter.com/trycourier?lang=en"&gt;@trycourier&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>startup</category>
      <category>operations</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Release 0.3 - Part 2 Internal Project Contribution</title>
      <author>Kevan Y</author>
      <pubDate>Thu, 18 Nov 2021 22:01:39 +0000</pubDate>
      <link>https://dev.to/pandanoxes/release-03-part-2-internal-project-contribution-4e70</link>
      <guid>https://dev.to/pandanoxes/release-03-part-2-internal-project-contribution-4e70</guid>
      <description>&lt;p&gt;For release 0.3, I worked on &lt;a href="https://github.com/Seneca-ICTOER/IPC144"&gt;IPC144&lt;/a&gt; as my internal project contribution. The issue is &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/11"&gt;Add Progressive Web App (PWA) support&lt;/a&gt;.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h2&gt;

&lt;p&gt;I started to install PWA plugin, but Docusaurus, I had some version not matching issue. It turns out that the current project is using an older version of Docusaurus (2.0.0-beta.2). The PWA plugin version has to match the version of Docusaurus to work.&lt;/p&gt;

&lt;p&gt;I created another &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/20"&gt;pull request&lt;/a&gt; for upgrading Docusaurus to version (2.0.0-beta.8). After the pull request got merged, I can start working on the PWA feature.&lt;/p&gt;

&lt;p&gt;To implement PWA, we first need an icon for 192x192  and 512x512. After that, we need to create a &lt;code&gt;manifest.json&lt;/code&gt; to add all the settings for PWA.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#DA291C"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"background_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"IPC144 - Course Notes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"short_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"IPC144"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"IPC144 course notes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"img/pwa/manifest-icon-192.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"192x192"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"any maskable"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"img/pwa/manifest-icon-512.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512x512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"any maskable"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we add some more config in &lt;code&gt;docusaurus.config.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@docusaurus/plugin-pwa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;offlineModeActivationStrategies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;standalone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queryString&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="na"&gt;pwaHead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img/pwa/manifest-icon-512.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;manifest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/manifest.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#DA291C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple-mobile-web-app-capable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple-mobile-web-app-status-bar-style&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#DA291C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple-touch-icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img/pwa/manifest-icon-192.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mask-icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img/pwa/manifest-icon-512.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#DA291C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msapplication-TileImage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img/pwa/manifest-icon-512.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;tagName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;meta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msapplication-TileColor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#DA291C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that PWA is set up. &lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Contributing to Telescope 🔭</title>
      <author>Luke Nguyen</author>
      <pubDate>Thu, 18 Nov 2021 21:39:24 +0000</pubDate>
      <link>https://dev.to/mqnguyen/contributing-to-telescope-k1</link>
      <guid>https://dev.to/mqnguyen/contributing-to-telescope-k1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;While waiting for reviews in my recent &lt;a href="https://dev.to/mqnguyen/contribution-to-course-curriculum-2eb9"&gt;pull request&lt;/a&gt;, I decided to find a different project. After hours of searching for issues on GitHub, I suddenly remembered the first repository where I made my first pull request, Telescope. Since then, the project has undergone many changes with different features and bug fixes, so I think it is time to make another contribution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issue"&gt;
  &lt;/a&gt;
  The issue
&lt;/h2&gt;

&lt;p&gt;A quick overview about &lt;a href="https://github.com/Seneca-CDOT/telescope"&gt;Telescope&lt;/a&gt;: it is a web server and application developed by professors and students at Seneca College to track students/faculties' blogs about anything open-source. &lt;/p&gt;

&lt;p&gt;For my &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2461"&gt;task&lt;/a&gt;, I had to customize Telescope's build log page to match the design and layout of the main dashboard, specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add header and side navigation bar&lt;/li&gt;
&lt;li&gt;Change side navigation default logo into Telescope logo&lt;/li&gt;
&lt;li&gt;Update link in side navigation logo to redirect to &lt;code&gt;./&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#working-on-the-issue"&gt;
  &lt;/a&gt;
  Working on the issue
&lt;/h2&gt;

&lt;p&gt;After setting up the development environment using Telescope's documentation, I began looking at the UI to figure out what I should do. Lucky for me, there was also a different &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2433"&gt;issue&lt;/a&gt; that addressed the dashboard page UI, so I decided to use that as a reference.&lt;/p&gt;

&lt;p&gt;I began by adding each UI component one by one, re-rendering the page every time I added in new code to make sure I didn't break anything. Once I was satisfied with my changes, I opened up a &lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2480"&gt;pull request&lt;/a&gt; on Telescope, explaining what I did and providing screenshots of the result. &lt;/p&gt;

&lt;p&gt;Since I was referencing another issue, I had to keep track of the updated changes in the other PR and update mine accordingly. The other PR also had many requested changes, so I tried my best to read through all the reviews, adding comments when I needed help and clarification to ensure that I wouldn't break or miss anything.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Similar to the other PR, when this post is online, the PR is currently under review. I will constantly keep an eye on new notifications regarding this PR and add more commits if needed.&lt;/p&gt;

&lt;p&gt;Cheers! 🍻&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>The Art of Functions</title>
      <author>Snehangsu De</author>
      <pubDate>Thu, 18 Nov 2021 21:32:50 +0000</pubDate>
      <link>https://dev.to/snehangsude/the-art-of-functions-2njg</link>
      <guid>https://dev.to/snehangsude/the-art-of-functions-2njg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#section-2-functions-%E2%9A%99"&gt;
  &lt;/a&gt;
  Section 2: Functions ⚙
&lt;/h2&gt;

&lt;p&gt;Wondering, what's up with this weird ancient art? Well, they help portray how civilization evolved much like how we learned to evolve our ways to talk to machines. Like us humans divided our society to do specific tasks say carpenters to work with wood, barbers to trim our hairs, similarly, we can ask machines to work specifically on something or take a specific action when some work is given. As an example imagine, when we wake up, we follow the below step -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get your bed done &amp;gt; Brush your teeth &amp;gt; Wash your face &amp;gt; Dry your face&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For machines, these are described as functions. To understand what a function is imagine a set of instructions that needs to be done when something happens.&lt;/p&gt;

&lt;p&gt;Now you might think why do we need to have functions? It's simple, however much we like to abuse &lt;strong&gt;Ctrl+C&lt;/strong&gt; &amp;amp; &lt;strong&gt;Ctrl+V&lt;/strong&gt; it's not a good practice to have repeatable code. Instead, every time you have to do the same action, you can simply call the function to make it work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fundamentals-of-functions"&gt;
  &lt;/a&gt;
  Fundamentals of Functions
&lt;/h2&gt;

&lt;p&gt;In Python, there are two kinds of functions - &lt;strong&gt;Built-in functions&lt;/strong&gt; and &lt;strong&gt;User-defined functions&lt;/strong&gt;. We will talk about Built-in functions in a later post.&lt;/p&gt;

&lt;p&gt;Today, we will discuss the three kinds of &lt;strong&gt;User-defined functions&lt;/strong&gt;, let's start with the basic one. To write any function we need to have a few important things in mind -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function should always start with &lt;code&gt;def&lt;/code&gt; word&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;def&lt;/code&gt; will be followed by the name of the function, recommended in all lower case&lt;/li&gt;
&lt;li&gt;The name of the function is followed by a parenthesis and colon &lt;code&gt;():&lt;/code&gt;, denoting the end of defining a function&lt;/li&gt;
&lt;li&gt;Any lines inside the function should be indented to work under the function call.&lt;/li&gt;
&lt;li&gt;Optional requirement, a docstring can be added right below the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's how it would look like. 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QVWXNa4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/revue/items/images/011/289/911/original/Function__2301.png%3F1632427737" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QVWXNa4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/revue/items/images/011/289/911/original/Function__2301.png%3F1632427737" alt="An example of Python Function" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the important takeaway from here is how a function when defined doesn't do anything, which means that it would be defined inside the variable &lt;code&gt;wake_up&lt;/code&gt; when you run the file, however, you would need to call it to make sure it does what you have asked it to do. You can call it by writing the unique name of the function you have defined, followed by the parenthesis.&lt;/p&gt;

&lt;p&gt;Here, I've asked it to print &lt;strong&gt;&lt;em&gt;I woke up at 8 AM&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before we jump into understanding the other two types of functions and when to use them, we need to understand two important concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Parameters&lt;/strong&gt; - Parameters are something that your function can take and work with, inside the function. Think of it as a variable inside a function that can take inputs or can be optional too.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Arguments&lt;/strong&gt; - Arguments are the values that you would assign to your parameter when calling the function. Think of it as assigning a value to the pre-defined parameters. Arguments are again defined into two groups:&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Positional Arguments&lt;/strong&gt; - Arguments that are called into functions based on the positions of the paraments.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Keyword Arguments&lt;/strong&gt; - Arguments that are called into functions using the same keyword that is used to define the parameters.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As we have grasped the basic idea of Parameters and Arguments let's dive into the next type of function &lt;em&gt;drum-roll&lt;/em&gt; -&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions-with-inputs"&gt;
  &lt;/a&gt;
  Functions with inputs 👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQKnkIQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/revue/items/images/011/290/173/original/Function__2302.png%3F1632429172" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQKnkIQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/revue/items/images/011/290/173/original/Function__2302.png%3F1632429172" alt="An example of Python function with input" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we can see that &lt;code&gt;wake_up&lt;/code&gt; has two parameters &lt;code&gt;time&lt;/code&gt; &amp;amp; &lt;code&gt;meridian&lt;/code&gt;. You can see that &lt;code&gt;time&lt;/code&gt; requires a value however &lt;code&gt;meridian&lt;/code&gt; has a pre-assigned value of a string &lt;code&gt;'AM'&lt;/code&gt;, which means that the meridian is optional for you to assign. Here's how you can call this function:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calling the function with only the required data -&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;u&gt;&lt;em&gt;Positional argument&lt;/em&gt;&lt;/u&gt;: &lt;code&gt;wake_up(12)&lt;/code&gt; --&amp;gt; This will print &lt;strong&gt;&lt;em&gt;I woke up at 12 AM&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;&lt;em&gt;Keyword argument&lt;/em&gt;&lt;/u&gt;: &lt;code&gt;wake_up(time=12)&lt;/code&gt; --&amp;gt; This will also print &lt;strong&gt;&lt;em&gt;I woke up at 12 AM&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Here, the 12 gets assigned to the time variable whereas the meridian uses the 'AM' as the default value.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calling the function with both data -&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;u&gt;&lt;em&gt;Positional argument&lt;/em&gt;&lt;/u&gt;: &lt;code&gt;wake_up(12, 'PM')&lt;/code&gt; --&amp;gt; This will print &lt;strong&gt;&lt;em&gt;I woke up at 12 PM&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;&lt;em&gt;Keyword argument&lt;/em&gt;&lt;/u&gt;: &lt;code&gt;wake_up(meridian='PM', time=12)&lt;/code&gt; --&amp;gt; This will print &lt;strong&gt;&lt;em&gt;I woke up at 12 PM&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Here, the 12 gets assigned to the time variable and the meridian gets assigned to the 'PM' value. This is one of the benefits of using keyword variables as it doesn't require the position of arguments to match the position of parameters.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/u&gt;: Changing the positional argument &lt;code&gt;wake_up('PM', 12)&lt;/code&gt; would print --&amp;gt; &lt;strong&gt;&lt;em&gt;I woke up at PM 12&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions-with-inputs-and-outputs"&gt;
  &lt;/a&gt;
  Functions with inputs and outputs 👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dKN0XTSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/revue/items/images/011/291/108/original/Function__2303.png%3F1632434550" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dKN0XTSu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/revue/items/images/011/291/108/original/Function__2303.png%3F1632434550" alt="An example of Python function with output" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is probably the most used kind of function and is really handy to work with. Almost every rule stays the same from when we defined the Fundamentals of Functions apart from the addition of one:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;As this gives us an output a command &lt;code&gt;return&lt;/code&gt; is added at the end which allocates the output to a variable outside the function which can then be re-used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/u&gt; Anything after the command &lt;code&gt;return&lt;/code&gt; would be ignored by the console as the function would immediately end and allocate the value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calling the function with positional argument -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;returned_value = add(2, 3)&lt;/code&gt; --&amp;gt; This doesn't print any value but instead allocated the variable &lt;code&gt;returned_value&lt;/code&gt; with &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Try this out and see, how the print statement is absolutely ignored by the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calling the function with keyword argument -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;returned_value = add(number1 = 6, number2 = 3)&lt;/code&gt; --&amp;gt; This too doesn't print any value but instead allocated the variable &lt;code&gt;returned_value&lt;/code&gt; with &lt;code&gt;9&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have now understood the types of functions that we can write to help us talk to machines efficiently, without having to repeat ourselves. However, sometimes, we speak in languages our machines have a hard time understanding, those are bugs or errors in our code.&lt;/p&gt;

&lt;p&gt;Here are a few common ones for you to catch:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Missing an argument, if your function has parameters would pop a &lt;code&gt;TypeError&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Writing a Keyword argument before a Positional argument would result in &lt;code&gt;SyntaxError&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Any line of code after the &lt;code&gt;return&lt;/code&gt; command on the same indentation level would be ignored.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's an image that summarizes how functions are triggered and how they work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3OMIzavZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/revue/items/images/011/291/499/original/Params.PNG%3F1632437863" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OMIzavZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3.amazonaws.com/revue/items/images/011/291/499/original/Params.PNG%3F1632437863" alt="An example of how functions work" width="432" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The code starts execution from the arrow tail and follows its head&lt;/li&gt;
&lt;li&gt;When it hits the star&lt;/li&gt;
&lt;li&gt;It jumps to see the function under the name of &lt;code&gt;sum&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Executes everything inside the function taking the arguments to replace the parameters&lt;/li&gt;
&lt;li&gt;Hits the &lt;code&gt;return&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;Allocates the value of the local variable &lt;code&gt;num&lt;/code&gt; to the global variable &lt;code&gt;addition&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it for Functions! Next, we will talk about more advanced function usages. Hope this has helped you understand how functions work &amp;amp; what exactly happens under the hood making our lives easier. If you have any interesting suggestions or feedbacks, feel free to connect with me on &lt;a href="https://twitter.com/__xSpace"&gt;Twitter&lt;/a&gt;. I also have a newsletter, which I send out every week Thursday. You can subscribe it &lt;a href="https://www.getrevue.co/profile/xSpace/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this message finds you in good health!&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Release 0.3 - Part 1 External Project Contribution</title>
      <author>Kevan Y</author>
      <pubDate>Thu, 18 Nov 2021 21:08:44 +0000</pubDate>
      <link>https://dev.to/pandanoxes/release-03-part-1-external-project-contribution-1oij</link>
      <guid>https://dev.to/pandanoxes/release-03-part-1-external-project-contribution-1oij</guid>
      <description>&lt;p&gt;For release 0.3, I started to contribute on &lt;a href="https://github.com/Heptagram-Bot"&gt;Heptagram&lt;/a&gt; repo. The notice that they migrated their website into React. I found out that they do not have prettier set up for the new React project. So I created an issue and asked to be assigned to work on that issue &lt;a href="https://github.com/Heptagram-Bot/heptagram.xyz/issues/98"&gt;✨❓ Feature Request: Add Prettier config&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I first started to install prettier, and add a script for it, one for checking and the other one for writing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;./**/*.{md,jsx,json,html,css,js,yml}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"prettier-check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;./**/*.{md,jsx,json,html,css,js,yml}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, I made &lt;code&gt;.prettierrc.json&lt;/code&gt; and add some rules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"arrowParens"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"bracketSpacing"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"embeddedLanguageFormatting"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"auto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"endOfLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"htmlWhitespaceSensitivity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"insertPragma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsxSingleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"proseWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"preserve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"quoteProps"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"as-needed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"requirePragma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"trailingComma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"useTabs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vueIndentScriptAndStyle"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"printWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I committed and pushed my change to remote, then I created a PR for asking if the prettier format is ok before I run a prettier on all files which change the whole project file format. &lt;/p&gt;

&lt;p&gt;After receiving confirmation that everything is okay. I run &lt;code&gt;npm run prettier&lt;/code&gt; to change all the files and commit my change then after a few hours my &lt;a href="https://github.com/Heptagram-Bot/heptagram.xyz/pull/100"&gt;PR&lt;/a&gt; got merged.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Micro Frontend, but it's chaos!</title>
      <author>Muhammad | עזרא</author>
      <pubDate>Thu, 18 Nov 2021 21:05:53 +0000</pubDate>
      <link>https://dev.to/0xf10yd/micro-frontend-but-its-chaos-68j</link>
      <guid>https://dev.to/0xf10yd/micro-frontend-but-its-chaos-68j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#but-why-do-we-need-it"&gt;
  &lt;/a&gt;
  But why do we need it?
&lt;/h2&gt;

&lt;p&gt;As the frontend becomes larger, while holding multiple domains of responsibilities (for example — navigation, user, authorization, e. g. ), the frontend application is developed, deployed and hosted as a single application. &lt;/p&gt;

&lt;p&gt;Micro-frontends allows us to use those different applications not just on the code base, but also in development, deployment and serve, in order to provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loosely coupled applications&lt;/li&gt;
&lt;li&gt;Faster development, debugging, and testing flows&lt;/li&gt;
&lt;li&gt;Performance — smaller chunks&lt;/li&gt;
&lt;li&gt;Full Isolation while testing, developing, and deploying&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DmCGzait--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/microfrontend.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DmCGzait--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/microfrontend.png" alt="E2E Domains held by different teams" width="880" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During this article we will review the frontend application that is built out of the shell and 3 applications that represent a domain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shell — Used as the entry point for loading each of our micro-applications based on the URL path. The shell application will also trigger authorization for route guards.&lt;/li&gt;
&lt;li&gt;Navigation — Responsible for navigation logic and state, including the nav-bar component, navigation service&lt;/li&gt;
&lt;li&gt;User — Responsible for user logic and state, including the user query and store logic, user info component, and user management page&lt;/li&gt;
&lt;li&gt;Feed — Responsible for fetching and presenting the feed items, each item contains the user logic and state, including the user query and store logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each application built out the following layers: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVBW6PS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVBW6PS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/1.png" alt="Micro frontends layers" width="591" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Composition layer — This layer holds a set of application pages with their corresponding routes&lt;/li&gt;
&lt;li&gt;Widgets layer — This layer holds a set of domain-related components used to build the different pages found on the composition layer&lt;/li&gt;
&lt;li&gt;Business logic layer — This layer holds a set of services and utilities responsible for the domain business logic.&lt;/li&gt;
&lt;li&gt;Communication layer — This layer holds a set of services that are used to communicate with the different service providers (Backend services for example).&lt;/li&gt;
&lt;li&gt;Storage layer — This layer holds the logic to persist data into the storage objects&lt;/li&gt;
&lt;li&gt;In memory — State, hooks e.g.&lt;/li&gt;
&lt;li&gt;Disk — local-storage, indexedDB, cookies e.g.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#wait-but-where-is-the-chaos"&gt;
  &lt;/a&gt;
  Wait, but where is the chaos?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--317w9C7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--317w9C7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/2.png" alt="The Chaos" width="851" height="771"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to module-federation, we can load Micro-frontends applications during run time without the need to build the entire dependency graph. &lt;/p&gt;

&lt;p&gt;This introduces a whole new aspect of stability issues of frontend applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What happens when we are deploying a new version of our application (User in our scenario)?&lt;/li&gt;
&lt;li&gt;How can we identify affected areas?&lt;/li&gt;
&lt;li&gt;How can we guarantee there are no breaking changes hidden behind each deployment?&lt;/li&gt;
&lt;li&gt;How can we prevent tight coupling between multiple applications that are hosted together?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, imagine a developer changed one of the widgets from the User application, this widget is consumed by both the Feed and the Navigation applications. Now, let's imagine the change the developer done is breaking the contract (component API — inputs/outputs, aka. props).&lt;/p&gt;

&lt;p&gt;This will lead to a runtime error while loading the new version within the existing applications.&lt;/p&gt;

&lt;p&gt;And the result? Cascading failure of our frontend application after deployment of the new User application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nvzBSzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/3-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nvzBSzE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/3-1.png" alt="Big Failure" width="880" height="775"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tackling the problem&lt;br&gt;
First, let’s review the requirements we have from the micro-frontend applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each application should be built, tested and served as a standalone unit.&lt;/li&gt;
&lt;li&gt;A modification of a single application should be available to be used by any other application.&lt;/li&gt;
&lt;li&gt;Application widgets and services should be reusable and interchangeable.&lt;/li&gt;
&lt;li&gt;Encapsulation of application internal models and business logic — Modifications shouldn’t affect application consumers.&lt;/li&gt;
&lt;li&gt;Identify dependency graph per modification — will help us to trigger only the relevant tests suites and builds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following those items, lets’ review the approach from the previous section:&lt;br&gt;
The approach covers bullets 1 to 3 from the requirements list. But, it still fails for both bullets 4 and 5 which promise us the stability of our product.&lt;/p&gt;

&lt;p&gt;Let’s review the different approaches to handle this chaos.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-libraries-approach"&gt;
  &lt;/a&gt;
  The libraries approach
&lt;/h2&gt;

&lt;p&gt;In order to increase the stability of the application, we need to prevent hidden breaking changes.&lt;br&gt;
With the libraries approach, this can achieve easily while using the npm package version. As each build of our applications is sealing the library version it’s using we can prevent consumption of library versions that might contain breaking changes.&lt;/p&gt;

&lt;p&gt;Using module federation, we can set the shared libraries, as part of this configuration we can set the satisfied package version using the npm package versioning convention.&lt;/p&gt;

&lt;p&gt;This approach helps us to break our monolith into 4 layers:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGOHtzWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/4-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGOHtzWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/4-1.png" alt="libs approach" width="880" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core Library — This layer contains domain agnostic libraries, those libraries provide us the building block for our feature libraries layer.&lt;/li&gt;
&lt;li&gt;Feature libraries layer — This layer contains domain-specific business logic, storage logic, and widgets. Those widgets are developed based on the core libraries component kit and additional components that are part of the specific domain of responsibility.&lt;/li&gt;
&lt;li&gt;Composition applications — This layer contains domain-specific routes and pages. Those pages are built based on widgets, services, and business logic developed as part of the “Feature libraries” layer.&lt;/li&gt;
&lt;li&gt;Shell — The entry point of the application, usually acts as a container and a router to load each of the micro-applications based on the path.&lt;/li&gt;
&lt;li&gt;The shell application might also trigger authorization logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- apps
  - user
  - feed
  - navigation
  - shell
- libs
  - users-lib
  - feed-lib
  - navigation-lib
  - auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Webpack configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remoteEntry.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;exposes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./bootstrap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./apps/user/bootstrap.module.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^12.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/common&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^12.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^12.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^12.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mfe/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mfe/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^1.5.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;sharedMappings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDescriptors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="nx"&gt;sharedMappings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPlugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Shareable widgets, services, and pages (compositions) across applications.&lt;/li&gt;
&lt;li&gt;Breaking changes prevention — Using a sealed version of the consumed library during the build.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Data corruption — Possible due to collision between multiple versions of the same library (override the state, local storage e.g.).&lt;/li&gt;
&lt;li&gt;Bundle size increase — Libraries might be loaded more than once due to different versions.&lt;/li&gt;
&lt;li&gt;Deployment graph complexity — critical modifications require rebuilding and redeploying the entire dependency graph.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-anticorruption-layer-approach"&gt;
  &lt;/a&gt;
  The anti-corruption layer approach
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-anticorruption-layer"&gt;
  &lt;/a&gt;
  What is the anti-corruption layer?
&lt;/h3&gt;

&lt;p&gt;An anti-corruption layer is a set of Public-APIs exposed by an application for integration use, those Public-APIs are acting as contracts in order to isolate the application internal models and business logic complexity, and are used as exported modules, components, façade*, and adapters* classes.&lt;/p&gt;

&lt;p&gt;This layer can be uni-directional or bi-directional (fetch or ingest data).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Façade&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A service that provides a simple interface to a complex application, encapsulates the complexity of initiating the application.&lt;br&gt;
A façade might provide limited functionality, those are the required sub-set for integrating with the micro-frontend application&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Adapter&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A service that is responsible for covert the interface and the data model of an object to another structure/interface which is accepted by the consumers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LO-e9-Db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LO-e9-Db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/5.png" alt="" width="652" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-updated-4layers-approach"&gt;
  &lt;/a&gt;
  The updated 4-layers approach
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuzAX1Ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuzAX1Ug--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/6.png" alt="Updated Approach" width="880" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only modification is casting the Feature layer from libraries to applications, this allows us to serve those widgets and services seamlessly to the consumers. Having said that we will still need to protect from breaking changes, here is where the anti-corruption layer is taking place&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core Library — This layer contains domain agnostic libraries, those libraries provide us the building block for our feature libraries layer.&lt;/li&gt;
&lt;li&gt;Feature application layer — This layer contains domain-specific business logic, storage logic, and widgets.
Those widgets are developed based on the core libraries component kit and additional components that are part of the specific domain.&lt;/li&gt;
&lt;li&gt;The exposed logic and components are protected with an anti-corruption layer to prevent breaking changes.&lt;/li&gt;
&lt;li&gt;Composition applications — This layer contains domain-specific routes and pages. Those pages are built based on widgets, services, and business logic developed as part of the “Feature application” layer.&lt;/li&gt;
&lt;li&gt;Shell — The entry point of the application, usually acts as a container and a router to load each of the micro-applications based on the path. The shell application might also trigger authorization logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- apps
  - user
    - src
      - modules
        - bootstrap
          - bootstrap.module.ts
    - public-api.ts
    - public-api.d.ts
  - feed
     - src
      - modules
        - bootstrap
          - bootstrap.module.ts
    - public-api.ts
    - public-api.d.ts
  - navigation
    - src
      - modules
        - bootstrap
          - bootstrap.module.ts
    - public-api.ts
    - public-api.d.ts
  - shell
- libs
  - auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#webpack-configuration"&gt;
  &lt;/a&gt;
  Webpack Configuration
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remoteEntry.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;exposes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./public-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./apps/user/public-api.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^12.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/common&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^12.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^12.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^12.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mfe/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;strictVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;requiredVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;^1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;sharedMappings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDescriptors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="nx"&gt;sharedMappings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPlugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Shareable widgets, services, and pages (compositions) across applications&lt;/li&gt;
&lt;li&gt;Seamless propagation of an upgrade&lt;/li&gt;
&lt;li&gt;Breaking changes prevention using Anti-Corruption layer.&lt;/li&gt;
&lt;li&gt;Refactor is becoming more simple thanks to encapsulation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Disadvantages&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Another layer to be maintain&lt;/li&gt;
&lt;li&gt;Education and learning curve&lt;/li&gt;
&lt;li&gt;Integration testing is required to promise unbreaking changes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HaBHvuok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaBHvuok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.indepth.dev/images/2021/10/7.jpeg" alt="Bonus" width="687" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>architecture</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Flask API Boilerplate - Simple Starter in Action</title>
      <author>Sm0ke</author>
      <pubDate>Thu, 18 Nov 2021 21:04:24 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-api-boilerplate-simple-starter-in-action-283e</link>
      <guid>https://dev.to/sm0ke/flask-api-boilerplate-simple-starter-in-action-283e</guid>
      <description>&lt;p&gt;Hello coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;a href="https://appseed.us/boilerplate-code/flask-api-boilerplate"&gt;Flask API Boilerplate&lt;/a&gt; that any developer with basic programming knowledge might use to bootstrap fast a full-stack project with React, Vue, or any other Frontend Framework. The product implements a &lt;code&gt;simple API interface&lt;/code&gt; that covers &lt;strong&gt;login&lt;/strong&gt;, &lt;strong&gt;logout&lt;/strong&gt; and &lt;strong&gt;register&lt;/strong&gt; actions using &lt;code&gt;JSON Web Tokens&lt;/code&gt;. For newcomers, &lt;strong&gt;Flask&lt;/strong&gt; is a leading web framework written in Python used to code from a simple website, APIs, or complex eCommerce solutions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://appseed.us/boilerplate-code/flask-api-boilerplate"&gt;Flask API Boilerplate&lt;/a&gt; - product page hosted by AppSeed&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://github.com/app-generator/api-server-flask"&gt;Flask API Boilerplate&lt;/a&gt; - source code (MIT License)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#codebase-features"&gt;
  &lt;/a&gt;
  Codebase Features
&lt;/h2&gt;

&lt;p&gt;Simple API Starter enhanced with JWT authentication, SqlAlchemy, SQLite persistence, and deployment scripts via Docker.  It has all the ready-to-use bare minimum essentials. Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Up-to-date dependencies&lt;/code&gt;: &lt;strong&gt;Flask 2.0.2&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-unified-definition"&gt;API Definition&lt;/a&gt; - the unified API structure implemented by this server&lt;/li&gt;
&lt;li&gt;Simple, intuitive codebase - can be extended with ease.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Flask-RestX&lt;/code&gt;, &lt;code&gt;Flask-jwt_extended&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Docker&lt;/code&gt;, Unitary tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Interface provides a simple, intuitive authentication interface that manages the registration and authentication using JWT tokens.&lt;/p&gt;

&lt;p&gt;Probably the most easier way to start and use the product locally is via Docker, a popular virtualization software.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone Sources from GH&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/api-server-flask.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api-server-flask 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start the API in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull  &lt;span class="c"&gt;# download dependencies &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build &lt;span class="c"&gt;# local set up&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up    &lt;span class="c"&gt;# start the API &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Once all the above commands are executed, the API should be accessible in the browser at &lt;code&gt;http://localhost:5000&lt;/code&gt; (the default address). To test and interact with the interface we have multiple choices: &lt;code&gt;POSTMAN&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt; or the embedded &lt;code&gt;Swagger Dashboard&lt;/code&gt; exposed natively by Flask-RestX.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QNP35rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g7d20ys6nvor90deu86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QNP35rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g7d20ys6nvor90deu86.png" alt="Flask Boilerplate API - Swagger Dashboard." width="800" height="236"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;From this point, we can code our own frontend to interact and use this minimal authentication API or use other projects already compatible to communicate with this interface:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/react-soft-ui-dashboard"&gt;React Soft Dashboard&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/react-berry-dashboard"&gt;React Berry Dashboard&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/react-datta-able"&gt;React Datta Able&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/react-purity-dashboard"&gt;React Purity Dashboard&lt;/a&gt; - source code&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;We can choose any product from the above list to compile and start in the local environment manually or via Docker. Let's pick &lt;a href="https://appseed.us/product/flask-react-soft-dashboard"&gt;React Soft Dashboard&lt;/a&gt;, a really nice Material-UI design crafted by &lt;code&gt;Creative-Tim&lt;/code&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone Sources (Github)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/react-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;react-soft-ui-dashboard 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start the React UI in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull  &lt;span class="c"&gt;# download dependencies &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build &lt;span class="c"&gt;# local set up&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up    &lt;span class="c"&gt;# start the React App &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The React UI by default, redirects the guest users to authenticate and we should see in the browser the login page.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcP6w1Wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aaulyn57ud61ssxrv3d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcP6w1Wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aaulyn57ud61ssxrv3d2.png" alt="Flask React Soft Dashboard - Login Page" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask React Soft Dashboard - Widgets Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5qOFyfo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wti4r0aotivnk1c3a69l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5qOFyfo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wti4r0aotivnk1c3a69l.png" alt="Flask React Soft Dashboard - Widgets Page" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In a similar way, we can compile and start the rest of the samples using Docker or a classic manual build by typing &lt;code&gt;yarn&lt;/code&gt; and &lt;code&gt;yarn start&lt;/code&gt; in the root of each product.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#flask-react-berry"&gt;
  &lt;/a&gt;
  &lt;a href="https://appseed.us/product/flask-react-berry-dashboard"&gt;Flask React Berry&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Berry is a creative-free React Admin Dashboard build using the Material-UI by CodedThemes. It is meant to provide a nice User Experience with highly customizable feature-riched pages now available in a full-stack product.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/product/flask-react-berry-dashboard"&gt;Flask React Berry&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-react-berry-dashboard.appseed-srv1.com/"&gt;Flask React Berry&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Berry Dashboard is a complete game-changer React Dashboard Template with an easy and intuitive responsive design as on retina screens or laptops.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--janC_lFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atyk9xvotn0whwapcmqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--janC_lFC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atyk9xvotn0whwapcmqe.png" alt="Flask Dashboard Berry - Charts Page" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#flask-react-datta-able"&gt;
  &lt;/a&gt;
  &lt;a href="https://appseed.us/product/flask-react-datta-able"&gt;Flask React Datta Able&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Datta Able is a colorful free React Admin Dashboard crafted by CodedThemes. It comes with high feature-rich pages and components with fully developer-centric code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://appseed.us/product/flask-react-datta-able"&gt;Flask React Datta Able&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-react-datta-able.appseed-srv1.com/"&gt;Flask React Datta Able&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Datta Able React comes with error/bug-free, well structured, well-commented code and regularly with all latest updated code.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQkjMDv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrouproavoq16moogqn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQkjMDv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrouproavoq16moogqn9.png" alt="Flask React Berry - Charts Page" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;AppSeed for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via email and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; crafted with &lt;code&gt;Django&lt;/code&gt;, &lt;code&gt;Flask&lt;/code&gt; and &lt;code&gt;Node JS&lt;/code&gt; APIs. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>flask</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to Convince Your Boss to Open Source a Project</title>
      <author>Rizel Scarlett</author>
      <pubDate>Thu, 18 Nov 2021 20:54:15 +0000</pubDate>
      <link>https://dev.to/github/how-to-convince-your-boss-to-open-source-a-project-2kb8</link>
      <guid>https://dev.to/github/how-to-convince-your-boss-to-open-source-a-project-2kb8</guid>
      <description>&lt;p&gt;Changing your company's culture can be difficult, especially if you are persuading your boss, company, or leadership team to open source a project. The hard truth is that businesses care about finances, specifically how to acquire and retain money.  Their concerns are valid. Without financial stability and growth, the company is at risk of coming to a halt, which affects its employees and customers. The goal of a business is to stay in business. Perhaps, you understand that, and you see that open sourcing a project will help the company thrive more, but you're unsure how to help your employer recognize the value in open sourcing a project.&lt;/p&gt;

&lt;p&gt;Here are four concerns your boss may have and responses you can use to alleviate their worries:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-im-afraid-of-the-legal-copyright-and-security-risks"&gt;
  &lt;/a&gt;
  1. I’m afraid of the legal, copyright, and security risks.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Your response&lt;/strong&gt;: Licensing is confusing, but we don't have to try to understand it alone. We can work with an Open Source Program Office (OSPO). The goal of an Open Source Office Program Office consists of individuals with expertise in open source strategy. Their goal is to oversee open source software management and strategy. OSPOs handle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Licensing&lt;/li&gt;
&lt;li&gt;Security vulnerabilities&lt;/li&gt;
&lt;li&gt;Open source business partnerships&lt;/li&gt;
&lt;li&gt;Tracking metrics&lt;/li&gt;
&lt;li&gt;Distribution &lt;/li&gt;
&lt;li&gt;Supporting communication between external and internal contributors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many companies, including Spotify, BMW, and Netflix, lean on an OSPO to manage their open source strategy. See the exhaustive list of companies with OSPOs &lt;a href="https://landscape.todogroup.org/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can learn more in detail about the responsibilities and benefits of an OSPO at the resources below: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/wassimchegham/21-reasons-why-open-source-is-good-for-your-business-5e74"&gt;21 Reasons Why Open Source is Good for Your Business&lt;/a&gt; by Wassim Chegham&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.slideshare.net/AshleyWolf/a-tale-of-two-cities-merging-yahoo-and-aols-open-source-programs"&gt;A Tale of Two Cities: Merging Yahoo and AOL's Open Source Programs&lt;/a&gt; by Ashley Wolf&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-open-sourcing-our-repository-will-reduce-our-code-quality"&gt;
  &lt;/a&gt;
  2. Open sourcing our repository will reduce our code quality.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Your response&lt;/strong&gt;: Our code quality will increase! In this article, &lt;a href="https://www.ycombinator.com/library/56-why-the-best-companies-and-developers-give-away-almost-everything-they-do"&gt;Why the Best Companies and Developers Give Away Almost Everything They Do&lt;/a&gt;, &lt;a href="https://www.ybrikman.com/"&gt;Yevgeniy Brikman&lt;/a&gt; states, “When is your home cleanest? My guess is that you do the most cleaning just before guests arrive. The same is true of anything that you share with others. One of the unexpected benefits of open sourcing your code is that the mere act of preparing the code for open source often leads to higher-quality code because you know that "guests" will be looking at it. You'll probably take the time to clean up the code, add tests, write documentation, and generally make the project more presentable to the rest of the world." Additionally, more contributors can mean you'll have more users reporting bugs and more developers fixing them quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-will-open-sourcing-our-projects-hurt-our-reputation-and-our-relevance-in-the-industry-enterprise-organizations-arent-going-open-source"&gt;
  &lt;/a&gt;
  3. Will open sourcing our projects hurt our reputation and our relevance in the industry? Enterprise organizations aren’t going open source.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Your response&lt;/strong&gt;: As we've seen, on the &lt;a href="https://landscape.todogroup.org/"&gt;list of companies that have OSPOs&lt;/a&gt;, enterprise companies such as Google, Facebook, and Goldman Sachs are heavily involved in open source. Many of these companies recognize that open sourcing a project improves the organization's reputation. Open sourcing a project can help us with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Marketing&lt;/strong&gt; - Users who love our product will feel more compelled and excited to help us make our product better. Contributing will fuel their passion even more, and they will start encouraging those in their network to use and/or contribute to our project. Some contributors may even talk about our project at conferences, on Twitch livestreams, in blog posts, and in YouTube tutorials. That's free marketing to help the organization acquire customers and developers!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hiring&lt;/strong&gt; - Developers admire companies that are transparent about their technological growth and processes. As contributors increase awareness of our product and our own company documents its journey, we will attract highly-skilled, community-driven, empathetic developers. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Longevity&lt;/strong&gt; - With increased collaboration, our organization will gain access to developers with varied technological experiences. They can help keep our project up to date with the latest technological tools, and contributors can help to add integrations at a faster pace. For example, before the rise of container orchestration, both Spotify and Google developed their own systems called Helios and Kubernetes. Google chose to open source Kubernetes, while Spotify kept Helios as an internal project. Unfortunately, Spotify didn't have enough capacity to continue the project internally. Over the past seven years, Kubernetes has been a top choice for container orchestration; even Spotify migrated their containerization to Kubernetes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-how-will-we-make-money-if-we-open-source-our-code"&gt;
  &lt;/a&gt;
  4. How will we make money if we open source our code?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Your response&lt;/strong&gt;: Open source software doesn't always mean free. Some open source companies such as MongoDB, Elastic, and HashiCorp have multi-billion dollar valuations. This is another opportunity for the experts of an OSPO to advise us. We can choose to embrace an open source model that works for us.&lt;/p&gt;

&lt;p&gt;If your employer is &lt;strong&gt;still&lt;/strong&gt; hesitant about open sourcing a project, the methods below can help your company gradually embrace the open source community:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Suggest open source products that can help improve your team's workflow&lt;/li&gt;
&lt;li&gt;Create awareness of the open source tools your company currently uses&lt;/li&gt;
&lt;li&gt;Contribute to existing open source projects &lt;/li&gt;
&lt;li&gt;Motivate your teammates to contribute to open source&lt;/li&gt;
&lt;li&gt;Sponsor an open source project&lt;/li&gt;
&lt;li&gt;Encourage your company to sponsor a project that's beneficial to the company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;If you found this helpful or you've convinced your company to adopt an open source model, share your experience below!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>startup</category>
      <category>career</category>
      <category>leadership</category>
    </item>
  </channel>
</rss>
