<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fetching Data in React</title>
      <author>Pratik Bhagat</author>
      <pubDate>Tue, 23 Nov 2021 15:24:46 +0000</pubDate>
      <link>https://dev.to/bhagatpratik07/fetching-data-in-react-hni</link>
      <guid>https://dev.to/bhagatpratik07/fetching-data-in-react-hni</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This blog post will teach you how to fetch data from an external API and use it in your React apps.&lt;/p&gt;

&lt;p&gt;Before you start reading you should be familiar with React,  &lt;a href="https://dev.to/bhagatpratik07/introduction-to-react-hooks-3h02"&gt;useState and useEffect hooks&lt;/a&gt;  in React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#methods-of-fetching-data"&gt;
  &lt;/a&gt;
  Methods of Fetching Data
&lt;/h2&gt;

&lt;p&gt;We will look at the following ways to fetch data: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using Fetch API&lt;/li&gt;
&lt;li&gt;Using async function&lt;/li&gt;
&lt;li&gt;Using Axios&lt;/li&gt;
&lt;li&gt;Using custom hooks&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#using-fetch-api"&gt;
  &lt;/a&gt;
  Using Fetch API
&lt;/h2&gt;

&lt;p&gt;The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses. It provides a global fetch( ) method that provides an easy, logical way to fetch resources asynchronously across the network.&lt;/p&gt;

&lt;p&gt;We will use the fetch( ) method which takes a single argument i.e the path you want to fetch data from and it returns a promise containing a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch('https://jsonplaceholder.typicode.com/todos/1')
  .then(response =&amp;gt; response.json())
  .then(json =&amp;gt; console.log(json))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-async-function"&gt;
  &lt;/a&gt;
  Using async function
&lt;/h2&gt;

&lt;p&gt;The async function returns a promise and the await keyword makes the function wait for a response.&lt;/p&gt;

&lt;p&gt;Here's how we can use async/await to fetch data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function fetchData() {
      const response = await fetch(
        "https://jsonplaceholder.typicode.com/todos/3"
      );
      const data = await response.json();
      console.log(data);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-axios"&gt;
  &lt;/a&gt;
  Using Axios
&lt;/h2&gt;

&lt;p&gt;Axios is a library that is used to fetch data and it already gives the result in JSON, so we don't have to convert it.&lt;/p&gt;

&lt;p&gt;First, we have to install Axios with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use axios in our project we have to import it into our project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from "axios"

  React.useEffect(() =&amp;gt; {
    axios.get("https://jsonplaceholder.typicode.com/todos/3")
    .then((response) =&amp;gt; (console.log(response));
  }, []);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we used the .get() method to make a get request to our endpoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-custom-hook"&gt;
  &lt;/a&gt;
  Using custom hook
&lt;/h2&gt;

&lt;p&gt;We will make our custom react hook to fetch data which will take a single argument that is the endpoint we want to fetch the data from.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect } from "react";

const useFetch = (url) =&amp;gt; {
  useEffect(() =&amp;gt; {
    fetch(url)
      .then((response) =&amp;gt; response.json())
      .then((data) =&amp;gt; {
        console.log(data);
      });
  }, []);
};

export default useFetch;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like this blog if you found it helpful and connect with me  on &lt;a href="https://twitter.com/bhagatpratik07"&gt;Twitter&lt;/a&gt; and  &lt;a href="https://www.linkedin.com/in/pratik-bhagat07/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading-"&gt;
  &lt;/a&gt;
  Thank you for reading ;)
&lt;/h2&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cube Cloud Deep Dive: Starting a New Cube App</title>
      <author>Adnan Rahić</author>
      <pubDate>Tue, 23 Nov 2021 15:11:46 +0000</pubDate>
      <link>https://dev.to/cubejs/cube-cloud-deep-dive-starting-a-new-cube-app-3dhp</link>
      <guid>https://dev.to/cubejs/cube-cloud-deep-dive-starting-a-new-cube-app-3dhp</guid>
      <description>&lt;p&gt;Cube has been an &lt;a href="https://github.com/cube-js/cube.js"&gt;open-source project&lt;/a&gt; since 2018. We try our best to listen to the community and our users to make it the best analytics API server on the market today.&lt;/p&gt;

&lt;p&gt;We really appreciate all the help and sincere dedication our lovely community has done to provide feedback, submit pull requests, and feature ideas to improve Cube even more. We hope the soon-to-be 12,000 stars on GitHub are a representation of our dedication to making our community happy.&lt;/p&gt;

&lt;p&gt;In this article, I want to walk you through creating a new Cube App deployment on Cube Cloud and connecting it to your database.&lt;/p&gt;

&lt;p&gt;If you prefer watching a video instead, have a look at this short 5 minute tutorial on our YouTube channel.&lt;/p&gt;

&lt;p&gt;Before moving on I want to share a bit about the benefits of using Cube Cloud vs. self-hosting Cube yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-cube-cloud"&gt;
  &lt;/a&gt;
  Why use Cube Cloud?
&lt;/h2&gt;

&lt;p&gt;We &lt;a href="https://cube.dev/blog/announcing-cube-cloud/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=starting-a-new-cube-app-in-cube-cloud"&gt;launched Cube Cloud this October&lt;/a&gt; with the vision of making Cube accessible to everyone, no matter the scale and DevOps experience level.&lt;/p&gt;

&lt;p&gt;You already know Cube is an open-source project with almost 12,000 stars on GitHub. It's packed full of cool features, such as auto-generating schemas, auto-generating dashboards, a developer playground, and much more. It's easy to work with and developer-friendly.&lt;/p&gt;

&lt;p&gt;Self-hosting Cube can come with its own set of complications due and pitfalls. Let me explain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managed-infrastructure"&gt;
  &lt;/a&gt;
  Managed Infrastructure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cube.dev/docs/deployment/production-checklist?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=starting-a-new-cube-app-in-cube-cloud"&gt;Cube requires several pieces of infrastructure&lt;/a&gt; to work reliably at scale. To get both high concurrency and high data size you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compute resources&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Cube Store&lt;/li&gt;
&lt;li&gt;An API gateway&lt;/li&gt;
&lt;li&gt;A refresh worker&lt;/li&gt;
&lt;li&gt;A load balancer&lt;/li&gt;
&lt;li&gt;optionally, a VPC configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can mitigate this by using infrastructure as code tools like AWS CloudFormation, Pulumi, or Terraform, and using Kubernetes as a container orchestrator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtOyXwhj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/783e7e2c-5205-4914-a96d-acfe3a136e65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtOyXwhj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/783e7e2c-5205-4914-a96d-acfe3a136e65.png" alt="https://cubedev-blog-images.s3.us-east-2.amazonaws.com/783e7e2c-5205-4914-a96d-acfe3a136e65.png" width="880" height="508"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monitoring-and-scaling"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Monitoring and Scaling&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Maintaining application up-time is a serious responsibility. To achieve this with self-hosting, you have to make sure that monitoring is configured for Cube and that you can scale Cube up if there's a spike in traffic.&lt;/p&gt;

&lt;p&gt;With Cube Cloud, both monitoring and auto-scaling are available out-of-the-box.&lt;/p&gt;

&lt;p&gt;You also get query monitoring in the Queries tab in the sidebar. The entire query history is available, including metrics like query result size and time spent, helping you dig into why some queries take longer than others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8fIJhsYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0844659b-c006-4d75-98b8-7984a82fee81.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8fIJhsYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0844659b-c006-4d75-98b8-7984a82fee81.png" alt="frame_chrome_mac_light_(72).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see application performance metrics in the Metrics tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nkXF5YJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/b6d12fca-de08-46f8-b736-930969e651a4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nkXF5YJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/b6d12fca-de08-46f8-b736-930969e651a4.png" alt="frame_chrome_mac_light_(73).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Caching&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A major problem when scaling Cube apps is optimizing pre-aggregation build times. Similarly, when trying to determine the status of your pre-aggregations; you need to know whether they're built or not and when they were built.&lt;/p&gt;

&lt;p&gt;In Cube Cloud, we can check out the Pre-Aggregations tab to see the status of all pre-aggregations in your Cube deployment, including whether they're building or not and even which of the partitions, if any, are being refreshed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqR0wlUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/7f43d038-6d95-4e91-bd31-90b8a6feca2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqR0wlUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/7f43d038-6d95-4e91-bd31-90b8a6feca2c.png" alt="frame_chrome_mac_light_(74).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In production, these pre-aggregations are kept up-to-date automatically for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development-tools"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Development Tools&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You get GitHub integration with Cube Cloud. Your deployment can watch a GitHub repository for changes and deploy updates. Connect a deployment to GitHub from the Settings page and you're set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ab5wLM-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/3b1bf669-7c95-4746-baa0-951bfe2e6f60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ab5wLM-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/3b1bf669-7c95-4746-baa0-951bfe2e6f60.png" alt="frame_chrome_mac_light_(75).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also make changes directly in the Cube Cloud console by entering Development Mode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fb79Si3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/3c74ca7f-58b7-44c4-9e88-d719ab93b325.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fb79Si3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/3c74ca7f-58b7-44c4-9e88-d719ab93b325.png" alt="frame_chrome_mac_light_(76).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You get a dedicated Git branch, complete with a personal API URL and separate pre-aggregations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Support&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you have paying customers, having paid support is a lifesaver. If something breaks, and you need help fixing it, having someone to call is a lifesaver. Cube Cloud comes with support on the Enterprise plan, so you can ping us whenever you hit a snag!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-to-cube-cloud"&gt;
  &lt;/a&gt;
  Sign Up to Cube Cloud
&lt;/h2&gt;

&lt;p&gt;Signing up is simple and secure because you can also choose to sign up with your GitHub account. Here's how you sign up.&lt;/p&gt;

&lt;p&gt;Jump over to the &lt;a href="https://cubecloud.dev/auth/signup"&gt;sign-up page&lt;/a&gt; and enter your email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nnkZWiVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/651bf8cb-fedf-4f21-bac4-6879ff91633b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nnkZWiVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/651bf8cb-fedf-4f21-bac4-6879ff91633b.png" alt="frame_chrome_mac_light_(57).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click &lt;code&gt;Sign Up&lt;/code&gt;, you'll receive an email from us to set a password.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K0URXdup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/376a65f0-d828-4c10-a4b3-c56f8a86e5a9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K0URXdup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/376a65f0-d828-4c10-a4b3-c56f8a86e5a9.png" alt="frame_chrome_mac_light_(58).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you select a subdomain for your Cube Cloud account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UKpeNJvO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/eab870f8-a430-4048-84d4-38e0c7238e08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UKpeNJvO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/eab870f8-a430-4048-84d4-38e0c7238e08.png" alt="frame_chrome_mac_light_(59).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all this out of the way, you can finally start creating Cube Deployments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aeb0H2Yc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4c4c987d-dfa1-4591-8464-a3ec76a2f820.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aeb0H2Yc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4c4c987d-dfa1-4591-8464-a3ec76a2f820.png" alt="frame_chrome_mac_light_(60).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me explain how to create a deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-deployment-in-cube-cloud"&gt;
  &lt;/a&gt;
  Create a Deployment in Cube Cloud
&lt;/h2&gt;

&lt;p&gt;Creating a deployment consists of four main steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create Deployment&lt;/li&gt;
&lt;li&gt;Set Up the Cube App&lt;/li&gt;
&lt;li&gt;Set Up the Database Connection&lt;/li&gt;
&lt;li&gt;Generate the Data Schema&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me break it down into even more detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-deployment"&gt;
  &lt;/a&gt;
  Step 1 - Create Deployment
&lt;/h3&gt;

&lt;p&gt;The first step of creating a Cube App from scratch in Cube Cloud is to create a deployment.&lt;/p&gt;

&lt;p&gt;Once you click the &lt;code&gt;create deployment&lt;/code&gt; button it'll open up the first step in the deployment creation UI flow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1D7N9P-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/8edd42ca-a308-4cc5-a358-fb6324a28298.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1D7N9P-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/8edd42ca-a308-4cc5-a358-fb6324a28298.png" alt="frame_chrome_mac_light_(61).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you choose what name to give your deployment and pick the cloud provider and region. The reason why to choose either AWS or GCP is based on where you're hosting your own infrastructure and apps.&lt;/p&gt;

&lt;p&gt;Let me give you an example. Let's say you have a metrics dashboard that needs to consume data on &lt;code&gt;us-east-1&lt;/code&gt; on AWS. Using the same AWS region to host the Cube deployment as where you are hosting this metrics dashboard will reduce the network delay and latency between Cube and your app.&lt;/p&gt;

&lt;p&gt;Which database you're using is also important when choosing a cloud provider and region. If you have data in BigQuery then you should not choose AWS. If you're using AWS Redshift then vice-versa applies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#need-a-dedicated-vpc"&gt;
  &lt;/a&gt;
  Need a Dedicated VPC?
&lt;/h3&gt;

&lt;p&gt;A reason for using a VPC is if you expect high throughput of up to and above millions of requests per day. Using a VPC will give you a dedicated managed infrastructure that is ready to serve such high numbers of users.&lt;/p&gt;

&lt;p&gt;Additionally, if your company required security compliance like SOC2, using a VPC is mandatory.&lt;/p&gt;

&lt;p&gt;The best part is that a VPC is readily available for you if you need it. All you need to do is to reach out to us and ask for it. Super simple!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnP0WDad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/972709c6-6911-4c9e-910c-f316120698d7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnP0WDad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/972709c6-6911-4c9e-910c-f316120698d7.png" alt="frame_chrome_mac_light_(62).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, back to business. Let's get back to creating the Cube app deployment. After selecting a cloud provider and region, add a name for your deployment and click next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Cfrtq9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f2455031-14b9-49ca-b449-eb113a8deda8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Cfrtq9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/f2455031-14b9-49ca-b449-eb113a8deda8.png" alt="frame_chrome_mac_light_(63).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-set-up-the-cube-app"&gt;
  &lt;/a&gt;
  Step 2 - Set Up the Cube App
&lt;/h3&gt;

&lt;p&gt;Next up, the second step in creating a Cube App from scratch in Cube Cloud is to click the &lt;code&gt;+ create&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YsjwbVWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0fe2ae4e-d596-499d-b26b-5f62f5780683.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YsjwbVWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/0fe2ae4e-d596-499d-b26b-5f62f5780683.png" alt="frame_chrome_mac_light_(64).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, before moving on, I want to ask if you already have a Cube app? If you do, please jump over to my co-worker Hassan's &lt;a href="https://cube.dev/blog/migrating-from-self-hosted-to-cube-cloud/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=starting-a-new-cube-app-in-cube-cloud"&gt;guide on migrating a Cube app&lt;/a&gt; to Cube Cloud.&lt;/p&gt;

&lt;p&gt;In this tutorial, I want to stick to creating a Cube App from scratch, so let me continue where I left off.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-set-up-the-database-connection"&gt;
  &lt;/a&gt;
  Step 3 - Set Up the Database Connection
&lt;/h3&gt;

&lt;p&gt;After selecting the &lt;code&gt;+ Create&lt;/code&gt; button and proceeding to create a Cube app from scratch, you'll be prompted to select a database type. This lets you choose from dozens of the most popular databases available on the market today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wR5gBfpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/81442713-0261-424c-bb09-17b1601c10e0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wR5gBfpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/81442713-0261-424c-bb09-17b1601c10e0.png" alt="frame_chrome_mac_light_(67).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll proceed with selecting PostgreSQL to hook up a sample e-commerce database to show you how simple it really is. The values I'll use are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;Hostname&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;demo-db.cube.dev&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;Port&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="mi"&gt;5432&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;Database&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;ecom&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;Username&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;cube&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="err"&gt;Password&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the UI it'll look exactly like the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke80HbA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/a0c30616-0a8e-4c85-8f79-4f9ba849eb63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke80HbA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/a0c30616-0a8e-4c85-8f79-4f9ba849eb63.png" alt="frame_chrome_mac_light_(68).png" width="880" height="800"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click the &lt;code&gt;Apply&lt;/code&gt; button, Cube Cloud will test if the connection was successful, and proceed to the next step.&lt;/p&gt;

&lt;p&gt;If you run into issues here, make sure to allow the Cube Cloud IPs to access your database. This means you need to open up your firewall to these IPs. In the case of AWS, this would mean adding a security group with allowed IPs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-generate-the-data-schema"&gt;
  &lt;/a&gt;
  Step 4 - Generate the Data Schema
&lt;/h3&gt;

&lt;p&gt;Step four in this case consists of generating a data schema. Start by selecting the database tables to generate the data schema from, then hit &lt;code&gt;generate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QKi2NFF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/a959643f-4e0f-4f62-9dc9-4d48a0405002.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKi2NFF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/a959643f-4e0f-4f62-9dc9-4d48a0405002.png" alt="frame_chrome_mac_light_(69).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cube Cloud will generate the data schema and spin up your Cube deployment. With this, you're done. You've created a Cube deployment, configured a database connection, and generated a data schema!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dya8mSjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4cd2de24-098f-465e-b7ee-dbadd3e82ab9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dya8mSjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/4cd2de24-098f-465e-b7ee-dbadd3e82ab9.png" alt="frame_chrome_mac_light_(70).png" width="880" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You're ready for the last step, running queries in the Playground.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-queries-in-cube-clouds-playground"&gt;
  &lt;/a&gt;
  Running Queries in Cube Cloud's Playground
&lt;/h3&gt;

&lt;p&gt;By clicking on the Playground in the left nav you'll open the Playground UI.&lt;/p&gt;

&lt;p&gt;Here you can test queries by selecting from all the measures and dimensions in the data schema. This lets you test different dashboards and visualizations for when you want to build your own metrics dashboards.&lt;/p&gt;

&lt;p&gt;The image below showcases a bar chart with an &lt;strong&gt;&lt;code&gt;Orders Count&lt;/code&gt; measure&lt;/strong&gt;, an &lt;code&gt;**Orders Status&lt;/code&gt; dimension*&lt;em&gt;, and an `&lt;/em&gt;&lt;em&gt;Orders Created At` time dimension&lt;/em&gt;* &lt;strong&gt;grouped by day for the current month&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsexaIh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/56faf279-2d8c-4d98-97d3-cb960ea5413a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsexaIh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/56faf279-2d8c-4d98-97d3-cb960ea5413a.png" alt="frame_chrome_mac_light_(71).png" width="880" height="777"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the playground as a testing ground for all queries you want to run in your own dashboards. The playground will also display how long a query took, showing you the response time above the chart itself.&lt;/p&gt;

&lt;p&gt;That's it! You've finished creating a Cube Deployment on Cube Cloud.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-query-acceleration"&gt;
  &lt;/a&gt;
  What About Query Acceleration?
&lt;/h3&gt;

&lt;p&gt;Congrats! You've configured a Cube app in Cube Cloud. You're ready to add pre-aggregations and run the deployment in cluster mode. We have detailed tutorials explaining these concepts for you to read &lt;a href="https://cube.dev/blog/cube-cloud-deep-dive-mastering-pre-aggregations/?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=starting-a-new-cube-app-in-cube-cloud"&gt;here&lt;/a&gt;. You can follow along with the tutorial to add pre-aggregations to your data yourself.&lt;/p&gt;

&lt;p&gt;We at Cube also hosted a &lt;a href="https://www.youtube.com/watch?v=1_BP3B_wbec"&gt;workshop about pre-aggregations&lt;/a&gt; that you can take a look at to learn more about query acceleration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Deploying a Cube App on Cube Cloud consists of four steps. First, select the cloud provider, region, and name. Second, select creating a Cube app from scratch, Third, connect a database. Fourth, generate a data schema.&lt;/p&gt;

&lt;p&gt;You should keep in mind there are three ways of deploying Cube apps in Cube Cloud. You can create one from scratch, with the Cube CLI, or with the GitHub integration.&lt;/p&gt;

&lt;p&gt;If you choose to use Cube Cloud, you'll get the added benefit of getting managed infrastructure that auto-scales to your needs. Cube Cloud also has some added features compared to self-hosting Cube, including query performance analysis, query response times, APM, and pre-aggregations enabled by default.&lt;/p&gt;

&lt;p&gt;I hope you end up trying out Cube Cloud because you'll save time and energy by not managing infra and just focusing on building product value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cube.dev/cloud?utm_source=dev-to&amp;amp;utm_medium=post&amp;amp;utm_campaign=starting-a-new-cube-app-in-cube-cloud"&gt;Sign up to Cube Cloud here&lt;/a&gt; to try it out for yourself.&lt;/p&gt;

&lt;p&gt;Until next time, stay curious, and have fun coding. Also, feel free to &lt;a href="https://github.com/cube-js/cube.js"&gt;leave Cube a ⭐ on GitHub&lt;/a&gt; if you liked this article. ✌️&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>opensource</category>
      <category>analytics</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>The Quest for ReactiveScript</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 23 Nov 2021 15:07:50 +0000</pubDate>
      <link>https://dev.to/this-is-learning/the-quest-for-reactivescript-3ka3</link>
      <guid>https://dev.to/this-is-learning/the-quest-for-reactivescript-3ka3</guid>
      <description>&lt;p&gt;This article isn't going to teach you about the latest trends in frontend development. Or look in detail into the way to get the most performance out of your website. Instead I want to write about something that I've been playing with in my head for the past year but never can find the time to work on. Reactivity as general purpose language.&lt;/p&gt;

&lt;p&gt;If you want someone to blame. Blame Jay Phelps (I kid). After a demo I made showing off the power of fine-grained reactivity he got it in my head that we should look at this more as a generalized language. I was content in my DSL bubble, thinking of ways we can make building frameworks easier, but he challenged me to think about it more generally.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--whxXNUsT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1449409108671610883/AQdDtcda_normal.jpg" alt="👉😎👉 Jay Phelps profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        👉😎👉 Jay Phelps
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @_jayphelps
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/RyanCarniato"&gt;@RyanCarniato&lt;/a&gt; Let’s chat some time. I’ve done an excessive amount of research on this topic in the context of languages (eg Lucid, FRTime, etc) and would love to learn more from you as well and swap opinions.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:11 AM - 24 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1353193651887857665" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1353193651887857665" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1353193651887857665" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I've been meaning to take him up on his offer, but in the meantime what I can do is write about it. Because the last year I've done a lot of searching and thinking into how I'd approach this. And thanks to more recent conversations around Svelte, Vue Ref Sugar, and my work on Marko etc.. this seems as good time as ever to share what I've learned. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-destiny-operator"&gt;
  &lt;/a&gt;
  The Destiny Operator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DXxmZHzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc372sbywl4dim12mwc3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXxmZHzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc372sbywl4dim12mwc3.jpeg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the best introductions I've ever read to reactivity, after the fact is &lt;a href="https://paulstovell.com/reactive-programming/"&gt;What is Reactive Programming?&lt;/a&gt;. I can't promise it's the best introduction for the uninitiated. But it introduced reactivity in a very simple way. That reactivity is when an equation which holds true even after its values change. If &lt;code&gt;a = b + c&lt;/code&gt;, then it is reactive if &lt;code&gt;a&lt;/code&gt; still reflects this sum after &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt; updates. &lt;/p&gt;

&lt;p&gt;This article proposes the use the "Destiny Operator" &lt;code&gt;&amp;lt;=&lt;/code&gt; to denote this relationship:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AreEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A simple addition to the language but capable of doing so much. Most importantly it highlights the difference between a reactive declaration and an assignment. It makes no sense for &lt;code&gt;b&lt;/code&gt; to ever be re-assigned as then its relationship of always being one larger than &lt;code&gt;a&lt;/code&gt; wouldn't hold. Whereas &lt;code&gt;a&lt;/code&gt; needs to be re-assigned or this system isn't really doing much.&lt;/p&gt;

&lt;p&gt;This is just the start. In many ways this has been seen to be the ideal. Reality is a bit more complicated than that. We will return to the "Destiny Operator" a bit later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identifiers"&gt;
  &lt;/a&gt;
  Identifiers
&lt;/h2&gt;

&lt;p&gt;If you've ever used a fine-grained reactive library in JavaScript you've seen the common pattern of using function getters/setters. They might be hidden behind proxies but at the core there is an accessor so that values can be tracked and subscriptions made.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// log the value now and whenever it changes&lt;/span&gt;
&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// set a new value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact I'd say the majority of frontend JavaScript frameworks have fallen into this 3 part reactive API/language:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reactive State (Signal, Observable, Ref)&lt;/li&gt;
&lt;li&gt;Derived Values (Memo, Computed )&lt;/li&gt;
&lt;li&gt;Side Effects (Effect, Watch, Reaction, Autorun)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The example above uses Solid but you should be able to picture that pretty easily in React, Mobx, Vue, Svelte etc. They all look very similar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a more in detailed introduction check out &lt;a href="https://dev.to/ryansolid/a-hands-on-introduction-to-fine-grained-reactivity-3ndf"&gt;A Hands-on Introduction to Fine-Grained Reactivity&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is no matter what we do with fine-grained reactivity at runtime there is extra syntax. There is no way at runtime to just have &lt;code&gt;value&lt;/code&gt; be a value and be reactive. It's going to be &lt;code&gt;value()&lt;/code&gt; or &lt;code&gt;something.value&lt;/code&gt; or &lt;code&gt;value.something&lt;/code&gt;. A small ergonomic detail but one that there is a desire to solve.&lt;/p&gt;

&lt;p&gt;The simplest compiler aided approach is decorate the variable identifiers to let it know it should compile to function calls. I first saw this in the framework &lt;a href="https://github.com/ismail-codar/fidan"&gt;Fidan&lt;/a&gt; and later in some Babel plugins the community had created for &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// log the value now and whenever it changes&lt;/span&gt;
&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value$&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;value$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// set a new value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's great about this is no matter the source we can use this syntax sugar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCustomReactiveThing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, now our signal is always treated as a value. How would we pass it outside of this module context and retain reactivity? Maybe we reference it without the &lt;code&gt;$&lt;/code&gt;? Do we pass it in a thunk &lt;code&gt;() =&amp;gt; value$&lt;/code&gt;, do we invent a syntax for this? Do we have control over if the reactive value is readonly? As shown above derived reactive values probably should be. I actually saw a version of this where single &lt;code&gt;$&lt;/code&gt; meant mutable and &lt;code&gt;$$&lt;/code&gt; meant readonly.&lt;/p&gt;

&lt;p&gt;The crux though is this syntax doesn't simplify the mental model. You need to be aware exactly what is being passed around and what you are receiving. You are saving typing some characters, possibly as little as 1 as the shortest way to express reactivity without compiler tricks is 2 characters(&lt;code&gt;()&lt;/code&gt; or &lt;code&gt;_.v&lt;/code&gt;). It's hard for me to consider adding all this is worth it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keywords-decorators-labels"&gt;
  &lt;/a&gt;
  Keywords, Decorators, Labels
&lt;/h2&gt;

&lt;p&gt;So how to do this better? Well what if reactivity was a keyword, decorator, or label? MobX has been doing this for ages with decorators on classes but &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; has taken this to a whole new level.&lt;/p&gt;

&lt;p&gt;The basic idea is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// log the value now and whenever it changes&lt;/span&gt;
&lt;span class="nl"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// set a new value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Svelte realized that if it treated every variable as a Signal it could reduce that to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// log the value now and whenever it changes&lt;/span&gt;
&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// set a new value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this draws similarities to the "Destiny Operator" it should. Svelte's &lt;code&gt;$:&lt;/code&gt; label is really approaching it. They recognized the "Destiny Operator" was insufficient as you don't only have reactive derivations but side effects like this &lt;code&gt;console.log&lt;/code&gt;. In so you can use &lt;code&gt;$:&lt;/code&gt; both define variables with reactive declarations like the "Destiny Operator" as well as reactive effectful expressions.&lt;/p&gt;

&lt;p&gt;So we're done right. Well no. There are huge limitations of this approach. How does reactivity leave this module? There is no way to get a reference to the reactive signal itself; just its value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Svelte does have 2 way binding syntax and &lt;code&gt;export let&lt;/code&gt; as a way to do parent to child passing of reactivity. But in general you can't just export or import a function and have it reactive without using an auxiliary reactive system like Svelte Stores. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How do we know what to do with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createCustomReactiveThing&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somewhere-else&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createCustomReactiveThing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Is it reactive? Can it be assigned? We could introduce a symbol on our identifiers for this case, but we are back to where we were with the last solution. What if you wanted to extract out a derivation like &lt;code&gt;doubleValue&lt;/code&gt; how would the template know what to do with it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// can this&lt;/span&gt;
&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doubleValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// become&lt;/span&gt;
&lt;span class="nx"&gt;doubleValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not intuitively. We have a keyword(label) for it and it doesn't transpose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-decoration"&gt;
  &lt;/a&gt;
  Function Decoration
&lt;/h2&gt;

&lt;p&gt;Well composition is king. Probably the single most important part of &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;'s success and for many of us no composition is a non-starter. Svelte has composition and extensibility through its stores, but the focus here today is in the reactive language where it falls short.&lt;/p&gt;

&lt;p&gt;There is another approach that I first came across talking with the &lt;a href="https://markojs.com"&gt;Marko&lt;/a&gt; team almost 2 years ago. Marko is an interesting language because it heavily values markup syntax, and the maintainers had basically resolved that they wanted to bring their reactivity into their tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;let&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;value = &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- log the value now and whenever it changes --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;effect&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;console.log&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

value = 10; // set a new value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Definitely foreign on the first look but by using tags they'd basically solved Svelte's problem. You knew these were reactive. It is the syntax version of something similar to React's convention that &lt;code&gt;use____&lt;/code&gt; is a hook.&lt;/p&gt;

&lt;p&gt;Interestingly enough, about a year later Evan You independently came to the same conclusion with &lt;a href="https://github.com/vuejs/rfcs/discussions/369"&gt;version 2 of his Ref Sugar API&lt;/a&gt; for &lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt; 3. Version 1 was labels like above but he realized the shortcomings of that approach and ended up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// log the value now and whenever it changes&lt;/span&gt;
&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// set a new value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well it's almost the same thing as the Marko example. However, interestingly, this does highlight one thing. Since Vue is using this as a bit of a syntax sugar like the identifier example earlier it needs to tell the compiler still when it wants to pass by reference instead of by value, and there is the &lt;code&gt;$$()&lt;/code&gt; function for that.&lt;/p&gt;

&lt;p&gt;Notice how &lt;code&gt;watch&lt;/code&gt; here is just an ordinary function. It couldn't know how to handle &lt;code&gt;value&lt;/code&gt; any differently. If left alone it would compile to &lt;code&gt;watch(value.value, v =&amp;gt; ... )&lt;/code&gt;, which would do the reactive access too soon outside a tracking scope.&lt;/p&gt;

&lt;p&gt;There are some comments in the proposal asking for a &lt;code&gt;$watch&lt;/code&gt; to handle exactly that but I suspect they won't pass because that is specific behavior that &lt;code&gt;$(function)&lt;/code&gt; doesn't have. Vue's goal is to be composable, so having &lt;code&gt;$watch&lt;/code&gt; be special isn't acceptable. That makes it basically a keyword, as &lt;code&gt;$mywatch&lt;/code&gt; wouldn't be known to be given the same behavior, unless we added another syntax or made more general changes to behavior.&lt;/p&gt;

&lt;p&gt;In fact none of the solutions, short of Marko's tags, handle that case without extra syntax. Marko can leverage the knowledge of being a tag to make some assumptions you can't make about an ordinary function. And being tags we inadvertently stumbled on what I believe might be the actual solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rethinking-reactive-language"&gt;
  &lt;/a&gt;
  Rethinking Reactive Language
&lt;/h2&gt;

&lt;p&gt;All the approaches suffer from the same challenge. How do we preserve reactivity? We are always worried about losing it, and we are forced into this pass by reference vs pass by value discussion. But that is because we are living in an imperative world, and we are a declarative &lt;del&gt;girl&lt;/del&gt; paradigm.&lt;/p&gt;

&lt;p&gt;Let me elaborate a bit. Marko uses a &lt;code&gt;&amp;lt;const&amp;gt;&lt;/code&gt; tag for declaring reactive derivations. Our "Destiny Operator" so to speak. This sometimes confuses people because derived values can change so how is it "const"? Well it never gets re-assigned and the expressions holds for all time.  &lt;/p&gt;

&lt;p&gt;When I was trying to explain this to someone new, Michael Rawlings, clarified it was the &lt;code&gt;let&lt;/code&gt;(Signal) that was special not the &lt;code&gt;const&lt;/code&gt;(Derivation). Every expression in our templates act like a derivation, every attribute binding, component prop. Our &lt;code&gt;&amp;lt;const value=(x * 2)&amp;gt;&lt;/code&gt; is no different than a &lt;code&gt;&amp;lt;div title=(name + description)&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Which got me thinking what if we've been looking at this all backwards. What if expressions were reactive by default and instead we needed to denote the imperative escape hatches? Instead of a "Destiny Operator" we'd need a side-effect operator.&lt;/p&gt;

&lt;p&gt;This seems crazy because would it be intuitive to change the semantic meaning of JavaScript yet keep the same syntax. I assumed no, but I mean we've already seen this done to great success. Svelte's scripts are nothing like "plain JavaScript" yet people seem to be accepting of those and some even advertising them as such.&lt;/p&gt;

&lt;p&gt;I did poll a while back and while not conclusive the results suggested many developers are much more sensitive to syntax than semantics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U-DExnQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjra1zcz9tfswdjynefi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-DExnQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjra1zcz9tfswdjynefi.png" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So the question is can we do something using the existing syntax of JavaScript and keep all the tooling advantages(even TypeScript)? I mean completely mess with how it executes in the way things like Svelte, React Hooks, or Solid's JSX defies expectations but do so with pure JavaScript syntax and in way people can make sense of. Well, we can try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#designing-reactivescript"&gt;
  &lt;/a&gt;
  Designing ReactiveScript
&lt;/h2&gt;

&lt;p&gt;For all of my, what might sound like criticism, over decisions made in the various approaches above there is a lot of great prior work to tap into. I think Svelte today is a good starting point as it has simple syntax and already distorts the expected semantics. Taking the example from above picture we want to hoist the &lt;code&gt;console.log&lt;/code&gt; into another function (maybe imported from another module). This isn't something Svelte does today but maybe something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// log the value now and whenever it changes&lt;/span&gt;
&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// set a new value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the sake of visualizing how things actually behave I'm going to "compile" these down to Solid's explicit runtime syntax. Although this being runtime based isn't a requirement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// log the value now and whenever it changes&lt;/span&gt;
&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// or log(() =&amp;gt; value())&lt;/span&gt;

&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// set a new value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All function arguments get wrapped in functions (or pass the function straight through). All local scoped variables get called as functions.&lt;/p&gt;

&lt;p&gt;How about if we want to create a derived value? In our new reactive world that might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// log double the value now and whenever it value changes&lt;/span&gt;
&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doubleValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// set a new value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we could even hoist it out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which could compile to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might be scratching your head at this example because well does anything ever run? Well it doesn't unless it needs to. As in it is used in a side effect denoted by &lt;code&gt;$:&lt;/code&gt;. We have a lazy evaluated language that only runs code when absolutely needed. &lt;/p&gt;

&lt;p&gt;Our derived value is still assigned to a &lt;code&gt;const&lt;/code&gt; so it remains consistent. No need for new syntax to know exactly what its behavior is. In a sense reactive values don't escape their local scope like in Svelte from a mutation standpoint but they do from a tracking standpoint. The retains clear control while affording the convenience of local mutation.&lt;/p&gt;

&lt;p&gt;This every expression is reactive can extend to language primitives as well. In a similar way to how Solid transforms ternaries in JSX we could look at things like &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; statements and compile them accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Small number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Large number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// logs "Small number"&lt;/span&gt;

&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// logs "Large number"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code would end up running both branches of the &lt;code&gt;if&lt;/code&gt; once the condition changes. And those side effects don't need to &lt;code&gt;console.logs&lt;/code&gt; at all and could be anything like maybe JSX.&lt;/p&gt;

&lt;p&gt;What if you could write components like this and have it work with minimal executing fine-grained reactivity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hidden&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
  &lt;span class="c1"&gt;// only do this calculation when visible&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;onInput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;onInput&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#just-a-taste"&gt;
  &lt;/a&gt;
  Just a taste
&lt;/h2&gt;

&lt;p&gt;Honestly, there is a ton of details to work through. Like loops for example. We naturally want a &lt;code&gt;.map&lt;/code&gt; operator rather than a &lt;code&gt;for&lt;/code&gt; in this paradigm so how do we reconcile that? However what this has going for it is, it is analyzable and the pattern applied consistent.&lt;/p&gt;

&lt;p&gt;Performance of such a system might require a lot more consideration. I think this actually has more potential with additional analysis and compile time approaches. Looking at what &lt;code&gt;let&lt;/code&gt;/&lt;code&gt;const&lt;/code&gt; are actually stateful could inform what to wrap or not. And once on that path, well, this goes many places. It could be used as a tool for things like partial hydration to know exactly what code actually can update and be sent to the browser.&lt;/p&gt;

&lt;p&gt;Honestly this is just an idea for now. And I have a lot more thoughts on how this could function. But with all the recent discussions I thought someone might be interested in exploring this and I encourage them to reach out and discuss!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>reactivity</category>
    </item>
    <item>
      <title>mmm.page — Make livelier, free-form personal websites. Try editing the homepage itself.</title>
      <author>XH</author>
      <pubDate>Tue, 23 Nov 2021 15:07:27 +0000</pubDate>
      <link>https://dev.to/xhfloz/mmmpage-make-livelier-free-form-personal-websites-try-editing-the-homepage-itself-egk</link>
      <guid>https://dev.to/xhfloz/mmmpage-make-livelier-free-form-personal-websites-try-editing-the-homepage-itself-egk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGLgzkpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylb4ie75rqf1io7aks93.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGLgzkpo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylb4ie75rqf1io7aks93.gif" alt="Image description" width="800" height="659"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey all,&lt;/p&gt;

&lt;p&gt;I've spent the past few months working on a website builder (works on desktop &amp;amp; mobile) that makes it easy to create automatically-responsive, collage-like websites -- websites that allow you to overlap text, images, GIFs, YouTube videos, etc. etc.&lt;/p&gt;

&lt;p&gt;I launched a few months back, and to my surprise it ended up on the &lt;a href="https://news.ycombinator.com/item?id=27128424"&gt;front page of Hacker News&lt;/a&gt; and &lt;a href="https://www.producthunt.com/posts/mmm-page-4"&gt;#2 product of the week on Product Hunt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since then I've patched up a lot of the builder based on user feedback, and wanted to share it with everyone today.&lt;/p&gt;

&lt;p&gt;Try here → &lt;a href="https://build.mmm.page"&gt;https://build.mmm.page&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Websites have begun to look more and more similar to one another, which makes sense, given how tedious responsive design can be, but I also lamented that increasingly rare personal website that I used to see everywhere. So I wondered: what if I could create a builder that was so easy to use -- one that would handle responsiveness, performance, usability, deployment, maintenance, etc. for you -- that more people could quickly launch a website of their own?&lt;/p&gt;

&lt;p&gt;So this is my attempt at that. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notable-features"&gt;
  &lt;/a&gt;
  Notable Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Automatically responsive.&lt;/strong&gt; Every website automatically works across all screen sizes (try it with the &lt;a href="https://build.mmm.page"&gt;the builder&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Smart embeds.&lt;/strong&gt; Paste in a supported link (YouTube, SoundCloud, Bandcamp, CodePen, Spotify, a few others) and it will automatically embed playable content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Actual drag-and-drop.&lt;/strong&gt; No grids or locking. Overlap, rotate, and position just like you would with a scrapbook.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Custom domains.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Draw on your pages.&lt;/strong&gt; Draw/doodle directly on your websites.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Free, optional pro.&lt;/strong&gt; It's free forever. Upgrade only if you need custom domains or more blocks/pages!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#future"&gt;
  &lt;/a&gt;
  Future
&lt;/h2&gt;

&lt;p&gt;A lot more features coming. Soonest are custom fonts + custom code support. Going into 2022, one of the biggest priorities will be the community/discovery features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;Discord: &lt;a href="https://discord.gg/4ZCvv8aNKd"&gt;https://discord.gg/4ZCvv8aNKd&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/mmmdotpage"&gt;https://twitter.com/mmmdotpage&lt;/a&gt;&lt;br&gt;
Showcase: &lt;a href="https://showcase.mmm.page"&gt;https://showcase.mmm.page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try here → &lt;a href="https://build.mmm.page"&gt;https://build.mmm.page&lt;/a&gt;&lt;br&gt;
Follow &lt;a href="https://twitter.com/xhfloz"&gt;@xhfloz&lt;/a&gt; for updates&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>UI design trends of today and how to apply them in your apps</title>
      <author>Sidney Alcantara</author>
      <pubDate>Tue, 23 Nov 2021 15:02:42 +0000</pubDate>
      <link>https://dev.to/notsidney/ui-design-trends-of-today-and-how-to-apply-them-in-your-apps-47kn</link>
      <guid>https://dev.to/notsidney/ui-design-trends-of-today-and-how-to-apply-them-in-your-apps-47kn</guid>
      <description>&lt;h3&gt;
  &lt;a href="#from-outline-icons-to-switch-designs-the-uis-of-major-oses-are-all-starting-to-look%C2%A0similar"&gt;
  &lt;/a&gt;
  From outline icons to switch designs, the UIs of major OSes are all starting to look similar.
&lt;/h3&gt;

&lt;p&gt;If you’re like me, you get excited by major new software releases and enjoy reading roundups of &lt;a href="https://www.macstories.net/stories/ios-and-ipados-15-the-macstories-review/"&gt;every new feature&lt;/a&gt; and &lt;a href="https://www.androidpolice.com/tag/series_android_12_feature_spotlights/"&gt;UI tweak&lt;/a&gt;, comparing them to the previous version. With the release of Windows 11, Android 12, and iOS 15 this year (and last year’s macOS Big Sur), I’ve noticed quite a few similarities in the designs of the major operating systems. And in some cases, what appears to be convergence. These range from the use of outline icons to variable UI fonts and inset elements.&lt;/p&gt;

&lt;p&gt;These similarities show that designers are coming up with new standards for digital user interfaces and offer hints as to where UIs are headed over the next decade and how the thinking behind UI design is shifting.&lt;/p&gt;

&lt;p&gt;I’m a front-end engineer at &lt;a href="https://rowy.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=UI%20design%20trends%20of%20today%20and%20how%20to%20apply%20them%20in%20your%20apps"&gt;Rowy&lt;/a&gt;, and I recently redesigned its UI with the primary goal of improving the information-dense desktop experience. I also wanted to move away from the 2015-era, mobile-first Material Design we were following to something more modern and better complements the UIs we see today. The trends I noticed helped inform this redesign and will hopefully assist you when designing your apps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#outline-icons-by-default-complementing-text"&gt;Outline icons by default, complementing text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#personalization-based-on-the-wallpaper"&gt;Personalization based on the wallpaper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rounded-corners-are-harmonious"&gt;Rounded corners are harmonious&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#variable-ui-fonts-with-optical-sizes"&gt;Variable UI fonts with optical sizes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#focus-on-content"&gt;Focus on content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inset-everything"&gt;Inset everything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#differentiation-beyond-color"&gt;Differentiation beyond color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#and-a-standard-switch-design"&gt;And a standard switch design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#outline-icons-by-default-complementing-text"&gt;
  &lt;/a&gt;
  Outline icons by default, complementing text
&lt;/h2&gt;

&lt;p&gt;Icons play a significant part in UIs and have proven to be emblematic of the trends in UI design over the past few decades. When graphical user interfaces were novel, icons mimicked real-world objects to as great detail as possible within the limitations of display technology; they were made to bridge the user experience from the physical to the digital. This can be seen from Susan Kare’s icons for the original Macintosh to Microsoft’s photorealistic set in Windows Vista and 7. &lt;/p&gt;

&lt;p&gt;When UIs moved from this skeuomorphic style to a “flat” style with Windows 8 and iOS 7, icon design also shifted to a monochromatic, outline style. And with the release of Android 12 and Google’s new version of Material Design called Material You (or Material Design 3), all major OSes now use this style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jfAOXyb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/husqdmm1xtxdku722f4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jfAOXyb3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/husqdmm1xtxdku722f4e.png" alt="Icon designs of Segoe Fluent Icons, SF Symbols, and Material Icons. Icons are: account, heart, share, edit, reload, and search." width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But why does everyone use this style for icons? Designers aren’t just investing more into creating cohesive and complementary icon sets for design systems—designers are making icons just like typographers make type. This style recognizes how integral icons have become to the user experience, as important as text itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Icons are designed with similar considerations to typefaces, and often appear alongside text.&lt;/em&gt;&lt;br&gt;
— &lt;a href="https://m3.material.io/styles/typography/applying-scaling-type#d00fccbc-719a-4aa6-b663-e0e1a9904e76"&gt;Material Design 3 guidelines&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Iconography [is] designed to integrate seamlessly with San Francisco, the system font.&lt;/em&gt;&lt;br&gt;
— &lt;a href="https://developer.apple.com/sf-symbols/"&gt;Apple Human Interface Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apple’s SF Symbols is the prime example of this: it’s designed in the &lt;a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/#weights-and-scales"&gt;same nine weights&lt;/a&gt; as their system font and aligns with the text’s cap height. This also means icons can respect the user’s accessibility settings for bolder UI text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GgZHuX59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plk0eyqb37t9cuh226ub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GgZHuX59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plk0eyqb37t9cuh226ub.png" alt="From Apple: A diagram showing the square and arrow up symbol in all 27 weights and scales." width="880" height="296"&gt;&lt;/a&gt;&lt;/p&gt;


Apple’s SF Symbols icon set is designed with the same nine weights as their system font. Source: &lt;a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/#weights-and-scales"&gt;Apple&lt;/a&gt;





&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lNEjh4ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn8cq84cvzq1152ho3dc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lNEjh4ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn8cq84cvzq1152ho3dc.png" alt="From Apple: 3 images of the plus circle symbol followed by the capitalized word add. In each, the word is the same size, but the symbol is a different size: small, medium, and large. 2 parallel horizontal lines appear across all three images. The top line shows the height of the capital letter A and the bottom line is the baseline under the word. Small: circle touches both lines. Medium: circle extends slightly above and below the lines. Large: vertical line of the plus sign almost touches both.&amp;lt;br&amp;gt;
" width="880" height="139"&gt;&lt;/a&gt;&lt;/p&gt;


They also align to the system font’s cap height to better complement text. Source: &lt;a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/#weights-and-scales"&gt;Apple&lt;/a&gt;





&lt;p&gt;Uber’s design team &lt;a href="https://medium.com/uber-design/where-to-the-journey-to-ubers-iconography-bf8efd2be446"&gt;similarly made icons&lt;/a&gt; to complement their UI font Uber Move, set in three weights for different degrees of emphasis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1LQoOyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fof9e0v2784yf7a7egtb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1LQoOyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fof9e0v2784yf7a7egtb.png" alt="Uber Move icon set in light, medium, and bold weights.&amp;lt;br&amp;gt;
" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;


Source: &lt;a href="https://medium.com/uber-design/where-to-the-journey-to-ubers-iconography-bf8efd2be446"&gt;Uber&lt;/a&gt;





&lt;h3&gt;
  &lt;a href="#icons-are-designed-to-mimic-our-writing-systems"&gt;
  &lt;/a&gt;
  Icons are designed to mimic our writing systems
&lt;/h3&gt;

&lt;p&gt;So it becomes clear why system icons are monochromatic and drawn with outlines: instead of mimicking physical objects, they mimic our writing systems. Modern alphabets, Latin in particular, are fundamentally composed of lines instead of filled shapes. They made a similar transition from pictographs that resemble physical objects (like Egyptian hieroglyphs) to more abstract representations of physical objects. For example, you don’t need to draw a bird to talk about a bird; you just write a set of letters or symbols that mean ‘bird’.&lt;/p&gt;

&lt;p&gt;By designing icons that resemble text, designers recognize that icons are a vital medium to communicate information to users. Icons can break language barriers, while text remains essential for those unfamiliar with icons. And designing both to appear similar can reduce cognitive load when reading icons alongside text.&lt;/p&gt;

&lt;p&gt;Another benefit of defaulting to outline icons is that filled icons can now be used to represent state or emphasis, like bold text. For instance, “active states are represented with filled icons” in &lt;a href="https://m3.material.io/components/navigation-bar/overview#5eebed09-2454-4630-ab41-3515acccbba9"&gt;Material Design 3&lt;/a&gt; and Apple suggests to “use the fill variant to indicate selection” or “to give a symbol more visual emphasis” in their &lt;a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/#variants"&gt;Human Interface Guidelines&lt;/a&gt;. Twitter’s 2021 redesign takes this a step further, with the active page being differentiated only by a filled icon and bold text, without any color change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6P2eyqKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fio43m70qzw0v4840gck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6P2eyqKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fio43m70qzw0v4840gck.png" alt="Twitter navigation UI, with the Home page active. The home icon is filled and the text is bold, while other icons are outlined and in regular font weight.&amp;lt;br&amp;gt;
" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

Twitter only uses filled icons and bold text to differentiate the current page. The jury is still out on whether this is accessible enough.




&lt;p&gt;Predicting the future is a fool’s errand, but looking at the history of writing systems, they’ve seen convergence on what symbols represent what sounds and ideas: the symbol ‘a’ always means ‘a’ and the letters ‘ant’ mean the insect named ant. There remain variations in how these symbols are drawn (the capital A can have serifs or not) but they all fundamentally look the same across different typefaces.&lt;/p&gt;

&lt;p&gt;Iconography seems to be heading this way too—the “add folder” icon above has the same basic design across Apple’s, Google’s, and Microsoft’s icon sets: an outline of a closed Manila folder with a ‘+’ symbol. As icons become more commonplace in GUIs, people tend to agree on what symbols represent what ideas and differences become purely stylistic, just like text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4xRmlRSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gcqjn1argc4e9m0vg5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xRmlRSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gcqjn1argc4e9m0vg5c.png" alt="Add folder icon in Segoe Fluent Icons, SF Symbols, and Material Icons." width="880" height="181"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I achieve this?&lt;/strong&gt; When using icons in your apps, you should use the icon set designed with the font you’re using: this is trivial if you’re using system fonts, which now all have system icon fonts. But if you’re using another UI font, there probably isn’t an icon set designed specifically for that font. Using an outline icon set is sufficient, such as the open-source &lt;a href="https://feathericons.com"&gt;Feather icons&lt;/a&gt; or &lt;a href="https://iconic.app/"&gt;Iconic.app&lt;/a&gt;. And if you were using filled Material Icons like us, you can easily switch to the &lt;a href="http://fonts.google.com/icons"&gt;outline style&lt;/a&gt;. (It seems Google has now made this style the default as part of Material Design 3.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personalization-based-on-the-wallpaper"&gt;
  &lt;/a&gt;
  Personalization based on the wallpaper
&lt;/h2&gt;

&lt;p&gt;Personalization is becoming an increasingly important element of UI design. While customization has been present since the ’90s with custom wallpapers and themes, designers are now finding more ways to personalize UIs throughout the system, primarily from the user-selected wallpaper. Google’s &lt;a href="https://material.io/blog/announcing-material-you"&gt;Material Design blog&lt;/a&gt; says it best: “Users customize their desktops in the physical and digital worlds with images that are personal and provide comfort and joy.” The wallpaper is the first thing a user sees and serves as a backdrop for the UI. So it’s a no-brainer to adapt the rest of the UI to this element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WqcabIn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj5dhbqhglrp1zeo5gp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WqcabIn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj5dhbqhglrp1zeo5gp5.png" alt="From the left: Windows 11 menu with translucent background that blurs the wallpaper, macOS app sidebar with similar translucent background, iOS control center with similar translucent background, and Material You app design with color palette generated from wallpaper colors." width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The technique of blending the wallpaper into the UI has been around for a while, from the semi-transparent dock and menus in Mac OS X’s Aqua interface to the translucent window title bars in Windows Vista and 7’s Aero Glass theme. iOS 7 famously brought blurred backgrounds to many parts of its UI, with entire screens like the Notification Center and Control Center using a blurred version of the user’s wallpaper.&lt;/p&gt;

&lt;p&gt;More recently, the wallpaper has started to influence almost the entirety of the UI. When Apple introduced dark mode in macOS Mojave, they incorporated a tint in window backgrounds based on the wallpaper, called Desktop Tinting. According to the &lt;a href="https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/dark-mode/#darkmode-colors"&gt;Human Interface Guidelines&lt;/a&gt;, it “helps windows blend more harmoniously with their surrounding content.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BDu7y_vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04cwbvqcoctyewvucv2u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BDu7y_vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04cwbvqcoctyewvucv2u.jpg" alt="Two screenshots, split vertically, of the System Preferences window in dark mode in macOS Mojave, with different wallpapers behind. The left half uses a wallpaper with dark blue tones. The right half uses a wallpaper with lighter orange tones. The window has a different background color that's slightly tinted to match the colors of the wallpapers." width="880" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

Source: &lt;a href="https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/dark-mode/#darkmode-colors"&gt;Apple&lt;/a&gt;




&lt;p&gt;They later expanded on this in their major redesign in Big Sur by applying Desktop Tinting to light mode as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0hHN27i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikqdmst5jh2t9dmaopsx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0hHN27i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ikqdmst5jh2t9dmaopsx.jpg" alt="Two screenshots, split vertically, of the System Preferences window in light mode in macOS Monterey. The left half has Desktop Tinting enabled and the right has it disabled." width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

On the left, the window background is tinted purple to match the wallpaper. On the right, tinting is disabled, and the window background is pure gray.




&lt;p&gt;Windows 11 introduces a similar element with its Mica material, which their &lt;a href="https://docs.microsoft.com/en-us/windows/apps/design/style/mica"&gt;design guidelines&lt;/a&gt; describe as “an opaque material that incorporates the user’s theme and desktop wallpaper to create its highly personalized appearance.” It also uses this tint as a signifier for the currently active window.&lt;/p&gt;

&lt;p&gt;Taking it to the next level is Material You in Android 12, which tints the app’s background, the bright accent colors for buttons and other controls, and down to the more neutral text colors. An entire color palette is generated from each user’s unique wallpaper.&lt;/p&gt;

&lt;p&gt;It’s a critical element of their new design philosophy, &lt;a href="https://www.youtube.com/watch?v=Mlk888FiI8A&amp;amp;t=4410s"&gt;“Instead of form following function, what if form followed feeling?”&lt;/a&gt; It’s a radical rejection of the status quo in UI design, which seeks a “universal” design with the most technically superior interface to fulfill user needs. It will be interesting to see if others follow suit in this philosophy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RcmTa0wI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5p1uftjju7cjjjaitei.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RcmTa0wI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5p1uftjju7cjjjaitei.jpg" alt="Multiple phones arranged in a grid with different wallpapers and different UI color palettes derived from the wallpapers." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

Source: &lt;a href="https://material.io/blog/announcing-material-you"&gt;Google&lt;/a&gt;




&lt;h3&gt;
  &lt;a href="#material-design-built-a-color-system"&gt;
  &lt;/a&gt;
  Material Design built a color system
&lt;/h3&gt;

&lt;p&gt;What the Material Design team left out of their announcements is &lt;em&gt;how&lt;/em&gt; they achieved this, especially since &lt;a href="https://youtu.be/rLKtIGY2Mgc?t=319"&gt;they say&lt;/a&gt; they “had to find a way for any color combination to also have accessible contrast […] without testing each one.” Diving into the recently-published &lt;a href="https://github.com/material-foundation/material-color-utilities"&gt;Material color utilities repo on GitHub&lt;/a&gt; unveils all the mystery:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Material team built their own &lt;a href="https://github.com/material-foundation/material-color-utilities/blob/main/typescript/hct/hct.ts"&gt;color system&lt;/a&gt;: ‘hue, chroma, tone’, or ‘HCT’, based on the &lt;a href="https://en.wikipedia.org/wiki/Color_appearance_model#CAM16"&gt;CAM16&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/CIELAB_color_space"&gt;CIELAB&lt;/a&gt; (or LAB) color appearance models. CAM16 is a successor of LAB, designed to &lt;a href="https://programmingdesignsystems.com/color/perceptually-uniform-color-spaces/index.html"&gt;match how humans perceive color&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Key to these models is the ‘tone’ or L* value, which describes a color’s perceived luminance or lightness, with an L* value of 0 being black and 100 being white. This is very useful when creating accessible color palettes, ensuring colors have enough contrast based on perceived luminance.&lt;/li&gt;
&lt;li&gt;On the web, the &lt;a href="https://webaim.org/articles/contrast/"&gt;WCAG 2 guidelines&lt;/a&gt; prescribe a minimum contrast of 4.5:1 for body text. Directly using perceived luminance as a value to describe a color makes this much more straightforward, as the Material team &lt;a href="https://github.com/material-foundation/material-color-utilities/blob/main/typescript/hct/hct.ts#L28-L30"&gt;explains&lt;/a&gt;: “Unlike contrast ratio, measuring contrast in L* is linear, and simple to calculate […] a difference of 50 guarantees a contrast ratio &amp;gt;= 4.5.”&lt;/li&gt;
&lt;li&gt;With this knowledge, all that’s left is to generate a palette of colors with different tones or L* values and apply any hue to it. Then use sufficiently contrasting pairs for UI elements. For example, a button can have a background color with L* = 40 and white text (L* = 100), and it would easily pass the minimum contrast requirement (L* difference &amp;gt; 50).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3VvfdqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahnh83zsz6togwihis9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3VvfdqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahnh83zsz6togwihis9n.png" alt="Light color palette generated from a user-supplied red floral wallpaper. All the colors have warm, red tones, with different levels of lightness." width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

Source: &lt;a href="https://m3.material.io/styles/color/dynamic-color/user-generated-color"&gt;Google&lt;/a&gt;




&lt;h3&gt;
  &lt;a href="#lch-for-the-rest-of-us"&gt;
  &lt;/a&gt;
  LCH for the rest of us
&lt;/h3&gt;

&lt;p&gt;This is a powerful technique to effortlessly generate accessible colors, but it doesn’t require Material color utilities. LAB can be represented as LCH (luminosity, chroma, hue), similar to Material’s HCT, where the L value can be used to calculate contrast. (This is a better representation than existing ones like HSL, which can vary in &lt;em&gt;perceived&lt;/em&gt; lightness even if the lightness &lt;em&gt;value&lt;/em&gt; is the same.) You can learn more about LCH in &lt;a href="https://lea.verou.me/2020/04/lch-colors-in-css-what-why-and-how/"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(Also, LCH is making its way into web standards as part of &lt;a href="https://drafts.csswg.org/css-color/#lab-colors"&gt;CSS Color Level 4&lt;/a&gt;! So you can write &lt;code&gt;lch(40% 44 49)&lt;/code&gt; in CSS without needing to convert it to HSL or RGB, but this is currently &lt;a href="https://colord.omgovich.ru"&gt;only supported in Safari&lt;/a&gt;. Lea Verou, who wrote the article linked above, is part of the W3C CSS Working Group developing this very standard.)&lt;/p&gt;

&lt;p&gt;So, all you need is a starting color, convert it to LCH, and modify the L value to make a palette. Then use a pair of colors that have a difference of 50 or more in luminosity to ensure accessible contrast.&lt;/p&gt;

&lt;p&gt;We can see how this technique is used in the Material color system below: the tones in the palette match the LCH luminosity value. (They also modify the chroma (similar to saturation) and hue slightly across tones.) I made a &lt;a href="http://notsidney.github.io/material-you-palette-visual"&gt;small web app&lt;/a&gt; that displays the palettes generated by the Material color utilities to get the LCH values below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tMybNNU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/outhxlo5mihpxkfwpwy7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tMybNNU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/outhxlo5mihpxkfwpwy7.png" alt="13 tones derived from a key color. Tones are: 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95, 99, 100. Underneath each tone is the associated LCH value. The L value matches the tone number." width="880" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

Source: &lt;a href="https://m3.material.io/styles/color/the-color-system/key-colors-tones"&gt;Google&lt;/a&gt;




&lt;p&gt;Before Material’s HCT, the design teams of &lt;a href="https://design.lyft.com/re-approaching-color-9e604ba22c88"&gt;Lyft&lt;/a&gt; and &lt;a href="https://stripe.com/blog/accessible-color-systems"&gt;Stripe&lt;/a&gt; explored the same issue, and Stripe also ended up using LCH. I’ve linked both of their explorations, which are excellent reads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I achieve this?&lt;/strong&gt; There are a few tools to convert to and from LCH:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lea Verou made an &lt;a href="https://css.land/lch/"&gt;LCH color picker&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;the &lt;a href="https://colord.omgovich.ru"&gt;Colord website&lt;/a&gt; lets you convert from LCH to hex or RGB,&lt;/li&gt;
&lt;li&gt;if you have a Mac, Sindre Sorhus’ &lt;a href="https://sindresorhus.com/system-color-picker"&gt;System Color Picker&lt;/a&gt; is excellent, and&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://accessiblepalette.com"&gt;Accessible Palette&lt;/a&gt; generates a palette using LAB/LCH.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used this technique to add theming to &lt;a href="https://rowy.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=UI%20design%20trends%20of%20today%20and%20how%20to%20apply%20them%20in%20your%20apps"&gt;Rowy&lt;/a&gt;, allowing users to choose their own accent color while maintaining accessibility and tinting key UI elements. &lt;a href="https://github.com/rowyio/rowy/blob/92630a52351bffdb1d085a41dc46e515bee8faf3/src/theme/colors.ts#L20-L30"&gt;The source code&lt;/a&gt; has the exact LCH values I used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6fdMx3-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/743x5fs8rh0mu1ar7nw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fdMx3-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/743x5fs8rh0mu1ar7nw9.png" alt="Two UI themes based on a different primary color. On the left, the primary color is purple and on the right, it's red. The UI colors for backgrounds and shadows are displayed as LCH. The L and C values are the same across the two themes, but the H value matches the hue of the primary color." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rounded-corners-are-harmonious"&gt;
  &lt;/a&gt;
  Rounded corners are harmonious
&lt;/h2&gt;

&lt;p&gt;When you have a box with rounded corners in a design and want to nest an inner box with a small gap, the inner element should have a smaller corner radius, with the difference being the gap size. If you make the corner radii equal for both, the inner box &lt;a href="https://css-tricks.com/public-service-announcement-careful-with-your-nested-border-radii/"&gt;looks out of place&lt;/a&gt;. This technique has been &lt;a href="https://graphicdesign.stackexchange.com/questions/8919/how-to-compute-the-radii-radiuses-of-corners-for-concentric-rounded-rects"&gt;known for a while&lt;/a&gt; in digital design and is even part of &lt;a href="https://www.w3.org/TR/css-backgrounds-3/#corner-shaping"&gt;the CSS3 spec&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3qOFbZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/ErZGhpwXIAIMbIp.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--khgR4x9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1362432748011536385/vRY-trfG_normal.jpg" alt="Josh W. Comeau profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Josh W. Comeau
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/joshwcomeau"&gt;@joshwcomeau&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🌠 PSA: if you nest elements with rounded edges, you need to tweak the radius! Otherwise you get chunky corners.&lt;br&gt;&lt;br&gt;✨ The formula I use:&lt;br&gt;outerRadius = innerRadius + (outerSize - innerSize) / 2&lt;br&gt;&lt;br&gt;Live demo: &lt;a href="https://t.co/YdDGwZZXnN"&gt;codepen.io/joshwcomeau/pe…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:15 PM - 14 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1349782080021028865" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1349782080021028865" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1349782080021028865" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;This is also present in hardware design: the screen’s rounded corners match the device frame on the &lt;a href="https://twitter.com/Mumblefluff/status/1061247788611190785"&gt;iPad Pro&lt;/a&gt; and iPhone X designs. On iPhones with rounded screens, the dock matches the screen’s curvature—Apple even provides the exact point size in &lt;a href="https://kylebashour.com/posts/finding-the-real-iphone-x-corner-radius"&gt;the software&lt;/a&gt;. You can also see other elements in the &lt;a href="https://blog.maxrudberg.com/post/166045445103/ui-design-for-iphone-x-top-elements-and-the-notch"&gt;video player&lt;/a&gt; matching the screen curvature.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CXMWh85q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcsys5j1fr88m4gnvg1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXMWh85q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcsys5j1fr88m4gnvg1n.png" alt="Annotated screenshot of iPhone dock. The display corner radius is 47.33pt, the gap between the display and dock is 12pt, and the dock corner radius is 35.33pt." width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

These values were measured using the image provided in Sketch’s &lt;a href="https://www.sketch.com/docs/designing/templates/"&gt;built-in iOS App Icon template&lt;/a&gt; and the display corner radius for the iPhone 12 from Kyle Bashour’s &lt;a href="https://github.com/kylebshr/ScreenCorners"&gt;ScreenCorners library&lt;/a&gt;. The app icon radius remains consistent across the system, so it does not match the screen’s curvature.




&lt;p&gt;Oddly, this principle was not applied to UI elements, which used a single corner radius. In Material Design 2, both dialogs and inner buttons have a &lt;a href="https://material.io/design/shape/applying-shape-to-ui.html#baseline-shape-values"&gt;corner radius of 4dp&lt;/a&gt;, despite having a &lt;a href="https://material.io/components/dialogs#specs"&gt;gap of 8dp&lt;/a&gt; in between. macOS was similar in the Yosemite-era design, and Windows 10 used square corners for almost all UI elements.&lt;/p&gt;

&lt;p&gt;However, with Big Sur and Windows 11, this effect is approximated by increasing the corner radii of larger UI elements. In macOS, buttons now have a corner radius of 5pt and dialog windows 10pt, plus they all use &lt;a href="https://www.sketch.com/blog/2017/10/10/introducing-libraries-and-smooth-corners-in-sketch-47/#smooth-corners"&gt;‘smooth corners’&lt;/a&gt; to match the corners of Apple’s hardware. Meanwhile, Windows 11 famously rounds previously sharp corners, with buttons at 4px and windows 8px.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3bKsc0xS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2akb0ip6l7g8kehe8iua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3bKsc0xS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2akb0ip6l7g8kehe8iua.png" alt="Annotated side-by-side screenshots of Windows 11 and macOS 12 dialog windows. The Windows 11 design uses 8px for the window corner radius and 4px for the button. The macOS design uses 10pt for the window and 5pt for the button." width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also seems that UIs are becoming more rounded in general:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Big Sur increases corner radii and uses smooth corners, which look more rounded;&lt;/li&gt;
&lt;li&gt;iOS 15 introduces &lt;a href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/buttons/"&gt;button styles&lt;/a&gt; with fully-rounded corners;&lt;/li&gt;
&lt;li&gt;Windows 11 removed sharp corners on most UI elements; and&lt;/li&gt;
&lt;li&gt;Android 12 increased the radii for &lt;a href="https://m3.material.io/components/dialogs/overview"&gt;dialogs&lt;/a&gt;, &lt;a href="https://m3.material.io/components/navigation-drawer/overview"&gt;navigation drawers&lt;/a&gt;, and fully round the corners of &lt;a href="https://m3.material.io/components/buttons/overview"&gt;buttons&lt;/a&gt;, in stark contrast to all previous versions of Material Design.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How can I achieve this?&lt;/strong&gt; Set the smallest UI elements to some base corner radius, then set the larger containing elements like dialogs to a larger corner radius. Try to make them proportional to the distance between the smaller element, or double the smaller corner radius to simplify. Here’s how it looks in &lt;a href="https://rowy.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=UI%20design%20trends%20of%20today%20and%20how%20to%20apply%20them%20in%20your%20apps"&gt;our app&lt;/a&gt;, with the corner radii doubled:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0e74a7-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxay0hdgkvce2wl60gnv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0e74a7-a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxay0hdgkvce2wl60gnv.png" alt="Annotated screenshot of a dialog window in Rowy. The window's corner radius is 8px and the button's is 4px." width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variable-ui-fonts-with-optical-sizes"&gt;
  &lt;/a&gt;
  Variable UI fonts with optical sizes
&lt;/h2&gt;

&lt;p&gt;When typefaces were first developed, they were physical designs etched in metal, with fixed font sizes. When a typographer designed the same typeface for a different size, they modified the design to be optimal by altering facets like spacing and proportion: this is known as optical size. You can learn more about optical size in &lt;a href="https://pixelambacht.nl/2021/optical-size-hidden-superpower/"&gt;this article&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Variable fonts are a new font format based on OpenType that allows the designer to customize specific ‘variation axes’ (or variables) of a type design, such as a non-fixed weight, slant, and optical size. You can learn more about variable fonts in this excellent &lt;a href="https://variablefonts.io/"&gt;Variable Fonts Primer&lt;/a&gt;, which uses &lt;a href="https://github.com/TypeNetwork/Roboto-Flex"&gt;Roboto Flex&lt;/a&gt;, a variable font extension of Google’s Roboto typeface.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yFVHzSGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrtt7856zxajbd5kkgy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yFVHzSGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrtt7856zxajbd5kkgy1.png" alt="Text samples of Segoe UI Variable, SF Pro, and Google Sans at different optical sizes that highlight the differences in designs at different optical sizes." width="880" height="688"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2021, all major OSes now use this variable font technology to implement optical sizes in UI typography:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple’s system font San Francisco was released &lt;a href="https://developer.apple.com/videos/play/wwdc2015/804/"&gt;in 2015&lt;/a&gt; with two optical sizes: ‘Display’ for sizes 20 points and larger, and ‘Text’ for everything smaller. &lt;a href="https://developer.apple.com/videos/play/wwdc2020/10175/?time=153"&gt;In 2020&lt;/a&gt;, Apple released these fonts as a single variable font, SF Pro, with optical size as a variation axis. Apple’s system icons, SF Symbols, &lt;a href="https://developer.apple.com/videos/play/wwdc2021/10250/?time=411"&gt;also use variable font techniques&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For Windows 11, Microsoft redesigned its system font Segoe UI as &lt;a href="https://docs.microsoft.com/en-us/windows/apps/design/signature-experiences/typography"&gt;Segoe UI Variable&lt;/a&gt; with its own optical size axis.&lt;/li&gt;
&lt;li&gt;And as part of Material Design 3, Google introduces &lt;a href="https://youtu.be/rLKtIGY2Mgc?t=414"&gt;GS Text and GS Variable&lt;/a&gt;, an evolution of its corporate font Google Sans.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also of note: these typefaces are all different styles of sans-serif. &lt;a href="https://en.wikipedia.org/wiki/San_Francisco_(sans-serif_typeface)"&gt;San Francisco&lt;/a&gt; is neo-grotesque, &lt;a href="https://en.wikipedia.org/wiki/Segoe"&gt;Segoe&lt;/a&gt; is humanist, and &lt;a href="https://en.wikipedia.org/wiki/Product_Sans"&gt;Google Sans&lt;/a&gt; is geometric.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I achieve this?&lt;/strong&gt; Variable fonts are a relatively new technology, and producing them is expensive, so there aren’t as many of them around, especially in the free and open source space. So far, the only open source variable font with optical sizes that I’ve found is &lt;a href="https://codepen.io/RoelN/pen/PoPvdeV"&gt;Roboto Flex&lt;/a&gt;, but it doesn’t seem to be finished yet. Rasmus Andersson’s increasingly ubiquitous Inter typeface has a &lt;a href="https://twitter.com/rsms/status/1248657377877839872"&gt;display size in beta&lt;/a&gt;. In the meantime, using a more expressive typeface for prominent titles can elevate your design. For &lt;a href="https://rowy.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=UI%20design%20trends%20of%20today%20and%20how%20to%20apply%20them%20in%20your%20apps"&gt;Rowy&lt;/a&gt;, I used Inter as the typeface in small text and Space Grotesk in headings for brand expression.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--stZgaZ9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8b9erfh5d34r43bkabt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--stZgaZ9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8b9erfh5d34r43bkabt.png" alt="Typography scale used in Rowy. Headings use the font Space Grotesk and smaller UI text use Inter." width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-content"&gt;
  &lt;/a&gt;
  Focus on content
&lt;/h2&gt;

&lt;p&gt;Flat design has been with us for over a decade, and its primary goal is to focus on the content by stripping away the clutter and ornamentation of UI elements. The &lt;a href="https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/"&gt;iOS 15 design guidelines&lt;/a&gt; state, “a crisp, beautiful interface help[s] people understand and interact with content while never competing with it.”&lt;/p&gt;

&lt;p&gt;The most recent OS releases iterate on this concept by having even less “chrome”. Navigation bars are transparent in &lt;a href="https://developer.apple.com/videos/play/wwdc2021-10059/?time=335"&gt;iOS 15&lt;/a&gt; and &lt;a href="https://m3.material.io/components/top-app-bar/overview"&gt;Android 12&lt;/a&gt; and blend into the background until you scroll.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5opY0pEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsebut20dfeoxa0w65q7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5opY0pEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsebut20dfeoxa0w65q7.png" alt="A 2×2 grid of screenshots of navigation bars in iOS 15 (left column) and Android 12 (right column). The top row shows the navigation bars before scrolling, with a transparent background. The bottom row shows the bars with backgrounds after the user has scrolled." width="880" height="787"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the desktop, macOS Big Sur blends the title bar and toolbar until you scroll or hover over the bar for a few seconds. And some apps in Windows 11 don’t distinguish the title bar at all but house the content in a distinct card-like layer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uLoS_Nrh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdo0qr1wfvyss2h2isq0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLoS_Nrh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdo0qr1wfvyss2h2isq0.png" alt="On the top, two screenshots of the macOS toolbar design. On the left, the toolbar blends into the background by default. On the right, the toolbar has a shadow underneath as the user hovers over the toolbar. Below is a screenshot of the Windows 11 settings app, which always has a transparent background for the toolbar. The content below is housed in a card-like layer with a lighter background and shadow." width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These elements all achieve the same goal: to reduce the amount of visual clutter around and elevate the visual prominence of the content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I achieve this?&lt;/strong&gt; If you have a navigation bar docked to an edge, blend it into the background when it doesn’t need to be distinguished, such as when the user hasn’t scrolled. And if you have primary content, house it in a subtle layer distinct from the background. We use a React UI library, MUI, which makes it easy for us to &lt;a href="https://mui.com/components/app-bar/#elevate-app-bar"&gt;achieve this effect&lt;/a&gt; where the navigation bar is only distinguished on scroll:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eSPVRt_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9odhtj4vfnka9i0d8ea4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eSPVRt_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9odhtj4vfnka9i0d8ea4.png" alt="Two screenshots side-by-side of navigation bars in Rowy. On the left, the navigation bar blends into the background in the initial state. On the right, the navigation bar has a white background and shadow after the user has scrolled." width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inset-everything"&gt;
  &lt;/a&gt;
  Inset everything
&lt;/h2&gt;

&lt;p&gt;In a similar vein, more UI elements are inset, no longer taking the entire width of their containers. When the iPhone X introduced an on-screen home indicator in place of the home button, Apple changed &lt;a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/#designing-a-full-screen-experience"&gt;their guidelines&lt;/a&gt; to prescribe inset buttons with rounded corners, eschewing the &lt;a href="https://blog.maxrudberg.com/post/165590234593/ui-design-for-iphone-x-bottom-elements"&gt;full-width buttons&lt;/a&gt; introduced in iOS 7. Best practices changed for &lt;a href="https://blog.maxrudberg.com/post/165590234593/ui-design-for-iphone-x-bottom-elements"&gt;many other elements&lt;/a&gt; fixed to the bottom of the screen to adapt to the new iPhone design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--StVfYiEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sbug3105qdc5izbd9jn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--StVfYiEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sbug3105qdc5izbd9jn.png" alt="Screenshot of the Windows 11 Settings app, macOS 12 Mail app, iOS 15 Settings app, and Android 12 notification panel. In all screenshots, none of the UI elements touch the edge of the windows or screens and are contained in elements with rounded corners." width="880" height="996"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With iOS 15, Apple is insetting ‘table views’ in more apps like Settings and Mail. It seems to be in response to the growing size of iPhone screens, with &lt;a href="https://developer.apple.com/design/human-interface-guidelines/ios/views/tables/"&gt;the guidelines&lt;/a&gt; noting, “in a compact environment, an inset grouped table can cause text wrapping, especially when content is localized.”&lt;/p&gt;

&lt;p&gt;In macOS Big Sur, they extend this design to the lists in Mail, consistent with the &lt;a href="https://developer.apple.com/design/human-interface-guidelines/ios/views/split-views/"&gt;iPadOS design&lt;/a&gt;. It’s also present in menus throughout the system, including the menu bar. Note the click targets extend to the edge of the menus, like the previous full-width design. Windows 11 shares the same style in its menus and navigation items. Android 12’s system UI and apps generally follow this style too.&lt;/p&gt;

&lt;p&gt;This style could improve accessibility as the separation between elements and their containers now extends to all four sides, but I haven’t found any research supporting this. When paired with harmoniously rounded corners, it can make menus look more modern.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqY4emM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/779fk56ddg0va9ux1ued.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqY4emM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/779fk56ddg0va9ux1ued.png" alt="Two screenshots of menus in Rowy. In both, the menu items do not touch the edge of the menu container and items have rounded corners." width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#differentiation-beyond-color"&gt;
  &lt;/a&gt;
  Differentiation beyond color
&lt;/h2&gt;

&lt;p&gt;Designers are adding more ways to display states without relying on color, which is &lt;a href="https://www.smashingmagazine.com/2016/06/improving-color-accessibility-for-color-blind-users/"&gt;inaccessible&lt;/a&gt; for people with color blindness. Here are some examples I noticed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spotify added dots below the shuffle and repeat buttons instead of relying solely on changing their color &lt;a href="https://community.spotify.com/t5/Implemented-Ideas/All-Platforms-Make-Shuffle-Icons-Discernible-for-Color-Blind/idi-p/1556225"&gt;in 2017&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Material Design 3 displays a pill-shaped indicator and uses filled icons for active pages in the &lt;a href="https://m3.material.io/components/navigation-bar/overview"&gt;navigation bar&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Windows 11 adds a consistent, distinct line to selected items in &lt;a href="https://docs.microsoft.com/en-us/windows/apps/design/signature-experiences/geometry"&gt;lists and navigation panes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zI4A1Jsh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oo766v7t4lv7myyvq6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zI4A1Jsh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oo766v7t4lv7myyvq6p.png" alt="Three screenshots. From the left: a Windows 11 navigation pane with a line on the left of the active page, the Spotify playback controls with repeat enabled and a dot below the repeat icon to signify state, and an Android 12 navigation bar with the current page signified by a pill shape behind the page icon." width="880" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This informed the decision to redesign toggle buttons for &lt;a href="https://rowy.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=UI%20design%20trends%20of%20today%20and%20how%20to%20apply%20them%20in%20your%20apps"&gt;Rowy&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9StecEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l81mg1lgttm46isbd28n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9StecEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l81mg1lgttm46isbd28n.png" alt="Two screenshots of toggle button designs. On the left: Material Design 2, which uses a different background to signify the active button. On the right: Rowy, which uses a line on the bottom of the button to signify the active button." width="880" height="192"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-a-standard-switch-design"&gt;
  &lt;/a&gt;
  And a standard switch design
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDUfWd8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ozuyk97fxttlatqynib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDUfWd8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ozuyk97fxttlatqynib.png" alt="Screenshots of toggle switch designs in Windows 11, macOS 12, iOS 15, and Android 12." width="880" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Android 12, switches now have the same fundamental design across the major OSes. This makes it easier for a user to switch between these platforms and reduces cognitive load. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-where-is-ui-design-headed"&gt;
  &lt;/a&gt;
  # Where is UI design headed?
&lt;/h2&gt;

&lt;p&gt;The overarching theme I notice in all these design decisions is that designers put user interface design into perspective. They’re acutely aware of where digital interfaces fit in the human experience and interact with the physical world.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The convergence on outline icons to mimic text recognizes the importance of icons in communication.&lt;/li&gt;
&lt;li&gt;Increasingly personalized interface elements—especially the direction Material You is taking—acknowledge how people like to make the things they use their own, including the tech they use every day.&lt;/li&gt;
&lt;li&gt;Harmoniously rounded corners and inset elements are inspired by physical objects and industrial design, so our software matches the hardware more closely.&lt;/li&gt;
&lt;li&gt;The use of variable fonts with optical sizes hearkens back to typography’s origins, and along with differentiating elements beyond color, they improve usability for all, especially those with disabilities.&lt;/li&gt;
&lt;li&gt;The more minor things help, too: reducing visual clutter to elevate content allows users to focus on what they want to do. And using a standard switch design eliminates any cognitive load required to figure out what a UI element does.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A15mV3p6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgnnc8jo7vtxje8jk1e4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A15mV3p6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgnnc8jo7vtxje8jk1e4.jpg" alt="Woman with VR headset on and controllers in hands at sunset." width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

Photo by &lt;a href="https://unsplash.com/@viniciusamano?utm_source=medium&amp;amp;utm_medium=referral"&gt;Vinicius "amnx" Amano&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;




&lt;p&gt;This kind of thinking behind UI design sets us up nicely for the next generation of computing centered on &lt;del&gt;AR/VR&lt;/del&gt; the &lt;a href="https://en.wikipedia.org/wiki/Metaverse"&gt;metaverse&lt;/a&gt;, where metaverse-first experiences will have to answer how they improve the human experience and interact with the physical world. Designers are already looking at how to adapt design systems for this change. Looking at the decisions above, applying color science (Material’s HCT takes viewing conditions into account) and inset elements that elevate content help these UI elements transition from the 2D world to the 3D metaverse.&lt;/p&gt;




&lt;p&gt;Hey 👋 if you enjoyed this, you can follow me on Twitter @nots_dney, where I talk more about my work as a front-end engineer. Also, check out &lt;a href="https://rowy.io/?utm_source=dev.to&amp;amp;utm_medium=blog&amp;amp;utm_campaign=UI%20design%20trends%20of%20today%20and%20how%20to%20apply%20them%20in%20your%20apps"&gt;Rowy&lt;/a&gt;, where we’re building an improved user experience for working on cloud platforms, starting with Google Cloud and Firebase.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rowyio"&gt;
        rowyio
      &lt;/a&gt; / &lt;a href="https://github.com/rowyio/rowy"&gt;
        rowy
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Open-source Airtable-like experience for your database (Firestore) with GCP's scalability. Build any automation or cloud functions for your product. ⚡️✨
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/rowyio/rowysrc/assets/logo-sticker.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gjaz7yQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rowyio/rowysrc/assets/logo-sticker.svg" alt="Rowy" height="69"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
✨ GCP as easy as ABC ✨ &lt;br&gt;
&lt;/h1&gt;

&lt;h3&gt;
Build on Google Cloud Platform in minutes
&lt;/h3&gt;

&lt;p&gt;
Manage Firestore data in a spreadsheet-like UI, write Cloud Functions effortlessly in the browser, and connect to your favorite third party platforms such as SendGrid, Twilio, Algolia, Slack and more
&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href="https://discord.gg/B8yAD5PDX4" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6dd327ede435fa2675b694e66ceca0c8e3f44d863a45b32e9f181cc3c8f39390/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3835333439383637353438343831393437363f636f6c6f723d253233343230304646266c6162656c3d43686174253230776974682532307573266c6f676f3d646973636f7264266c6f676f436f6c6f723d253233464646464646267374796c653d666f722d7468652d6261646765" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;a href="http://www.rowy.io" rel="nofollow"&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; •
    &lt;a href="http://docs.rowy.io" rel="nofollow"&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; •
    &lt;a href="https://discord.gg/B8yAD5PDX4" rel="nofollow"&gt;&lt;b&gt;Discord&lt;/b&gt;&lt;/a&gt; • 
    &lt;a href="https://twitter.com/rowyio" rel="nofollow"&gt;&lt;b&gt;Twitter&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rowyio/rowy/blob/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/6fbaf79b7cc87b723985a9e7469929e909bb032ce246852daa542b3f9120714b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f726f7779696f2f726f7779" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://github.com/rowyio/rowy/commits/rc"&gt;&lt;img src="https://camo.githubusercontent.com/e322594629f502e65323f025bacd13336911d97dd95f085da18f2d0d6bd342fe/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f726f7779696f2f726f77792f7263" alt="Last commit"&gt;&lt;/a&gt;
&lt;a href="https://github.com/rowyio/rowy/stargazers/"&gt;&lt;img src="https://camo.githubusercontent.com/a1e3cefce46ee2314e926fee61f3a56e18516894696188d50ddbe066caf508da/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f726f7779696f2f726f7779" alt="GitHub stars"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2600c32c6be5d0408b83200d8da7932d521329a32641fd686586c615f3f06667/68747470733a2f2f666972656261736573746f726167652e676f6f676c65617069732e636f6d2f76302f622f726f7779696f2e61707073706f742e636f6d2f6f2f7075626c696344656d6f253246526f777925323057656273697465253230566964656f253230474946253230536d616c6c2e6769663f616c743d6d6564696126746f6b656e3d33663639396138662d633166322d343034362d386564352d653466663636393437636438"&gt;&lt;img width="100%" src="https://camo.githubusercontent.com/2600c32c6be5d0408b83200d8da7932d521329a32641fd686586c615f3f06667/68747470733a2f2f666972656261736573746f726167652e676f6f676c65617069732e636f6d2f76302f622f726f7779696f2e61707073706f742e636f6d2f6f2f7075626c696344656d6f253246526f777925323057656273697465253230566964656f253230474946253230536d616c6c2e6769663f616c743d6d6564696126746f6b656e3d33663639396138662d633166322d343034362d386564352d653466663636393437636438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Live Demo&lt;/h2&gt;

&lt;p&gt;💥 Check out the &lt;a href="https://demo.rowy.io/" rel="nofollow"&gt;live demo&lt;/a&gt; of Rowy 💥&lt;/p&gt;

&lt;h2&gt;
Quick Deploy&lt;/h2&gt;

&lt;p&gt;Set up Rowy on your Google Cloud Platform project with this one-click deploy
button.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://deploy.cloud.run/?git_repo=https://github.com/rowyio/rowyRun.git" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5832b6a44b19b13a5a84f8e89d646780a5ec646a0dfeef52f001134caca93511/68747470733a2f2f6465706c6f792e636c6f75642e72756e2f627574746f6e2e737667" alt="Run on Google Cloud"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;You can find the full documentation with how-to guides
&lt;a href="http://docs.rowy.io/" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;h3&gt;
Powerful spreadsheet interface for Firestore&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CRUD operations&lt;/li&gt;
&lt;li&gt;Sort and filter by row values&lt;/li&gt;
&lt;li&gt;Lock, Freeze, Resize, Hide and Rename columns&lt;/li&gt;
&lt;li&gt;Multiple views for the same collection&lt;/li&gt;
&lt;li&gt;Bulk import or export data - csv, json&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Automate with cloud functions and ready made extensions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Effortlessly build cloud functions on field level triggers right in the browser
&lt;ul&gt;
&lt;li&gt;Use any NPM modules or…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/rowyio/rowy"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>ux</category>
      <category>css</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Introducing Instant Rebalancing for a fully autonomous Kubernetes optimization platform</title>
      <author>CAST AI</author>
      <pubDate>Tue, 23 Nov 2021 15:02:19 +0000</pubDate>
      <link>https://dev.to/castai/introducing-instant-rebalancing-for-a-fully-autonomous-kubernetes-optimization-platform-525d</link>
      <guid>https://dev.to/castai/introducing-instant-rebalancing-for-a-fully-autonomous-kubernetes-optimization-platform-525d</guid>
      <description>&lt;p&gt;Anyone who has ever worked with manual cost management tools knows how time-consuming they can be. Reaching an optimized state can take months without any guarantee of an ongoing optimized state. &lt;/p&gt;

&lt;p&gt;With CAST AI, this is no longer the case.&lt;/p&gt;

&lt;p&gt;Our platform now offers &lt;strong&gt;Instant Rebalancing&lt;/strong&gt; - a feature that &lt;strong&gt;automatically reduces cloud compute costs by 50% or more&lt;/strong&gt;, instantly with zero impact to your application’s availability and performance.&lt;/p&gt;

&lt;p&gt;Built on top of our AI driven algorithms, Instant Rebalancing enables you to analyze your Kubernetes cluster configuration and rightsize it to the most cost-efficient compute resources available. &lt;/p&gt;

&lt;p&gt;Once you rebalance, our AI automation engine will keep you in an optimized state without any additional human effort.&lt;/p&gt;

&lt;h2&gt;Cutting costs instantly and automatically &lt;/h2&gt;

&lt;p&gt;The Instant Rebalancing feature allows you to automatically optimize a cluster from its current state to the most optimal configuration by seamlessly modifying compute resources in real time, based on inventory availability and pricing. That way, you get to realize savings within just a few minutes. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A substantial part of cloud cost optimization is rightsizing, or using the best available resources to optimize your deployments. We’ve developed advanced algorithms that make rightsizing instant, and as easy as clicking a button. Customers can then integrate Instant Rebalancing into cluster onboarding or continuous optimization through Infrastructure as Code (IaC). Our platform provides them with significant cost savings by enabling them to quickly and easily get optimized and stay optimized, ensuring a truly frictionless experience.&lt;/p&gt;
&lt;cite&gt;Laurent Gil, Chief Product Officer at CAST AI&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instant Rebalancing adds another critical building block to the CAST AI cloud cost optimization product suite. Thanks to this  new feature, you can now seamlessly turn on cost-driven autoscaling, keeping  your cloud expenses optimized over time - even as prices and market conditions change. &lt;/p&gt;

&lt;p&gt;Instant Rebalancing also allows teams to benefit from Spot Instances offered at significantly discounted rates. The feature works across all supported regions in AWS, Google Cloud, and Microsoft Azure. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CAST AI is a great solution for anyone that has fairly sprawling infrastructure that is growing a little out of control and becoming difficult to manage. Turning to containers and running applications in a much more consistent fashion - without ever forgetting about the costs - is a smart move. Looking at the expertise of CAST AI in Kubernetes, we are confident that these cost savings are going to be realized. [...] CAST AI gave us better visibility into our cloud resources and left us feeling in control.&lt;/p&gt;
&lt;cite&gt;Ryan Upton, Architect at Boostr&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;h2&gt;See how Instant Rebalancing works in practice&lt;/h2&gt;

&lt;p&gt;Are you going to AWS re:Invent? Drop by booth #400 to see a demonstration of the newest features, including Instant Rebalancing, between November 29 and December 3, 2021, in Las Vegas.&lt;/p&gt;

&lt;p&gt;CAST AI team will be waiting for you at booth #400 (turn right immediately upon entering). If you’re looking for a personal demo of Instant Rebalancing or the entire platform, make sure to &lt;a href="https://calendly.com/emilio-28/aws-re-invent-booth-demo-30min" rel="noreferrer noopener"&gt;book a time here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>news</category>
      <category>cloudnative</category>
      <category>cloud</category>
    </item>
    <item>
      <title>FrontEnd Developer Roadmap</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 23 Nov 2021 14:54:24 +0000</pubDate>
      <link>https://dev.to/thenerdydev/frontend-developer-roadmap-1h84</link>
      <guid>https://dev.to/thenerdydev/frontend-developer-roadmap-1h84</guid>
      <description>&lt;p&gt;Hey guys 👋🏻,&lt;br&gt;
In this article, let us understand the roadmap that will help you in becoming a &lt;strong&gt;Frontend Developer in 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXpVrAsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ribfruq6t3ogxw3r36tm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXpVrAsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ribfruq6t3ogxw3r36tm.png" alt="Image description" width="846" height="530"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1:
&lt;/h2&gt;

&lt;p&gt;First learn &lt;strong&gt;HTML, CSS and JavaScript&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLLXYgyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lk9qqe78qvbgetbtjpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLLXYgyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lk9qqe78qvbgetbtjpc.png" alt="Image description" width="836" height="340"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:
&lt;/h2&gt;

&lt;p&gt;Work on your own projects to &lt;em&gt;build&lt;/em&gt; skills and then work on &lt;strong&gt;LIVE&lt;/strong&gt; projects. Go grab some internship to get some working experience on various technologies. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yCWDxjri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84fxb52b3w8hw1vvp18x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCWDxjri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84fxb52b3w8hw1vvp18x.png" alt="Image description" width="852" height="356"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3:
&lt;/h2&gt;

&lt;p&gt;Pick and learn one frontend framework of your choice. Again go back to &lt;strong&gt;Step 2&lt;/strong&gt;. After &lt;strong&gt;Step 2&lt;/strong&gt;, proceed to &lt;strong&gt;Step 4&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TDq0OVUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhavby3xand0zftm9xkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TDq0OVUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rhavby3xand0zftm9xkm.png" alt="Image description" width="854" height="281"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4:
&lt;/h2&gt;

&lt;p&gt;Start applying for &lt;strong&gt;Frontend Developer&lt;/strong&gt; jobs or become a &lt;strong&gt;Freelancer&lt;/strong&gt; once you start to feel confident of your skills. &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;⚡Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 10 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A-in-depth look at my Confession app</title>
      <author>Animesh Sharma</author>
      <pubDate>Tue, 23 Nov 2021 14:49:45 +0000</pubDate>
      <link>https://dev.to/animesharma3/a-in-depth-look-of-my-confession-app-4l1d</link>
      <guid>https://dev.to/animesharma3/a-in-depth-look-of-my-confession-app-4l1d</guid>
      <description>&lt;p&gt;&lt;strong&gt;Finished Product Link&lt;/strong&gt; -&lt;a href="https://conphession.netlify.app/"&gt;https://conphession.netlify.app/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code&lt;/strong&gt; - &lt;a href="https://bit.ly/3xjyYJ9"&gt;https://bit.ly/3xjyYJ9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To contribute join our &lt;a href="https://join.slack.com/t/confessions-talk/shared_invite/zt-y5rcmvd1-LuE8~NligOm1WKELGlNlKQ"&gt;SLACK Workspace&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-confession-app"&gt;
  &lt;/a&gt;
  What is Confession App?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Confession&lt;/strong&gt; is a fully functional social media cum dating app which we developed for our fellow college mates so that they can post whatever they want to confess. They can confess publicly, privately and anonymously. Earlier our college mates were using an &lt;a href="https://www.instagram.com/svvv_secrets_and_confessions/"&gt;Instagram page&lt;/a&gt; to do the same, which we believe is a less democratic way as its up to the admin of the page to selectively post the confessions. This triggered us to create an app which does the same in a more democratic fashion and with better minimalistic UI and even more features like chat app, therapy room, toxic comment detector etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objectives"&gt;
  &lt;/a&gt;
  Objectives
&lt;/h2&gt;

&lt;p&gt;We intend to achieve the following objectives by developing this app -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an online dating cum social media platform that replaces the existing dependence on an Instagram page.&lt;/li&gt;
&lt;li&gt;Provide a safe place for our college mates to post confessions where they can confess publicly, privately, and anonymously in a more democratic way.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#intended-audiences"&gt;
  &lt;/a&gt;
  Intended Audiences
&lt;/h2&gt;

&lt;p&gt;Though we created this app for our college mates but its for anyone who -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;wants to confess to their college crush.&lt;/li&gt;
&lt;li&gt;wants a democratic platform to share his/her opinion publicly or anonymously.&lt;/li&gt;
&lt;li&gt;wants a safe place for confessing privately while keeping their details confidential.&lt;/li&gt;
&lt;li&gt;wants a platform where they can chat with their mates&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#features-and-functionalities"&gt;
  &lt;/a&gt;
  Features and Functionalities
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Realtime Update&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This feature is made possible by technologies like React and Firebase Real-time Database.&lt;/li&gt;
&lt;li&gt;Any changes made to the database will be reflected real-time on the web page.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Anonymous Confession&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One doesn't need to authenticate to confess anonymously. If someone wish to confess anonymously, we have created a separate account for that. So when someone confess anonymously, it gets posted under the name of that account and not under name of user's account. So we have no way to know who have posted that confession.
b. There is also a downside to confessing anonymously, user can't update and delete their anonymous confession. For now we decided to keep it that way.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Although you can anonymously confess on our platform, but in order to publicly confess and access some features one needs to authenticate. &lt;/li&gt;
&lt;li&gt;Confession provides you two ways to authenticate - google authentication and email authentication&lt;/li&gt;
&lt;li&gt;Even after authentication, one can easily confess anonymously.&lt;/li&gt;
&lt;li&gt;To make the authentication possible we have used Firebase Authentication.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;User Profile and Profile Engagement&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When user authenticate, a profile gets created with their chosen username.&lt;/li&gt;
&lt;li&gt;One can share their profile and also other's profile on other social media platforms.&lt;/li&gt;
&lt;li&gt;One can make changes to his/her profile, they can change their username, avatar etc&lt;/li&gt;
&lt;li&gt;One can also follow and unfollow other's profile. They follow their profile by default. So every user have at least one follower and following by default.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Confessions CRUD&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once authenticated user can create, read, update and delete their confessions publicly. Though that's not the case with anonymous confessions.&lt;/li&gt;
&lt;li&gt;Users can also confess privately in the therapy room. This feature is under development though. Nobody will be able to see the private confessions except for the website admin and the user and the admin will make sure to keep those confessions confidential.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Confessions Engagement&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One can like and unlike the confession.&lt;/li&gt;
&lt;li&gt;One can share the confession.&lt;/li&gt;
&lt;li&gt;One can comment on the confession.&lt;/li&gt;
&lt;li&gt;One can report the confession. (&lt;em&gt;Under development&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Comment CRUD&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once authenticated users can comment on each other's confessions.&lt;/li&gt;
&lt;li&gt;User can perform CRUD operation on their own confessions.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Nested Comments&lt;/strong&gt; (&lt;em&gt;Under Development&lt;/em&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Once authenticated user can comment on each others comment.&lt;/li&gt;
&lt;li&gt;We are keeping the comment reply thread to one level only for now.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Responsive and Masonry UI&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The web app is completely responsive. The UI is compatible with all the device. To make the website responsive we used Bootstrap with React.&lt;/li&gt;
&lt;li&gt;All the confessions are arranged in masonry fashion. For masonry look we have used an NPM package, react-masonry-css to do the job.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Infinite Scroll&lt;/strong&gt; &lt;em&gt;(Under Development&lt;/em&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One should be able to see 30 confessions at a time in masonry pattern.&lt;/li&gt;
&lt;li&gt;Instead of doing it paginated way, we are using infinite scroll.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Toxic confession and comment detector&lt;/strong&gt; (&lt;em&gt;Under Development&lt;/em&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Another problem we are anticipating with Confession App is &lt;strong&gt;Content Moderation.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Instead of using man-power for moderating the content, we are planning to deploy an ML Algorithm to filter the toxic confessions and comments and hide them.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Integrated Chat App&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Confession also has an integrated chat app.&lt;/li&gt;
&lt;li&gt;For this purpose we are using an &lt;strong&gt;React Chat Engine API.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Integrated Therapy Room for private confessions&lt;/strong&gt; (&lt;em&gt;Under Development&lt;/em&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One can confess privately to the site admin in the therapy room.&lt;/li&gt;
&lt;li&gt;The private confessions will be kept confidential at all times.&lt;/li&gt;
&lt;li&gt;Private confessions can also be posted anonymously.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Update and Delete Problem with Anonymous Confessions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned, Anonymous Confession doesn't goes under any user's account, it goes under a anonymous user's account which I have created for this purpose. So we have no way of knowing who created that anonymous confession. Since a user can only delete their own confessions and not others, therefore there is no way of updating and deleting anonymous' confessions.&lt;/p&gt;

&lt;p&gt;Though we can make changes to Database schema and associate that anonymous confession to the user's account, but then the site admin would know who created the confession which contradicts what anonymous confession stands for. So we decided to keep it that way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Content Moderation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An advantage that &lt;a href="https://www.instagram.com/svvv_secrets_and_confessions/"&gt;that Instagram Page&lt;/a&gt; has over our app is content moderation. All the confessions goes through the page admin, and the admin choose which confessions to post and which not. Though that's not the most democratic way of posting confessions, but they have advantage of filtering the abusive and toxic once, which we don't have.&lt;/p&gt;

&lt;p&gt;To tackle this issue, we are creating a TOXIC confessions and comment detector. We are letting the algorithm decide which confessions to keep and which to hide. But there's another catch here, since we don't have enough data of the confessions now, we can't exactly train the model on our data, we have to rely on data from some other source, hence the model will be prepared accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;3rd party dependency for Chat App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As we mentioned, Confessions App has an integrated chat app for which we are using React Chat Engine. One limitations it poses to us, that it deletes the chats in a few days, therefore the users won't be able to see their chats after few days.&lt;/p&gt;

&lt;p&gt;To overcome this issue we are planning to create a custom chat app from scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SEO (Search Engine Optimizations)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are using React library to build the user interface and it's not good with pre-rendering the page, hence our app suffers with SEO because search engines and web crawlers won't be able to see the content of the page as its not pre-rendered on server.&lt;/p&gt;

&lt;p&gt;To overcome this issue, we are planning to change the entire codebase of our project from React.js to Next.js, which is a react based framework and is good at Server Side Rendering and hence SEO.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>firebase</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The best python logging setup</title>
      <author>Julius Colliander Celik</author>
      <pubDate>Tue, 23 Nov 2021 14:43:55 +0000</pubDate>
      <link>https://dev.to/panprices/the-best-python-logging-setup-15j4</link>
      <guid>https://dev.to/panprices/the-best-python-logging-setup-15j4</guid>
      <description>&lt;p&gt;We have an opinionated configuration for logging at Panprices. In our context, it feels like the best logging solution ever, and I couldn't be prouder of our team, who worked hard on figuring out all minor details!&lt;/p&gt;

&lt;p&gt;We want the logs to be structured so that we can easily search and analyze them in GCP. Locally the logs should be human-readable, and exceptions should be easy to parse.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structlog"&gt;
  &lt;/a&gt;
  Structlog
&lt;/h2&gt;

&lt;p&gt;To start, we decided to use &lt;a href="https://www.structlog.org/en/stable/"&gt;structlog&lt;/a&gt;, which is a fantastic logging tool. With that, our logs can be JSON-formatted on our servers but look beautiful in our terminals when working locally.&lt;/p&gt;

&lt;p&gt;My favorite feature with structlog is how you can append any data as key-value pairs, and it won't just clutter up your terminal as structlog highlights your primary message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0pHLkiLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tn30vo6nrrhatjgd9dyn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0pHLkiLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tn30vo6nrrhatjgd9dyn.png" alt="A simple log example using structlog" width="880" height="70"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-this-matter"&gt;
  &lt;/a&gt;
  Why does this matter?
&lt;/h2&gt;

&lt;p&gt;Sometimes we get bugs that are very difficult to debug, and we wish we had more information. We have solved this in some of our services by logging as much information as possible in large blobs. That manifests as large non-prettified JSON blobs that GCP treats as strings.&lt;/p&gt;

&lt;p&gt;When not using a proper structured logger, it's a tradeoff between debugging in the dark and information overload. When we use structlog, we can have fewer but richer log statements that contain explorable JSON payloads. We can look for just the information we need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-love-it-how-do-i-use-it"&gt;
  &lt;/a&gt;
  I love it! How do I use it?
&lt;/h2&gt;

&lt;p&gt;As with any powerful tool, you can configure structlog to infinity. Even though the documentation is vast, it can be challenging to figure out some details. We got stuck on some pitfalls, so here is how our configuration works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;We want to configure structlog at startup, and we do that by calling a function at startup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/helpers/structlog
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;structlog&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;structlog.dev&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;set_exc_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ConsoleRenderer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;structlog.processors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StackInfoRenderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeStamper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_log_level&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;config_structlog&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;add_log_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;StackInfoRenderer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;set_exc_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;TimeStamper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"%Y-%m-%d %H:%M.%S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;ConsoleRenderer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;code&gt;main.py&lt;/code&gt;, we use this helper function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;src.helpers.structlog&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config_structlog&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;structlog&lt;/span&gt;

&lt;span class="n"&gt;config_structlog&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_logger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello world'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#this-is-pretty-but-where-is-my-json"&gt;
  &lt;/a&gt;
  This is pretty, but where is my JSON?
&lt;/h3&gt;

&lt;p&gt;This config will always print out the logs in a human-readable format. But on the server, we want it in plain JSON so that GCP can parse it. To solve this, we use an environment variable (&lt;code&gt;ENVIRONMENT&lt;/code&gt;) that can be set to &lt;code&gt;local&lt;/code&gt; or &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;ENVIRONMENT&lt;/code&gt; is set to &lt;code&gt;production&lt;/code&gt;, we will use a JSON renderer instead of the ConsoleRenderer. We also don't care about timestamps as GCP adds timestamps regardless.&lt;/p&gt;

&lt;p&gt;The last thing we need to add is GCP severity. You can skip this if you don't use GCP. Structlog will print out what type of log it is ('debug', 'info', 'warn', 'error', etc.) under &lt;code&gt;level&lt;/code&gt; while GCP expects it to be uppercase and under &lt;code&gt;severity&lt;/code&gt;. We can solve that by creating our own processor.&lt;/p&gt;

&lt;p&gt;After these changes, our setup-function looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;structlog&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;structlog.dev&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;set_exc_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ConsoleRenderer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;structlog.processors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StackInfoRenderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeStamper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_log_level&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;config_structlog&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Custom renderer when in development:
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PP_ENVIRONMENT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"local"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;add_log_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;StackInfoRenderer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="n"&gt;set_exc_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;TimeStamper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"%Y-%m-%d %H:%M.%S"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;ConsoleRenderer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;add_log_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;StackInfoRenderer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="n"&gt;set_exc_info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;_GCP_severity_processor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;structlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSONRenderer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_GCP_severity_processor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;event_dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Add GCP severity to event_dict.

    Method name is not a perfect one-to-one mapping to GCP severity.
    Here are the avaliable method names:
        - debug
        - info
        - warning
        - warn
        - error
        - err
        - fatal
        - exception
        - critical
        - msg
    """&lt;/span&gt;
    &lt;span class="n"&gt;event_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"severity"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;event_dict&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#oh-no-my-code-broke"&gt;
  &lt;/a&gt;
  Oh no, my code broke!
&lt;/h3&gt;

&lt;p&gt;Even though I try to practice bug-free-driven development, I sometimes get Exceptions that I hadn't expected. I think the default stack trace is okay, but there is a way to get a much more parsable stack trace in your terminal with much more information.&lt;/p&gt;

&lt;p&gt;By just installing &lt;code&gt;rich&lt;/code&gt; (run &lt;code&gt;pip install rich&lt;/code&gt;), you get beautiful, pretty printed exceptions. They look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8nNsUrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18q0hr75tryyt7foztt7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8nNsUrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18q0hr75tryyt7foztt7.png" alt="Pretty printed exception message" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is only one thing to look out for. Ensure that you are in an except-block when you use &lt;code&gt;log.exception()&lt;/code&gt; because otherwise &lt;code&gt;rich&lt;/code&gt; will crash.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install structlog and rich.&lt;/li&gt;
&lt;li&gt;Copy the large code block in a file called &lt;code&gt;src/helpers/structlog.py&lt;/code&gt; and call it before using the logger.&lt;/li&gt;
&lt;li&gt;Enjoy and savor your wonderful logs!&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Can you think of any improvement to our config, or do you feel that I missed something vital? Please leave a comment!&lt;/p&gt;

</description>
      <category>python</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Get lazy with lazygit</title>
      <author>Tahsin</author>
      <pubDate>Tue, 23 Nov 2021 14:32:04 +0000</pubDate>
      <link>https://dev.to/tahsinature/get-lazy-with-lazygit-4h37</link>
      <guid>https://dev.to/tahsinature/get-lazy-with-lazygit-4h37</guid>
      <description>&lt;p&gt;As a developer, my assumption is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You are working with Git literally every hour.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But I wonder, how many times you felt the necessity of a tool that makes the repetitive commands/steps a bit more convenient for the things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seeing the diff&lt;/li&gt;
&lt;li&gt;Quickly stage/unstage files&lt;/li&gt;
&lt;li&gt;Seeing the logs&lt;/li&gt;
&lt;li&gt;A tool to quickly open PR regardless of your SCM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, that's when &lt;a href="https://github.com/jesseduffield/lazygit"&gt;lazygit&lt;/a&gt; comes to the rescue. It's a terminal UI for git commands written in &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just install it following the instruction from the official repository. Then optionally you can set an alias in your shell configuration to quickly open lazygit. In my case, it's &lt;code&gt;lg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_okYtbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue9g5yblnmf4lebbz0pa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_okYtbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue9g5yblnmf4lebbz0pa.png" width="880" height="931"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here are the features I use most of the time from this tool.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stage/unstage like bullet&lt;/li&gt;
&lt;li&gt;Open a PR with a single keypress&lt;/li&gt;
&lt;li&gt;Search through commits&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#stageunstage-like-bullet"&gt;
  &lt;/a&gt;
  Stage/unstage like bullet
&lt;/h3&gt;

&lt;p&gt;Every time performing these type of commands is really a bit painful when a tool like lazygit exists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add foo.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add bar.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git logs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git diff foo.go&lt;/code&gt;
With &lt;a href="https://github.com/jesseduffield/lazygit"&gt;lazygit&lt;/a&gt; you can quickly see through the changed files and stage/unstage them accordingly. As well as, you can see the changes on each file very easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#open-a-pr-with-a-single-keypress"&gt;
  &lt;/a&gt;
  Open a PR with a single keypress
&lt;/h3&gt;

&lt;p&gt;This is my favorite feature of this tool. Because every time I commit something and want to create PR/MR, I have to do a bunch of repetitive clicks here and there. On top of that, sometimes I have to work with GitHub, sometimes GitLab. So even if I wanna use the GitHub CLI tool &lt;a href="https://github.com/github/hub"&gt;&lt;code&gt;hub&lt;/code&gt;&lt;/a&gt; or GitLab CLI tool &lt;a href="https://glab.readthedocs.io/en/latest/"&gt;&lt;code&gt;glab&lt;/code&gt;&lt;/a&gt;, I am ending up using two different tools. So it's nice when I can open PR/MR just by a shortcut within a second or two regardless of what SCM I am on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-through-commits"&gt;
  &lt;/a&gt;
  Search through commits
&lt;/h3&gt;

&lt;p&gt;When I have to search through a bunch of commits, lazygit comes very handily. Altho there are other tools that exist as well. But I end up utilizing this tool a lot in this case it's I don't have to open another tool or even VS Code for this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jesseduffield/lazygit"&gt;lazygit&lt;/a&gt; is open-source. And easy to download and install, so definitely give it a go!&lt;/p&gt;

</description>
      <category>git</category>
      <category>productivity</category>
      <category>terminal</category>
      <category>cli</category>
    </item>
    <item>
      <title>The Difference Between Null and Undefined in JavaScript</title>
      <author>Zahra Khan</author>
      <pubDate>Tue, 23 Nov 2021 14:31:43 +0000</pubDate>
      <link>https://dev.to/zahrakhadijha/the-difference-between-null-and-undefined-in-javascript-51gc</link>
      <guid>https://dev.to/zahrakhadijha/the-difference-between-null-and-undefined-in-javascript-51gc</guid>
      <description>&lt;p&gt;Whenever I encounter &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, I get incredibly confused by how each data type is used in JavaScript.&lt;/p&gt;

&lt;p&gt;I mean, what's the difference? Don't they both express the concept of &lt;strong&gt;nothing&lt;/strong&gt;?&lt;br&gt;
&lt;a href="https://i.giphy.com/media/gCeh1KDeDaxGu8no4A/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gCeh1KDeDaxGu8no4A/giphy.gif" alt="Giphy" width="480" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I decided to do some research to gain a deeper understanding of the two data types. It's helpful to have this knowledge so that you can use them correctly when needed. I've also learned that sometimes, the difference between &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; comes up in interviews. 👀&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;JavaScript has &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive"&gt;7 primitive data types&lt;/a&gt;, two of which are &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Null&lt;/strong&gt; is an assignment value, which means that you can assign the value &lt;code&gt;null&lt;/code&gt; to any variable when you want that variable to be &lt;em&gt;empty&lt;/em&gt;. It is intentionally left blank and will point to an empty value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let hasCat = null;
// nullish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Undefined&lt;/strong&gt; is a variable that exists but hasn't been initialized &lt;em&gt;YET&lt;/em&gt;. Which means that later, I can come back to my variable and assign it a value that it did not have before. So if I declare a variable without a value, it's just considered non-initialized.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let currentJob;
// undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way that I understood both of them is that, yes, they are both very similar in that they both don't have a value that you're trying to access. If you were to compare the two in JavaScript, implicitly they're the same because JavaScript considers them both as empty values. But since they are both different data types, if you compare them explicitly, they will result in a falsey value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;null == undefined; 
// truthy

undefined === undefined;
// falsey

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#analogy"&gt;
  &lt;/a&gt;
  Analogy
&lt;/h2&gt;

&lt;p&gt;Imagine you're moving. You bought a bunch of boxes. You have to pack up your stuff and put them inside of those boxes. But you're disorganized so you forget to label what's in the boxes. You have 5 boxes that are full of things and you have 2 boxes that are left empty. You want to label your boxes but you've already put tape on them, so you tell yourself you'll come back to it later. For now the 5 boxes are TBD. And the 2 boxes are leftover and empty. In code, that would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let fiveBoxes = undefined;
let twoBoxes = null;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The five boxes with a bunch of stuff in them are considered undefined because they have things in them but you don't know what's in it YET. The two boxes left empty are MEANT to not have anything in them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#null-vs-undefined"&gt;
  &lt;/a&gt;
  Null vs. Undefined
&lt;/h2&gt;

&lt;p&gt;The difference between the two data types is:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undefined"&gt;
  &lt;/a&gt;
  Undefined
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Declared&lt;/li&gt;
&lt;li&gt;Uninitialized&lt;/li&gt;
&lt;li&gt;Engine Assigned&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#null"&gt;
  &lt;/a&gt;
  Null
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lack of&lt;/li&gt;
&lt;li&gt;Empty/void&lt;/li&gt;
&lt;li&gt;Non-existent&lt;/li&gt;
&lt;li&gt;User assigned&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go to your console, and type in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;typeof null
typeof undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What do you get?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Null and undefined are not the same. It's important to learn the difference between the two so you avoid any buggy behavior in your code and have a clear understanding of why they exist. It's also cool if you're able to clearly state the difference in an interview too 😉 &lt;/p&gt;

&lt;p&gt;Feel free to hit me up on &lt;a href="https://twitter.com/zahrakhadijha"&gt;Twitter&lt;/a&gt; if you're still confused! Or if you'd just like to chat. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JUT | Read Notebooks in the Terminal</title>
      <author>Waylon Walker</author>
      <pubDate>Tue, 23 Nov 2021 14:27:20 +0000</pubDate>
      <link>https://dev.to/waylonwalker/jut-read-notebooks-in-the-terminal-40hp</link>
      <guid>https://dev.to/waylonwalker/jut-read-notebooks-in-the-terminal-40hp</guid>
      <description>&lt;p&gt;Trying to read a .ipynb file without starting a jupyter server?  jut has you covered.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t8AvImnwor0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;watch the video version of this post on &lt;a href="https://youtu.be/t8AvImnwor0"&gt;YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  install
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;jut&lt;/code&gt; is packaged and available on pypi so installing is as easy as pip installing it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;jut
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb
jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb &lt;span class="nt"&gt;--head&lt;/span&gt; 3
jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb &lt;span class="nt"&gt;--tail&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#what-are-all-the-commands-available-for-jut"&gt;
  &lt;/a&gt;
  what are all the commands available for jut?
&lt;/h2&gt;

&lt;p&gt;Take a look at the help of the &lt;code&gt;jut&lt;/code&gt; cli to explore all the options that it offers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jut &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is some good information on the projects &lt;a href="https://github.com/kracekumar/jut"&gt;readme&lt;/a&gt; as well.&lt;/p&gt;


      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#without-installing"&gt;
  &lt;/a&gt;
  without installing
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;using pipx&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don't want jut cluttering up your venv, or want to save yourself from making a new one, &lt;a href="https://github.com/pypa/pipx"&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt; can manage a separate virual environment for you.  This is one of the biggest selling points for me.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pipx run jut https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb &lt;span class="nt"&gt;--head&lt;/span&gt; 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#nbconvert"&gt;
  &lt;/a&gt;
  nbconvert
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;jut&lt;/code&gt; is the lightweight option that I think will fit the bill often for me, but it just doesn't always cut it.  Mostly if there are images in the notebook or  large output that is hard to read, its time to pull out the medium guns that sit between fulling running jupyter and &lt;code&gt;jut&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;nbconvert
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;nbconvert does not have its own cli, instead it sits under the jupyter command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#converting-to-html"&gt;
  &lt;/a&gt;
  converting to html
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Need to see images, go here!&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb
jupyter nbconvert flame_temperature.ipynb &lt;span class="nt"&gt;--to&lt;/span&gt; html
python &lt;span class="nt"&gt;-m&lt;/span&gt; http.server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note, nb convert does not work with a url, you will need to have the notebook locally.&lt;/p&gt;
&lt;/blockquote&gt;


      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h2&gt;
  &lt;a href="#what-other-options-does-nbconvert-offer"&gt;
  &lt;/a&gt;
  what other options does nbconvert offer?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;nbconvert&lt;/code&gt; also offers a standard help flag that you can access by passing in&lt;br&gt;
the &lt;code&gt;--help&lt;/code&gt; flag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jupyter nbconvert &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#converting-to-markdown"&gt;
  &lt;/a&gt;
  converting to markdown
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nbconvert&lt;/code&gt; also supports converting to many other formats, one option that is quite interesting for use in the terminal is markdown.  We could simply convert the notebook to markdown and cat it out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jupyter nbconvert flame_temperature.ipynb &lt;span class="nt"&gt;--to&lt;/span&gt; maarkdown
&lt;span class="nb"&gt;cat &lt;/span&gt;flameflame_temperature.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h3&gt;
  &lt;a href="#viewing-markdown-with-glow"&gt;
  &lt;/a&gt;
  viewing markdown with glow
&lt;/h3&gt;

&lt;p&gt;Glow is a terminal markdown viewer that looks really good.  These days I use &lt;code&gt;bat&lt;/code&gt; as &lt;code&gt;cat&lt;/code&gt; so I don't get quite as much benefit from &lt;code&gt;glow&lt;/code&gt;, but it still looks pretty good.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;glow flameflame_temperature.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h3&gt;
  &lt;a href="#viewing-markdown-as-slides-with-lookatme"&gt;
  &lt;/a&gt;
  viewing markdown as slides with lookatme
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/d0c-s4vage/lookatme"&gt;lookatme&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lookatme is my slideshow tool of choice.  Creating slides in markdown is such a fantasic user experience,  It realy lets you go from outline to finished slide deck fluidly.  Refactoring the whole thing is also so much easier than with gui tools.  Once you have your idea fleshed out it does make the process of making slides in powerpoint much easier if thats what you need.&lt;/p&gt;

&lt;p&gt;On to nbconvert, without even changing the notebook we can look at the notebook as a slideshow in the terminal.  The only thing that it needs is some markdown headers to start new slides from.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;lookatme flameflame_temperature.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




      
      
      Sorry, your browser doesn't support embedded videos.
     

&lt;h3&gt;
  &lt;a href="#viewing-markdown-with-rich"&gt;
  &lt;/a&gt;
  viewing markdown with rich
&lt;/h3&gt;

&lt;p&gt;Bringing this full circle, lets take a look at the converted markdown with rich.  Here you will notice a surprising similarity to what we saw with &lt;code&gt;jut&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;rich
python &lt;span class="nt"&gt;-m&lt;/span&gt; rich.markdown flame_temperature.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rich still cannot pull directly from a url or display markdown with out being installed and managed by yourself.  Unlike how &lt;code&gt;jut&lt;/code&gt; can leverage &lt;a href="https://github.com/pypa/pipx"&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt; to manage the installation sandbox for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kracekumar/jut"&gt;jut&lt;/a&gt; - View notebooks in the terminal&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nbconvert.readthedocs.io/en/latest/usage.html"&gt;nbconvert&lt;/a&gt; - convert notebooks to other formats&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cantera.org/examples/jupyter/thermo/flame_temperature.ipynb"&gt;flame-temperature notebook&lt;/a&gt; - The sample notebook I used&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/charmbracelet/glow"&gt;glow&lt;/a&gt; - Terminal Markdown viewer&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/d0c-s4vage/lookatme"&gt;lookatme&lt;/a&gt; - Terminal Markdown slideshow tool&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pypa/pipx"&gt;pipx&lt;/a&gt; - Run python cli's without maintianing a virtual environment&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/willmcgugan/rich"&gt;rich&lt;/a&gt; - Beautiful python terminal formatter&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>bash</category>
    </item>
  </channel>
</rss>
