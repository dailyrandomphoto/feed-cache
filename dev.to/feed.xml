<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Conversation Intelligence Quest: Python CI Challenge</title>
      <author>Akanksha Bhasin</author>
      <pubDate>Thu, 20 Jan 2022 18:22:29 +0000</pubDate>
      <link>https://dev.to/symbldotai/conversation-intelligence-quest-python-ci-challenge-5h91</link>
      <guid>https://dev.to/symbldotai/conversation-intelligence-quest-python-ci-challenge-5h91</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Test Out Your Python Skills on Building Conversation Intelligence Functions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hey fellow devs!&lt;/p&gt;

&lt;p&gt;We are thrilled to announce a new &lt;strong&gt;&lt;a href="https://bit.ly/SymblCIQuest-Q1"&gt;Python CI coding challenge&lt;/a&gt;&lt;/strong&gt; on &lt;em&gt;Qualified.io&lt;/em&gt;. Put your Python skills to the test and win some cool prizes and bragging rights by building conversation intelligence functions. In case you are not familiar with what Conversation Intelligence (CI) is, it‚Äôs essentially AI that can understand natural human conversations, explicitly and contextually.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#the-challenge"&gt;
  &lt;/a&gt;
  üìú The Challenge:
&lt;/h2&gt;

&lt;p&gt;In this cool challenge, you will take on the identity of a ‚ÄúPython Agent‚Äô and venture into the mystic land of Convotopia. Combining your Python skills and CI APIs (provided by Symbl.ai), you will build functions for extracting the undiscovered secrets (conversation insights) hidden deep within Convotopia. Prepare yourself to take on greater challenges as you venture deeper into Convotopia. &lt;/p&gt;

&lt;p&gt;The challenge is divided into 5 Levels, with each passing level you gain super powers to unlock the next level and be a Python hero in Convotopia.‚õ≥&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start the challenge here: &lt;a href="https://bit.ly/SymblCIQuest-Q1"&gt;bit.ly/SymblCIQuest-Q1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#time-commitment"&gt;
  &lt;/a&gt;
  ‚è≥ Time Commitment:
&lt;/h2&gt;

&lt;p&gt;The challenge will take approximately 1 hour and 30 mins (or less) to complete all levels, depending on your level of expertise with Python and/or conversation intelligence APIs (provided by Symbl.ai). &lt;/p&gt;

&lt;p&gt;Why should you commit 1.5 hours of your life? You can win some cool prizes completing the challenge (see section below for details).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Approx time for each level:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Level 1.&lt;/strong&gt; Access to Convotopia Land - 20 mins&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Level 2.&lt;/strong&gt; Connect with the locals - 20 mins&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Level 3.&lt;/strong&gt; Are you connecting with the locals? - 20 mins&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Level 4.&lt;/strong&gt; Let the extraction begin -  30 mins&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Level 5.&lt;/strong&gt; What is the ‚ÄòTalk of the town‚Äô in Convotopia? - 30 mins&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--avYgfMDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4w0nffce5avj3tfcpnn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--avYgfMDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4w0nffce5avj3tfcpnn.jpeg" alt="Image description" width="880" height="611"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#who-can-participate"&gt;
  &lt;/a&gt;
  üë®üèª‚Äçüíªüë©üèª‚Äçüíª Who Can Participate:
&lt;/h2&gt;

&lt;p&gt;Our Challenge is open to programmers (or not) from all across the globe. If you are interested in building Python functions and exploring AI functions, this is the challenge for you.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#prizes"&gt;
  &lt;/a&gt;
  üèÜ Prizes:
&lt;/h2&gt;

&lt;p&gt;Complete the challenge and win some cool prizes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;$50 Amazon gift card -&lt;/strong&gt; The first 4 participants to complete the challenge with 100% by 15th February.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;$25 Amazon gift card -&lt;/strong&gt; not among the first 4 to complete the challenge or didn‚Äôt score 100%? No worries, every week, between 15th February to 30th March we will randomly select a winner who completed 80% or more of the challenge to win.&lt;br&gt;
Symbl.ai Developer Swag  - first 50 participants who complete 80% of the challenge by March 30th. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Certificate of completion&lt;/strong&gt; - All participants who successfully complete the challenge, will receive a certificate. (bragging rights to share on social).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#how-to-participate"&gt;
  &lt;/a&gt;
  üî• How to participate?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Head over to the Challenge to register yourselves &amp;amp; get started - &lt;a href="https://bit.ly/SymblCIQuest-Q1"&gt;Link&lt;/a&gt; ‚úîÔ∏è&lt;/li&gt;
&lt;li&gt;Join our &lt;a href="https://bit.ly/symbldotai-slack"&gt;slack channel&lt;/a&gt; üö©&lt;/li&gt;
&lt;li&gt;Publish a social media post about your participation and experience, and tag &lt;a href="https://twitter.com/symbldotai"&gt;@symbldotai&lt;/a&gt; and &lt;a href="https://twitter.com/SymblDev"&gt;@symbldev&lt;/a&gt; .üì¢&lt;/li&gt;
&lt;li&gt;Add the #BuildWithSymbl #SymblQuest hashtag to your posts and share it with the community. ‚ú®&lt;/li&gt;
&lt;li&gt;Fill in the &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSfrNCuqIpuxMhe2_0LxfYbCZtvue0cTTfly-5v-_ymqt3Ktgw/viewform"&gt;Challenge completion swag form&lt;/a&gt;.üéÅ&lt;/li&gt;
&lt;/ol&gt;



&lt;h2&gt;
  &lt;a href="#join-our-symblai-community"&gt;
  &lt;/a&gt;
  ü§ó Join our Symbl.ai Community!
&lt;/h2&gt;

&lt;p&gt;Become a part of our &lt;a href="https://bit.ly/symbldotai-slack"&gt;Slack community&lt;/a&gt; and do follow us on &lt;a href="https://twitter.com/Symbldotai"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/company/symblai/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCpqOyNdFI0kASCZL-eCnkcA"&gt;Youtube&lt;/a&gt;, &lt;a href="https://github.com/symblai/"&gt;Github&lt;/a&gt;, &lt;a href="https://www.facebook.com/symbldotai"&gt;Facebook&lt;/a&gt; and &lt;a href="https://www.instagram.com/symbldotai/"&gt;Instagram&lt;/a&gt;! ‚ù§Ô∏è&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact-us"&gt;
  &lt;/a&gt;
  üì© Contact us
&lt;/h2&gt;

&lt;p&gt;If you have any questions, please don't hesitate to drop me an email at (&lt;a href="mailto:akanksha.bhasin@symbl.ai"&gt;akanksha.bhasin@symbl.ai&lt;/a&gt;) &lt;/p&gt;



&lt;p&gt;Happy Hacking!&lt;br&gt;
May the source be with you! ‚úäüèª&lt;/p&gt;

&lt;p&gt;‚úçüèΩ By &lt;a href="https://twitter.com/Akii_20"&gt;Akanksha Bhasin&lt;/a&gt;&lt;br&gt;
   DevRel &lt;a class="mentioned-user" href="https://dev.to/symbl"&gt;@symbl&lt;/a&gt;.ai&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/d4zHnLjdy48Cc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/d4zHnLjdy48Cc/giphy.gif" width="500" height="365"&gt;&lt;/a&gt;   &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>ai</category>
      <category>api</category>
    </item>
    <item>
      <title>GitHub como Ferramenta Organizacional</title>
      <author>Victor Campos</author>
      <pubDate>Thu, 20 Jan 2022 17:31:04 +0000</pubDate>
      <link>https://dev.to/v360/github-como-ferramenta-organizacional-18b</link>
      <guid>https://dev.to/v360/github-como-ferramenta-organizacional-18b</guid>
      <description>&lt;p&gt;O nosso c√≥digo dorme hoje dentro do Github e nos √∫ltimos seis meses passamos a nos organizar em volta dele.&lt;/p&gt;

&lt;p&gt;Faz todo sentido para a gente, quanto mais pr√≥ximo a empresa est√° do nosso c√≥digo, mais f√°cil fica a comunica√ß√£o, identifica√ß√£o de problemas e oportunidades.&lt;/p&gt;

&lt;p&gt;‚Äî‚Äî&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reposit√≥rio de c√≥digo&lt;/strong&gt;&lt;br&gt;
Come√ßamos a usar o Github como todos come√ßam, usando para guardar o nosso c√≥digo.&lt;/p&gt;

&lt;p&gt;Al√©m dele, fizemos fork de algumas gemas que tivemos que fazer alguma modifica√ß√£o para atender nosso interesse.&lt;/p&gt;

&lt;p&gt;Essas gemas ficam em reposit√≥rio aberto, enquanto nosso c√≥digo permanece fechado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Issues&lt;/strong&gt;&lt;br&gt;
Todo atendimento de Dev ocorre por meio de issues, as mesmas s√£o divididas em melhorias, bugs ou no code.&lt;/p&gt;

&lt;p&gt;Uma ferramenta que o Github tem, na qual nos mudou de patamar, foi a possibilidade de templates de issues. Com isso, quando qualquer pessoa da empresa quer abrir uma issue, ela j√° sabe os pontos importantes que precisa preencher.&lt;/p&gt;

&lt;p&gt;O legal √© que depois de um tempo toda a empresa mudou para issues. E quando alguma pessoa nova entra por exemplo, √© criada uma issue de onboard.&lt;/p&gt;

&lt;p&gt;Assim todo mundo tem visibilidade do que cada time tem de tarefa, aumentando a viabilidade.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Projects&lt;/strong&gt;&lt;br&gt;
Abandonamos o Trello e migramos todos os nosso boards para o Projects.&lt;/p&gt;

&lt;p&gt;As issues deram visibilidade de quais tarefas existiam para cada time. No projects temos a ideia de qual etapa cada issue est√° no nosso processo de prioriza√ß√£o.&lt;/p&gt;

&lt;p&gt;Assim, evitamos a necessidade de reuni√µes para ficar perguntando onde cada coisa est√°, e podemos usar as reuni√µes para focar em como podemos ajudar uns aos outros a mover a issue para frente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actions&lt;/strong&gt;&lt;br&gt;
Tamb√©m movemos todo nosso pipe de CI para dentro do Github.&lt;/p&gt;

&lt;p&gt;Assim, o mesmo ficou integrado dentro do nosso processo, sendo executado tanto quando adicionamos uma label espec√≠fica, quanto por commits.&lt;/p&gt;

&lt;p&gt;E tamb√©m, geramos os nossos relat√≥rios de releases semanais para informar a empresa tudo que entrou no produto na semana.&lt;/p&gt;

&lt;p&gt;Qualquer pessoa do time tem acesso, por exemplo, a deploys que funcionaram ou quebraram, testes que n√£o passaram, etc‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pull Request&lt;/strong&gt;&lt;br&gt;
O cora√ß√£o aonde o Dev faz suas tarefas. Todo pull request tem que estar vinculado a uma ou mais issues ao qual vai fechar/avan√ßar.&lt;/p&gt;

&lt;p&gt;Ao ser marcado como pronto para revis√£o, o pr√≥prio Github atribui ele para algum outro Dev revisar, n√£o necessariamente da mesma squad.&lt;/p&gt;

&lt;p&gt;Assim, al√©m de melhorar a qualidade do que est√° sendo entregue, pois a modifica√ß√£o tem que ser simples para qualquer um entender, garantimos que todo o time tenha algum conhecimento de todas as partes do nosso produto.&lt;/p&gt;

&lt;p&gt;Muitas vezes as melhores decis√µes de c√≥digo v√™m de pessoas que est√£o mais afastadas do problema, pois essas tendem a questionar mais as decis√µes tomadas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github CLI&lt;/strong&gt;&lt;br&gt;
Infelizmente o insight do Github √© bem ruim. Mas resolvemos isso adicionando labels necess√°rias nas issues e um pouco de c√≥digo para pegar essas informa√ß√µes pela api do Github.&lt;/p&gt;

&lt;p&gt;Dessa maneira, conseguimos tirar m√©tricas de velocidade do time, quantidade de bugs, etc.&lt;/p&gt;

&lt;p&gt;E assim, podemos saber se as mudan√ßas organizacionais que tomamos est√£o tendo efeitos positivos ou negativos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discussion&lt;/strong&gt;&lt;br&gt;
Essa ferramenta acabou de deixar fase beta do Github.&lt;/p&gt;

&lt;p&gt;Ela √© um f√≥rum interno do mesmo, e usamos para registrar todas as discuss√µes que temos internamente.&lt;/p&gt;

&lt;p&gt;Quando algo come√ßa a se prolongar no Discord, migramos para l√°.&lt;/p&gt;

&lt;p&gt;At√© para ser f√°cil pessoas novas entenderem o contexto do porqu√™ as coisas hoje s√£o como s√£o.&lt;/p&gt;

&lt;p&gt;Tamb√©m registramos resumo de livros que gostamos, e como resolvemos algum problema mais s√©rio dos nossos clientes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wiki&lt;/strong&gt;&lt;br&gt;
Aqui mora toda a nossa documenta√ß√£o, desde documenta√ß√£o de como usar o produto, responder a certos questionamentos do cliente, at√© nossa boas pr√°ticas de programa√ß√£o.&lt;/p&gt;

&lt;p&gt;Tamb√©m usamos nossa wiki para o nosso processo de onboard. Temos documentado nela (e gosto de acreditar que cada pessoa que entra melhora esse processo) o que se espera que a pessoa saiba a cada semana at√© conseguir chegar em um ponto que consegue realizar as primeiras atividades sozinha.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Futuro&lt;/strong&gt;&lt;br&gt;
Quem sabe n√£o adotamos no futuro o editor de c√≥digo que o Github acabou de lan√ßar?&lt;/p&gt;

&lt;p&gt;O que eu posso falar √©, cada dia que passa sinto menos necessidade de ter outras ferramentas de gest√£o de time, produto e c√≥digo, al√©m do pr√≥prio Github.&lt;/p&gt;

</description>
      <category>github</category>
      <category>startup</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to convert a number to a string in TypeScript</title>
      <author>Andrew Hansen</author>
      <pubDate>Thu, 20 Jan 2022 17:27:08 +0000</pubDate>
      <link>https://dev.to/arahansen/how-to-convert-a-number-to-a-string-in-typescript-3a8p</link>
      <guid>https://dev.to/arahansen/how-to-convert-a-number-to-a-string-in-typescript-3a8p</guid>
      <description>&lt;p&gt;You're writing a TypeScript application and you hit an error like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Argument of type 'string' is not assignable to parameter of type 'number'.(2345)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could happen for a number of reasons. For example, I often run into this when reading a value from an input field. I intend the user to input a number in a form field field but the value I get back is a string (even when the input is &lt;code&gt;type="number"&lt;/code&gt;!).&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user input value&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12345&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isMillenial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1980&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;millenial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isMillenial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt; &lt;span class="cm"&gt;/* error! */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To fix this I need to add a conversion that converts a string into a number. This is known as &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Type_Conversion"&gt;typecasting, or type coercion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TypeScript is a superset of JavaScript which means all JavaScript applications are also valid TypeScript applications. This means the most straight forward way to fix this is to use methods that JavaScript provides us.&lt;/p&gt;

&lt;p&gt;To coerce a string into a number, we can wrap our value in one of several functions: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat"&gt;&lt;code&gt;parseInt&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt"&gt;&lt;code&gt;parseFloat&lt;/code&gt;&lt;/a&gt;, or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number"&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt; (&lt;a href="https://stackoverflow.com/a/17106702"&gt;this stackoverflow answer&lt;/a&gt; has a great breakdown of the differences). &lt;/p&gt;

&lt;p&gt;For our &lt;code&gt;birthYear&lt;/code&gt; example, we want &lt;code&gt;parseInt&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12345&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthYearNum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript has a built-in type definition for &lt;code&gt;parseInt&lt;/code&gt; which you can inspect in many IDEs by hovering over the function call. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;radix&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notably the return type is &lt;em&gt;always&lt;/em&gt; a number. If we update our example, the error goes away!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user input value&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;12345&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthYearNum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isMillenial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1980&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;millenial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isMillenial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYearNum&lt;/span&gt; &lt;span class="cm"&gt;/* no more error! */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h2&gt;

&lt;p&gt;When dealing with user input we should assume we could receive &lt;strong&gt;any&lt;/strong&gt; string. It's possible we receive something that can't be parsed into a valid number:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthYearNum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// NaN!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;parseInt&lt;/code&gt; will not throw an error but return a value of &lt;code&gt;NaN&lt;/code&gt; (or, Not a Number). In TypeScript (and JavaScript) &lt;code&gt;typeof NaN === 'number'&lt;/code&gt;. So, even though we are dealing with an invalid input TypeScript will not give us a type error. Our code will need to handle this explicitly which we can do with the &lt;code&gt;Number.isNaN&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthYearNum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// NaN!&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYearNum&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid birthYear!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// or, show an error to the user&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-caution-on-using-typescript-type-assertions"&gt;
  &lt;/a&gt;
  A caution on using TypeScript type assertions
&lt;/h2&gt;

&lt;p&gt;TypeScript provides a (seemingly) helpful feature with the &lt;code&gt;as&lt;/code&gt; keyword. This feature is known as &lt;a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions"&gt;type assertion&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Rather than using something like &lt;code&gt;parseInt&lt;/code&gt; you might be tempted to do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;millenial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isMillenial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript will complain about this and suggest a workaround:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Conversion of type 'string' to type 'number' may be a mistake
because neither type sufficiently overlaps with the other. 
If this was intentional, convert the expression to 
'unknown' first. (2352)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which would reasonably lead you to implement that workaround:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;millenial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isMillenial&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, it's important to keep in mind that TypeScript compiles down to JavaScript to produce an executable program. In doing so, all type-related information is compiled away. You're effectively left with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;millenial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isMillenial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthYear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though we used &lt;code&gt;as&lt;/code&gt; to tell TypeScript to treat &lt;code&gt;birthYear&lt;/code&gt; as a &lt;code&gt;number&lt;/code&gt;, the behavior of our program doesn't actually change. All you've really done is tell TypeScript: "I know what I'm doing better than you do."&lt;/p&gt;

&lt;p&gt;There are some complex scenarios where this might be useful (which we will save for another day). However, you should strive to produce the correct type using proper runtime type conversion methods (like &lt;code&gt;parseInt&lt;/code&gt;) whenever possible. Otherwise you are opting out of the biggest benefits of TypeScript.&lt;/p&gt;

</description>
      <category>typescript</category>
    </item>
    <item>
      <title>Questions to ask your client who wants an e-commerce website.</title>
      <author>lucidpolygon</author>
      <pubDate>Thu, 20 Jan 2022 17:04:04 +0000</pubDate>
      <link>https://dev.to/lucidpolygon/questions-to-ask-your-client-who-wants-an-e-commerce-website-43kj</link>
      <guid>https://dev.to/lucidpolygon/questions-to-ask-your-client-who-wants-an-e-commerce-website-43kj</guid>
      <description>&lt;p&gt;A lot of times, clients come with a vague one-line statement - I want to build an online/e-commerce store.&lt;/p&gt;

&lt;p&gt;Mostly, clients themselves might not have thought about all the aspects of an e-commerce store.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a list of questions to ask yourself to get a clear idea of what does it mean to start an e-commerce website.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What products are you going to sell?&lt;/li&gt;
&lt;li&gt;Who are you selling your products to? What is your target market? - countries / region.&lt;/li&gt;
&lt;li&gt;Do you have the product information ready in an excel file?

&lt;ul&gt;
&lt;li&gt;Name of Product&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;Price&lt;/li&gt;
&lt;li&gt;Image for the product&lt;/li&gt;
&lt;li&gt;This product belongs to which category/categories?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How many products? Rough estimate.&lt;/li&gt;
&lt;li&gt;What are your main categories? Think of it as the main menu on a website.&lt;/li&gt;
&lt;li&gt;Are your images ready or does it required to be resized/worked on by a graphic designer?&lt;/li&gt;
&lt;li&gt;Do you have the products in stock or is it a dropshipping business?&lt;/li&gt;
&lt;li&gt;Do you want your website to be in a single language or multiple languages?&lt;/li&gt;
&lt;li&gt;Do you want your website to show prices in the same currency to all the users in the world? Or should it change currency based on the country of the users?&lt;/li&gt;
&lt;li&gt;How are you planning to receive money? - Cash on Delivery/Card Payment/ Wallets (Payment Gateway).&lt;/li&gt;
&lt;li&gt;If Payment gateway, do you have business documentation such as Trade License?&lt;/li&gt;
&lt;li&gt;How are you going to ship your products?&lt;/li&gt;
&lt;li&gt;Do you accept returns? What is the process if a customer wants to return your product?&lt;/li&gt;
&lt;li&gt;Do you sell items as pre-orders?&lt;/li&gt;
&lt;li&gt;Once the website is built, who will manage it? Do you have any technical staff or yourself?&lt;/li&gt;
&lt;li&gt;Are there any particular features that you would like to have?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I ask these questions to all my clients as a first thing. This helps me define the scope of the project and set expectations for myself and the client right.&lt;/p&gt;

&lt;p&gt;Are there any questions you would like to ask to further clarify the scope of the e-commerce project?&lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>shopify</category>
      <category>woocommerce</category>
      <category>startup</category>
    </item>
    <item>
      <title>Building A Game Yahtzee</title>
      <author>Web.Developer.io</author>
      <pubDate>Thu, 20 Jan 2022 16:59:39 +0000</pubDate>
      <link>https://dev.to/developerioweb/building-a-game-yahtzee-4f9d</link>
      <guid>https://dev.to/developerioweb/building-a-game-yahtzee-4f9d</guid>
      <description>&lt;p&gt;&lt;strong&gt;This Game is a Part of the Colt Steele React Course&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yahtzee is a chance-and-strategy dice rolling game. A game is played over 13 rounds.&lt;/p&gt;

&lt;p&gt;Each round, the player rolls five 6-sided dice. They may click on any number of dice to ‚Äúfreeze‚Äù or ‚Äúunfreeze‚Äù them (frozen dice are displayed in a different color). They may re-roll the unfrozen dice up to 2 times.&lt;/p&gt;

&lt;p&gt;Each round, they must assign their dice to any unclaimed scoring category. Each category scores differently.&lt;/p&gt;

&lt;p&gt;After 13 rounds, the game is over, and the player‚Äôs score is the total of each scoring category.&lt;/p&gt;

&lt;p&gt;The Game Look Like This üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cV8rD53j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nun566ueknsu8r8eyyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cV8rD53j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nun566ueknsu8r8eyyx.png" alt="Yahtzee" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have not Built it from the Scratch I was provided with the Starter Code (Most of the Part was Done already).&lt;/p&gt;

&lt;p&gt;As an Exercise I have to Fix The problem and Understand the App Flow.&lt;/p&gt;

&lt;p&gt;Have a Look at the Code üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Developer-io-web/Yahtzee"&gt;https://github.com/Developer-io-web/Yahtzee&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-i-have-learnt-by-doing-this-project"&gt;
  &lt;/a&gt;
  Things I have Learnt By Doing This Project
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Actually This Game only test Your Knowledge of Props , State and Function But also It Forces u to be use Your Logical Ability cuz there are many things that were hard to understand and By only seeing the code u couldn't tell what a particular function is doing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So My advice is to take Copy and pen with you when You doing any Project or Exercise to get it done fast .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I have learnt&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.) &lt;code&gt;Sets&lt;/code&gt; = Set is a Collection of the Unique Value , Each value can only be appeared in the Set&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Methods of Sets &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a.) new Set() = It is used to Create New set&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;//set = [1,2,3,4,5,6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can pass an Array to &lt;code&gt;new Set()&lt;/code&gt; Method.&lt;/p&gt;

&lt;p&gt;b.) add() = Adds a New element to the Set&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;c.) has() = Return true if a value exists in the Set&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Return True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;And there is also a Set Property called size&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;size&lt;/code&gt; = Returns the Number of elements in a set&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also there are many Methods of Set But u can always use the Google whenever u are Stuck No need to Cram all these u will learn these as u start using them üòâ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2.) &lt;code&gt;For Each&lt;/code&gt; Method &lt;br&gt;
I already knew about this method but use it very rarely .&lt;br&gt;
The &lt;code&gt;forEach()&lt;/code&gt; method calls a function for &lt;br&gt;
each element in an array.&lt;/p&gt;

&lt;p&gt;For Example -&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;//It will console.log the whole array.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.) &lt;code&gt;Array.from()&lt;/code&gt; Method&lt;/p&gt;

&lt;p&gt;The from() method creates a new array&lt;/p&gt;

&lt;p&gt;When applied to a string, each word gets converted to an array&lt;br&gt;
element in the new array.&lt;br&gt;
&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It Return a newly created Array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello How are you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//The string will get converted to an array.  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can pass in it anything , it will Created a Array for u.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//Array is Defined but with undefined values u can fill the values later.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy Coding ‚ò∫Ô∏è&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>kube-hunter : Kubernetes Security</title>
      <author>Anuroop Prakash P</author>
      <pubDate>Thu, 20 Jan 2022 16:55:11 +0000</pubDate>
      <link>https://dev.to/anuroop08/kube-hunter-k8s-security-3ihh</link>
      <guid>https://dev.to/anuroop08/kube-hunter-k8s-security-3ihh</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/aquasecurity/kube-hunter"&gt;&lt;em&gt;Kube-hunter&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; - &lt;em&gt;An open source tool that hunts for security issues in your Kubernetes clusters..&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Kube-hunter hunts for security weaknesses in Kubernetes clusters. This tool was developed to increase awareness and visibility for security issues in Kubernetes environments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kube-hunter Github&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/aquasecurity/kube-hunter"&gt;https://github.com/aquasecurity/kube-hunter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ways to Run kube-hunter&lt;/strong&gt;&lt;br&gt;
Three Ways for deploying kube-hunter. On Pod, On Machine, Container.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Pod&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
We also run kube-hunter in pod mode in the cluster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the kube-hunter github repo and deploy the job.yaml&lt;/li&gt;
&lt;li&gt;Find the pod name&lt;/li&gt;
&lt;li&gt;View the test results with  kubectl logs
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl create -f https://raw.githubusercontent.com/aquasecurity/kube-hunter/main/job.yaml
kubectl describe job kube-hunter
kubectl logs &amp;lt;pod name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root@Aprakash:~# kubectl logs kube-hunter-59x7z
2022-01-20 06:54:05,667 INFO kube_hunter.modules.report.collector Started hunting
2022-01-20 06:54:05,672 INFO kube_hunter.modules.report.collector Discovering Open Kubernetes Services
2022-01-20 06:54:05,676 INFO kube_hunter.modules.report.collector Found vulnerability "Read access to pod's service account token" in Local to Pod (kube-hunter-59x7z)
2022-01-20 06:54:05,676 INFO kube_hunter.modules.report.collector
  Nodes
+-------------+------------+
| TYPE        | LOCATION   |
+-------------+------------+
| Node/Master | 10.244.1.1 |
+-------------+------------+
| Node/Master | 10.240.0.5 |
+-------------+------------+
| Node/Master | 10.240.0.4 |
+-------------+------------+
| Node/Master | 10.0.0.1   |
+-------------+------------+

Vulnerabilities
For further information about a vulnerability, search its ID in:
https://avd.aquasec.com/
+--------+----------------------+----------------------+----------------------+----------------------+----------------------+
| ID     | LOCATION             | MITRE CATEGORY       | VULNERABILITY        | DESCRIPTION          | EVIDENCE             |
+--------+----------------------+----------------------+----------------------+----------------------+----------------------+
| None   | Local to Pod (kube-  | Lateral Movement //  | CAP_NET_RAW Enabled  | CAP_NET_RAW is       |                      |
|        | hunter-59x7z)        | ARP poisoning and IP |                      | enabled by default   |                      |
|        |                      | spoofing             |                      | for pods.            |                      |
|        |                      |                      |                      |     If an attacker   |                      |
|        |                      |                      |                      | manages to           |                      |
|        |                      |                      |                      | compromise a pod,    |                      |
|        |                      |                      |                      |     they could       |                      |
|        |                      |                      |                      | potentially take     |                      |
|        |                      |                      |                      | advantage of this    |                      |
|        |                      |                      |                      | capability to        |                      |
|        |                      |                      |                      | perform network      |                      |
|        |                      |                      |                      |     attacks on other |                      |
|        |                      |                      |                      | pods running on the  |                      |
|        |                      |                      |                      | same node            |                      |
+--------+----------------------+----------------------+----------------------+----------------------+----------------------+
| KHV002 | 10.0.0.1:443         | Initial Access //    | K8s Version          | The kubernetes       | v1.21.7              |
|        |                      | Exposed sensitive    | Disclosure           | version could be     |                      |
|        |                      | interfaces           |                      | obtained from the    |                      |
|        |                      |                      |                      | /version endpoint    |                      |
+--------+----------------------+----------------------+----------------------+----------------------+----------------------+
| KHV003 | Local to Pod (kube-  | Discovery //         | Azure Metadata       | Access to the Azure  | cidr: 10.240.0.0/16  |
|        | hunter-59x7z)        | Instance Metadata    | Exposure             | Metadata API exposes |                      |
|        |                      | API                  |                      | information about    |                      |
|        |                      |                      |                      | the machines         |                      |
|        |                      |                      |                      | associated with the  |                      |
|        |                      |                      |                      | cluster              |                      |
+--------+----------------------+----------------------+----------------------+----------------------+----------------------+
| KHV005 | 10.0.0.1:443         | Discovery // Access  | Access to API using  | The API Server port  | b'{"kind":"APIVersio |
|        |                      | the K8S API Server   | service account      | is accessible.       | ns","versions":["v1" |
|        |                      |                      | token                |     Depending on     | ],"serverAddressByCl |
|        |                      |                      |                      | your RBAC settings   | ientCIDRs":[{"client |
|        |                      |                      |                      | this could expose    | CIDR":"0.0.0.0/0","s |
|        |                      |                      |                      | access to or control | ...                  |
|        |                      |                      |                      | of your cluster.     |                      |
+--------+----------------------+----------------------+----------------------+----------------------+----------------------+
| None   | Local to Pod (kube-  | Credential Access // | Access to pod's      | Accessing the pod's  | ['/var/run/secrets/k |
|        | hunter-59x7z)        | Access container     | secrets              | secrets within a     | ubernetes.io/service |
|        |                      | service account      |                      | compromised pod      | account/namespace',  |
|        |                      |                      |                      | might disclose       | '/var/run/secrets/ku |
|        |                      |                      |                      | valuable data to a   | bernetes.io/servicea |
|        |                      |                      |                      | potential attacker   | ...                  |
+--------+----------------------+----------------------+----------------------+----------------------+----------------------+
| KHV050 | Local to Pod (kube-  | Credential Access // | Read access to pod's | Accessing the pod    | eyJhbGciOiJSUzI1NiIs |
|        | hunter-59x7z)        | Access container     | service account      | service account      | ImtpZCI6Im5VRURSVTBh |
|        |                      | service account      | token                | token gives an       | R01YZzdPY2sxNXF2T1Ez |
|        |                      |                      |                      | attacker the option  | cDM5dmtlTkZsY29GdDg4 |
|        |                      |                      |                      | to use the server    | MG12M2cifQ.eyJhdWQiO |
|        |                      |                      |                      | API                  | ...                  |
+--------+----------------------+----------------------+----------------------+----------------------+----------------------+
root@Aprakash:~/security#
root@Aprakash:~/security#
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;strong&gt;On Machine&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install kube-hunter
kube-hunter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From source&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/aquasecurity/kube-hunter.git
cd ./kube-hunter
pip install -r requirements.txt
python3 kube_hunter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;strong&gt;Container&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -it --rm --network host aquasec/kube-hunter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For further information about a vulnerability, search the vulnerability ID in:&lt;br&gt;
&lt;a href="https://avd.aquasec.com"&gt;https://avd.aquasec.com&lt;/a&gt;. Remediation steps for each vulnerability is listed in the document.  &lt;a href="https://aquasecurity.github.io/kube-hunter/kbindex.html"&gt;&lt;em&gt;All vulnerabilies KB&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uySjJ8lN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ivaupt1y1pr899bci0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uySjJ8lN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ivaupt1y1pr899bci0r.png" alt="kube-hunter" width="483" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!!&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>security</category>
      <category>kubehunter</category>
      <category>devops</category>
    </item>
    <item>
      <title>Next JS ‚Äì optimize blog posts</title>
      <author>Kasper Aamodt</author>
      <pubDate>Thu, 20 Jan 2022 16:38:06 +0000</pubDate>
      <link>https://dev.to/kasperaamodt/next-js-optimize-blog-posts-183m</link>
      <guid>https://dev.to/kasperaamodt/next-js-optimize-blog-posts-183m</guid>
      <description>&lt;p&gt;This website is built with Next JS and WordPress. I used WP for the blog part of the website, as there is no need to reinvent the wheel when it comes to a CMS. I worked with WP long before starting with Next JS, so it was a natural choice. &lt;/p&gt;

&lt;p&gt;Many writers, including me, use images in blogs posts. So when you import that blog post into Next, most people use dangerouslySetInnerHTML to render all the HTML. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div dangerouslySetInnerHTML={{__html: post.content}} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This usually works well, but it could be better. The problem here is that all of the images in the content will be in a standard &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; tag, which is not recommended in Next JS. In Next JS, you should use the Image component from ‚Äònext/image‚Äô, which optimizes images to make them smaller in size, therefore reducing the page size and ultimately the loading times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;html-react-parser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, how can you fix this? Well, as the heading suggests, html-react-parser. The parser converts an HTML string into one or more React elements. We can use this package instead of dangerouslySetInnerHTML to parse the HTML from our post and replace content when it is being parsed. Here is how you do it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the parser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i html-react-parser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Import and use&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Parsing the HTML string with the parse function, which is taking in the HTML string and options as parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;br&gt;
    {parse(blog.content, replaceImage)}&lt;br&gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The options I pass to the parser, to target the img tag and replace it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const replaceImage = {&lt;br&gt;
    replace: ({ name, attribs, children }) =&amp;gt; {&lt;br&gt;
        if (name === "figure" &amp;amp;&amp;amp; /wp-block-image/.test(attribs.class)) {&lt;br&gt;
            return &amp;lt;&amp;gt;{domToReact(children, replaceImage)}&amp;lt;/&amp;gt;;&lt;br&gt;
        }&lt;br&gt;
        if (name === "img") {&lt;br&gt;
            return (&lt;br&gt;
                &amp;lt;Image&lt;br&gt;
                    src={attribs.src}&lt;br&gt;
                    width={attribs.width}&lt;br&gt;
                    height={attribs.height}&lt;br&gt;
                    alt={attribs.alt ? attribs.alt : "Blog post image"}&lt;br&gt;
                /&amp;gt;&lt;br&gt;
            );&lt;br&gt;
        }&lt;br&gt;
    }&lt;br&gt;
};&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now all inserted images in the blog post use the Image component.&lt;br&gt;
&lt;a href="https://gist.github.com/kasperaamodt/055c6203d8761b4500c5fb108f0e4f03"&gt;Full Gist.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, why should you do this? As stated above, it will optimize all images in posts, leading to faster load times, and ultimately, better SEO. Of course, the package itself does increase the bundle size. But the slight increase that adds, compared to the savings on image sizes, is a net saving in bundle size.&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://aamodt.xyz/blog/next-js-optimize-blog-posts"&gt;aamodt.xyz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React Basics!</title>
      <author>Ansub Khan</author>
      <pubDate>Thu, 20 Jan 2022 16:10:30 +0000</pubDate>
      <link>https://dev.to/ansub/react-basics-3j4i</link>
      <guid>https://dev.to/ansub/react-basics-3j4i</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  üí≠ What is React?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; A UI library developed by Facebook&lt;/li&gt;
&lt;li&gt;creates interactive, stateful, and reusable components&lt;/li&gt;
&lt;li&gt; it uses Virtual DOM&lt;/li&gt;
&lt;li&gt;example: Instagram .com is completely written in React&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#features-is-react"&gt;
  &lt;/a&gt;
  ‚ú® Features is React?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; it makes quick and responsive apps&lt;/li&gt;
&lt;li&gt;uses Virtual DOM&lt;/li&gt;
&lt;li&gt;Does Server-Side Rendering&lt;/li&gt;
&lt;li&gt;Single Way Data Flow
*Open Source&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-use-react"&gt;
  &lt;/a&gt;
  üòå Why Use React?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Simple and easy to learn&lt;/li&gt;
&lt;li&gt;it is fast, simple, and scalable&lt;/li&gt;
&lt;li&gt;it uses a component-based approach&lt;/li&gt;
&lt;li&gt;no need for direct DOM Manipulation &lt;/li&gt;
&lt;li&gt;Increases App Performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#limitations-of-react"&gt;
  &lt;/a&gt;
  ü•∫ Limitations Of React
&lt;/h3&gt;

&lt;p&gt;everything has some limitations and React is not an exception! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is very rapidly evolving which might get difficult for some developers to keep up.&lt;/li&gt;
&lt;li&gt; Inline HTML and JSX confuses a lot of people.&lt;/li&gt;
&lt;li&gt;Size of the Library is quite large.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://twitter.com/justansub"&gt;Follow Me On Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Creating a Gradient Component in React From Design Tokens</title>
      <author>Michael Mangialardi</author>
      <pubDate>Thu, 20 Jan 2022 16:08:45 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/creating-a-gradient-component-in-react-from-design-tokens-kll</link>
      <guid>https://dev.to/michaelmangial1/creating-a-gradient-component-in-react-from-design-tokens-kll</guid>
      <description>&lt;p&gt;If you're not familiar with &lt;a href="https://www.michaelmang.dev/blog/introduction-to-design-tokens"&gt;design tokens&lt;/a&gt;, they are simply representations of design specifications in code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eq7iWoVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q5cbu96xnlznjr6ou0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eq7iWoVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q5cbu96xnlznjr6ou0w.png" alt="Creating a Gradient Component in React From Design Tokens" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By "representations," it is meant that they are key-value pairs that represent design specifications.&lt;/p&gt;

&lt;p&gt;Generally speaking, there are two types of design tokens:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;"Simple" tokens - Representations of valid &lt;em&gt;values&lt;/em&gt; of the design system. These tokens usually cover the colors, typography, spacing, etc. of the design system (i.e. &lt;code&gt;color-red-500&lt;/code&gt;, &lt;code&gt;font-bold&lt;/code&gt;, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Component" tokens - Representations of the design specs for a component/element (i.e. &lt;code&gt;component-button-background-color&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi-c4X68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk9x7g2ps2p3gysf2z4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wi-c4X68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk9x7g2ps2p3gysf2z4k.png" alt="Creating a Gradient Component in React From Design Tokens" width="880" height="763"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a &lt;a href="https://www.michaelmang.dev/blog/managing-and-exporting-design-tokens-with-style-dictionary"&gt;design tokens pipeline&lt;/a&gt;, you can write out design tokens in JSON format, and then translate those "raw"/JSON design tokens into formatted tokens (JavaScript modules, CSS variables, SASS variables, etc.).&lt;/p&gt;

&lt;p&gt;With that background in mind, imagine that a design system had "simple" design tokens defining valid colors.&lt;/p&gt;

&lt;p&gt;Here's the JSON representation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json-doc"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"red-50"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFC3C2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"red-100"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFAFAD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="c1"&gt;// ...etc&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, imagine that a design tokens pipeline formats the JSON into the following JavaScript modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;colorRed50&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#FFC3C2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;colorRed100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#FFAFAD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...etc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, let's say these tokens can be consumed in an application via an npm package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SomeComponent.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@some/design-system/tokens&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed50&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, given such a setup, how can we programmatically create gradients when given two color tokens?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ha8nvKJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zhns61di1x2xjxcik2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ha8nvKJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zhns61di1x2xjxcik2a.png" alt="Creating a Gradient Component in React From Design Tokens" width="400" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's one way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SomeComponent.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@some/design-system/tokens&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
      linear-gradient(
        45deg,
        &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed50&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,
        &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
      )
    `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, but is there a way that we can refactor this?&lt;/p&gt;

&lt;p&gt;Well, we could create a helper function that returns the gradient when providing the &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// get-gradient.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`linear-gradient(45deg, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// SomeComponent.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@some/design-system/tokens&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./get-gradient.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This refactor doesn't save in lines of code, but it does guarantee that gradients will be created the same so long as they are created through the &lt;code&gt;getGradient&lt;/code&gt; helper function.&lt;/p&gt;

&lt;p&gt;What if we refactored one step further and allowed the gradient to be applied to any child component via a wrapper component?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Gradient.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cloneElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`linear-gradient(45deg, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Gradient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cloneElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getGradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// SomeComponent.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@some/design-system/tokens&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AnotherComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./AnotherCompoent.jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Gradient&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Gradient.jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Gradient&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed50&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorRed100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AnotherComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Gradient&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using &lt;code&gt;Children&lt;/code&gt; and &lt;code&gt;cloneElement&lt;/code&gt;, the &lt;code&gt;Gradient&lt;/code&gt; component clones the child element and applies the gradient.&lt;/p&gt;

&lt;p&gt;üéä Awesome! Now, we have a pattern for applying a gradient via a wrapper component in React!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Acra. Features: Tokenization</title>
      <author>Cossack Labs</author>
      <pubDate>Thu, 20 Jan 2022 16:00:41 +0000</pubDate>
      <link>https://dev.to/cossacklabs/acra-features-tokenization-57fn</link>
      <guid>https://dev.to/cossacklabs/acra-features-tokenization-57fn</guid>
      <description>&lt;p&gt;Typically, encrypted data is a binary data. But in some cases, database structure suggests using the original data format (string, int). Data tokenization works for the same goal as encryption but &lt;strong&gt;allows storing data in its original format.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/cossacklabs/acra"&gt;Use Acra Community Edition for free&lt;/a&gt;. Check out &lt;a href="https://www.cossacklabs.com/acra/#pricing"&gt;Acra Enterprise Edition&lt;/a&gt; tailored for solutions with high security requirements.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tokenization"&gt;
  &lt;/a&gt;
  4Ô∏è‚É£ Tokenization
&lt;/h2&gt;

&lt;p&gt;üí° Acra allows configuring &lt;a href="https://docs.cossacklabs.com/acra/security-controls/tokenization/"&gt;data tokenization&lt;/a&gt; to certain database fields. Tokenization means that a sensitive data field is substituted with a token and matched to the original only when the original data field is required.&lt;/p&gt;

&lt;p&gt;Acra combines encryption and tokenization‚Äîthe original data fields are encrypted and stored in a separate table/database, when the original database stores tokens instead. Thus, the &lt;strong&gt;database leakage will reveal only tokens, not the original data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwgx7ARE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr6jabggo460c1o698yp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwgx7ARE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr6jabggo460c1o698yp.png" alt="Tokenization. Acra by Cossack Labs" width="828" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tokens look like plaintext data‚Äîthey match the desired row type/format and length. Acra supports tokens of different formats: email, string, int, binary. &lt;/p&gt;

&lt;p&gt;üí° Tokenization is useful for encrypting data in legacy systems‚Äîno need to change database scheme or rewrite legacy applications as &lt;strong&gt;they will continue working with tokens instead of original data.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note, that data encryption, data masking, and tokenization are different security controls that address similar threats but provide different usability advantages. They all work for your sensitive data and build defense in depth on different levels. &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>cryptography</category>
      <category>security</category>
      <category>encryption</category>
      <category>database</category>
    </item>
    <item>
      <title>Session Management - Fundamentals</title>
      <author>Abhinav Pandey</author>
      <pubDate>Thu, 20 Jan 2022 15:57:24 +0000</pubDate>
      <link>https://dev.to/abh1navv/session-management-fundamentals-3ijn</link>
      <guid>https://dev.to/abh1navv/session-management-fundamentals-3ijn</guid>
      <description>&lt;p&gt;
  Table of Contents
  &lt;ol&gt;
&lt;li&gt;
&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#a-simple-session-management-flow"&gt;A simple session management flow&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-need-for-authentication"&gt;The need for authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-need-for-authorization"&gt;The need for authorization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-purpose-of-access-tokens"&gt;The purpose of access tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#session-expiry"&gt;Session Expiry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#access-tokens"&gt;Access Tokens&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#reference-tokens"&gt;Reference Tokens&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#authorization-flow"&gt;Authorization flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#considerations-while-using-reference-tokens"&gt;Considerations while using reference tokens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#value-tokens"&gt;Value Tokens&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#authorization-flow"&gt;Authorization flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#considerations-while-using-value-tokens"&gt;Considerations while using value tokens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;



&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Session management is the process of maintaining a session &lt;em&gt;"between a client and a server", "for a user", "for a period of time"&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-simple-session-management-flow"&gt;
  &lt;/a&gt;
  A simple session management flow
&lt;/h3&gt;

&lt;p&gt;The process can be described as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user &lt;strong&gt;authenticates&lt;/strong&gt; with their credentials using a client application(such as a web browser).&lt;/li&gt;
&lt;li&gt;The server receives the request and creates a session for the user.&lt;/li&gt;
&lt;li&gt;The server sends an &lt;strong&gt;access token&lt;/strong&gt; to the client.&lt;/li&gt;
&lt;li&gt;For subsequent requests, the client uses the access token to request the server on behalf of the user.&lt;/li&gt;
&lt;li&gt;When the server receives the request, it checks the access token and if it is valid, the server is able to figure out the actions the user is &lt;strong&gt;authorized&lt;/strong&gt; to perform.&lt;/li&gt;
&lt;li&gt;This process continues until the user logs out or &lt;strong&gt;the session expires&lt;/strong&gt;. In that case, the access tokens are deleted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at the highlighted terms of the session management process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-need-for-authentication"&gt;
  &lt;/a&gt;
  The need for authentication
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p4n6CLUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gphwdylqa2n9bmd56g4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p4n6CLUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gphwdylqa2n9bmd56g4c.png" alt="Authentication Flow" width="436" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to know &lt;strong&gt;who the user is&lt;/strong&gt;. In deeper terms, to associate the actions of the user with their identity. If I open the Twitter website and hit like on a post, Twitter should be able to associate that like with my identity.&lt;/li&gt;
&lt;li&gt;an important point to note in context of web applications is that authentication always involves a user interaction, be it just a click of a button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-need-for-authorization"&gt;
  &lt;/a&gt;
  The need for authorization
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Every user has a set of permissions. These permissions are granted to the user by the server. For example, I can like any post, but I can only delete my own posts or edit my own profile.&lt;/li&gt;
&lt;li&gt;In theory, every request a user makes to the server is validated against the permissions that the user has.&lt;/li&gt;
&lt;li&gt;In practice, a server implicitly lets all users perform a few actions but requires authorization for all other actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-purpose-of-access-tokens"&gt;
  &lt;/a&gt;
  The purpose of access tokens
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The access token is a unique identifier for the session. It can be linked to the user's identity and their permissions.&lt;/li&gt;
&lt;li&gt;Its purpose is to enable the user to perform actions on the server without having to authenticate on every request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#session-expiry"&gt;
  &lt;/a&gt;
  Session expiry
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The session expires after a period of time. This needs to be handled in the implementation of the access token.&lt;/li&gt;
&lt;li&gt;Expiry is an intuitive concept because it wouldn't make sense to have a session that lasts forever.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#access-tokens"&gt;
  &lt;/a&gt;
  Access Tokens
&lt;/h2&gt;

&lt;p&gt;Access tokens can be broadly classified into two categories:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference-tokens"&gt;
  &lt;/a&gt;
  Reference Tokens
&lt;/h3&gt;

&lt;p&gt;These are tokens that are used to identify the user and their permissions but do not hold this information themselves.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A usual implementation of reference tokens is a random string.&lt;/li&gt;
&lt;li&gt;The string should be unique for every user.&lt;/li&gt;
&lt;li&gt;It should also be long enough to be difficult to guess.&lt;/li&gt;
&lt;li&gt;It points to the user's identity and permissions in a storage. The storage can be a database, a distributed cache like Redis or in memory objects of the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#authorization-flow"&gt;
  &lt;/a&gt;
  Authorization flow
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UlaALzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l848oj51aw32h0tfzjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UlaALzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l848oj51aw32h0tfzjx.png" alt="Authorization with reference tokens" width="406" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends a request to the server - the access token is sent as a header.&lt;/li&gt;
&lt;li&gt;The server verifies the access token's validity by querying the storage for it. The storage returns the permissions against that token.&lt;/li&gt;
&lt;li&gt;Checking the validity involves

&lt;ul&gt;
&lt;li&gt;checking that the token exists in the storage&lt;/li&gt;
&lt;li&gt;checking that the token is not expired.&lt;/li&gt;
&lt;li&gt;if all is well till here, the server checks the permissions of the user against what is requested in the request.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The server returns the response to the client&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#considerations-when-using-reference-tokens"&gt;
  &lt;/a&gt;
  Considerations when using Reference Tokens
&lt;/h4&gt;

&lt;p&gt;As we can see, each request requires a storage interaction. This can be a costly operation depending on the storage being used. The impact can be measured using a few parameters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request throughput,&lt;/li&gt;
&lt;li&gt;fault tolerance,&lt;/li&gt;
&lt;li&gt;scalability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's compare these three attributes for each of the three storage types.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;In-memory storage&lt;/strong&gt; - The database stores the permissions permanently and additionally, the sessions and the permissions in effect are stored in an in-memory object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request throughput: It's very fast to read from in-memory objects. &lt;strong&gt;Good&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;fault tolerance: If the server goes down, all sessions are lost.  &lt;strong&gt;Fairly unacceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;scalability: If servers need to be used in clusters, session created on one server does not work. This leads to the need for sticky sessions. They require a overhead in implementation and are not preferred because they can lead to a skew in server load. In short, saving data on the servers does not work in the favor of scalability &lt;strong&gt;Bad&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Databases&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request throughput: It's not very fast to read from databases or any kind of persistent storage. This can reduce the number of requests your application can serve concurrently &lt;strong&gt;Bad&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;fault tolerance: If the database server goes down, sessions are not lost but temporarily it is not possible to create sessions or authorize users during the downtime. However, database downtime is something that can be avoided if extra care is taken to create a fault tolerant database architecture. Any large scale application is likely to plan for this.  &lt;strong&gt;Fairly acceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;scalability: A database allows the servers to scale as needed. &lt;strong&gt;Good&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redis(or any other distributed cache)&lt;/strong&gt; - The database stores the permissions permanently and additionally, the sessions and the permissions in effect are stored in a distributed cache.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;request throughput: It's faster to read from Redis than databases. &lt;strong&gt;Fairly acceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;fault tolerance: If the Redis server goes down, all sessions are lost and cannot be recovered. Nor can new sessions be created during the downtime. &lt;strong&gt;Fairly unacceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;scalability: It allows the application servers to scale as needed. However, as the user activity increases, Redis will require scaling of its own infrastructure. This is completely normal in web applications. &lt;strong&gt;Fairly acceptable&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Table to summarize this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Storage Type&lt;/th&gt;
&lt;th&gt;Request Throughput&lt;/th&gt;
&lt;th&gt;Fault Tolerance&lt;/th&gt;
&lt;th&gt;Scalability&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;In-memory storage&lt;/td&gt;
&lt;td&gt;Good ‚úÖ&lt;/td&gt;
&lt;td&gt;Unacceptable üü†&lt;/td&gt;
&lt;td&gt;Bad ‚ùå&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Databases&lt;/td&gt;
&lt;td&gt;Bad ‚ùå&lt;/td&gt;
&lt;td&gt;Acceptableüü°&lt;/td&gt;
&lt;td&gt;Good ‚úÖ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Redis&lt;/td&gt;
&lt;td&gt;Acceptableüü°&lt;/td&gt;
&lt;td&gt;Unacceptable üü†&lt;/td&gt;
&lt;td&gt;Acceptable üü°&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#value-tokens"&gt;
  &lt;/a&gt;
  Value Tokens
&lt;/h3&gt;

&lt;p&gt;These are tokens that hold the user's identity and their permissions. They are stored on the client side.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They can be encrypted or encoded strings.&lt;/li&gt;
&lt;li&gt;They must contain details which uniquely identify the user, like a username or a userid.&lt;/li&gt;
&lt;li&gt;They may contain additional information such as the expiry time so that they can self-invalidate after a time.&lt;/li&gt;
&lt;li&gt;The ultimate goal of a value token is to provide authorization without needing interaction with any external storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#authorization-flow"&gt;
  &lt;/a&gt;
  Authorization flow
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVoxIMA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gufk595i46uxlnw3xnz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVoxIMA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gufk595i46uxlnw3xnz0.png" alt="Authorization user value tokens" width="331" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends a request to the server - the access token is sent as a header. The server verifies the access token's validity by reading its content. Checking the validity involves:

&lt;ul&gt;
&lt;li&gt;decrypting/decoding the token's content.&lt;/li&gt;
&lt;li&gt;checking that the token is not expired using the expiry time in the token content.&lt;/li&gt;
&lt;li&gt;If all is well till here, the server checks the permissions of the user against what is requested. This permission information is part of the token content itself so no database queries are required.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The server returns the response to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To understand this deeper let's talk about an exact implementation of value tokens - Json Web Tokens (JWT).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#jwt-structure"&gt;
  &lt;/a&gt;
  JWT Structure
&lt;/h4&gt;

&lt;p&gt;Example JWT:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9&lt;/em&gt;.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.&lt;strong&gt;TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Italic part - &lt;strong&gt;header&lt;/strong&gt; - JSON object that contains the algorithm and type of token. Base64URL encoded.&lt;/li&gt;
&lt;li&gt;Middle part - &lt;strong&gt;payload&lt;/strong&gt; - JSON object that contains the user's information, permissions and expiry time. Base64url encoded.&lt;/li&gt;
&lt;li&gt;Bold part - &lt;strong&gt;signature&lt;/strong&gt; - a string which only the server can understand.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Signature is created using the algorithm used in the header. The server uses a secret key to sign the payload and header.&lt;br&gt;
Only the server knows the key required to create or understand the signature.&lt;/p&gt;

&lt;p&gt;If you decode the same JWT on &lt;a href="//jwt.io"&gt;jwt.io&lt;/a&gt;, you can see what's inside. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c6eDrvnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d0nsomt4qa2y7v6w5mm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c6eDrvnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d0nsomt4qa2y7v6w5mm.png" alt="Decoded JWT" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signature creation&lt;/strong&gt;&lt;br&gt;
Signature = Algorithm((header+payload)*secretKey)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signature verification&lt;/strong&gt;&lt;br&gt;
Create another signature using the same algorithm and secret key. Compare it with the signature received in the request.&lt;br&gt;
Algorithm((header + payload)*secretKey) == Signature&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#considerations-when-using-jwts"&gt;
  &lt;/a&gt;
  Considerations when using JWTs
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Both header and payload can be encoded/decoded by anyone and read. So do not store anything sensitive like a password in it. If there is some sensitive information in the payload, encrypt it.&lt;/li&gt;
&lt;li&gt;If a JWT is leaked, the attacker can use it to access the resource as long as it is valid. This poses a question about how long the JWT should be valid. We will cover this in the next article when we talk about more advanced concepts.&lt;/li&gt;
&lt;li&gt;In contrast, a reference token works better in this scenario - The server controls it, so it can revoke it on demand if either the server or the victim are able to detect the theft.&lt;/li&gt;
&lt;li&gt;The only way to revoke a JWT is to change the secret key. This is not recommended as it will invalidate sessions for all your users. This is however easy to do and can be an option during incident response.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We looked at a simple session management flow and we looked at two types of access tokens that can be used to implement it. Both have their pros and cons and none of them is a silver bullet.&lt;br&gt;
This flow works fine for a simple web application but it lacks a few key features which can make it inadequate for critical applications.&lt;/p&gt;

&lt;p&gt;In the next article, we will talk more about security, scalability and user experience aspects of session management. &lt;br&gt;
We will also utilise an open source library &lt;a href="https://www.supertokens.io"&gt;Supertokens&lt;/a&gt; to implement an improved session management flow.&lt;/p&gt;




&lt;p&gt;Thanks for reading. Stay tuned for more on session management. If you want to connect with me, you can find me on &lt;a href="https://twitter.com/abh1navv"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>security</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I show you how to Crack a .NET Application (3 clicks)</title>
      <author>Dotnetsafer</author>
      <pubDate>Thu, 20 Jan 2022 15:55:29 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/i-show-you-how-to-crack-a-net-application-3-clicks-47ke</link>
      <guid>https://dev.to/dotnetsafer/i-show-you-how-to-crack-a-net-application-3-clicks-47ke</guid>
      <description>&lt;p&gt;‚ö†Ô∏è&lt;strong&gt;Disclaimer:&lt;/strong&gt; &lt;em&gt;This article is for educational and training orientation, we are not responsible for the misuse of the techniques and explanations mentioned in this article and / or the use of the tools mentioned / provided, also we do not assume responsibility for the actions carried out with the information of the same. Please use this information for ethical purposes.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Hello to all developers üëã, I am Juan and I am part of the &lt;a href="https://dotnetsafer.com"&gt;Dotnetsafer&lt;/a&gt; team.&lt;/p&gt;

&lt;p&gt;I do this article for a very simple reason, in our offices a co-working space) &lt;strong&gt;there are quite a few companies that develop in .NET&lt;/strong&gt;, and one day at lunch I commented what we were doing and they did not understand anything, it turns out that &lt;strong&gt;they had no idea what decompilation is.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They did not know that &lt;strong&gt;with a simple tool you could see, copy or modify its development&lt;/strong&gt; ‚Äî&lt;em&gt;not in all cases you should be concerned&lt;/em&gt;‚Äî but for some of them the core of the business is the development itself and obviously it did not do much grace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have to say that this happens in all compiled languages, but I will focus on .NET which is what we master.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article &lt;strong&gt;I am going to show basic notions about de-compilation&lt;/strong&gt; and reverse engineering, if you are interested in something more complex, do not hesitate to ask us!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To carry out the practical parts we use &lt;strong&gt;&lt;a href="https://github.com/dnSpy/dnSpy"&gt;DnSpy&lt;/a&gt;&lt;/strong&gt;, but we provide you with the same tool from &lt;strong&gt;&lt;a href="https://decompiler.dotnetsafer.com"&gt;https://decompiler.dotnetsafer.com&lt;/a&gt;&lt;/strong&gt; so that you can carry out the tutorial from your browser without having to download anything ‚ô•. (Simply to decompile drag the applications to the left part shown on the screen, the code will be displayed on the right part).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-decompilation"&gt;
  &lt;/a&gt;
  What is de-compilation
&lt;/h2&gt;

&lt;p&gt;De-compilation is the reverse of compilation (I'm going to patent this great explanation).&lt;/p&gt;

&lt;p&gt;That is, the &lt;strong&gt;COMPILATION&lt;/strong&gt; is basically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You write code&lt;/li&gt;
&lt;li&gt;You push the magic &lt;strong&gt;compile&lt;/strong&gt; button and it becomes an executable/file/.exe/dll... (Well, it should ... surely you forgot a semicolon or something like that üò™) you will also have 103 warnings ‚ö†, but if you don't open your eyes, you don't see them ü§≠.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The process will be something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/uZef4xSKjC2Ig/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/uZef4xSKjC2Ig/giphy.gif" alt="compiling and application" width="320" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, de-compilation is the opposite, you have an executable file, .dll, .exe..., and with a tool (decompiler) you get the original source code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o72F7RrTPW6jymXew/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o72F7RrTPW6jymXew/giphy.gif" alt="decompilation" width="480" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And is it simple üôÑ?&lt;br&gt;
I'd say it's easier than compiling, but let's see how it's done.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#decompiling-a-net-net-core-application"&gt;
  &lt;/a&gt;
  Decompiling a .NET / .NET Core application
&lt;/h2&gt;

&lt;p&gt;Let's decompile a simple application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYwUWnX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53imkigur6cpxjtvhc6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYwUWnX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53imkigur6cpxjtvhc6h.png" alt="decompiling .net app" width="406" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this example we will use &lt;a href="https://github.com/dnSpy/dnSpy"&gt;DnSpy&lt;/a&gt;. There are several tools and each one is good for something in particular, but DnSpy is one of the best for decompiling and debugging .NET applications.&lt;/p&gt;

&lt;p&gt;When we compile our .NET Core application, we will obtain the compiled files, in the case of &lt;strong&gt;.NET Core the ".exe" file will be the executable&lt;/strong&gt;, but it will be in charge of executing the &lt;strong&gt;".dll" that contains the code of our application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ok, let's proceed to decompile the .dll file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxu2DLZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pg8b9q3yg77i2kcuondn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxu2DLZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pg8b9q3yg77i2kcuondn.png" alt="decompiling net core" width="642" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, all we have to do is drag it to DnSpy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--efHwHO8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gyazo.com/f6f97462b428dcce96850362f22f79e7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--efHwHO8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gyazo.com/f6f97462b428dcce96850362f22f79e7.gif" alt="dnspy .net core" width="880" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once loaded, the original source code will be shown and we can work on it, we can analyze it, modify it, debug it, etc.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#viewing-the-source-code"&gt;
  &lt;/a&gt;
  Viewing the source code
&lt;/h3&gt;

&lt;p&gt;Once our application is decompiled, we can navigate through the source code as if it were our own project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gl9W7Jox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/owqhjr292atvxicg9wgf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gl9W7Jox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/owqhjr292atvxicg9wgf.png" alt="source code .net" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#debug-the-app"&gt;
  &lt;/a&gt;
  Debug the app
&lt;/h3&gt;

&lt;p&gt;This will be useful to understand how it works or to obtain some values in memory.&lt;/p&gt;

&lt;p&gt;For example, let's put a breakpoint before doing a subtraction:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wwHat7Qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jjk9fvb2yevpnm4rukrj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwHat7Qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jjk9fvb2yevpnm4rukrj.png" alt="dnspy breakpoint" width="496" height="70"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and then we will run the application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--soK_5mK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9sgvoo4gwzxfootsj054.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--soK_5mK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9sgvoo4gwzxfootsj054.png" alt="dnspy debug net core" width="175" height="70"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kRQPfeG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cqo6rwz4osf2rig455ev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kRQPfeG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cqo6rwz4osf2rig455ev.png" alt="dnspy debug" width="816" height="732"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a function that can be very useful at times, but it can also be dangerous ‚ö°.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#modify-the-code"&gt;
  &lt;/a&gt;
  Modify the code
&lt;/h3&gt;

&lt;p&gt;We can modify and re-compile the application without any problem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_rQG2wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8vlq5rmvh4o183y12cbc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_rQG2wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8vlq5rmvh4o183y12cbc.png" alt="craking .net core app" width="540" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We can also do it using IL code, but if we do not know it it will be much more complex.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We change that simple text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysyYoMtr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bpjw1v97e9vj8e1uv9go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysyYoMtr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bpjw1v97e9vj8e1uv9go.png" alt="changing cil body .net core" width="471" height="89"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and we compile again:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9d2SlOUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/foyu3kdc8nkjn4zhk6im.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9d2SlOUP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/foyu3kdc8nkjn4zhk6im.png" alt="compiling .net core" width="175" height="43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to save our modified application, we will give:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hHys2eSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9kwrhlg9535qvr6tzrxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hHys2eSy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9kwrhlg9535qvr6tzrxl.png" alt="saving module dnspy" width="336" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will select the name of the file, its path and we will mark the following options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBjLwynk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0v27wu3zkv6wl0bpfjie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBjLwynk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0v27wu3zkv6wl0bpfjie.png" alt="metadata dnspy" width="453" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and we will have our modified application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b9aGbmaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r08z5shihurcgxjvq2u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b9aGbmaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r08z5shihurcgxjvq2u8.png" alt="modified net core app" width="880" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, these are simple and unimportant examples, I leave to your imagination üí≠ everything that could be done with these simple tools.&lt;/p&gt;

&lt;p&gt;Now we are going to see other types of applications, because &lt;strong&gt;compilation in .NET is the same, it does not matter if you use c#, vb, ASP, Xamarin, Blazor, everything works in the same way&lt;/strong&gt;, let's see then with a Blazor application.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#decompiling-a-web-application-with-blazor"&gt;
  &lt;/a&gt;
  Decompiling a web application with Blazor
&lt;/h2&gt;

&lt;p&gt;Now we have created a sample web application with Blazor, this is the application code in visual studio:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bDeTUaOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fmg7z04nomjljhn01keu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDeTUaOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fmg7z04nomjljhn01keu.png" alt="blazor net core app" width="611" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically it is an application that shows the weather and we have added &lt;code&gt;Dotnetsafer&lt;/code&gt; in the middle so that we can see it later in the decompiled application, here is the web application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YcXcBlx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0tn9l7lc7j4tfl6z1f1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YcXcBlx5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0tn9l7lc7j4tfl6z1f1r.png" alt="blazor webapp" width="827" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, let's get the code again.&lt;/p&gt;

&lt;p&gt;First we will use our browser (it does not matter which one), since when loading the .NET libraries to display the application, it makes a call to obtain them.&lt;/p&gt;

&lt;p&gt;We must enter inspection mode &lt;code&gt;Ctrl + Shift + C&lt;/code&gt; and go to section &lt;code&gt;Network&lt;/code&gt;, later reload the page with &lt;code&gt;Ctrl + F5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here will be the file that contains the code of our web application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jWTzYU3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zc13mzocwwy8qzfz2gs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWTzYU3X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zc13mzocwwy8qzfz2gs8.png" alt=".net blazor file" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can also obtain all the dependencies or own .net files that are used by the application&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, we download it and open it again with DnSpy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FENiVRCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/foj06la257pk9j34ggy5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FENiVRCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/foj06la257pk9j34ggy5.png" alt="decompiling blazor with DnSpy" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have the decompiled file we can do everything that I mentioned in the previous point.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#decompiling-a-mobile-app-with-xamarin"&gt;
  &lt;/a&gt;
  Decompiling a mobile app with Xamarin
&lt;/h2&gt;

&lt;p&gt;We raised the level of difficulty a little üß®, but the operation is still the same.&lt;/p&gt;

&lt;p&gt;We have created a simple application for mobile devices with Xamarin, the compiled application will have the extension .APK&lt;/p&gt;

&lt;p&gt;The first thing we will do is unzip the APK, there are tools for this, but it is not necessary, for something so simple we can use &lt;a href="https://www.winrar.es/descargas"&gt;winrar&lt;/a&gt;, (yes, the program that never expires üÜì):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyySqRUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iz87jmtxtsrbbxhj6f6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyySqRUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iz87jmtxtsrbbxhj6f6u.png" alt="decompiling apk" width="627" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and we will copy all the files in a folder:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psrTpRRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9a1ylqxs2jhsk3cofc7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psrTpRRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9a1ylqxs2jhsk3cofc7k.png" alt="decompiling xamarin apk" width="644" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside the folder &lt;code&gt;Assemblies&lt;/code&gt; all .NET files will be found:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUQwRP_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53ndcyjpra3jqoh81tmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUQwRP_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/53ndcyjpra3jqoh81tmy.png" alt=".net xamarin files" width="646" height="43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here comes the interesting thing, these files have &lt;strong&gt;lz4 compression&lt;/strong&gt;, which will give us an error if we try to decompile it with DnSpy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdr_1AHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bw2bujqigxlxq07133d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdr_1AHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bw2bujqigxlxq07133d3.png" alt="dnspy error decompiling xamarin files" width="804" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this I bring a simple solution, a small Python script that will help us decompress all the .NET .dll files.&lt;/p&gt;

&lt;p&gt;Yes, this sounds very complex, and it seems that you must be an expert:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/rMS1sUPhv95f2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/rMS1sUPhv95f2/giphy.gif" alt="hacking .net" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it really is something very simple that we will do in less than a minute.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#decompress-xamarin-net-libraries"&gt;
  &lt;/a&gt;
  Decompress Xamarin .NET Libraries
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you don't have Python on your machine, &lt;a href="https://www.python.org/downloads/"&gt;install it previously&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once we have Python (I run it from the &lt;a href="https://code.visualstudio.com"&gt;VSCode&lt;/a&gt; terminal) we proceed:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-lz4"&gt;
  &lt;/a&gt;
  Install lz4:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HbQo7Mnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ua8pyhcf6ard0h1dx2pl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HbQo7Mnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ua8pyhcf6ard0h1dx2pl.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/ua8pyhcf6ard0h1dx2pl.png" width="880" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m pip install lz4&lt;/code&gt; or simply &lt;code&gt;pip install lz4&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-of-the-decompression-script"&gt;
  &lt;/a&gt;
  Use of the decompression script
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lz4.block&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_usage_and_exit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"usage: py .&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;decompressor.py target_path"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;input_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filePath&lt;/span&gt;
    &lt;span class="n"&gt;output_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"extracted"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;output_filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;header_expected_magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;'XALZ'&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;xalz_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xalz_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;header_expected_magic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The input file does not contain the expected magic bytes, aborting ..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;header_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;header_uncompressed_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;I'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"header index: %s"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;header_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"compressed payload size: %s bytes"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"uncompressed length according to header: %s bytes"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;header_uncompressed_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;decompressed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lz4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uncompressed_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_uncompressed_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decompressed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"result written to file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".dll"&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="n"&gt;decompress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to decompress "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;nDecompressed "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" assemblies!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The author of this script is Christian Reitter, X41 D-Sec GmbH, thank you for your article at &lt;a href="https://www.x41-dsec.de/security/news/working/research/2020/09/22/xamarin-dll-decompression/"&gt;X41 D-Sec GmbH&lt;/a&gt;, we have modified it to unzip all the files in the directory.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will copy the code into a file called &lt;code&gt;decompress.py&lt;/code&gt; and we will save it in the same path as our .dll files.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#decompress-the-files-we-need"&gt;
  &lt;/a&gt;
  Decompress the files we need:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1SMkDB_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z06xnl84dsztoghjpqqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SMkDB_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z06xnl84dsztoghjpqqw.png" alt="decompress .net xamarin files" width="880" height="109"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will do it with &lt;code&gt;py .\decompressor.py .\&lt;/code&gt;, we'll let it decompress all the .dll files in the directory.&lt;/p&gt;

&lt;p&gt;In this case I am only interested in the two files corresponding to my application.&lt;/p&gt;

&lt;p&gt;What has not been so difficult?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/102h4wsmCG2s12/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/102h4wsmCG2s12/giphy.gif" alt="hacking xamarin" width="245" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have the files ready to open with DnSpy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1dT1svZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ta93uh0a1qt4in5k0tw1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1dT1svZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ta93uh0a1qt4in5k0tw1.png" alt="decompiling xamarin files with dnspy" width="880" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now again we can do everything I mentioned earlier, the procedure is always the same, only the way in which the files are compiled varies.&lt;/p&gt;

&lt;p&gt;This applies to all applications under .NET, such as games developed in Unity with C #, virtual reality applications and augmented reality.&lt;/p&gt;

&lt;p&gt;Did you like this article?&lt;/p&gt;

&lt;p&gt;It has been very simple but I consider it fine for a basic level and learn a little about these topics üòä.&lt;/p&gt;

&lt;p&gt;If you have found it interesting, do not hesitate to support it, and tell us below üëá if you want to know something else, like let's talk about &lt;strong&gt;cracking&lt;/strong&gt;, &lt;strong&gt;injection&lt;/strong&gt; and other aspects.&lt;/p&gt;

&lt;p&gt;We could do some interesting practices or whatever you want to see around here.&lt;/p&gt;

&lt;p&gt;Thank you for reading the article ‚ù§ and remember that in dotnetsafer we will be uploading articles about security in relation to .NET üõ°.&lt;/p&gt;

&lt;p&gt;You have the web version of Dnspy at &lt;a href="https://decompiler.dotnetsafer.com/"&gt;https://decompiler.dotnetsafer.com&lt;/a&gt; so that you can comfortably do all the tests in this article without having to download any program.&lt;/p&gt;

&lt;p&gt;Thank you for your attention, we hope you have learned a lot!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZBVhKIDgts1eHYdT7u/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZBVhKIDgts1eHYdT7u/giphy.gif" alt="goodbye" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>security</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
