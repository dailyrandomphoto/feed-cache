<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Youtube Channels to learn Flutter [2021]</title>
      <author>Anonymous Programmer</author>
      <pubDate>Fri, 25 Jun 2021 20:16:00 +0000</pubDate>
      <link>https://dev.to/anonymousprogrammer/best-youtube-channels-to-learn-flutter-2021-48bd</link>
      <guid>https://dev.to/anonymousprogrammer/best-youtube-channels-to-learn-flutter-2021-48bd</guid>
      <description>&lt;p&gt;Hey What's Up?&lt;br&gt;
In this article we are gonna talk about best Youtube Channels to learn Flutter. Obviously We would be starting from flutter's official youtube channel, &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;FLUTTER &lt;/li&gt;
&lt;li&gt;RetroPortal Studio&lt;/li&gt;
&lt;li&gt;MTECH Viral&lt;/li&gt;
&lt;li&gt;TVAC Studio&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I know I missed many out, So please share in the comments, But Personally these are the only channels I learn nd implement flutter from...&lt;/p&gt;

&lt;p&gt;Bye See you in the other one!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>fluttter2021</category>
      <category>bestyoutubechannel</category>
      <category>learning</category>
    </item>
    <item>
      <title>Getting started with ECMAScript6</title>
      <author>Christopher Glikpo</author>
      <pubDate>Fri, 25 Jun 2021 19:48:38 +0000</pubDate>
      <link>https://dev.to/cglikpo/getting-started-with-ecmascript6-d0i</link>
      <guid>https://dev.to/cglikpo/getting-started-with-ecmascript6-d0i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;ECMAScript6  is also known as ECMAScript2015.ES6 is a significant upgrade to ES5 and adds a slew of new capabilities to JavaScript.&lt;/p&gt;

&lt;p&gt;In this article, we'll walk through how to set things up to develop ES6 applications and get started with some of the most important new features.&lt;/p&gt;

&lt;p&gt;This article covers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browser support&lt;/li&gt;
&lt;li&gt;Setting up Babel and webpack&lt;/li&gt;
&lt;li&gt;Code editors&lt;/li&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;const and let&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Object literal syntax&lt;/li&gt;
&lt;li&gt;Destructuring assignment&lt;/li&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Template strings&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h2&gt;

&lt;p&gt;The setup necessary for building ES6 apps is determined by the amount of cross-platform compatibility you wish to give. Most of ES6 is already supported by the latest versions of Chrome, Firefox, Edge, and Node.js, so if you're just targeting these newer runtimes, you can start using it right now.For further details about which runtimes support which features, you can consult the &lt;a href="http://kangax.github.io/compat-table/es6/"&gt;ES6 compatibility table.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can run the following code in your browser's JavaScript console. If your browser supports ES6, it should evaluate to &lt;code&gt;3&lt;/code&gt;. If not, it will complain about a syntax error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let [two, three] = [2, 3];
two + three;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, the general browser market may be out of date, meaning that many users are still not using an ES6-compatible browser. If you're developing a public-facing online application, you should continue to assist these individuals.&lt;/p&gt;

&lt;p&gt;Fortunately, there's a project called &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; which allows you to convert your ES6 code into ES5 code. This means that you can still write code in ES6 while developing web applications that anybody with an ES5-compliant browser can use. It takes some effort to figure out how to set everything up the first time, so I've included a step-by-step guide below to help you get started more quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-babel-and-webpack"&gt;
  &lt;/a&gt;
  Setting up Babel and webpack
&lt;/h2&gt;

&lt;p&gt;If you do not already have Node.js installed, you will need to &lt;a href="https://nodejs.org/en/"&gt;install it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a folder for your project, then create a file named &lt;code&gt;package.json&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "es6-demo",
  "scripts": {
    "build": "webpack --watch"
  },
  "devDependencies": {
    "babel-cli": "^6.8.0",
    "babel-core": "^6.8.0",
    "babel-loader": "^6.2.4",
    "babel-plugin-transform-runtime": "^6.8.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-runtime": "^6.6.1",
    "webpack": "^1.13.0"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a file named &lt;code&gt;webpack.config.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var path = require("path");
module.exports = {
  entry: "./src/main.js",
  output: {
    path: __dirname,
    filename: "bundle.js"
  },
  module: {
    loaders: [
      {
        loader: "babel-loader",

        // Compile files in /src directory
        include: [path.resolve(__dirname, "src")],

        // Babel options
        query: {
          plugins: ["transform-runtime"],
          presets: ["es2015"]
        }
      }
    ]
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a subfolder named &lt;code&gt;src&lt;/code&gt;. This folder will contain all of your ES6 code. Let's put a simple script there named &lt;code&gt;main.js&lt;/code&gt; just to test things out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let [one, two, three] = [1, 2, 3];
console.log(`One: ${one}, Two: ${two}, Three: ${three}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open your terminal (Node.js console for Windows users), navigate to your project folder, and run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a &lt;code&gt;bundle.js&lt;/code&gt; file in your project folder with the compiled ES5 code. If you open this file, you'll see the ES5 equivalent (in the middle of a bunch of other generated boilerplate):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var one = 1;
var two = 2;
var three = 3;

console.log("One: " + one + ", Two: " + two + ", Three: " + three);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;npm run build&lt;/code&gt; script is set up to listen for modifications in the &lt;code&gt;src&lt;/code&gt; folder. Now, when you modify the &lt;code&gt;main.js&lt;/code&gt; file, the &lt;code&gt;bundle.js&lt;/code&gt; file will update automatically. You can stop watching with &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt; in the console.&lt;/p&gt;

&lt;p&gt;After you've done this, there's no need to run &lt;code&gt;npm install&lt;/code&gt; again. When you need to convert your code, you can use &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-editors"&gt;
  &lt;/a&gt;
  Code editors
&lt;/h2&gt;

&lt;p&gt;For a better development experience, you also will probably want to use a code editor that has some ES6 tooling. I like to use &lt;code&gt;Visual Studio Code&lt;/code&gt;, but there are many editors that can be set up to support ES6, such as &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;Atom&lt;/code&gt;,&lt;code&gt;Sublime Text&lt;/code&gt;, and &lt;code&gt;WebStorm&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;

&lt;p&gt;In my opinion, the module is the single most important new feature in ES6. It allows you to separate your code into separate files in a modular way without worrying about cluttering the global namespace.&lt;/p&gt;

&lt;p&gt;For example, let's create a file &lt;code&gt;math.js&lt;/code&gt; with a toy math library that exports the value of pi and a couple of pi-related functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const PI = 3.141592653589793;
export function circumference(r) {
  return 2 * PI * r;
}
export function area(r) {
  return PI * r * r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With modules, we can import this library's individual components from another file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { PI, area } from "./math";
console.log(area(PI));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we can import everything into a single object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as math from "./math";
console.log(math.area(math.PI));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also export a single value as the default value, so that you can import it without needing brackets or a &lt;a href="https://whatis.techtarget.com/definition/wildcard-character"&gt;wildcard&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// reverseString.js
export default function(str) {
  return str
    .split("")
    .reverse()
    .join("");
}
// main.js
import reverseString from "./reverseString";
console.log(reverseString("Hello, world!"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#const-and-let"&gt;
  &lt;/a&gt;
  const and let
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is used for constant declarations, and &lt;code&gt;let&lt;/code&gt; is used for variable declarations.&lt;/p&gt;

&lt;p&gt;If you try to reassign to a constant, the compiler will throw an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const one = 1;
one = 2; // SyntaxError: "one" is read-only
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is similar to &lt;code&gt;var&lt;/code&gt;, but it fixes a number of quirks about &lt;code&gt;var&lt;/code&gt; that are often stumbling blocks to JavaScript newcomers. In fact, &lt;code&gt;var&lt;/code&gt; has become obsolete at this point because it's &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; have assumed its functionality.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is block-scoped&lt;br&gt;
&lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; differ in their scoping mechanisms. A variable declared with &lt;code&gt;var&lt;/code&gt; is function-scoped, which means that it is visible anywhere in the surrounding function. Meanwhile, a variable declared with &lt;code&gt;let&lt;/code&gt; is block-scoped, which means it is only visible in its own code block. Calls to the variable outside its code block will lead to errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// var
console.log(less); // undefined
if (1 &amp;lt; 2) {
  var less = true;
  console.log(less); // true
}
console.log(less); // true

// let
console.log(less); // Uncaught ReferenceError: less is not defined
if (1 &amp;lt; 2) {
  let less = true;
  console.log(less); // true
}
console.log(less); // Uncaught ReferenceError: less is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;const&lt;/code&gt; also exhibits this block scoping strategy.&lt;/p&gt;

&lt;p&gt;Duplicate &lt;code&gt;let&lt;/code&gt; declarations are forbidden&lt;br&gt;
&lt;code&gt;let&lt;/code&gt; is designed to catch potential assignment mistakes. While duplicate &lt;code&gt;var&lt;/code&gt; declarations will behave like normal reassignment, duplicate &lt;code&gt;let&lt;/code&gt; declarations are not allowed to prevent the common mistake of erroneous reassignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 1;
var x = 2; // x equals 2

let x = 1;
let x = 2; // SyntaxError: Identifier 'x' has already been declared
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;let&lt;/code&gt; variables rebound in each loop iteration&lt;br&gt;
Here is a common error that occurs when you have a function defined inside of a loop using &lt;code&gt;var&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 5; i++) {
  setTimeout(function() {
    console.log(i);
  }, 10);
}
// logs 5 5 5 5 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will log the number 5 five times in a row, because the value of &lt;code&gt;i&lt;/code&gt; will be 5 before the first time &lt;code&gt;console.log&lt;/code&gt; is called. When we use &lt;code&gt;let&lt;/code&gt; instead, the &lt;code&gt;i&lt;/code&gt; inside of the function will correspond to the value on that particular iteration of the for-loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let i = 0; i &amp;lt; 5; i++) {
  setTimeout(() =&amp;gt; {
    console.log(i);
  }, 10);
}
// logs 0 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h2&gt;

&lt;p&gt;Object-oriented programming in JavaScript is different than classical OOP because it uses prototypes rather than classes. ES6 classes are a syntax shortcut for a common JavaScript pattern used to simulate classes. Below, I lay out prototype creation in ES5 and class creation in ES6.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
function Circle(x, y, radius) {
  this.x = x;
  this.y = y;
  this.radius = radius;
}
Circle.prototype.move = function(x, y) {
  this.x = x;
  this.y = y;
};
Circle.prototype.area = function() {
  return Math.PI * Math.pow(this.radius, 2);
};

// ES6 way
class Circle {
  constructor(x, y, radius) {
    [this.x, this.y, this.radius] = [x, y, radius];
  }
  move(x, y) {
    [this.x, this.y] = [x, y];
  }
  area() {
    return Math.PI * Math.pow(this.radius, 2);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also extend classes in a manner consistent to standard object-oriented languages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
function ColoredCircle(x, y, radius, color) {
  Circle.call(this, x, y, radius);
  this.color = color;
}
ColoredCircle.prototype = Object.create(Circle.prototype);

// ES6 way
class ColoredCircle extends Circle {
  constructor(x, y, radius, color) {
    super(x, y, radius);
    this.color = color;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-literal-syntax"&gt;
  &lt;/a&gt;
  Object literal syntax
&lt;/h2&gt;

&lt;p&gt;It's common to create objects with property names matching variable names. ES6 includes new syntax to make this a little bit more concise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 5,
  y = 6;

// ES5 way
var coordinate = { x: x, y: y };

// ES6 way
let coordinate = { x, y };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax for function properties has also changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
var counter = {
  count: 0,
  increment: function() {
    this.count++;
  }
};

// ES6 way
let counter = {
  count: 0,
  increment() {
    this.count++;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destructuring-assignment"&gt;
  &lt;/a&gt;
  Destructuring assignment
&lt;/h2&gt;

&lt;p&gt;Destructuring assignment is a nifty feature for doing several assignments at once. In ES5, you often have a series of variable declarations like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a = 1,
  b = 2,
  c = 3;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In ES6 you can do it all at once with array destructuring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let [a, b, c] = [1, 2, 3];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is particularly nice for extracting values from an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var personData = ["John", 12, true];

// ES5 way
var name = personData[0],
  age = personData[1],
  isMale = personData[2];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES6 way
let [name, age, isMale] = personData;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and also for swapping variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
var tmp = a;
a = b;
b = tmp;

// ES6 way
[a, b] = [b, a];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Destructuring assignment can be used with objects as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var personData = {
  name: "John",
  age: 12,
  isMale: true
};

// ES5 way
var name = personData.name,
  age = personData.age,
  isMale: personData.isMale;

// ES6 way
let { name, age, isMale } = personData;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also works with nested object structures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var book = {
  title: "A Tale of Two Cities",
  dimensions: [12, 8, 3],
  author: {
    name: "Charles Dickens"
  }
};

// ES5 way
var title = book.title,
  length = book.dimensions[0],
  width = book.dimensions[1],
  depth = book.dimensions[2],
  name = book.author.name;

// ES6 way
let { title, dimensions: [length, width, depth], author: { name } } = book;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clear and concise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h2&gt;

&lt;p&gt;JavaScript developers frequently use function expressions, such as callbacks. However, code can often look messy when the keywords function and return are repeated many times. ES6 has new syntax to make function expressions less verbose.&lt;/p&gt;

&lt;p&gt;Let's compare ES6 function expression handling with expression handling in previous Ecmascript versions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// ES3 way
var sumOfSquares = 0;
for (var i = 0; i &amp;lt; list.length; i++) {
  var n = list[i],
    square = n * n;
  sumOfSquares += square;
}

// ES5 way
var sumOfSquares = list
  .map(function(x) {
    return x * x;
  })
  .reduce(function(a, b) {
    return a + b;
  });

// ES6 way
let sumOfSquares = list.map(x =&amp;gt; x * x).reduce((a, b) =&amp;gt; a + b);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For functions consisting of more than one statement, you can wrap the right-hand side of the arrow function in curly braces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
window.onclick = function(e) {
  if (e.ctrlKey) console.log("Ctrl click");
  else console.log("Normal click");
};

// ES6 way
window.onclick = e =&amp;gt; {
  if (e.ctrlKey) console.log("Ctrl click");
  else console.log("Normal click");
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#template-strings"&gt;
  &lt;/a&gt;
  Template strings
&lt;/h2&gt;

&lt;p&gt;There is a new type of string literal that makes it easier to insert dynamic values into strings, and also to deal with multi-line strings. Instead of double quotes or single quotes, &lt;code&gt;template strings are delimited by backticks&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var weight = 80,
    height = 1.8;

// ES5 way
console.log("You are " + height + "m tall and weigh " + weight + "kg.\n" +
"Your BMI is " + weight / (height * height) + ".");

// ES6 way
console.log(`You are ${height}m tall and weigh ${weight}kg.
Your BMI is ${weight / (height * height)}.`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#and-much-much-more"&gt;
  &lt;/a&gt;
  ...and much much more
&lt;/h2&gt;

&lt;p&gt;I've tried to cover some of the most important new changes, but there are many other cool new features in ES6 that I don't have space to cover in this article. For more information, you can browse a &lt;a href="http://es6-features.org/"&gt;quick overview of the new features on es6-features.org&lt;/a&gt;, read a &lt;a href="https://exploringjs.com/es6/index.html"&gt;more detailed introduction in the Exploring ES6 book&lt;/a&gt;, and, for even more in-depth details, read the &lt;a href="https://exploringjs.com/es6/index.html"&gt;ECMAScript 2015 Language Specification.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've reached this point, thank you very much. I hope that this tutorial has been helpful for you and I'll see you all in the next.&lt;/p&gt;

&lt;p&gt;If you  want to learn more about Web Development don't forget to to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo/featured"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to make your site more performant</title>
      <author>TheYoungestCoder</author>
      <pubDate>Fri, 25 Jun 2021 19:21:21 +0000</pubDate>
      <link>https://dev.to/theyoungestcoder/how-to-make-your-site-more-performant-3lgm</link>
      <guid>https://dev.to/theyoungestcoder/how-to-make-your-site-more-performant-3lgm</guid>
      <description>&lt;p&gt;Since school ended, it's time for another article! Anyway this is part two of my series "Getting a 100% score in lighthouse" BTW I also updated my previous post in this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-avoid-chaining-critical-requests"&gt;
  &lt;/a&gt;
  1. Avoid chaining critical requests
&lt;/h2&gt;

&lt;p&gt;One of my favorite resources as a web developer was the google fonts api. If you've ever used google fonts you'll know that lighthouse always screams at you to "avoid chaining critical requests". This significantly reduces the speed of webfont load because it has to make a request to load the css, then load the actual font. Luckily it's an easy fix, just follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the /css2 url in your browser&lt;/li&gt;
&lt;li&gt;Copy the entire response&lt;/li&gt;
&lt;li&gt;Paste into your html inside &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-drop-jquery"&gt;
  &lt;/a&gt;
  2. Drop jQuery
&lt;/h2&gt;

&lt;p&gt;When I first used jQuery I instantly fell in love with it's clean syntax and concise API. I know it'll be hard to leave, but most of it's deadweight. Consider using a "mini jQuery" library such as &lt;a href="https://github.com/dciccale/ki.js/"&gt;ki.js&lt;/a&gt;.It may seem challenging at first, but once you get familiar with &lt;code&gt;document.querySelectorAll&lt;/code&gt; and other DOM APIS you'll wonder why you used jQuery in the first place. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-prevent-cumulative-layout-shift"&gt;
  &lt;/a&gt;
  3. Prevent cumulative layout shift
&lt;/h2&gt;

&lt;p&gt;What is cumulative layout shift (CLS for short) you ask? It's basically when the size of some element changes causing another element's position on the page to shift unexpectedly. This is common for images because the browser doesn't know the size of the image before it's downloaded. Including &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes will do the trick. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-minify-resources"&gt;
  &lt;/a&gt;
  4. Minify resources
&lt;/h2&gt;

&lt;p&gt;The file size is definitely affects the time the server takes to respond. Minifying is the fix you need to reduce the size of it. If you use netlify to host your site, there is an option in the build settings to automatically minify scripts and stylesheets. If you're a vscode user, you can also install an extension titled "minify". Also, consider using a different file type if it offers better compression. I've found that &lt;code&gt;webp&lt;/code&gt; was waaaaay more storage efficient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;Less requests makes for faster load times which result in a better lighthouse score. Use all these tips to reduce the number of requests and their size. Stay tuned for my next article "How to improve SEO". Thank you for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>How tedious can job Search as a frontend developer be?</title>
      <author>hillary</author>
      <pubDate>Fri, 25 Jun 2021 19:16:12 +0000</pubDate>
      <link>https://dev.to/hills2003/how-tedious-can-job-search-as-a-frontend-developer-be-3odi</link>
      <guid>https://dev.to/hills2003/how-tedious-can-job-search-as-a-frontend-developer-be-3odi</guid>
      <description>&lt;p&gt;At one point in our coding career we all feel the need to work on something else other than dummy projects from youtube and todo-apps&lt;/p&gt;

&lt;p&gt;that feeling also comes with the idea to start searching for a frontend developer job with some cool pay&lt;/p&gt;

&lt;p&gt;truth be told the journey of job search is really tedious&lt;/p&gt;

&lt;p&gt;i started of my job search as an 18 year old last two months i had no idea of what i needed in order to land my first job,but honestly speaking i've gat the skills man&lt;/p&gt;

&lt;p&gt;i started out building some basic projects so as to fill up my github repo.&lt;br&gt;
  i built few projects like a todo-app ,weather-app,chat-app, and also a movie-search-app , i also exploited several api's&lt;br&gt;
 after this few things i started applying for jobs and in two weeks no response from any job which i applied for&lt;br&gt;
    offcourse i became frustrated,then i decided to go farther , in previous searches i didnt have a resume neither did i have a portfolio to show my works, so i started working on my portfolio it was not much of a deal thou --&amp;gt; &lt;a href="https://hillaryvictor.netlify.app"&gt;https://hillaryvictor.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after that i developed a quite cool resume and also decided to have an online presence and i chose Dev.to &lt;br&gt;
  well my job Search continued , a week passed two weeks passed and after few more weeks i began recieving calls from companies, usually your skills will be tested and few times you may be rejected but whats it all about?&lt;/p&gt;

&lt;p&gt;keep striving a single||multiple rejection does not mean you arent worth it&lt;/p&gt;

&lt;p&gt;at the time &lt;br&gt;
of writing this i am currently undergoing a technical interview&lt;/p&gt;

&lt;p&gt;Keep it cool out there guys||girls and keep codding!! &lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>html</category>
    </item>
    <item>
      <title>Web Application Development Services By Fusion Informatics</title>
      <author>jagadishFNI</author>
      <pubDate>Fri, 25 Jun 2021 18:12:12 +0000</pubDate>
      <link>https://dev.to/jagadish/web-application-development-services-by-fusion-informatics-1go8</link>
      <guid>https://dev.to/jagadish/web-application-development-services-by-fusion-informatics-1go8</guid>
      <description>&lt;p&gt;To know more about web application development and its features please do visit our below link.&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/services/application/web-development-company.html"&gt;https://www.fusioninformatics.com/services/application/web-development-company.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more updates on web application development kindly visit our blog section&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/blog/category/web-application-development/"&gt;https://www.fusioninformatics.com/blog/category/web-application-development/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>cloudskills</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>SaaS Application Development Services By Fusion Informatics</title>
      <author>jagadishFNI</author>
      <pubDate>Fri, 25 Jun 2021 18:07:55 +0000</pubDate>
      <link>https://dev.to/jagadish/saas-application-development-services-by-fusion-informatics-m67</link>
      <guid>https://dev.to/jagadish/saas-application-development-services-by-fusion-informatics-m67</guid>
      <description>&lt;p&gt;Features of SaaS Application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data security&lt;/li&gt;
&lt;li&gt;Automated provisioning&lt;/li&gt;
&lt;li&gt;Rate limiting/QoS&lt;/li&gt;
&lt;li&gt;Subscription-based billing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please do visit below link for more info on SaaS based application development &lt;a href="https://www.fusioninformatics.com/services/application/saas-app-development.html"&gt;https://www.fusioninformatics.com/services/application/saas-app-development.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kindly visit our blog section for more updates on mobile application development&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/blog/category/enterprise-mobile-application-development/"&gt;https://www.fusioninformatics.com/blog/category/enterprise-mobile-application-development/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>saas</category>
      <category>android</category>
      <category>cloudnative</category>
      <category>aws</category>
    </item>
    <item>
      <title>React Native Application Development</title>
      <author>jagadishFNI</author>
      <pubDate>Fri, 25 Jun 2021 18:02:01 +0000</pubDate>
      <link>https://dev.to/jagadish/react-native-application-development-42ic</link>
      <guid>https://dev.to/jagadish/react-native-application-development-42ic</guid>
      <description>&lt;p&gt;React Native App Development- Make your app run on millions of devices&lt;/p&gt;

&lt;p&gt;Visit below link for more information on React Native Application Development&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/services/enterprise-mobility/react-native-development.html"&gt;https://www.fusioninformatics.com/services/enterprise-mobility/react-native-development.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please do visit below link For more updates on  React Native App Development&lt;br&gt;
&lt;a href="https://www.fusioninformatics.com/blog/category/react-native-app-development/"&gt;https://www.fusioninformatics.com/blog/category/react-native-app-development/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>android</category>
      <category>cloud</category>
    </item>
    <item>
      <title>VueJS - Internationalization</title>
      <author>Pablo Veiga</author>
      <pubDate>Fri, 25 Jun 2021 17:42:50 +0000</pubDate>
      <link>https://dev.to/vcpablo/vuejs-internationalization-155g</link>
      <guid>https://dev.to/vcpablo/vuejs-internationalization-155g</guid>
      <description>&lt;p&gt;Since the Internet's boom, more and more web applications are released each day (approximately 576k new websites per day*). Currently, there are over 1.7 billion websites* on the Internet and many of them are accessed by people from all around the world.&lt;/p&gt;

&lt;p&gt;Probably, if you create a website, you will want it to be accessed by as many people as possible. To make that happen and also provide a nice experience for your users, you will have to think about how to deliver it in different languages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* Source: &lt;a href="https://websitesetup.org/news/how-many-websites-are-there"&gt;Website Setup&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In this article I'm going to show you how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a multi-language website using &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; and &lt;a href="https://kazupon.github.io/vue-i18n/"&gt;Vue i18n&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;implement a language switcher;&lt;/li&gt;
&lt;li&gt;use the &lt;code&gt;vuex-persistedstate&lt;/code&gt; package to avoid losing state when reloading the page;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#internationalization-i18n"&gt;
  &lt;/a&gt;
  Internationalization (i18n)
&lt;/h3&gt;

&lt;p&gt;Let's start with some basic concepts.&lt;/p&gt;

&lt;p&gt;If you're still not aware of Internationalization or what i18n really means, here is its official definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Internationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language.&lt;br&gt;
__(Source: &lt;a href="https://www.w3.org/International/questions/qa-i18n#i18n"&gt;W3.org&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Internationalization is often written i18n (English), where 18 is the number of letters between "i" and "n" in the English word (cool, right?!).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vue-i18n"&gt;
  &lt;/a&gt;
  Vue i18n
&lt;/h2&gt;

&lt;p&gt;If you perform a quick search on the internet you will find some solutions to implement i18n to your website or application built using VueJS.&lt;br&gt;
Probably, the most famous (and easy-to-use) one is &lt;a href="https://kazupon.github.io/vue-i18n/"&gt;Vue i18n&lt;/a&gt;, an open source plugin for VueJS that provides a very friendly API to implement translation to different target languages in your website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Assuming you've already created your VueJS project (take a &lt;a href="https://dev.to/vcpablo/vuejs-one-more-way-of-structuring-your-project-13mj"&gt;look at this article&lt;/a&gt; if you don't now where to start from), the first step to begin using the plugin is installing it. In a terminal window, go to the root directory of your project and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add vue-i18n &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You might use NPM as well, depending on your project configuration.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;The Vue i18n package works in a very simple way.&lt;br&gt;
You can set several configurations, but these are the basic ones required for your project to work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the initial language: the language loaded by default;&lt;/li&gt;
&lt;li&gt;the messages: a simple JSON object that contains the messages (translation keys) used for each one of the languages;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;First, create the folder structure that will hold everything together:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a folder called &lt;code&gt;i18n&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory of your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Within the &lt;code&gt;i18n&lt;/code&gt; folder, create an &lt;code&gt;index.js&lt;/code&gt; file and a folder called &lt;code&gt;messages&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is how this first &lt;code&gt;index.js&lt;/code&gt; file will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;VueI18n&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-i18n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./messages&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VueI18n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;VueI18n&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;messages&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;In this example, we're going to build a part of an application that needs to be delivered in three different languages: English (default), Spanish and Brazilian Portuguese. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Within the &lt;code&gt;messages&lt;/code&gt; folder, create three folders named &lt;code&gt;en&lt;/code&gt;, &lt;code&gt;es&lt;/code&gt; and &lt;code&gt;pt-BR´ and, inside each one of them (that represents a different language), create two files: one named&lt;/code&gt;menu.js&lt;code&gt;and another named&lt;/code&gt;index.js` .&lt;/p&gt;

&lt;p&gt;The files will look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/en/menu.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  home: 'Home',&lt;br&gt;
  about: 'About',&lt;br&gt;
  contact: 'Contact'&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/en/index.js&lt;/p&gt;

&lt;p&gt;import menu from './menu'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  menu&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spanish&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/es/menu.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  home: 'Pagina de Inicio',&lt;br&gt;
  about: 'Acerca de',&lt;br&gt;
  contact: 'Contacto'&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/es/index.js&lt;/p&gt;

&lt;p&gt;import menu from './menu'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  menu&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Portuguese (Brazil)&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/pt-BR/menu.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  home: 'Início',&lt;br&gt;
  about: 'Sobre',&lt;br&gt;
  contact: 'Contato'&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// /src/i18n/messages/pt-BR/index.js&lt;/p&gt;

&lt;p&gt;import menu from './menu'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  menu&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you need, you may create more levels within the &lt;code&gt;messages&lt;/code&gt; object to organise them better. Like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
export default {&lt;br&gt;
  links: {&lt;br&gt;
    home: {&lt;br&gt;
      label: 'Home',&lt;br&gt;
      help: 'Click here to go to home page'&lt;br&gt;
    },&lt;br&gt;
    about: {&lt;br&gt;
      label: 'About',&lt;br&gt;
      help: 'Click here to know more about us'&lt;br&gt;
    },&lt;br&gt;
    contact: {&lt;br&gt;
      label: 'Contact',&lt;br&gt;
      help: 'Click here to go to reach out to us'&lt;br&gt;
    }&lt;/p&gt;

&lt;p&gt;}&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Still inside the &lt;code&gt;messages&lt;/code&gt; folder, create an &lt;code&gt;index.js&lt;/code&gt; file like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
import en from './en'&lt;br&gt;
import es from './es'&lt;br&gt;
import ptBR from './pt-BR'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  en,&lt;br&gt;
  es,&lt;br&gt;
  'pt-BR': ptBR&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;code&gt;main.js&lt;/code&gt; file, import the &lt;code&gt;i18n&lt;/code&gt; package and set it to the Vue instance:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
import App from './App.vue'&lt;br&gt;
import i18n from './i18n' &lt;/p&gt;

&lt;p&gt;new Vue({&lt;br&gt;
  i18n,&lt;br&gt;
  render: h =&amp;gt; h(App)&lt;br&gt;
}).$mount('#app')&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now your application is ready to take advantage of the vue-i18n plugin. Let's create a simple scenario to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;We're going to implement a language switcher and put it into a navbar at the top of the page. This switcher will be responsible to set the current &lt;em&gt;locale&lt;/em&gt; of the application using Vuex + VuePersist.&lt;/p&gt;

&lt;p&gt;To make things easier, I chose to use &lt;a href="https://bootstrap-vue.org/"&gt;Bootstrap Vue&lt;/a&gt;. If you don't know it yet, it's worth taking a look. It provides all of the &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; components, wrapped into Vue components :)&lt;/p&gt;

&lt;p&gt;Before creating the component itself, we're going to structure a basic &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; module that will be responsible for managing the language state, we'll also make use of the &lt;a href="https://github.com/robinvdvleuten/vuex-persistedstate"&gt;Vuex Persisted State&lt;/a&gt; plugin, to easily store the state in the local storage so that, when refreshing the page, the user does not lose its selected language.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To add &lt;code&gt;Vuex Persist&lt;/code&gt; in your project, run the following command in the root directory of your project:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;shell&lt;br&gt;
yarn add  vuex-persistedstate --save&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a file named &lt;code&gt;index.js&lt;/code&gt; and a folder named &lt;code&gt;store&lt;/code&gt; inside the &lt;code&gt;src&lt;/code&gt; directory. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create folder named &lt;code&gt;modules&lt;/code&gt; within &lt;code&gt;store&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a file named &lt;code&gt;locale.js&lt;/code&gt; inside the &lt;code&gt;modules&lt;/code&gt; folder and implement it like this:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/store/modules/locale.js&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  namespaced: true,&lt;br&gt;
  state: {&lt;br&gt;
    locale: 'en'&lt;br&gt;
  },&lt;br&gt;
  mutations: {&lt;br&gt;
    setLocale(state, locale) {&lt;br&gt;
      state.locale = locale&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
This is how the &lt;code&gt;store/index.js&lt;/code&gt; will look like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/store/index.js&lt;/p&gt;

&lt;p&gt;import Vue from 'vue'&lt;br&gt;
import Vuex from 'vuex'&lt;br&gt;
import createPersistedState from 'vuex-persistedstate'&lt;/p&gt;

&lt;p&gt;import locale from './modules/locale'&lt;/p&gt;

&lt;p&gt;const persistedState = createPersistedState({&lt;br&gt;
  key: 'vuejs-vue-i18n',&lt;br&gt;
  paths: ['locale']&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;Vue.use(Vuex)&lt;/p&gt;

&lt;p&gt;export default new Vuex.Store({&lt;br&gt;
  modules: {&lt;br&gt;
    locale&lt;br&gt;
  },&lt;br&gt;
  plugins: [persistedState]&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now, let´s implement the &lt;code&gt;LanguageSwitch.vue&lt;/code&gt; component. It will hold all of the available languages and it will use Vuex helpers functions to update the current language:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
  &lt;br&gt;
    
      :disabled="isCurrentLocale('en')"&lt;br&gt;
      @click="onSetLocale('en')"&lt;br&gt;
    &amp;gt;&lt;br&gt;
      EN&lt;br&gt;
    &lt;br&gt;
    
      :disabled="isCurrentLocale('es')"&lt;br&gt;
      @click="onSetLocale('es')"&lt;br&gt;
    &amp;gt;&lt;br&gt;
      ES&lt;br&gt;
    &lt;br&gt;
    
      :disabled="isCurrentLocale('pt-BR')"&lt;br&gt;
      @click="onSetLocale('pt-BR')"&lt;br&gt;
    &amp;gt;&lt;br&gt;
      PT-BR
    &amp;gt;&lt;br&gt;
  &lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/components/LanguageSwitcher.vue (script)&lt;/p&gt;

&lt;p&gt;import { mapState, mapMutations } from 'vuex'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'LanguageSwitcher',&lt;br&gt;
  computed: {&lt;br&gt;
    ...mapState('locale', ['locale']),&lt;br&gt;
    currentLocale() {&lt;br&gt;
      return this.locale.toUpperCase()&lt;br&gt;
    }&lt;br&gt;
  },&lt;br&gt;
  created() {&lt;br&gt;
    this.$i18n.locale = this.locale&lt;br&gt;
  },&lt;br&gt;
  methods: {&lt;br&gt;
    ...mapMutations('locale', ['setLocale']),&lt;br&gt;
    onSetLocale(locale) {&lt;br&gt;
      this.$i18n.locale = locale&lt;br&gt;
      this.setLocale(locale)&lt;br&gt;
    },&lt;br&gt;
    isCurrentLocale(locale) {&lt;br&gt;
      return this.locale === locale&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now, let's create a simple &lt;code&gt;Navbar.vue&lt;/code&gt; component to put the recently created &lt;code&gt;LanguageSwitcher&lt;/code&gt; one.
Notice that, in this case, we use the global &lt;code&gt;$t&lt;/code&gt; helper provided by the Vue i18n plugin to get the proper translation we need to display according to the current locale.
It's very simple to use, all you need to do, it call it passing a translation key as argument.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;html&lt;br&gt;
{{ $t('translation.key') }}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You may also use directly in the &lt;code&gt;script&lt;/code&gt; section of your components, if needed:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;javascript&lt;br&gt;
{&lt;br&gt;
  computed: {&lt;br&gt;
    label() {&lt;br&gt;
       // For this work, you have to create a file named&lt;/code&gt;common.js&lt;code&gt;inside the folder of each language and export it in its respective&lt;/code&gt;index.js&lt;code&gt;file.&lt;br&gt;
       return this.$t('common.label')&lt;br&gt;
    }&lt;br&gt;
  },&lt;br&gt;
  methods: {&lt;br&gt;
    getTitle() {&lt;br&gt;
       return this.$t('common.title')&lt;br&gt;
    }&lt;br&gt;
  }&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is how our &lt;code&gt;Navbar.vue&lt;/code&gt; component will look like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
  &lt;br&gt;
    VueJS vue-i18n&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;b-navbar-toggle target="nav-collapse" /&amp;gt;

&amp;lt;b-collapse id="nav-collapse" is-nav&amp;gt;
  &amp;lt;b-navbar-nav&amp;gt;
    &amp;lt;b-nav-item :to="{ name: 'Home' }"&amp;gt;
      {{ $t('navbar.home') }}
    &amp;lt;/b-nav-item&amp;gt;
    &amp;lt;b-nav-item :to="{ name: 'About' }"&amp;gt;
      {{ $t('navbar.about') }}
    &amp;lt;/b-nav-item&amp;gt;
    &amp;lt;b-nav-item :to="{ name: 'Contact' }"&amp;gt;
      {{ $t('navbar.contact') }}
    &amp;lt;/b-nav-item&amp;gt;
  &amp;lt;/b-navbar-nav&amp;gt;

  &amp;lt;b-navbar-nav class="ml-auto"&amp;gt;
    &amp;lt;LanguageSwitcher /&amp;gt;
  &amp;lt;/b-navbar-nav&amp;gt;
&amp;lt;/b-collapse&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import LanguageSwitcher from '@/components/LanguageSwitcher/LanguageSwitcher'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'Navbar',&lt;br&gt;
  components: {&lt;br&gt;
    LanguageSwitcher&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We're going to create a &lt;code&gt;Layout.vue&lt;/code&gt; component that will hold the &lt;code&gt;Navbar&lt;/code&gt; and will be used within the Views we are going to create next:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`html&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
  &lt;br&gt;
    &lt;br&gt;
      &lt;br&gt;
      &lt;br&gt;
        &lt;br&gt;
      &lt;br&gt;
    &lt;br&gt;
  &lt;br&gt;
&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
// src/views/Layout.vue (script)&lt;/p&gt;

&lt;p&gt;import Navbar from '@/components/Navbar'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'Layout',&lt;br&gt;
  components: {&lt;br&gt;
    Navbar&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For everything to work properly, we need to create the views, implement the &lt;code&gt;Layout&lt;/code&gt; component into them and add them to the &lt;code&gt;router/index.js&lt;/code&gt; file.
In this section, the most important thing is to use the global &lt;code&gt;$t&lt;/code&gt; helper, provided by the Vue i18n package &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;src/components/Home.vue&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.home') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import Layout from './Layout'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'HomeView',&lt;br&gt;
  components: {&lt;br&gt;
    Layout&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/components/About.vue&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.about') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import Layout from './Layout'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'AboutView',&lt;br&gt;
  components: {&lt;br&gt;
    Layout&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/components/Contact.vue&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.contact') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`javascript&lt;/p&gt;

&lt;p&gt;import Layout from './Layout'&lt;/p&gt;

&lt;p&gt;export default {&lt;br&gt;
  name: 'ContactView',&lt;br&gt;
  components: {&lt;br&gt;
    Layout&lt;br&gt;
  }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In order to use nested translation keys, the process is simple, since Vue I18n works  with the full translation key path, like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;template&amp;gt;&lt;br&gt;
  &amp;lt;Layout&amp;gt;&lt;br&gt;
    &amp;lt;h1&amp;gt;{{ $t('navbar.links.contact.label') }}&amp;lt;/h1&amp;gt;&lt;br&gt;
  &amp;lt;/Layout&amp;gt;&lt;br&gt;
&amp;lt;/template&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/router/index.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`javascript&lt;br&gt;
import Vue from 'vue'&lt;br&gt;
import VueRouter from 'vue-router'&lt;/p&gt;

&lt;p&gt;Vue.use(VueRouter)&lt;/p&gt;

&lt;p&gt;const routes = [&lt;br&gt;
  {&lt;br&gt;
    path: '/',&lt;br&gt;
    name: 'Home',&lt;br&gt;
    component: () =&amp;gt; import('@/views/Home')&lt;br&gt;
  },&lt;br&gt;
  {&lt;br&gt;
    path: '/about',&lt;br&gt;
    name: 'About',&lt;br&gt;
    component: () =&amp;gt; import('@/views/About')&lt;br&gt;
  },&lt;br&gt;
  {&lt;br&gt;
    path: '/contact',&lt;br&gt;
    name: 'Contact',&lt;br&gt;
    component: () =&amp;gt; import('@/views/Contact')&lt;br&gt;
  }&lt;br&gt;
]&lt;/p&gt;

&lt;p&gt;const router = new VueRouter({&lt;br&gt;
  mode: 'history',&lt;br&gt;
  routes&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default router&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is how the application should work after the full implementation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/f0ed53a41f0a42b59676af6f4ff6f06b"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJVTnyU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.loom.com/sessions/thumbnails/f0ed53a41f0a42b59676af6f4ff6f06b-with-play.gif"&gt; &lt;p&gt;VueJS Internationalization Sample Video&lt;/p&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the fully-working source code in &lt;a href="https://github.com/vcpablo/vuejs2-vue-i18n"&gt;this link&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-features"&gt;
  &lt;/a&gt;
  Other features
&lt;/h3&gt;

&lt;p&gt;Besides translating simple pieces of text, Vue I18n also provides other useful features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/formatting.html#named-formatting"&gt;Formatting Interpolation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/pluralization.html"&gt;Pluralization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/datetime.html"&gt;Date Time Localization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://kazupon.github.io/vue-i18n/guide/number.html"&gt;Number Localization&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may explore the &lt;a href="https://kazupon.github.io/vue-i18n/"&gt;website&lt;/a&gt; to find out more about the tool.&lt;/p&gt;




&lt;p&gt;I hope you liked it.&lt;br&gt;
Please, comment and share!&lt;/p&gt;

&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@benwhitephotography"&gt;Ben White&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>i18n</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Async/Await Design Patterns for Cleaner Async Logic</title>
      <author>Mastering JS</author>
      <pubDate>Fri, 25 Jun 2021 17:26:41 +0000</pubDate>
      <link>https://dev.to/masteringjs/5-async-await-design-patterns-for-cleaner-async-logic-1fkh</link>
      <guid>https://dev.to/masteringjs/5-async-await-design-patterns-for-cleaner-async-logic-1fkh</guid>
      <description>&lt;p&gt;At &lt;a href="https://masteringjs.io/"&gt;Mastering JS&lt;/a&gt;, we love &lt;a href="https://masteringjs.io/tutorials/fundamentals/async-await"&gt;async/await&lt;/a&gt;. You might even say we wrote the &lt;a href="https://asyncawait.net/"&gt;book on async/await&lt;/a&gt;. Here's 5 design patterns we use regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#async-raw-foreach-endraw-"&gt;
  &lt;/a&gt;
  Async &lt;a href="https://masteringjs.io/tutorials/fundamentals/foreach"&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Do &lt;strong&gt;not&lt;/strong&gt; use an async &lt;a href="https://masteringjs.io/tutorials/fundamentals/callbacks"&gt;callback&lt;/a&gt; with &lt;code&gt;forEach()&lt;/code&gt;. In general, the way to simulate &lt;a href="https://masteringjs.io/tutorials/fundamentals/async-foreach"&gt;&lt;code&gt;forEach()&lt;/code&gt; with async functions&lt;/a&gt; is to use &lt;code&gt;await Promise.all([arr.map(callback)])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Do this:&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slept for&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="c1"&gt;// Not this:&lt;/span&gt;
&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slept for&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-return-await-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;return await&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Async/await works with &lt;code&gt;try/catch&lt;/code&gt;... almost. There's a gotcha. If you &lt;code&gt;await&lt;/code&gt; on a promise that rejects, JavaScript throws an error that you can &lt;code&gt;catch&lt;/code&gt;. But if you &lt;code&gt;return&lt;/code&gt; a promise that rejects, that ends up as an &lt;a href="https://thecodebarbarian.com/unhandled-promise-rejections-in-node.js.html"&gt;unhandled promise rejection&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oops!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This runs...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This does NOT run!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few workarounds for this quirk, but one approach we like is using &lt;code&gt;return await&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This runs!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#delayed-raw-await-endraw-"&gt;
  &lt;/a&gt;
  Delayed &lt;code&gt;await&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Sometimes you want to call an &lt;a href="https://thecodebarbarian.com/async-functions-in-javascript.html"&gt;async function&lt;/a&gt;, do something else, and then &lt;code&gt;await&lt;/code&gt; on the async function. Promises are just variables in JavaScript, so you can call an async function, get the promise response, and &lt;code&gt;await&lt;/code&gt; on it later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Execute the function, but don't `await` so we can `setTimeout()`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;waitForEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wait until `ee` emits a 'test' event&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;waitForEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-await-endraw-with-promise-chaining"&gt;
  &lt;/a&gt;
  &lt;code&gt;await&lt;/code&gt; with &lt;a href="https://masteringjs.io/tutorials/fundamentals/promise-chaining"&gt;Promise Chaining&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We recommend using &lt;a href="https://masteringjs.io/axios"&gt;Axios&lt;/a&gt; over &lt;code&gt;fetch()&lt;/code&gt;, but in some cases you may need to use &lt;code&gt;fetch()&lt;/code&gt;. And &lt;code&gt;fetch()&lt;/code&gt; famously requires you to asynchronously parse the response body. Here's how you can make a request with &lt;code&gt;fetch()&lt;/code&gt; and parse the response body with 1 &lt;code&gt;await&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another quirk of &lt;code&gt;fetch()&lt;/code&gt; is that it doesn't throw an error if the server responds with an error code, like 400. Here's how you can make &lt;code&gt;fetch()&lt;/code&gt; throw a catchable error if the response code isn't in the 200 or 300 range.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
  &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server responded with status code &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;
  &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#waiting-for-events"&gt;
  &lt;/a&gt;
  Waiting for Events
&lt;/h2&gt;

&lt;p&gt;Event emitters are a common pattern in JavaScript, but they don't work well with async/await because they're not &lt;a href="https://masteringjs.io/tutorials/fundamentals/promise"&gt;promises&lt;/a&gt;. Here's how you can &lt;code&gt;await&lt;/code&gt; on an event from a Node.js event emitter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Wait until `ee` emits a 'test' event&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>node</category>
      <category>vue</category>
      <category>async</category>
    </item>
    <item>
      <title>Introduction to Security, Identity, and Compliance with AWS</title>
      <author>Adit Modi</author>
      <pubDate>Fri, 25 Jun 2021 17:16:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-security-identity-and-compliance-with-aws-3ike</link>
      <guid>https://dev.to/aws-builders/introduction-to-security-identity-and-compliance-with-aws-3ike</guid>
      <description>&lt;p&gt;While companies increasingly look to cloud computing as a means to expand, modernize and stay competitive, so too do those companies expose themselves to new risks. In fact, Ermetic and IDC report that 80% of CISOs claim their company has had a cloud data breach in the past 18 months. Nearly half of those (43%) had experienced 10 or more breaches.&lt;/p&gt;

&lt;p&gt;The benefits of cloud computing are numerous, but organizations cannot make the switch to this modern platform without understanding the risks involved and, more importantly, how to protect themselves, their staff and their customers.&lt;/p&gt;

&lt;p&gt;Amazon Web Services (AWS) is a cloud service provider that’s on almost every company’s radar today. But many AWS customers today wonder what the best approach to security is and how to get there.&lt;/p&gt;

&lt;p&gt;companies often struggle to understand how they can protect and secure their data, their customers, and their very existence before moving to (or while expanding on) AWS. &lt;/p&gt;

&lt;p&gt;In this blog post, we will discuss some of the most important AWS security services that protect your data, accounts, and workloads from unauthorized access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQD5q0OH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzjc1a0bneocif3qol2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQD5q0OH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzjc1a0bneocif3qol2i.png" alt="Introduction to Developer Tools with AWS (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My Background: Cloud Engineer | AWS Community Builder | AWS Educate Cloud Ambassador | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Introduction to AWS is a Series containing different articles that provide a basic introduction to different aws topics/categories. Each article covers the detailed guide on how to work with particular topic/category . This series aims at providing "A Getting Started Guide on Different aws topics / categories ."&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#security-identity-and-compliance"&gt;
  &lt;/a&gt;
  Security, Identity, and Compliance
&lt;/h1&gt;

&lt;p&gt;Using AWS, you will gain the control and confidence you need to securely run your business with the most flexible and secure cloud computing environment available today. As an AWS customer, you will benefit from AWS data centers and a network architected to protect your information, identities, applications, and devices. With AWS, you can improve your ability to meet core security and compliance requirements, such as data locality, protection, and confidentiality with our comprehensive services and features.&lt;/p&gt;

&lt;p&gt;AWS allows you to automate manual security tasks so you can shift your focus to scaling and innovating your business. Plus, you pay only for the services that you use. All customers benefit from AWS being the only commercial cloud that has had its service offerings and associated supply chain vetted and accepted as secure enough for top-secret workloads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-security-hub"&gt;
  &lt;/a&gt;
  AWS Security Hub
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NsKhs-rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/889xibs9c607uns5own2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsKhs-rg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/889xibs9c607uns5own2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Security Hub gives you a comprehensive view of your high-priority security alerts and compliance status across AWS accounts. &lt;/p&gt;

&lt;p&gt;There are a range of powerful security tools at your disposal, from firewalls and endpoint protection to vulnerability and compliance scanners. But oftentimes this leaves your team switching back-and-forth between these tools to deal with hundreds, and sometimes thousands, of security alerts every day. With Security Hub, you now have a single place that aggregates, organizes, and prioritizes your security alerts, or findings, from multiple AWS services, such as Amazon GuardDuty, Amazon Inspector, and Amazon Macie, as well as from AWS Partner solutions. &lt;/p&gt;

&lt;p&gt;Your findings are visually summarized on integrated dashboards with actionable graphs and tables. You can also continuously monitor your environment using automated compliance checks based on the AWS best practices and industry standards your organization follows. Get started with AWS Security Hub just a few clicks in the Management Console and once enabled, Security Hub will begin aggregating and prioritizing findings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-cloud-directory"&gt;
  &lt;/a&gt;
  Amazon Cloud Directory
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQ8rnhdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tkffqs1njeq2tbpdo38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQ8rnhdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tkffqs1njeq2tbpdo38.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Cloud Directory enables you to build flexible, cloud-native directories for organizing hierarchies of data along multiple dimensions. With Cloud Directory, you can create directories for a variety of use cases, such as organizational charts, course catalogs, and device registries. &lt;/p&gt;

&lt;p&gt;While traditional directory solutions, such as Active Directory Lightweight Directory Services (AD LDS) and other LDAP-based directories, limit you to a single hierarchy, Cloud Directory offers you the flexibility to create directories with hierarchies that span multiple dimensions. For example, you can create an organizational chart that can be navigated through separate hierarchies for reporting structure, location, and cost center.&lt;/p&gt;

&lt;p&gt;Amazon Cloud Directory automatically scales to hundreds of millions of objects and provides an extensible schema that can be shared with multiple applications. As a fully-managed service, Cloud Directory eliminates time-consuming and expensive administrative tasks, such as scaling infrastructure and managing servers. You simply define the schema, create a directory, and then populate your directory by making calls to the Cloud Directory API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-identity-and-access-management"&gt;
  &lt;/a&gt;
  AWS Identity and Access Management
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_UDOstm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq2j403zyou516on07lg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_UDOstm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq2j403zyou516on07lg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Identity and Access Management (IAM) enables you to securely control access to AWS services and resources for your users. Using IAM, you can create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources. IAM allows you to do the following:&lt;/p&gt;

&lt;p&gt;Manage IAM users and their access: You can create users in IAM, assign them individual security credentials (access keys, passwords, and multi-factor authentication devices), or request temporary security credentials to provide users access to AWS services and resources. You can manage permissions in order to control which operations a user can perform.&lt;/p&gt;

&lt;p&gt;Manage IAM roles and their permissions: You can create roles in IAM and manage permissions to control which operations can be performed by the entity, or AWS service, that assumes the role. You can also define which entity is allowed to assume the role.&lt;/p&gt;

&lt;p&gt;Manage federated users and their permissions: You can enable identity federation to allow existing identities (users, groups, and roles) in your enterprise to access the AWS Management Console, call AWS APIs, and access resources, without the need to create an IAM user for each identity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-guardduty"&gt;
  &lt;/a&gt;
  Amazon GuardDuty
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HHJ-iyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6raxo7c32spblqjigx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HHJ-iyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6raxo7c32spblqjigx3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon GuardDuty is a threat detection service that continuously monitors for malicious or unauthorized behavior to help you protect your AWS accounts and workloads. It monitors for activity such as unusual API calls or potentially unauthorized deployments that indicate a possible account compromise. GuardDuty also detects potentially compromised instances or reconnaissance by attackers.&lt;/p&gt;

&lt;p&gt;Enabled with a few clicks in the AWS Management Console, Amazon GuardDuty can immediately begin analyzing billions of events across your AWS accounts for signs of risk. GuardDuty identifies suspected attackers through integrated threat intelligence feeds and uses machine learning to detect anomalies in account and workload activity. When a potential threat is detected, the service delivers a detailed security alert to the GuardDuty console and Amazon CloudWatch Events. This makes alerts actionable and easy to integrate into existing event management and workflow systems.&lt;/p&gt;

&lt;p&gt;Amazon GuardDuty is cost effective and easy. It does not require you to deploy and maintain software or security infrastructure, meaning it can be enabled quickly with no risk of negatively impacting existing application workloads. There are no upfront costs with GuardDuty, no software to deploy, and no threat intelligence feeds required. Customers pay for the events analyzed by GuardDuty and there is a 30-day free trial available for every new account to the service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-inspector"&gt;
  &lt;/a&gt;
  Amazon Inspector
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P4TXBH2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r791sblh8pkg2r4e61h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4TXBH2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r791sblh8pkg2r4e61h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Inspector is an automated security assessment service that helps improve the security and compliance of applications deployed on AWS. Amazon Inspector automatically assesses applications for exposure, vulnerabilities, and deviations from best practices. After performing an assessment, Amazon Inspector produces a detailed list of security findings prioritized by level of severity. These findings can be reviewed directly or as part of detailed assessment reports which are available via the Amazon Inspector console or API.&lt;/p&gt;

&lt;p&gt;Amazon Inspector security assessments help you check for unintended network accessibility of your Amazon EC2 instances and for vulnerabilities on those EC2 instances. Amazon Inspector assessments are offered to you as pre-defined rules packages mapped to common security best practices and vulnerability definitions. Examples of built-in rules include checking for access to your EC2 instances from the internet, remote root login being enabled, or vulnerable software versions installed. These rules are regularly updated by AWS security researchers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-macie"&gt;
  &lt;/a&gt;
  Amazon Macie
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70TCVh6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l85cbtps1ycl72zdvok8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70TCVh6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l85cbtps1ycl72zdvok8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Macie is a security service that uses machine learning to automatically discover, classify, and protect sensitive data in AWS. Amazon Macie recognizes sensitive data such as personally identifiable information (PII) or intellectual property, and provides you with dashboards and alerts that give visibility into how this data is being accessed or moved. The fully managed service continuously monitors data access activity for anomalies, and generates detailed alerts when it detects risk of unauthorized access or inadvertent data leaks. Today, Amazon Macie is available to protect data stored in Amazon S3, with support for additional AWS data stores coming later this year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-artifact"&gt;
  &lt;/a&gt;
  AWS Artifact
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--srhG4LGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjdopew82vny5li5vpro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--srhG4LGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjdopew82vny5li5vpro.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Artifact is your go-to, central resource for compliance-related information that matters to you. It provides on-demand access to AWS’ security and compliance reports and select online agreements. Reports available in AWS Artifact include our Service Organization Control (SOC) reports, Payment Card Industry (PCI) reports, and certifications from accreditation bodies across geographies and compliance verticals that validate the implementation and operating effectiveness of AWS security controls. Agreements available in AWS Artifact include the Business Associate Addendum (BAA) and the Nondisclosure Agreement (NDA).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-certificate-manager"&gt;
  &lt;/a&gt;
  AWS Certificate Manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1N8GIrRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2qwx6t65qh1pdkq6g1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1N8GIrRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2qwx6t65qh1pdkq6g1r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Certificate Manager is a service that lets you easily provision, manage, and deploy Secure Sockets Layer/Transport Layer Security (SSL/TLS) certiﬁcates for use with AWS services and your internal connected resources. SSL/TLS certiﬁcates are used to secure network communications and establish the identity of websites over the Internet as well as resources on private networks. AWS Certificate Manager removes the time-consuming manual process of purchasing, uploading, and renewing SSL/TLS certiﬁcates.&lt;/p&gt;

&lt;p&gt;With AWS Certificate Manager, you can quickly request a certificate, deploy it on ACM-integrated AWS resources, such as Elastic Load Balancing, Amazon CloudFront distributions, and APIs on API Gateway, and let AWS Certificate Manager handle certificate renewals. It also enables you to create private certificates for your internal resources and manage the certificate lifecycle centrally. Public and private certificates provisioned through AWS Certificate Manager for use with ACM-integrated services are free. You pay only for the AWS resources you create to run your application. With AWS Certificate Manager Private Certificate Authority, you pay monthly for the operation of the private CA and for the private certificates you issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-cloudhsm"&gt;
  &lt;/a&gt;
  AWS CloudHSM
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrVDZ_07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nda7h942yoe0n0z9ksug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrVDZ_07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nda7h942yoe0n0z9ksug.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AWS CloudHSM is a cloud-based hardware security module (HSM) that enables you to easily generate and use your own encryption keys on the AWS Cloud. With CloudHSM, you can manage your own encryption keys using FIPS 140-2 Level 3 validated HSMs. CloudHSM offers you the flexibility to integrate with your applications using industry-standard APIs, such as PKCS#11, Java Cryptography Extensions (JCE), and Microsoft CryptoNG (CNG) libraries.&lt;/p&gt;

&lt;p&gt;CloudHSM is standards-compliant and enables you to export all of your keys to most other commercially-available HSMs, subject to your configurations. It is a fully-managed service that automates time-consuming administrative tasks for you, such as hardware provisioning, software patching, high-availability, and backups. CloudHSM also enables you to scale quickly by adding and removing HSM capacity on-demand, with no up-front costs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-directory-service"&gt;
  &lt;/a&gt;
  AWS Directory Service
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyrXbRW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ufge1r5a7z1nuhwf80b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyrXbRW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ufge1r5a7z1nuhwf80b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Directory Service for Microsoft Active Directory, also known as AWS Managed Microsoft AD, enables your directory-aware workloads and AWS resources to use managed Active Directory in the AWS Cloud. AWS Managed Microsoft AD is built on actual Microsoft Active Directory and does not require you to synchronize or replicate data from your existing Active Directory to the cloud. You can use standard Active Directory administration tools and take advantage of built-in Active Directory features such as Group Policy and single sign-on (SSO). With AWS Managed Microsoft AD, you can easily join Amazon EC2 and Amazon RDS for SQL Server instances to a domain, and use AWS Enterprise IT applications such as Amazon WorkSpaces with Active Directory users and groups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-firewall-manager"&gt;
  &lt;/a&gt;
  AWS Firewall Manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7WQC4r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xgknrtefv3sltz4lqaa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7WQC4r5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xgknrtefv3sltz4lqaa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Firewall Manager is a security management service that makes it easier to centrally configure and manage AWS WAF rules across your accounts and applications. Using Firewall Manager, you can easily roll out AWS WAF rules for your Application Load Balancers and Amazon CloudFront distributions across accounts in AWS Organizations. As new applications are created, Firewall Manager also makes it easy to bring new applications and resources into compliance with a common set of security rules from day one. Now you have a single service to build firewall rules, create security policies, and enforce them in a consistent, hierarchical manner across your entire Application Load Balancers and Amazon CloudFront infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-key-management-service"&gt;
  &lt;/a&gt;
  AWS Key Management Service
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlZiyabD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e7ipxdkapt48ygqs12k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlZiyabD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e7ipxdkapt48ygqs12k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Key Management Service (KMS) makes it easy for you to create and manage keys and control the use of encryption across a wide range of AWS services and in your applications. AWS KMS is a secure and resilient service that uses FIPS 140-2 validated hardware security modules to protect your keys. AWS KMS is integrated with AWS CloudTrail to provide you with logs of all key usage to help meet your regulatory and compliance needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-secrets-manager"&gt;
  &lt;/a&gt;
  AWS Secrets Manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ncrHpNyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oxotiztcccxyr7imyz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ncrHpNyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6oxotiztcccxyr7imyz2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Secrets Manager helps you protect secrets needed to access your applications, services, and IT resources. The service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Users and applications retrieve secrets with a call to Secrets Manager APIs, eliminating the need to hardcode sensitive information in plain text. Secrets Manager offers secret rotation with built-in integration for Amazon RDS for MySQL, PostgreSQL, and Amazon Aurora. Also, the service is extensible to other types of secrets, including API keys and OAuth tokens. In addition, Secrets Manager enables you to control access to secrets using fine-grained permissions and audit secret rotation centrally for resources in the AWS Cloud, third-party services, and on-premises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-shield"&gt;
  &lt;/a&gt;
  AWS Shield
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUEL4aAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jio6hk584xksrmmz4wuj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUEL4aAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jio6hk584xksrmmz4wuj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards web applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield: Standard and Advanced.&lt;/p&gt;

&lt;p&gt;All AWS customers beneﬁt from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your website or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks.&lt;/p&gt;

&lt;p&gt;For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (Amazon EC2), Elastic Load Balancing (ELB), Amazon CloudFront, and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (Amazon EC2), Elastic Load Balancing (ELB), Amazon CloudFront, and Amazon Route 53 charges.&lt;/p&gt;

&lt;p&gt;AWS Shield Advanced is available globally on all Amazon CloudFront and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (Amazon EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions: Northern Virginia, Oregon, Ireland, Tokyo, and Northern California.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-single-signon"&gt;
  &lt;/a&gt;
  AWS Single Sign-On
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1L22cqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfobjd9b78rms2lbdvxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1L22cqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfobjd9b78rms2lbdvxv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Single Sign-On (SSO) is a cloud SSO service that makes it easy to centrally manage SSO access to multiple AWS accounts and business applications. With just a few clicks, you can enable a highly available SSO service without the upfront investment and on-going maintenance costs of operating your own SSO infrastructure. With AWS SSO, you can easily manage SSO access and user permissions to all of your accounts in AWS Organizations centrally. AWS SSO also includes built-in SAML integrations to many business applications, such as Salesforce, Box, and Office 365. Further, by using the AWS SSO application configuration wizard, you can create Security Assertion Markup Language (SAML) 2.0 integrations and extend SSO access to any of your SAML-enabled applications. Your users simply sign in to a user portal with credentials they configure in AWS SSO or using their existing corporate credentials to access all their assigned accounts and applications from one place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-waf"&gt;
  &lt;/a&gt;
  AWS WAF
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4dJsoOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kww4zi9to51thz43s8zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4dJsoOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kww4zi9to51thz43s8zh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS WAF is a web application ﬁrewall that helps protect your web applications from common web exploits that could aﬀect application availability, compromise security, or consume excessive resources. AWS WAF gives you control over which traﬃc to allow or block to your web application by deﬁning customizable web security rules. You can use AWS WAF to create custom rules that block common attack patterns, such as SQL injection or cross-site scripting, and rules that are designed for your speciﬁc application. New rules can be deployed within minutes, letting you respond quickly to changing traﬃc patterns. Also, AWS WAF includes a full-featured API that you can use to automate the creation, deployment, and maintenance of web security rules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-organizations"&gt;
  &lt;/a&gt;
  AWS Organizations
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ip2FcYnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfovnz2mp7lh0trbogd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ip2FcYnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfovnz2mp7lh0trbogd8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Organizations offers policy-based management for multiple AWS accounts. With Organizations, you can create groups of accounts, automate account creation, apply and manage policies for those groups. Organizations enables you to centrally manage policies across multiple accounts, without requiring custom scripts and manual processes.&lt;/p&gt;

&lt;p&gt;Using AWS Organizations, you can create Service Control Policies (SCPs) that centrally control AWS service use across multiple AWS accounts. You can also use Organizations to help automate the creation of new accounts through APIs. Organizations helps simplify the billing for multiple accounts by enabling you to setup a single payment method for all the accounts in your organization through consolidated billing. AWS Organizations is available to all AWS customers at no additional charge.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;AWS provides services that help you protect your data, accounts, and workloads from unauthorized access. AWS provide encryption and key management and threat detection that continuously monitors and protects your accounts and workloads.&lt;br&gt;
AWS identifies threats by continuously monitoring the network activity and account behavior within your cloud environment.&lt;br&gt;
AWS gives you a comprehensive view of your compliance status and continuously monitors your environment using automated compliance checks based on the AWS best practices and industry standards your organization follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrBTxifk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kqmaghkoz2a35z36q3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrBTxifk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kqmaghkoz2a35z36q3w.png" alt="2021-06-22 (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this guide helps you with the Introduction to Security, Identity, and Compliance with AWS, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;|&lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;.&lt;br&gt;
If you are interested in learning more about AWS Services then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>aws</category>
      <category>security</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>New PFP (part 2)!</title>
      <author>Calin Baenen</author>
      <pubDate>Fri, 25 Jun 2021 17:14:00 +0000</pubDate>
      <link>https://dev.to/baenencalin/new-pfp-part-2-4h3b</link>
      <guid>https://dev.to/baenencalin/new-pfp-part-2-4h3b</guid>
      <description>&lt;p&gt;This also serves as my coming out as NB (Non-Binary).&lt;/p&gt;

</description>
      <category>watercooler</category>
    </item>
    <item>
      <title>Full Stack Developer Roadmap 2021</title>
      <author>Hidayt Rahman</author>
      <pubDate>Fri, 25 Jun 2021 17:12:12 +0000</pubDate>
      <link>https://dev.to/hidaytrahman/full-stack-developer-roadmap-2021-92h</link>
      <guid>https://dev.to/hidaytrahman/full-stack-developer-roadmap-2021-92h</guid>
      <description>&lt;p&gt;Most of the newcomers are planning to go for full-stack development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-fullstack-developer"&gt;
  &lt;/a&gt;
  What is a full-stack developer?
&lt;/h2&gt;

&lt;p&gt;A person who can develop the entire application (both client and server).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Master all the techniques involved in a development project.&lt;/li&gt;
&lt;li&gt;Can provide help to all the team members&lt;/li&gt;
&lt;li&gt;Can reduce the cost of the project&lt;/li&gt;
&lt;li&gt;Can reduce the time used for team communication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The solution chosen can be dependent on developer skills&lt;/li&gt;
&lt;li&gt;The solution chosen can be wrong for the project&lt;/li&gt;
&lt;li&gt;Being a full-stack developer is increasingly complex&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;Is designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets and scripting languages such as JavaScript and mandatory for all web developers&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic HTML and DOM&lt;/li&gt;
&lt;li&gt;Form&lt;/li&gt;
&lt;li&gt;HTML5 APIs (Storage)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A beginner can start from w3schools&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;CSS — Styling for web pages (Makeup HTML)&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selectors (class, ID, element, attribute, pseudo)&lt;/li&gt;
&lt;li&gt;Box Model&lt;/li&gt;
&lt;li&gt;Position (absolute, fixed, relative)&lt;/li&gt;
&lt;li&gt;Flex, Grid&lt;/li&gt;
&lt;li&gt;Media Query (screen, print)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;Javascript is the programming language of the Web.&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basics (var, loop, statements)&lt;/li&gt;
&lt;li&gt;Scope&lt;/li&gt;
&lt;li&gt;Closure&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Hoisting&lt;/li&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Event handling&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;React is an open-source front-end JavaScript library for building user interfaces or UI components. React can be used as a base in the development of single-page or mobile applications.&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Hooks&lt;/li&gt;
&lt;li&gt;Router&lt;/li&gt;
&lt;li&gt;Data binding&lt;/li&gt;
&lt;li&gt;State Management&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  NodeJS
&lt;/h2&gt;

&lt;p&gt;Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser.&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;File Storage (CRUD)&lt;/li&gt;
&lt;li&gt;OS&lt;/li&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;li&gt;Sync and Async&lt;/li&gt;
&lt;li&gt;Event Loop&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#expressjs"&gt;
  &lt;/a&gt;
  ExpressJS
&lt;/h2&gt;

&lt;p&gt;Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Middleware's&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Error Handling&lt;/li&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Authorization&lt;/li&gt;
&lt;li&gt;Crypto&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#mysql"&gt;
  &lt;/a&gt;
  MySQL
&lt;/h2&gt;

&lt;p&gt;MySQL is an open-source relational database management system. Its name is a combination of “My”, the name of co-founder Michael Widenius’s daughter, and “SQL”, the abbreviation for Structured Query Language&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is not necessary but basic knowledge will definitely help you with the relational database management system.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongodb"&gt;
  &lt;/a&gt;
  MongoDB
&lt;/h2&gt;

&lt;p&gt;MongoDB is a source-available cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas&lt;/p&gt;

&lt;p&gt;Must read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;collections&lt;/li&gt;
&lt;li&gt;Schema&lt;/li&gt;
&lt;li&gt;Aggregation&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#live-projects-and-deployments"&gt;
  &lt;/a&gt;
  Live Projects and Deployments
&lt;/h2&gt;

&lt;p&gt;Woohoo!!!!!!! 🥳 🥳&lt;/p&gt;

&lt;p&gt;You did it….. now it's time to develop something with a real-world solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-ideas"&gt;
  &lt;/a&gt;
  Project Ideas
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Blog (CRUD)&lt;/li&gt;
&lt;li&gt;Todo App&lt;/li&gt;
&lt;li&gt;Chat Bot&lt;/li&gt;
&lt;li&gt;Quiz App&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!!! You’re now a full-stack developer. 😎&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now consider yourself as a one-man army. 🤝&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;All the best &amp;lt;Happy Code /&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

</description>
      <category>fullstack</category>
      <category>devops</category>
      <category>javascript</category>
      <category>mongodb</category>
    </item>
  </channel>
</rss>
