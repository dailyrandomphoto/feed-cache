<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best dev tool ever!!</title>
      <author>ImgSrc</author>
      <pubDate>Thu, 21 Oct 2021 05:14:46 +0000</pubDate>
      <link>https://dev.to/imgsrcspace/best-dev-tool-ever-3bmb</link>
      <guid>https://dev.to/imgsrcspace/best-dev-tool-ever-3bmb</guid>
      <description>&lt;p&gt;Hey everyone, &lt;br&gt;
Imgsrc.space is the best Placeholder service ever. It's just like searching on google images but &lt;em&gt;you won't even need to leave your coding environment&lt;/em&gt;. We have a vast a library of around &lt;strong&gt;3 million&lt;/strong&gt; images and videos, so all you have to do is enter your search term and we will do  the rest. Totally free. &lt;br&gt;
&lt;a href="https://imgsrc.space"&gt;Imgsrc.space&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-to-use-our-placeholders"&gt;
  &lt;/a&gt;
  How To Use Our Placeholders?
&lt;/h1&gt;

&lt;p&gt;Well there are 2 ways to use them&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The easy way - Works everywhere no platform dependence&lt;/li&gt;
&lt;li&gt;The easier way - Works in your web pages with a js library&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-easy-way"&gt;
  &lt;/a&gt;
  The easy way
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#get-a-specific-image"&gt;
  &lt;/a&gt;
  Get a specific image
&lt;/h3&gt;

&lt;p&gt;Just add the search term you want at the end of the url after / and we will deliver it. Simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://imgsrc.space/cat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nq07FHHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9xsmwlp7lhqvj0nk6u9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nq07FHHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9xsmwlp7lhqvj0nk6u9.jpg" alt="Image of a cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resizing-images"&gt;
  &lt;/a&gt;
  Resizing images
&lt;/h3&gt;

&lt;p&gt;Imgsrc.space can also resize the images for you. To enter your desired dimensions put an "?" at the end of the search term and then your enter your desired height and width. Here "h" stands for height and w stands for width. They must be separated by an &amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://imgsrc.space/architecture?h=400&amp;amp;w=400
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zEYeCR03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xouey169tek2r5u8gi9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zEYeCR03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xouey169tek2r5u8gi9t.png" alt="Image of architecture 400by400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#autoresizing-images"&gt;
  &lt;/a&gt;
  AutoResizing images
&lt;/h3&gt;

&lt;p&gt;If you only provide a single dimension parameter (i.e only height or width) Imgsrc.Space would automatically resize the other parameters accordingly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://imgsrc.space/paris?h=400
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nWiablnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkxo4z2btrw3ue3jh595.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWiablnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkxo4z2btrw3ue3jh595.png" alt="Image of Paris"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-a-specific-video"&gt;
  &lt;/a&gt;
  Getting a specific Video
&lt;/h3&gt;

&lt;p&gt;To get a specific image just enter the search word in the image source after a dot and a space followed by an -v&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://imgsrc.space/ocean-v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://imgsrc.space/ocean-v"&gt;try it&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-easier-way"&gt;
  &lt;/a&gt;
  The easier way
&lt;/h2&gt;

&lt;p&gt;If you are writing html pages, then we have a good news, you can use our js library to make things easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.jsdelivr.net/gh/imgsrc-space/imgsrc.space-js-library/main.js" &amp;gt; &amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy and paste the above script tag to the &lt;strong&gt;&lt;em&gt;TOP&lt;/em&gt;&lt;/strong&gt; of your html page (in the head tag), and that's it.&lt;/p&gt;

&lt;p&gt;Now to use a image just enter a "dot followed by a space and then your search term ".Here are some examples of what you can do with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src=". cow" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src=". dog?h=500&amp;amp;w=70" &amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src=". sunset?w=700" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;video&amp;gt; &amp;lt;source src=". car-v" type="video/mp4"&amp;gt; &amp;lt;/video&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more details in this &lt;a href="https://imgsrc.space/documentation.src/index.htm#Using-our-JS-library"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this would save you guys some time. Happy coding üòÄüëçüèº&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>productivity</category>
    </item>
    <item>
      <title>After refresh scroll page to Top/Middle/Footer.</title>
      <author>Vickyvn</author>
      <pubDate>Thu, 21 Oct 2021 04:59:51 +0000</pubDate>
      <link>https://dev.to/vickyvn5/after-refresh-scroll-page-to-topmiddlefooter-42bk</link>
      <guid>https://dev.to/vickyvn5/after-refresh-scroll-page-to-topmiddlefooter-42bk</guid>
      <description>&lt;p&gt;Here we learn how can we scroll our page onclick button or after Reload page.&lt;/p&gt;

&lt;p&gt;simple we adding ref in our html tags where you want to scroll page.&lt;br&gt;
example &lt;br&gt;
&amp;lt; div class="top" ref="goToTop"&amp;gt; ... &amp;lt; /div &amp;gt;&lt;br&gt;
or&lt;br&gt;
&amp;lt; div class="middle" ref="goToMiddle"&amp;gt; ... &amp;lt; /div &amp;gt;&lt;br&gt;
or&lt;br&gt;
&amp;lt; div class="footer" ref="goToFooter"&amp;gt; ... &amp;lt; /div &amp;gt;&lt;/p&gt;

&lt;p&gt;in vue js we handled&lt;br&gt;
// Create method&lt;br&gt;
scrollToElement(ref) {&lt;br&gt;
    window.scrollTo(0,0);&lt;br&gt;
    this.$scrollTo(ref, 1000);&lt;br&gt;
},&lt;/p&gt;

&lt;p&gt;// If want to after refresh then create mounted()&lt;/p&gt;

&lt;p&gt;mounted() {&lt;br&gt;
     this.scrollToElement(this.$refs.goToTop);&lt;br&gt;
}, &lt;br&gt;
// for top use goToTop , for middle use goToMiddle , for footer use &lt;/p&gt;

&lt;p&gt;// If want to after onclick then create method&lt;br&gt;
onclickMethod() {&lt;br&gt;
     this.scrollToElement(this.$refs.goToTop); &lt;br&gt;
}, &lt;/p&gt;

&lt;p&gt;I hope it will help you.&lt;/p&gt;

</description>
      <category>vue</category>
    </item>
    <item>
      <title>How to Mine Tron TRX with Your Computer in Under 5 Minutes in 2021</title>
      <author>Course Probe</author>
      <pubDate>Thu, 21 Oct 2021 04:48:28 +0000</pubDate>
      <link>https://dev.to/courseprobe/how-to-mine-tron-trx-with-your-computer-in-under-5-minutes-in-2021-45la</link>
      <guid>https://dev.to/courseprobe/how-to-mine-tron-trx-with-your-computer-in-under-5-minutes-in-2021-45la</guid>
      <description>&lt;p&gt;A Step by Step Guide to Pool Mining Tron TRX Coin in 2021 with a CPU!&lt;/p&gt;

&lt;p&gt;Sometimes mining can seem to be too complex for the average computer user, so I thought about putting together a quick guide to get you excited about mining cryptocurrency and Tron TRX in particular.&lt;/p&gt;

&lt;p&gt;Anyone can start mining Tron with any computer in under 5 minutes with this guide, regardless of your technical skill level you will be able to increase your crypto knowledge and start mining TRX with your CPU today!!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;STEP 1:&lt;/strong&gt; Get yourself a Wallet.&lt;/p&gt;

&lt;p&gt;It is recommended to use Tronlink as the browser wallet for this coin because it will let you create multiple accounts, and also let you interact with Tron Dapps and do some operations like staking (Which I'll cover later on).&lt;/p&gt;

&lt;p&gt;You could also get Exodus or Atomic Wallet but these wouldn't be my first option.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2:&lt;/strong&gt; Download XMRIg from Github&lt;/p&gt;

&lt;p&gt;You could go to the xmrig site to download the latest version or from the oficial github repository: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xmrig/xmrig/releases"&gt;https://github.com/xmrig/xmrig/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you download the latest version you would have to edit a file named "pool_mine_example.bat" Inside this file you need to modify 2 lines.&lt;/p&gt;

&lt;p&gt;It could look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd %~dp0
xmrig.exe -o rx.unmineable.com:3333 -u TRX:TFYwWgGFBZqf5EQAgopsWnwNoiomwRzqEV.wini3#e4xd-wmzl -p x
pause
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second line after the -o you can see the Pool URL, in this case all you have to do depending on your location is to use one of the following URLs (select the one closer to your location).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USA:&lt;/strong&gt; rx-us.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Europe:&lt;/strong&gt; rx-eu.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Asia:&lt;/strong&gt; rx-asia.unmineable.com:3333&lt;/p&gt;

&lt;p&gt;Then, the third line is where you will enter your wallet's public address (copied in STEP 1), place it after the TRX: and before the first dot "." .&lt;/p&gt;

&lt;p&gt;The general structure of the address needs to be:&lt;/p&gt;

&lt;p&gt;[COIN]:[Wallet address].[workerID]#[Code to lower mining fee]&lt;/p&gt;

&lt;p&gt;The workerID is any name you want to give to each computer where you are running the miner so it can easily be identified later on under the pool stats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The code after the # is important&lt;/strong&gt; because mining with that code will drop the Mining Fee from 1% to 0.75% (it makes a difference). You can start mining using that code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Run the file as an administrator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" alt="XMRig Mining"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything goes well, you are now running XMRig and are mining. Congrats !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Log into Unmineable to check your stats&lt;/p&gt;

&lt;p&gt;Unmineable.com is a mining Pool which allows you to mine with your CPU using RandomX and pay you in any coin you select. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" alt="Unmineable Site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember when you set up the address inside the XMRig config file ? &lt;/p&gt;

&lt;p&gt;Well, there you just let Unmineable know the coin you want to be paid in, in this example TRX and then the address where they will transfer the mined coins.&lt;/p&gt;

&lt;p&gt;In order to check your balance, log into &lt;a href="https://unmineable.com"&gt;Unmineable&lt;/a&gt; and then select the coin you want to mine. In this example, Tron TRX.&lt;/p&gt;

&lt;p&gt;Then you can select the Tab that reads RandomX and enter your address in the box that reads "Enter your address to check your stats:". &lt;/p&gt;

&lt;p&gt;After doing this you will see the balance on your account and you will even be able to request a payment.&lt;/p&gt;




&lt;p&gt;Congrats, you are a miner now! &lt;/p&gt;

&lt;p&gt;What I like about mining Tron with unmineable is that you don't really have to wait long like other coins to be able to get your payments, apart from that you can get your TRX and go to &lt;a href="https://tronscan.org/#/sr/votes"&gt;Tronscan&lt;/a&gt; and you can stake your coins.&lt;/p&gt;

&lt;p&gt;Staking means freezing your coins and lending them to one of the Super representative nodes so they pay you in return some rewards once they have validated and added blocks to the chain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The steps to Stake Tron TRX in tronscan are:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the Votes section in Tronscan (link above).&lt;/li&gt;
&lt;li&gt;Click the Green "Voting" button on top of the list of SR.&lt;/li&gt;
&lt;li&gt;Click "Obtain" so you freeze your coins to get voting power.&lt;/li&gt;
&lt;li&gt;Select Votes + Bandwith in the windows that pops up.&lt;/li&gt;
&lt;li&gt;Continue and sign the transaction with tronlink.&lt;/li&gt;
&lt;li&gt;Once you get your votes, distribute them or assign them to a SR node from the list.&lt;/li&gt;
&lt;li&gt;You are done, after a day visit again your Address in Tronscan to check your unwithdraw rewards balance.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;I recommend downloading some software to monitor the running temperature of your CPU, a good and free one is Hardware Monitor.&lt;/p&gt;

&lt;p&gt;Try not to exceed the temperature more than 90 degrees celsius. In case you are mining with a laptop, change the thermal paste of your CPU, get it cleaned inside, and get some heat extractors for laptops.&lt;/p&gt;

&lt;p&gt;If you take care of the temperature your computer should work very well, the amount of coins you can mine will depend on the hashrate of your CPU. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to use a valid address for each coin, for example if you want to be paid in ADA then you need a valid Cardano blockchain address. In this example Binance Smart Chain is used and you would receive a SHiba Inu token on the BSC blockchain.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;If you are looking for more information, there's a good guide in a PDF ebook and is Free, get it at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" alt="Mining with CPU"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>tron</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Getting Started With Appwrite's Apple SDK üì±üíª</title>
      <author>Eldad A. Fux</author>
      <pubDate>Thu, 21 Oct 2021 04:40:39 +0000</pubDate>
      <link>https://dev.to/eldadfux/getting-started-with-appwrites-apple-sdk-5bd</link>
      <guid>https://dev.to/eldadfux/getting-started-with-appwrites-apple-sdk-5bd</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Bk_OFaWDqB8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Earlier this week, we announced the official release of &lt;a href="https://dev.to/appwrite/building-apps-just-got-swifter-announcing-appwrite-v011-4g62"&gt;Appwrite 0.11&lt;/a&gt; and the new Appwrite SDKs for Apple devices and Swift. Yesterday we had a short live session with Aditya, Jake, and Damodar, demonstrating how you can quickly start building apps for Apple devices with Appwrite as your backend server.&lt;/p&gt;

&lt;p&gt;To learn more, you can check our official Appwrite 0.11 announcement post, and check our &lt;a href="https://github.com/appwrite/sdk-for-apple"&gt;Apple&lt;/a&gt; and &lt;a href="https://github.com/appwrite/sdk-for-swift"&gt;Swift&lt;/a&gt; SDKs. If you have any further questions you can join the Appwrite team and community on the &lt;a href="https://appwrite.io/discord"&gt;Appwrite Discord server&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>mobile</category>
      <category>appwrite</category>
    </item>
    <item>
      <title>Async/Await with easy to understand examples.</title>
      <author>Nehal Mahida</author>
      <pubDate>Thu, 21 Oct 2021 04:11:46 +0000</pubDate>
      <link>https://dev.to/nehal_mahida/asyncawait-with-easy-to-understand-examples-2221</link>
      <guid>https://dev.to/nehal_mahida/asyncawait-with-easy-to-understand-examples-2221</guid>
      <description>&lt;p&gt;Let's first understand the &lt;strong&gt;Async&lt;/strong&gt; keyword. &lt;/p&gt;

&lt;p&gt;Put this keyword before the function which returns a promise or which does an asynchronous task.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you think your function will run asynchronously (fetching data from API) then use the async keyword before that function.&lt;/p&gt;

&lt;p&gt;Now there is another keyword &lt;strong&gt;Await&lt;/strong&gt; that works only inside async functions.&lt;/p&gt;

&lt;p&gt;(There is a concept of top-level await in which await keyword can be used outside of the async function.)&lt;/p&gt;

&lt;p&gt;The Await keyword simply means it makes JavaScript wait until the task is completed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asyncTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncTask&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Before Foo Call&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;After Foo Call&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, I am creating a dummy function that takes one second to return its result.&lt;/p&gt;

&lt;p&gt;There is another function foo that calls asyncTask (with await keyword) and prints the result.&lt;/p&gt;

&lt;p&gt;I have put two logs, one is before calling foo and the second is after calling foo.&lt;/p&gt;

&lt;p&gt;What do you think will be the output? ü§î&lt;/p&gt;

&lt;p&gt;As you may know, whenever JavaScript encounter with await keyword it stops the execution of the current function and put it into the callback queue and start executing the next statement which is the second console log.&lt;/p&gt;

&lt;p&gt;Here is an output of the above code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Before Foo Call
After Foo Call
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#handling-errors-while-using-asyncawait"&gt;
  &lt;/a&gt;
  Handling errors while using async/await
&lt;/h5&gt;

&lt;p&gt;In the above example, our promise resolves normally and we are printing the result on the console. &lt;/p&gt;

&lt;p&gt;But in case of rejection, it will throw an error so we should handle errors while working with promises. &lt;/p&gt;

&lt;p&gt;Using try/catch block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asyncTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something not working!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncTask&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;After calling AsyncTask&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, If our asyncTask function throws an error control will go into catch block and simply prints the error message then it will start to execute the next statements.&lt;/p&gt;

&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Something not working!
After calling AsyncTask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Very clean. Isn't it?&lt;/p&gt;

&lt;p&gt;Now, try to use async/await instead of then/catch in your next project.&lt;/p&gt;

&lt;p&gt;If you like this article like, share and mark üîñ this article!&lt;/p&gt;

&lt;p&gt;üèÉ‚Äç‚ôÇÔ∏è You can follow me on üëá&lt;/p&gt;

&lt;p&gt;üïä Twitter : &lt;a href="https://twitter.com/nehal_mahida"&gt;https://twitter.com/nehal_mahida&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë®‚Äçüíª Github: &lt;a href="https://github.com/NehalMahida"&gt;https://github.com/NehalMahida&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>I Made Youtube Videos using Python</title>
      <author>Sudeep Chauhan</author>
      <pubDate>Thu, 21 Oct 2021 03:59:32 +0000</pubDate>
      <link>https://dev.to/sudcha23/i-made-youtube-videos-using-python-1do0</link>
      <guid>https://dev.to/sudcha23/i-made-youtube-videos-using-python-1do0</guid>
      <description>&lt;p&gt;The first project I worked on after leaving my full time job was to create Youtube videos programmatically, at scale. This post explains what I did, and what happened next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#would-you-rather-"&gt;
  &lt;/a&gt;
  Would you rather ...
&lt;/h2&gt;

&lt;p&gt;watch a video?&lt;/p&gt;

&lt;p&gt;If you're better with visuals / audio, watch this video instead (it's better at 1.5x )&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0og4mM9aPL0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;No?&lt;/p&gt;

&lt;p&gt;Ok, let's go -&lt;/p&gt;

&lt;p&gt;After leaving my full time job at Google and steady pay, I asked myself: what projects could I do that could potentially bring some passive income?&lt;/p&gt;

&lt;p&gt;The project should be exciting enough for me to take a dab, should help me learn something absolutely new, and make a great story regardless of its outcome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-the-love-of-youtube"&gt;
  &lt;/a&gt;
  For the love of Youtube
&lt;/h2&gt;

&lt;p&gt;I had been thinking about Youtube as a platform for quite some time because it probably ranks number 1 in my list of favorite products.&lt;/p&gt;

&lt;p&gt;Second, it provides hosting videos for FREE, to everyone.&lt;/p&gt;

&lt;p&gt;The second one is huge, if you think of it, especially as an engineer.&lt;/p&gt;

&lt;p&gt;The biggest cost to serving videos online is their hosting, and youtube takes care of that for everyone, for free.&lt;/p&gt;

&lt;p&gt;Not just that, if your videos are public and get views, it even pays you for them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-with-ai"&gt;
  &lt;/a&gt;
  Music with AI?
&lt;/h2&gt;

&lt;p&gt;When Tensorflow was announced, there was also an announcement of a project that could create Music with AI (&lt;a href="https://magenta.tensorflow.org/"&gt;Project Magenta&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This idea that AI could create music resonated with me a lot. The problem with this project was that while AI can create a lot of Music, most of it is average at best.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgG4wY2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmp0fjpgwlhnsws7nplc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgG4wY2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmp0fjpgwlhnsws7nplc.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even the most popular Artists usually have only a few super viral songs, and with AI, this percentage is an improbable fraction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crowdsource-discovery-of-good-music"&gt;
  &lt;/a&gt;
  Crowdsource Discovery of Good Music?
&lt;/h2&gt;

&lt;p&gt;Let's just say that it would take AI 100,000 songs to come up with one great one.&lt;/p&gt;

&lt;p&gt;Can we crowd source listening to all of this music to the world and let them decide which song is the best?&lt;/p&gt;

&lt;p&gt;I could create some decent videos of slideshows -- programmatically of course, for each of the music files generated, and upload them to Youtube for the world to figure it out.&lt;/p&gt;

&lt;p&gt;If there's some traction, it would motivate me to spend more time tweaking the AI training model, as well as earn $$ :).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#baby-steps"&gt;
  &lt;/a&gt;
  Baby Steps
&lt;/h2&gt;

&lt;p&gt;Creating music with AI felt like a big task, so I thought, let's just do something basic.&lt;/p&gt;

&lt;p&gt;Let's create videos of just some text converted to speech with slideshow, and upload it to Youtube programmatically. Yep, that's a good start. Based on how that goes, we can work on creating music with AI, instead of that text -&amp;gt; speech thingy.&lt;/p&gt;

&lt;p&gt;To make this MVP of a process, I decided using data from Wikipedia first. I could even incorporate live news to this concept!&lt;/p&gt;

&lt;p&gt;Youtube allows uploading 50 videos daily. This means, that if I had 10 channels, I could upload 500 videos a day. Take a minute to fathom that.&lt;/p&gt;

&lt;p&gt;500 x 365 = 182,500 videos a year.&lt;/p&gt;

&lt;p&gt;If each video gets 10 views, that alone is over 1 million views. Very fascinating. WDYT?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-sound-of-knowledge"&gt;
  &lt;/a&gt;
  Project Sound of Knowledge
&lt;/h2&gt;

&lt;p&gt;I called the project: SoKnow (Sound of Knowledge). Other name I had chosen was Sound of Gold, which I forget why, but SoKnow sounded cool&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDAMVJ_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zfe1hmi1r20in47u39p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDAMVJ_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zfe1hmi1r20in47u39p.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's how it would work:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get Wikipedia trending queries (thanks to Wiki APIs!)&lt;/li&gt;
&lt;li&gt;Get the First Paragraph from each Query&lt;/li&gt;
&lt;li&gt;Check for Adult Content (important!)&lt;/li&gt;
&lt;li&gt;Convert text to Speech (I used Google's text-to-speech API)&lt;/li&gt;
&lt;li&gt;Find images available for commercial use on this topic&lt;/li&gt;
&lt;li&gt;Stitch the images to make a slide show along with the Audio&lt;/li&gt;
&lt;li&gt;Upload to Youtube using Youtube's API&lt;/li&gt;
&lt;li&gt;Drink lemonade and enjoy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I chose Python to write this code in. Why? Because most libraries that I was going to use had best support in Python. Also, I like Python.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#write-the-code"&gt;
  &lt;/a&gt;
  Write the CODE
&lt;/h2&gt;

&lt;p&gt;Step by step I wrote the code to do all the steps. Yes the code was scrappy but it worked.&lt;/p&gt;

&lt;p&gt;Simple API calls to get all the data, used ffmpeg to create slideshow videos. While there was no parallel processing (no threads), the process was fast enough to create 50 videos in 10-15 minutes.&lt;/p&gt;

&lt;p&gt;There were many bugs of course, for example the APIs would timeout, or some special characters would break the sequence, but one by one I fixed them all. If no images were found for a particular topic, I would make it a black screen with the Title's text on top of it.&lt;/p&gt;

&lt;p&gt;Also embedded the channel watermark in one corner.&lt;/p&gt;

&lt;p&gt;To upload the videos, I used &lt;a href="https://developers.google.com/youtube/v3/guides/uploading_a_video"&gt;Youtube's API from GCP&lt;/a&gt;. What was amazing was that I could also set up Description, Title and Keywords in each of the videos through their API. Mind blown.&lt;/p&gt;

&lt;p&gt;All was well in test runs, and then I ran in production.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#youtube-knows-about-this"&gt;
  &lt;/a&gt;
  Youtube knows about this
&lt;/h2&gt;

&lt;p&gt;After running the code, I started seeing bugs that I couldn't really understand. After some debugging I realized, the issue.&lt;/p&gt;

&lt;p&gt;It turns out that Youtube API has quota limitations that are different from the web UI limitations.&lt;/p&gt;

&lt;p&gt;Most prominent for me was that Youtube API only allowed ~3-4 video uploads a day, and not more than that, thanks to their Quota limitations.&lt;/p&gt;

&lt;p&gt;I read their &lt;a href="https://developers.google.com/youtube/v3/determine_quota_cost"&gt;Quota Costs for API requests&lt;/a&gt; much later than I should have.&lt;/p&gt;

&lt;p&gt;Everything has low quota usage except the "Video -&amp;gt; Insert" resource.&lt;/p&gt;

&lt;p&gt;Youtube does allow 50 uploads through their User interface, but not through APIs.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-raise-a-consult"&gt;
  &lt;/a&gt;
  Let's raise a consult!
&lt;/h2&gt;

&lt;p&gt;Why didn't I think of reading this first? I was super mad and sad.&lt;/p&gt;

&lt;p&gt;Also, of course I reached to Youtube team over their Cases consult. I wrote a big doc as much convincing information as I could add. It would take them weeks to revert, which makes sense given their size.&lt;/p&gt;

&lt;p&gt;Not that I was motivated to, after several weeks of no response, I did reach out to a friend who worked in Youtube at the time. As I had thought, it didn't really do anything. For the most part, Google is a meritocracy based company, and unless I was one of the early partners , big enough (think SocialBlade), or had good relations with someone higher in management (VP level?), it was not going to happen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SovUHw2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cp4ftnhxzenzr6x6ixsg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SovUHw2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cp4ftnhxzenzr6x6ixsg.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did try to play the "Anti competitive" song in my subsequent appeals, which I thought was clever, but it didn't work. Yes, yes, I know they are smart.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ab5AP_KP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/1iu8uG2cjYFZS6wTxv/giphy.webp"&gt;&lt;br&gt;
&lt;em&gt;I'm innocent.&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;After several back and forths, they did increase my quota from 10,000 a day to 15,000 per day. To some degree that was fair, because it's not like my content was going to make grow Youtube's user base, or improve user experience somehow.&lt;/p&gt;

&lt;p&gt;For few days, I uploaded videos manually to Youtube, and then set their Title / Description and Keywords programmatically. But as you can guess it wasn't with the same excitement as before.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-did-the-videos-look-like"&gt;
  &lt;/a&gt;
  What did the videos look like?
&lt;/h2&gt;

&lt;p&gt;You can find all Channels with this &lt;a href="https://www.youtube.com/results?search_query=soknow&amp;amp;sp=EgIQAg%253D%253D"&gt;youtube search query&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a sample video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kNJ-n-V7iH0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happened-to-the-content"&gt;
  &lt;/a&gt;
  What Happened to the Content?
&lt;/h2&gt;

&lt;p&gt;Well after I left the project, I came back to check on the videos after two years. The metrics are fascinating to look at, so I share those metrics below.&lt;/p&gt;

&lt;p&gt;Note: I did nothing to grow these channels. All videos in these channels were the output of a simple Python code, except of course, I had to upload most of the videos manually, and then update the metadata through code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metrics-from-two-years"&gt;
  &lt;/a&gt;
  Metrics from Two Years
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/results?search_query=soknow&amp;amp;sp=EgIQAg%253D%253D"&gt;List of Channels&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Channel&lt;/th&gt;
&lt;th&gt;Views&lt;/th&gt;
&lt;th&gt;Watch Time&lt;/th&gt;
&lt;th&gt;Subscribers&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow French&lt;/td&gt;
&lt;td&gt;5.4K&lt;/td&gt;
&lt;td&gt;90 Hours&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Hindi&lt;/td&gt;
&lt;td&gt;21K&lt;/td&gt;
&lt;td&gt;345 Hours&lt;/td&gt;
&lt;td&gt;173&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow English&lt;/td&gt;
&lt;td&gt;26K&lt;/td&gt;
&lt;td&gt;112 Hours&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Korean&lt;/td&gt;
&lt;td&gt;4.2K&lt;/td&gt;
&lt;td&gt;23 Hours&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Japanese&lt;/td&gt;
&lt;td&gt;35.3K&lt;/td&gt;
&lt;td&gt;155 Hours&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Russian&lt;/td&gt;
&lt;td&gt;6.6K&lt;/td&gt;
&lt;td&gt;82 Hours&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow German&lt;/td&gt;
&lt;td&gt;3.5K&lt;/td&gt;
&lt;td&gt;18.3 Hours&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Finnish&lt;/td&gt;
&lt;td&gt;7.4K&lt;/td&gt;
&lt;td&gt;7.6 Hours&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Arabic&lt;/td&gt;
&lt;td&gt;683&lt;/td&gt;
&lt;td&gt;2.8 Hours&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;110,000&lt;/td&gt;
&lt;td&gt;836 Hours&lt;/td&gt;
&lt;td&gt;322&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Two years, and even all channels combined don't reach the "minimum" criteria for monetization (4,000 watch time and 1000 subs). But it's very likely that it would have, if the content was uploaded for 365 days (instead of 2) along with consistent improvements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-not-adding-value"&gt;
  &lt;/a&gt;
  This is not adding value!
&lt;/h2&gt;

&lt;p&gt;While I agree that the videos uploaded might not have added as much value to the world, but I'm pretty sure that some users did find them useful. We can confirm this with the number of Likes on the videos, and watch time.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4zRonEMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/YWAiayVul0JLq/giphy.webp"&gt;&lt;br&gt;
&lt;em&gt;It's all about perspective.&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;Most people learn things through videos, and a lot of information that's in English is not readily available in other languages, for example look at the SoKnow Japanese Channel. Not only would the search engines fail at bringing information to those users through search -- discovering and translating the content is another major hurdle for users in different languages.&lt;/p&gt;

&lt;p&gt;"Quality" content is subjective, and I can easily argue that majority of content online today is not only useless, but harmful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-learnings-from-this-experiment"&gt;
  &lt;/a&gt;
  Some Learnings from this Experiment
&lt;/h2&gt;

&lt;p&gt;There were lot of fundamental learnings from this little experiment. Some of them are "of course", when you think of them deeply, probably not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-break-down-of-grand-vision-into-mini-ideas"&gt;
  &lt;/a&gt;
  1. Break down of Grand Vision into mini ideas
&lt;/h3&gt;

&lt;p&gt;I'm happy I didn't go down the path of first learning how to build music with AI. It would've taken me fairly long time.&lt;/p&gt;

&lt;p&gt;It's very likely that the fact that Youtube Quota is a thing, and it's so limiting for uploading videos would've skipped me for months, and I would have regretted spending time making sub-par music files built with AI.&lt;/p&gt;

&lt;p&gt;Thanks to using Wikipedia text, I was able to identify this issue relatively early on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitations-of-dependencies"&gt;
  &lt;/a&gt;
  Limitations of Dependencies
&lt;/h3&gt;

&lt;p&gt;If you've ever played Slither.io, or at least heard of it, note that the creator built it mostly alone, and declined to use Cloud services to host the game. He ran all of it from his own house on bare metal.&lt;/p&gt;

&lt;p&gt;Most great engineers don't like dependencies, and there's a valid reason for that. The more dependencies you have, the more areas of surprise elements there will always be.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bYR1Dh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/1wRulyhp5INhA8uDFv/giphy.webp"&gt;&lt;br&gt;
&lt;em&gt;Yes, it's worth it.&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;Before starting a project, always note the limitations of the services you're planning on using.&lt;/p&gt;

&lt;p&gt;Note: Smarter thing would be to first write a Design doc about what the project is, what are the dependencies etc., but their efficacy for personal projects is questionable.&lt;/p&gt;

&lt;p&gt;What I definitely recommend is to create a sort of check list or breakdown for myself, to make sure all grounds are covered, but in this case, "quota limitation" was left out, thanks to my mind subconciously convincing me about "50 UI uploads"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beware-of-derivative-products"&gt;
  &lt;/a&gt;
  Beware of Derivative Products
&lt;/h3&gt;

&lt;p&gt;Maybe Youtube had the API quota set to 50 uploads a day, but they could still change it anytime.&lt;/p&gt;

&lt;p&gt;Youtube is an independent product, continuously being improved, experimented and built upon.&lt;/p&gt;

&lt;p&gt;If you're building a product that's a derivative of another product, it will always have the big risk of failing at anytime if the product you're relying on falters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#was-it-interesting"&gt;
  &lt;/a&gt;
  Was it interesting?
&lt;/h2&gt;

&lt;p&gt;I hope you found this experiment interesting and it brings out some thoughts and ideas in your mind.&lt;/p&gt;

&lt;p&gt;I'd love to hear your thoughts. Leave a comment below!&lt;/p&gt;




&lt;p&gt;I originally published this blog at: &lt;a href="https://sudcha.com/i-made-youtube-videos-using-python/"&gt; &lt;/a&gt;&lt;a href="https://sudcha.com/i-made-youtube-videos-using-python/"&gt;https://sudcha.com/i-made-youtube-videos-using-python/&lt;/a&gt; but sharing here for the love of the community!&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>googlecloud</category>
      <category>startup</category>
    </item>
    <item>
      <title>Python + JavaScript = üî•üî•üî•</title>
      <author>Shuvo</author>
      <pubDate>Thu, 21 Oct 2021 03:40:30 +0000</pubDate>
      <link>https://dev.to/0shuvo0/python-javascript--1nd6</link>
      <guid>https://dev.to/0shuvo0/python-javascript--1nd6</guid>
      <description>&lt;p&gt;When in comes to &lt;strong&gt;Web Development&lt;/strong&gt; nothing beats &lt;strong&gt;JavaScript&lt;/strong&gt;. But sometimes we have to do a bit more demanding task, for example &lt;em&gt;analyzing big pile of data&lt;/em&gt;. In that case &lt;strong&gt;Python&lt;/strong&gt; might be a superior option. But that's just one function of our website. Do we want to switch to Python just because of that one feature? Probably not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-if-we-could-build-our-backend-mostly-using-nodejs-and-only-use-python-when-we-have-to"&gt;
  &lt;/a&gt;
  So what if we could build our backend mostly using NodeJS and only use Python when we have to.
&lt;/h2&gt;

&lt;p&gt;That would be awesome right? We can use &lt;code&gt;child process&lt;/code&gt; in Node.JS to run a python script when needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;child_process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;process_data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;python3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script.py&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# script.py
&lt;/span&gt;&lt;span class="n"&gt;doSometing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And if we want we can &lt;strong&gt;pass data to our python script&lt;/strong&gt; also.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;child_process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;process_data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;python3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script.py&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In Python in order to be able to read the data you &lt;strong&gt;must import&lt;/strong&gt; the &lt;strong&gt;sys&lt;/strong&gt; module.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;doSometing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now instead on passing data while spawning the Python process, lets send data in stream.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;child_process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;python3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script.py&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//we have to send data as a string, so we are using JSON.stringify&lt;/span&gt;
&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doSometing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'msg'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally we can send response back to our nodejs from the python script&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;child_process&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;spawn&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;py&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;python3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cscript.py&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nx"&gt;py&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c1"&gt;# You will have your own implementation of get data. In this case lets assume it returns a dict/json
&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So this article has come to an end. But make sure you check out my other articles. &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/0shuvo0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/0shuvo0/i-will-be-notified-if-you-click-this-7df" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I will be notified if you click this üòà&lt;/h2&gt;
      &lt;h3&gt;Shuvo „Éª Oct 19 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__728097"&gt;
  
    .ltag__user__id__728097 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/0shuvo0" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/0shuvo0"&gt;Shuvo&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/0shuvo0"&gt;Frontend Developer and YouTuber.
Channel link: https://www.youtube.com/c/AngleBrace&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>node</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Halloween Event! What's on your workspace?</title>
      <author>Abby</author>
      <pubDate>Thu, 21 Oct 2021 03:32:51 +0000</pubDate>
      <link>https://dev.to/abby06/halloween-event-whats-on-your-workspace-4639</link>
      <guid>https://dev.to/abby06/halloween-event-whats-on-your-workspace-4639</guid>
      <description>&lt;p&gt;Halloween Event! What's on your workspace?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take a picture of your workspace&lt;/li&gt;
&lt;li&gt;Share the picture below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most liked comment counted on this Feed and &lt;a href="https://club.rt-thread.io/ask/question/88.html"&gt;RT-Thread Club&lt;/a&gt; Feed will receive a special Halloween Gift.&lt;/p&gt;

&lt;p&gt;The winner will be announced on November 1st.&lt;/p&gt;

&lt;p&gt;Make sure that you're following the open source RT-Thread &lt;a href="https://www.facebook.com/RT-Thread-IoT-OS-110395723808463"&gt;Facebook&lt;/a&gt;, &lt;a href="https://twitter.com/rt_thread"&gt;Twitter&lt;/a&gt;, or &lt;a href="https://www.linkedin.com/company/73004322"&gt;Linkedin&lt;/a&gt; so you'll be updated with the winner announcement!&lt;/p&gt;

&lt;p&gt;Happy Dev's Halloween!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6yzvSfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buarpl5ea2rs8bkpcmix.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6yzvSfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buarpl5ea2rs8bkpcmix.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>halloween</category>
      <category>workspace</category>
      <category>opensource</category>
      <category>embedded</category>
    </item>
    <item>
      <title>code every day with me</title>
      <author>duccanhole</author>
      <pubDate>Thu, 21 Oct 2021 03:14:00 +0000</pubDate>
      <link>https://dev.to/coderduck/code-every-day-with-me-2ep4</link>
      <guid>https://dev.to/coderduck/code-every-day-with-me-2ep4</guid>
      <description>&lt;p&gt;&lt;strong&gt;--DAY 3--&lt;/strong&gt;&lt;br&gt;
Hi, I am going to make #100DaysOfCode Challenge.Everyday I will try solve 1 problem from leetcode or hackerrank. Hope you can go with me until end.&lt;br&gt;
&lt;strong&gt;Now let's solve problem today:&lt;/strong&gt;&lt;br&gt;
-Problem: Time Conversion&lt;br&gt;
-Detail: &lt;a href="https://www.hackerrank.com/challenges/time-conversion/problem"&gt;https://www.hackerrank.com/challenges/time-conversion/problem&lt;/a&gt;&lt;br&gt;
-My solution (javascript):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function timeConversion(s) {
    let check=s[s.length-2];
    s=s.substr(0, s.length-2).split(':');
    if(Number(s[0])==12) {
        if(check=='A') {
            s[0]='00';
            return s.join(':');
        }
        else return s.join(':')
    }
    if(check=='P') s[0]=(Number(s[0])+12).toString();
    return s.join(':');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt;&lt;em&gt;If you have better solution or any question, please comment below. I will appreciate.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>How I improved my GitHub profile?</title>
      <author>Rahul Jain</author>
      <pubDate>Thu, 21 Oct 2021 03:00:08 +0000</pubDate>
      <link>https://dev.to/rahuldkjain/how-i-improved-my-github-profile-480c</link>
      <guid>https://dev.to/rahuldkjain/how-i-improved-my-github-profile-480c</guid>
      <description>&lt;p&gt;Hey there, I am glad you landed here to learn more about how to improve your GitHub profile and build trust. A good GitHub profile behaves as an effective marketing tool in selling yourself to potential clients or employers. I will try to explain all the ins and outs of having a good GitHub profile from my own experience.&lt;/p&gt;

&lt;p&gt;First, I will walk you through my college journey so that you guys can easily relate, then I will try to answer all the related questions and inspirations that can come to your mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-journey"&gt;
  &lt;/a&gt;
  My Journey
&lt;/h2&gt;

&lt;p&gt;I am a 2020 graduate who didn't get the chance to attend the farewell and the convocation. My college started back in 2016. I had no clue of what I'll be doing in the next 4 years. I went there like a kora kagaz (blank sheet). I chose Physical Education in +2, so had no idea about programming. C, C++, Java &amp;amp; Python were just fancy creatures to me. As a result, I secured C grade in the C Programming course of 1st Semester üòù. Now you can picturize me as a young dumb kid who has no clue why he chose Computer Science &amp;amp; Engineering.&lt;/p&gt;

&lt;p&gt;I saw some fancy hostel videos of IIT Bombay FilmMaking Club before joining the college and got excited to join the FilmMaking club. When I joined the club, the dean stopped giving funds. Our club has no camera and no future of course. Then I realized the importance of money. Coming from a low middle class background and an underdeveloped town of Rajasthan, I dropped the fancy idea of pursuing filmmaking. Let's get some money in the bank first üí∞.&lt;/p&gt;

&lt;p&gt;Just like everybody else, I started learning programming to get an internship. During the 2nd year summer break, I applied to a lot of companies from Internshala. Didn't get even a single response from the recruiters. I hated the idea of competitive programming and got really scared about cracking interviews without any CP. Desperate, I opened my account on &lt;a href="https://freelancer.com"&gt;Freelancer&lt;/a&gt; to get any project of any domain. Developed &amp;amp; hosted a basic portfolio on GitHub pages and after struggling for about one week, I closed a deal to design a website for a US based client (\$3 per page). You can read the whole experience &lt;a href="https://dev.to/rahuldkjain/how-i-got-my-first-freelance-project-49c8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From here onwards, I didn't stop exploring. I applied for Eklavya IIT Bombay program by completing the animation assignments using &lt;a href="https://threejs.org/"&gt;three.js&lt;/a&gt; , but didn't make it because of the pointers(grades).&lt;/p&gt;

&lt;p&gt;I participated in all the hackathons organized by college's programming club and that's how they went:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hackathon&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Experience&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vassar Lab's Hackathon&lt;/td&gt;
&lt;td&gt;2nd Year&lt;/td&gt;
&lt;td&gt;Registered only for the free Maggi &amp;amp; coffee.&lt;/td&gt;
&lt;td&gt;Participant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBM Watson Hackathon&lt;/td&gt;
&lt;td&gt;3rd Year&lt;/td&gt;
&lt;td&gt;Participated along with 3 batch-mates, contributed in documentation&lt;/td&gt;
&lt;td&gt;1st Place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chatbot Hackathon&lt;/td&gt;
&lt;td&gt;3rd Year&lt;/td&gt;
&lt;td&gt;All India Level Hackathon organized by &lt;a href="https://www.swaniti.com/"&gt;Swaniti&lt;/a&gt; on HackerEarth. Built a &lt;a href="https://github.com/jainsomya972/jaano-india-chatbot"&gt;chatbot&lt;/a&gt; with &lt;a href="https://github.com/jainsomya972"&gt;Somya&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;AIR 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBM AI/ML Hackathon&lt;/td&gt;
&lt;td&gt;4th Year&lt;/td&gt;
&lt;td&gt;Registered with the mindset of winning&lt;/td&gt;
&lt;td&gt;Runner Up&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I was able to secure an on-campus internship offer from &lt;a href="https://www.quinbay.com/"&gt;Coviam&lt;/a&gt; (now Quinbay). This happened because of the confidence in myself that I can grab the offer without doing any competitive programming. That confidence came from doing projects, and exploring different things.&lt;/p&gt;

&lt;p&gt;I cracked the on-campus placements while working in Coviam (7th semester) and got the full time offer from &lt;a href="https://zolostays.com/"&gt;Zolo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then lockdown happened. All the big plans of hanging out with friends in the last semester didn't happen.&lt;/p&gt;

&lt;p&gt;I graduated in May 2020 and my joining was from September 2020. The period from May to September was where the magic happened.&lt;/p&gt;

&lt;p&gt;I started learning React.js and became a regular user of twitter. I followed all the famous personalities on tech twitter whom I admire and started reading their tweets on a day to day basis.&lt;/p&gt;

&lt;p&gt;On one fine day in the second-last week of May 2020, GitHub launched a new feature of creating your profiles in markdown like &lt;a href="https://github.com/rahuldkjain"&gt;this&lt;/a&gt;. I saw several developers made some really cool addons like adding github-stats, visitors count etc. &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;GitHub Readme Stats&lt;/a&gt; developed by &lt;a href="https://github.com/anuraghazra"&gt;Anurag Hazra&lt;/a&gt; went viral in just couple of days. Then the idea of creating &lt;a href="https://github.com/rahuldkjain/github-profile-readme-generator"&gt;GitHub Profile README Generator&lt;/a&gt; came to my mind.&lt;/p&gt;

&lt;p&gt;I started working on the MVP(Minimum Viable Product) without even thinking about how good or bad the idea is.&lt;/p&gt;

&lt;p&gt;I coded the project in just 2 days and hosted it on GitHub pages. I started writing articles on how to use the amazing tool to create beautiful GitHub profile READMEs in few minutes with cool addons. In just couple of weeks, people started noticing and liking the project. I didn't stop. I cross-linked the repository on various popular articles in the comments. You can learn more about how to promote your open-source project &lt;a href="https://rahuldkjain.github.io/blog/how-github-profile-readme-generator-reached-200+-stars-on-github/"&gt;here&lt;/a&gt;. My post on Linkedin about this project gained a lot of tractions and in just couple of weeks, the project had 1000+ stars.&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E6xYxtAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rahuldkjain.github.io/blog/static/aba0d373cb69251b03a10ae095bf9891/c83ae/linkedin-marketing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E6xYxtAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rahuldkjain.github.io/blog/static/aba0d373cb69251b03a10ae095bf9891/c83ae/linkedin-marketing.png" alt="rahuldkjain linkedin"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I didn't stop.&lt;/p&gt;

&lt;p&gt;I subscribed to free 6 months &lt;a href="https://frontendmasters.com/"&gt;FrontendMasters&lt;/a&gt; courses using GitHub pro. Learned "SVG Animations" from &lt;a href="https://twitter.com/sarah_edo"&gt;Sarah Drasner's&lt;/a&gt; course and wrote a few articles about GSAP Animations on my blog and dev[.]to .&lt;/p&gt;

&lt;p&gt;I created an account on Fiverr to sell &lt;code&gt;SVG Animations&lt;/code&gt;. I researched about this particular keyword on Fiverr and found out a huge potential in the gigs. So I created few gigs and started getting orders.&lt;br&gt;
From charging $10 per animation to $75 per animation, I became a level 2 seller in just couple of months. You can checkout some of my animations &lt;a href="https://rahuldkjain-animations.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On a very good day, a client from Sweden reached out to me on Fiverr to create a website for his product (&lt;a href="https://dosemedbox.com/"&gt;DoseMedbox&lt;/a&gt;) to sell online. I closed the deal, worked for 1.5 months and launched it.&lt;/p&gt;

&lt;p&gt;I didn't stop.&lt;/p&gt;

&lt;p&gt;I realized that I need to &lt;code&gt;surround myself with people who are way better than me&lt;/code&gt; to grow rapidly. So here I am working as a Frontend Engineer at CRED who is known for their design, app-dev and marketing.&lt;/p&gt;

&lt;p&gt;Phew! That was a long story isn't it. Thanks for bearing me. Now I assume that you already have the answers to the perks of having a good GitHub profile.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perks-of-a-good-github-profile"&gt;
  &lt;/a&gt;
  Perks of a good GitHub profile
&lt;/h2&gt;

&lt;p&gt;To simplify things, I am listing down the things again for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trust&lt;/li&gt;
&lt;li&gt;Freelance Projects&lt;/li&gt;
&lt;li&gt;Higher chances of landing a job interview&lt;/li&gt;
&lt;li&gt;Passive Income through GitHub sponsors, BuyMeACoffee, &amp;amp; Paypal etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-improve-github-profile"&gt;
  &lt;/a&gt;
  How to improve GitHub profile?
&lt;/h2&gt;

&lt;p&gt;I hope you are convinced now to improve your GitHub profile that opens up a huge world of opportunities. So I am listing down the things that helped me improving my GitHub profile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Good profile picture&lt;/strong&gt;: It gives a sense of authenticity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Good bio&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Twitter handle&lt;/li&gt;
&lt;li&gt;Portfolio link&lt;/li&gt;
&lt;li&gt;Email (Optional)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Good profile README&lt;/strong&gt;: You can use &lt;a href="https://github.com/rahuldkjain/github-profile-readme-generator"&gt;GitHub Profile README Generator&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Good projects&lt;/strong&gt;: The most important part of the profile&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Good contributions&lt;/strong&gt;: merge commits on popular projects work as wonder&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tips-amp-tricks"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create beautiful READMEs of your projects&lt;/li&gt;
&lt;li&gt;Lookout for issues on the open-source projects that you like&lt;/li&gt;
&lt;li&gt;Write and publish articles on your favourite topics&lt;/li&gt;
&lt;li&gt;Participate in hackathons and start building projects&lt;/li&gt;
&lt;li&gt;Participate in Hackoberfest ofcourse&lt;/li&gt;
&lt;li&gt;Join a community&lt;/li&gt;
&lt;li&gt;Follow good developers on GitHub&lt;/li&gt;
&lt;li&gt;Enhance your online presence&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#important-links"&gt;
  &lt;/a&gt;
  Important Links
&lt;/h2&gt;

&lt;p&gt;I am sharing a list of resource that helped me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://javascript.info/"&gt;Javascript.info&lt;/a&gt;: best JS tutorials on the internet(opinion)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rahuldkjain/rahuldkjain.github.io"&gt;My Portfolio Source code&lt;/a&gt;: portfolio helped me landing a job at CRED&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rahuldkjain/awesome-frontendmasters"&gt;Awesome FrontendMasters List&lt;/a&gt;: best resources from great educators&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learngitbranching.js.org/"&gt;Learn Git&lt;/a&gt;: gamified git tutorials&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rahuldkjain.github.io/blog/promote-open-source-project/"&gt;How to market your open-source project?&lt;/a&gt;: to know more about how I marketed GitHub profile readme generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/poteto/hiring-without-whiteboards"&gt;hiring-without-whiteboards&lt;/a&gt;: very helpful while looking out for jobs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=pN6jk0uUrD8&amp;amp;list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&amp;amp;ab_channel=AkshaySaini"&gt;Namaste Javascript Playlist&lt;/a&gt;: to understand the fundamentals of JS and crack interviews&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;You are just a project away from your big break&lt;/code&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>webdev</category>
      <category>motivation</category>
    </item>
    <item>
      <title>How to Migrate a Rails 6 App From sass-rails to cssbundling-rails</title>
      <author>Jason Meller</author>
      <pubDate>Thu, 21 Oct 2021 02:59:07 +0000</pubDate>
      <link>https://dev.to/kolide/how-to-migrate-a-rails-6-app-from-sass-rails-to-cssbundling-rails-4l41</link>
      <guid>https://dev.to/kolide/how-to-migrate-a-rails-6-app-from-sass-rails-to-cssbundling-rails-4l41</guid>
      <description>&lt;p&gt;At Kolide (&lt;a href="https://angel.co/company/kolideco/jobs/1638302-rails-engineer"&gt;btw we're hiring&lt;/a&gt;), we move swiftly to adopt to new versions of Ruby, Rails, and other major dependencies within a few months of them becoming available. We are at our happiest when we get to use the latest language and framework features. Additionally, forging ahead to uncharted waters allows us to contribute back bug reports, PRs, and guides for other rubyists also interested on being on the bleeding edge.&lt;/p&gt;

&lt;p&gt;To that end, I wanted to share our recent experience with upgrading our production Rails 6.1 app from sprockets/sass-rails to the brand-new cssbundling-rails. If you are considering an eventual transition to Rails 7, this is a great first step in that direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-raw-cssbundlingrails-endraw-"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;cssbundling-rails&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Or, more precisely, why move aways from &lt;code&gt;sass-rails&lt;/code&gt;?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When the webpacker gem was released as part of &lt;a href="https://weblog.rubyonrails.org/2017/2/23/Rails-5-1-beta1/"&gt;Rails 5.1 release in 2017&lt;/a&gt;, DHH made it clear that while webpacker &lt;em&gt;could&lt;/em&gt; be used to bundle CSS, he highly recommended to keep it simple and continue to use the Rails asset pipeline. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--v6DxttUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/975876868455809024/eK7mDppU_normal.jpg" alt="DHH profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        DHH
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @dhh
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      We will continue to use the asset pipeline for JavaScript sprinkles, CSS, images, and other static stuff. The two approaches coexist great.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:33 PM - 12 Dec 2016
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=808349072734027776" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=808349072734027776" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=808349072734027776" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Heeding this advice, many Rails projects (like ours) continue to dutifully serve their SCSS files via sprockets and the &lt;code&gt;sass-rails&lt;/code&gt; gem, the same way it's been doing circa Rails 3.1 in 2011.&lt;/p&gt;

&lt;p&gt;This sprockets setup has always worked great, but lately some serious bit-rot has set in. Over the last few years, the &lt;a href="https://sass-lang.com"&gt;Sass Team&lt;/a&gt; has deprecated both its original ruby-based version of &lt;code&gt;sass&lt;/code&gt;, and more recently, the &lt;code&gt;libsass/sassc&lt;/code&gt; library in favor of &lt;a href="https://sass-lang.com/dart-sass"&gt;dart-sass&lt;/a&gt;. As of this writing, I could not find any sprockets compatible versions of &lt;code&gt;dart-sass&lt;/code&gt;. Further, as time marches on, the sassc gem is beginning to accumulate some pretty &lt;a href="https://github.com/sass/sassc-ruby/issues/197"&gt;nasty bugs&lt;/a&gt; and &lt;a href="https://github.com/sass/sassc-ruby/issues/200"&gt;inefficiencies&lt;/a&gt;. With no fixes on the horizon, it's time to move on.&lt;/p&gt;

&lt;p&gt;This is where the newly minted &lt;a href="https://github.com/rails/cssbundling-rails"&gt;&lt;code&gt;cssbundling-rails&lt;/code&gt;&lt;/a&gt; comes in. Inspired by the also new &lt;a href="https://github.com/rails/jsbundling-rails"&gt;&lt;code&gt;jsbundling-rails&lt;/code&gt;&lt;/a&gt; library, it allows folks to leverage &lt;code&gt;yarn/npm&lt;/code&gt; to build a much simpler and more canonical CSS processing pipeline with a setup that will be familiar to JS developers.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rails"&gt;
        rails
      &lt;/a&gt; / &lt;a href="https://github.com/rails/cssbundling-rails"&gt;
        cssbundling-rails
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Bundle and process CSS in Rails with Tailwind, PostCSS, and Sass via Node.js.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
CSS Bundling for Rails&lt;/h1&gt;
&lt;p&gt;Use &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;, &lt;a href="https://getbootstrap.com/" rel="nofollow"&gt;Bootstrap&lt;/a&gt;, &lt;a href="https://bulma.io/" rel="nofollow"&gt;Bulma&lt;/a&gt;, &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt;, or &lt;a href="https://sass-lang.com/" rel="nofollow"&gt;Dart Sass&lt;/a&gt; to bundle and process your CSS, then deliver it via the asset pipeline in Rails. This gem provides installers to get you going with the bundler of your choice in a new Rails application, and a convention to use &lt;code&gt;app/assets/builds&lt;/code&gt; to hold your bundled output as artifacts that are not checked into source control (the installer adds this directory to &lt;code&gt;.gitignore&lt;/code&gt; by default).&lt;/p&gt;
&lt;p&gt;You develop using this approach by running the bundler in watch mode in a terminal with &lt;code&gt;yarn build:css --watch&lt;/code&gt; (and your Rails server in another, if you're not using something like &lt;a href="https://github.com/puma/puma-dev"&gt;puma-dev&lt;/a&gt;). Whenever the bundler detects changes to any of the stylesheet files in your project, it'll bundle &lt;code&gt;app/assets/stylesheets/application.[bundler].css&lt;/code&gt; into &lt;code&gt;app/assets/builds/application.css&lt;/code&gt;. This build output takes over from the regular asset pipeline default file. So you continue to refer‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/rails/cssbundling-rails"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;With our mission set, let's roll up our sleeves and get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upgrading-a-rails-6x-app"&gt;
  &lt;/a&gt;
  Upgrading a Rails 6.x App
&lt;/h2&gt;

&lt;p&gt;According to its gemspec, &lt;code&gt;cssbundling-rails&lt;/code&gt; is not just for new Rails 7 apps, it's also compatible with 6.0.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-prepare-your-raw-gemfile-endraw-"&gt;
  &lt;/a&gt;
  Step 1 - Prepare Your &lt;code&gt;Gemfile&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Our goal is to not just transition to &lt;code&gt;cssbundling-rails&lt;/code&gt;, but to also remove &lt;code&gt;sass-rails&lt;/code&gt; gem.  To get started, remove &lt;code&gt;sass-rails&lt;/code&gt; and any other potential references to sass like &lt;code&gt;sass-ruby&lt;/code&gt; and &lt;code&gt;sassc&lt;/code&gt; (if defined).&lt;/p&gt;

&lt;p&gt;Next, add &lt;code&gt;gem cssbundling-rails, '&amp;gt;= 0.2.4'&lt;/code&gt; (the version at the time of this writing) and run &lt;code&gt;bundle install&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-prepare-your-scss-files"&gt;
  &lt;/a&gt;
  Step 2 - Prepare Your SCSS Files
&lt;/h3&gt;

&lt;p&gt;First, let's take some inventory. Open up &lt;code&gt;config/initializers/assets.rb&lt;/code&gt; and at the bottom of that file you will see something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Precompile additional assets.&lt;/span&gt;
&lt;span class="c1"&gt;# application.js, application.css, and all non-JS/CSS in the app/assets&lt;/span&gt;
&lt;span class="c1"&gt;# folder are already added.&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;precompile&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sx"&gt;%w( sessions.css staff.css marketing.css )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the &lt;code&gt;Rails.application.config.assets.precompile&lt;/code&gt; line is uncommented, take note of the &lt;code&gt;.css&lt;/code&gt; files referenced in the array. In addition to &lt;code&gt;application.css&lt;/code&gt; these are all separate top-level CSS files that we will need to convert to the new format.&lt;/p&gt;

&lt;p&gt;For each file, (or just &lt;code&gt;application.[s]css&lt;/code&gt;) you should do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you haven't already, convert the files to use SCSS's &lt;code&gt;@import&lt;/code&gt; syntax instead of the sprockets magic comments like &lt;code&gt;*= require_self&lt;/code&gt; or &lt;code&gt;*= require_tree&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rename each file to match this format &lt;code&gt;&amp;lt;name&amp;gt;.sass.scss&lt;/code&gt; (so &lt;code&gt;application.scss&lt;/code&gt; would become &lt;code&gt;application.sass.scss&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-3-run-the-installation-and-then-fix-what-it-broke"&gt;
  &lt;/a&gt;
  Step 3 - Run the Installation (And Then Fix What It Broke)
&lt;/h3&gt;

&lt;p&gt;Run &lt;code&gt;./bin/rails css:install:sass&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you receive an overwrite warning for &lt;code&gt;app/assets/stylesheets/application.sass.scss&lt;/code&gt;, you can respond with &lt;code&gt;N&lt;/code&gt; when prompted.&lt;/p&gt;

&lt;p&gt;After the installation completes, we need to clean up a few things.&lt;/p&gt;

&lt;p&gt;First, in our case, the installation inserted an extra &lt;code&gt;stylesheet_link_tag&lt;/code&gt; at the bottom of &lt;code&gt;app/views/layout/application.html.erb&lt;/code&gt;. You should delete this extra line.&lt;/p&gt;

&lt;p&gt;Second, while the installation command updates the &lt;code&gt;app/assets/config/manifest.js&lt;/code&gt; file with a few new lines, it often doesn't remove explicit references to any sass files. After the upgrade, ours looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//= link_tree ../images&lt;/span&gt;
&lt;span class="c1"&gt;//= link_tree ../fonts&lt;/span&gt;
&lt;span class="c1"&gt;//= link_tree ../builds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: We added the line for &lt;code&gt;fonts&lt;/code&gt; as we use the &lt;code&gt;font-url&lt;/code&gt; helper in our SCSS files. These fonts didn't need to be explicitly included in the manifest before because sprockets would include them dynamically as they were referenced in the source CSS file. After this upgrade sprockets isn't processing the file so it's important that we ensure it's in the manifest.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, the &lt;code&gt;build:css&lt;/code&gt; script the installation creates in &lt;code&gt;package.json&lt;/code&gt; is only sufficient if you only have one main &lt;code&gt;application.scss&lt;/code&gt;, if you have other files you need to output, you are going to need to modify the script's contents. If this is the case, my suggestion is to create a new file called &lt;code&gt;bin/build-css&lt;/code&gt; and do something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

./node_modules/sass/sass.js &lt;span class="se"&gt;\&lt;/span&gt;
  ./app/assets/stylesheets/application.sass.scss:./app/assets/builds/application.css &lt;span class="se"&gt;\&lt;/span&gt;
  ./app/assets/stylesheets/sessions.sass.scss:./app/assets/builds/sessions.css &lt;span class="se"&gt;\&lt;/span&gt;
  ./app/assets/stylesheets/staff.sass.scss:./app/assets/builds/staff.css &lt;span class="se"&gt;\&lt;/span&gt;
  ./app/assets/stylesheets/marketing.sass.scss:./app/assets/builds/marketing.css &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--no-source-map&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--load-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;node_modules &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;$@&lt;/code&gt; at the bottom ensures we pass along any additional arguments like &lt;code&gt;--watch&lt;/code&gt; when this is invoked via &lt;code&gt;bin/dev&lt;/code&gt; (more on that later).&lt;/p&gt;

&lt;p&gt;Now in the &lt;code&gt;package.json&lt;/code&gt; file do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build:css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./bin/build-css"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to also run &lt;code&gt;chmod 755 ./bin/build-css&lt;/code&gt; in your terminal before moving on to the next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-handle-raw-asseturl-endraw-and-friends"&gt;
  &lt;/a&gt;
  Step 5 - Handle &lt;code&gt;asset-url&lt;/code&gt; And Friends
&lt;/h3&gt;

&lt;p&gt;Often in Rails, you need to reference files from the &lt;code&gt;app/assets/images&lt;/code&gt; or &lt;code&gt;app/asset/fonts&lt;/code&gt; folders directly in CSS. Since sprockets computes hashes for each asset, you can't just hard-code the name of the asset in there. To work around this, sprockets introduced helper functions like &lt;code&gt;asset-url&lt;/code&gt;, &lt;code&gt;font-url&lt;/code&gt;, and &lt;code&gt;image-url&lt;/code&gt; that resolve the relative path to the asset correctly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dart-sass&lt;/code&gt; has no knowledge of sprockets, so before we finalize the build we need sprockets to run through each file quickly and add these assets paths in. &lt;a href="https://github.com/rails/sprockets-rails/pull/476"&gt;While official support for this is pending&lt;/a&gt;, we arrived at a workaround that seems to do the trick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/initializers/asset_url_processor.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AssetUrlProcessor&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:environment&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;context_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(\w*)-url\(\s*["']?(?!(?:\#|data|http))([^"'\s)]+)\s*["']?\)/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_match&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="s2"&gt;"url(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;asset_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="vg"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Sprockets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register_postprocessor&lt;/span&gt; &lt;span class="s2"&gt;"text/css"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;AssetUrlProcessor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This regex will match these url functions and convert their contents to the appropriate location of the asset on disk in both development and production. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-test-it-out-with-raw-bindev-endraw-"&gt;
  &lt;/a&gt;
  Step 6 - Test It Out With &lt;code&gt;bin/dev&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Before trying this out, you'll likely want to clear out any sprockets cache in &lt;code&gt;tmp/&lt;/code&gt;. To do that, you can simply run &lt;code&gt;bin/rake tmp:clear&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As part of the earlier &lt;code&gt;./bin/rails css:install:sass&lt;/code&gt; command, a new file called &lt;code&gt;bin/dev&lt;/code&gt; was created. Additionally, a new gem dependency called &lt;code&gt;foreman&lt;/code&gt; and its associated config file &lt;code&gt;Procfile.dev&lt;/code&gt; was installed.&lt;/p&gt;

&lt;p&gt;By running &lt;code&gt;bin/dev&lt;/code&gt; you are now invoking &lt;code&gt;foreman&lt;/code&gt; which will read the &lt;code&gt;Profile&lt;/code&gt; and simultaneously run the &lt;code&gt;rails server&lt;/code&gt; and the &lt;code&gt;yarn build:css --watch&lt;/code&gt; commands. This should give you a very similar development experience to the original setup where you can make changes to CSS files and, after a refresh, those changes will be immediately reflected in the browser.&lt;/p&gt;

&lt;p&gt;If all went well, &lt;code&gt;bin/dev&lt;/code&gt; should start right up and a visit to your app locally should "just work."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits-amp-closing-thoughts"&gt;
  &lt;/a&gt;
  Credits &amp;amp; Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;A big thank you to &lt;a href="https://github.com/alxjrvs"&gt;Alex Jarvis&lt;/a&gt; for leading the charge on this upgrade at Kolide and collaborating with me.&lt;/p&gt;

&lt;p&gt;I hope you found this guide useful. If you found any errors in this guide or suggestions to improve it, please reach out in the comments or hit me up on twitter &lt;a href="https://twitter.com/jmeller"&gt;@jmeller&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://angel.co/company/kolideco/jobs/1638302-rails-engineer"&gt;Oh, and we're hiring!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>sass</category>
      <category>ruby</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Open Source Friday Recap: Slinkity and TinaCMS</title>
      <author>Rizel Scarlett</author>
      <pubDate>Thu, 21 Oct 2021 02:59:03 +0000</pubDate>
      <link>https://dev.to/github/open-source-friday-recap-slinkity-and-tinacms-1h4l</link>
      <guid>https://dev.to/github/open-source-friday-recap-slinkity-and-tinacms-1h4l</guid>
      <description>&lt;p&gt;&lt;em&gt;Typically, developers don‚Äôt push to production on Fridays, which is why Friday is the perfect day to contribute to Open Source. Every Friday at GitHub, we stream Open Source Friday on Twitch with host Brian Douglas and the maintainer of a rising open source project. It‚Äôs an opportunity to learn how they built the tool and how you can contribute.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slinkity"&gt;
  &lt;/a&gt;
  Slinkity
&lt;/h2&gt;

&lt;p&gt;On Oct 8, 2021, we chatted with Slinkity‚Äôs author and owner, Ben Holmes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;Slinkity is a plugin that can extend any 11ty site. If you‚Äôre not familiar with 11ty, it‚Äôs a static generator site. Ben describes Slinkity as the glue between 11ty and Vite. With Slinkity, you can use shortcodes to insert React components and quickly transform HTML files into JSX files. Currently, it is available as an early alpha version, so it‚Äôs not ready for production just yet, but stay tuned for frequent updates.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-was-it-made"&gt;
  &lt;/a&gt;
  Why was it made?
&lt;/h3&gt;

&lt;p&gt;During quarantine, Ben rewrote his personal website using 11ty but wished for an easy way to insert components into his site, so he created a way to do it. He credits the launch of his project to members of various Discord communities for encouraging him to just ‚Äúship it.‚Äù  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watch the video below to learn more about Slinkity:&lt;/strong&gt; &lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DqUGJyuX8m0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explore the codebase and contribute to Slinkity:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/slinkity"&gt;
        slinkity
      &lt;/a&gt; / &lt;a href="https://github.com/slinkity/slinkity"&gt;
        slinkity
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      To eleventy and beyond! The all-in-one tool for templates where you want them, component frameworks where you need them üöÄ
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8fadc6fe86fe7df90b04122d94bb05ccaa06f12f3194138eb234c07946f50bbc/68747470733a2f2f736c696e6b6974792e6465762f6173736574732f6f672d696d6167652d62616e6e65722e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/8fadc6fe86fe7df90b04122d94bb05ccaa06f12f3194138eb234c07946f50bbc/68747470733a2f2f736c696e6b6974792e6465762f6173736574732f6f672d696d6167652d62616e6e65722e6a7067" alt="Slinkity - To eleventy and beyond"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/slinkity/slinkity/blob/main/LICENSE.md"&gt;&lt;img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/slinkitydotdev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8ad9e1434ed9e4202726faacd91b3f679f7463e0a4c79fd71bee7c5433a1baef/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f736c696e6b697479646f746465762e7376673f7374796c653d736f6369616c" alt="Twitter: slinkitydotdev"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Slinkity&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;üöß &lt;strong&gt;This project is heavily under construction!&lt;/strong&gt; üöß As excited as you may be, we don't recommend this early alpha for production use. Still, give it a try if you want to have some fun and don't mind &lt;a href="https://github.com/slinkity/slinkity/issues"&gt;logging bugs&lt;/a&gt; along the way :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Slinkity is a tool for bringing dynamic, clientside interactions to your static 11ty site. Once installed, this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
üöÄ &lt;strong&gt;Unlocks component frameworks&lt;/strong&gt; (like React) for writing page templates and layout templates. So, you can turn an existing &lt;code&gt;.html&lt;/code&gt; or &lt;code&gt;.liquid&lt;/code&gt; file into a &lt;code&gt;.jsx&lt;/code&gt; file, and immediately start building routes using React.&lt;/li&gt;
&lt;li&gt;
üîñ &lt;strong&gt;Includes powerful shortcodes&lt;/strong&gt; to insert components into existing pages. Add a line like this to your markdown, HTML, Nunjucks, etc, and watch the magic happen: &lt;code&gt;{% react './path/to/component.jsx' %}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
üíß &lt;strong&gt;Hydrates these component-driven pages&lt;/strong&gt; on the client. In other words, all your dynamic state management will work in development and production with 0‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/slinkity/slinkity"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#tinacms"&gt;
  &lt;/a&gt;
  TinaCMS
&lt;/h2&gt;

&lt;p&gt;On Oct 15, 2021, we chatted with James Perkins, a Developer Advocate for TinaCMS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;TinaCMS is a visual editing experience for content stored as Markdown, JSON, or MDX (which is coming soon). The team recognized that while popular content management systems like WordPress allow you to edit and see your content before publishing, many JAMStack tools don‚Äôt. &lt;/p&gt;

&lt;p&gt;TinaCMS provides content writers and editors with immediate visual feedback by enabling developers to edit and rearrange content around as needed on JAMStack applications. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h3&gt;

&lt;p&gt;To install TinaCMS and create an easy visual editing experience for your site, you only need to install the npm package into your application with this one line: &lt;code&gt;npx @tinacms/cli init&lt;/code&gt;. This line will generate all files and tools needed to use TinaCMS.Under the hood, a GraphQL layer powers the content editing experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watch the video below to learn more about TinaCMS:&lt;/strong&gt; &lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qjIuwGbjmqM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explore the codebase and contribute to TinaCMS:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tinacms"&gt;
        tinacms
      &lt;/a&gt; / &lt;a href="https://github.com/tinacms/tinacms"&gt;
        tinacms
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Open source editor that brings visual editing into React websites. A developer-centric CMS to build contextual and intuitive editing experience without sacrificing code quality.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/tinacms/tinacms/blob/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/0262062c4ad476afb8a3650fdf5c20fe0cacee24e781727f3a3350fbb4bb3b2d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f74696e61636d732f74696e61636d733f636f6c6f723d626c7565" alt="GitHub license"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tinacms" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/014fb423ec33502ea4f89997a78c0f60bcce46ed8c46ed8b62d7e2720c96992f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f74696e61636d732e7376673f7374796c653d666c6174" alt="npm version"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://github.com/tinacms/tinacms/workflows/Build,%20Test,%20Lint%20for%20Master/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pB5vmPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tinacms/tinacms/workflows/Build%2C%2520Test%2C%2520Lint%2520for%2520Master/badge.svg" alt="Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/tinacms/tinacms#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/1aa1a78648c24abab3915898870999da231af9282b72d6dabf396dd6969d4362/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d3130312d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
&lt;a href="https://tina.io" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/40f5833ad7c2775f9196b7b307193e113e2c0d5dd938587e89d1e3345b70847a/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f666f7265737472792d64656d6f2f696d6167652f75706c6f61642f76313538353233343336302f54696e61434d532f54696e61434d532e706e67" alt="TINA CMS" title="Visit tinacms.org"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Tina is an open-source toolkit for building content management directly into your website.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://tina.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8e1975fcbcf06db2ff1b83c40e42f17d1bf4a15273637e69d36991343c0d500a/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f666f7265737472792d64656d6f2f766964656f2f75706c6f61642f64755f31362c775f3730302c655f6c6f6f702f76313537313135393937342f74696e612d6865726f2d64656d6f2e676966" alt="Tina Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://community.tinacms.org/" rel="nofollow"&gt;Community Forum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;Checkout the &lt;a href="https://tina.io/guides/tina-cloud/starter/overview/" rel="nofollow"&gt;tutorial&lt;/a&gt; to get started with TinaCMS.&lt;/p&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;Visit &lt;a href="https://tina.io/docs/" rel="nofollow"&gt;https://tina.io/docs/&lt;/a&gt; to view the full documentation.&lt;/p&gt;
&lt;h2&gt;
Development Process&lt;/h2&gt;
&lt;p&gt;See our &lt;a href="https://github.com/tinacms/tinacms/blob/main/ROADMAP.md"&gt;ROADMAP.md&lt;/a&gt; to learn how the maintainers work.&lt;/p&gt;
&lt;h2&gt;
Questions?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Ftinacms.org&amp;amp;text=I%20just%20checked%20out%20@tina_cms%20on%20GitHub%20and%20it%20is%20sweet%21&amp;amp;hashtags=TinaCMS%2Cjamstack%2Cheadlesscms" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c" alt="Tweet"&gt;&lt;/a&gt;
&lt;a href="https://community.tinacms.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83f26e9cc1d3a376a9def21f36c35dd6fad4a885a9aab5b3e5af894a194fa0c0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f666f72756d2d74696e61636d732d626c75652e7376673f6c6f676f3d646973636f75727365" alt="Forum"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href="https://community.tinacms.org/" rel="nofollow"&gt;community forum&lt;/a&gt; to ask questions or look us up on on Twitter at &lt;a href="https://twitter.com/tina_cms" rel="nofollow"&gt;@tina_cms&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Changelog&lt;/h2&gt;
&lt;p&gt;Check the &lt;a href="https://github.com/tinacms/tinacms./CHANGELOG.md"&gt;CHANGELOG&lt;/a&gt; for the latest updates to TinaCMS.&lt;/p&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;Please see our &lt;a href="https://github.com/tinacms/tinacms/blob/main/CONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Maintainers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Scott Byrne (&lt;a href="https://twitter.com/scottpbyrne" rel="nofollow"&gt;@scottpbyrne&lt;/a&gt;) ‚Äì Forestry.io&lt;/li&gt;
&lt;li&gt;Chris Davis (&lt;a href="https://github.com/Enigmatical"&gt;@Enigmatical&lt;/a&gt; ‚Äì Forestry.io&lt;/li&gt;
&lt;li&gt;DJ Walker(&lt;a href="https://twitter.com/wordsaboutcode" rel="nofollow"&gt;@wordsaboutcode&lt;/a&gt;) ‚Äì Forestry.io&lt;/li&gt;
&lt;li&gt;Jeff See (&lt;a href="https://github.com/jeffsee55"&gt;@jeffsee55&lt;/a&gt;) - Forestry.io&lt;/li&gt;
&lt;li&gt;Logan Anderson (&lt;a href="https://twitter.com/logan_anders0n" rel="nofollow"&gt;@logan_anders0n&lt;/a&gt;) - Forestry.io&lt;/li&gt;
&lt;li&gt;Jack Bevis (&lt;a href="https://github.com/jbevis"&gt;@jbevis&lt;/a&gt;) - Forestry.io&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
All Contributors ‚ú®
&lt;/h3&gt;
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href="https://allcontributors.org/docs/en/emoji-key" rel="nofollow"&gt;emoji key&lt;/a&gt;):&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;
&lt;a href="https://forestry.io" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFfyh_OC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars3.githubusercontent.com/u/16868456%3Fv%3D4%3Fs%3D100" width="100px;" alt=""&gt;&lt;br&gt;&lt;b&gt;Forestry.io&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/tinacms/tinacms#financial-forestryio" title="Financial"&gt;üíµ&lt;/a&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;a href="http://www.ncphi.com" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGeXlVCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars2.githubusercontent.com/u/824015%3Fv%3D4%3Fs%3D100" width="100px;" alt=""&gt;&lt;br&gt;&lt;b&gt;NCPhillips&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/tinacms/tinacms#projectManagement-ncphillips" title="Project Management"&gt;üìÜ&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms/commits?author=ncphillips" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms#blog-ncphillips" title="Blogposts"&gt;üìù&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms/issues?q=author%3Ancphillips" title="Bug reports"&gt;üêõ&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms/commits?author=ncphillips" title="Documentation"&gt;üìñ&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms#ideas-ncphillips" title="Ideas, Planning, &amp;amp; Feedback"&gt;ü§î&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms#infra-ncphillips" title="Infrastructure (Hosting, Build-Tools, etc)"&gt;üöá&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms#maintenance-ncphillips" title="Maintenance"&gt;üöß&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms/pulls?q=is%3Apr+reviewed-by%3Ancphillips" title="Reviewed Pull Requests"&gt;üëÄ&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms/commits?author=ncphillips" title="Tests"&gt;‚ö†Ô∏è&lt;/a&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;a href="https://github.com/dwalkr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j48Wsnek--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars2.githubusercontent.com/u/15221702%3Fv%3D4%3Fs%3D100" width="100px;" alt=""&gt;&lt;br&gt;&lt;b&gt;DJ&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/tinacms/tinacms#projectManagement-dwalkr" title="Project Management"&gt;üìÜ&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms/commits?author=dwalkr" title="Code"&gt;üíª&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms#blog-dwalkr" title="Blogposts"&gt;üìù&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms/issues?q=author%3Adwalkr" title="Bug reports"&gt;üêõ&lt;/a&gt; &lt;a href="https://github.com/tinacms/tinacms/commits?author=dwalkr" title="Documentation"&gt;üìñ&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tinacms/tinacms"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Comment below if you have or know of an Open Source project that you would like us to feature!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>slinkity</category>
      <category>tinacms</category>
      <category>jamstack</category>
    </item>
  </channel>
</rss>
