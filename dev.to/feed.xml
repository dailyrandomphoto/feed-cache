<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Tips on How To Create The Perfect Freelancer Profile </title>
      <author>Krowser Web Services </author>
      <pubDate>Sat, 01 May 2021 11:35:58 +0000</pubDate>
      <link>https://dev.to/krowser/5-tips-on-how-to-create-the-perfect-freelancer-profile-325h</link>
      <guid>https://dev.to/krowser/5-tips-on-how-to-create-the-perfect-freelancer-profile-325h</guid>
      <description>&lt;p&gt;Since today is International Workers Day, we decided to share some tips on how to create a perfect freelancer profile.&lt;/p&gt;

&lt;p&gt;UpWork, Freelancer.com, People Per Hour, Guru.com, are all great freelance platforms you can use as a starting point for your freelance career. However, just registering an account and filling it up with some random text is not going to work out well for you.&lt;/p&gt;

&lt;p&gt;If you’re serious about making a career as a freelancer, the first thing you need to do is create a complete and attractive freelancer profile.&lt;/p&gt;

&lt;p&gt;So, here’s what you should include in your freelancer profile.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-use-your-real-name"&gt;
  &lt;/a&gt;
  1 Use Your Real Name
&lt;/h1&gt;

&lt;p&gt;Even though it’s common sense to use a real name when doing business, a lot of freelancers are still using fake names on their freelancer profiles.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-upload-a-professional-photo"&gt;
  &lt;/a&gt;
  2 Upload A Professional Photo
&lt;/h1&gt;

&lt;p&gt;Don’t even think about using a selfie or a really weird close-up webcam photo as your profile picture. That’s a mistake most amateur freelancers make.&lt;/p&gt;

&lt;p&gt;Get cleaned up. Dress well. And ask someone else to take your picture. Make sure not to give too much attention to the background. More importantly, SMILE!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-craft-a-specific-headline"&gt;
  &lt;/a&gt;
  3 Craft A Specific Headline
&lt;/h1&gt;

&lt;p&gt;Your headline should describe your job title. So, try to be as specific as possible to make it easier for your client to understand what you do.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VjnODqA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnb1i8zwjmh50qtroysh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VjnODqA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnb1i8zwjmh50qtroysh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
No, not like that.&lt;/p&gt;

&lt;p&gt;This is not Twitter. Use a more professional headline&lt;/p&gt;

&lt;p&gt;For example, if you’re skilled in writing eBooks then describe yourself as an “eBook Writer”, instead of just “Writer”. Or “WordPress Plugin Developer”, instead of “Web Developer”.&lt;/p&gt;

&lt;p&gt;Narrow it down to a niche and you’ll have a better chance at getting discovered on a big platform like Upwork.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-write-your-bio-in-firstperson"&gt;
  &lt;/a&gt;
  4 Write Your Bio In First-Person
&lt;/h1&gt;

&lt;p&gt;Don’t describe yourself in the third person like you’re narrating a movie and avoid writing your freelancer profile as if it’s a page on a corporate website.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-describe-your-qualifications-and-experience"&gt;
  &lt;/a&gt;
  5 Describe Your Qualifications And Experience
&lt;/h1&gt;

&lt;p&gt;It’s best to include a sentence or two about your qualifications and experience in your bio. But, try not to brag too much. Don’t be like this guy.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nFgZi0Wl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0uzh7yqgg6l4obdljzh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFgZi0Wl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0uzh7yqgg6l4obdljzh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Also, use the “Employment History,” “Education,” and the “Other Experiences” sections to add more personality to your profile.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#extra-tip"&gt;
  &lt;/a&gt;
  Extra Tip
&lt;/h1&gt;

&lt;p&gt;If you are part of any company's Freelancer Program like the Krowser Web services Freelancer Developer Program or the Samsung Developers Program, you could spotlight the achievement of the firm to add more experience to your profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7O5zSj5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76w4pq391uveos2uajq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7O5zSj5u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76w4pq391uveos2uajq5.png" alt="With ❤️ from all of us at @Krowser Web Services."&gt;&lt;/a&gt;&lt;br&gt;
With ❤️ from all of us at Krowser Web Services.&lt;/p&gt;

&lt;p&gt;References:&lt;br&gt;
&lt;a href="https://freelancinghacks.com/create-perfect-freelancer-profile-upwork/"&gt;https://freelancinghacks.com/create-perfect-freelancer-profile-upwork/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.upwork.com/resources/9-tips-create-freelancer-profile-stands-out"&gt;https://www.upwork.com/resources/9-tips-create-freelancer-profile-stands-out&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freelancer.com/support/general/how-to-get-started-at-freelancer-com"&gt;https://www.freelancer.com/support/general/how-to-get-started-at-freelancer-com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hiring</category>
      <category>career</category>
    </item>
    <item>
      <title>Customize your terminal using oh-my-posh theme</title>
      <author>Shahin Alam</author>
      <pubDate>Sat, 01 May 2021 10:45:55 +0000</pubDate>
      <link>https://dev.to/shahinalam02/customize-your-terminal-using-oh-my-posh-theme-38if</link>
      <guid>https://dev.to/shahinalam02/customize-your-terminal-using-oh-my-posh-theme-38if</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ctEAs3GK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g81fo04v7pc7hgs75691.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ctEAs3GK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g81fo04v7pc7hgs75691.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hey-developers"&gt;
  &lt;/a&gt;
  Hey developers,
&lt;/h1&gt;

&lt;p&gt;Today I will show you how you can customize your windows terminal with your test like this. Or you can add your own theme. Trust me, and it’s super easy anyone can do. You need to know simple codding knowledge, and you are good to go. If you face any problem, write it down in the comment section. I will try to solve your problem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this tutorial, I am trying to make it as simple as I can. I will explain every detail you need to know when you are making your terminal theme.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Without wasting your valuable time, let’s jump to the tutorial.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#follow-those-simple-steps"&gt;
  &lt;/a&gt;
  Follow those simple steps.
&lt;/h1&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;               Set up Powerline in PowerShell
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Install the windows terminal by using this link.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab"&gt;https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:  Install a Powerline font&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.nerdfonts.com/font-downloads"&gt;https://www.nerdfonts.com/font-downloads&lt;/a&gt;&lt;br&gt;
Using this link, you will find the font named FiraMono Nerd Font. Download and install it on your system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:  Now, you need to install Install Git for Windows by using this link&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://git-scm.com/downloads"&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:  Let’s set up Git&lt;/strong&gt;&lt;br&gt;
Open windows terminal and type  (CTRL +, ) to open setting&lt;br&gt;
You'll want to append one of the profiles options below (depending on what version of git you have installed) to the "list": portion of the settings.json file&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W4BEsORu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pol8ou7qjqccfdobujiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4BEsORu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pol8ou7qjqccfdobujiw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#profile-options"&gt;
  &lt;/a&gt;
  Profile options
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Uncomment correct paths for command line and icon if you are using:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;*Git for Windows in %PROGRAMFILES%&lt;br&gt;
*Git for Windows in %USERPROFILE%&lt;br&gt;
*If you're using scoop&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lbyJEMGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhxesngcaj41prh5zaja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lbyJEMGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhxesngcaj41prh5zaja.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MYWdx3hy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7so6ew5e3xlzkowo1gm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MYWdx3hy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7so6ew5e3xlzkowo1gm3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Or you can use my setting.json file just copy and paste&lt;br&gt;
&lt;a href="https://git.io/J3nNy"&gt;https://git.io/J3nNy&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DhtqZAUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnrnnbjwcpg982wlqw5n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DhtqZAUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnrnnbjwcpg982wlqw5n.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like the ( Learn with Sumit) terminal, then paste this code without making any changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#step-5-install-oh-my-posh-on-windows-terminal"&gt;
  &lt;/a&gt;
  Step 5:  install oh my posh on windows terminal
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://ohmyposh.dev/"&gt;https://ohmyposh.dev/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Using  your windows terminal, install Posh-Git and Oh-My-Posh:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Install-Module posh-git -Scope CurrentUser&lt;br&gt;
Install-Module oh-my-posh -Scope CurrentUser&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are using PowerShell Core, install PSReadline:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Install-Module -Name PSReadLine -Scope CurrentUser -Force -SkipPublisherCheck&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;             Customize your PowerShell prompt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Using  your windows terminal, import  module Posh-Git and Oh-My-Posh:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Import-Module posh-git&lt;br&gt;
Import-Module oh-my-posh&lt;br&gt;
Set-PoshPrompt -Theme hotstick.minimal&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now paste one more command&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo $profile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;It will show you this ps1 file path.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"C:\Users\Shahi\OneDrive\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Then paste another command&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;notepad $profile&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q7OUesaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jgc99ug9re6iackjz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7OUesaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jgc99ug9re6iackjz9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It will open a notepad in this empty space. Paste the code below and save it&lt;/strong&gt;&lt;br&gt;
Import-Module posh-git&lt;br&gt;
Import-Module oh-my-posh&lt;br&gt;
Set-PoshPrompt -Theme hotstick.minimal&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-6-setup-windows-terminal-settingjson"&gt;
  &lt;/a&gt;
  Step 6:  setup windows terminal setting.json
&lt;/h1&gt;

&lt;p&gt;Open windows terminal and type  (CTRL +, ) to open setting&lt;br&gt;
Change those setting &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ca2i7I7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2buthgqb7cz20taswu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ca2i7I7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2buthgqb7cz20taswu6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-7-customize-windows-terminal-theme-json"&gt;
  &lt;/a&gt;
  Step 7:  customize windows terminal Theme JSON.
&lt;/h1&gt;

&lt;p&gt;In this step, you need to copy-paste my customized theme.&lt;br&gt;
Open terminal and run &lt;br&gt;
&lt;code&gt;Get-PoshThemes&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now you can see the list of all themes of oh-my-posh. We pick one theme named hotstick.minimal.omp.json&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Paste the command to the terminal.&lt;br&gt;
&lt;code&gt;Set-PoshPrompt -Theme hotstick.minimal&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#now-lets-customize-hotstickminmal"&gt;
  &lt;/a&gt;
  Now let’s customize hotstick.minmal
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://git.io/J3cIq"&gt;https://git.io/J3cIq&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Check the link and download the hotstick.minimal.omp.json&lt;br&gt;
file:&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#replace-the-hotstickminimal-json-file-on-this-file-path"&gt;
  &lt;/a&gt;
  Replace the hotstick.minimal json file on this file path
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;"C:\Program Files\WindowsPowerShell\Modules\oh-my-posh\3.134.0\themes\hotstick.minimal.omp.json"&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>tutorial</category>
      <category>devops</category>
      <category>discuss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to send serverless emails with Next.js and Sengrid.</title>
      <author>Kenneth Mark</author>
      <pubDate>Sat, 01 May 2021 10:07:44 +0000</pubDate>
      <link>https://dev.to/kennymark/how-to-send-serverless-emails-with-next-js-and-sengrid-40lj</link>
      <guid>https://dev.to/kennymark/how-to-send-serverless-emails-with-next-js-and-sengrid-40lj</guid>
      <description>&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/"&gt;Next.js knowledge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vercel.com/dashboard"&gt;Vercel account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/"&gt;Github account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sendgrid.com/"&gt;Sengrid&lt;/a&gt; account and its API keys&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@sendgrid/mail"&gt;Sendgrid's&lt;/a&gt; npm package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the biggest disappointments I encountered whilst learning web development, is that you can't send emails on the frontend. I  later discovered that you needed a server to accomplish this task. Today, luckily enough for us, there are a variety of technologies and libraries that enables us to achieve this without having to set up a server, hosting, ssh just to send an email.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will be accepting emails in my inbox sent to me by anyone on my website.  There are 3 main parts to this, the frontend, backend and Sendgrid. The frontend is built on the Next.js which includes features such as SSR (server side rendering), ISR(incremental static regeneration) and SSG(static site generation).  The main goal of this article is going to be achieve with another of Next.js known as API routes. API routes or  serverless functions are functions that are invoked only when called. In Next.js, api routes sits in your application in the pages folder in a folder named api. Each file in that folder exports a default anonymous function and you can make requests to the route by is by making requests to &lt;code&gt;/api/{filename}&lt;/code&gt;.  The end result should look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have ever written a server in express before, the code above should look family because it acts exactly as the route handlers for express routes.&lt;/p&gt;

&lt;p&gt;Before you proceed ensure you have stored the API keys in the .env file. It should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;EMAIL_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"your-sendgrid-api-key"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#form"&gt;
  &lt;/a&gt;
  Form
&lt;/h3&gt;

&lt;p&gt;The first step of sending an email, is designing and developing the form as you wish. In my case. I am using ChakraUI with React-hook-form, but you can use any UI component library of your choice. Here's how my form looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormLabel&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subject"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Subject&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormLabel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'subject'&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subject"&lt;/span&gt;  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;inputProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Subject&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt; &lt;span class="na"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'subject'&lt;/span&gt; &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'red.600'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormLabel&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormLabel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;inputProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt; &lt;span class="na"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt; &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'red.600'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormLabel&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Email address&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormLabel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;setValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;inputProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt; &lt;span class="na"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt; &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'red.600'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormLabel&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Message&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormLabel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Textarea&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'textarea'&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setValidation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;inputProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'none'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMessage&lt;/span&gt; &lt;span class="na"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt; &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'red.600'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'submit'&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'white'&lt;/span&gt; &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'gray.900'&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'100%'&lt;/span&gt; &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Submit
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#send-request-to-api-route"&gt;
  &lt;/a&gt;
  Send request to api route
&lt;/h3&gt;

&lt;p&gt;Now send the data from the form to the api route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendMail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/contact&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;headers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

            &lt;span class="c1"&gt;//if sucess do whatever you like, i.e toast notification&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// toast error message. whatever you wish &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#receiving-email-and-sending-it-off"&gt;
  &lt;/a&gt;
  Receiving email and sending it off
&lt;/h3&gt;

&lt;p&gt;Once you have sent the email from your frontend, its time to capture it and send it to yourself. This is achieved by first installing  sengrid' via &lt;code&gt;npm install @sendgrid/mail&lt;/code&gt;. Once done, ensure you have created a contact.js in folder api folder and paste this in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sgMail&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sendgrid/mail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;sgMail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setApiKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EMAIL_API_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;your-email@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sgMail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Email has been sent`&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error sending email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thats it, the code for sending the email via Sendgrid is quite simple and self explanatory.  We first set the api key for Sengrid and after, we create our handler for the route and extract out the email, subject, message and name and then wrap our sgMail.send in a try/catch block.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;p&gt;Before deployment, ensure you code is up on Github or Gitlab, also test it and make sure it runs well locally .After these steps, log into your vercel account and start a new project with that Github repo. And thats it, Vercel will build your app and deploy it statically and give you a url to view the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;You can repurpose the knowledge and send any type of email you want. Sendgrid allows you to create custom and great looking emails using templates. You can also swap Sengrid for your favourite transactional email sending tools such Mailgun, Postmark, Amazon ses or even use gmail via nodemailers SMTP support&lt;/p&gt;

&lt;p&gt;If you like this post, please sign up for my newsletter at &lt;a href="https://buttondown.email/kennymark"&gt;https://buttondown.email/kennymark&lt;/a&gt; or visit my website for more info at &lt;a href="https://kennymark.com"&gt;https://kennymark.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>nextjs</category>
      <category>sendgrid</category>
    </item>
    <item>
      <title>Creating a Jamstack blog [Part 2]</title>
      <author>Ren</author>
      <pubDate>Sat, 01 May 2021 10:04:16 +0000</pubDate>
      <link>https://dev.to/nownano/creating-a-jamstack-blog-part-2-ef3</link>
      <guid>https://dev.to/nownano/creating-a-jamstack-blog-part-2-ef3</guid>
      <description>&lt;p&gt;&lt;em&gt;Be sure to check out &lt;a href="https://dev.to/nownano/creating-a-jamstack-blog-part-1-14eo"&gt;Part 1&lt;/a&gt; of this series first.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a cross-post from my blog, NowNano. You can find the original &lt;a href="https://nownano.tv/Creating-a-Jamstack-blog/Our-blog-components"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-blog-components"&gt;
  &lt;/a&gt;
  Our blog components
&lt;/h2&gt;

&lt;p&gt;Our blogging application needs common features which all blogs have, a &lt;code&gt;Header&lt;/code&gt;, &lt;code&gt;Preview&lt;/code&gt;, and a &lt;code&gt;Post&lt;/code&gt;.&lt;br&gt;
These components are the re-useable building blocks for our pages and blog posts. In the root of your project, create a new folder called &lt;code&gt;components&lt;/code&gt;, this is where we will add the above component files. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#header"&gt;
  &lt;/a&gt;
  Header
&lt;/h2&gt;

&lt;p&gt;Let's start with the Header, a staple of any blog. Our Header component will hold the name of our blog and any navigation links you would like to include.&lt;br&gt;
Inside of &lt;code&gt;components&lt;/code&gt; add a new file called &lt;code&gt;Header.jsx&lt;/code&gt;.&lt;br&gt;
Inside of &lt;code&gt;Header.jsx&lt;/code&gt;, we are going to create a header with your blog name and an outgoing link (of your choice).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#header-layout"&gt;
  &lt;/a&gt;
  Header Layout
&lt;/h3&gt;

&lt;p&gt;Let's begin by creating the layout for our Header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;NavLink&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's break this down, as you can see I'm using a stateless function here to create our Header component, you'll be seeing that a lot. Next, I'm using the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; tags to wrap our header content (semantics are important). Inside of our header, there is a section tag which wraps around our Blog Name link and another section tag. &lt;br&gt;
I don't want our header content to stretch to the full width of the user's web page, so we're going to use this wrapper section to limit the width of our header content. Our header content within the wrapper section is our Blog Name link and another section which could potentially hold a list of navigation links (but for now we will use only one). &lt;/p&gt;

&lt;p&gt;You'll notice that I've included the line &lt;code&gt;import Link from 'next/link'&lt;/code&gt; and I'm using NextJS's built-in &lt;code&gt;Link&lt;/code&gt; component for the blog name. Using &lt;code&gt;Link&lt;/code&gt; when linking to pages &lt;em&gt;within&lt;/em&gt; your own application is good practice. If your NavLink will link to a page inside of your blog, wrap it in the &lt;code&gt;Link&lt;/code&gt; component, otherwise use a normal &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; like above. &lt;/p&gt;

&lt;p&gt;Additionally, you'll still want to have an inner &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; inside of your &lt;code&gt;Link&lt;/code&gt; component. The inner &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; grants us the usual hyperlink features, such as a pointer cursor when hovering and the ability to open the link in a new tab. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implementing-our-header"&gt;
  &lt;/a&gt;
  Implementing our Header
&lt;/h3&gt;

&lt;p&gt;Let's go ahead and add this component to our &lt;code&gt;./pages/_app.js&lt;/code&gt; file so we can preview it on our web page. Here is the full code for &lt;code&gt;_app.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/Header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice I wrapped our &lt;code&gt;Header&lt;/code&gt; and &lt;code&gt;Component&lt;/code&gt; tags within a React Fragment (&lt;code&gt;&amp;lt;&amp;gt;...&amp;lt;/&amp;gt;&lt;/code&gt;). A component can only return one parent element, it cannot return siblings, so we need to wrap our &lt;code&gt;Header&lt;/code&gt; and &lt;code&gt;Component&lt;/code&gt; in something. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-header"&gt;
  &lt;/a&gt;
  Styling the Header
&lt;/h3&gt;

&lt;p&gt;Be sure to save and let's move back to &lt;code&gt;/components/Header.jsx&lt;/code&gt; where we will continue styling it, starting with &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Update your &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; tag to use the style class names below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-16 w-full flex justify-center fixed top-0 left-0 right-0 z-50 bg-white"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;React / NextJS uses &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;, and these styles come pre-defined by Tailwind.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we are setting our height and width for our header using &lt;code&gt;h-20&lt;/code&gt; and &lt;code&gt;w-full&lt;/code&gt;. We are establishing a &lt;code&gt;flex&lt;/code&gt; layout so we can center our inner elements with &lt;code&gt;justify-center&lt;/code&gt;. We also want to keep the header itself positioned at the top at all times so we add &lt;code&gt;fixed&lt;/code&gt; and add a few default positions (&lt;code&gt;top-0 left-0 right-0&lt;/code&gt;) to keep the header in place and above everything else. Finally, we use &lt;code&gt;bg-white&lt;/code&gt; to add a white background color so our header is never transparent and the content overlapping with your post content.&lt;/p&gt;

&lt;p&gt;As always and I can't stress this enough, you can find the documentation for these styles via &lt;a href="https://tailwindcss.com/docs"&gt;https://tailwindcss.com/docs&lt;/a&gt;&lt;br&gt;
If you're going to learn a new tool, you should always be prepared to reference the documentation.&lt;/p&gt;

&lt;p&gt;Next, we will style our first &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, which wraps around and positions the content (the blog name and navigation links) of our header component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-full max-w-screen-lg flex justify-between items-center mx-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ... 
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want our content to be at full width, but we don't want the content to stretch too far across the screen (otherwise it looks weird). Therefore, we add &lt;code&gt;max-w-screen-lg&lt;/code&gt; which prevents the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; and all of its contents from going further than &lt;code&gt;1024px&lt;/code&gt; wide. Similar to many of our components, we will then establish a &lt;code&gt;flex&lt;/code&gt; layout and, since we want our blog name to be positioned at the left and our navigation links to the right, we will add &lt;code&gt;justify-between&lt;/code&gt; which positions those for us. We also add &lt;code&gt;items-center&lt;/code&gt; here to keep everything vertically aligned. The addition of the &lt;code&gt;mx-4&lt;/code&gt; also helps for adding additional margins for mobile devices. &lt;/p&gt;

&lt;p&gt;Great! Now let's style our blog name with a few text styles to make it stand out a bit more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-2xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We cannot add class names directly to our &lt;code&gt;Link&lt;/code&gt; component, so we need to add our class names to our &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; instead. As you can see, I've added &lt;code&gt;text-2x1&lt;/code&gt; to our &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; which will increase the font-size of our blog name. &lt;/p&gt;

&lt;p&gt;Now we will work on our navigation links, we first need to style the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; which holds our navigation links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;NavLink&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this section, we want to ensure our navigation links are vertically aligned to the center of our header. We will follow that up by styling the actual links:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mx-2 hover:opacity-70"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;NavLink&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start off by adding margins to our navigation link, if you're going to add more than one link, you should always have proper margins around each link. Next, we're adding &lt;code&gt;hover:opacity-70&lt;/code&gt; to our &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; so the navigation link text slightly changes color when a cursor hovers over it. &lt;/p&gt;

&lt;p&gt;Fantastic! That should cover everything we need for our &lt;code&gt;Header&lt;/code&gt; component. Here's the complete code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; 
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-16 w-full flex justify-center fixed top-0 left-0 right-0 z-50 bg-white"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-full max-w-screen-lg flex justify-between items-center mx-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-2xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mx-2 hover:opacity-70"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;NavLink&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;    
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading [Part 2] of this guide. I'll be posting the next part soon.&lt;/p&gt;

&lt;p&gt;If you're itching to continue, you can find the full guide on my &lt;a href="https://nownano.tv/Creating-a-Jamstack-blog"&gt;blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Exploring backtracking</title>
      <author>Andrei Visoiu</author>
      <pubDate>Sat, 01 May 2021 09:58:36 +0000</pubDate>
      <link>https://dev.to/kruzzy/exploring-backtracking-25dp</link>
      <guid>https://dev.to/kruzzy/exploring-backtracking-25dp</guid>
      <description>&lt;p&gt;Everyone has had at least slight meeting with backtracking throughout their lives, be it unknowingly - for example, as little kids, when navigating mazes for fun, when faced with a turn, say left or right, we will always choose one. However, the choice might not always prove correct - and we will go back, coming at the crossroads again, now choosing the other way, and reaching the exit.&lt;/p&gt;

&lt;p&gt;This is exactly the kind of work that backtracking algorithms do. Their aim is to find all (or some) solutions to some constraint satisfaction computational problems:&lt;br&gt;
    - &lt;strong&gt;decision problems&lt;/strong&gt;, using it to find a feasible solution.&lt;br&gt;
    - &lt;strong&gt;optimisation problems&lt;/strong&gt;, using it to find the best solution.&lt;br&gt;
    - &lt;strong&gt;enumeration problems&lt;/strong&gt;, using it to find all the solutions.&lt;/p&gt;

&lt;p&gt;Defined formally, backtracking is an algorithmic technique for solving problems recursively, aiming to build a solution incrementally. It removes the candidate solutions that fail to satisfy the constraint as soon as it builds them and backtracks, going to the previous solution, trying to derive other solutions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-a-basic-backtracking-problem"&gt;
  &lt;/a&gt;
  Implementing a basic backtracking problem
&lt;/h2&gt;

&lt;p&gt;Let us now take one of the most basic backtracking problems. Let &lt;strong&gt;N&lt;/strong&gt; be a natural number. Generate all the permutations of the numbers from 1 through &lt;strong&gt;N&lt;/strong&gt; in lexicographic order.&lt;/p&gt;

&lt;p&gt;For example, let &lt;strong&gt;N&lt;/strong&gt; equal 3. Then, the solutions to our problem will be:&lt;br&gt;
1 2 3 &lt;br&gt;
1 3 2 &lt;br&gt;
2 1 3 &lt;br&gt;
2 3 1&lt;br&gt;
3 1 2 &lt;br&gt;
3 2 1&lt;/p&gt;

&lt;p&gt;We can clearly see that this is an &lt;strong&gt;enumeration problem&lt;/strong&gt;, asking us to generate &lt;em&gt;all&lt;/em&gt; permutations of these numbers. &lt;/p&gt;

&lt;p&gt;A straightforward recursive backtracking approach is fairly easy to come up with. At any point in time, our recursive function should know &lt;strong&gt;how many numbers it generated until now&lt;/strong&gt;, and &lt;strong&gt;what does numbers are&lt;/strong&gt; (we can also call that a partial solution). Then, it should follow the next steps:&lt;br&gt;
    1. If it has already generated &lt;strong&gt;N&lt;/strong&gt; numbers, stop and print the solution.&lt;br&gt;
    2. Loop through all numbers from 1 to &lt;strong&gt;N&lt;/strong&gt; in ascending order. If a certain number &lt;strong&gt;i&lt;/strong&gt; is already added, skip it. If not, add it to the solution and make another recursive call.&lt;/p&gt;

&lt;p&gt;We have two ways in which to check if a number &lt;strong&gt;i&lt;/strong&gt; was already added:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;loop through our partial solution and check if &lt;strong&gt;i&lt;/strong&gt; is already there.&lt;/li&gt;
&lt;li&gt;use an additional boolean array, which will &lt;em&gt;true&lt;/em&gt; at index &lt;strong&gt;i&lt;/strong&gt; if the element has already been added, or &lt;em&gt;false&lt;/em&gt; otherwise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at a basic implementation using the second method to check for added numbers:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Note that, in this example, I passed the arrays to the recursive function at &lt;strong&gt;every single call&lt;/strong&gt;. &lt;br&gt;
However, when constricted by memory limits, another approach might be better suited to our needs.&lt;/p&gt;

&lt;p&gt;Let's first talk about why this approach might become problematic in memory-limited scenarios.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-call-stack"&gt;
  &lt;/a&gt;
  The call stack
&lt;/h2&gt;

&lt;p&gt;Recursion uses something called a &lt;a href="https://en.wikipedia.org/wiki/Call_stack"&gt;call stack&lt;/a&gt; to store information about the function calls. We can imagine this stack like a stack of boxes, one on top of the other. &lt;/p&gt;

&lt;p&gt;Each consecutive recursive call adds up to the stack &lt;strong&gt;with all its parameters&lt;/strong&gt;. So, a function call with arrays as arguments will take up much more space than one with no arguments. And, as our number &lt;strong&gt;N&lt;/strong&gt; increases, the size of our call stack increases. For bigger and bigger values of &lt;strong&gt;N&lt;/strong&gt; and tight memory limits, it might overflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Python, by default, the call stack limit is 1000&lt;/strong&gt;. This refers to the number of function calls "on top of one another", and does not specify any limit. Although not recommended due to the way Python handles recursion, the limit can be modified using the &lt;strong&gt;setrecursionlimit()&lt;/strong&gt; function from the &lt;strong&gt;sys&lt;/strong&gt; module.&lt;/p&gt;

&lt;p&gt;We can, then, make our two arrays, &lt;strong&gt;solution&lt;/strong&gt; and &lt;strong&gt;appears&lt;/strong&gt; global. As you can see, we already made the necessary resets when exiting recursion - in general, when making some operations on variables before recursion (in our case, modify the &lt;strong&gt;appears&lt;/strong&gt; array and add the number to our &lt;strong&gt;solution&lt;/strong&gt; array), and making the exact inverses after coming back from recursion will left the variables as they were before. That makes sense, considering the way in which the call stack is managed, following a &lt;strong&gt;First In, First Out&lt;/strong&gt; approach. The last recursively called function is the first to finish execution, resetting all the variables to their pre-recursion states everytime a function is "popped" from the call stack.&lt;/p&gt;

&lt;p&gt;Below is the modified snippet:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In Python, in order to make our global variables valid inside a funtion definition, we have to use the keyword &lt;strong&gt;global&lt;/strong&gt; before accessing them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-way-to-visualise-backtracking"&gt;
  &lt;/a&gt;
  A way to visualise backtracking
&lt;/h2&gt;

&lt;p&gt;As you may remember if you have read my previous articles, we had a mini-series of articles running regarding &lt;a href="https://dev.to/kruzzy/why-is-graph-theory-so-amazing-part-1-5ii"&gt;Graph Theory&lt;/a&gt;. Well, we can transpose backtracking into a graph theory problem by considering that our search space is a directed graph. For example, let us consider our problem and suppose we have already reached depth &lt;strong&gt;1&lt;/strong&gt; (i.e. we have already chosen the first number of our permutation).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmeWValX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyji6lh1ekgnwlmvszb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmeWValX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyji6lh1ekgnwlmvszb2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The exact steps of our algorithm are showcased in the picture above. Considering it already chose 1, the algorithm will try to put 1 again, dismissing the solution. Then choose 2, which will work, and try to add 1, 2 and 3 to it, of which only 3 will be feasible.&lt;/p&gt;

&lt;p&gt;Backtracking can be considered a &lt;a href="https://dev.to/kruzzy/why-is-graph-theory-so-amazing-part-2-depth-first-search-topological-sorting-jkg"&gt;depth first search&lt;/a&gt; on this state graph of our problem.&lt;/p&gt;

&lt;p&gt;I hope I have given you some insights regarding backtracking with the article. &lt;em&gt;The Magic of Computing&lt;/em&gt; will be back next week with another interesting computational topic, but, until then, why don't you dwelve into some mathematical subjects, say... &lt;a href="https://dev.to/kruzzy/prime-numbers-fast-and-slow-part-1-224f"&gt;prime numbers&lt;/a&gt;? Or maybe the &lt;a href="https://dev.to/kruzzy/the-magic-of-the-fibonacci-numbers-why-we-love-computing-them-part-1-18gp"&gt;Fibonacci series&lt;/a&gt; is more to your liking.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>python</category>
      <category>algorithms</category>
      <category>backtracking</category>
    </item>
    <item>
      <title>I gave my first workshop yesterday. Here's what I learned.</title>
      <author>Jordi Enric</author>
      <pubDate>Sat, 01 May 2021 09:48:23 +0000</pubDate>
      <link>https://dev.to/jordienr/i-gave-my-first-workshop-yesterday-here-s-what-i-learned-8pn</link>
      <guid>https://dev.to/jordienr/i-gave-my-first-workshop-yesterday-here-s-what-i-learned-8pn</guid>
      <description>&lt;p&gt;Hello! Yesterday I gave my first ever workshop, about frontend testing principles. Lasted 2 hours and 20+ people showed up. I learned a ton. Here are the things I'll do better next time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Only write bullet points of stuff I want to talk about and improvise more. I had notes that didn't help me because they were paragraphs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare possible questions people might have since asking "anyone has any questions?" doesn't seem to work. I think most people don't have time to process the info + come up with questions. Thankfully I had 2 very engaged participants in the workshop that asked questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask participants by email a few days before the workshop how much experience do they have with the thing I'm going to teach. I did this too late, and I had to change stuff the day before the workshop. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare real life examples and stories of real life situations where whatever I'm explaining is used / helps. People will not remember technical stuff but will remember stories. I'll try to make these stories funny if I can.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any tips you'd like to share?&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/jordienr"&gt;Twitter&lt;/a&gt; for more!&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Implementing testing in Golang</title>
      <author>Lucas Neves Pereira</author>
      <pubDate>Sat, 01 May 2021 09:39:54 +0000</pubDate>
      <link>https://dev.to/lucasnevespereira/implementing-testing-in-golang-4mcp</link>
      <guid>https://dev.to/lucasnevespereira/implementing-testing-in-golang-4mcp</guid>
      <description>&lt;p&gt;Hello dear readers, being a Junior to Mid Developer myself I've been of course faced to this weird "fear" of testing my code. Maybe it isn't fear, maybe we just do not talk much about it.&lt;/p&gt;

&lt;p&gt;But either way I've been recently learning to program in Golang and I want it to do it seriously, in the right way. That's why this time I did not skip the tests subject.&lt;/p&gt;

&lt;p&gt;In this article I want to show how easily testing our code can be, it is not an effort, specially with the testing standard package incorporated in Go.&lt;/p&gt;

&lt;p&gt;As an example I am going to implement and test a method that checks if a phrase is a &lt;a href="https://en.wikipedia.org/wiki/Heterogram_(literature)"&gt;heterogram&lt;/a&gt; or not.&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;heterogram&lt;/strong&gt; is basically a word that doesn't contain a repeating letter. However it can contain multiple spaces or symbols like hyphens (-).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-into-it-writing-our-first-test"&gt;
  &lt;/a&gt;
  Let's get into it! Writing our first test
&lt;/h2&gt;

&lt;p&gt;I've started by creating a Golang app using go modules,&lt;code&gt;go mod init my app&lt;/code&gt;. Then i've created a package heterogram containing an&lt;code&gt;heterogram.go&lt;/code&gt;with an IsHeterogram() method and also I've created an&lt;code&gt;heterogram_test.go&lt;/code&gt;file for our testing functions. Finally a &lt;strong&gt;main.go&lt;/strong&gt; file where I could possibly import my heterogram method to run it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Uja4MRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1119/1%2AlnZaTY4ODnSzSSEUktAaPA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Uja4MRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1119/1%2AlnZaTY4ODnSzSSEUktAaPA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;heterogram_test.go&lt;/code&gt;file let's import the golang testing package and create a function TestIsHeterogram, passing in parameter a pointer to the struct T of that package to manage test state and support formatted test logs. We're going to define an input that is the string we want to check and also what we excepect of it.&lt;/p&gt;

&lt;p&gt;For example, the string (input) toto is expected to return false because the "o" letter is present &lt;em&gt;2 times&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So if IsHeterogram("toto") returns &lt;strong&gt;false&lt;/strong&gt; the test passes and if it returns &lt;strong&gt;true&lt;/strong&gt; the tests fails.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---o_LdwV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1198/1%2AmDGAoDqHL9VqKkwlkGqQ5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---o_LdwV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1198/1%2AmDGAoDqHL9VqKkwlkGqQ5g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to start using this very simple test we need to actually start implementing our heterogram method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-heterogram-algorithm"&gt;
  &lt;/a&gt;
  Implementing Heterogram algorithm
&lt;/h2&gt;

&lt;p&gt;As you may have guessed our method is going to receive a string in parameter, we then are going to to loop trough that string and check each character. We are using the &lt;strong&gt;range&lt;/strong&gt; keyword in our loop that returns a &lt;a href="https://yourbasic.org/golang/rune/#:~:text=The%20rune%20type%20is%20an,and%20a%20few%20other%20characters."&gt;rune&lt;/a&gt; , that is basically a superset of the ASCII table that can handle more characters. We are going to append each character (runes) to a slice named exists to store the existing letters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YIjTYVwT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/823/1%2AhNxT7tl41QHA8eN_0zTvxA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YIjTYVwT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/823/1%2AhNxT7tl41QHA8eN_0zTvxA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to check if the following character &lt;strong&gt;(rune)&lt;/strong&gt; of our loop is present in our slice exists, if it is then we return false. For that we are going to write another helper function that we are going to call simply contains(). This method is going to loop trough a slice of runes and check if a rune is present or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuhpDoo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/823/1%2AVm_3Aw1Jt8_aswvG8PuQaw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuhpDoo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/823/1%2AVm_3Aw1Jt8_aswvG8PuQaw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now back to IsHeterogram() we can check if a character of our string is already in the exists slice. If it does exists then we return &lt;strong&gt;false&lt;/strong&gt;,if not at the end of our loop our method is going to return &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfpuhcE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/828/1%2A3ponu9o9e11iXNJdqt9jWg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfpuhcE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/828/1%2A3ponu9o9e11iXNJdqt9jWg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go back to our test function and run it. To run a test simply run &lt;code&gt;go test&lt;/code&gt; inside of the heterogram package &lt;strong&gt;(cd into that folder)&lt;/strong&gt; or use your IDE to run it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mt1qqKx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1204/1%2AgL_9E6BIzeHOjvCnbUANkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mt1qqKx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1204/1%2AgL_9E6BIzeHOjvCnbUANkg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that our test has passed. Now let's try something, let's see if our method is well tested, change the input from "toto" to "Alpha" and run the test again. The world "Alpha" has two "a" so the test should pass right ? It should return false.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXxEcA5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1204/1%2AqnispYQ1-88sII844FMsvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXxEcA5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1204/1%2AqnispYQ1-88sII844FMsvg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well as we can see it has failed, the result for "Alpha" is true. And this shows that our method IsHeterogram is not finished, we didn't handled the uppercase letters. See how testing can improve our development ?\&lt;br&gt;
Let's quickly fix our method by lowercase all of our inputs using the package &lt;strong&gt;strings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sqrTo9hY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/689/1%2AjX3ul0c_XtUTQtutUZeNRQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sqrTo9hY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/689/1%2AjX3ul0c_XtUTQtutUZeNRQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_Ggng2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1195/1%2AsOIoSpeCbNQnwTa4Jg8EXA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_Ggng2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1195/1%2AsOIoSpeCbNQnwTa4Jg8EXA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay perfect, what if we wanted to test the case of &lt;strong&gt;"six-year-old"&lt;/strong&gt; for example, remember that hyphens (-) are allowed. Well we could change again the input variable but let me show a better way to handle multiple test cases 🙂.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-multiple-test-cases"&gt;
  &lt;/a&gt;
  Add multiple test cases
&lt;/h2&gt;

&lt;p&gt;We have tested both &lt;strong&gt;"toto"&lt;/strong&gt; and &lt;strong&gt;"Alpha"&lt;/strong&gt; but now we also want to test double hyphens with &lt;strong&gt;"six-year-old"&lt;/strong&gt; that should be true and maybe an empty string as well "" that should be true too. We are starting to have multiple cases to test and instead of changing manually let's create a &lt;code&gt;case_test.go&lt;/code&gt; file in our &lt;strong&gt;heterogram&lt;/strong&gt; package where we can store this test cases.&lt;/p&gt;

&lt;p&gt;We are going to do this by defining a struct with 3 fields: description, input and expected. We are going to pass in as many cases as we want. Then all we have to do is go back to our TestHeterogram function and replace the previous code by a for loop that ranges our struct of cases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSfUef8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/971/1%2AWv74D1bV1SW_qO2sPccvXw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSfUef8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/971/1%2AWv74D1bV1SW_qO2sPccvXw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qmLbXXwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1090/1%2A1FuytrMeb6g_uiedFXT0YQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qmLbXXwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1090/1%2A1FuytrMeb6g_uiedFXT0YQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See how simple our test file looks now. We can run all our tests cases in a single time.&lt;/p&gt;

&lt;p&gt;Before running &lt;code&gt;go test&lt;/code&gt; one last time let's fix our IsHeterogram method to handle double hyphens. To do this before before checking if the exists slice contains our letter I am going to check if it is actually a letter by using the &lt;strong&gt;unicode&lt;/strong&gt; package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDJ9R03g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/576/1%2A73LOtKYZDJvJ_X-qiMWVDg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDJ9R03g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/576/1%2A73LOtKYZDJvJ_X-qiMWVDg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay now we are ready hit that &lt;code&gt;go test&lt;/code&gt; one final time and all our tests should pass 🙂.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you all for reading this article, if you have any questions don't hesitate to contact me. For those of you who are more visual learners I've filmed a video about this you can go &lt;a href="https://youtu.be/DaZDqRBIKCA"&gt;check it out here&lt;/a&gt; 😀.&lt;/p&gt;

&lt;p&gt;See you soon ! 🙂&lt;/p&gt;

</description>
      <category>go</category>
      <category>testing</category>
      <category>algorithms</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The API Economy</title>
      <author>Spurwing</author>
      <pubDate>Sat, 01 May 2021 09:12:11 +0000</pubDate>
      <link>https://dev.to/spurwing/the-api-economy-1o69</link>
      <guid>https://dev.to/spurwing/the-api-economy-1o69</guid>
      <description>&lt;p&gt;The sudden emergence of the API economy has been fascinating to watch.&lt;/p&gt;

&lt;p&gt;Application Programming Interfaces (APIs) have been a big part of the application development world for as long as applications have been around, but they've never been quite as valuable (monetarily, anyway) as they are today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dk9hQ0BK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6sxwntcwlseev35aj2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dk9hQ0BK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6sxwntcwlseev35aj2c.png" alt="api examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our increasingly digital global economy, companies are looking for any competitive advantage they can find to boost their services, to improve their efficiency, and to provide more seamless and more capable solutions.&lt;/p&gt;

&lt;p&gt;More now than ever before companies are turning to APIs to dramatically extend the capabilities of their own applications, finding new ways to "hook" different solutions together to create even more powerful and more feature-rich applications faster than ever before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3PuKrewi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjpemlta7sik4p4utqg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3PuKrewi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjpemlta7sik4p4utqg1.png" alt="api demos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This has driven the demand for APIs through the roof, touching off a brand-new "API Economy" that few could have ever predicted even just a few years ago.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-overview-of-the-emergent-api-economy"&gt;
  &lt;/a&gt;
  A Quick Overview of the Emergent API Economy
&lt;/h2&gt;

&lt;p&gt;This new frontier in the tech world, the API economy is changing the way that businesses built to leverage these systems grow and scale.&lt;/p&gt;

&lt;p&gt;Take a technology company like Uber, for example.&lt;/p&gt;

&lt;p&gt;A peek beneath the hood at the technology that makes this unicorn tech company possible would show the value and importance of APIs. A significant chunk of the systems used (on both the consumer facing side of things as well as internally) are built on the back of APIs pulling data and functionality from a whole different range of different applications, sort of cobbled altogether.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bpGTxbRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyhx4100eicsbcvu6i7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpGTxbRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyhx4100eicsbcvu6i7a.png" alt="api architecture at uber"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows companies to build products and services a whole lot faster than they ever would have been able to in the past.&lt;/p&gt;

&lt;p&gt;It also allows businesses to scale much faster than ever before, rapidly iterating by adding new functionality, new capabilities, and new services through APIs that would have taken a lot longer (and a lot more money) to implement if everything had to be built from scratch every time new features were considered.&lt;/p&gt;

&lt;p&gt;The most exciting thing about this new API economy is that we are only just now beginning to see how APIs can open up a world of options while making the technology community a lot more dynamic.&lt;/p&gt;

&lt;p&gt;Our already super connected world is only going to be more connected through the emergence of this API infrastructure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breakdown-of-the-top-apis-on-the-market-today"&gt;
  &lt;/a&gt;
  Breakdown of the Top APIs on the Market Today
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#email-marketing-mailchimp"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Email Marketing&lt;/strong&gt; - &lt;a href="https://mailchimp.com/"&gt;MailChimp&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Email marketing is hugely important in today's hypercompetitive business space, and nobody makes integrating email marketing into your business easier than the folks at MailChimp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HC-wxkjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7ptratuoqh1832g8avg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HC-wxkjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7ptratuoqh1832g8avg.png" alt="email marketing api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leveraging the MailChimp API is as easy as generating your own custom API keys, tying MailChimp functionality and the data that you collect through this email marketing platform into other applications as well.&lt;/p&gt;

&lt;p&gt;With this capability, tying your MailChimp platform into custom analytic tools, audience management solutions, and even just developing smarter forms for collecting contact information becomes a breeze.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communications-discord-and-slack"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Communications&lt;/strong&gt; - &lt;a href="https://discord.com/"&gt;Discord&lt;/a&gt; and &lt;a href="https://slack.com"&gt;Slack&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Communication is absolutely essential today, especially now that the concept of remote working has essentially gone mainstream.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADIw9HoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86212u7wjj1wk4xwd5mu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADIw9HoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86212u7wjj1wk4xwd5mu.png" alt="discord and slack api"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Finding a way to keep your team internally connected when they are not in the same physical space is a huge piece of the puzzle for business success these days, and tools like Discord and Slack help to make that possible.&lt;/p&gt;

&lt;p&gt;At the same time, finding ways to integrate those kinds of tools into an employee portal or backend (for example) helps to keep everything in a centralized location and a little more easily managed. With their APIs doing that becomes almost effortless.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo-marketing-seomoz-and-serpapi"&gt;
  &lt;/a&gt;
  &lt;strong&gt;SEO Marketing&lt;/strong&gt; - &lt;a href="https://moz.com/"&gt;SeoMoz&lt;/a&gt; and &lt;a href="https://serpapi.com/"&gt;SerpAPI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Driving traffic to your digital platforms is a huge part of success today, but building successful search engine optimization campaigns inevitably involves looking at your raw SEO data, analyzing it correctly, and then optimizing your campaigns based off of that information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jTTFeagA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plc04m3fcuyqyfham9a3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jTTFeagA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plc04m3fcuyqyfham9a3.png" alt="seo moz api dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These two SEO marketing platforms provide you access to in-depth information and data through their APIs, information that can be folded into your other marketing tools to provide for deeper insights, better analysis, and more rapid optimization and iteration of your search engine optimization campaigns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crm-salesforce-and-hubspot"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CRM&lt;/strong&gt; - &lt;a href="https://www.salesforce.com/"&gt;Salesforce&lt;/a&gt; and &lt;a href="https://www.hubspot.com/"&gt;HubSpot&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A Customer Relationship Management (CRM) tool is almost a must have these days, especially if you are using even slightly complex sales funnels to turn complete and total strangers into paying customers and (ideally) repeat clients.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uAyvKsn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghspx4g0h9yuoj7arlak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uAyvKsn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghspx4g0h9yuoj7arlak.png" alt="salesforce and hubspot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The kind of information saved by a CRM can be incredibly useful across a wide variety of different applications, though, and that's what the APIs provided by these two platforms make possible.&lt;/p&gt;

&lt;p&gt;Folding your CRM functionality into your email marketing system with MailChimp, for example, can help you automate a lot of your follow-up sequences for each individual prospect or client – and that's just one example!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-chat-intercom-and-sendbird"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Live Chat&lt;/strong&gt; - &lt;a href="https://www.intercom.com/"&gt;Intercom&lt;/a&gt; and &lt;a href="https://sendbird.com/"&gt;SendBird&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Imagine your live chat support team being able to quickly and effortlessly access CRM information, internal knowledge-based documents, and inventory management systems all at once while providing customer service and support – all in a unified system made possible by these kinds of APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NpIdCMcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kb7b4esua9p2f8unlnt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NpIdCMcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2kb7b4esua9p2f8unlnt.png" alt="live chat api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On top of that, being able to pull information directly from live chat and store it in a CRM (or use it to customize email marketing campaigns) can give businesses a huge competitive advantage compared to other companies that are using this information at all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-automation-zapier"&gt;
  &lt;/a&gt;
  &lt;strong&gt;API Automation&lt;/strong&gt; - &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;APIs are powerful enough on their own, but having the ability to automate unique workflows across a variety of different programs and applications depending on different "triggers" is taking things to the next level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIebGE2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5oftp4m0u1eij2iifmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIebGE2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5oftp4m0u1eij2iifmj.png" alt="zapier api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zapier has been a huge driver behind the emergence of the API economy by introducing that make automated workflows with APIs almost effortless.&lt;/p&gt;

&lt;p&gt;It's now possible to create trigger events in one application that compel actions across a variety of other applications hooked through APIs, all without individuals having to trigger those API events independently.&lt;/p&gt;

&lt;p&gt;For example, let's imagine that a new lead comes in through your MailChimp email marketing campaign.&lt;/p&gt;

&lt;p&gt;Instantly Zapier pulls data and information from that email response and moves it into your Salesforce CRM, which in turn schedules follow-up email marketing campaigns unique to that contact while setting calendar reminders in Google Calendar for you to follow up directly over the phone.&lt;/p&gt;

&lt;p&gt;All of that happens in the blink of an eye thanks to the smooth integration between disparate apps with a platform like Zapier!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#appointment-scheduling-api-spurwing-and-cronofy"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Appointment Scheduling API&lt;/strong&gt; - &lt;a href="https://www.spurwing.io/"&gt;Spurwing&lt;/a&gt; and &lt;a href="https://www.cronofy.com/"&gt;Cronofy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;There's no end to the amount of ways that calendar management and scheduling can be folded into different software setups and applications, from medical clinics using these kinds of APIs to better manage their appointments to salespeople using them to better manage their deal flow (that's just the tip of the iceberg). &lt;/p&gt;

&lt;p&gt;For more information on Spurwing, or for a live demo, reach out today: &lt;a href="https://www.spurwing.io/"&gt;https://www.spurwing.io/&lt;/a&gt;&lt;br&gt;
Blog: &lt;a href="https://dev.to/spurwing"&gt;https://dev.to/spurwing&lt;/a&gt;&lt;br&gt;
Marketplace: &lt;a href="https://github.com/Spurwing"&gt;https://github.com/Spurwing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--85annQ9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cag7phyrbw9zfeajanrd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--85annQ9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cag7phyrbw9zfeajanrd.png" alt="spurwing api technical"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;When you get right down to it, APIs are helping to dramatically accelerate the development of new services and new solutions in our digital world.&lt;/p&gt;

&lt;p&gt;Instead of having to build functionality from scratch every time a developer wants to solve a problem, APIs create a bit of a "shortcut" that not only saves time and money but also often provides a better solution right out of the gate than what a developer would have been able to build on their own (at least initially, anyway).&lt;/p&gt;

&lt;p&gt;Most incredibly, though, is that the API economy is only just now beginning. The future of APIs is incredibly bright and exciting!&lt;/p&gt;

</description>
      <category>writing</category>
      <category>startup</category>
      <category>codenewbie</category>
      <category>architecture</category>
    </item>
    <item>
      <title>An unwanted update to your Google Account</title>
      <author>Rob OLeary</author>
      <pubDate>Sat, 01 May 2021 08:58:48 +0000</pubDate>
      <link>https://dev.to/robole/an-unwanted-update-to-your-google-account-3cko</link>
      <guid>https://dev.to/robole/an-unwanted-update-to-your-google-account-3cko</guid>
      <description>&lt;p&gt;I got an email from Google today with the title "An update to your Google Account". &lt;/p&gt;

&lt;p&gt;It said the following.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We associate your Google Account with a country (or region) so that we can better provide our services to you. This association is used to determine two things:&lt;br&gt;
The Google company that provides the services, processes your information and is responsible for complying with applicable privacy laws&lt;/p&gt;

&lt;p&gt;The version of the Terms of Service that governs our relationship, which can vary depending on local laws.&lt;/p&gt;

&lt;p&gt;Your country association will change within 30 days:&lt;/p&gt;

&lt;p&gt;from Germany&lt;br&gt;
to Malaysia&lt;/p&gt;

&lt;p&gt;Bear in mind that Google services are essentially the same, regardless of your country association. Also, any purchased content and banking information that you might have in your Google Account will remain the same.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The gist is Google wants to change the country associated with my account, presumably based on recently recorded IP addresses associated with my account.&lt;/p&gt;

&lt;p&gt;What I find curious is that it says the services are essentially the same between different countries. So, there is no advantage to me as a consumer for anything to change. &lt;/p&gt;

&lt;p&gt;It is creating a disadvantage for me because the privacy laws in Europe are stronger than Asia, is that a coincidence? &lt;/p&gt;

&lt;p&gt;I don't want to be cynical, but it seems suspect to me. As someone who travels a lot (not recently!), this is unwanted behaviour regardless. Will they make this change every few months in the future if I move around?&lt;/p&gt;

&lt;p&gt;Further in the email, it gives an indication of how you can prevent this change:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the country associated with your account doesn’t match your country of residence... You can find more information about your country association, and a way to request a change if you think that it’s wrong, by reviewing the Google Terms of Service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href="https://policies.google.com/terms?gl=MY"&gt;Terms of Service&lt;/a&gt; say nothing at all about country association! &lt;/p&gt;

&lt;p&gt;After some searching, I found how to make a &lt;a href="https://support.google.com/accounts/troubleshooter/10082950?hl=en#ts=10082748"&gt;Country Association Inquiry&lt;/a&gt;. It's just a short form where you pick your country and give a reason why this is a mistake.&lt;/p&gt;

&lt;p&gt;This may seem like busy work but I think it's important to do what you can to protect your privacy. If we do nothing, Google and others will erode our rights online. International technicalities provide loop-holes for corporations to use our data as they see fit. If we don't pay attention and raise these kind of issues, then they might go unnoticed and may be considered bona-fide.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>New golang package to reduce code duplication in APIs</title>
      <author>Alexis Viscogliosi</author>
      <pubDate>Sat, 01 May 2021 08:56:58 +0000</pubDate>
      <link>https://dev.to/alexisvisco/new-golang-package-to-reduce-code-duplication-in-apis-945</link>
      <guid>https://dev.to/alexisvisco/new-golang-package-to-reduce-code-duplication-in-apis-945</guid>
      <description>&lt;p&gt;Hi Golang developers!&lt;/p&gt;

&lt;p&gt;I just released a new package that will help you develop APIs in go. &lt;/p&gt;

&lt;p&gt;Look at this code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;handleChangePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"userID"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;requestBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// &amp;lt;-- your custom error logic that you write for &lt;/span&gt;
                                                                  &lt;span class="c"&gt;//      each project&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;requestData&lt;/span&gt; &lt;span class="n"&gt;ChangePasswordRequest&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestBody&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;requestData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requestData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsValid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requestData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OldPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;requestData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPassword&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;errorResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;jsonStringResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// &amp;lt;-- your custom code that your are write for each project&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is often the code I see on Go projects. There is nothing wrong with writing this because it is very efficient and declarative.&lt;/p&gt;

&lt;p&gt;But sometimes we would still like to focus a little more on what matters: business logic.&lt;/p&gt;

&lt;p&gt;The version with KCD of this code now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ChangePasswordRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UserID&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`path:"userID"`&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ChangePasswordRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;handleChangePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ChangePasswordRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChangePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OldPassword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewPassword&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"unable to change password"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KindInvalidArgument&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the code is more concise and has less boilerplate, it is not more efficient because kcd uses reflection to achieve this simplicity.&lt;/p&gt;

&lt;p&gt;If you want to play with this new toy this is the link of the package &lt;a href="https://github.com/alexisvisco/kcd"&gt;https://github.com/alexisvisco/kcd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>package</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Learning about Lambda function in Python</title>
      <author>Avinash Dalvi</author>
      <pubDate>Sat, 01 May 2021 08:11:35 +0000</pubDate>
      <link>https://dev.to/this-is-learning/learning-about-lambda-function-in-python-4mo7</link>
      <guid>https://dev.to/this-is-learning/learning-about-lambda-function-in-python-4mo7</guid>
      <description>&lt;p&gt;Few days back I was giving a session to engineering college students about the Python introduction explaining &lt;code&gt;lambda&lt;/code&gt; function in python. I stuck that time while explaining details as I also know I am not expert for &lt;code&gt;lambda&lt;/code&gt; usage in Python. But I thought this is the right time to learn in detail and share that learning with developers who are in the same condition as me. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgeIUU0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619720159180/ety6YtXMV.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgeIUU0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619720159180/ety6YtXMV.gif" alt="confused.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's understand what will gain from this article&lt;/strong&gt; : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In details understanding about Lambda&lt;/li&gt;
&lt;li&gt;how to use along with example &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is Lambda in Python&lt;/strong&gt; ? &lt;/p&gt;

&lt;p&gt;A Lambda Function in Python is an anonymous function or a function which doesn't have any name. It is a mostly one liner and restricted function. It's like a normal function, a Lambda function can have multiple arguments with one expression.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creation of Lambda function&lt;/strong&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lamba arguments(a,b,...n): expression
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example : &lt;/p&gt;

&lt;p&gt;In general way in Python&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def sum(a,b):
    return a+b

print(sum(2,3))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output : &amp;gt;&amp;gt;&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using lambda in Python&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sum = lambda a,b: a+b 
print(sum(2,3))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output : &amp;gt;&amp;gt;&amp;gt; 5 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QzCayGcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619722271334/NXikUldT6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QzCayGcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619722271334/NXikUldT6.png" alt="lambda-expression.png"&gt;&lt;/a&gt;&lt;br&gt;
In this above code the &lt;code&gt;sum = lambda a,b: a+b&lt;/code&gt;  is the lambda function. &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are variables is the argument while &lt;code&gt;a+b&lt;/code&gt; is the expression that is executed and the result of the expression is returned without return syntax. The expression gets the addition of the input parameters. Providing &lt;code&gt;2,3&lt;/code&gt; as the parameters, which is added 2 and 3. Can see how generally the same logic can be written and in using lambda in terms of lines of code and execution wise. &lt;/p&gt;

&lt;p&gt;But lines of code is the only reason to use Lambda in Python ? Is there any reason ? Answer is a big &lt;strong&gt;YES&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Lambda functions are used when you need a function for a short period of time. This is used when you want to pass a function as an argument to &lt;strong&gt;higher-order functions&lt;/strong&gt;, that is, functions that take other functions as their arguments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;higher order function&lt;/strong&gt; is a function that takes a function as an argument, or returns a function. Higher order function is in contrast to first order functions, which don’t take a function as an argument or return a function as output. &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; are higher order functions. Lambda works great as a parameter to higher order functions if you use it with its limitations. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may have noticed that, in the definition of the lambdas, the arguments don’t have parentheses around them. Multi-argument functions (functions that take more than one argument) are expressed in Python lambdas by listing arguments and separating them with a comma (,) but without surrounding them with parentheses.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Another way to call Lambda function is anonymously without assigning variable and passing arguments :
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(lambda x, y: x + y)(2, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def square(a):
    return (lambda x: x*x)(a)

print(square(2))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Another example of calculating square for all list elements :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def square(x): 
    return lambda : x*x
    
functions = [square(i) for i in [1,2,3,4,5,6]]
for function in functions: 
    print(function())

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
1                                                                                                                                                 
4                                                                                                                                                 
9                                                                                                                                                 
16                                                                                                                                                
25  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is another concept called &lt;strong&gt;currying&lt;/strong&gt; which means functions take up any number of calculations and data into a single real function that returns an expected output. Here is how I can convert the above square calculation example using currying.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;functions = [lambda i=i: i*i for i in range(1, 6)]
for function in functions:
   print(function())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8quJoAk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619813791213/QpMgYc2D2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8quJoAk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619813791213/QpMgYc2D2.png" alt="lambda-expression-currying.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this currying example &lt;code&gt;i=i&lt;/code&gt; is a positional argument. If you assign &lt;code&gt;i=1&lt;/code&gt; then all output will become &lt;code&gt;1&lt;/code&gt;. Here we are assigning &lt;code&gt;i&lt;/code&gt; variable to &lt;code&gt;i&lt;/code&gt; from iteration expression &lt;code&gt;for i in range(1,6)&lt;/code&gt;. As you can see we are not passing any argument from &lt;code&gt;function()&lt;/code&gt; but in lambda declaring on the spot value assignment using &lt;code&gt;i=i&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Another example for positional argument is :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(lambda x, y, z=3: x + y + z)(1, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, &lt;code&gt;z&lt;/code&gt; default value is 3. while passing arguments can't change position of 1st and 2nd argument. &lt;strong&gt;Firstly non-default argument should not follow the default argument&lt;/strong&gt; means you can used it like &lt;code&gt;(lambda x=2, y, z: x + y + z)(1, 2)&lt;/code&gt; it will throw error like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  File "main.py", line 1                                                                                                                                                 
    print((lambda x=2, y, z: x + y + z)(1, 2))                                                                                                                           
                 ^                                                                                                                                                       
SyntaxError: non-default argument follows default argument                                                                                                               
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be like this &lt;code&gt;print((lambda x, y=2, z=3: x + y + z)(1))&lt;/code&gt; because in this default value follow each others. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
Now you all know how to use Python lambda functions and some hints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write Python lambdas and use anonymous functions&lt;/li&gt;
&lt;li&gt;Choose wisely between lambdas or normal Python functions&lt;/li&gt;
&lt;li&gt;Avoid excessive use of lambdas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article I have not covered full advanced usage of lambda but I have tried to leverage understanding about basic lambda along with example. For more details below references can be used. &lt;/p&gt;

&lt;p&gt;If any help is required about this article or more advanced understanding about Lambda can reach out to my twitter handler &lt;a class="mentioned-user" href="https://dev.to/aviboy2006"&gt;@aviboy2006&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt; : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackabuse.com/lambda-functions-in-python"&gt;https://stackabuse.com/lambda-functions-in-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python-lambda/"&gt;https://realpython.com/python-lambda/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/currying-function-in-python/"&gt;https://www.geeksforgeeks.org/currying-function-in-python/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>learning</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Grokking the Reader Monad</title>
      <author>Matt Thornton</author>
      <pubDate>Sat, 01 May 2021 08:10:34 +0000</pubDate>
      <link>https://dev.to/choc13/grokking-the-reader-monad-4f45</link>
      <guid>https://dev.to/choc13/grokking-the-reader-monad-4f45</guid>
      <description>&lt;p&gt;From its name the reader monad doesn’t give too many clues about where it would be useful. In this post we’ll grok it by inventing it ourselves in order to solve a real software problem. From this we’ll see that it’s actually one way of doing dependency injection in functional programming.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;There won’t really be any theory here, but it’ll be easier if you’ve already grokked monads. If you haven’t then check out &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt; from earlier in this series and then head back over here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h1&gt;

&lt;p&gt;Let’s imagine we’ve been asked to write some code that charges a user’s credit card. To do this we’re going to need to lookup some information from a database and also call a payment provider. &lt;/p&gt;

&lt;p&gt;Our domain model will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
     &lt;span class="nc"&gt;Expiry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
     &lt;span class="nc"&gt;Cvv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;EmailAddress&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;EmailAddress&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; 
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserId&lt;/span&gt;
      &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;
      &lt;span class="nc"&gt;EmailAddress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;EmailAdress&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also start with a &lt;code&gt;Database&lt;/code&gt; module containing a function that can read a User and a &lt;code&gt;PaymentProvider&lt;/code&gt; module that contains a function that can charge a &lt;code&gt;CreditCard&lt;/code&gt;. They look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;ISqlConnection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="nc"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"my-connection-string"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM User AS u WHERE u.Id = {id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;PaymentId&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;PaymentProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PaymentClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"my-payment-api-secret"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#our-first-implementation"&gt;
  &lt;/a&gt;
  Our first implementation
&lt;/h1&gt;

&lt;p&gt;Let’s start off with the easiest solution we can think of. We’ll call the database to lookup the user, get the credit card from their profile and call the payment provider to charge it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Super easy, given that we already had &lt;code&gt;Database.getUser&lt;/code&gt; and &lt;code&gt;PaymentProvider.chargeCard&lt;/code&gt; ready to use. &lt;/p&gt;

&lt;p&gt;The amount of coupling here is probably making you feel a bit queasy though. Invoking &lt;code&gt;getUser&lt;/code&gt; and &lt;code&gt;chargeCard&lt;/code&gt; functions directly isn't itself a problem. The problem really lies further down with how those functions themselves are implemented. In both cases they're instantiating new clients like &lt;code&gt;SqlConnection&lt;/code&gt; and &lt;code&gt;PaymentClient&lt;/code&gt; which creates a few problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hard coded connection strings mean we're stuck talking to the same database instance in all environments.&lt;/li&gt;
&lt;li&gt;Connection strings usually contain secrets which are now checked into source control. &lt;/li&gt;
&lt;li&gt;Writing unit tests isn't possible because it's going to be calling the production database and payment provider. I suppose that's one way to foot the CI bill when running all of those unit tests 😜&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#inversion-of-control"&gt;
  &lt;/a&gt;
  Inversion of Control 🔄
&lt;/h1&gt;

&lt;p&gt;You’re probably not surprised to learn that the solution to this is to invert those dependencies. Inversion of Control (IoC) transcends paradigms, it’s a useful technique in both OOP and FP. It’s just that whereas OOP tends to utilise constructor injection via reflection in FP we'll see there are other solutions available to us.&lt;/p&gt;

&lt;p&gt;What’s the easiest IoC technique for a function then? Just pass those dependencies in as parameters. It's like OOP class dependencies, but at the function level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM User AS u WHERE u.Id = {id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;PaymentProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;sqlConnection&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;sqlConnection&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No surprises there. We’ve just supplied the necessary clients as parameters and passed them along to the function calls that need them. This solution does have it downsides though. The primary one being that as the number of dependencies grows the number of function parameters can become unruly.&lt;/p&gt;

&lt;p&gt;On top of this most applications have some degree of layering to them. As we introduce more layers, to break down and isolate the responsibilities of individual functions, we start needing to pass some dependencies down through many layers. This is typical of any IoC solution, once you flip those dependencies it cascades right through all the layers of your application. &lt;a href="https://en.wikipedia.org/wiki/Turtles_all_the_way_down"&gt;It’s &lt;del&gt;turtles&lt;/del&gt; inverted dependencies all the way down&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-partial-solution"&gt;
  &lt;/a&gt;
  A &lt;em&gt;partial&lt;/em&gt; solution
&lt;/h1&gt;

&lt;p&gt;What we’d like to avoid is having to explicitly pass those transitive dependencies into functions like &lt;code&gt;chargeUser&lt;/code&gt; where they’re not being used directly. On the other hand we don’t want to lose compile time checking by falling back to reflection based dependency injection. &lt;/p&gt;

&lt;p&gt;What if we moved those dependency parameters to the end of the function signature? That way we can use partial application to defer supplying them until the last minute, when we're ready to "wire up the application". Let's try with those service modules first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;($&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM User AS u  WHERE u.Id = {id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;PaymentProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that we can create a new function that gets the user when passed a connection by simply writing the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ISqlConnection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can do a similar thing when charging the card.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;IPaymentClient&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;PaymentId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, let's stick it together and re-write our &lt;code&gt;chargeUser&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="c1"&gt;// Problem, we haven’t got the user now, but a function that needs a ISqlConnection to get it&lt;/span&gt;
    &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
    &lt;span class="c1"&gt;// So the last line can’t access the CreditCard property &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's good, but it's not quite right! We've eliminated the two dependency parameters from the &lt;code&gt;chargeUser&lt;/code&gt; function, but it won't compile. As the comment points out we don’t have a &lt;code&gt;User&lt;/code&gt; like we need to, but rather a function that has the type &lt;code&gt;ISqlConnection -&amp;gt; User&lt;/code&gt;. That's because we've only partially applied &lt;code&gt;Database.getUser&lt;/code&gt; and to finish that call off and actually resolve a &lt;code&gt;User&lt;/code&gt;, we still need to supply it with a &lt;code&gt;ISqlConnection&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Does that mean we're going to need to pass in the &lt;code&gt;ISqlConnection&lt;/code&gt; to &lt;code&gt;chargeUser&lt;/code&gt; again? Well if we could find a way to lift up &lt;code&gt;PaymentProvider.chargeCard&lt;/code&gt; so that it could work with &lt;code&gt;ISqlConnection -&amp;gt; User&lt;/code&gt; instead of just &lt;code&gt;User&lt;/code&gt; then we could get it to compile. In order to do this we need to create a new function that takes a &lt;code&gt;ISqlConnection&lt;/code&gt; as well as the function to create a &lt;code&gt;User&lt;/code&gt; given a &lt;code&gt;ISqlConnection&lt;/code&gt; and the amount we want to charge the user. &lt;/p&gt;

&lt;p&gt;We don't really have a good name for this function because outside of this context it doesn't really make sense to have a &lt;code&gt;chargeCard&lt;/code&gt; function that depends on a &lt;code&gt;ISqlConnection&lt;/code&gt;. So what we can do instead is create an anonymous function, a lambda, inside of &lt;code&gt;chargeUser&lt;/code&gt; that does this lifting for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ISqlConnection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;PaymentId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
        &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've annotated the return type of &lt;code&gt;chargeUser&lt;/code&gt; to highlight the fact that it's now returning a new function, that when supplied with both dependencies of &lt;code&gt;ISqlConnection&lt;/code&gt; and &lt;code&gt;IPaymentClient&lt;/code&gt;, will charge the user.&lt;/p&gt;

&lt;p&gt;At this point, we've managed to defer the application of any dependencies, but the solution is a bit cumbersome still. If, at a later date, we need to do more computations in &lt;code&gt;chargeUser&lt;/code&gt; that require yet more dependencies, then we're going to be faced with even more lambda writing. For instance imagine we wanted to email the user a receipt with the &lt;code&gt;PaymentId&lt;/code&gt;. Then we'd have to write something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userFromConnection&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;paymentIdFromClient&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;

        &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PaymentId&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paymentIdFromClient&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;EmailBody&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Your payment id is {paymentId}"&lt;/span&gt;
            &lt;span class="nn"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMail&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;EmailAddress&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;😱&lt;/p&gt;

&lt;p&gt;The nesting is getting out of hand, the code is becoming tiring to write and the number of dependencies we eventually need to supply to this function is getting unwieldy too. We're in a bit of a bind here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#binding-our-way-out-of-a-bind"&gt;
  &lt;/a&gt;
  Binding our way out of a bind
&lt;/h1&gt;

&lt;p&gt;Let's see if we can write a function called &lt;code&gt;injectSqlConnection&lt;/code&gt; that will allow us to simplify &lt;code&gt;chargeUser&lt;/code&gt; by removing the need for us to write the lambda that supplies the &lt;code&gt;ISqlConnection&lt;/code&gt;. The goal of this is to allow us to write &lt;code&gt;chargeUser&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;injectSqlConnection&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So &lt;code&gt;injectSqlConnection&lt;/code&gt; needs to take a function that requires a &lt;code&gt;User&lt;/code&gt; as the first parameter and a function that can create a &lt;code&gt;User&lt;/code&gt; given a &lt;code&gt;ISqlConnection&lt;/code&gt; as the second parameter. Let's implement it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;injectSqlConnection&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;valueFromConnection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueFromConnection&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, that function doesn't depend on the &lt;code&gt;ISqlConnection&lt;/code&gt; in anyway. It works for any function &lt;code&gt;f&lt;/code&gt; that needs a value &lt;code&gt;a&lt;/code&gt; which can be created when passed some dependency. So let's just call it &lt;code&gt;inject&lt;/code&gt; from now on to acknowledge that it works for any type of dependency.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-the-reader-monad"&gt;
  &lt;/a&gt;
  You just discovered the reader monad 🤓
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;inject&lt;/code&gt; function is letting us sequence computations that each depend on a wrapped value returned from the last computation. In this case the value is wrapped in a function that requires a dependency. That pattern should look familiar because we discovered it when &lt;a href="https://dev.to/choc13/grokking-monads-in-f-3j7f"&gt;Grokking Monads&lt;/a&gt;. It turns out that we've in fact discovered &lt;code&gt;bind&lt;/code&gt; again, but this time for a new monad.&lt;/p&gt;

&lt;p&gt;This new monad is normally called &lt;code&gt;Reader&lt;/code&gt; because it can be thought of as reading some value from an environment. In our case we could call it &lt;code&gt;DependencyInjector&lt;/code&gt; because it's applying some dependency to a function in order to return the value we want. The way to bridge the mental gap here it to just think of dependency injection as a way to read a value from some environment that contains the dependencies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-little-lie"&gt;
  &lt;/a&gt;
  A little lie 🤥
&lt;/h1&gt;

&lt;p&gt;Actually, the implementation of &lt;code&gt;inject&lt;/code&gt; above isn't &lt;em&gt;quite&lt;/em&gt; right. If we rewrite the more complex &lt;code&gt;chargeUser&lt;/code&gt;, the one that also sends an email, using &lt;code&gt;inject&lt;/code&gt; Then we’ll see how it breaks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PaymentId&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; 
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="nc"&gt;EmailBody&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Your payment id is {paymentId}"&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;EmailAddress&lt;/span&gt; &lt;span class="s2"&gt;"a.customer@example.com"&lt;/span&gt;
        &lt;span class="nn"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMail&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This actually fails on the second &lt;code&gt;inject&lt;/code&gt;. That's because after the first call to &lt;code&gt;inject&lt;/code&gt; it returns the following type &lt;code&gt;ISqlConnection -&amp;gt; IPaymentClient -&amp;gt; PaymentId&lt;/code&gt;. Now on the second call to &lt;code&gt;inject&lt;/code&gt; we have two dependencies to deal with, but our &lt;code&gt;inject&lt;/code&gt; function has only been designed to supply one, so it all falls down. &lt;/p&gt;

&lt;p&gt;The solution to this is to create a single type that can represent all of the dependencies. Basically we want the &lt;code&gt;chargeUser&lt;/code&gt; function to have the signature &lt;code&gt;UserId -&amp;gt; float -&amp;gt; Dependencies -&amp;gt; TransactionId&lt;/code&gt; rather than &lt;code&gt;UserId -&amp;gt; float -&amp;gt; ISqlConnection -&amp;gt; IPaymentClient -&amp;gt; TransactionId&lt;/code&gt;. If we can do that then we just need to make one small adjustment to &lt;code&gt;inject&lt;/code&gt; to make things work again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;valueThatNeedsDep&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;valueThatNeedsDep&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how this time we also supply &lt;code&gt;deps&lt;/code&gt; to &lt;code&gt;f&lt;/code&gt; on the final line? It's subtle but it changes the return type of &lt;code&gt;inject&lt;/code&gt; to be &lt;code&gt;('deps -&amp;gt; 'c)&lt;/code&gt;, where &lt;code&gt;'deps&lt;/code&gt; is the type of dependencies also required by &lt;code&gt;valueThatNeedsDep&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what's happened here is that we've now constrained the output of &lt;code&gt;inject&lt;/code&gt; to be a new function that requires the same type of &lt;code&gt;'deps&lt;/code&gt; as the original function. That's important because it means our dependencies are now unified to a single type and we can happily keep chaining computations that require those dependencies together.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#uniting-dependencies"&gt;
  &lt;/a&gt;
  Uniting dependencies 👭
&lt;/h1&gt;

&lt;p&gt;There are several ways to unite all of the dependencies together in a single type, such as explicitly creating a type with fields to represent each one. One of the neatest with F# though is to use inferred inheritance. Inferred inheritance means we let the compiler infer a type that implements all of the dependency interfaces we require. &lt;/p&gt;

&lt;p&gt;In order to use inferred inheritance we need to add a &lt;code&gt;#&lt;/code&gt; to the front of the type annotations for each dependency. Let's make that change in the &lt;code&gt;Database&lt;/code&gt; and &lt;code&gt;PaymentProvider&lt;/code&gt; modules to see what that looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;PaymentProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CreditCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;TransactionId&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we've changed is to write &lt;code&gt;#ISqlConnection&lt;/code&gt; instead of &lt;code&gt;ISqlConnection&lt;/code&gt; and &lt;code&gt;#IPaymentClient&lt;/code&gt; instead of &lt;code&gt;IPaymentClient&lt;/code&gt;. From this F# can union these types together for us when it encounters something that needs to satisfy both constraints. Then at the root of the application we just have to create an object that implements both interfaces in order to satisfy the constraint.&lt;/p&gt;

&lt;p&gt;The upshot of this is that F# infers the type signature of &lt;code&gt;chargeUser&lt;/code&gt; to be &lt;code&gt;UserId -&amp;gt; float ('deps -&amp;gt; unit)&lt;/code&gt; and it requires that &lt;code&gt;'deps&lt;/code&gt; inherit from both &lt;code&gt;ISqlConnection&lt;/code&gt; and &lt;code&gt;IPaymentProvider&lt;/code&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-final-improvement"&gt;
  &lt;/a&gt;
  A final improvement
&lt;/h1&gt;

&lt;p&gt;We've pretty much reached our stated goal now of eliminating all of the explicit dependency passing between functions. However, I think it's still a bit annoying that we have to keep creating lambdas to access the values like &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;paymentId&lt;/code&gt; when calling &lt;code&gt;inject&lt;/code&gt; to compose the operations. We've seen before, in &lt;a href="https://dev.to/choc13/grokking-monads-imperatively-394a"&gt;Grokking Monads, Imperatively&lt;/a&gt;, that it's possible to write monadic code in an imperative style by using computation expressions. &lt;/p&gt;

&lt;p&gt;All we have to do is create the computation expression builder using the &lt;code&gt;inject&lt;/code&gt; function we wrote earlier, as that's our monadic &lt;code&gt;bind&lt;/code&gt;. We'll call this computation expression &lt;code&gt;injector&lt;/code&gt; because that's more relevant to our use case here, but typically it would be called &lt;code&gt;reader&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;InjectorBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inject&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Zero&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;ReturnFrom&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;injector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;InjectorBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;injector&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="nc"&gt;EmailBody&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Your payment id is {paymentId}"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nn"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMail&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Email&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;😍&lt;br&gt;
By simply wrapping the implementation in &lt;code&gt;reader { }&lt;/code&gt; we’re basically back to our very first naïve implementation, except this time all of the control is properly inverted. Whilst the transitive dependencies are nicely hidden from sight they’re still being type checked. In fact if we added more operations to this later that required new dependencies then F# would automatically add them to the list of required interfaces that must be implemented for the &lt;code&gt;'deps&lt;/code&gt; type in order to finally invoke this function.&lt;/p&gt;

&lt;p&gt;When we're finally ready to call this function, say at the application root where we have all of the config to hand in order to create the dependencies, then we can do it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;IDeps&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;
    &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;
    &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="nc"&gt;IEmailClient&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;IDeps&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Charge&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// create PaymentClient and call it&lt;/span&gt;

        &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;SendMail&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// create SMTP client and call it&lt;/span&gt;

        &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// create sql connection and invoke it &lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;UserId&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where we use an object expression to implement our new &lt;code&gt;IDeps&lt;/code&gt; interface on the fly so that it satisfies all of the inferred types required by &lt;code&gt;chargeUser&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#quick-recap"&gt;
  &lt;/a&gt;
  Quick recap 🧑‍🎓
&lt;/h1&gt;

&lt;p&gt;We started off by trying to achieve inversion of control to remove hardcoded dependencies and config. We saw that doing this naïvely can lead to an explosion in the number of function parameters and that it can cascade right through the application. In order to solve this we started out with partial application to defer supplying those parameters until we were at the application root where we had the necessary config to hand. However, this solution meant that we couldn't easily compose functions that required dependencies and it was even more tricky when they required different types of dependencies.&lt;/p&gt;

&lt;p&gt;So we invented an &lt;code&gt;inject&lt;/code&gt; function that took care of this plumbing for us and realised that we'd actually discovered a new version of &lt;code&gt;bind&lt;/code&gt; and hence a new type of monad. This new monad is commonly known as &lt;code&gt;Reader&lt;/code&gt; and it's useful when you need to compose several functions that all require values (or dependencies) that can be supplied by some common environment type.&lt;/p&gt;

&lt;p&gt;If you want to use the reader monad in practice then you can find an implementation that's ready to roll in the &lt;a href="https://fsprojects.github.io/FSharpPlus/reference/fsharpplus-data-reader.html"&gt;FSharpPlus&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix
&lt;/h2&gt;

&lt;p&gt;The format of the reader monad is often a little different in practice to how it was presented here. Expand the section below if you want more details.&lt;/p&gt;

&lt;p&gt;
  
  &lt;p&gt;Usually when implementing the reader monad we create a new type to signify it, called &lt;code&gt;Reader&lt;/code&gt;, in order to distinguish it from a regular function type. I left it out above because it's not an important detail when it comes to grokking the concept, but if you're looking to use the technique then you'll likely encounter it in this wrapped form. It's a trivial change and the code would just look like this instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;Reader&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;newReader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
                &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;newReader&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ask&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;ReaderBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;Zero&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Reader&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="o"&gt;_.&lt;/span&gt;&lt;span class="nc"&gt;ReturnFrom&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ReaderBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;chargeUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqlConnection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;ISqlConnection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ask&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paymentClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;IPaymentClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ask&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emailClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nc"&gt;IEmailClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ask&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt; &lt;span class="n"&gt;userId&lt;/span&gt; &lt;span class="n"&gt;sqlConnection&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;paymentId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;PaymentProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chargeCard&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CreditCard&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="n"&gt;paymentClient&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="nc"&gt;EmailBody&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Your payment id is {paymentId}"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nn"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendMail&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Email&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="n"&gt;emailClient&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return type of &lt;code&gt;chargeUser&lt;/code&gt; is now &lt;code&gt;Reader&amp;lt;'deps, unit&amp;gt;&lt;/code&gt; where &lt;code&gt;'deps&lt;/code&gt; will have to satisfy all of those interfaces marked with &lt;code&gt;#&lt;/code&gt; as before. &lt;/p&gt;

&lt;p&gt;I've also had to use &lt;code&gt;Reader.ask&lt;/code&gt; to actually get dependencies out of the environment in this case. The reason for this is because functions like &lt;code&gt;Database.getUser&lt;/code&gt; do not return a &lt;code&gt;Reader&lt;/code&gt; in their current form. We could create a &lt;code&gt;Reader&lt;/code&gt; on the fly by doing &lt;code&gt;Reader (Database.getUser userId)&lt;/code&gt; but sometimes that can also be cumbersome, especially if we're working with client classes rather than functions, which is often the case. So having &lt;code&gt;ask&lt;/code&gt; in our toolkit can be a nice way to just get hold of the dependency and use it explicitly in the current scope.&lt;/p&gt;



&lt;br&gt;
&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>programming</category>
      <category>grokking</category>
    </item>
  </channel>
</rss>
