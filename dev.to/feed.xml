<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Reusable modal component in Astro</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 02 Nov 2021 05:35:48 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/reusable-modal-component-in-astro-35dn</link>
      <guid>https://dev.to/dailydevtips1/reusable-modal-component-in-astro-35dn</guid>
      <description>&lt;p&gt;Today we'll be making an reusable modal component in Astro.&lt;/p&gt;

&lt;p&gt;The idea is to have one component that follows HTML semantics and can trigger a modal popup.&lt;/p&gt;

&lt;p&gt;The content of this popup can be anything we want, and we want to use this component dynamically.&lt;/p&gt;

&lt;p&gt;The end result will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K_llWKQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634885106744/_lZVDo2eo7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_llWKQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634885106744/_lZVDo2eo7.gif" alt="reusable modal component in Astro" width="500" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-component"&gt;
  &lt;/a&gt;
  Creating the component
&lt;/h2&gt;

&lt;p&gt;Make sure you have an Astro project setup before. If you don't have one yet, please check out my &lt;a href="https://daily-dev-tips.com/posts/a-first-look-at-astra-astronomical-results/"&gt;Astro starter project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We want to add a new component called &lt;code&gt;Modal.astro&lt;/code&gt; inside our &lt;code&gt;components&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The component should receive two properties: the ID of this modal and a text for the open button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These three dots are known as &lt;a href="https://docs.astro.build/core-concepts/astro-components/#frontmatter-script"&gt;frontmatter&lt;/a&gt; and can be used to include javascript in your Astro components.&lt;/p&gt;

&lt;p&gt;Then we want to render the button that can open a modal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"{`window.${id}.showModal()`}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{open}&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we do here is bind a click listener to this button. In there, we pass the unique ID for this modal.&lt;br&gt;
Then we set the open variable in the button. This is the text on the button.&lt;/p&gt;

&lt;p&gt;The window showModal function is a native browser function to invoke dialogs.&lt;br&gt;
By using this way, we get a backdrop option, making it easier to style this modal.&lt;/p&gt;

&lt;p&gt;The next thing we want is the actual dialog element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dialog&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"{id}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"dialog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dialog&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we pass the ID as the unique ID for this dialog element. With this ID, we can open it as we saw in the button above.&lt;/p&gt;

&lt;p&gt;Then we pass a slot for the main content. (More on the slots in a bit)&lt;br&gt;
And we add a form with a close slot. This is needed because a native dialog will close when a button inside this dialog form is pressed. (The &lt;code&gt;method="dialog"&lt;/code&gt; is key here).&lt;/p&gt;

&lt;p&gt;The last thing we want to add under our frontmatter is some basic styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;dialog&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;&amp;amp;::backdrop&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add some basic styling to center our dialog on the page and color the backdrop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-astro-modal-component"&gt;
  &lt;/a&gt;
  Using the Astro modal component
&lt;/h2&gt;

&lt;p&gt;Now we want to use this modal component. Let's see how that works.&lt;br&gt;
Open up the &lt;code&gt;pages/index.astro&lt;/code&gt; file and import the component in your frontmatter part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;// Component Imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Modal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/Modal.astro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use it, you can type &lt;code&gt;HTML&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Modal&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dialog"&lt;/span&gt; &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Open modal"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some extra content you would like here&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"60"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"80"&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/assets/logo.svg"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Astro logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Close modal&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Modal&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty cool!&lt;/p&gt;

&lt;p&gt;Let's see what's happening in a bit more detail.&lt;br&gt;
We open a &lt;code&gt;Modal&lt;/code&gt; component. This takes two parameters being the &lt;code&gt;ID&lt;/code&gt; and the &lt;code&gt;open&lt;/code&gt; button text.&lt;/p&gt;

&lt;p&gt;Then we insert a main element with the &lt;code&gt;slot&lt;/code&gt; key. Remember the slots we talked about? This element will be rendered inside the &lt;code&gt;main&lt;/code&gt; slot.&lt;/p&gt;

&lt;p&gt;And then we add the button which reflects the &lt;code&gt;close&lt;/code&gt; slot!&lt;/p&gt;

&lt;p&gt;That's it!&lt;br&gt;
We now have a reusable component that's easy to use!&lt;/p&gt;

&lt;p&gt;You can find the complete code on &lt;a href="https://github.com/rebelchris/astro-modal"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>astro</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Glassmorphism Circle Loading Animation</title>
      <author>Jatin Sharma</author>
      <pubDate>Tue, 02 Nov 2021 05:29:03 +0000</pubDate>
      <link>https://dev.to/j471n/glassmorphism-circle-loading-animation-1cda</link>
      <guid>https://dev.to/j471n/glassmorphism-circle-loading-animation-1cda</guid>
      <description>&lt;p&gt;In this article we are gonna build a loading spinner with the glassmorphism, stay tuned for that first let's look what are we building -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--71ZpZNmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/xPPG8l8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--71ZpZNmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/xPPG8l8.gif" alt="preview" width="479" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just need simple &lt;code&gt;div&lt;/code&gt; to create this animation. For this animation we have used pseudo classes and a normal keyframe in which we just &lt;code&gt;rotate&lt;/code&gt; the &lt;code&gt;.loader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Main Loader */&lt;/span&gt;
&lt;span class="nc"&gt;.loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;circleAnimation&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.loader&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.loader&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Glassmorphism */&lt;/span&gt;
&lt;span class="nc"&gt;.loader&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;233&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* animated Circle */&lt;/span&gt;
&lt;span class="nc"&gt;.loader&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff6198&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;circleAnimation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Codepen is Here&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/j471n/embed/KKvmNbz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So after that, you can use it anywhere in your project. And let me know what do you think about it. If you like it then consider a follow, because I am gonna build more things like this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLCD6792--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.buymeacoffee.com/uploads/project_updates/2021/05/918bc0ffae9a1865553d54bc11e65c4b.gif" alt="Buy Me A Coffee" width="500" height="140"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#also-read"&gt;
  &lt;/a&gt;
  Also Read
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/10-css-resources-that-you-should-bookmark-46l6"&gt;10 CSS Resources that you should bookmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/some-strange-concept-of-javascript-4icc"&gt;Some Strange Concept of JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/some-javascript-methods-you-should-know-i15"&gt;Some Javascript Methods you should know&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Stop using arrow functions everywhere ...</title>
      <author>NRF</author>
      <pubDate>Tue, 02 Nov 2021 04:29:52 +0000</pubDate>
      <link>https://dev.to/nrf/stop-using-arrow-functions-everywhere--5a05</link>
      <guid>https://dev.to/nrf/stop-using-arrow-functions-everywhere--5a05</guid>
      <description>&lt;p&gt;Ever since their inclusion in JavaScript, arrow functions' usage has increased at a very rapid rate by JavaScript developers. Everyone seems to like arrow functions; perhaps more than they really should.&lt;/p&gt;

&lt;p&gt;Firstly, there are situations where one absolutely should &lt;strong&gt;not&lt;/strong&gt; use an arrow function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before going further, it is important to understand that arrow functions are &lt;strong&gt;not&lt;/strong&gt; just a syntactical sugar for normal functions. Arrow functions, apart from having a different syntax for declaration, also behave differently than normal functions. One of the key differences is that they have no knowledge of the &lt;em&gt;execution context&lt;/em&gt;. The execution context is dynamic (assuming your application has function calls) and is accessed through the &lt;code&gt;this&lt;/code&gt; keyword in JavaScript. This is why it is often said that arrow functions do not have their own binding to &lt;code&gt;this&lt;/code&gt;. They inherit &lt;code&gt;this&lt;/code&gt; from their enclosing scope. This difference is at the heart of understanding when not to use arrow functions.&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;normalFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;arrowFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// output: 108&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrowFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// output: 107&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The reason &lt;code&gt;arrowFunction()&lt;/code&gt; logs 107 is that its declaration (as a method of &lt;code&gt;obj&lt;/code&gt;) is in the global scope which, in the case of a browser environment, is the &lt;code&gt;window&lt;/code&gt; object. So &lt;code&gt;this&lt;/code&gt; resolves to window inside &lt;code&gt;arrowFunction()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#do-not-use-arrow-functions-"&gt;
  &lt;/a&gt;
  Do not use arrow functions ...
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-when-defining-object-methods"&gt;
  &lt;/a&gt;
  ... when defining object methods
&lt;/h3&gt;

&lt;p&gt;Using arrow functions to define object methods may result in unexpected (buggy?) behavior. Chances are that if you're defining an object method, you need access to to its properties from within that method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;incrementCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incrementCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// output: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything is good and works as expected. But, if we had used arrow functions here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;incrementCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incrementCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// this does nothing unfortunately&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// output: NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;this&lt;/code&gt; resolves to the &lt;code&gt;window&lt;/code&gt; object in the above case and &lt;code&gt;window.count&lt;/code&gt; doesn't exist. If it is conciseness you're after, you can use the new shorthand syntax for defining object methods. The code below is equivalent to the first example above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;incrementCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incrementCount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// output: 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-when-defining-prototype-methods"&gt;
  &lt;/a&gt;
  ... when defining prototype methods
&lt;/h3&gt;

&lt;p&gt;This case is conceptually similar to the one discussed above. If you wish to access an instance property, you must not use an arrow function when defining the prototype method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalGreet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrowGreet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalGreet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// output: "Hi Jack"&lt;/span&gt;
&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arrowGreet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// output: "Hi undefined"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;this.firstName&lt;/code&gt; inside the normal function resolves successfully to &lt;code&gt;"Jack"&lt;/code&gt; while in the case of the arrow function it returns &lt;code&gt;undefined&lt;/code&gt;. This is because inside the arrow function &lt;code&gt;this&lt;/code&gt; points to the function's enclosing scope which is the &lt;code&gt;window&lt;/code&gt; object in this case. Since &lt;code&gt;window.firstName&lt;/code&gt; is undefined, it returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-when-defining-any-function-that-depends-on-the-dynamic-context"&gt;
  &lt;/a&gt;
  ... when defining any function that depends on the dynamic context
&lt;/h3&gt;

&lt;p&gt;The recurring theme is that arrow functions have no knowledge of the (dynamic) execution context and, hence, should not be used when the execution context is a factor. Another example of this would be callbacks that depend on the dynamic context like event handlers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;someButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code example above, clicking on &lt;code&gt;someButton&lt;/code&gt; will log &lt;code&gt;undefined&lt;/code&gt; since &lt;code&gt;this&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; refer to the &lt;code&gt;currentTarget&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Furthermore, &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, and &lt;code&gt;bind&lt;/code&gt; do not work with arrow functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-when-defining-a-constructor-function"&gt;
  &lt;/a&gt;
  ... when defining a constructor function
&lt;/h3&gt;

&lt;p&gt;Arrow functions can't be used as a constructor function (can't use &lt;code&gt;new&lt;/code&gt; with them). It will simply raise an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: Person is not a constructor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-if-you-wish-to-use-the-special-raw-arguments-endraw-object"&gt;
  &lt;/a&gt;
  ... if you wish to use the special &lt;code&gt;arguments&lt;/code&gt; object
&lt;/h3&gt;

&lt;p&gt;Just like with &lt;code&gt;this&lt;/code&gt;, arrow functions do not have their own &lt;code&gt;arguments&lt;/code&gt; object. Instead, &lt;code&gt;arguments&lt;/code&gt; inside an arrow function refers to the &lt;em&gt;arguments of the enclosing scope&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constructGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;constructGreeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// output: "hello Jack"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;arguments[0]&lt;/code&gt; inside the arrow function &lt;code&gt;constructGreeting()&lt;/code&gt; actually resolves to the value of &lt;code&gt;name&lt;/code&gt; which is the argument to &lt;code&gt;greet()&lt;/code&gt; (the function that encloses &lt;code&gt;constructGreeting()&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-not-all-bad"&gt;
  &lt;/a&gt;
  It's not all bad
&lt;/h2&gt;

&lt;p&gt;There are scenarios where arrow functions provide benefit. Mostly by making the code cleaner/intuitive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async-callbacks"&gt;
  &lt;/a&gt;
  Async callbacks
&lt;/h3&gt;

&lt;p&gt;Imagine you have async code but you still need access to the original context that called the async function (from within the async callback). Normal functions wouldn't work here (if you used &lt;code&gt;this&lt;/code&gt; inside the async callback). This issue was previously solved by using &lt;code&gt;bind&lt;/code&gt; or declaring a &lt;code&gt;self&lt;/code&gt; variable where &lt;code&gt;self = this&lt;/code&gt;. But since &lt;code&gt;this&lt;/code&gt; is already lexically bound in an arrow function, the arrow function solves this problem elegantly. An example should clear things up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// output after 1 second: "Hi undefined"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, I've used &lt;code&gt;setTimeout()&lt;/code&gt; to simulate asynchrony. The callback function passed to &lt;code&gt;setTimeout()&lt;/code&gt; is called after 1 second of calling &lt;code&gt;obj.useName()&lt;/code&gt;. By the time the callback function is called, &lt;code&gt;useName()&lt;/code&gt; has long been executed. In fact, the callback queue is executed in the global context (&lt;code&gt;window&lt;/code&gt; in case of our browser environment). This means that &lt;code&gt;this = window&lt;/code&gt; when the async callback is called. This is why &lt;code&gt;this.firstName&lt;/code&gt; resolves to &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As I stated above, before arrow functions, this problem was solved by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using &lt;code&gt;bind&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// output after 1 second: "Hi Jack"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;by declaring a referencing variable (traditionally called &lt;code&gt;self&lt;/code&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// output after 1 second: "Hi Jack"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can simply use an arrow function which gives us the expected results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#callbacks-for-iterator-functions"&gt;
  &lt;/a&gt;
  Callbacks for iterator functions
&lt;/h3&gt;

&lt;p&gt;When I say iterator functions I mean functions like &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt;, and &lt;code&gt;forEach()&lt;/code&gt; that go through each item of an iterable and feed that item to a callback function. This is where arrow functions really shine. No need to worry about the dynamic context. Additionally, the compact syntax and the implicit return feature of arrow functions often result in code that is concise and more readable at the same time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// output: [4, 8, 12, 16]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in-my-humble-opinion-"&gt;
  &lt;/a&gt;
  In my humble opinion ...
&lt;/h2&gt;

&lt;p&gt;Although arrow functions are a great addition to JavaScript, and in the proper context their concise syntax improves code readability, I still don't think that they should be the default for function declaration. If the situation doesn't specifically call for it, there is no need to use an arrow function.&lt;/p&gt;

&lt;p&gt;Consider, for example, your globally-scoped or module-scoped functions (perhaps you have a &lt;code&gt;helpers.js&lt;/code&gt; file that has a bunch of helper functions your application needs). The arrow function syntax in this case simply looks more cluttered than a normal function declaration. On top of it, the code becomes even more cluttered if you have &lt;code&gt;async&lt;/code&gt; functions and need to &lt;code&gt;export&lt;/code&gt; some of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// function body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// function body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Using arrow functions:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firestore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signInWithGoogle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signInWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUserDocument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createUserDocument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;additionalData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Using normal functions:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firestore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signInWithGoogle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signInWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createUserDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;additionalData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The normal function syntax is just better. It reads better and it is actually less typing. Not that less typing should be a factor here but I've often observed that it is a factor behind using arrow functions.&lt;/p&gt;

&lt;p&gt;Another example, which is slowly becoming a pet peeve of mine, is using arrow functions for declaring a React funtional component. There is just no need to do that! You can simply use a normal function declaration.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Using an arrow function:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// a ReactJS functional component -- arrow edition&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Using a normal function:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// a ReactJS functional component -- normal edition&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isn't a normal function delcaration much clearer?&lt;/p&gt;




&lt;p&gt;👉🏻 Subscribe to my newsletter: &lt;a href="https://www.bracketsinstitute.com/newsletter-subscription"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉🏻 Follow me on twitter: &lt;a href="https://twitter.com/bi_nrf"&gt;click here&lt;/a&gt;&lt;/p&gt;




</description>
    </item>
    <item>
      <title>New tutorial</title>
      <author>Saleh-Mubashar</author>
      <pubDate>Tue, 02 Nov 2021 03:56:07 +0000</pubDate>
      <link>https://dev.to/salehmubashar/new-tutorial-2700</link>
      <guid>https://dev.to/salehmubashar/new-tutorial-2700</guid>
      <description>&lt;p&gt;Hi guys&lt;br&gt;
Hope you all are doing well.&lt;br&gt;
Firstly, thanks for the immense support on my useNavigate tutorial. I am still in shock that it was received so well. &lt;br&gt;
As you all may know, I am an author at different platforms. So I may not publish regularly here but I am active in other platforms too.&lt;br&gt;
You can check out my &lt;a href="https://discover.hubpages.com/technology/reactCounter"&gt;new tutorial&lt;/a&gt; that is published on hubpages. I would really appreciate the support.&lt;br&gt;
&lt;a href="https://hubpages.com/@salehmubashar"&gt;My profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again, thank you all.&lt;br&gt;
Until next time&lt;br&gt;
Cheers :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What I learned from the Azure AI-900 Exam</title>
      <author>Matt Eland</author>
      <pubDate>Tue, 02 Nov 2021 02:55:21 +0000</pubDate>
      <link>https://dev.to/integerman/what-i-learned-from-the-azure-ai-900-exam-4pbf</link>
      <guid>https://dev.to/integerman/what-i-learned-from-the-azure-ai-900-exam-4pbf</guid>
      <description>&lt;p&gt;&lt;a href="https://killalldefects.com/2021/11/01/what-i-learned-from-the-azure-ai-900-exam/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QELLXgr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2021/11/MLDesigner.png%3Ffit%3D768%252C457%26ssl%3D1" alt="Banner image featuring Machine Language Designer" width="768" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recently passed Microsoft’s &lt;a href="https://docs.microsoft.com/en-us/learn/certifications/exams/ai-900"&gt;AI-900 exam&lt;/a&gt; resulting in the &lt;a href="https://docs.microsoft.com/en-us/learn/certifications/azure-ai-fundamentals/"&gt;Microsoft Certified: Azure AI Fundamentals&lt;/a&gt; certification.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjYzx2Um--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2021/11/AI900Cert.png%3Fresize%3D559%252C394%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjYzx2Um--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2021/11/AI900Cert.png%3Fresize%3D559%252C394%26ssl%3D1" alt="AI-900 Certificate" width="559" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was a fun certification to study for and take, and the knowledge gained is something I found useful and wanted to share with the community. This information will be broadly useful, though most useful for those who work with &lt;a href="https://azure.microsoft.com/"&gt;Microsoft Azure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What follows are some high-level topics and takeaways from major areas of the exam. This should give you a picture of what’s on the exam as well as many of the AI capabilities Microsoft Azure currently offers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsible-ai"&gt;
  &lt;/a&gt;
  Responsible AI
&lt;/h2&gt;

&lt;p&gt;One of the things I was most pleased was included on the exam was Microsoft’s principles of &lt;a href="https://docs.microsoft.com/en-us/learn/modules/get-started-ai-fundamentals/8-understand-responsible-ai?ns-enrollment-type=LearningPath&amp;amp;ns-enrollment-id=learn.wwl.get-started-with-artificial-intelligence-on-azure"&gt;Responsible AI&lt;/a&gt;. These are a set of 6 principles that Microsoft identified governing the use of artificial intelligence technologies in applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fairness&lt;/strong&gt; – AI should treat all groups of people fairly and not discriminate on people based on gender, ethnicity, or other factors.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reliability and Safety&lt;/strong&gt; – AI should work reliably, even under extreme cases and with extreme sets of data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Privacy and Security&lt;/strong&gt; – AI data sources containing personal data should be treated with respect and kept private.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inclusiveness&lt;/strong&gt; – AI should be for the benefit of &lt;em&gt;all&lt;/em&gt; people, including those with disabilities or from minorities. Solutions should be designed with these people in mind first and foremost.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Transparency&lt;/strong&gt; – It should be possible to determine how AI solutions arrive at the conclusions they do. Users should understand the high-level limitations of the AI systems they interact with.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accountability&lt;/strong&gt; – Designers of AI solutions should be accountable for those solutions. AI solutions must work within the framework of local governments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I personally find these principles of responsible AI very refreshing and important. In particular, recognizing the potential for bias to enter an AI system is critical when designing and testing those systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#machine-learning-concepts"&gt;
  &lt;/a&gt;
  Machine Learning Concepts
&lt;/h2&gt;

&lt;p&gt;The exam covers the following machine learning scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Regression&lt;/strong&gt; – Predicting a numerical value (or label) such as a price or temperature given a set of parameters (or features).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Classification&lt;/strong&gt; – Evaluating a set of features to determine what class of thing a set of parameters likely belongs to. For example, given a set of parameters for a movie, determine if it is a Christmas movie or a different type of movie (stay tuned for future articles about this one).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Clustering&lt;/strong&gt; – Grouping together different sets of data by their similarity. For example, identifying different segments of users for marketing communications.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Anomaly Detection&lt;/strong&gt; – Detecting irregular data points, such as fraudulent transactions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Time Series Predictions&lt;/strong&gt; – Predicting values based on historical trends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These machine learning techniques are grouped into &lt;em&gt;supervised&lt;/em&gt;, &lt;em&gt;unsupervised&lt;/em&gt;, and &lt;em&gt;reinforcement&lt;/em&gt; learning techniques. The primary difference between these techniques is that supervised learning techniques requires data to be pre-labelled for the thing you are trying to train the model to predict whereas unsupervised learning does not require this. Reinforcement learning allows machines to teach themselves by relying on some external scoring function.&lt;/p&gt;

&lt;p&gt;Most machine learning techniques are supervised learning, but clustering relies on unsupervised learning.&lt;/p&gt;

&lt;p&gt;The exam also covers a wide variety of metrics related to measuring the effectiveness of the various types of machine learning tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-machine-learning"&gt;
  &lt;/a&gt;
  Azure Machine Learning
&lt;/h2&gt;

&lt;p&gt;Azure offers a variety of things on machine learning through &lt;a href="https://docs.microsoft.com/en-us/azure/machine-learning/overview-what-is-machine-learning-studio"&gt;Azure Machine Learning Studio&lt;/a&gt; depending on your needs and experience level with machine learning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtoyLjEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2021/11/MLStudio.png%3Fresize%3D770%252C527%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtoyLjEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2021/11/MLStudio.png%3Fresize%3D770%252C527%26ssl%3D1" alt="ML Studio" width="770" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For experienced data scientists, Azure offers hosted &lt;a href="https://jupyter.org/"&gt;Jupyter Notebooks&lt;/a&gt; in the Azure space where individuals can run custom Python code in an Azure environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IeQZooyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2021/11/Jupyter.png%3Fresize%3D770%252C520%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IeQZooyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2021/11/Jupyter.png%3Fresize%3D770%252C520%26ssl%3D1" alt="Jupyter Notebook on Azure" width="770" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure also offers a drag-and drop designer allowing data scientists to create training and evaluation pipelines that can take in data sets and perform training and predictions. This relies on some knowledge of machine learning algorithms, but does not necessarily involve coding (though Python and R programming tasks can be incorporated).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wui0ywks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2021/11/MLDesigner.png%3Fresize%3D770%252C459%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wui0ywks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2021/11/MLDesigner.png%3Fresize%3D770%252C459%26ssl%3D1" alt="ML Designer" width="770" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those without extensive knowledge of machine learning algorithms or those who are not certain which algorithm might be best for their needs, there is the option of Automated ML. With Automated ML Azure will automatically try different machine learning techniques until it finds one that performs well enough to meet your needs. This dramatically increases the accessibility of machine learning, though care must still be taken creating sets of data and devising machine learning experiments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WSEomLPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2021/11/AutoML.png%3Fresize%3D770%252C453%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSEomLPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2021/11/AutoML.png%3Fresize%3D770%252C453%26ssl%3D1" alt="Automated ML Configuration Screen" width="770" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Azure Machine Learning Studio also offers compute and data set management as well as endpoint management for deployed machine learning solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conversational-ai"&gt;
  &lt;/a&gt;
  Conversational AI
&lt;/h2&gt;

&lt;p&gt;Another branch of artificial intelligence covered on the exam is that of Conversational AI. Conversational AI involves the design of chat bots that can interact with humans through &lt;a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-service-manage-channels?view=azure-bot-service-4.0"&gt;various channels&lt;/a&gt; such as web pages, Slack, or Microsoft Teams.&lt;/p&gt;

&lt;p&gt;The conversational AI offerings are more limited, but include the Azure Bot Framework SDK, Azure Bot Service, and Azure QnA Maker. Bot framework allows you to program bots that will run on the Azure Bot Service. Azure QnA Maker can be used to generate simple bots that give answers from pre-existing word documents, PDFs, and web pages. You can also augment bots with "chitchat" profiles to allow them to respond to common queries and boost the illusion of being an intelligent agent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zvm6p7Zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2021/11/Chat.png%3Fresize%3D250%252C433%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zvm6p7Zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2021/11/Chat.png%3Fresize%3D250%252C433%26ssl%3D1" alt="Chatbot Transcript" width="250" height="433"&gt;&lt;/a&gt;A sample chat application&lt;/p&gt;

&lt;p&gt;Note that unlike most other Azure AI offerings bots do not directly integrate with Azure Cognitive Services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#computer-vision"&gt;
  &lt;/a&gt;
  Computer Vision
&lt;/h2&gt;

&lt;p&gt;The exam covers &lt;a href="https://docs.microsoft.com/en-us/learn/paths/explore-computer-vision-microsoft-azure/"&gt;computer vision&lt;/a&gt; fairly extensively, though it is not as much of a priority as machine learning or general AI principles. This was actually a relief since this area felt the most Azure-specific and is personally not as interesting of an area of AI compared to others despite advances every day in autonomous vehicles and similar fields. On Azure computer vision can be split into the following key areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Computer Vision&lt;/strong&gt; – pre-trained solutions that can meet a variety of needs around object detection and image classification. This can also identify celebrities and landmarks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Custom Vision&lt;/strong&gt; – an area that allows you to use the capabilities of Computer Vision, but you must provide your own training images and train a vision model&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Face&lt;/strong&gt; – specializing in face detection and analysis. This can be used to identify individuals, map landmarks of faces, identify emotions, detect glasses and makeup, classify gender, and identify similar individuals. The last two aspects of this API concerns me for obvious potential abuses, however.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Optical Character Recognition&lt;/strong&gt; – Allows computer vision to identify text either with its quick OCR library or the more asynchronous Read API designed to handle larger volumes of content&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Form Recognizer&lt;/strong&gt; – a specialized area of computer vision designed to read tabular data and receipts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, these are surprisingly capable solutions that can be added fairly easily to applications. I’ve just never had explicit interest in building something that requires these technologies yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#natural-language-processing"&gt;
  &lt;/a&gt;
  Natural Language Processing
&lt;/h2&gt;

&lt;p&gt;Natural Language Processing (NLP) involves the understanding and translation of human text and speech. For whatever reason the inclusion of speech in this area was difficult for my mind to grasp while studying.&lt;/p&gt;

&lt;p&gt;The most interesting parts of NLP for me revolve around the Text Analytics and Language Understanding services, but speech recognition, speech synthesis, and language translation are all part of NLP as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Text Analytics&lt;/strong&gt; allows you to take some human text and detect what language it was in, identify some form of positive or negative sentiment based on the content of the text with sentiment analysis, use key phrase extraction to identify the core talking points, and use entity recognition to extract locations, people, quantities, and dates / times from text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Language Understanding&lt;/strong&gt; , or &lt;strong&gt;LUIS&lt;/strong&gt; , allows you to take a command (also referred to as an &lt;em&gt;utterance&lt;/em&gt;) and match it to an &lt;em&gt;intent&lt;/em&gt; the system knows about, then extract any &lt;em&gt;entities&lt;/em&gt; related to that intent. This allows you to take something the system may not have seen explicitly and match it to the closest registered intent, then hand off any related entities to that intent to be able to respond to the person’s text. This type of approach is at the core of things like Cortana, Alexa, and similar digital assistants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speech recognition&lt;/strong&gt; , &lt;strong&gt;speech synthesis&lt;/strong&gt; , and &lt;strong&gt;language translation&lt;/strong&gt; are capable parts of the platform as well, with an interesting and growing array of options available to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparing-for-the-exam"&gt;
  &lt;/a&gt;
  Preparing for the Exam
&lt;/h2&gt;

&lt;p&gt;The AI Fundamentals certification is not currently a pre-requisite for any other certification, though it will help you get a broad overview of the AI landscape – particularly on the Azure platform. The AI-900 exam required by this certification is a relatively easy one and will also help prepare you for more specific certifications such as the &lt;a href="https://docs.microsoft.com/en-us/learn/certifications/azure-ai-engineer/"&gt;Azure AI Engineer certification&lt;/a&gt; or &lt;a href="https://docs.microsoft.com/en-us/learn/certifications/azure-data-scientist/"&gt;Azure Data Scientist certification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I personally took this exam to help me point any student or graduate in the direction of things that might interest them and to ensure I had a broad understanding of AI prior to starting my master’s of science in data analytics program in the new year.&lt;/p&gt;

&lt;p&gt;If you’d like to take this exam, your first stop should be the free &lt;a href="https://docs.microsoft.com/en-us/learn/certifications/exams/ai-900"&gt;Microsoft Learn content&lt;/a&gt; listed at the bottom of the exam page. These learning paths will guide you through all of the areas of the exam, give you some practice with these tools and techniques, and present you with some quiz questions that may be similar to those on the exam.&lt;/p&gt;

&lt;p&gt;Secondly, I recommend Andrew Brown’s exceptional &lt;a href="https://www.exampro.co/ai-900"&gt;course on Exam Pro&lt;/a&gt; which is very reasonably priced and also includes quizzes, flash cards, and a practice test.&lt;/p&gt;

&lt;p&gt;Finally, &lt;a href="https://www.whizlabs.com/microsoft-azure-certification-ai-900"&gt;Whizlabs&lt;/a&gt; has a video course and set of practice tests available for AI-900 as well as a phenomenal WhizCard study guide. One caveat to this: the practice tests are several levels of magnitude more difficult than the actual AI-900 exam. For reference, I scored a 70% and 50% on the two practice tests but scored a 97% on the actual exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RS53ZiWk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2021/11/azure-ai-fundamentals300.png%3Fresize%3D150%252C150%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RS53ZiWk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2021/11/azure-ai-fundamentals300.png%3Fresize%3D150%252C150%26ssl%3D1" alt="AI-900 Badge" width="150" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Overall, I definitely recommend this exam and certification for anyone wanting to understand AI in more depth and learn their way around the Azure offerings. I was able to take my skills from this exam and apply them fairly easily to solving real machine learning problems in the Azure environment without much hassle.&lt;/p&gt;

&lt;p&gt;You can expect more content from me on machine learning topics in the near future, so stay tuned!&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://killalldefects.com/2021/11/01/what-i-learned-from-the-azure-ai-900-exam/"&gt;What I learned from the Azure AI-900 Exam&lt;/a&gt; appeared first on &lt;a href="https://killalldefects.com"&gt;Kill All Defects&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>ai</category>
      <category>certification</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Working on Generating API fixture</title>
      <author>Emily</author>
      <pubDate>Tue, 02 Nov 2021 02:20:26 +0000</pubDate>
      <link>https://dev.to/hphan9/working-on-generating-api-fixture-3amd</link>
      <guid>https://dev.to/hphan9/working-on-generating-api-fixture-3amd</guid>
      <description>&lt;p&gt;In the second week of Hacktoberfest, I found an interesting project to work on_ &lt;a href="https://www.medusa-commerce.com/"&gt;Medusa&lt;/a&gt;. Medusa is a headless commerce platform that enables developers to create a digital commerce experiences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;The project owner want to generate fixtures for models returned by their API, so the users can see it as an example how data returns back when making an API call. I chose the &lt;a href="https://github.com/medusajs/medusa/issues/468"&gt;Region&lt;/a&gt; model to work on. &lt;br&gt;
The first challenge I had is setting up the development environment to start contributing. I met several errors that was not discussed in the documentation. Luckily, they have a Discord group and it is really active. I found other contributors had same issues before so I followed their advice and resolved the problem. I also helped newer contributor to overcome the same challenge. It felt great that I can help other developers. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;The process for creating API fixture was straightforward. The project owners were really thoughtful and they created a video to walkthrough the problem and solution. &lt;br&gt;
Basically, I had to write an integration test for GetRegionsRegion API call and the result of this call will be saved in the fixture folder.&lt;br&gt;
The fixture I created is here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;region&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reg_01FHTESN727620KGC7KASK5KSM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Scandinavia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currency_code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dkk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tax_rate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tax_code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;countries&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;payment_providers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test-pay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is_installed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fulfillment_providers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test-ful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is_installed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;created_at&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-10-12T14:34:10.528Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;updated_at&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-10-12T14:34:10.528Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;deleted_at&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;metadata&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can take a look on my Pull request &lt;a href="https://github.com/medusajs/medusa/pull/541"&gt;here&lt;/a&gt;.&lt;br&gt;
In overall, it is great experience. The project owners was really nice and helpful. I would love to contribute more to this project. &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Important SQL Queries for Beginners</title>
      <author>Mahmoud EL-kariouny</author>
      <pubDate>Tue, 02 Nov 2021 01:12:18 +0000</pubDate>
      <link>https://dev.to/mahmoudessam/the-important-sql-queries-for-beginners-h5a</link>
      <guid>https://dev.to/mahmoudessam/the-important-sql-queries-for-beginners-h5a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#30-important-sql-queries-for-beginners"&gt;
  &lt;/a&gt;
  30 Important SQL Queries for Beginners
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#retrieving-data-from-all-columns"&gt;
  &lt;/a&gt;
  Retrieving Data From All Columns
&lt;/h4&gt;

&lt;p&gt;This is a very basic query to display all data from a table. Notice that this query only has one character after SELECT: "*" (this denotes all columns). Therefore, you don't need to list the names of the columns. Of course, remember to write FROM and the name of the table from which you want to retrieve data. In this example, we are retrieving data from the table animal.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM animal;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#retrieving-data-from-certain-columns"&gt;
  &lt;/a&gt;
  Retrieving Data From Certain Columns
&lt;/h4&gt;

&lt;p&gt;The query above displays all of the data from the table animal. If you would like to only retrieve data from certain columns, list them after SELECT. In this example, we are retrieving data from the id and name columns.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT id, name
FROM animal;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#filtering-data-using-where-clause"&gt;
  &lt;/a&gt;
  Filtering Data Using WHERE Clause
&lt;/h4&gt;

&lt;p&gt;In addition to retrieving data from certain columns, you can also filter data by listing conditions after WHERE. In this example, there is one condition: age&amp;gt;=2. We are looking for records with a value of 2 or more in the column age.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT id, name, age
FROM animal
WHERE age&amp;gt;=2;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#filtering-data-using-conditions-joined-by-and-operator"&gt;
  &lt;/a&gt;
  Filtering Data Using Conditions Joined by AND Operator
&lt;/h4&gt;

&lt;p&gt;If you want to filter data using more than one condition, you can use AND. In this example, we are looking for records with a value of 2 or more in the column age and 'dog' in the column name.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT id, name, age
FROM animal
WHERE age &amp;gt;= 2 AND name = 'dog';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#filtering-data-using-conditions-joined-by-or-operator"&gt;
  &lt;/a&gt;
  Filtering Data Using Conditions Joined by OR Operator
&lt;/h4&gt;

&lt;p&gt;If only one of the conditions needs to be met, you can use OR. In this example, we are looking for records with a value of 2 or more in the column age or 'dog' in the column name.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT id, name, age
FROM animal
WHERE age &amp;gt;= 2 OR name = 'dog';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-distinct-to-retrieve-nonrepeated-records"&gt;
  &lt;/a&gt;
  Using DISTINCT to Retrieve Non-Repeated Records
&lt;/h4&gt;

&lt;p&gt;You can place DISTINCT after SELECT to retrieve only one of each type of record. In this example, we want to retrieve records from columns name and color. If the values from these columns are the same in more than one record (e.g., there is more than one yellow T-shirt in the table), the query returns only one of those records.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT DISTINCT name, color
FROM clothing;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#retrieving-data-without-null-in-a-certain-column"&gt;
  &lt;/a&gt;
  Retrieving Data Without NULL in a Certain Column
&lt;/h4&gt;

&lt;p&gt;If you want to retrieve data only from rows without NULL in a certain column, use IS NOT NULL. In this example, the value in the column color may not be NULL. So, only records with a value stored in the column color will be returned. A similar operator to IS NOT NULL is IS NULL, which checks if a value is equal to NULL.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT name, color
FROM clothing
WHERE color IS NOT NULL;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sorting-data-according-to-one-column"&gt;
  &lt;/a&gt;
  Sorting Data According to One Column
&lt;/h4&gt;

&lt;p&gt;To sort data according to a column, place the column name after &lt;br&gt;
ORDER BY. The default sorting method is alphabetical, but you can also display rows in descending order by adding DESC after the name of the column. In this example, we want to sort the data in columns id and name according to the column name.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT id, name
FROM animal
ORDER BY name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sorting-data-according-to-more-than-one-column"&gt;
  &lt;/a&gt;
  Sorting Data According to More Than One Column
&lt;/h4&gt;

&lt;p&gt;You can also sort data according to more than one column. In this example, the records are first sorted according to the column name in descending order and next according to the column id in ascending order. If the query finds records with the same name (e.g., all records with 'dog' in column name), it sorts these records in ascending order according to id.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT id, name
FROM animal
ORDER BY name DESC, id;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#searching-for-values-matching-a-certain-pattern"&gt;
  &lt;/a&gt;
  Searching for Values Matching a Certain Pattern
&lt;/h4&gt;

&lt;p&gt;You can use LIKE to retrieve data that matches a certain pattern. In this example, we want to retrieve records from columns id and name that store a string containing the character "e" in the column name (e.g., records with names like elephant, bee, etc.)&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT id, name
FROM animal
WHERE name LIKE '%e%';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#joining-values-from-text-columns-into-one-string"&gt;
  &lt;/a&gt;
  Joining Values From Text Columns Into One String
&lt;/h4&gt;

&lt;p&gt;The CONCAT function joins strings. In this example, the strings stored in the columns category and name are returned as a single column of strings with a space between the value in the column category and the value in the column name.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT CONCAT(category, ' ', name)
FROM tab;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-mathematical-operators"&gt;
  &lt;/a&gt;
  Using Mathematical Operators
&lt;/h4&gt;

&lt;p&gt;You can write queries to calculate values by using mathematical operators like "+," "-," "*," and "/." In this example, we want to calculate the discounted price by subtracting the value in the column discount from the value in the column price.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT price - discount
FROM product;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#adding-data-from-different-tables"&gt;
  &lt;/a&gt;
  Adding Data From Different Tables
&lt;/h4&gt;

&lt;p&gt;You can join records from different tables using the operator UNION ALL. Remember that the records must be the same data type. In this example, we want to retrieve all rows with last names from the table customer and all rows with last names from the table employee. It will retrieve all last names, even if they are repeated. If we want to select all last names without repeats, we would use UNION instead of UNION ALL.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT last_name FROM customer
UNION ALL
SELECT last_name FROM employee;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#finding-the-intersection-of-sets-of-data"&gt;
  &lt;/a&gt;
  Finding the Intersection of Sets of Data
&lt;/h4&gt;

&lt;p&gt;INTERSECT returns the intersection of two sets of data. In this example, we only want to retrieve the last names listed in both tables. To see what is different between the sets, use the operators MINUS or EXCEPT.&lt;/p&gt;

&lt;p&gt;If you'd like to know more about set operators and see the visual explanation of this concept, READ THIS ARTICLE.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT last_name FROM customer
INTERSECT
SELECT last_name FROM employee;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#joining-data-from-different-tables"&gt;
  &lt;/a&gt;
  Joining Data From Different Tables
&lt;/h4&gt;

&lt;p&gt;You can join tables using JOIN, including INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN, and CROSS JOIN (please see the courses listed at the end of this article for more information). In this example, we want to join data from the tables customer and city. INNER JOIN needs to come after FROM and the name of the first table, customer. After INNER JOIN, place the name of the second table, city. The records with data from both tables are matched by ON with the condition to join. The records in the table city are matched to the records from the table customer if they have the same value in the column id in the table customer and in the column customer_id in the table city.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT customer.last_name, city.name
FROM customer
INNER JOIN city
  ON customer.id = city.customer_id;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-aliases-of-tables-and-columns"&gt;
  &lt;/a&gt;
  Using Aliases of Tables and Columns
&lt;/h4&gt;

&lt;p&gt;If you join tables, it is a good idea to use aliases for table and column names. In this example, we want to join two tables, customer and city, and name them c and t, respectively. We define these new names in FROM or JOIN, using AS. Similarly, we rename the columns last_name in the table customer and name in the table city as lname and city, respectively.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT c.last_name AS lname, t.name AS city
FROM customer AS c
INNER JOIN city AS t
  ON c.id = t.customer_id;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#counting-the-number-of-rows-in-a-table"&gt;
  &lt;/a&gt;
  Counting the Number of Rows in a Table
&lt;/h4&gt;

&lt;p&gt;COUNT counts the number of rows. In this example, it returns the number of values from the column id stored in the table product (the number of all products).&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT COUNT(id)
FROM product;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#calculating-the-average-of-the-values-in-a-column"&gt;
  &lt;/a&gt;
  Calculating the Average of the Values in a Column
&lt;/h4&gt;

&lt;p&gt;You can calculate the average of the values in a column using AVG. In this example, the query returns the average price of all products in the table product.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT AVG(price)
FROM product;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#calculating-the-sum-of-the-values-in-a-column"&gt;
  &lt;/a&gt;
  Calculating the Sum of the Values in a Column
&lt;/h4&gt;

&lt;p&gt;SUM calculates the sum of the values in a column. In this example, it returns the value of all of the products.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT SUM(price)
FROM product;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#finding-the-minimum-value-in-a-column"&gt;
  &lt;/a&gt;
  Finding the Minimum Value in a Column
&lt;/h4&gt;

&lt;p&gt;You can find the minimum value stored in a column using MIN. In this example, the query returns the minimum price among the products.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT MIN(price)
FROM product;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#finding-the-maximum-value-in-a-column"&gt;
  &lt;/a&gt;
  Finding the Maximum Value in a Column
&lt;/h4&gt;

&lt;p&gt;You can find the maximum value stored in a column using MAX. In this example, the query returns the maximum price among the products.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT MAX(price)
FROM product;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#calculating-the-aggregate-value-for-groups-of-records"&gt;
  &lt;/a&gt;
  Calculating the Aggregate Value for Groups of Records
&lt;/h4&gt;

&lt;p&gt;GROUP BY puts rows into groups to calculate a value. In this example, we use COUNT to calculate the number of rows (the number of products) in each group (category). The columns in SELECT have to put in the GROUP BY clause. GROUP BY can be used in the same way with other aggregate functions like MAX, MIN, AVG, and SUM.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT category, COUNT(id)
FROM product
GROUP BY category;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#filtering-rows-using-aggregate-functions"&gt;
  &lt;/a&gt;
  Filtering Rows Using Aggregate Functions
&lt;/h4&gt;

&lt;p&gt;You can filter records after calculating values for each group using HAVING. In this example, we want to retrieve categories with an average price of products less than 56.50.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT category, AVG(price)
FROM product
GROUP BY category
HAVING AVG(price) &amp;lt; 56.50;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#removing-data-from-a-table"&gt;
  &lt;/a&gt;
  Removing Data From a Table
&lt;/h4&gt;

&lt;p&gt;DELETE FROM removes all data from a table. In this example, we want to delete all data from the table product.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE FROM product;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#removing-records-meeting-a-certain-condition-from-a-table"&gt;
  &lt;/a&gt;
  Removing Records Meeting a Certain Condition From a Table
&lt;/h4&gt;

&lt;p&gt;You can remove records meeting a certain condition using WHERE. In this example, we want to remove records from the table product with id equal to 5.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE FROM product
WHERE id = 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#removing-records-meeting-a-certain-condition-from-a-table"&gt;
  &lt;/a&gt;
  Removing Records Meeting a Certain Condition From a Table
&lt;/h4&gt;

&lt;p&gt;You can remove records meeting a certain condition using WHERE. In this example, we want to remove records from the table product with id equal to 5.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE FROM product
WHERE id = 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#inserting-data-into-a-table"&gt;
  &lt;/a&gt;
  Inserting Data Into a Table
&lt;/h4&gt;

&lt;p&gt;You can add a new record to a table using INSERT INTO. After INSERT INTO, put the name of the table and then in brackets the names of the columns of the table. After that, put VALUES and then in the brackets the values for the columns. In this example, we want to insert 25 into id, 'sofa' into name, and 'furniture' into category in the table product.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO product(id, name, category)
VALUES(25, 'sofa', 'furniture');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#updating-a-column-in-a-table"&gt;
  &lt;/a&gt;
  Updating a Column in a Table
&lt;/h4&gt;

&lt;p&gt;UPDATE allows you to modify data in the records. After UPDATE, put the name of the table, then SET, and then the name of the column to modify with "=" and new value to insert. This query modifies all values in the column. In this example, we want to change all values in the column company to 'ABC'.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE product SET company = 'ABC';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#updating-a-column-by-filtering-records"&gt;
  &lt;/a&gt;
  Updating a Column by Filtering Records
&lt;/h4&gt;

&lt;p&gt;However, if you don't want to change all values in a column, you can add WHERE with a condition. In the condition, you can specify which records to modify. In this example, we want to change values in the column name to 'armchair' only for records with id=25.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE product
SET name = 'armchair'
WHERE id = 25;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#creating-a-table"&gt;
  &lt;/a&gt;
  Creating a Table
&lt;/h4&gt;

&lt;p&gt;You can create a table using CREATE TABLE. After CREATE TABLE, put the name of the table and define in brackets the names of the columns and their data types. In this example, we want to create the table tab with two columns: id with integer as the data type and name limited to a maximum of 50 characters.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE tab(id int, name varchar(50));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#deleting-a-table"&gt;
  &lt;/a&gt;
  Deleting a Table
&lt;/h4&gt;

&lt;p&gt;You can delete a table using DROP TABLE. Simply put the name of &lt;br&gt;
the table you want to delete after DROP TABLE. In this example, we want to delete the table tab.&lt;/p&gt;

&lt;p&gt;Code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DROP TABLE tab;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://learnsql.com/blog/most-important-sql-queries-for-beginners/"&gt;Original score&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can practice all of those commands on &lt;a href="https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all"&gt;w3schools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your Database:&lt;/p&gt;

&lt;p&gt;Table name  Records&lt;/p&gt;

&lt;p&gt;Customers   91&lt;br&gt;
Categories  8&lt;br&gt;
Employees   10&lt;br&gt;
OrderDetails    518&lt;br&gt;
Orders          196&lt;br&gt;
Products    77&lt;br&gt;
Shippers    3&lt;br&gt;
Suppliers   29&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>bigdata</category>
      <category>sql</category>
      <category>database</category>
    </item>
    <item>
      <title>Nodejs App From Code To Kubernetes Cluster</title>
      <author>Bruno</author>
      <pubDate>Tue, 02 Nov 2021 00:50:27 +0000</pubDate>
      <link>https://dev.to/brunoa19/nodejs-app-from-code-to-kubernetes-cluster-2l5b</link>
      <guid>https://dev.to/brunoa19/nodejs-app-from-code-to-kubernetes-cluster-2l5b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/shipa-corp/ketch"&gt;Ketch&lt;/a&gt; automatically builds Docker images from your application source code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/shipa-corp/ketch"&gt;Ketch&lt;/a&gt; saves you time by creating all the required components to run your application on Kubernetes and exposing it through an endpoint without you dealing with infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-pressure-to-deliver"&gt;
  &lt;/a&gt;
  The Pressure to Deliver
&lt;/h2&gt;

&lt;p&gt;Many of us now have to deploy our applications on Kubernetes.&lt;/p&gt;

&lt;p&gt;While this is great and introduces you to an opportunity to learn new technologies, the reality is that you are often swamped with work, under pressure to deliver your applications, and you want to go from ‘code to application’ as fast as possible.&lt;/p&gt;

&lt;p&gt;What conflicts with that goal is that Kubernetes introduces different infrastructure-level concepts and requirements that take our time away from delivering our application code.&lt;/p&gt;

&lt;p&gt;Most of us had an opportunity to experience Heroku. From a developer’s perspective, the experience was great, and we could go from ‘code to application’ fast and without dealing with infrastructure complexity.&lt;/p&gt;

&lt;p&gt;So how can we get the same level of experience but on top of Kubernetes, giving our Ops team the freedom to adopt Kubernetes but still maintain an application layer on top of it to guarantee developer experience?&lt;/p&gt;

&lt;p&gt;This article will show you how you can get a starter NodeJS server deployed on Kubernetes. The goal is to not deal with infrastructure complexities and not even have to build a Docker file, going from ‘code to application.’&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You need NodeJS installed to start development&lt;/li&gt;
&lt;li&gt;Docker in your local machine&lt;/li&gt;
&lt;li&gt;You need to be logged into your container registry&lt;/li&gt;
&lt;li&gt;Access to a Kubernetes cluster and kubectl configured&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learn.theketch.io/docs/getting-started"&gt;Ketch installed&lt;/a&gt; and available in that cluster&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learn.theketch.io/docs/getting-started#ketch-cli"&gt;Ketch CLI available&lt;/a&gt; in your local machine&lt;/li&gt;
&lt;li&gt;You have a &lt;a href="https://learn.theketch.io/docs/getting-started#creating-a-framework"&gt;framework created in Ketch&lt;/a&gt; where you will deploy your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the Kubernetes cluster, I will be using a GKE (Google Kubernetes Engine) I have set up, but you can use local clusters directly from your laptops, such as &lt;a href="https://k3s.io/"&gt;K3s&lt;/a&gt; or &lt;a href="https://minikube.sigs.k8s.io/docs/start/"&gt;Minikube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;a href="https://github.com/shipa-corp/ketch"&gt;Ketch&lt;/a&gt;, once you have your cluster available and kubectl access configured, you can quickly install Ketch by &lt;a href="https://learn.theketch.io/docs/getting-started"&gt;following the instructions here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-initializing-the-node-application"&gt;
  &lt;/a&gt;
  Step 1: Initializing the Node Application
&lt;/h2&gt;

&lt;p&gt;First, create a separate directory. &lt;/p&gt;

&lt;p&gt;From within the directory, you can initialize the project with npm (Node Package Manager).&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;npm init&lt;/code&gt; will prompt you with basic configuration questions, such as your project name, version, and others. Keeping the default values is good enough for our sample application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;❯ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install &amp;lt;pkg&amp;gt;` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (nodejs-sample) 
version: (1.0.0) 
description: 
entry point: (index.js) 
test command: 
git repository: 
keywords: 
author: 
license: (ISC) 
About to write to /Users/brunoandrade/ketch/apps/nodejs-sample/package.json:

{
  "name": "nodejs-sample",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"
  },
  "author": "",
  "license": "ISC"
}

Is this OK? (yes) 

~/ketch/apps/nodejs-sample ❯  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-installing-express"&gt;
  &lt;/a&gt;
  Step 2: Installing Express
&lt;/h2&gt;

&lt;p&gt;Next, you will install Express. You will leverage the Express framework to build web applications and APIs. Use npm to install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;❯ npm install express -save

added 50 packages, and audited 51 packages in 2s

found 0 vulnerabilities
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above imports the Express module using a require function to return an object to configure your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-deploying-the-code"&gt;
  &lt;/a&gt;
  Step 4: Deploying the Code
&lt;/h2&gt;

&lt;p&gt;This is the fun part, having your application deployed directly from code into Kubernetes. Ketch will automatically build the Docker image for you, push it to your container registry of choice, create the required Kubernetes objects to run your application, and create an endpoint where you can access your application.&lt;/p&gt;

&lt;p&gt;If you are using Kubernetes directly, you would need to learn and deal with services, deployments, and more, but because you are using Ketch, you will do it all without dealing with any of that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ketch app deploy nodejs-sample . -i shiparepo/nodejs-sample:0.1 -k dev-framework
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Breaking down the command above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You use App deploy to deploy your application&lt;/li&gt;
&lt;li&gt;Nodejs-sample is the name of the application&lt;/li&gt;
&lt;li&gt;The ‘.’ is the path to your application source code&lt;/li&gt;
&lt;li&gt;‘-i shiparepo/nodejs-sample:0.1’ is the name and version of the image I want Ketch to use when creating and pushing the Docker image to my registry.&lt;/li&gt;
&lt;li&gt;Use the framework you created before with the ‘-k dev-framework’ flag&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-5-checking-your-application"&gt;
  &lt;/a&gt;
  Step 5: Checking your Application
&lt;/h2&gt;

&lt;p&gt;Now, you can check your application deployment status and endpoint by running the ketch app list command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;❯ ketch app list
NAME             FRAMEWORK         STATE          ADDRESSES        BUILDER                                                         
nodejs-sample    dev-framework     1 deploying    http://nodejs-sample.35.230.16.206.shipa.cloud    heroku/buildpacks:20   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the result, you can see that Ketch automatically configured the ingress controller and created the endpoint for your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-there-is-no-step-6"&gt;
  &lt;/a&gt;
  Step 6: There is No Step 6 🙂
&lt;/h2&gt;

&lt;p&gt;You have successfully deployed a sample NodeJS application on Kubernetes!&lt;/p&gt;

&lt;p&gt;The team is excited about enabling developers to focus on their application code instead of infrastructure. We would love it if you could show your support by &lt;a href="https://github.com/shipa-corp/ketch"&gt;starring the project on GitHub&lt;/a&gt; and sharing this article with your teammates.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>javascript</category>
      <category>react</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Playing Sound on the Web Using Tone.js and Alpine.js</title>
      <author>seb</author>
      <pubDate>Tue, 02 Nov 2021 00:12:29 +0000</pubDate>
      <link>https://dev.to/sebseb/playing-sound-on-the-web-using-tonejs-and-alpinejs-17ad</link>
      <guid>https://dev.to/sebseb/playing-sound-on-the-web-using-tonejs-and-alpinejs-17ad</guid>
      <description>&lt;p&gt;I've been having a ton of fun creating interactive musical tools and references over at &lt;a href="https://muted.io/"&gt;muted.io&lt;/a&gt;. Things like an &lt;a href="https://muted.io/circle-of-fifths/"&gt;interactive circle of 5ths&lt;/a&gt;, a &lt;a href="https://muted.io/major-minor-scales/"&gt;reference to all major and minor scales&lt;/a&gt; and a tool to &lt;a href="https://muted.io/chords-in-keys/"&gt;play chords in keys&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Under the hood, these tools are powered by the Tone.js library, which is a set of utilities build on top of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API"&gt;Web Audio API&lt;/a&gt;, which makes it easier to deal with audio in the browser from a musician's perspective. For the aformentioned tools, the user interactions are handled using &lt;a href="https://alpinejs.dev/"&gt;Alpine.js&lt;/a&gt;. I've found that the combination of Tone.js + Alpine.js really works like a charm.&lt;/p&gt;

&lt;p&gt;This short post gives you a little primer on how you'd go about setting things up to play audio files in the browser in such a fashion.&lt;/p&gt;

&lt;p&gt;First things first, you'll want to have both Tone.js and Alpine.js loaded onto your page. If you have a look at the &lt;a href="https://tonejs.github.io/"&gt;Tone.js documentation&lt;/a&gt; it'll tell you installation instruction via &lt;code&gt;npm&lt;/code&gt;, but personally I've been enjoying working with just a call to the minified script file itself. To do that via a CDN, you can add this in your page's &lt;code&gt;head&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.32/Tone.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then similarly for &lt;a href="https://alpinejs.dev/essentials/installation"&gt;installing Alpine.js&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that on a site like muted.io I've decided to load Tone.js only when the user has scrolled passed the relevant portion of the page. I'm using Alpine's &lt;a href="https://alpinejs.dev/plugins/intersect"&gt;Intersect plugin&lt;/a&gt; to accomplish that. This is of course optional and I may talk about the details of that in a future post.&lt;/p&gt;




&lt;p&gt;With the setup out of the way, you should now see a message in your browser console that says something like &lt;strong&gt;_ Tone.js v14.8.32 _ &lt;/strong&gt;, meaning that Tone.js has been properly loaded and is ready to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tonejs-sampler"&gt;
  &lt;/a&gt;
  Tone.js Sampler
&lt;/h2&gt;

&lt;p&gt;A sampler is an instrument that makes it easy to playback different audio files. Tone.js offers its own &lt;a href="https://tonejs.github.io/docs/14.7.77/Sampler"&gt;sampler instrument&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Tone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sampler&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;C3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C3.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;D#3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ds3.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;F#3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fs3.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;A3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A3.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;C4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C4.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;D#4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ds4.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;F#4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fs4.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;A4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A4.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/sounds/piano/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;toDestination&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code block I'm instantiating a sampler and passing in a path to audio files for different musical notes on the piano. In this case I'm using piano samples from the &lt;a href="https://archive.org/details/SalamanderGrandPianoV3"&gt;Salamander Grand Piano V3&lt;/a&gt; project, but you could use any of your own samples. In this case, the sounds are in my project's directory under &lt;code&gt;/sounds/piano/&lt;/code&gt;. You'll notice also that not all notes are included, that's because Tone.js is smart enough to repitch the samples and make up for any missing pitches in that way. This is really useful in saving on loading time for samples.&lt;/p&gt;

&lt;p&gt;This setup works great in a musical contact for playing sounds that actually correspond to musical pitches, but you could of course use a sampler to trigger totally unrelated sounds. You could for example decide that &lt;code&gt;C4&lt;/code&gt; triggers the sound of a toucan while &lt;code&gt;A4&lt;/code&gt; is for an abrasive dog bark. 🐕&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#playing-the-sounds"&gt;
  &lt;/a&gt;
  Playing the Sounds
&lt;/h2&gt;

&lt;p&gt;Now that we have our sampler instrument setup, we're ready to start listening to user interactions and trigger the sounds. Let's first define a simple function that triggers the passed-in note:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sampler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;triggerAttackRelease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;8n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, calling &lt;code&gt;play()&lt;/code&gt; will trigger the audio file associated with the note provided (or default to &lt;code&gt;C4&lt;/code&gt;) in your sampler for a duration of an 8th note. The default BPM value in Tone.js is &lt;code&gt;120&lt;/code&gt;, which will be what controls how long a &lt;code&gt;8th&lt;/code&gt; note is. You can tweak the BPM value like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Tone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Transport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bpm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 96 BPM instead of 120&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our &lt;code&gt;play&lt;/code&gt; function in place, we can use Alpine to setup a listnener on something like a button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;play('A3')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Play&lt;/span&gt; &lt;span class="nx"&gt;A3&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And done! You should now hear the sample that your sampler has for &lt;code&gt;A3&lt;/code&gt;. Note here that the button click is important because modern browsers require a user interaction like a button click to start playing sounds on a page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#separating-the-attack-from-the-release"&gt;
  &lt;/a&gt;
  Separating the attack from the release
&lt;/h3&gt;

&lt;p&gt;Earlier we made use of the &lt;code&gt;triggerAttackRelease&lt;/code&gt; on our sampler, which takes care of triggering the sample and also of releasing that trigger after the duration provided (a &lt;code&gt;8th&lt;/code&gt; note in our example). What if instead we wanted to play a sound for as long as the user is currently pushing a button? This is often useful for long samples that are to be played only while a note is activated (e.g.: a button is pressed). We can easily decouple the operation by using the &lt;code&gt;triggerAttack&lt;/code&gt; and &lt;code&gt;triggerRelease&lt;/code&gt; methods instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startPlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sampler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;triggerAttack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;stopPlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sampler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;triggerRelease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that you could also pass in an array with multiple notes at once to any of those methods (&lt;code&gt;triggerAttackRelease&lt;/code&gt;, &lt;code&gt;triggerAttack&lt;/code&gt;, &lt;code&gt;triggerRelease&lt;/code&gt;), allowing you to trigger things like chords, if you're triggering sounds in a musical context.&lt;/p&gt;

&lt;p&gt;And now, we can once again make use of Alpine's event handling capabilities to :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
  &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;mousedown.stop=&lt;/span&gt;&lt;span class="s"&gt;"startPlay('A4');"&lt;/span&gt;
  &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;mouseup.stop=&lt;/span&gt;&lt;span class="s"&gt;"stopPlay('A4');"&lt;/span&gt;
  &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;touchstart.stop.prevent=&lt;/span&gt;&lt;span class="s"&gt;"startPlay('A4');"&lt;/span&gt;
  &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;touchend.stop.prevent=&lt;/span&gt;&lt;span class="s"&gt;"stopPlay('A4');"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Play long sample
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I'm using the &lt;code&gt;mousedown&lt;/code&gt; and &lt;code&gt;mouseup&lt;/code&gt; events to decouple the button press and button unpress. You'll also notice that I'm using &lt;code&gt;touchstart&lt;/code&gt; and &lt;code&gt;touchend&lt;/code&gt;, which fixes the issue that touch screen devices don't have a mousedown or mouseup event. To stop the event's propagation, I'm using the &lt;a href="https://alpinejs.dev/directives/on#stop"&gt;&lt;code&gt;stop&lt;/code&gt; modifier&lt;/a&gt; on all events, and to prevent the default behavior I'm also using the &lt;a href="https://alpinejs.dev/directives/on#prevent"&gt;&lt;code&gt;prevent&lt;/code&gt; modifier&lt;/a&gt; on the touch events. This fixes an issue where the event would otherwise be triggered twice on devices with a mouse.&lt;/p&gt;




&lt;p&gt;That's it! Hopefully this short introduction was enough to show you how easy it can be to trigger sounds in the browser and start having fun with that in your own projects! ✨ 🔊&lt;/p&gt;

&lt;p&gt;For the sake of brevity, I kept the part involving Alpine.js very short and sweet in this post. In a real-world scenario, you'll likely want to make use of &lt;code&gt;x-data&lt;/code&gt; to do things like keep track of the notes/sounds being played:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;x-data=&lt;/span&gt;&lt;span class="s"&gt;"{ currentNote: 'A4' }"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"play(currentNote);"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Play note&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>music</category>
    </item>
    <item>
      <title>40+ Frontend Projects for Beginners – Easy Ideas to Get Started Coding Frontend [Beginners - Advance]</title>
      <author>Developers</author>
      <pubDate>Mon, 01 Nov 2021 23:56:50 +0000</pubDate>
      <link>https://dev.to/devv/40-frontend-projects-for-beginners-easy-ideas-to-get-started-coding-frontend-beginners-advance-585j</link>
      <guid>https://dev.to/devv/40-frontend-projects-for-beginners-easy-ideas-to-get-started-coding-frontend-beginners-advance-585j</guid>
      <description>&lt;p&gt;&lt;span&gt;If you are a developer or just getting started with the process, then you must already be aware of how important the role of &lt;/span&gt;&lt;span&gt;developing live projects&lt;/span&gt;&lt;span&gt; are. It will not only improve your coding skills but will also help you develop a passion for it. You can start by taking up online tutorials to learn a skill or two, but it must lead to starting to build the programs eventually.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/9-projects-you-can-do-to-become-a-front-end-master/&amp;amp;ved=2ahUKEwilofe-rvjzAhVGbysKHR-RCv4QFnoECAUQAQ&amp;amp;usg=AOvVaw2t7-_QAPDVzRhEVlb4h7WW"&gt;40+ Frontend Projects for Beginners – Easy Ideas to Get Started Coding Frontend [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AI Projects for Beginners – Easy Ideas to Get Started Coding AI [Beginners - Advance]</title>
      <author>Developers</author>
      <pubDate>Mon, 01 Nov 2021 23:37:00 +0000</pubDate>
      <link>https://dev.to/devv/ai-projects-for-beginners-easy-ideas-to-get-started-coding-ai-beginners-advance-1gf3</link>
      <guid>https://dev.to/devv/ai-projects-for-beginners-easy-ideas-to-get-started-coding-ai-beginners-advance-1gf3</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The median salary of an AI engineer as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of computer vision. If you’d like to build models that can converse with people and learn human language, you can work in the field of NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn’t tough to get started in the field of AI. While there is the complexity involved in building machine learning models from scratch, most AI jobs in the industry today don’t require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;AI Projects for Beginners – Easy Ideas to Get Started Coding AI [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Nodejs Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance]</title>
      <author>Developers</author>
      <pubDate>Mon, 01 Nov 2021 23:29:58 +0000</pubDate>
      <link>https://dev.to/devv/nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-50kd</link>
      <guid>https://dev.to/devv/nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-advance-50kd</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;Nodejs Projects for Beginners – Easy Ideas to Get Started Coding JS [Beginners - Advance]&lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
  </channel>
</rss>
