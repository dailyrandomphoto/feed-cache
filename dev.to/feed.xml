<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why You Should Use SaaS Boilerplate &amp; Starter-Kits To Speed Up Your App Development</title>
      <author>Condor</author>
      <pubDate>Thu, 13 May 2021 17:40:32 +0000</pubDate>
      <link>https://dev.to/aminebounizel/why-you-should-use-saas-boilerplate-starter-kits-to-speed-up-your-app-development-1p4h</link>
      <guid>https://dev.to/aminebounizel/why-you-should-use-saas-boilerplate-starter-kits-to-speed-up-your-app-development-1p4h</guid>
      <description>&lt;p&gt;Being a SaaS entrepreneur has its good and bad sides. While it comes with the excitement of having new ideas and launching new projects, there is one rather dull part of the process: setting it up. &lt;br&gt;
Setting up the basics and taking care of the technical aspects can be time-consuming, and, to be honest, no one likes to do it. Since it requires a lot of motivation, attention, and many working hours, it can delay your app development by several weeks, even months. So, what can you do to make the process faster?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-saas-boilerplates"&gt;
  &lt;/a&gt;
  What Are SaaS Boilerplates?
&lt;/h2&gt;

&lt;p&gt;What if you found out that a template could take care of all the boring, complicated parts by starting with a boilerplate that has everything that is needed, and you didn't have to do them yourself anymore? Yes, it's possible, and that's exactly what a SaaS boilerplate is. SaaS boilerplates involve functionalities that would otherwise cost entrepreneurs a lot of time and money to build.&lt;br&gt;
There are things that are common across all SaaS Apps. No matter what you are building, your SaaS will most likely be needing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Authentication feature which handles all the login, logout, forgot password.&lt;/li&gt;
&lt;li&gt;Integration to payment and a way to charging the customer and manage subscriptions and plans.&lt;/li&gt;
&lt;li&gt;Features to handle recurring payments, cancelation, charging credit cards.&lt;/li&gt;
&lt;li&gt;Pre-build permission, and roles management to grant and restrict user permissions based on roles with full end-user control.&lt;/li&gt;
&lt;li&gt;Dashboard for your users&lt;/li&gt;
&lt;li&gt;Profile page for your users&lt;/li&gt;
&lt;li&gt;Built-in component library&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;...etc&lt;/p&gt;

&lt;p&gt;There are plenty of different types of boilerplates available on the market, and all of them have a different set of features and facilities.&lt;br&gt;
Based on your preferred programming language and the architecture you think your SaaS platform will require, you can choose one boilerplate or a starter kit that could set the ground for all your future projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boostackio"&gt;
  &lt;/a&gt;
  Boostack.io
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1d2akFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fddeavnn0uj4mz8zx1pl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1d2akFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fddeavnn0uj4mz8zx1pl.png" alt="Boostack SaaS Boilerplate"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://boostack.io"&gt;Boostack&lt;/a&gt; provide a proven starting point for new projects that save you months of time when launching your next SaaS Application it uses minimal dependencies, implements idiomatic code, and follows best practices, Boostack comes with a clean project structure and clean architecture that you can easily extend or customize.&lt;br&gt;
Built on MEVN stack, the open-source JavaScript Stack to build powerful and dynamic apps.&lt;br&gt;
Boostack is 100% Javascript with Node.js on the backend and Vue.js on the frontend, so you don't need to write, maintain, or debug in multiple languages.&lt;br&gt;
For makers, bootstrapper or solo-founder Boostack is the perfect SaaS Boilerplate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#railskitscom"&gt;
  &lt;/a&gt;
  Railskits.com
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NmzT4mE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da4pw8i6hbvk97hn7ixd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmzT4mE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da4pw8i6hbvk97hn7ixd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://railskits.com"&gt;Railskits&lt;/a&gt; gets your new software-as-a-service site off to a running start by providing you a well-tested and proven recurring billing system with credit card payments.&lt;br&gt;
Railskits is a Ruby on Rails framework for building membership-based applications, including account signups upgrades/downgrades, tiered pricing levels with customizable limits (e.g, # of users, # of projects, etc.), multi-tenant data security in a single database, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#innomaticio"&gt;
  &lt;/a&gt;
  Innomatic.io
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3HQv8wTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh98e3dt83binot57agn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3HQv8wTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh98e3dt83binot57agn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.innomatic.io/"&gt;Innomatic&lt;/a&gt; the open source platform for building multi-tenant applications in PHP&lt;br&gt;
Innomatic reduces the time and the budget to build SaaS products by providing SaaS engineering, service management, and business management components in ready-to-use form. Innomatic Platform is based on Symfony.&lt;br&gt;
Innomatic also provides a Business Application Framework for creating multi-tenant custom Enterprise applications with prebuilt features like ACL, roles/permissions, site-wide search engine, dashboard widgets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saascoreframeworkcom"&gt;
  &lt;/a&gt;
  Saascoreframework.com
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9meJItCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfmmpyeiu7fawxuafjsn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9meJItCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfmmpyeiu7fawxuafjsn.PNG" alt="Saascoreframework"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="http://www.saascoreframework.com/"&gt;Saascoreframework&lt;/a&gt; the saas core framework a multi-tenant framework that would support everything you would expect in a modern SaaS application including free trial setup, a multi-tenant database architecture, and different user roles. The SaaS Core Framework is a generic version of the underlying technology that supports PetSitClick which you can use to build your own SaaS application and save time.&lt;/p&gt;

&lt;p&gt;We hoped this article helped you find the best SaaS Boilerplate to use.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#image-by-garrhet-sampson-on-unsplash"&gt;
  &lt;/a&gt;
  &lt;em&gt;Image by Garrhet Sampson on &lt;a href="https://unsplash.com/"&gt;unsplash&lt;/a&gt;&lt;/em&gt;
&lt;/h6&gt;

</description>
      <category>saas</category>
      <category>boilerplate</category>
      <category>startup</category>
      <category>starterkit</category>
    </item>
    <item>
      <title>How to Maintain Your Skills as a Developer </title>
      <author>Ceora Ford</author>
      <pubDate>Thu, 13 May 2021 17:28:13 +0000</pubDate>
      <link>https://dev.to/ceeoreo/how-to-maintain-your-skills-as-a-developer-1e4e</link>
      <guid>https://dev.to/ceeoreo/how-to-maintain-your-skills-as-a-developer-1e4e</guid>
      <description>&lt;p&gt;It’s no secret that the tech industry is always changing. New frameworks are always emerging and new features are constantly being added to the languages and frameworks that already exist. This can be exciting but sometimes it can be hard to keep up. Some people work in environments that don’t welcome change. Not everyone’s team is looking to implement the latest innovation. &lt;/p&gt;

&lt;p&gt;Zachariah, CEO and CTO of &lt;a href="https://squadcast.fm/"&gt;SquadCast&lt;/a&gt;, had this experience. In &lt;a href="https://codesandbox.io/podcasts/version-one/Zachariah-Moreno-SquadCast"&gt;episode 3 of the Version One podcast&lt;/a&gt;, he talked about an experience he had early on in his career. He was in a position that didn’t allow for much growth. So how was he able to keep his coding skills up to par? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what I did was I used that time to contribute to open source projects, research, sharpen my skills, [to] kind of stay sharp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Zachariah mentioned, there are many things you can do to stay sharp. This post will explain 5 ways you can maintain and grow your coding skills. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-other-peoples-code"&gt;
  &lt;/a&gt;
  Read other people's code
&lt;/h2&gt;

&lt;p&gt;When it comes to getting better at a certain coding language or framework, we usually think that we need to work on some fancy, new project. While that isn't a bad idea, reading other people's code is another very helpful step. Reading other people's code can often be overlooked but it's a great way to familiarize yourself with new and old syntax and to test your ability to understand unfamiliar codebases. &lt;/p&gt;

&lt;p&gt;Where can you find projects to read through? A great place to start is GitHub. Check out your favorite open source projects and products. Casually read through the code and see what you can learn. Is there a feature that you're curious about? Try to find out how it was implemented. You can also search for projects by language. If there is a language you want to brush up on, you can check out some of the most popular &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#work-on-top-of-already-existing-code"&gt;
  &lt;/a&gt;
  Work on top of already existing code
&lt;/h2&gt;

&lt;p&gt;Work on existing projects. You can find your own projects and iterate on them, adding new features or changing the structure of your code. You can also search for open source projects on GitHub. Find a project that's in a language you would like to brush up on and find an issue you can tackle. If you're not quite comfortable with making open source contributions, you can either stick to your own existing projects or read this helpful, &lt;a href="https://codesandbox.io/post/how-to-make-your-first-open-source-contribution"&gt;step-by-step guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Working on existing code is great because it presents new challenges. You have to figure out code that may be deprecated or hard to understand, even if it’s your project. By doing this, you'll train yourself to navigate unfamiliar codebases. This is a very valuable skill to gain since oftentimes in professional settings, you’ll have to add to code that already exists instead of starting something from scratch. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#watch-other-people-code"&gt;
  &lt;/a&gt;
  Watch other people code
&lt;/h2&gt;

&lt;p&gt;Watch other people code on platforms like YouTube and Twitch. Through videos and live streams, you can see other developers code and problem solve out loud. You can follow their thought pattern and see how they fix and tackle bugs and other problems in their code. There’s so much you can gain from watching this process. You can learn new syntax, learn how to approach and solve problems, and learn how to implement new features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-coding-challenges"&gt;
  &lt;/a&gt;
  Do coding challenges
&lt;/h2&gt;

&lt;p&gt;Try completing coding challenges and exercises. There are tons of websites out there like &lt;a href="//hackerrank.com"&gt;HackerRank&lt;/a&gt; and &lt;a href="https://www.codewars.com/"&gt;CodeWars&lt;/a&gt; that present problems that you have to solve with your code stack of choice. These challenges are made to be short and to the point while also forcing you to solve complex problems. They’re a great way to stay sharp and keep up with any language. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-articles-about-code"&gt;
  &lt;/a&gt;
  Read articles about code
&lt;/h2&gt;

&lt;p&gt;There are tons of developer blogs out there. Developer blogs are full of gems. There’s so much you can learn from reading articles. If there’s a topic you want to learn more about, do a quick Google search or search on sites like &lt;a href="http://dev.to"&gt;dev.to&lt;/a&gt; for articles that can help. &lt;/p&gt;

&lt;p&gt;Reading articles written by other developers is another way to see how other people think and problem solve. As mentioned earlier, this is invaluable and can add to your skills and knowledge. So when you come across an article that covers a topic you’re interested in, take the time to read through it. And make note of any points that stood out to you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Tech moves fast but even so, growth can sometimes feel stagnant. If you feel like you’re at a standstill, try these tips. By doing these things, you’ll be able to stay sharp and grow your skills. There’s still more you can learn from Zachariah and his journey to becoming a CEO and CTO of SquadCast. Make sure to give his &lt;a href="https://codesandbox.io/podcasts/version-one/Zachariah-Moreno-SquadCast"&gt;Version One episode&lt;/a&gt; a listen to find out more!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4MJ9C6HYscUi8UiOsMl2Ej"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Ignite — React Native Boilerplate</title>
      <author>kpiteng</author>
      <pubDate>Thu, 13 May 2021 16:39:24 +0000</pubDate>
      <link>https://dev.to/kpiteng/ignite-react-native-boilerplate-37po</link>
      <guid>https://dev.to/kpiteng/ignite-react-native-boilerplate-37po</guid>
      <description>&lt;p&gt;Discover Ignite — React Native Boilerplate for Expo &amp;amp; React Native, explore pre-setup libraries like React Navigation, MobX, APISauce, Flipper, Reactotron, i18N-js Localisation, Themes and many more.&lt;/p&gt;

&lt;p&gt;Quick Highlights — Ignite is popular React Native Boilerplate for Expo &amp;amp; React Native. Ignite saved two to four weeks time of React Native project creation, project setup, required dependency installation like Navigation, MobX, API Call, Utility and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ignite-boilerplate-includes-"&gt;
  &lt;/a&gt;
  Ignite — Boilerplate Includes -
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React Navigation (Native)&lt;/li&gt;
&lt;li&gt;MobX State Tree (State Management)&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;APISauce (REST API Interaction)&lt;/li&gt;
&lt;li&gt;Storybook&lt;/li&gt;
&lt;li&gt;i18N-JS Localisation&lt;/li&gt;
&lt;li&gt;Themes&lt;/li&gt;
&lt;li&gt;Reactotron Ready&lt;/li&gt;
&lt;li&gt;Flipper&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#take-away-"&gt;
  &lt;/a&gt;
  Take away -
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is React Native Navigation?&lt;/li&gt;
&lt;li&gt;What is MobX — MobX State Tree?&lt;/li&gt;
&lt;li&gt;What is TypeScript in React Native?&lt;/li&gt;
&lt;li&gt;What is APISauce in React Native?&lt;/li&gt;
&lt;li&gt;What is Flipper in React Native?&lt;/li&gt;
&lt;li&gt;What is Storybook in React Native?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-app-with-ignite-boilerplate-"&gt;
  &lt;/a&gt;
  Create App With Ignite Boilerplate —
&lt;/h2&gt;

&lt;p&gt;Create React Native App with Ignite is quite simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# for vanilla React Native
npx ignite-cli new PizzaApp

# or for Expo-powered:
npx ignite-cli new PizzaApp --expo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ignite-boilerplate-folder-hierarchy-"&gt;
  &lt;/a&gt;
  Ignite Boilerplate — Folder Hierarchy —
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ignite-project
├── android (if not Expo)
├── ios (if not Expo)
├── app
│   ├── components
│   ├── i18n
│   ├── models
│   ├── navigators
│   ├── screens
│   ├── services
│   ├── theme
│   ├── utils
│   ├── app.tsx
|   ├── assets/fonts/
├── storybook
│   ├── views
│   ├── index.ts
│   ├── storybook-registry.ts
│   ├── storybook.ts
├── test
│   ├── __snapshots__
│   ├── storyshots.test.ts.snap
│   ├── mock-i18n.ts
│   ├── mock-reactotron.ts
│   ├── setup.ts
│   ├── storyshots.test.ts
├── e2e
│   └── config.json
├── ignite
│   └── templates
├── index.js
├── package.json
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#react-navigation-"&gt;
  &lt;/a&gt;
  React Navigation —
&lt;/h2&gt;

&lt;p&gt;React Navigation is popular library for Navigating between multiple components. React Navigation manage your application navigational stack. React Navigation has three libraries StackNavigator, Drawer Navigator, TabNavigator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# npm 

npm install @react-navigation/native
npm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;StackNavigator&lt;/strong&gt; - Use while navigating from one component to another component. You can use push, pop, goBack, many more actions while you want navigation functionality between screens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawer Navigator&lt;/strong&gt; - Drawer Navigator helps while you have multiple menu on side menu and each menu has multiple screens. So you can shift all your main menus into Drawer and press on any Drawer Option it will open specific screen/component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tab Navigator&lt;/strong&gt; - Tab Navigator helps while you want to give multiple menu option at bottom and each menu has multiple screens. Each Bottom Menu option has specific screen/component.&lt;/p&gt;

&lt;p&gt;You can do additional steps over here, Instead of giving Component/Screen to specific TabNavigator option, you can assign StackNavigator so you can manage your state of each TabNavigator option independently. Advantage of doing this, if you traverse 1..3 Screen in TabNavigatorMenuOption1, and you change to TabNavigatorMenuOption2 and traverse to 1…5 Screen and go back to TabNavigatorMenuOption1 then you can see 3 Screen which you left in TabNavigatorMenuOption1, instead of Starting from Screen1.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobx-state-tree-"&gt;
  &lt;/a&gt;
  MobX State Tree —
&lt;/h2&gt;

&lt;p&gt;MobX is a popular state management library in React Native. MobX store feature allow to save, update and restore application state that uses by react component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import observable from mobx
import { observable } from "mobx";

//create a store with count observable
class Store {
  @observable
  count = 0;
}

//export Store
export default new Store();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Typescript —&lt;br&gt;
Typescript is widely used programming language next to Javascript. Many of popular libraries are now available in Typescript because of simplified experience of type checking, error checking before developer run the code and help to reduce the code errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i18n-react-native-localisation-"&gt;
  &lt;/a&gt;
  i18N, React Native Localisation —
&lt;/h2&gt;

&lt;p&gt;i18n-js is popular localisation library with various features like, Pluralization, Date/Time localisation, Number Localisation, Local fallback, Asset pipeline support and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apisauce-"&gt;
  &lt;/a&gt;
  APISauce —
&lt;/h2&gt;

&lt;p&gt;APISauce is a JavaScript library for REST API Integration. Ignite has well-framed structure for APISauce. Ignite Boilerplate simplified API Call by dividing business logic among multiple files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;api-config.js&lt;/strong&gt; This file contain BaseURL definition, APIConfig Interface and Export Of API Configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;api-problem.js&lt;/strong&gt; This file contain code logic for various errors management along with custom messages, like 401, 402, 404. You can also customised according your need and set error message accordingly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;api.ts&lt;/strong&gt; This file contain apisauce instance setup, apiconfig and business login for API Call. You can create multiple various of same file as per your modules, like Home, Settings, Menu, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;api.types.ts&lt;/strong&gt; This file contain List of interface used by various modules for API call. This will help developers to define api response along with data types at central place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theme-fonts-color-"&gt;
  &lt;/a&gt;
  Theme | Fonts | Color —
&lt;/h2&gt;

&lt;p&gt;This folder hierarchy contain common initialisation for color, spacing, timing, fonts and all. You can create your own file for common theme related constants.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storybook-"&gt;
  &lt;/a&gt;
  Storybook —
&lt;/h2&gt;

&lt;p&gt;Storybook is a tool for UI development. It makes development faster and easier by isolating components. This allows you to work on one component at a time. You can develop entire UIs without needing to start up a complex dev stack, force certain data into your database, or navigate around your application.&lt;/p&gt;

&lt;p&gt;Connect Us —&lt;br&gt;
KPITENG - DIGITAL TRANSFORMATION&lt;br&gt;
&lt;a href="//www.kpiteng.com"&gt;www.kpiteng.com&lt;/a&gt; | &lt;a href="mailto:hello@kpiteng.com"&gt;hello@kpiteng.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/kpiteng"&gt;Facebook&lt;/a&gt; | &lt;a href="https://www.linkedin.com/company/kpiteng"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Why C++ is most preferred for competitive programming?</title>
      <author>Rishabh Dwivedi</author>
      <pubDate>Thu, 13 May 2021 16:27:16 +0000</pubDate>
      <link>https://dev.to/rishabh062/why-c-is-most-preferred-for-competitive-programming-8nk</link>
      <guid>https://dev.to/rishabh062/why-c-is-most-preferred-for-competitive-programming-8nk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#competitive-coding-is-like-a-mind-sport-where-you-run-your-brain-and-apply-logic-for-solving-questions"&gt;
  &lt;/a&gt;
  Competitive coding is like a mind sport where you run your brain and apply logic for solving questions.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;But I guess you always struck with a questions that why maximum programmers preferred &lt;em&gt;C++&lt;/em&gt; for doing so&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vF3H5p6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a0vnuw8ozrd6i7zvdrt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vF3H5p6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a0vnuw8ozrd6i7zvdrt.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#here-are-the-reasons"&gt;
  &lt;/a&gt;
  Here are the reasons.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It offers a library called STL (Standard Template Library). STL is a collection of C++ template classes that provides common data structures and functions.&lt;/li&gt;
&lt;li&gt;C++ is a Object Oriented Programming language as well as Procedural Oriented Programming language. Which make it so easy to use on given conditions. &lt;/li&gt;
&lt;li&gt;C++ is little faster as compare to others languages like &lt;strong&gt;Python&lt;/strong&gt; or &lt;strong&gt;Java&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Writing functions in C++ is more easy and efficient as compare to java , while writing functions in Python is also efficient but major factor to analyse is speed.&lt;/li&gt;
&lt;li&gt;Implementing &lt;em&gt;Data structures&lt;/em&gt; is quite easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#c-is-totally-a-beginner-friendly-language-which-seems-to-be-very-addictive-once-you-fall-in-love-with-it"&gt;
  &lt;/a&gt;
  C++ is totally a beginner friendly language which seems to be very addictive once you fall in love with it.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#thats-a-short-introduction-about-it-hope-you-find-it-useful"&gt;
  &lt;/a&gt;
  That's a short introduction about it hope you find it useful.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rishabh Dwivedi&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3 star codechef.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>watercooler</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why Vercel &amp; Next are a dream team</title>
      <author>Nine</author>
      <pubDate>Thu, 13 May 2021 16:15:19 +0000</pubDate>
      <link>https://dev.to/codesnine/vercel-next-h4f</link>
      <guid>https://dev.to/codesnine/vercel-next-h4f</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-is-vercel"&gt;
  &lt;/a&gt;
  What is Vercel?
&lt;/h4&gt;

&lt;p&gt;​Vercel is a deployment and collaboration platform &lt;strong&gt;for frontend developers&lt;/strong&gt;. ​Vercel puts the frontend developer first, giving them comprehensive tools to build high-performance websites and applications.&lt;/p&gt;

&lt;p&gt;​Vercel enables developers to host websites and web services that deploy instantly and scale automatically – all without any configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3r02hPzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tqlohxn9ji79m706w5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3r02hPzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tqlohxn9ji79m706w5j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-nextjs"&gt;
  &lt;/a&gt;
  What is NextJS?
&lt;/h4&gt;

&lt;p&gt;Next is a React Framework that gives you the best developer experience with all the features you need for production: hybrid static &amp;amp; server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRuFCF2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6l2uny3q0ij34nyd6ebb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRuFCF2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6l2uny3q0ij34nyd6ebb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#next-and-vercel-the-incredible-duo"&gt;
  &lt;/a&gt;
  Next and Vercel - The Incredible Duo
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The Easiest Way to Deploy Next.js Apps&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel, built by the same team that made Next.js, provides production-grade hosting for Next.js websites with zero configuration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After experiencing how easy it is to get up and running with these two well integrated, the developer can get a continuous deployment setup with a repo as easy as with a few clicks on the screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It gives us a vast amount of templates to choose from directly from the &lt;a href="https://vercel.com/new/templates"&gt;Vercel&lt;/a&gt; page such as:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6zz4sT2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsr1chcm7xgew2vhybuz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6zz4sT2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsr1chcm7xgew2vhybuz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is one of the most pleasant development experiences I have had so far. Bought a domain through their site for 20$ easily set it up and had a running homepage in one minute with continuous deployment when I push a change to the selected branch.&lt;/p&gt;

&lt;p&gt;I have to say using these two together has shown me how fun sometimes development can be when you get to choose the tools you wanna use and you get that AHA moment that you found your stack.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h4&gt;

&lt;p&gt;I am still new to this platform but I am keen and happy to explore it, thinking about what great apps I can build with such a great developer experience. &lt;/p&gt;

&lt;p&gt;If someone has any tips for me concerning these two let me know in the comments below.&lt;/p&gt;

&lt;p&gt;Follow me on Twitter at &lt;a href="https://twitter.com/CodesNine"&gt;@CodesNine&lt;/a&gt; and on Instagram at &lt;a href="https://www.instagram.com/nine_codes"&gt;@nine_codes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>vercel</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>DEBS Grand Challenge: Real-Time Stream Processing with YoMo</title>
      <author>C.C.</author>
      <pubDate>Thu, 13 May 2021 16:10:18 +0000</pubDate>
      <link>https://dev.to/fanweixiao/debs-grand-challenge-real-time-stream-processing-with-yomo-p8i</link>
      <guid>https://dev.to/fanweixiao/debs-grand-challenge-real-time-stream-processing-with-yomo-p8i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dl.acm.org/conference/debs"&gt;DEBS&lt;/a&gt; or the &lt;strong&gt;ACM International Conference on Distributed Event Based Systems&lt;/strong&gt; aims to "provide a forum dedicated to the dissemination of original research, the discussion of practical insights, and the reporting of experiences relevant to event based computing that were previously scattered across several scientific and professional communities" (&lt;a href="http://www.wikicfp.com/cfp/servlet/event.showcfp?eventid=34432"&gt;reference&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://debs.org/grand-challenges/2014/"&gt;The DEBS 2014 Grand Challenge - Smart Grid&lt;/a&gt; is the 8th ACM International Conference on Distributed Event Based Systems, focused on two problems which are relevant to the industry: &lt;em&gt;real-time load prediction&lt;/em&gt; and &lt;em&gt;anomaly detection&lt;/em&gt;. The data for the challenge was collected from a number of smart-home installations deployed in Germany.&lt;/p&gt;

&lt;p&gt;In traditional processing, data is often stored in the database at first, and then processed to obtain useful information at a secondary stage. The traditional architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--otZPPCF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nexs1cfv5byufn8g292z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otZPPCF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nexs1cfv5byufn8g292z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, with stream processing, we're swiftly able to run real-time analytics on incoming data streams. By utilizing Yomo, an open-source serverless stream processing framework, we can address DEBS' challenge in a real-time fashion:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUGnZI5N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwnmu5m0kx84kbnj1iiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUGnZI5N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwnmu5m0kx84kbnj1iiz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firstly, we will take a look at the type of data we're dealing with. Next, we will introduce two queries that were originally proposed by ACM DEBS. Lastly, we install &lt;a href="http://github.com/yomorun/yomo"&gt;YoMo&lt;/a&gt; (an open-source framework for real-time stream processing) to implement both queries as described.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  Data
&lt;/h2&gt;

&lt;p&gt;From Jerzak and Ziekow (2014):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For the DEBS 2014 Grand Challenge we assume a hierarchical structure with a house, identified by a unique house id, being the topmost entity. Every house contains one or more households, identified by a unique household id (within a house). Every household contains one or more smart plugs, each identified by a unique plug id (within a household). Every smart plug contains exactly two sensors:&lt;br&gt;
(1) &lt;u&gt;load&lt;/u&gt; sensor measuring current load with Watt as unit (2) &lt;u&gt;work&lt;/u&gt; sensor measuring total accumulated work since the start (or reset) of the sensor with kWh as unit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The input stream is defined as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; – a unique identifier of the measurement [32 bit unsigned int]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;timestamp&lt;/code&gt; – timestamp of measurement [32 bit unsigned int]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt; – the measurement [32 bit float]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;property&lt;/code&gt; – type of the measurement: 0 for work or 1 for load [boolean]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;plug_id&lt;/code&gt; – a unique identifier (within a household) of the smart plug [32 bit unsigned int]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;household_id&lt;/code&gt; – a unique identifier of a household (within a house) where the plug is located [32 bit unsigned int]&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;house_id&lt;/code&gt; – a unique identifier of a house where the household with the plug is located [32 bit unsigned int]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complete data file is available under &lt;a href="http://www.doc.ic.ac.uk/~mweidlic/sorted.csv.gz"&gt;this link&lt;/a&gt;. For demonstration purposes, we will generate mock data using this file. In real life, we should be dealing with direct sensor data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#queries"&gt;
  &lt;/a&gt;
  Queries
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Load Prediction&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's divide the whole period from &lt;code&gt;t_{start} = 1377986401&lt;/code&gt; to &lt;code&gt;t_{end} = 1380578399&lt;/code&gt; covered by the dataset into &lt;code&gt;N&lt;/code&gt; equal slices of &lt;code&gt;|s|&lt;/code&gt; seconds and call them &lt;code&gt;s_0&lt;/code&gt;, &lt;code&gt;s_1&lt;/code&gt;, &lt;code&gt;s_2&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;The average load for slice &lt;code&gt;s_{i + 2}&lt;/code&gt; is given by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;L(s_{i + 2}) = ( avgLoad(s_i) + median({ avgLoad(s_j) }) ) / 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;s_j&lt;/code&gt; is a nonempty set defined by &lt;code&gt;s_(i + 2 – n * k)&lt;/code&gt;, where &lt;code&gt;k&lt;/code&gt; is the number of slices within a 24-hour period and &lt;code&gt;n&lt;/code&gt; is a natural number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;floor((i + 2) / k)&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Outliers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For this query, we will compute the percentage of plugs that have a median load during the last hour greater than the median load of all plugs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yomo-what-is-it-and-why-do-we-use-it"&gt;
  &lt;/a&gt;
  YoMo – what is it and why do we use it?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/yomorun/yomo"&gt;YoMo&lt;/a&gt; is an open-source serverless streaming framework for building low-latency edge computing applications. Built atop QUIC transport protocol and functional reactive programming interface, it makes real-time data processing reliable, secure, and easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Follow the instructions &lt;a href="https://yomo.run/?utm_source=blog&amp;amp;utm_campaign=cc"&gt;here&lt;/a&gt; to install YoMo. Assuming that &lt;code&gt;$GOPATH&lt;/code&gt; has been set on your device, you should be able to see a directory with the name &lt;code&gt;$GOPATH/src/github.com/yomorun/yomo&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the following commands to create a new project. Don't forget to replace &lt;code&gt;${YOUR_GITHUB_USERNAME}&lt;/code&gt; with your actual GitHub username!&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; &lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/src/github.com/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;YOUR_GITHUB_USERNAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;yomo init debs-flow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;$GOPATH/src/github.com/${YOUR_GITHUB_USERNAME}&lt;/code&gt;. It should have the following structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```shell
.
└── debs-flow
    ├── app.go
    ├── go.mod
    ├── go.sum
    └── sl.so
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be focusing on the &lt;code&gt;Handler&lt;/code&gt; function in &lt;code&gt;app.go&lt;/code&gt;, which defines how we want the input stream to be processed.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Git clone the &lt;a href="https://github.com/yomorun/yomo-source-example"&gt;&lt;code&gt;yomo-source-example&lt;/code&gt; repository&lt;/a&gt;. For clarity, we will call it &lt;code&gt;debs-source&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone git@github.com:yomorun/yomo-source-example.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a file named &lt;code&gt;workflow.yaml&lt;/code&gt; with the following content. Place it under &lt;code&gt;debs-source&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;service&lt;/span&gt;
&lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
&lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9000&lt;/span&gt;
&lt;span class="na"&gt;flows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;debs &lt;/span&gt;&lt;span class="m"&gt;2014&lt;/span&gt;
    &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4242&lt;/span&gt;
&lt;span class="na"&gt;sinks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mock db&lt;/span&gt;
    &lt;span class="s"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;
    &lt;span class="s"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4243&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure the &lt;code&gt;$GOPATH/src/github.com/${YOUR_GITHUB_USERNAME}&lt;/code&gt; directory contains the following files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```shell
.
├── debs-flow
│   ├── app.go
│   ├── go.mod
│   ├── go.sum
│   └── sl.so
└── debs-source
    ├── go.mod
    ├── go.sum
    ├── main.go
    └── workflow.yaml
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#algorithm-implementation"&gt;
  &lt;/a&gt;
  Algorithm Implementation
&lt;/h2&gt;

&lt;p&gt;By default, the &lt;code&gt;Handler&lt;/code&gt; function in &lt;code&gt;debs-flow/app.go&lt;/code&gt; should look as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rxstream&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RxStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RxStream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rxstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;OnObserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Subscribe(0x10)&lt;/code&gt;: Subscribe to the input stream. &lt;code&gt;0x10&lt;/code&gt; is the key. It is defined in &lt;code&gt;debs-source/main.go&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;OnObserve(decoder)&lt;/code&gt;: Decode &lt;code&gt;[]byte&lt;/code&gt; to &lt;code&gt;interface{}&lt;/code&gt;. Empty interfaces are often used by code that handles values of unknown type.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Map(printer)&lt;/code&gt;: Print out the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For query #1, we need to define two functions in addition to what we discussed above. We will call them &lt;code&gt;average&lt;/code&gt; and &lt;code&gt;predict&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rxstream&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RxStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RxStream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rxstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;OnObserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;BufferWithTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1e3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="c"&gt;// ss stands for slice size&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// compute the average load for each plug and save the values to db, which is a global variable in this example&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// convert interface{} to []interface{}&lt;/span&gt;
    &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"expected type '[]interface{}', got '%v' instead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[average] %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// plug # -&amp;gt; value&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// convert interface{} to measurement&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Measurement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"expected type 'measurement', got '%v' instead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[average] %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Property&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;// load&lt;/span&gt;
            &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;
            &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;1.0&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// save to db&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*** average ***"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[s_%v] %v %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;avg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;avg&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"***************"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// make predictions based on what we have in db&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*** predict ***"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"not enough data"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// possible values for j&lt;/span&gt;
        &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;
            &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// average load for s_j&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;pred&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[s_%v] %v %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"***************"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="c"&gt;// slice #&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For query #2, we will define a function called &lt;code&gt;outliers&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rxstream&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RxStream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RxStream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rxstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;OnObserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;BufferWithTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1e3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outliers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0x11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// which plugs have a median load greater than the median load of all plugs?&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;outliers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// convert interface{} to []interface{}&lt;/span&gt;
    &lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"expected type '[]interface{}', got '%v' instead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[outliers] %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;indiv&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="kt"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// plug # -&amp;gt; values&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;lst&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// convert interface{} to measurement&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Measurement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"expected type 'measurement', got '%v' instead"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[outliers] %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Property&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;// load&lt;/span&gt;
            &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;plug&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;indiv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indiv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"all plugs: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*** outliers ***"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vs&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;indiv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[w_%v] %v %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"****************"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to run the code, we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;debs-flow&lt;/code&gt; and type&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yomo run app.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;debs-source&lt;/code&gt; and type&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yomo wf run workflow.yaml
&lt;span class="nv"&gt;$ PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;9000 go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You might want to try a different set of hyperparameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;For query #1, you should see something similar to the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
[1620461050] 9.910085 0-1-2 load
[1620461050] 8.087268 0-1-2 work
[1620461050] 13.468374 3-1-2 load
[1620461050] 7.742124 3-1-2 work
[1620461051] 13.738256 0-1-2 load
[1620461051] 16.59261 0-1-2 work
[1620461051] 12.84997 3-1-2 load
[1620461051] 10.838872 3-1-2 work
*** average ***
[s_18] 0-1-2 11.824171
[s_18] 3-1-2 13.159172
***************
*** predict ***
[s_20] 0-1-2 10.375039
[s_20] 3-1-2 12.0406475
***************
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For query #2, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
[1620461271] 6.921172 0-1-2 load
[1620461271] 1.8683584 0-1-2 work
[1620461271] 17.251171 3-1-2 load
[1620461271] 9.761936 3-1-2 work
[1620461272] 10.758014 0-1-2 load
[1620461272] 18.668419 0-1-2 work
[1620461272] 5.806175 3-1-2 load
[1620461272] 1.8562717 3-1-2 work
[1620461273] 0.11624338 0-1-2 load
[1620461273] 5.579194 0-1-2 work
[1620461273] 17.249205 3-1-2 load
[1620461273] 4.9580107 3-1-2 work
[1620461274] 8.087428 0-1-2 load
[1620461274] 7.49426 0-1-2 work
[1620461274] 4.6709924 3-1-2 load
[1620461274] 1.793222 3-1-2 work
[1620461275] 4.8114495 0-1-2 load
[1620461275] 1.9070174 0-1-2 work
[1620461275] 19.199306 3-1-2 load
[1620461275] 9.054778 3-1-2 work
all plugs: 7.5043
*** outliers ***
[s_5] 3-1-2 17.249205
****************
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#about-author"&gt;
  &lt;/a&gt;
  About Author
&lt;/h2&gt;

&lt;p&gt;Ivy Guo is a Computer Science student at the University of Washington. If you have any questions, please email Ivy at &lt;a href="mailto:zhifeig@cs.washington.edu"&gt;zhifeig@cs.washington.edu&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Rohit Gupta, Rinku Shah, and Apurva Mhetre. 2014. In-Memory, High Speed Stream Processing. In &lt;em&gt;Proceedings of the 8th ACM International Conference on Distributed Event-Based Systems&lt;/em&gt; (&lt;em&gt;DEBS '14&lt;/em&gt;). Association for Computing Machinery, New York, NY, USA, 306–309. DOI: &lt;a href="https://doi.org/10.1145/2611286.2611332"&gt;https://doi.org/10.1145/2611286.2611332&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Abhinav Sunderrajan, Heiko Aydt, and Alois Knoll. 2014. Real-Time Load Prediction and Outliers Detection using STORM. DEBS 2014 - &lt;em&gt;Proceedings of the 8th ACM International Conference on Distributed Event-Based Systems&lt;/em&gt;. 10.1145/2611286.2611327. &lt;a href="https://www.researchgate.net/publication/262419725_DEBS_Grand_Challenge_Real_time_Load_Prediction_and_Outliers_Detection_using_STORM"&gt;ResearchGate&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ACM DEBS Grand Challenge 2014 implementation using Apache Flink: &lt;a href="https://github.com/koldbyte/smartgrid"&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DEBS '14: Proceedings of the 8th ACM International Conference on Distributed Event-Based Systems &lt;a href="https://dl.acm.org/doi/proceedings/10.1145/2611286"&gt;all research papers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Zbigniew Jerzak and Holger Ziekow. 2014. The DEBS 2014 grand challenge. In &lt;em&gt;Proceedings of the 8th ACM International Conference on Distributed Event-Based Systems&lt;/em&gt; (&lt;em&gt;DEBS '14&lt;/em&gt;). Association for Computing Machinery, New York, NY, USA, 266–269. DOI: &lt;a href="https://doi.org/10.1145/2611286.2611333"&gt;https://doi.org/10.1145/2611286.2611333&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#more-about-yomo"&gt;
  &lt;/a&gt;
  More about YoMo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/yomorun/yomo"&gt;https://github.com/yomorun/yomo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>iot</category>
      <category>opensource</category>
      <category>yomo</category>
    </item>
    <item>
      <title>Amazing Window Object With JS (Part 1)</title>
      <author>Nikhil Bobade </author>
      <pubDate>Thu, 13 May 2021 15:56:47 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-window-object-with-js-part-1-2738</link>
      <guid>https://dev.to/nikhil27b/amazing-window-object-with-js-part-1-2738</guid>
      <description>&lt;h1&gt;
  &lt;a href="#window-object-"&gt;
  &lt;/a&gt;
  Window Object :
&lt;/h1&gt;

&lt;p&gt;The window object represents an open window in a browser. The window object is very useful in javascript also you can do many things with the window object.&lt;br&gt;
We have many properties in the window object. An object of the window is created automatically by the browser.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#1window-confirm-"&gt;
  &lt;/a&gt;
  1.Window Confirm :
&lt;/h5&gt;

&lt;p&gt;Window confirm is used for displays a dialog box with a specified message, along with an OK and a Cancel button.&lt;br&gt;
A confirm box is often used if you want the user to verify or accept something.&lt;/p&gt;

&lt;p&gt;Example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;confirm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Press the button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3cRTT5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wd8dbt4h7aevreno9btn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3cRTT5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wd8dbt4h7aevreno9btn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#2window-focus-"&gt;
  &lt;/a&gt;
  2.Window focus :
&lt;/h5&gt;

&lt;p&gt;The window focus method is also used to focus the thing in the browsers or website.&lt;br&gt;
Means for example you want to focus on a specific thing or tracking purpose so you can be use window focus.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;width=200, height=100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   
&lt;span class="nx"&gt;myWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;p&amp;gt;A new window!&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;         
&lt;span class="nx"&gt;myWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VImGxuhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f8m9b1idc44zn1mmhab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VImGxuhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6f8m9b1idc44zn1mmhab.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#3window-local-storage"&gt;
  &lt;/a&gt;
  3.Window Local Storage:
&lt;/h5&gt;

&lt;p&gt;The localStorage is also a window property this is very useful to store data in the browser and sessionStorage properties allow saving key/value pairs in a web browser.&lt;/p&gt;

&lt;p&gt;The localStorage object stores data with no expiration date. The data will not be deleted when the browser is closed and will be available the next day, week, or year.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#4window-getcomputedstyle"&gt;
  &lt;/a&gt;
  4.Window getComputedStyle:
&lt;/h5&gt;

&lt;p&gt;The getComputedStyle() is a very useful property i also use this propety a lot getComputedStyle() is gets all the actual (computed) CSS property and values of the specified element.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2bqJ-BEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kd3kokei93f6q6vi22e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bqJ-BEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kd3kokei93f6q6vi22e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#5window-print"&gt;
  &lt;/a&gt;
  5.Window Print:
&lt;/h5&gt;

&lt;p&gt;The window print is a very important and useful dom element in the javascript. The print() method prints the contents of the current window.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-dk_UHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05p8oellocvsqa10hdk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-dk_UHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05p8oellocvsqa10hdk5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Regex: Fix duplicate slashes without affecting protocol</title>
      <author>Matt Kenefick</author>
      <pubDate>Thu, 13 May 2021 15:34:48 +0000</pubDate>
      <link>https://dev.to/mattkenefick/regex-fix-duplicate-slashes-without-affecting-protocol-2dbl</link>
      <guid>https://dev.to/mattkenefick/regex-fix-duplicate-slashes-without-affecting-protocol-2dbl</guid>
      <description>&lt;p&gt;Let’s say you want to fix a URL that looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.example.com/my/path//to-file.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using a string replace or a simple regex could incorrectly “fix” the double slashes following the protocol. We can fix that by using a negative lookbehind.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(?&amp;lt;!:)/+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-php"&gt;
  &lt;/a&gt;
  For PHP:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
$url = 'https://www.example.com/my/path//to-file.jpg';
$str = preg_replace('#(?&amp;lt;!:)/+#im', '/', $url);
// https://www.example.com/my/path/to-file.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-javascript"&gt;
  &lt;/a&gt;
  For Javascript:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let url = 'https://www.example.com/my/path//to-file.jpg';
url.replaceAll(/(?&amp;lt;!:)\/+/gm, '/');
// "https://www.example.com/my/path/to-file.jpg"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>php</category>
      <category>javascript</category>
      <category>regex</category>
    </item>
    <item>
      <title>How to connect React js with Django</title>
      <author>Shivam Rohilla</author>
      <pubDate>Thu, 13 May 2021 15:33:39 +0000</pubDate>
      <link>https://dev.to/shivamrohilllaa/how-to-connect-react-js-with-django-3pj4</link>
      <guid>https://dev.to/shivamrohilllaa/how-to-connect-react-js-with-django-3pj4</guid>
      <description>&lt;p&gt;Hello Everyone, in this post you'll learn how to connect react js with Django in simple steps.&lt;br&gt;
As you guys know React js is a very powerful and famous frontend js library and some people suggest react as a framework. &lt;/p&gt;

&lt;p&gt;Today we connect react js with one of the most powerful backend framework Django. &lt;/p&gt;

&lt;p&gt;Step1:- Create a django project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step2:- Now Create a virtual environment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;virtualenv envrec
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step3:- Install Django Rest Framework in a virtual environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install django djangorestframework
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step4:- Now make a frontend app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startapp frontend 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step5:- Now add this app and rest framework in Installed Apps:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTALLED_APPS = [

    'rest_framework',
    'frontend',
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step6:- Now write some URLs in your project urls.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('frontend.urls')),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step7:- Now create some urls in your app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path
from . import views

urlpatterns = [
    path('', views.index)
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step8:- Now write a basic command in your app views.py file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.shortcuts import render
def index(request):
    return render(request, 'build/index.html')
python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now finally run this command and your Django project start running on your localhost server&lt;/p&gt;

&lt;p&gt;Now we set up react project.&lt;/p&gt;

&lt;p&gt;for Setting up a react project install Node js and some other requirements in your pc.&lt;/p&gt;

&lt;p&gt;Open a terminal and run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command your project will be created successfully.&lt;/p&gt;

&lt;p&gt;Now run the react project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Final Steps for connection.&lt;br&gt;
Write the react app path in settings.py DIR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'DIRS': [os.path.join(BASE_DIR, '../frontend')],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and for serving static files paste this command at the bottom in settings.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '../frontend/build/static'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;that's it. your settings and connection is done now run the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>django</category>
      <category>react</category>
      <category>python</category>
    </item>
    <item>
      <title>Releases of Perl distribution of Crypt::OpenSSL::X509 1.904 and 1.905 - a story about epic failure </title>
      <author>jonasbn</author>
      <pubDate>Thu, 13 May 2021 15:25:07 +0000</pubDate>
      <link>https://dev.to/jonasbn/releases-of-perl-distribution-of-crypt-openssl-x509-1-904-and-1-905-a-story-about-epic-failure-1810</link>
      <guid>https://dev.to/jonasbn/releases-of-perl-distribution-of-crypt-openssl-x509-1-904-and-1-905-a-story-about-epic-failure-1810</guid>
      <description>&lt;p&gt;I have for some time been the maintainer of the Perl distribution: &lt;a href="https://metacpan.org/pod/Crypt::OpenSSL::X509"&gt;Crypt::OpenSSL::X509&lt;/a&gt;. The implementation is a wrapper on the OpenSSL C libraries, relying on XS.&lt;/p&gt;

&lt;p&gt;I took over the maintenance from Dan Sully, because we where using the distribution at work and it need some maitaining. O am not a C-programmer, XS &lt;em&gt;wizard&lt;/em&gt; or compiler expert - anyway I thought I could learn something from taking on the maintainer role.&lt;/p&gt;

&lt;p&gt;Over time I have made releases, when there was something obvious or somebody sent PRs to &lt;a href="https://github.com/dsully/perl-crypt-openssl-x509"&gt;the repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Way too seldom, I would check the CPAN testers reports to see how things were going, but a few weeks ago I was bored and I did.&lt;/p&gt;

&lt;p&gt;The current release at the time was 1.903 and &lt;a href="http://matrix.cpantesters.org/?dist=Crypt-OpenSSL-X509%201.903"&gt;the test results&lt;/a&gt; were not look too impressive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6ab5gzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50q88q0oi2mmainbwjbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6ab5gzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50q88q0oi2mmainbwjbp.png" alt="Test reports 1.903"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I checked some of them out and set out to address some of the issues I observed. The first one was a broken build on OpenBSD and FreeBSD.&lt;/p&gt;

&lt;p&gt;As I mentioned:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I am not a compiler expert - check me out&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;error: nonnull parameter 'pv' will evaluate to 'true' on first encounter [-Werror,-Wpointer-bool-conversion]
if (pv &amp;amp;&amp;amp; len &amp;gt; 1) {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cpantesters.org/cpan/report/119b4298-9e42-11eb-84bc-edd243e66a77"&gt;Example 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cpantesters.org/cpan/report/77bdcdd2-a0e7-11eb-84bc-edd243e66a77"&gt;Example 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cpantesters.org/cpan/report/fd7e66b6-a14b-11eb-84bc-edd243e66a77"&gt;Example 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I read up on the issue and it seemed Perl 5.20 had an issue with this so I wanted to re-categorize it to a warning from an error for Perl versions below 5.20.0&lt;/p&gt;

&lt;p&gt;Believe me, this required a lot of &lt;em&gt;googling&lt;/em&gt;, reading and I did a lot of installation and testing with different Perl versions (luckily the issue was easily reproduced).&lt;/p&gt;

&lt;p&gt;When I understood the issue, I was able to find &lt;a href="https://stackoverflow.com/questions/35797295/clang-how-to-disable-werror-wpointer-bool-conversion"&gt;a good article on StackOverflow&lt;/a&gt;, with what I thought would be a remedy.&lt;/p&gt;

&lt;p&gt;Implemented and shipped release 1.904.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Boom, bam, bop Bada-bop-boom, pow!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That did not work out particularly well - I actually made the situation worse and completely broke the build for Linux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lA9byf2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bz5ss653wdmivh1n6zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lA9byf2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bz5ss653wdmivh1n6zq.png" alt="Test reports 1.904"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apparently GCC and LLVM are very different and I had introduced the use of an option, which is LLVM specific and is not understood by GCC.&lt;/p&gt;

&lt;p&gt;More &lt;em&gt;googling&lt;/em&gt; and reading and I found some good resources on the two compilers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://clang.llvm.org/docs/DiagnosticsReference.html"&gt;"Diagnostic flags in Clang"&lt;/a&gt; from Clang 13 documentation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html"&gt;"3.8 Options to Request or Suppress Warnings"&lt;/a&gt; for GCC&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html"&gt;"3.1 Option Summary"&lt;/a&gt; for GCC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got everything restructurized and got release 1.905 shipped and this time it looked much better...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JWsMJqZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ydswe73gpdlhs32ystk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JWsMJqZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ydswe73gpdlhs32ystk.png" alt="Test reports 1.905"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are more compiler issues I want to address, but I will most certainly be more careful in the future, just fooling around with the code surrounding your main product can be just as destructive and hence stressful and time consuming.&lt;/p&gt;

&lt;p&gt;We are now back on track and I have since shipped releases 1.9.6 and 1.9.7 and things are back to slowly improving.&lt;/p&gt;

&lt;p&gt;I tend to do micro releases and I am seriously considering extending my toolbox locally with a Linux machine, so I get more perspective on things with a better feedback loop while developing.&lt;/p&gt;

&lt;p&gt;Improving continuous integration for this project is also being worked on. The matrix approach of operating systems, tools/compilers and in this case Perl interpreter versions make a lot of sense and brings a lot of value and it would probably have caught the issue I introduced earlier.&lt;/p&gt;

&lt;p&gt;It is does however require a lot of work to establish and maintain, but I think it is worth the effort. We do learn a lot from our mistakes, but we also need successes to keep motivation up.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>release</category>
      <category>xs</category>
    </item>
    <item>
      <title>Capture Screen And Stream Like Zoom Using JavaScript</title>
      <author>Bibek</author>
      <pubDate>Thu, 13 May 2021 15:17:11 +0000</pubDate>
      <link>https://dev.to/bibekkakati/capture-screen-and-stream-like-zoom-using-javascript-1b65</link>
      <guid>https://dev.to/bibekkakati/capture-screen-and-stream-like-zoom-using-javascript-1b65</guid>
      <description>&lt;p&gt;Hello everyone👋&lt;/p&gt;

&lt;p&gt;In this article, we will see how applications like zoom use &lt;code&gt;Screen Capture API&lt;/code&gt; provided by the browsers to capture your screen and stream it to the other end.&lt;/p&gt;

&lt;p&gt;We will see a basic implementation of capturing the screen just to get an idea.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screen-capture-api"&gt;
  &lt;/a&gt;
  Screen Capture API
&lt;/h3&gt;

&lt;p&gt;The Screen Capture API let the user select a screen or portion of a screen (such as a window) to capture as a media stream. This stream can then be recorded or shared with others over the network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;First, we will create a simple HTML web page to show the captured screen's stream and buttons to start and stop capturing.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Filename: index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Screen Share&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./script.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Screen Capture&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"start"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Start Sharing&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"stop"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Stop Sharing&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"800"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"680"&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am assuming you have some basic knowledge of &lt;code&gt;HTML&lt;/code&gt; and &lt;code&gt;CSS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we will create the JavaScript file where we will implement the main logic part.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Filename: script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;displayMediaOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;startSharing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;stopSharing&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startSharing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDisplayMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;displayMediaOptions&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;stopSharing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tracks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTracks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At first, we are assigning the reference of the &lt;code&gt;video&lt;/code&gt; element and &lt;code&gt;button&lt;/code&gt; elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Listening on the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; button for an &lt;code&gt;onclick&lt;/code&gt; event, which will invoke the &lt;code&gt;startSharing&lt;/code&gt; and &lt;code&gt;stopSharing&lt;/code&gt; method respectively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;displayMediaOptions&lt;/code&gt; is a kind of config option which we are passing when capturing the stream. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;audio: false&lt;/code&gt; as we are not capturing the audio.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;video.cursor: always&lt;/code&gt; means the cursor will always be visible on the stream.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the official &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Capture_API"&gt;docs&lt;/a&gt; for other options.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#start-sharing-function"&gt;
  &lt;/a&gt;
  Start Sharing Function
&lt;/h4&gt;

&lt;p&gt;To start capturing video from the screen, we are using the &lt;code&gt;getDisplayMedia&lt;/code&gt; method on the instance of &lt;code&gt;navigator.mediaDevices&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Promise returned by the &lt;code&gt;getDisplayMedia&lt;/code&gt; method resolves to a media stream that streams the captured screen which we are setting into the &lt;code&gt;video.srcObject&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#stop-sharing-function"&gt;
  &lt;/a&gt;
  Stop Sharing Function
&lt;/h4&gt;

&lt;p&gt;To stop capturing the screen, we are fetching the list of all the tracks using the &lt;code&gt;getTracks&lt;/code&gt; method of &lt;code&gt;video.srcObject&lt;/code&gt;. Then looping through the track list and calling its &lt;code&gt;stop&lt;/code&gt; method. This will stop the stream.&lt;/p&gt;

&lt;p&gt;After that, we are setting the &lt;code&gt;video.srcObject&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example✨
&lt;/h3&gt;

&lt;p&gt;Github Repo: &lt;a href="https://github.com/bibekkakati/blogs-projects/tree/main/web/screen-capture-share"&gt;Screen Capture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try it out: &lt;a href="https://bibekkakati.github.io/blogs-projects/web/screen-capture-share"&gt;Live&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bCbrtzsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc6sneldzohpz53in5bs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCbrtzsF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc6sneldzohpz53in5bs.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/capture-screen-and-stream-like-zoom-using-javascript"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading 🙏&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up 👍&lt;/p&gt;

&lt;p&gt;Feel free to connect 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pOmeWpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3Dffffff"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Journey to the real world by cloning DEV.to backend server(part 4)</title>
      <author>Harsh Mangalam</author>
      <pubDate>Thu, 13 May 2021 15:10:36 +0000</pubDate>
      <link>https://dev.to/harshmangalam/journey-to-the-real-world-by-cloning-dev-to-backend-server-part-4-1cb3</link>
      <guid>https://dev.to/harshmangalam/journey-to-the-real-world-by-cloning-dev-to-backend-server-part-4-1cb3</guid>
      <description>&lt;p&gt;&lt;strong&gt;In the last series we have created our first server but we have not tested it in our machine locally. so in this series we will work more on creating better project structure and much more with prisma&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;open the &lt;code&gt;prisma/schema.prisma&lt;/code&gt; file and now lets create our User model which will represent our readers , admin and moderators of our platform&lt;/p&gt;

&lt;p&gt;&lt;code&gt;devblog_server/prisma/schema.prisma&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model User {
  id             Int         @id @default(autoincrement())
  email          String      @unique
  name           String?
  username       String      @unique
  password       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  avatar                String?
  bio                   String?
  displayEmailOnProfile Boolean   @default(false)
  location              Decimal[]
  role                  UserRole  @default(USER)
}



enum UserRole {
  USER // normal reader 
  MODERTOR // handle and verify posts
  ADMIN // handle USER and MODERATOR
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;Above &lt;code&gt;id&lt;/code&gt; is our unique field and it will auto increment when a new row will be added hence we provided &lt;code&gt;@id&lt;/code&gt; which tells it  a id field. &lt;code&gt;@default&lt;/code&gt; is used to add default data during row creation we provided &lt;code&gt;autoincrement()&lt;/code&gt; which will increment by one when new row will be created.You can use &lt;code&gt;cuid()&lt;/code&gt; and &lt;code&gt;uuid()&lt;/code&gt; for unique id creation. You can can learn more the difference between &lt;code&gt;uuid()&lt;/code&gt; and &lt;code&gt;cuid()&lt;/code&gt; &lt;a href="https://hashnode.com/post/what-is-the-difference-between-cuid-and-uuid-cilkdlykh005djz53hticmc58"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@unique()&lt;/code&gt;  provide a constraint validation for our schema that the no two row will have same data in field. In the above we provided &lt;code&gt;email&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; should be unique.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;now()&lt;/code&gt; function return current DateTime hence we used this in createdAt field so that it will automatically populated with the DateTime when a new user will register in our platform&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@updatedAt&lt;/code&gt; attribute will automatically provide the timestamp when our model will updated . In this way we can track the user when they have updated their profile.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt; , &lt;code&gt;Boolean&lt;/code&gt; , &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt; are data types provided by prisma it map with data type of databases in background . Recent version of prisma provide capability to map native data type directly in prisma schema like @db.VarChar(255).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;?&lt;/code&gt; it make the fields optional by default all fields are required.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Decimal[]&lt;/code&gt; here we have stored coordinate of user lat and lng so that we can easily show user location on map.&lt;/p&gt;

&lt;p&gt;At last i have created &lt;code&gt;role&lt;/code&gt; field which will be an enum. &lt;br&gt;
you can read more about enum in prism &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#enum"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#now-we-will-apply-migrations-for-our-user-model"&gt;
  &lt;/a&gt;
  Now we will apply migrations for our user model.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx prisma migrate dev --name user_model
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;dev&lt;/code&gt; is compulsory if you are in development environment.&lt;br&gt;
It will create new &lt;code&gt;migration&lt;/code&gt; directory inside   &lt;code&gt;prisma&lt;/code&gt;  directory and there it will generate migration file and suffix with the user_model.&lt;/p&gt;

&lt;p&gt;We have completed most of the stuff with prisma but the last things is we have not generated prisma client yet. When we will generate prisma client it will provide type for our model which helps to improve our development fast.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx prisma generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-we-will-start-our-development-server-and-will-test-both-rest-endpoint-and-graphql-endpoints"&gt;
  &lt;/a&gt;
  Now we will start our development server and will test both REST endpoint and GraphQL endpoints
&lt;/h3&gt;

&lt;p&gt;If you have remembered we have imported prisma in context from &lt;code&gt;prisma.js&lt;/code&gt; but we have not created this file yet. Lets create this and import &lt;code&gt;@prisma/client&lt;/code&gt; here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;prisma.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

module.exports = prisma;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above i have imported @prisma/client and created their install and export from this file so that our application can use only one instance of prisma client.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have talk about the downside of initialize more than one prisma client instance in previous post.Here we are safe because we have only one instance of prisma client which we will provide to context so that all resolvers will use this instance for db stuff.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#start-development-server"&gt;
  &lt;/a&gt;
  Start development server
&lt;/h2&gt;

&lt;p&gt;To start development server we will setup nodemon in &lt;code&gt;package.json&lt;/code&gt; so that we have not headed to start dev server again again on every change. Nodemon will do for us&lt;/p&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "devblog_server",
  "version": "1.0.0",
  "main": "src/server.js",
  "license": "MIT",
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js"
  },

...
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#now-start-server"&gt;
  &lt;/a&gt;
  Now start server
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pnpm run dev

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open your favourite browser and browse &lt;code&gt;http://localhost:3000&lt;/code&gt; will give you json response from express server and &lt;code&gt;http://localhost:3000/graphql&lt;/code&gt; will open graphql playground provided by apollo server&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;write first query&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
   hello
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2HxT5VMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzlgtzmvztq2n6ioa6kz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HxT5VMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzlgtzmvztq2n6ioa6kz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;this will resolve hello query and you will get results in right section.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In our next post we will implement authentication in graphql server and we will see how we will secure our api with JWT  token authentication&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>node</category>
      <category>apollo</category>
      <category>express</category>
      <category>prisma</category>
    </item>
  </channel>
</rss>
