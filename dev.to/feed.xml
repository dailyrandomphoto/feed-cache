<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🤷‍♀️ 🤷‍♂️ PostgreSQL error with using over jackc/pgx driver in Golang: cannot convert X to Y</title>
      <author>Vic Shóstak</author>
      <pubDate>Tue, 10 Aug 2021 10:54:06 +0000</pubDate>
      <link>https://dev.to/koddr/postgresql-error-with-using-over-jackc-pgx-driver-in-golang-cannot-convert-x-to-y-1e6e</link>
      <guid>https://dev.to/koddr/postgresql-error-with-using-over-jackc-pgx-driver-in-golang-cannot-convert-x-to-y-1e6e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey, DEV people! 👋 Today, I am starting a new series of short articles called "&lt;strong&gt;Simple Errors&lt;/strong&gt;", where I will cover various dead ends and pitfalls that I have encountered so far in my programming practice.&lt;/p&gt;

&lt;p&gt;I will always try to follow four rules when writing such articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An explanation of the cause of the error;&lt;/li&gt;
&lt;li&gt;A description of the input data in which the error occurred to me;&lt;/li&gt;
&lt;li&gt;My solution to the error;&lt;/li&gt;
&lt;li&gt;Conclusions and words of motivation;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Don't judge too harshly, write what you think of such articles, suggest your own topics for parsing in the comments... Here we go! 🚀&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#explanation-of-the-error"&gt;Explanation of the error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#input-data-when-an-error-occurs"&gt;Input data when an error occurs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resolving-the-error"&gt;Resolving the error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation-of-the-error"&gt;
  &lt;/a&gt;
  Explanation of the error
&lt;/h2&gt;

&lt;p&gt;When developing a REST API (or any other product) in Golang with PostgreSQL database over the high-performance driver &lt;a href="https://github.com/jackc/pgx"&gt;&lt;strong&gt;jackc/pgx&lt;/strong&gt;&lt;/a&gt;, sometimes you may get a simple error that can be confusing to search for information. Especially, newcomers.&lt;/p&gt;

&lt;p&gt;This simple error sounds like this: &lt;code&gt;cannot convert [SOMETHING] to [SOMETHING]&lt;/code&gt;. In my case, it looked like &lt;code&gt;cannot convert 1 to Text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This error message comes from the &lt;strong&gt;jackc/pgx&lt;/strong&gt; package and is caused by the combination of this package internally using prepared statements and PostgreSQL not being able to determine the type of the placeholders.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👍 Thanks for this explanation to author of this &lt;a href="https://github.com/jackc/pgx/issues/798#issuecomment-665060509"&gt;comment&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input-data-when-an-error-occurs"&gt;
  &lt;/a&gt;
  Input data when an error occurs
&lt;/h2&gt;

&lt;p&gt;First, let's take a look at the migration file that creates the projects table in my application's database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- ./platform/migration/000001_create_init_tables.up.sql&lt;/span&gt;

&lt;span class="c1"&gt;-- Create projects table&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="nv"&gt;"projects"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nv"&gt;"id"&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid_generate_v4&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="nv"&gt;"created_at"&lt;/span&gt; &lt;span class="nb"&gt;timestamp&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="nv"&gt;"updated_at"&lt;/span&gt; &lt;span class="nb"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;"user_id"&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;"alias"&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;"project_status"&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nv"&gt;"project_attrs"&lt;/span&gt; &lt;span class="n"&gt;JSONB&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that the fields have a very specific type, which will be validated by Postgres when creating/modifying data in this table.&lt;/p&gt;

&lt;p&gt;Now, let's look at the Go model, which will fit this migration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/controllers/project_model.go&lt;/span&gt;

&lt;span class="c"&gt;// Project struct to describe project object.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ID&lt;/span&gt;            &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;    &lt;span class="s"&gt;`db:"id" json:"id"`&lt;/span&gt;
    &lt;span class="n"&gt;CreatedAt&lt;/span&gt;     &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;    &lt;span class="s"&gt;`db:"created_at" json:"created_at"`&lt;/span&gt;
    &lt;span class="n"&gt;UpdatedAt&lt;/span&gt;     &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;    &lt;span class="s"&gt;`db:"updated_at" json:"updated_at"`&lt;/span&gt;
    &lt;span class="n"&gt;UserID&lt;/span&gt;        &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;    &lt;span class="s"&gt;`db:"user_id" json:"user_id"`&lt;/span&gt;
    &lt;span class="n"&gt;Alias&lt;/span&gt;         &lt;span class="kt"&gt;string&lt;/span&gt;       &lt;span class="s"&gt;`db:"alias" json:"alias"`&lt;/span&gt;
    &lt;span class="n"&gt;ProjectStatus&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;          &lt;span class="s"&gt;`db:"project_status" json:"project_status"`&lt;/span&gt;
    &lt;span class="n"&gt;ProjectAttrs&lt;/span&gt;  &lt;span class="n"&gt;ProjectAttrs&lt;/span&gt; &lt;span class="s"&gt;`db:"project_attrs" json:"project_attrs"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// ProjectAttrs struct to describe project attributes.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ProjectAttrs&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Title&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"title"`&lt;/span&gt;
    &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"description"`&lt;/span&gt;
    &lt;span class="n"&gt;Picture&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"picture"`&lt;/span&gt;
    &lt;span class="n"&gt;URL&lt;/span&gt;         &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"url"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, you're quite right that the &lt;code&gt;JSOB&lt;/code&gt; field type in the Go model has become a regular structure and will be stored in JSON format in the &lt;code&gt;project_attrs&lt;/code&gt; database field.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👌 Other fields are quite normal for any Go project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIWUge-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf7chbq35mtc2zgxk7zn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIWUge-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf7chbq35mtc2zgxk7zn.jpg" alt="solve the problem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resolving-the-error"&gt;
  &lt;/a&gt;
  Resolving the error
&lt;/h2&gt;

&lt;p&gt;Let's move smoothly to the solution to this simple error.&lt;/p&gt;

&lt;p&gt;All you need to know for the solution is that in PostgreSQL, you can specify types for placeholders directly in the query. Just simply add the types you specified in the migration file to the query.&lt;/p&gt;

&lt;p&gt;The format for specifying the field type will be as follows: &lt;code&gt;$N::&amp;lt;TYPE&amp;gt;&lt;/code&gt; (dollar sign + placeholder number + two colons + field type from DB).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/controllers/project_query.go&lt;/span&gt;

&lt;span class="c"&gt;// CreateProject method for creating project by given Project object.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ProjectQueries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;CreateProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Define query string.&lt;/span&gt;
    &lt;span class="c"&gt;// We define type for each field to solve this simple error.&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;`
    INSERT INTO projects 
    VALUES ($1::uuid, $2::timestamp, $3::timestamp, $4::uuid, $5::varchar, $6::int, $7::jsonb)
    `&lt;/span&gt;

    &lt;span class="c"&gt;// Send query to database.&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdatedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UserID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProjectStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProjectAttrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Return only error.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// This query returns nothing.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;☝️ Once again, please note that we are specifying the PostgreSQL field type from the migration, not the Go structure from the model!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After building the project and requesting this endpoint, the error will no longer be displayed, and the request will succeed! 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Personally, I like this kind of entry more than completely disabling this check in the &lt;strong&gt;jackc/pgx&lt;/strong&gt; package config (more information &lt;a href="https://pkg.go.dev/github.com/jackc/pgx/v4#ConnConfig"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Just because it gives you an immediate understanding of the field type at a glance of the SQL query, without having to dive into the details of the implementation in the controller.&lt;/p&gt;

&lt;p&gt;Choose the option that is convenient to you and use it, I just showed the way of the solution, which helped me personally. Have a successful work and let simple errors &lt;strong&gt;never stop you&lt;/strong&gt; on the way to realizing your projects! 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Arun Prakash &lt;a href="https://unsplash.com/photos/pE9mgLMwee0"&gt;https://unsplash.com/photos/pE9mgLMwee0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kendall Ruth &lt;a href="https://unsplash.com/photos/AijuW-HlE30"&gt;https://unsplash.com/photos/AijuW-HlE30&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>go</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Data Analyst Complete Roadmap</title>
      <author>codeifys</author>
      <pubDate>Tue, 10 Aug 2021 10:25:47 +0000</pubDate>
      <link>https://dev.to/codeifys/data-analyst-complete-roadmap-4aa0</link>
      <guid>https://dev.to/codeifys/data-analyst-complete-roadmap-4aa0</guid>
      <description>&lt;h2 id="who-is-a-data-analyst"&gt;&lt;strong&gt;Who is a Data Analyst?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Nowadays, companies receive a tremendous amount of information every day that can be used to optimize their strategies. To get insights from the massive data collected, they need a highly qualified professional: the Data Analyst.&lt;/p&gt;
&lt;p&gt;The task of a Data Analyst is to process the varied data concerning the customers, the products, or the performances of the company, to release indicators useful for the decision-makers. Thus, the information provided by the data analyst enables companies to define the products to be offered to customers according to their needs, the marketing strategy to adopt, or the improvements to be made to the production process.&lt;/p&gt;
&lt;h2 id="data-analyst-qualifications"&gt;&lt;strong&gt;Data Analyst Qualifications&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;How to becoming a data analyst requires both academic qualifications and skills. Let us see these categories in detail below.&lt;/p&gt;
&lt;h3 id="academic-qualifications"&gt;&lt;strong&gt;Academic Qualifications&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It is recommended that graduate from a data analysis program and have a high GPA, it would be easy for you to land an entry-level data analysis job. Even if you don’t have a specialization in data analysis, but a degree in mathematics, statistics, or economics from a well-reputed University, can easily land a data analysis entry-level job.&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;span&gt; I’m going to consolidate my conversation with him into &lt;/span&gt;&lt;span&gt;8 steps&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;ol&gt;
&lt;li&gt;
&lt;span&gt;Programming Language (Python/R) -&lt;/span&gt;&lt;span&gt; Python and R are the most widely used programming language. A grasp of one of these languages will help you understand how to clean, manipulate and analyze data. Some tips:&lt;/span&gt;
&lt;/li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;span&gt;Play around and pick a language you’re interested in, learn it thoroughly. There are tons of online courses or free youtube videos from which you can learn. An example of a comprehensive course - &lt;/span&gt;&lt;span&gt;Business Analytics using R.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Get your hands dirty. Check out &lt;/span&gt;&lt;span&gt;Kaggle. &lt;/span&gt;&lt;span&gt;They have tons of datasets and codes from other people who’ve analyzed the data. Pick a dataset you enjoy, analyze and make some observations. Lastly, check out what other people have done with the same dataset.&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;li&gt;
&lt;span&gt;SQL&lt;/span&gt;&lt;span&gt; - to extract data. Be thorough with CRUD. Practice a few questions on &lt;/span&gt;&lt;span&gt;Hackerrank&lt;/span&gt;&lt;span&gt; (or similar websites!)&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Excel - &lt;/span&gt;&lt;span&gt;I’m sure excel is familiar to most people. Take some time out and figure out what you do not know and try to learn them. Practice the basic functionalities required to build reports.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Visualization Tools&lt;/span&gt;&lt;span&gt; - After you’ve analyzed the data, you need to visualize it. There are lots of tools. Play around, pick one tool, and learn it. My suggestion is &lt;/span&gt;&lt;span&gt;Tableau&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Statistics&lt;/span&gt;&lt;span&gt; - A basic understanding of statistics is extremely important. Make sure you know the following concepts:&lt;/span&gt;
&lt;/li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;Descriptive Method and Inferential Method&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Mean, Variance, Standard deviation&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Measures of Central tendency (Mean, Median, Mode)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Percentiles of Data distribution (First Quartile, Second Quartile, Third Quartile)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Dispersion of data, Bell curve&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Hypothesis Testing&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Chi-Square Test&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;li&gt;
&lt;span&gt;Soft Skills&lt;/span&gt;&lt;span&gt; - Communication skills are crucial to explaining your findings. Creative thinking is required to find details that other people might miss or ignore. No machine can replace the way you think, interpret and communicate. It is unique for each person!&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Models/Algorithms&lt;/span&gt;&lt;span&gt; - After a good grasp of the above steps, move onto learning some basic models and algorithms that interest you.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Business&lt;/span&gt;&lt;span&gt; - Now, you have to decide what to analyze! You now have the skills and there are tons of industries where data analytics are required considering the amount of data generated every second. Figure out what you like, build your niche!&lt;/span&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;b&gt;You can check out Originally Published&lt;/b&gt;: &lt;b&gt;&lt;a href="https://www.codelivly.com/data-analyst-roadmap/"&gt;Data analyst roadmap&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Happy Reading&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Become A Frontend Developer</title>
      <author>practern</author>
      <pubDate>Tue, 10 Aug 2021 10:24:51 +0000</pubDate>
      <link>https://dev.to/practern/how-to-become-a-frontend-developer-366</link>
      <guid>https://dev.to/practern/how-to-become-a-frontend-developer-366</guid>
      <description>&lt;p&gt;Want to become a front-end developer? Do you know what tools, technologies and programming languages are going to be best for it? Today, we'll assist you out with all the questions you would possibly have for building a career as a front-end developer. Please note that this roadmap is simply here to assist you identify what you ought to learn next and understand the necessity surely tools and frameworks. So let’s start with the basics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How To Become Front-End Web Developer :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A front-end developer may be a one that develops the interface of the web site and applications. They are liable for determining the structure and style of the online application, build features to enhance user experience, make a balance between design and functionality, optimize web app for different devices, optimize pages for speed and scalability, use different markup languages for coding sites , maintain brand consistency and write reusable codes. In simple terms, front-end development refers to the lines of code that determine the operation and structure of the interface . However, the front-end web development isn't just limited to using HTML, CSS or JS instead there are a bunch of other technologies that you simply got to learn if you wanna become a prominent developer this year.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RoadMap For Front-End Web Developer :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How to become a front-end developer ? So here’s the roadmap i used to be pertaining to at the start of this blog. It includes personal recommendations, alternative options, and other good-to-know technologies and tools that you simply can learn anytime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDZLy8N_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0rarsh2072dmtnbickd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDZLy8N_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0rarsh2072dmtnbickd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skills A Front-End Developer Should Have :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to build a website, you first need to have a fundamental understanding of the web, how it is structured, and how your application fits within it. What is the web, what is a server, what is a client, how do various devices communicate with each other, how does the website you build on your computer in San Jose end up on someone’s phone in Shanghai. Undoubtedly, front-end development is a creative side of web development. By now you'd have checked the roadmap given above, so we'll discuss the talents and technologies you ought to familiarize yourself with to become a front-end web developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. HTML, CSS, Sass, LeSS, JavaScript &amp;amp; TypeScript :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To become a front-end web developer the primary step is to know the fundamentals of the web , what a server is, how different applications will communicate with one another . After knowing networks, clients, servers and databases, you'll advance to the particular basis of web development, i.e., coding. The coding languages that are used to build a client-side source code contains HTML, CSS, Sass, LeSS, JavaScript and TypeScript.&lt;/p&gt;

&lt;p&gt;HTML: HyperText Markup Language is the foundation of every website. It is the standard markup language to display web pages in a web browser. HTML is easy to learn and use. Using HTML, you can create a basic website. HTML is the code that describes the page content that is later executed by the browser. You can use HTML to add text, images, videos, audio, forms, layout and so much more into the web page.&lt;/p&gt;

&lt;p&gt;CSS: Cascading Style Scripts or CSS is a styling language for HTML. While HTML informs the browser about content, CSS describes the way to format that content. Some of the basics of CSS you will come across are CSS positioning, grid, box model, flexbox, and responsive design.&lt;/p&gt;

&lt;p&gt;Sass: Syntactically Awesome Style Sheets is a preprocessor stylesheet language compiled to CSS. Sass is an extension to CSS and is compatible with all versions of it. Sass offers features that don’t exist in CSS, like mixins, functions, variables, nested rules, partials, modules and so on. It helps in organizing large stylesheets while making it easier to share design across projects.&lt;/p&gt;

&lt;p&gt;LeSS: Leaner Style Sheets is a pre-processor backward-compatible language compiled into CSS. It is influenced by Sass and facilitates reusable, manageable, and customizable style sheets. LeSS looks similar to CSS, so learning it will be easier. It has only added a few conveniences to CSS, i.e, variables, nesting, nested at-rules &amp;amp; bubbling, operations, escaping, calc() exception, functions, and much more.&lt;/p&gt;

&lt;p&gt;JavaScript: JavaScript or JS is a lightweight and rendered programming and scripting language, developed for network-centric applications. It’s used in both front-end and back-end development. It helps in creating appealing, fast and dynamic websites. While using JS, you can implement elements like interactive animations and maps. A few basics of Javascript you need to learn are its syntax, DOM manipulation, the concept of closure, scope, async-await, hoisting, shadow DOM, event bubbling &amp;amp; prototype and fetching APIs.&lt;/p&gt;

&lt;p&gt;TypeScript: TypeScript is an open-source programming language that is a superset of JavaScript. It is purely object-oriented and offers optional static typing, interfaces, and classes that are later compiled into JavaScript for execution. TypeScript allows IDEs to provide a richer environment for identifying common errors while writing the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. CSS &amp;amp; JavaScript Frameworks :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web Frameworks is a package of files and folders including standardized code, used as a template to start the development of a website or web app. It makes the mixing and development of front-end programming easier. With the variety of frameworks to choose from it can be difficult to opt for what’s ideal for your requirements. So here’s an inventory of CSS and JavaScript frameworks that you simply should consider adding to your skillset&lt;/p&gt;

&lt;p&gt;CSS Frameworks :&lt;/p&gt;

&lt;p&gt;Bootstrap&lt;/p&gt;

&lt;p&gt;Ulkit&lt;/p&gt;

&lt;p&gt;Semantic UI&lt;/p&gt;

&lt;p&gt;Foundation&lt;/p&gt;

&lt;p&gt;Bulma&lt;/p&gt;

&lt;p&gt;Tailwind CSS&lt;/p&gt;

&lt;p&gt;Spectre&lt;/p&gt;

&lt;p&gt;JavaScript Frameworks :&lt;/p&gt;

&lt;p&gt;Angular&lt;/p&gt;

&lt;p&gt;React&lt;/p&gt;

&lt;p&gt;Vue.js&lt;/p&gt;

&lt;p&gt;Ember.js&lt;/p&gt;

&lt;p&gt;Meteor&lt;/p&gt;

&lt;p&gt;Node.js&lt;/p&gt;

&lt;p&gt;jQuery&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Version Control System :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Version control is the practice of managing and tracking changes made in the source code of a web application. A version control system is a software tool that helps developers to communicate and manage changes done in code over time while providing information like who made what changes. A separate branch is made for every contributor who modifies the code but changes aren't merged into the source code until it's been analyzed. The version control system enhances the project speed with collaboration, leverages productivity, reduces possibilities of conflicts &amp;amp; errors and helps to recover code in case of an accidental situation.&lt;/p&gt;

&lt;p&gt;Some of the top-rated version control systems that you can learn are:&lt;/p&gt;

&lt;p&gt;GitHub&lt;/p&gt;

&lt;p&gt;GitLab&lt;/p&gt;

&lt;p&gt;AWS CodeCommit&lt;/p&gt;

&lt;p&gt;Beanstalk&lt;/p&gt;

&lt;p&gt;Apache Subversion&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Micro-Frontend :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developing a good front-end is hard and scaling it for different teams to work together on a complex product is harder. That’s why the idea of Micro-frontend architecture came into view. It is a design approach where front-end apps are divided into micro, independent and individual apps that work loosely together. The concept of micro-frontend is practically inspired by microservices. The source code for each micro-frontend is smaller than the monolithic front-end. This smaller codebase made it easier and simpler for developers to work simultaneously. Just like microservices, it also allows independent deployment which as a result reduces the chances of errors and risks to breakdown the entire system. And having micro-frontend as a skill will also be beneficial for your career as a front-end developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Testing &amp;amp; Code Analysis Tools :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Testing front-end development is a technique where functionality, usability and GUI of a web application or software are tested. The core aim of front-end testing is to analyze the overall operations &amp;amp; functions to ensure that the user interface of the application is working as expected. Types of front-end testing include the following tests:&lt;/p&gt;

&lt;p&gt;Unit Testing: Individual sets of codes are tested for their functionality.&lt;/p&gt;

&lt;p&gt;Visual Regression Testing : Image comparison is done to recognise the difference between old and new code.&lt;/p&gt;

&lt;p&gt;Acceptance Testing : The compliance of the system is evaluated with business requirements for the acceptability for project delivery.&lt;/p&gt;

&lt;p&gt;Performance Testing : The responsiveness, stability and speed are tested to provide excellence in the performance of the application.&lt;/p&gt;

&lt;p&gt;Integration Testing : Individual modules of the application are logically coupled and tested in a group to expose errors in the interaction between these modules.&lt;/p&gt;

&lt;p&gt;Accessibility Testing : It is done to ensure that the application can be accessed by everyone. It helps to make the app accessible to those with certain disabilities.&lt;/p&gt;

&lt;p&gt;End-to-end Testing : It ensures that the app is behaving as expected.&lt;/p&gt;

&lt;p&gt;Cross-Browser Compatibility Testing : It is done to enable users to have a similar experience of the web app on different browsers.&lt;/p&gt;

&lt;p&gt;Tools for Code Analysis &amp;amp; Testing :&lt;/p&gt;

&lt;p&gt;LambdaTest&lt;/p&gt;

&lt;p&gt;Chrome DevTools&lt;/p&gt;

&lt;p&gt;Selenium&lt;/p&gt;

&lt;p&gt;Needle&lt;/p&gt;

&lt;p&gt;Page Speed&lt;/p&gt;

&lt;p&gt;YSlow&lt;/p&gt;

&lt;p&gt;Jest&lt;/p&gt;

&lt;p&gt;Mocha&lt;/p&gt;

&lt;p&gt;Jasmine&lt;/p&gt;

&lt;p&gt;Cypress&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Web Security &amp;amp; Communication Protocols :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, you must know the importance of web security and communication protocols because connecting to the internet can cause major security issues. With the wide range of security protocols, you can easily determine the level of security needed for their applications and deploy it virtually. The major protocols for web security and communication to know about are:&lt;/p&gt;

&lt;p&gt;IPsec - Internet Protocol Security&lt;/p&gt;

&lt;p&gt;IKE - Internet Key Exchange&lt;/p&gt;

&lt;p&gt;SSH - Secure Shell&lt;/p&gt;

&lt;p&gt;SSL - Secure Socket Layer&lt;/p&gt;

&lt;p&gt;HTTPS - Secure Embedded Web Server&lt;/p&gt;

&lt;p&gt;RADIUS - Remote Authentication Dial-In User Service&lt;/p&gt;

&lt;p&gt;TLS - Transport Layer Security&lt;/p&gt;

&lt;p&gt;SET - Secure Electronic Transaction&lt;/p&gt;

&lt;p&gt;PEM - Privacy Enhanced Mail&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Static Site Generator (SSG) :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Static site generator processes pages through a set of templates and raw data. SSG handles the build process before the pages are requested by users, i.e., the pages are ready to be served when requested. Static site generator is a compromise between CMS and hand-coded static site. Similar to CMS, it allows developers to use templates to generate web pages automatically, however, it automatically generates web pages ahead of time rather than waiting for the user request. SSG offers more flexibility, fewer server-side dependencies, better reliability, version control &amp;amp; testing and enhanced security.&lt;/p&gt;

&lt;p&gt;Here is the list of some commonly used SSGs&lt;/p&gt;

&lt;p&gt;Next.js&lt;/p&gt;

&lt;p&gt;Gatsby&lt;/p&gt;

&lt;p&gt;Hugo&lt;/p&gt;

&lt;p&gt;GitBook&lt;/p&gt;

&lt;p&gt;Jekyll&lt;/p&gt;

&lt;p&gt;Eleventy&lt;/p&gt;

&lt;p&gt;Nuxt&lt;/p&gt;

&lt;p&gt;Docsify&lt;/p&gt;

&lt;p&gt;VuePress&lt;/p&gt;

&lt;p&gt;Gridsome&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Progressive Web Apps :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Progressive Web Apps or PWAs are web apps that are built and improved using modern web browser APIs. PWAs take advantage of both native and web apps functionalities. It offers enhanced reliability, capabilities and integration to reach anyone, anywhere, on any device with just one codebase. So learning more about will help you in designing a more functional web app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Responsive Web Design :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Responsive web design is a perspective based on which the development and design of the web app or website should be done in such a way that it responds accurately to the user’s environment based on platform, screen size and orientation. Simply put, an application or web app should be designed in such a way that the web pages alter their appearance and layout to match the resolution and width of the device screen. By learning the way to design a responsive web app, you can make it user-friendly and improve the ranking in search engines simultaneously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Package Manager :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A package manager is a tool that automates the process of installation, configuration, management and elimination of the product dependencies and software packages. You should know the basics of the package manager and one of its tools.&lt;/p&gt;

&lt;p&gt;Some popular package manager tools out there consists of:&lt;/p&gt;

&lt;p&gt;NPM&lt;/p&gt;

&lt;p&gt;Yarn&lt;/p&gt;

&lt;p&gt;Bower&lt;/p&gt;

&lt;p&gt;JSPM&lt;/p&gt;

&lt;p&gt;Keep Learning!&lt;/p&gt;

&lt;p&gt;The web keeps changing and with advancements in technologies comes new methods and tools. So, it is essential to keep yourself up-to-date with the latest trends and technologies, and never stop learning.&lt;/p&gt;

&lt;p&gt;It doesn’t mean that what you have learned so far will be of no use. Your basic knowledge will always be an advantage for your career. But you must keep updating your skills for better growth.&lt;/p&gt;

&lt;p&gt;To become pro in your skills apply for global internships through &lt;a href="https://www.practern.com/"&gt;Practern&lt;/a&gt;&lt;/p&gt;

</description>
      <category>frontend</category>
      <category>internships</category>
      <category>developer</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to install VS Code in an Android Phone?</title>
      <author>Archit Sharma</author>
      <pubDate>Tue, 10 Aug 2021 09:54:58 +0000</pubDate>
      <link>https://dev.to/iarchitsharma/how-to-install-vs-code-in-an-android-phone-cbh</link>
      <guid>https://dev.to/iarchitsharma/how-to-install-vs-code-in-an-android-phone-cbh</guid>
      <description>&lt;p&gt;&lt;strong&gt;Visual Studio Code is the most popular code editor or IDE (Integrated Development Environment) currently.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before starting this post I want to say that there are lot of blogs already present on how to install VS Code on your Android phone but most of them are outdated and are not well written.&lt;br&gt;
So my aim is to right a beginner friendly blog, All you need to do is Download Termux which is an Android terminal emulator and copy paste the commands.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article I will tell you how to install VS Code in your Android Phone with the use of Termux emulator.&lt;/p&gt;

&lt;p&gt;Although I do not recommend anyone to do all the coding in the phone but still having familiar interface would make things useful.&lt;br&gt;
This was all possible due to the package: &lt;em&gt;&lt;a href="https://github.com/cdr/code-server"&gt;Code Server&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#termux"&gt;
  &lt;/a&gt;
  Termux
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://termux.com/"&gt;Termux&lt;/a&gt; is a Android terminal emulator which doesn't require root, You can download it either from the &lt;a href="https://play.google.com/store/apps/details?id=com.termux&amp;amp;hl=en&amp;amp;gl=US"&gt;Google Play store&lt;/a&gt; or &lt;a href="https://f-droid.org/repository/browse/?fdid=com.termux"&gt;F-Droid&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;NOTE: Since November 2, 2020 Termux in Google Play Store is no longer able to publish updates of Termux application and add-ons because they are not ready for changes upcoming with SDK level 29 (Android 10).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#update-termux"&gt;
  &lt;/a&gt;
  Update Termux
&lt;/h1&gt;

&lt;p&gt;Now that we have installed Termux we need to update the system.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#to-upgrade-termux-run"&gt;
  &lt;/a&gt;
  To upgrade Termux run:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#install-required-packages"&gt;
  &lt;/a&gt;
  Install required packages
&lt;/h1&gt;

&lt;p&gt;Now we have to install some keyfiles or required packages which will help us to install and run code-server(VS Code).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#to-install-the-required-packages"&gt;
  &lt;/a&gt;
  To install the required packages:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt install build-essential python git nodejs yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After running this command Termux will ask:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Do you want to continue? [y/n]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have to press &lt;code&gt;y&lt;/code&gt; and the Installation will begin.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#vscode"&gt;
  &lt;/a&gt;
  VSCode
&lt;/h1&gt;

&lt;p&gt;Now that all the packages has been installed, its time to install VS Code on your Android phone which is approx. 70 MB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-install-vscode-run"&gt;
  &lt;/a&gt;
  To install VSCode, run:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn global add code-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take some time to install, so be patient. After install is complete move to the next step.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-url-and-password"&gt;
  &lt;/a&gt;
  Get URL and Password
&lt;/h1&gt;

&lt;p&gt;Now before we can start using VS Code we need to get two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Local host address&lt;/li&gt;
&lt;li&gt;Password for login&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#we-can-get-both-the-address-and-password-by-running-this-command"&gt;
  &lt;/a&gt;
  We can get both the address and Password by running this command:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail ~/.config/code-server/config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command you will get something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-addr: 127.0.0.1:8080
auth: password
password: 8921384c6e1f8ff4nn630h1v
cert: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in my case local address is : &lt;code&gt;127.0.0.1:8080&lt;/code&gt; and password is : &lt;code&gt;8921384c6e1f8ff4nn630h1v&lt;/code&gt;.&lt;br&gt;
Make sure to copy both the address and password from your terminal and move to final step.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#run-vs-code"&gt;
  &lt;/a&gt;
  Run VS Code
&lt;/h1&gt;

&lt;p&gt;It's time to run and use the VS Code in you phone.&lt;br&gt;
To run VS Code type this in termux:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;code-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#now-the-vs-code-is-running"&gt;
  &lt;/a&gt;
  Now the VS Code is running,
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrf6L2MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txji8zgl7wwtzt0uu2p6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrf6L2MJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txji8zgl7wwtzt0uu2p6.jpg" alt="Code Server VS Code running on Termux"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#go-to-your-browser-and-paste-the-address-that-you-copied"&gt;
  &lt;/a&gt;
  Go to your browser and paste the address that you copied
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwB8Sm0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oxeugodf4y9b1bbrqb6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwB8Sm0M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oxeugodf4y9b1bbrqb6.jpg" alt="Paste Local address"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#your-browser-will-ask-for-password-paste-the-password-that-you-have-copied-from-your-terminal-and-click-on-submit"&gt;
  &lt;/a&gt;
  Your browser will ask for password, paste the password that you have copied from your terminal and click on submit.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqHeDaqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1douwi72k9yx7wh05pek.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqHeDaqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1douwi72k9yx7wh05pek.jpg" alt="Enter code-server password"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#congratulation-vs-code-is-now-running-on-your-browser"&gt;
  &lt;/a&gt;
  Congratulation VS Code is now running on your browser.
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5awHzeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dydu4c3sy1mhbcgmq34e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5awHzeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dydu4c3sy1mhbcgmq34e.jpg" alt="VS Code on Android by iArchitSharma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I hope you are having fun using VS Code in your Android Device&lt;br&gt;
You can also install VS Code in your other devices too using &lt;a href="https://github.com/cdr/code-server"&gt;Code Server&lt;/a&gt; repository.&lt;br&gt;
Do follow me as I will write more articles on how to install VS Code like this in your other devices. - Archit Sharma&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Adding 100 underline/overlay animations | The impressive CSS collection ⭐️</title>
      <author>Temani Afif</author>
      <pubDate>Tue, 10 Aug 2021 09:50:07 +0000</pubDate>
      <link>https://dev.to/afif/adding-100-underline-overlay-animations-the-impressive-css-collection-1a93</link>
      <guid>https://dev.to/afif/adding-100-underline-overlay-animations-the-impressive-css-collection-1a93</guid>
      <description>&lt;p&gt;After the &lt;a href="https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje"&gt;CSS loaders&lt;/a&gt;, it's time for this collection to reach 500 animations as well. Yes, &lt;strong&gt;500 CSS underline/overlay animations!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wanted to reach that milestone without using pseudo elements but it was a bit tough 😅 so for this one I will introduce pseudo elements. &lt;/p&gt;

&lt;p&gt;As usual: No SVG, No JS, No keyframes, only one HTML element and CSS transitions.&lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-cloned"&gt;The Cloned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-irregular-iii"&gt;The Irregular III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-colorful-ii"&gt;The Colorful II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-all-sides-iv"&gt;The All Sides IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-unexpected-iv"&gt;The Unexpected IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fancy-v"&gt;The Fancy V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-broken-iii"&gt;The Broken III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-stroke"&gt;The Stroke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-transformed-ii"&gt;The Transformed II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-multicolor-iii"&gt;The Multicolor III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-inverted-v"&gt;The Inverted V&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-multi-steps-ii"&gt;The Multi-Steps II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-strange"&gt;The Strange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-abstract"&gt;The Abstract&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-cloned"&gt;
  &lt;/a&gt;
  The Cloned
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWvzQzY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-irregular-iii"&gt;
  &lt;/a&gt;
  The Irregular III
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/LYyMQqW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-colorful-ii"&gt;
  &lt;/a&gt;
  The Colorful II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWmZQxg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-all-sides-iv"&gt;
  &lt;/a&gt;
  The All Sides IV
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWRoZQm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-unexpected-iv"&gt;
  &lt;/a&gt;
  The Unexpected IV
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWmZQdW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fancy-v"&gt;
  &lt;/a&gt;
  The Fancy V
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/LYyMQKy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-broken-iii"&gt;
  &lt;/a&gt;
  The Broken III
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/zYwyRgq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-stroke"&gt;
  &lt;/a&gt;
  The Stroke
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BaRvYXq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-transformed-ii"&gt;
  &lt;/a&gt;
  The Transformed II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwVEMbM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-multicolor-iii"&gt;
  &lt;/a&gt;
  The Multicolor III
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRmPxRG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-inverted-v"&gt;
  &lt;/a&gt;
  The Inverted V
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/dyWwmPV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-multisteps-ii"&gt;
  &lt;/a&gt;
  The Multi-Steps II
&lt;/h3&gt;

&lt;p&gt;all the below will not work on Firefox due to the lack of support of &lt;code&gt;@property&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abWPYOp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-strange"&gt;
  &lt;/a&gt;
  The Strange
&lt;/h3&gt;

&lt;p&gt;#1,#2,#3 and #4 will not work on Firefox&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/jOmXzPg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-abstract"&gt;
  &lt;/a&gt;
  The Abstract
&lt;/h3&gt;

&lt;p&gt;Tell me what do you see and I will tell you who you are&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwVEMWy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;If I count the CSS loaders, you have now more than &lt;strong&gt;1000&lt;/strong&gt; single div animations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6Zt3c5K3nBhU2LG8/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Zt3c5K3nBhU2LG8/giphy-downsized.gif" alt="one thousand"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you missed the last CSS loaders collection&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/adding-100-css-loaders-to-the-collection-of-500-css-loaders-2a3p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Adding 100 CSS loaders to the collection of — 500 CSS loaders 🏆&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Jun 29 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;A special thanks to &lt;a class="mentioned-user" href="https://dev.to/adriantwarog"&gt;@adriantwarog&lt;/a&gt;
 who made a video about my first collection. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cDXUPkcw8HM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>😍 or 🤮 What do you think of our design? </title>
      <author>InHuOfficial</author>
      <pubDate>Tue, 10 Aug 2021 09:48:33 +0000</pubDate>
      <link>https://dev.to/inhuofficial/our-new-colour-scheme-and-design-base-feedback-wanted-go7</link>
      <guid>https://dev.to/inhuofficial/our-new-colour-scheme-and-design-base-feedback-wanted-go7</guid>
      <description>&lt;p&gt;Super short and positive (for once...I seem to have been on a bit of a naughty streak!) post. &lt;/p&gt;

&lt;p&gt;Finally at the stage of building the front end for Inclusivity Hub (InHu). After much deliberation and fiddling we have settled on the colour scheme and have a rough idea of the branding!&lt;/p&gt;

&lt;p&gt;So I thought I would share the design for feedback (negative feedback and constructive feedback is more than welcomed!).&lt;/p&gt;

&lt;p&gt;At the same time, I thought I would show how little adjustments / certain thought processes mean that you can create an accessible colour palette that is (hopefully) appealing and share that with you too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-with-the-final-design"&gt;
  &lt;/a&gt;
  Let's start with the final design!
&lt;/h2&gt;

&lt;p&gt;Start at the end and work backwards!&lt;/p&gt;

&lt;p&gt;I won't bore you with the thought process too much as to why we chose the "stripes", I will just share the inspiration behind the design, which bits we liked and then the final product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h3&gt;

&lt;p&gt;I liked the following two images:-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v0Yz5xHB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/002/070/759/large_2x/creative-abstract-dynamic-geometric-elements-pattern-design-vector.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v0Yz5xHB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/002/070/759/large_2x/creative-abstract-dynamic-geometric-elements-pattern-design-vector.jpg" alt="geometric background with diagonal rounded rectangles, circles with lines through them, dots and dashes in a pink, purple and dark blue colour scheme with yellow highlights"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.vecteezy.com/vector-art/2070759-creative-abstract-dynamic-geometric-elements-pattern-design"&gt;https://www.vecteezy.com/vector-art/2070759-creative-abstract-dynamic-geometric-elements-pattern-design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVZV_QnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/001/936/591/large_2x/abstract-pink-and-blue-gradient-color-rounded-line-diagonal-pattern-on-black-background-vector.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVZV_QnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.vecteezy.com/system/resources/previews/001/936/591/large_2x/abstract-pink-and-blue-gradient-color-rounded-line-diagonal-pattern-on-black-background-vector.jpg" alt="vector background with uniform rectangles at 45 degree angle, fully rounded ends, evenly spaced in a "&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.vecteezy.com/vector-art/1936591-abstract-pink-and-blue-gradient-color-rounded-line-diagonal-pattern-on-black-background"&gt;https://www.vecteezy.com/vector-art/1936591-abstract-pink-and-blue-gradient-color-rounded-line-diagonal-pattern-on-black-background&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first one was too busy though and the second one was too uniform. We wanted something in between and I, in particular wanted to see a more friendly colour scheme with a bit more variance in colours!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-anchor-design"&gt;
  &lt;/a&gt;
  The anchor design
&lt;/h3&gt;

&lt;p&gt;After a bit of fiddling I finalised an idea and got to work designing. &lt;/p&gt;

&lt;p&gt;And here is the "anchor design" around which our branding will be built:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qF6gpfDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l62yq3zhgzw7y5d8d2rb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qF6gpfDT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l62yq3zhgzw7y5d8d2rb.jpg" alt="Dark purple background with 45 degree rounded rectangles, hollow circles with thick outlines and filled circles with multiple colours that are bright and vibrant."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bright, colourful and I could tell you a whole story about why we chose certain things but, in the end, this is what we ended up with.&lt;/p&gt;

&lt;p&gt;Needs some minor spacing tweaks but it is 95% of the way there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-always-like-to-do-the-business-cards-next"&gt;
  &lt;/a&gt;
  I always like to do the business cards next
&lt;/h3&gt;

&lt;p&gt;To see if a design "works in the real world" I think business cards are a great place to start.&lt;/p&gt;

&lt;p&gt;They are easy to make (so if you hate the design you can scrap it without wasting too much time) and they have two sides so you can try a light theme and a dark theme on one product.&lt;/p&gt;

&lt;p&gt;Yet again, without all the design fluff, here are the rough designs for the cards:-&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#front"&gt;
  &lt;/a&gt;
  Front
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5NpcZTVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrf6fxpoe25el8ql0pqo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5NpcZTVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrf6fxpoe25el8ql0pqo.jpg" alt='The InHu logo sat on top of the background with a drop shadow to make it look like it is floating. The InHu logo is a white circle with a thick pink outline with a slight gap at the bottom containing the text InHu split dark purple for "In" and pink for "Hu" with a little curve at the bottom within the white circle in dark purple also. Due to weighting on the "I" and the "U" being stronger and the small curved line at the bottom it looks like a smiling face. The background is dark purple with 45 degree rounded rectangles, hollow circles with thick outlines and filled circles with multiple colours that are bright and vibrant.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much different, just the company logo on top (with slightly adjusted colours to match new colour scheme)! "Floating" the logo with a drop shadow was the best way to make it stand out and remove some of the flatness from the design.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#back"&gt;
  &lt;/a&gt;
  Back
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---woFHN19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4qxz13586oghsflxv5l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---woFHN19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4qxz13586oghsflxv5l.jpg" alt="White background with the same colourful circles, rounded rectangles and outlined shapes. The shapes are located at the top and bottom of the card to allow space in the middle for text. There is placeholder text for person name and position to the left and to the right there are 3 rounded rectangles stacked vertically, each with an icon to the left of them to represent their contents. The 3 rounded rectangles contain placeholder text for a phone number, email address and the web address"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Carrying the lines over to the top and bottom while leaving a decent amount of white space in the middle gives the basis for printed things such as invoices, letters etc.&lt;/p&gt;

&lt;p&gt;I am still not quite happy with it but it is close to the end product! &lt;/p&gt;

&lt;p&gt;So, yet again, what do you think?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-considerations"&gt;
  &lt;/a&gt;
  Accessibility considerations
&lt;/h2&gt;

&lt;p&gt;Now that you have seen the design, let's talk a little bit about accessibility.&lt;/p&gt;

&lt;p&gt;The design is not just a background / visual interest. It is the basis of the colour palette for the company for all other printed and digital media.&lt;/p&gt;

&lt;p&gt;So we had to make sure that contrast was good.&lt;/p&gt;

&lt;p&gt;If you want to know the exact details of colour contrast requirements then the &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;colour contrast checker from WebAim&lt;/a&gt; is a great tool to play with that has explanations below.&lt;/p&gt;

&lt;p&gt;I will just give the cliff notes:&lt;br&gt;
For text we want a minimum of 3:1 for cases where we can use large text or for controls (to be used sparingly though!). For most text we want at least 4.5:1 contrast so we can use normal sized text.&lt;/p&gt;

&lt;p&gt;For the main body text we want at least 7:1 contrast so that it is easy to read.&lt;/p&gt;

&lt;p&gt;That is basically it!&lt;/p&gt;

&lt;p&gt;But that does get quite complicated when designing a colour palette. &lt;/p&gt;

&lt;p&gt;For example, orange is a low contrast colour with white. So to make an orange that meets the minimum standards of 3:1 you have to make it quite dark.&lt;/p&gt;

&lt;p&gt;Yellow is out of the question with white, so that is for use on / with dark colours and as decoration.&lt;/p&gt;

&lt;p&gt;Why am I picking out those colours in particular? Because we as developers use them for warnings, statuses etc. as they are the expected colours. We need to have at least one colour between "red" and "green" so we decided to make a dark orange as part of the colour scheme.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-there-a-method-you-can-use-to-get-it-right"&gt;
  &lt;/a&gt;
  Is there a method you can use to get it right?
&lt;/h3&gt;

&lt;p&gt;There are a lot of &lt;a href="https://dev.to/5t3ph/generate-accessible-button-colors-with-buttonbuddy-41mg"&gt;tools you can use&lt;/a&gt; that will help you generate an accessible colour scheme and &lt;a href="https://dev.to/alvaromontoro/building-your-own-color-contrast-checker-4j7o"&gt;check contrast&lt;/a&gt;. The problem is that they end up avoiding colours that you may want to use.&lt;/p&gt;

&lt;p&gt;The trick is to get a colour scheme you like without thinking about accessibility. &lt;/p&gt;

&lt;p&gt;Then you adjust the darkness / lightness / hue on colours with low contrast and see if the scheme still works. &lt;/p&gt;

&lt;p&gt;If there are colours that you want to use but you cannot get the contrast high enough, mark them as decorative colours.&lt;/p&gt;

&lt;p&gt;I find the best way to do it is to lay the colour palette out in blocks and then add the contrast ratios on top of them. Then you can easily see which ones you can use in which situations.&lt;/p&gt;

&lt;p&gt;An example of this is as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QlCY2Pfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbhcldgpsy2o2tc74xwe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QlCY2Pfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbhcldgpsy2o2tc74xwe.jpg" alt="Described immediately below due to too much information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description of colours&lt;/strong&gt;: &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Colour&lt;/th&gt;
&lt;th&gt;Hex Colour Background&lt;/th&gt;
&lt;th&gt;Hex Colour Text&lt;/th&gt;
&lt;th&gt;Contrast Ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Primary background&lt;/td&gt;
&lt;td&gt;#522876&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;10.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Primary logo&lt;/td&gt;
&lt;td&gt;#7E4998&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;6.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Secondary logo&lt;/td&gt;
&lt;td&gt;#A55A9F&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pink (danger)&lt;/td&gt;
&lt;td&gt;#E02367&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orange (warning)&lt;/td&gt;
&lt;td&gt;#EA5A1F&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Amber (decorative)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;#F49955&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2.2 (too low)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Purp 2 (Primary)&lt;/td&gt;
&lt;td&gt;#694F9C&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;6.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dark Blue (info)&lt;/td&gt;
&lt;td&gt;#304D9C&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;7.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Light Blue (widgets)&lt;/td&gt;
&lt;td&gt;#304D9C&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Primary Text&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;9.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deselect text&lt;/td&gt;
&lt;td&gt;#E1E1E4&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;7.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disabled text&lt;/td&gt;
&lt;td&gt;#B1B1B1&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dark theme 1&lt;/td&gt;
&lt;td&gt;#757575&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dark theme 2&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;td&gt;9.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Purple ancillary&lt;/td&gt;
&lt;td&gt;#F5F0F8&lt;/td&gt;
&lt;td&gt;#423262&lt;/td&gt;
&lt;td&gt;5.84&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Blue ancillary&lt;/td&gt;
&lt;td&gt;#DDEDFB&lt;/td&gt;
&lt;td&gt;#304D9C&lt;/td&gt;
&lt;td&gt;6.61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Green ancillary&lt;/td&gt;
&lt;td&gt;#E3F1E5&lt;/td&gt;
&lt;td&gt;#26602E&lt;/td&gt;
&lt;td&gt;6.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Red ancillary&lt;/td&gt;
&lt;td&gt;#FDF2F6&lt;/td&gt;
&lt;td&gt;#B21F59&lt;/td&gt;
&lt;td&gt;5.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orange ancillary&lt;/td&gt;
&lt;td&gt;#FEF2EA&lt;/td&gt;
&lt;td&gt;#BD421C&lt;/td&gt;
&lt;td&gt;4.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Grey 1 ancillary&lt;/td&gt;
&lt;td&gt;#E1E1E4&lt;/td&gt;
&lt;td&gt;#444444&lt;/td&gt;
&lt;td&gt;7.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Grey 2 ancillary&lt;/td&gt;
&lt;td&gt;#B1B1B1&lt;/td&gt;
&lt;td&gt;#333333&lt;/td&gt;
&lt;td&gt;5.9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;By doing it this way it makes it easy to pick out which colours can be used for what!&lt;/p&gt;

&lt;p&gt;Oh and if you like the colour scheme &lt;strong&gt;feel free to use it&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shouldnt-you-be-going-for-wcag-aaa-colour-contrast-as-an-accessibility-advocate"&gt;
  &lt;/a&gt;
  Shouldn't you be going for WCAG AAA colour contrast as an accessibility advocate?
&lt;/h3&gt;

&lt;p&gt;Good point, you obviously know accessibility, can we be friends? 😋&lt;/p&gt;

&lt;p&gt;The answer is no, we are geared up to produce high contrast versions of our printed media.&lt;/p&gt;

&lt;p&gt;Our digital products (that we control) will all have options to turn on a high contrast mode (and turn on automatically with media queries) under a prominent custom build accessibility settings section.&lt;/p&gt;

&lt;p&gt;The people who say your site should be &lt;a href="https://www.w3.org/WAI/WCAG2AAA-Conformance"&gt;WCAG AAA compliant&lt;/a&gt; from the beginning are just a little too militant. (there are 3 levels, A, AA and AAA, with AAA being "superstar" or "above and beyond" status). &lt;/p&gt;

&lt;p&gt;WCAG AA is a standard that about 1% of companies manage to achieve (about &lt;a href="https://webaim.org/projects/million/#wcag"&gt;97.4% of websites have automatically detectable errors on their home pages!&lt;/a&gt; and we can only &lt;a href="https://accessibility.blog.gov.uk/2017/02/24/what-we-found-when-we-tested-tools-on-the-worlds-least-accessible-webpage/"&gt;capture about 40% of accessibility errors automatically&lt;/a&gt;!).&lt;/p&gt;

&lt;p&gt;So I am more than happy to say that is our yard stick for "when digital products load" if we can then provide controls to make things AAA rated...we will join a handful of companies in the world that have ever achieved that, so I think that is a fair compromise!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-next"&gt;
  &lt;/a&gt;
  So what is next?
&lt;/h2&gt;

&lt;p&gt;So now we have the base design (and after feedback from you!) we will finalise the base design and design outwards from there.&lt;/p&gt;

&lt;p&gt;The next thing I would normally design is a "style tile". If you haven't heard of it, it is essentially a single page branding guidelines with core principles demonstrated. There is a &lt;a href="http://styletil.es/"&gt;great site about style tiles&lt;/a&gt; if you want to learn more.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>6 Magical Python Tips For Developer</title>
      <author>codeifys</author>
      <pubDate>Tue, 10 Aug 2021 09:29:25 +0000</pubDate>
      <link>https://dev.to/codeifys/6-magical-python-tips-for-developer-18ki</link>
      <guid>https://dev.to/codeifys/6-magical-python-tips-for-developer-18ki</guid>
      <description>&lt;p&gt;There are two types of developers - Good developers and Smart Developers. Today I will discuss 20 Python tips and Tricks that will help to become Smart Developers. So let’s start with any further delays.&lt;/p&gt;
&lt;img alt="data science" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sCX0WOHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.programming-hero.com/blog/assets/images/blog/Alien%2520science-rafiki.png"&gt;&lt;br&gt;&lt;br&gt;&lt;h2&gt;1) Swapping numbers :&lt;/h2&gt;
&lt;p&gt;Swapping is an important concept when it comes to data structures and algorithms. Let’s see how we can swap numbers in Python,&lt;/p&gt;
&lt;p&gt;Normal Way:&lt;br&gt;Here we will need to create a temporary variable that we use to store value temporarily so that the other one gets empty and we can swap the values.&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    x=&lt;span class="hljs-number"&gt;5&lt;/span&gt;&lt;br&gt;
                                    y=&lt;span class="hljs-number"&gt;10&lt;/span&gt;&lt;br&gt;
                                    temp=x&lt;br&gt;
                                    x=y&lt;br&gt;
                                    y=temp&lt;br&gt;
                                    &lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(“The value &lt;span class="hljs-keyword"&gt;of&lt;/span&gt; x after swapping &lt;span class="hljs-keyword"&gt;is&lt;/span&gt;”,x)&lt;br&gt;
                                    &lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(“The value &lt;span class="hljs-keyword"&gt;of&lt;/span&gt; y after swapping &lt;span class="hljs-keyword"&gt;is&lt;/span&gt;”,y)&lt;br&gt;
                                &lt;/code&gt;&lt;br&gt;
                            &lt;/pre&gt;
&lt;p&gt;Now let me show you a simple trick to swap numbers in Python,&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    x = &lt;span class="hljs-number"&gt;5&lt;/span&gt;&lt;br&gt;
                                    y = &lt;span class="hljs-number"&gt;10&lt;/span&gt;&lt;br&gt;
                                    x, y = y, x&lt;br&gt;
                                    &lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(“The value &lt;span class="hljs-keyword"&gt;of&lt;/span&gt; x after swapping &lt;span class="hljs-keyword"&gt;is&lt;/span&gt;”,x)&lt;br&gt;
                                    &lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(“The value &lt;span class="hljs-keyword"&gt;of&lt;/span&gt; y after swapping &lt;span class="hljs-keyword"&gt;is&lt;/span&gt;”,y)&lt;br&gt;
                                &lt;/code&gt;&lt;br&gt;
                            &lt;/pre&gt;
&lt;p&gt;Wasn’t that simple?&lt;/p&gt;
&lt;h2&gt;2) Concatenating Strings&lt;/h2&gt;
&lt;p&gt;This is one of the useful and handy tricks. Let’s see how we can create a string from a list of characters. We will be using the join() method. Let’s check how it works,&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;characters&lt;/span&gt; = &lt;span class="hljs-string"&gt;[‘p’, ‘y’, ‘t’, ‘h’, ‘o’, ‘n’]&lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;word&lt;/span&gt; = &lt;span class="hljs-string"&gt;“”.join(characters)&lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;print(word)&lt;/span&gt;&lt;br&gt;
                                &lt;/code&gt;&lt;br&gt;
                            &lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    &lt;span class="hljs-attribute"&gt;Python&lt;/span&gt;&lt;br&gt;
                                &lt;/code&gt;&lt;br&gt;
                            &lt;/pre&gt;
&lt;h2&gt;3) Reversing a String&lt;/h2&gt;
&lt;p&gt;Trust me reversing a string can’t be much simpler than this, Watch out…. We will use a simple concept of string slicing and negative indexing. We know that python can have a negative index, we just slice it and don’t provide any starting and ending value, just give the range of -1, i.e it will start from the last index till the first one, thus will reverse it. .&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    word = “orehgnimmargorp”&lt;br&gt;
                                    &lt;span class="hljs-keyword"&gt;print&lt;/span&gt;(word[: : &lt;span class="hljs-number"&gt;-1&lt;/span&gt;])&lt;br&gt;
                                &lt;/code&gt;&lt;br&gt;
                            &lt;/pre&gt;
&lt;p&gt;Output:&lt;br&gt;programming hero&lt;/p&gt;
&lt;p&gt;Wasn’t that simple? Just simple slicing can get the work done.&lt;/p&gt;
&lt;h2&gt;4) Using ZIP with lists&lt;/h2&gt;
&lt;p&gt;Use the zip() function to combine several lists of the same length and print out the result.&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    language = [“python”, “java”, “c”]&lt;br&gt;
                                    creators = [“guido van rossum”, “james gosling”, “denis ricthie”]&lt;br&gt;
                                    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; language, creators &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; zip(language, creators):&lt;br&gt;
                                        print(language, creators)&lt;br&gt;
                                &lt;/code&gt;&lt;br&gt;
                            &lt;/pre&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;python&lt;/span&gt; &lt;span class="hljs-string"&gt;guido van rossum &lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;java&lt;/span&gt; &lt;span class="hljs-string"&gt;james gosling&lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;c&lt;/span&gt; &lt;span class="hljs-string"&gt;denis ricthie&lt;/span&gt;&lt;br&gt;
                                &lt;/code&gt;&lt;br&gt;
                            &lt;/pre&gt;
&lt;h2&gt;5) Converting lists into dictionary&lt;/h2&gt;
&lt;p&gt;This is one of the really useful tricks when you work on real projects on Django and Machine learning and more. Use zip() function like before, this time just invoke it in the dictionary constructor.&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;user&lt;/span&gt; = &lt;span class="hljs-string"&gt;[“Peter”, “John”, “Sam”]&lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;age&lt;/span&gt; = &lt;span class="hljs-string"&gt;[23,19,34]&lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;dictionary&lt;/span&gt; = &lt;span class="hljs-string"&gt;dict(zip(user, age))&lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-attr"&gt;print(dictionary)&lt;/span&gt;&lt;br&gt;
                                &lt;/code&gt;&lt;br&gt;
                            &lt;/pre&gt;
&lt;p&gt;Output :&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    {“Peter” : 23, “John” : 23, “Sam” : 34}&lt;br&gt;
                                &lt;/code&gt;&lt;br&gt;
                            &lt;/pre&gt;
&lt;h2&gt;6) The _ Operator&lt;/h2&gt;
&lt;p&gt;The _ operator might be something that you might not have heard of. Here _ is the output of the last executed expression. Let’s check how it works.&lt;/p&gt;
&lt;pre&gt;                                &lt;code&gt;&lt;br&gt;
                                    &lt;span class="hljs-meta"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="hljs-number"&gt;2&lt;/span&gt;+ &lt;span class="hljs-number"&gt;3&lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-number"&gt;5&lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-meta"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="hljs-number"&gt;_&lt;/span&gt;    &lt;span class="hljs-comment"&gt;# the _ operator, it will return the output of the last executed statement.&lt;/span&gt;&lt;br&gt;
                                    &lt;span class="hljs-meta"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="hljs-number"&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;&lt;br&gt;Article Was Originally Published to : &lt;br&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/10-magical-python-tips-for-every-developer/"&gt;10 Magical Python Tips For Every Developer&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>SvelteKit Blog SEO: Climb the Search Results Page</title>
      <author>Rodney Lab</author>
      <pubDate>Tue, 10 Aug 2021 09:00:02 +0000</pubDate>
      <link>https://dev.to/askrodney/sveltekit-blog-seo-climb-the-search-results-page-o3p</link>
      <guid>https://dev.to/askrodney/sveltekit-blog-seo-climb-the-search-results-page-o3p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#sveltekit-blog-seo"&gt;
  &lt;/a&gt;
  ✨ SvelteKit Blog SEO
&lt;/h2&gt;

&lt;p&gt;Today we'll look at the updated SvelteKit starter to nail your SvelteKit Blog SEO.  We &lt;a href="https://rodneylab.com/sveltekit-blog-starter/"&gt;looked at the MDsveX Blog starter itself&lt;/a&gt; in an earlier post and saw how to fire it up, what files the starter includes and so on.  Since then I &lt;a href="https://rodneylab.com/sveltekit-pwa/"&gt;added Progressive Web App (PWA) functionality &lt;/a&gt;  to it.  In between the two we had a series of posts on SvelteKit Search Engine Optimisation (SEO). The series covered a &lt;a href="https://rodneylab.com/sveltekit-seo/"&gt;range of topics from why SEO is important to getting nice images in the Tweet&lt;/a&gt; when a visitor shares a link to your site on Twitter.  We also looked at &lt;a href="https://rodneylab.com/open-graph-seo-sveltekit/"&gt;how to get preview cards to show up in messaging apps using Open Graph&lt;/a&gt;.  The series ended with a &lt;a href="https://rodneylab.com/adding-schema-org-markup-to-sveltekit-site/"&gt;look at Schema.org and how to get the search engines to understand what you site is about&lt;/a&gt;, and make it more likely that search engines will feature your site.&lt;/p&gt;

&lt;p&gt;The first post in the series included a poll on whether to include SEO components in the MDsveX starter.  Thanks if you voted!  The people spoke and asked me to include the components. I have set about updating the starter.  This post takes a look at how you can customise the starter to include the SEO meta you want on your blog site pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mdsvex-sveltekit-blog-starter-seo"&gt;
  &lt;/a&gt;
  🔌 MDsveX SvelteKit Blog Starter SEO
&lt;/h2&gt;

&lt;p&gt;MDsveX just means you can write blog posts in markdown with Svelte code included.  It is a similar idea to MDX (JSX in Markdown).  The starter includes some placeholder blog posts.  You add your own blog posts by creating a directory under &lt;code&gt;src/routes/my-blog-post-slug/&lt;/code&gt; and adding content to a &lt;code&gt;index.md&lt;/code&gt; file within that new folder.  If we open up &lt;code&gt;src/routes/twin-lens-reflex-camera/index.md&lt;/code&gt; we see one of the placeholder blog posts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
postTitle: 'Twin Lens Reflex Camera'
focusKeyphrase: 'Twin Lens Reflex love'
datePublished: '2021-04-06T10:31:48.000+0100'
lastUpdated: '2021-04-14T10:17:52.000+0100'
seoMetaDescription: 'TLR or Twin Lens Reflex Cameras have the benefit of you being able to hold the camera at waist level to take a picture and get a more engaging camera angle.'
featuredImage: 'twin-lens-reflex-camera.jpg'
featuredImageAlt: 'Photograph of a Rolleicord twin Lens reflex camera'
ogImage: 'twin-lens-reflex-camera-open-graph.jpg'
ogSquareImage: 'twin-lens-reflex-camera-open-graph-square.jpg'
twitterImage: 'twin-lens-reflex-camera-twitter.jpg'
categories: ''
&lt;span class="gh"&gt;tags: ''
--------
&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  import ExternalLink from '$lib/components/ExternalLink.svelte';
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="gu"&gt;## What is a Twin Lens Reflex Camera?&lt;/span&gt;

Traditionally, the most common type of camera was a Single Lens Reflex camera. Today digital mirrorless cameras are becoming more prevalent. These cameras have an electronic viewfinder which lets you see exactly what will appear in the capture. Things weren't that easy with earlier film cameras. The image needs to be captured on light sensitive film, which must be kept in alight-sealed compartment until you press the shutter release. Since the lens is aligned for capturing your image on the film, you need another way to preview and line up your shot. Single Lens Reflex cameras have view finder, normally at the top of the camera. A mirror inside the camera reflects the image into the viewfinder, deflecting from the film, while you line up your shot. When you fire the shutter, the camera automatically lifts the mirror out of the way before opening the shutter, so that the image can be captured.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From line &lt;code&gt;20&lt;/code&gt; down the file is mostly markdown.  Lines &lt;code&gt;16&lt;/code&gt;–&lt;code&gt;18&lt;/code&gt; use Svelte to include a Svelte component which the post later uses.  The first section (lines &lt;code&gt;1&lt;/code&gt;–&lt;code&gt;14&lt;/code&gt;) is most important as regards SEO.  This is the frontmatter and includes post metadata.  Some fields here are used in the starter's SEO component.  Namely: &lt;code&gt;postTitle&lt;/code&gt;, the dates, &lt;code&gt;seoMetaDescription&lt;/code&gt; and the images.  The fields' data populate the SEO meta tags which Twitter, Facebook and Search engines check for.  So, for each new post you write, it is important to include these, customised for that post's images and data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#social-images"&gt;
  &lt;/a&gt;
  Social Images
&lt;/h3&gt;

&lt;p&gt;Let's look a bit closer at the images.  These are the images which will appear when the post is shared on various social platforms.  As we saw in the SEO series, they are used widely in apps and platforms beyond Facebook and Twitter.  The starter is setup to use Imgix for image hosting and to generate Next-Gen image formats compatible with the user's browser. You can use another source and we will look at what you need to change for other image sources in a moment.  Anyway for now, all you need to know is that the values defined here for images are just the filename in our Imgix storage folder.&lt;/p&gt;

&lt;p&gt;Besides, frontmatter, the other main source of data for the SEO component is the &lt;code&gt;src/lib/config/website.js&lt;/code&gt; file.  You will see some components import data from here.  In turn that data is sourced from the &lt;code&gt;.env&lt;/code&gt; file.  This saves committing potentially private data to your site's repo.  Before you fire up your site, copy the &lt;code&gt;.env.EXAMPLE&lt;/code&gt; file in the project root folder to &lt;code&gt;.env&lt;/code&gt; and customise for your own site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%8B-blogpost-component"&gt;
  &lt;/a&gt;
  🖋 BlogPost Component
&lt;/h2&gt;

&lt;p&gt;Within the BlogPost component (&lt;code&gt;src/lib/components/BlogPost.svelte&lt;/code&gt;), the filenames used in the posts themselves for social images are converted into URLs.  Here is an example for the featured image.  The &lt;code&gt;featuredImage&lt;/code&gt; variable is the same as the one defined in the post's markdown:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  const featuredImageUrl = client.buildURL(featuredImage, { w: 672, h: 448 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using the Imgix plugin to generate the URL.  If you do not want to use Imgix to host your images, just assign the URL for the image source to &lt;code&gt;featuredImageUrl&lt;/code&gt; here.  You can do similarly for the Twitter and Open Graph images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seo-meta-tags"&gt;
  &lt;/a&gt;
  🤖 SEO Meta Tags
&lt;/h2&gt;

&lt;p&gt;The SEO meta tags are generated by components in the &lt;code&gt;src/lib/components/SEO&lt;/code&gt; folder.  Take a look in here if you want to include more or fewer meta tags.  Here is the Twitter component as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;twitterUsername&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeToRead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/*
   * When there is an equivalent og tag present, Twitter takes that so check OpenGraph before
   * adding additional tags, unless you want to override OpenGraph.
   */&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;svelte:head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"summary_large_image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {#if image}
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:image"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{image.url}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {/if}
  {#if twitterUsername}
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:creator"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{`@${twitterUsername}`}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:site"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{`@${twitterUsername}`}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {/if}
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:label1"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Written by"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:data1"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{author}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {#if article &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; timeToRead &amp;gt; 0}
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:label2"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Est. reading time"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:data2"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;{timeToRead&lt;/span&gt; &lt;span class="err"&gt;!==&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;`${&lt;/span&gt;&lt;span class="na"&gt;timeToRead&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;minutes&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="na"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'1&lt;/span&gt; &lt;span class="na"&gt;minute&lt;/span&gt;&lt;span class="err"&gt;'}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {/if}
&lt;span class="nt"&gt;&amp;lt;/svelte:head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to check your work once you have finished tinkering!  There are links to testing tools in the SEO posts mentioned above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-blog-seo-wrapup"&gt;
  &lt;/a&gt;
  🙌🏽 SvelteKit Blog SEO: Wrapup
&lt;/h2&gt;

&lt;p&gt;In this post we took a look at how to customise the SEO meta generated by the MDsveX starter.  It might seem a little abstract until you customise it for your own projects, so I would definitely say try using it as a next step.  As always I am keen to get feedback and to hear how you have used it.  You can &lt;a href="https://github.com/rodneylab/sveltekit-blog-mdx"&gt;clone the entire repo from the Rodney Lab Git Page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-blog-seo-feedback"&gt;
  &lt;/a&gt;
  🙏🏽 SvelteKit Blog SEO: Feedback
&lt;/h2&gt;

&lt;p&gt;Have you found the post useful? Would you like to see posts on another topic instead? Get in touch with ideas for new posts. Also if you like my writing style, get in touch if I can write some posts for your company site on a consultancy basis. Read on to find ways to get in touch, further below. If you want to support posts similar to this one and can spare a couple of dollars, rupees, euros or pounds, please &lt;a href="https://rodneylab.com/giving/"&gt;consider supporting me through Buy me a Coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see &lt;a href="https://rodneylab.com/contact"&gt;further ways to get in touch with Rodney Lab&lt;/a&gt;. I post regularly on &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;SvelteKit&lt;/a&gt; as well as other topics. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>seo</category>
    </item>
    <item>
      <title>Implementing Domain Driven Design: Part I</title>
      <author>Salah Elhossiny</author>
      <pubDate>Tue, 10 Aug 2021 08:32:39 +0000</pubDate>
      <link>https://dev.to/salah856/implementing-domain-driven-design-part-i-5a72</link>
      <guid>https://dev.to/salah856/implementing-domain-driven-design-part-i-5a72</guid>
      <description>&lt;h1&gt;
  &lt;a href="#simple-code"&gt;
  &lt;/a&gt;
  Simple Code!
&lt;/h1&gt;

&lt;p&gt;Playing football is very simple, but playing simple football is the hardest thing there is. — Johan Cruyff&lt;/p&gt;

&lt;p&gt;If we take this famous quote for programming, we can say;&lt;/p&gt;

&lt;p&gt;Writing code is very simple, but writing simple code is the&lt;br&gt;
hardest thing there is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-domain-driven-design"&gt;
  &lt;/a&gt;
  What is the Domain Driven Design?
&lt;/h2&gt;

&lt;p&gt;Domain-driven design (DDD) is an approach to software&lt;br&gt;
development for complex needs by connecting the implementation to an evolving model;&lt;/p&gt;

&lt;p&gt;DDD is suitable for complex domains and large-scale applications rather than simple CRUD applications. &lt;/p&gt;

&lt;p&gt;It focuses on the core domain logic rather than the infrastructure details. It helps to build a ﬂexible, modular and maintainable code base.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oop-amp-solid"&gt;
  &lt;/a&gt;
  OOP &amp;amp; SOLID
&lt;/h2&gt;

&lt;p&gt;Implementing DDD highly relies on the Object Oriented&lt;br&gt;
Programming (OOP) and SOLID principles. &lt;/p&gt;

&lt;p&gt;Actually, it implements and extends these principles. So, a good understanding of OOP &amp;amp; SOLID helps you a lot while truly&lt;br&gt;
implementing the DDD.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ddd-layers-amp-clean-architecture"&gt;
  &lt;/a&gt;
  DDD Layers &amp;amp; Clean Architecture
&lt;/h2&gt;

&lt;p&gt;There are four fundamental layers of a Domain Driven&lt;br&gt;
Based Solution. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vT8Jymsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irqyc0dznw8igamysj6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vT8Jymsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irqyc0dznw8igamysj6p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Business Logic places into two layers, the Domain layer and&lt;br&gt;
the Application Layer, while they contain different kinds of&lt;br&gt;
business logic;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Domain Layer implements the core, use-case independent business logic of the domain/system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Application Layer implements the use cases of the application based on the domain. A use case can be thought as a user interaction on the User Interface (UI).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Presentation Layer contains the UI elements (pages, components) of the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Infrastructure Layer supports other layer by implementing the abstractions and integrations to 3rd-party library and systems.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same layering can be shown as the diagram below and known as the Clean Architecture, or sometimes the Onion Architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raQo-u04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/450vmau8umxq67sxp78d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raQo-u04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/450vmau8umxq67sxp78d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#core-building-blocks"&gt;
  &lt;/a&gt;
  Core Building Blocks
&lt;/h2&gt;

&lt;p&gt;DDD mostly focuses on the Domain &amp;amp; Application Layers and ignores the Presentation and Infrastructure. They are seen as details and the business layers should not depend on them. &lt;/p&gt;

&lt;p&gt;That doesn't mean the Presentation and Infrastructure layers are not important. &lt;/p&gt;

&lt;p&gt;They are very important. UI frameworks and database providers have their own rules and best practices that you need to know and apply. However these are not in the topics of DDD.&lt;/p&gt;

&lt;p&gt;This section introduces the essential building blocks of the Domain &amp;amp; Application Layers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#domain-layer-building-blocks"&gt;
  &lt;/a&gt;
  Domain Layer Building Blocks
&lt;/h2&gt;

&lt;p&gt;● Entity: An Entity is an object with its own properties (state, data) and methods that implements the business logic that is executed on these properties. An entity is represented by its unique identiﬁer (Id). Two entity object with different Ids are considered as different entities.&lt;/p&gt;

&lt;p&gt;● Value Object: A Value Object is another kind of domain object that is identiﬁed by its properties rather than a unique Id. That means two Value Objects with same properties are considered as the same object. Value objects are generally implemented as immutable and mostly are much simpler than the Entities.&lt;/p&gt;

&lt;p&gt;● Aggregate &amp;amp; Aggregate Root: An Aggregate is a cluster of objects (entities and value objects) bound together by an Aggregate Root object. The Aggregate Root is a speciﬁc type of an entity with some additional responsibilities.&lt;/p&gt;

&lt;p&gt;● Repository (interface): A Repository is a collection-like&lt;br&gt;
interface that is used by the Domain and Application Layers to access to the data persistence system (the database). It hides the complexity of the DBMS from the business code. Domain Layer contains the interface s of the repositories.&lt;/p&gt;

&lt;p&gt;● Domain Service: A Domain Service is a stateless service that implements core business rules of the domain. It is&lt;br&gt;
useful to implement domain logic that depends on multiple aggregate (entity) type or some external services.&lt;/p&gt;

&lt;p&gt;● Speciﬁcation: A Speciﬁcation is used to deﬁne named, reusable and combinable ﬁlters for entities and other business objects.&lt;/p&gt;

&lt;p&gt;● Domain Event: A Domain Event is a way of informing other services in a loosely coupled manner, when a domain speciﬁc event occurs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-layer-building-blocks"&gt;
  &lt;/a&gt;
  Application Layer Building Blocks
&lt;/h2&gt;

&lt;p&gt;● Application Service: An Application Service is a stateless&lt;br&gt;
service that implements use cases of the application. An application service typically gets and returns DTOs. It is used by the Presentation Layer. It uses and coordinates the domain objects to implement the use cases. A use case is typically considered as a Unit Of Work.&lt;/p&gt;

&lt;p&gt;● Data Transfer Object (DTO): A DTO is a simple object without any business logic that is used to transfer state (data) between the Application and Presentation Layers.&lt;/p&gt;

&lt;p&gt;● Unit of Work (UOW): A Unit of Work is an atomic work that should be done as a transaction unit. All the operations inside a UOW should be committed on success or rolled back on a failure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-the-big-picture"&gt;
  &lt;/a&gt;
  Implementation: The Big Picture
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#layering-of-a-net-solution"&gt;
  &lt;/a&gt;
  Layering of a .NET Solution
&lt;/h3&gt;

&lt;p&gt;The picture below shows a Visual Studio Solution created using the &lt;a href="https://docs.abp.io/en/abp/latest/Startup-Templates/Application"&gt; ABP's application startup template &lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kxgC7wiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17pk6iydsy2ynw6rgzov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kxgC7wiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17pk6iydsy2ynw6rgzov.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-domain-layer"&gt;
  &lt;/a&gt;
  The Domain Layer
&lt;/h3&gt;

&lt;p&gt;The Domain Layer is splitted into two projects;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IssueTracking.Domain is the essential domain layer that
contains all the building blocks (entities, value objects,
domain services, speciﬁcations, repository interfaces, etc.)
introduced before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;● IssueTracking.Domain.Shared is a thin project that contains some types those belong to the Domain Layer, but shared with all other layers. For example, it may contain some constants and enums related to the Domain Objects but need to be reused by other layers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-application-layer"&gt;
  &lt;/a&gt;
  The Application Layer
&lt;/h3&gt;

&lt;p&gt;The Application Layer is also splitted into two projects;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IssueTracking.Application.Contracts contains the application service interfaces and the DTOs used by these interfaces. This project can be shared by the client applications (including the UI).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IssueTracking.Application is the essential application&lt;br&gt;
layer that implements the interfaces deﬁned in the Contracts project.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-presentation-layer"&gt;
  &lt;/a&gt;
  The Presentation Layer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;IssueTracking.Web is an ASP.NET Core MVC / Razor Pages application for this example. This is the only executable application that serves the application and the APIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-remote-service-layer"&gt;
  &lt;/a&gt;
  The Remote Service Layer
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IssueTracking.HttpApi project contains HTTP APIs deﬁned by the solution. It typically contains MVC Controllers and related models, if available. So, you write your HTTP APIs in this project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IssueTracking.HttpApi.Client project is useful when you&lt;br&gt;
have a C# application that needs to consume your HTTP APIs. Once the client application references this project, it can directly inject &amp;amp; use the Application Services. This is possible by the help of the ABP Framework's Dynamic C# Client API Proxies System.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-infrastructure-layer"&gt;
  &lt;/a&gt;
  The Infrastructure Layer
&lt;/h3&gt;

&lt;p&gt;In a DDD implementation, you may have a single Infrastructure&lt;br&gt;
project to implement all the abstractions and integrations, or you may have different projects for each dependency.&lt;/p&gt;

&lt;p&gt;We suggest a balanced approach; Create separate projects for&lt;br&gt;
main infrastructure dependencies (like Entity Framework Core)&lt;br&gt;
and a common infrastructure project for other infrastructure.&lt;/p&gt;

&lt;p&gt;ABP's startup solution has two projects for the Entity&lt;br&gt;
Framework Core integration;&lt;/p&gt;

&lt;p&gt;● IssueTracking.EntityFrameworkCore is the essential integration package for the EF Core. Your application's DbContext, database mappings, implementations of the repositories and other EF Core related stuff are located here.&lt;/p&gt;

&lt;p&gt;● IssueTracking.EntityFrameworkCore.DbMigrations is a special project to manage the Code First database migrations. There is a separate DbContext in this project to track the migrations. You typically don't touch this project much except you need to create a new database migration or add an application module that has some database tables and naturally requires to create a new database migration.&lt;/p&gt;

&lt;p&gt;There is one more project, IssueTracking.DbMigrator, that is a simple Console Application that migrates the database schema and seeds the initial data when you execute it. &lt;/p&gt;

&lt;p&gt;It is a useful utility application that you can use it in development as well as in production environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependencies-of-the-projects-in-the-solution"&gt;
  &lt;/a&gt;
  Dependencies of the Projects in the Solution
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55pY2DTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zaci8cj7ec87j1wxs4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55pY2DTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zaci8cj7ec87j1wxs4e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#execution-flow-of-a-ddd-based-application"&gt;
  &lt;/a&gt;
  Execution Flow of a DDD Based Application
&lt;/h2&gt;

&lt;p&gt;The ﬁgure below shows a typical request ﬂow for a web app that has been developed based on DDD patterns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--APSipIiy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ls87tb7edzwth6u4g7c1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--APSipIiy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ls87tb7edzwth6u4g7c1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● The request typically begins with a user interaction on the UI (a use case) that causes an HTTP request to the server.&lt;/p&gt;

&lt;p&gt;● An MVC Controller or a Razor Page Handler in the Presentation Layer (or in the Distributed Services Layer) handles the request and can perform some cross cutting concerns in this stage (Authorization, Validation, Exception Handling, etc.). &lt;br&gt;
A Controller/Page injects the related Application Service interface and calls its method(s) by sending and receiving DTOs.&lt;/p&gt;

&lt;p&gt;● The Application Service uses the Domain Objects (Entities, Repository interfaces, Domain Services, etc.) to implement the use case. Application Layer implements some cross cutting concerns (Authorization, Validation, etc.). An Application Service method should be a Unit Of Work. That means it should be atomic.&lt;/p&gt;

&lt;p&gt;Most of the cross cutting concerns are automatically and conventionally implemented by the ABP Framework and you typically don't need to write code for them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-provider-orm-independence"&gt;
  &lt;/a&gt;
  Database Provider / ORM Independence
&lt;/h3&gt;

&lt;p&gt;The domain and the application layers should be ORM/DB Provider agnostic. &lt;/p&gt;

&lt;p&gt;They should only depend on the Repository interfaces and the Repository interfaces don't use any ORM speciﬁc objects.&lt;/p&gt;

&lt;p&gt;Here, the main reasons of this principle;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To make your domain/application infrastructure independent since the infrastructure may change in the future or you may need to support a second database type later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make your domain/application focus on the business&lt;br&gt;
code by hiding the infrastructure details behind the repos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make your automated tests easier since you can mock the repos in this case.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://abp.io/"&gt; ABP Framework &lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>App Developer Roadmap 2021</title>
      <author>codeifys</author>
      <pubDate>Tue, 10 Aug 2021 07:51:35 +0000</pubDate>
      <link>https://dev.to/codeifys/app-developer-roadmap-2021-5hgd</link>
      <guid>https://dev.to/codeifys/app-developer-roadmap-2021-5hgd</guid>
      <description>&lt;h2&gt;What is App Development?&lt;/h2&gt;
&lt;p&gt;App Development refers to the creation of computer applications for use on mobile devices such as tablets, smartphones and smart watches. Mobile device features such as cameras, motion and location awareness can be used to create unique and inventive mobile-only applications for things such as taxi and bike sharing.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mobile devices typically have popular apps for searching, browsing and social media preinstalled and users can download and install additional apps from Google Play (Android) and the Apple App Store (iOS). Mobile applications are designed and built for different operating systems and developers will want to learn how to build for both the Android operating system and Apple’s iOS.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;To learn android development from starting to become pro. You can follow these steps:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;Learn Kotlin (atleast basics) ( If you have no experience in Java programming or starting from scratch. else, You can continue with Java). My suggestion is to choose Kotlin as programming language for native android app development because Kotlin is official language since 2017 and all industries are shifting from Java to Kotlin for android development point of view.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Now, Time to install Android Studio. It is official IDE( Integrated Development Environment) for native android app development.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Get familiar with all Android Studio menus, controls and file structure. (Use 20–80 rules to starting you journey as a android developer)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about all basic views in XML and how to use them with best practices. How to modify and change the property of view at run time using Java and Kotlin program. (Learn about TextView, EditText, Button, LinearLayout)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about some more advance view and concepts like ListView, RecyclerView, ImageView and their implementations.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about Cursor, SQlite Database.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Now, It's time to check your learning. Develop some basic apps like todo app, note taking app using SQLite database.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn about third party libraries for making life easier and saving your time.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn implementations of retrofit, volley or okhttp to consume rest api for building networking app like social media, online note taking app, weather app etc.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn, how to play video and audio and view PDFs.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn advance concept like architecture pattern, costum view&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Congratulations, You are now a pro android developer.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;These steps you can learn any time, you wish:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span&gt;How to build and generate apk and app bundle&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;How to deploy on google play store&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn debugging&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Learn automated testing of android app&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Publish app on play store&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Build some cool and innovative projects and publish it.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span&gt;Make sure to use Git / GitHub for version controlling, collaborating and remote working.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Note: It is my personal experience in android development. If you find anything wrong in this you can connect and message on discussion box .&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;You can visit Originally Published for More queries: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/app-developer-roadmap/"&gt;App development roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>kotlin</category>
      <category>java</category>
    </item>
    <item>
      <title>Making Horizontal Mouse Scrolling With HTML, CSS, and JavaScript</title>
      <author>Ismaili Simba</author>
      <pubDate>Tue, 10 Aug 2021 07:50:12 +0000</pubDate>
      <link>https://dev.to/ismailisimba/making-horizontal-mouse-scrolling-with-html-css-and-javascript-3n2i</link>
      <guid>https://dev.to/ismailisimba/making-horizontal-mouse-scrolling-with-html-css-and-javascript-3n2i</guid>
      <description>&lt;p&gt;I recently came across a beautiful html5 template featuring horizontal mouse scrolling &lt;a href="https://html5up.net/ethereal"&gt;here&lt;/a&gt;. I'm not sure how they do it, so instead of trying to find that out, like any self-respecting coder I decided to come up with my own "better way".&lt;/p&gt;

&lt;p&gt;You can judge the results for yourself &lt;a href="https://github.com/ismailisimba/afrika1"&gt;here!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now with the inspirational story out of the way, here's how I did it. View the sample &lt;a href="https://ismailisimba.github.io/horizontalmousescrolling/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, the HTML. You'll need an outer container element, an inner container element and then your items will go in this inner container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-code"&gt;
  &lt;/a&gt;
  HTML Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"outercontainer"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="na"&gt;scrl1&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"innercontainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Used&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;To&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Rule&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;The&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;World&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Seas&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Would&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Rise&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;When&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, the CSS. The important thing to note here is if the viewport is scrollable, then by default whenever the wheel is scrolled, the page will scroll vertically. To prevent this, just make sure all content fits within the viewport vertically. Then, we make the outer container scrollable and the inner container non scrollable. We also hide the scrollbar so you can't scroll manually unless its a touch device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  CSS Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nc"&gt;.outercontainer&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="py"&gt;scrollbar-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="nl"&gt;-ms-overflow-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.outercontainer&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

    &lt;span class="nc"&gt;.innercontainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;85vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;269px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;96%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6.69%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;large&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the Javascript. We bundle all our functions inside &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event"&gt;window.onload&lt;/a&gt; to ensure our HTML is loaded before the script starts. We then assign the document's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel"&gt;onwheel&lt;/a&gt; event to our customScrollFunction. Every time the event happens (a wheel scroll), our function is called. Then we read the event's deltaY value. If this value is negative the wheel is going down and if its positive then the wheel is going up. We use a simple if to scroll our container left or right accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-code-client-side"&gt;
  &lt;/a&gt;
  JavaScript Code - Client Side
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onwheel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;customScrollFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;customScrollFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deltaY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deltaY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deltaYSign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deltaY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deltaYSign&lt;/span&gt;&lt;span class="o"&gt;==-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrl1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;scrollBy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrl1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;scrollBy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>design</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Introduction to WebRTC</title>
      <author>Ponikar</author>
      <pubDate>Tue, 10 Aug 2021 07:23:25 +0000</pubDate>
      <link>https://dev.to/ponikar/introduction-to-webrtc-3kn8</link>
      <guid>https://dev.to/ponikar/introduction-to-webrtc-3kn8</guid>
      <description>&lt;p&gt;Hey there, I hope you are safe. So today we are going to talk about WebRTC. (Web Real Time Communication)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WebRTC allows you to perform Peer to Peer real-time communication without bothering the Server.&lt;/strong&gt; Yes, You read it right, You can perform &lt;strong&gt;Peer to Peer communication&lt;/strong&gt; and &lt;strong&gt;share media stream like Audio, Video and arbitrary data&lt;/strong&gt; in real-time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5VKbvrjxpVJCM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5VKbvrjxpVJCM/giphy.gif" alt="Introduction to WebRTC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-do-that"&gt;
  &lt;/a&gt;
  How do we do that?
&lt;/h2&gt;

&lt;p&gt;So before we can move forward to WebRTC. Let's talk about Socket Connections. &lt;strong&gt;Web Sockets allows us to send/receive real-time event at client side&lt;/strong&gt; that we know that. We established socket connection with Socket Server and then we can broadcast/receive events from/to Server.&lt;/p&gt;

&lt;p&gt;We are connected with server. Let's say 2 Clients(Peers) are connected with Server. So, the communication is happening through Server. &lt;strong&gt;Server is responsible for that Socket Connection.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;because of this reason, peers may sometimes experience of &lt;strong&gt;connectivity issue, Message lost and Message delay.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-that-something-like-magic"&gt;
  &lt;/a&gt;
  Is that something like Magic?
&lt;/h3&gt;

&lt;p&gt;Hold on, before we send any data to our peer, &lt;strong&gt;we need to make a connection&lt;/strong&gt; and that is a challenging task for developers to &lt;strong&gt;established WebRTC connection between two peer.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signalling"&gt;
  &lt;/a&gt;
  Signalling
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Signalling is the way to exchange information between peers in order to establish connection.&lt;/strong&gt; This information contains SDP, ICE candidates, User Information etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signalling can be done via Sockets, Real time Database like Firestore etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can always &lt;strong&gt;make your signalling Logic&lt;/strong&gt; to make connection across peers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-make-connection-negotiation"&gt;
  &lt;/a&gt;
  How to make Connection? Negotiation
&lt;/h3&gt;

&lt;p&gt;The process start with Making an Offer. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;Peer A create an Offer&lt;/strong&gt; in order to communicate with Peer B. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Peer B need to accept the offer&lt;/strong&gt; and send back to the Answer of the Offer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peer A accept the Answer.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;This process is known as Negotiation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Negotiation is process in which Peers negotiate about which kind of data they want to exchange (i.e Media Streams, Arbitrary Data) and the best way to exchange that data between two devices.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In general Negotiation &lt;strong&gt;let Peers decide what type of Data they want to exchange,&lt;/strong&gt; before the connection establish between Peers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sdp-session-description-protocol"&gt;
  &lt;/a&gt;
  SDP (Session Description Protocol)
&lt;/h3&gt;

&lt;p&gt;Offer/Answer is known as &lt;strong&gt;SDP (Session Description Protocol).&lt;/strong&gt; SDP is a format that describe multimedia connections and Sessions across peers. &lt;strong&gt;You can assume SDP as ordinary Browser based Sessions.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;createOffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Output of below code SDP Offer&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;offer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sdp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;v=0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;o=- 6306366628372337755 2 IN IP4 127.0.0.1&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;s=-&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;t=0 0&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;a=extmap-allow-mixed&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;a=msid-semantic: WMS&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Once the negotiations has been done, Peers can now communicate with each other.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#okay-show-some-codes-now"&gt;
  &lt;/a&gt;
  Okay! Show some codes now.
&lt;/h3&gt;

&lt;p&gt;It's time to write some codes. &lt;strong&gt;We are going to make WebRTC Connection between Peer A and Peer B.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am assuming that We are having &lt;strong&gt;socket connection between two peer.&lt;/strong&gt; We are going to use this &lt;strong&gt;Sockets as Signalling server.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Creating a &lt;strong&gt;global connection object&lt;/strong&gt; so we can use it later in functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting up &lt;strong&gt;ICE candidate Listeners&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onicecandidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// signalling ICE candidates to Peer B whenever we get it.&lt;/span&gt;
   &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ice-candidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Adding Ice Candidates&lt;/strong&gt; to the connection &lt;strong&gt;whenever we get over Signalling.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ice-candidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addIceCandidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 1: &lt;strong&gt;Peer A Creating and Signalling the Offer&lt;/strong&gt; for Peer B.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeOffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// creating offer &lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// setting up offer as Peer's Local Description&lt;/span&gt;
      &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// signalling offer with Sockets&lt;/span&gt;
      &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;offer-created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;offer&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2: &lt;strong&gt;Peer B Accepting Offer and Signalling the Answer&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;acceptOffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// setting up offer as Remote Description&lt;/span&gt;
     &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCSessionDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// creating answer &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAnswer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="c1"&gt;// setting up answer as Local Description.&lt;/span&gt;
    &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;// signalling the answer&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;answer-added&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 3: &lt;strong&gt;Peer A Saving an Answer&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savingAnswer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// lastly, setting up Remote Description of Peer A&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCSessionDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, You have created Peer to Peer Connection. Now both peer can exchange data with each other.&lt;/p&gt;

&lt;p&gt;Throughout this process &lt;strong&gt;both connections have shared ICE candidates with each other.&lt;/strong&gt; That's why we have added Listeners and Signalling whenever we get an ICE candidates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exchange-arbitrary-data-between-two-peers"&gt;
  &lt;/a&gt;
  Exchange Arbitrary data between two peers.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We can create a data channel of connection&lt;/strong&gt; and then we can send and receive data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peer A can create Data Channel.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;DataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createDataChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;meeting-chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Peer B can listen for that Data Channel&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ondatachannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;DataChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Send and Receive Messages&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// listening for message&lt;/span&gt;
&lt;span class="nx"&gt;DataChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I got message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// sending message&lt;/span&gt;
&lt;span class="nx"&gt;DataChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey Peer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: we need to &lt;strong&gt;create data channel before peers start communication with each other.&lt;/strong&gt; Otherwise both &lt;strong&gt;peers need to renegotiate.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If peers need to renegotiate, we can listen for that event&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this method can be called anytime if Peers need to &lt;/span&gt;
&lt;span class="c1"&gt;// perform negotiations again.&lt;/span&gt;
&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onnegotiationneeded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Please start the negotiation process again&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Sending Media Streaming&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendStream&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// browser navigator API to fetch media stream&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="c1"&gt;// sending media tracks to peers&lt;/span&gt;
     &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTracks&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newStream&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Receiving Media Streams&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ontrack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// you can use this media stream with &amp;lt;video&amp;gt; tag&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey I got Media Streams&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h3&gt;

&lt;p&gt;If you are &lt;strong&gt;stuck somewhere and want to debug&lt;/strong&gt; your WebRTC connection, you can debug with in your browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;brave://webrtc-internals
chrome://webrtc-internals
about:webrtc &lt;span class="c"&gt;&amp;lt;!-- For Firefox --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. That was &lt;strong&gt;basic implementation WebRTC connections.&lt;/strong&gt; Still If you &lt;strong&gt;want to know more about WebRTC and How does it works under the hood,&lt;/strong&gt; You need to understand the &lt;strong&gt;network terminologies.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#network-terminologies"&gt;
  &lt;/a&gt;
  Network Terminologies
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Network_address_translation"&gt;NAT (Network Address Translation)&lt;/a&gt; &lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/STUN"&gt;STUN&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT"&gt;TURN (Traversal Using Relays Around NAT)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment"&gt;ICE Candidates&lt;/a&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Session_Description_Protocol"&gt;SDP (Session Description Protocol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this blog would help you to understand How can you use WebRTC in your next Project.&lt;/p&gt;

&lt;p&gt;If you want to add on something, &lt;strong&gt;please feel free to leave comment.&lt;/strong&gt; Also Tell me in the comment section which part did you like most.&lt;/p&gt;

&lt;p&gt;Thank you,&lt;br&gt;
Darshan Ponikar&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/GB0lKzzxIv1te/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/GB0lKzzxIv1te/giphy.gif" alt="WebRTC Introduction"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webrtc</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
