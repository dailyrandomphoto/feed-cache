<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Styled Text Package</title>
      <author>flutterCode</author>
      <pubDate>Sun, 26 Dec 2021 14:33:50 +0000</pubDate>
      <link>https://dev.to/mmanflori/styled-text-package-185b</link>
      <guid>https://dev.to/mmanflori/styled-text-package-185b</guid>
      <description>&lt;p&gt;Keine Anwendung kommt ohne Texte aus. Diese Texte zu formatieren ist dementsprechend eine immer wiederkehrende Aufgabe. Flutter hat daf√ºr ohne Zweifel gute Bordmittel. Aber wenn es darum geht gr√∂√üere Textmengen zu bearbeiten wird es rasch aufwendig.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pub.dev/publishers/amazingsoftworks.com"&gt;amazingsoftworks&lt;/a&gt; hat f√ºr diese Problemstellung eine interessante Package ver√∂ffentlicht.&lt;br&gt;
&lt;a href="https://pub.dev/packages/styled_text"&gt;styled_text&lt;/a&gt; erm√∂glicht das Formatieren eines Textes, √§hnlich wie man es aus Html kennt. Das heisst, es werden Tags verwendet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TextKonserve&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;StyledText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;text:&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;italic&amp;gt;Dies ist ein&amp;lt;/italic&amp;gt; &amp;lt;bold&amp;gt;Test !&amp;lt;/bold&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;tags:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'bold'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StyledTextTag&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;fontFamily:&lt;/span&gt; &lt;span class="s"&gt;'Raleway'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w700&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontStyle:&lt;/span&gt; &lt;span class="n"&gt;FontStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;)),&lt;/span&gt;
        &lt;span class="s"&gt;'italic'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;StyledTextTag&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;fontFamily:&lt;/span&gt; &lt;span class="s"&gt;'Raleway'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontStyle:&lt;/span&gt; &lt;span class="n"&gt;FontStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;italic&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;w700&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Im Code oben ist das Prinzip sch√∂n zu sehen. &lt;strong&gt;text:&lt;/strong&gt; enth√§lt die zu formatierende Zeichenkette.&lt;strong&gt;StyledTextTag&lt;/strong&gt; √ºbernimmt dabei ein &lt;strong&gt;TextStyle&lt;/strong&gt; Widget, welches die eigentliche Formatierung enth√§lt.&lt;/p&gt;

&lt;p&gt;Wer auf die &lt;a href="https://pub.dev/packages/styled_text/example"&gt;Beispiel&lt;/a&gt; Seite der Entwickler surft, findet eine Vielzahl von Einsatzm√∂glichkeiten. Erw√§hnen m√∂chte ich hier, das auch das Einbinden von Icons m√∂glich ist, oder die Verwendung von Texten, die √ºber mehrere Zeilen gehen. Es lohnt sich auf jeden Fall die Package zu testen!&lt;/p&gt;

&lt;p&gt;Bis bald ! üòÄ&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@maxchen2k?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Max Chen&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/text?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>german</category>
      <category>flutter</category>
      <category>beginners</category>
    </item>
    <item>
      <title>[PT-BR] Configurando Git e chave SSH na sua M√°quina, do Zero - (Windows)</title>
      <author>Carine Batista</author>
      <pubDate>Sun, 26 Dec 2021 14:09:09 +0000</pubDate>
      <link>https://dev.to/carinebatista/pt-br-configurando-o-git-e-chave-ssh-na-sua-maquina-do-zero-windows-3kib</link>
      <guid>https://dev.to/carinebatista/pt-br-configurando-o-git-e-chave-ssh-na-sua-maquina-do-zero-windows-3kib</guid>
      <description>&lt;p&gt;Na √∫ltima semana adquiri um novo Desktop Windows e tive de configurar novamente todo o ambiente de programa√ß√£o para conseguir codar. &lt;br&gt;
J√° perdi a conta de quantas vezes fiz esse processo, mas nunca parei de fato para estudar e entender o que estava acontecendo, ao inv√©s de copiar e colar c√≥digos no meu terminal resolvi escrever esse tutorial para auxiliar voc√™; que assim como eu precisa passar por isso ou quer entender um pouco mais o que cada comando faz. Ent√£o m√£os √† obra! &lt;/p&gt;

&lt;p&gt;Antes de iniciar tudo gostaria de te introduzir ao Git, Github e SSH (Caso j√° seja familiar com esses temas, sugiro que pule para a sess√£o 3)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-git-e-github"&gt;
  &lt;/a&gt;
  1. Git e Github
&lt;/h2&gt;

&lt;p&gt;O Git √© um sistema de controle de vers√£o distribu√≠do e muito utilizado, em termos gerais √© um software livre que permite e simplifica o processo de compartilhamento e versionamento de um projeto com um time ou com outros programadores.&lt;br&gt;
&lt;a href="https://github.com/"&gt;Github&lt;/a&gt; por sua vez √© a plataforma online onde voc√™ pode criar reposit√≥rios, compartilhar, seguir programadores e hospedar seus projetos al√©m de colaborar com softwares open source, e a tecnologia que o sustenta √© o GIT.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-ssh-o-que-%C3%A9-o-que-faz-e-onde-vive"&gt;
  &lt;/a&gt;
  2. SSH: O que √©, o que faz e onde vive?
&lt;/h2&gt;

&lt;p&gt;Antes de mais nada acho importante estabelecermos o que √© SSH. Essa sigla v√™m do acr√¥nimo em ingl√™s: Secure Shell, traduzindo seria algo como uma "C√°psula segura". &lt;br&gt;
De forma bem generalizada ele √© um protocolo que age como um mecanismo de seguran√ßa autenticador, garantindo que o cliente e servidor remoto troquem informa√ß√µes de maneira segura e din√¢mica. &lt;br&gt;
O SSH √© baseado em duas keys, uma p√∫blica (servidor: em nosso caso o Github) e uma privada (a m√°quina local), a privada consegue abrir unicamente a chave p√∫blica, ent√£o √† enviamos para o servidor e com a nossa local estabelecemos comunica√ß√£o.&lt;br&gt;
O SSH √© oferecido normalmente por servi√ßos de hospedagem, e no nosso caso como tratamos acima: o Github. &lt;br&gt;
O Github permite que voc√™ crie diversas chaves SSH para que gerencie diretamente de sua m√°quina, com seguran√ßa e sem precisar fornecer seu nome de usu√°rio e token toda vez que quiser acessar algum reposit√≥rio.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-m%C3%A3os-%C3%A0-obra"&gt;
  &lt;/a&gt;
  3. M√£os √† obra
&lt;/h2&gt;

&lt;p&gt;Para iniciarmos a configura√ß√£o precisamos instalar o Git. Existem algumas formas de faz√™-lo, voc√™ pode simplesmente fazer o dowload manualmente &lt;a href="https://git-scm.com/download/win"&gt;aqui&lt;/a&gt;, onde ter√° acesso a vers√£o oficial dispon√≠vel e mais recente. &lt;br&gt;
Ou tamb√©m pode instalar diretamente do c√≥digo-fonte, n√£o h√° muita diferen√ßa entre um e outro. Instalando diretamente do c√≥digo-fonte voc√™ sempre ter√° acesso a vers√£o mais recente poss√≠vel, e para faz√™-lo √© necess√°rio ter as seguintes bibliotecas das quais o Git depende: Autotools, curl, zlib, openssl, expat e libiconv. Caso queira fazer dessa maneira voc√™ pode seguir esse &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;tutorial&lt;/a&gt;. &lt;br&gt;
Por√©m para este tutorial, sugiro que instale manualmente pelo arquivo .exe, dispon√≠vel &lt;a href="https://git-scm.com/download/win"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Com o arquivo instalado, basta aceitar os Termos e pressionar "Next", e eu particularmente neste passo prefiro mudar apenas um item, para a op√ß√£o de &lt;a href="https://www.bbc.com/news/technology-53050955#:~:text=The%20world's%20biggest%20site%20for,to%20remove%20references%20to%20slavery.&amp;amp;text=The%20master%2Dslave%20relationship%20in,controls%20other%20copies%2C%20or%20processes."&gt;alterar&lt;/a&gt; o nome padr√£o das Branches futuras de 'master' para 'main': &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ipYMqrRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/716eg3zl4myt97xi9ajc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ipYMqrRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/716eg3zl4myt97xi9ajc.png" alt="Instalador do Git - Alterando Branche de 'master' para main" width="498" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s feita a instala√ß√£o, para execu√ß√£o dos comandos precisaremos do Git Bash (Que √© uma aplica√ß√£o que emula um terminal Unix, uma vez que o Git foi desenvolvido inicialmente para rodar em sistemas Unix).&lt;br&gt;
Mas n√£o se preocupe, ele √© instalado automaticamente com a instala√ß√£o do Git. &lt;/p&gt;

&lt;p&gt;Para acess√°-lo basta pesquisar em sua bara de tarefas por "Git Bash" e executar os comandos que ser√£o listados a seguir. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gerando-uma-chave-ssh"&gt;
  &lt;/a&gt;
  Gerando uma Chave SSH
&lt;/h2&gt;

&lt;p&gt;Para gerar nossa chave SSH que far√° comunica√ß√£o com nosso Github, precisamos digitar o seguinte comando no Git Bash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ssh-keygen -t ed25519 -C "your_email@example.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O comando ssh-keygen como o pr√≥prio nome sugere cria um par de chaves para seu e-mail e utiliza o algor√≠tmo Ed25519, voc√™ pode entender mais sobre esse algor√≠tmo &lt;a href="https://blog.peterruppel.de/ed25519-for-ssh/"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ap√≥s executar esse comando, ele exibir√° uma mensagem perguntando em qual arquivo deseja salvar sua chave, basta pressionar Enter para manter o caminho default e prosseguir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter a file in which to save the key
(/c/Users/you/.ssh/id_algorithm):[Press enter]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse momento ele te pedir√° uma senha, √© importante que voc√™ pressione Enter em ambas as vezes, para que ele n√£o crie uma chave que ser√° solicitada toda vez quando for utilizar um reposit√≥rio.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E pronto, sua chave SSH foi gerada com sucesso! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adicionando-sua-ssh-key-ao-sshagent"&gt;
  &lt;/a&gt;
  Adicionando sua SSH Key ao SSH-agent
&lt;/h2&gt;

&lt;p&gt;O SSH-agent √© um gerenciador de chaves SSH, ele lida com a assinatura de dados de autentica√ß√£o para voc√™. Ao se autenticar em um servidor √© necess√°rio assinar alguns dados usando sua chave privada, para provar quem voc√™ √©. &lt;br&gt;
O uso de um agente de chave permite o uso de v√°rias chaves de forma simples, n√£o sendo necess√°rio especificar o caminho para cada chave individualmente.&lt;/p&gt;

&lt;p&gt;Para iniciar, vamos executar o ssh-agent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ eval "$(ssh-agent -s)"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Incluir sua ssh-key ao ssh-agent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ssh-add ~/.ssh/id_ed25519
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adicionando-sua-nova-chave-ssh-ao-github"&gt;
  &lt;/a&gt;
  Adicionando sua nova chave SSH ao Github
&lt;/h2&gt;

&lt;p&gt;A sua chave SSH foi criada no arquivo C:\Users\nome-do-seu-usuario.ssh\id_rsa.pub, voc√™ precisar√° copiar o conte√∫do desse arquivo, e isso pode ser feito tanto manualmente (abrindo o arquivo pelo explorador de arquivos e copiando), ou por linha de comando utilizando o clip:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clip &amp;lt; ~/.ssh/id_ed25519.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Abra seu Github, v√° at√© Configura√ß√µes &amp;gt; SSH and GPG Keys e clique no bot√£o "New SSH Key". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vc2tcuW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3epe82i3wud7r1zig69t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vc2tcuW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3epe82i3wud7r1zig69t.png" alt="Github- adicionando sua SSH key" width="811" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Em Title crie o nome que preferir para seu dispositvo novo, e em Key basta colar a chave que foi copiada do terminal com o comando clip, ou manualmente pelo arquivo, e pronto, voc√™ configurou o Git e Github com uma chave SSH! &lt;/p&gt;

</description>
      <category>git</category>
      <category>help</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Laravel Simple Datatable</title>
      <author>Ngo Dinh Cuong</author>
      <pubDate>Sun, 26 Dec 2021 13:56:25 +0000</pubDate>
      <link>https://dev.to/ngodinhcuong/laravel-simple-datatable-28jn</link>
      <guid>https://dev.to/ngodinhcuong/laravel-simple-datatable-28jn</guid>
      <description>&lt;p&gt;Laravel Simple Datatable enhances the accessibility of data in HTML tables&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cuongnd88/lara-simple-datatable"&gt;https://github.com/cuongnd88/lara-simple-datatable&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1-Install &lt;code&gt;cuongnd88/lara-simple-datatable&lt;/code&gt; using Composer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;composer&lt;/span&gt; &lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="n"&gt;cuongnd88&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lara&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;simple&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;datatable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2-Add the following service provider in &lt;code&gt;config/app.php&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// config/app.php&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="s1"&gt;'aliases'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;
        &lt;span class="s1"&gt;'SimpleDatatable'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Cuongnd88\LaraSimpleDatatable\Facades\SimpleDatatableFacade&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can modify the &lt;code&gt;Simple Datatable&lt;/code&gt; interface by copying its components to your local config directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Cuongnd88\LaraSimpleDatatable\LaraSimpleDatatableServiceProvider"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sample-usage"&gt;
  &lt;/a&gt;
  Sample Usage
&lt;/h2&gt;

&lt;p&gt;Let start &lt;code&gt;code less&lt;/code&gt; with &lt;a href="https://github.com/cuongdinhngo/lara-colab/blob/4eb67f2f116f129a372667a8f5c981c52d6611b9/alpha/app/Http/Controllers/User/UserController.php#L41"&gt;Laravel Simple Datatable&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="mf"&gt;....&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SimpleDatatable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SimpleDatatable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;buildQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setPerPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addIncrement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"#&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"increment"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;})&lt;/span&gt;
                    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;editColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;})&lt;/span&gt;
                    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;editColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'user.partials.name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'action'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'user.partials.action'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user.index'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'users'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$users&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;code&gt;buildQuery(Builder $query)&lt;/code&gt;: set Query build.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;setPerPage(int $perPage)&lt;/code&gt; is to set quantity of items per page.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;addIncrement($callback)&lt;/code&gt; is to add increment number.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;editColumn(string $key, $callback|$view)&lt;/code&gt; is to edit existed column.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;addColumn(string $key, $callback|$view)&lt;/code&gt; is to add mroe column.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;make()&lt;/code&gt; is to make simple datatable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Simple Datatable makes your job more easier to render view by using &lt;code&gt;@simpleDatatable&lt;/code&gt; and &lt;code&gt;@simplePaginator&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cuongdinhngo/lara-colab/blob/4eb67f2f116f129a372667a8f5c981c52d6611b9/alpha/resources/views/user/index.blade.php#L1"&gt;index.blade.php&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@extends('layouts.app')

@section('content')
&amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="row justify-content-center"&amp;gt;
        &amp;lt;div class="col-md-8"&amp;gt;
            &amp;lt;div class="card"&amp;gt;
                &amp;lt;div class="card-header"&amp;gt;Simple Datatable&amp;lt;/div&amp;gt;

                &amp;lt;div class="card-body"&amp;gt;
                    @simpleDatatable(['data' =&amp;gt; $users, 'view' =&amp;gt; simple_table_view('users')])
                    @endsimpleDatatable

                    @simplePaginator(['data' =&amp;gt; $users, 'appends' =&amp;gt; ['name' =&amp;gt; 'cuong.ngo']])
                    @endsimplePaginator
                &amp;lt;/div&amp;gt;


            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
@endsection

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;code&gt;@simpleDatatable(array $result)&lt;/code&gt;: $result must has key &lt;code&gt;data&lt;/code&gt; for content and key &lt;code&gt;view&lt;/code&gt; for setting views.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;@simplePaginator(array $result)&lt;/code&gt;: $result must has key &lt;code&gt;data&lt;/code&gt; for content and key &lt;code&gt;appends&lt;/code&gt; is optional for your extend data (ex: &lt;a href="http://localhost:8080/users?name=cuong.ngo&amp;amp;page=10"&gt;http://localhost:8080/users?name=cuong.ngo&amp;amp;page=10&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;simple_table_view(string $view)&lt;/code&gt;: is to set table headers which is loaded from &lt;a href="https://github.com/cuongdinhngo/lara-colab/blob/master/alpha/config/simple-datatable.php"&gt;simple-datatable.php&lt;/a&gt; in config folder .&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Default paginator view
    |--------------------------------------------------------------------------
    |
    */&lt;/span&gt;
    &lt;span class="s1"&gt;'paginator_view'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'components.simple-datatable.default-bootstrap-4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Default simple paginator view
    |--------------------------------------------------------------------------
    |
    */&lt;/span&gt;
    &lt;span class="s1"&gt;'simple_paginator_view'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'components.simple-datatable.default-bootstrap-4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Default makeup for simple table view
    |--------------------------------------------------------------------------
    |
    */&lt;/span&gt;
    &lt;span class="s1"&gt;'default_table_makeup'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'table-striped table-hover'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Setting views for specified datatable
    |--------------------------------------------------------------------------
    |
    */&lt;/span&gt;
    &lt;span class="s1"&gt;'views'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'users'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'items'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'increment'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'ID'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'email'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'action'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To modify the view of column, you can create blade file as &lt;code&gt;addColumn('action', 'user.partials.action')&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/cuongdinhngo/lara-colab/blob/master/alpha/resources/views/user/partials/action.blade.php"&gt;user.partials.action&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"user/{{$id}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Edit&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; | &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"user/{{$id}}/remove"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Remove&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You also modify the view of whole table, you can see at &lt;a href="https://github.com/cuongdinhngo/lara-colab/blob/master/alpha/resources/views/components/simple-datatable/simple-datatable.blade.php"&gt;simple-datatable.blade.php&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;php&lt;/span&gt;
&lt;span class="nv"&gt;$makeup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'makeup'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'items'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nv"&gt;$headLabels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$view&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'items'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;endphp&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"table &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;{$makeup}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;thead&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$headLabels&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"col"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;$label&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;th&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;endforeach&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;thead&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tbody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$keys&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;endforeach&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;endforeach&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;tbody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>laravel</category>
      <category>php</category>
      <category>codeless</category>
      <category>simpledatatable</category>
    </item>
    <item>
      <title>Eloquent JavaScript (Part I: Chapter 1/values, types and Operators)</title>
      <author>Pranish Shrestha</author>
      <pubDate>Sun, 26 Dec 2021 13:27:31 +0000</pubDate>
      <link>https://dev.to/pranish07/eloquent-javascript-part-i-chapter-1values-types-and-operators-319</link>
      <guid>https://dev.to/pranish07/eloquent-javascript-part-i-chapter-1values-types-and-operators-319</guid>
      <description>&lt;p&gt;In this post, we will learn about: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Values&lt;/li&gt;
&lt;li&gt;Numbers&lt;/li&gt;
&lt;li&gt;Special Characters&lt;/li&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Unary Operators and binary Operators&lt;/li&gt;
&lt;li&gt;Boolean values&lt;/li&gt;
&lt;li&gt;Comparison&lt;/li&gt;
&lt;li&gt;Logical Operators&lt;/li&gt;
&lt;li&gt;Empty Values&lt;/li&gt;
&lt;li&gt;Automatic type Conversion&lt;/li&gt;
&lt;li&gt;Short circuting of Logical Operators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Values&lt;/strong&gt;&lt;br&gt;
To be able to work with large quantities of bits without getting lost, we must separate them into chunks that represent pieces of information. In a JavaScript environment, those chunks are called values.Every value has a type that determines its role. Some values are numbers, some values are pieces of text, some values are functions, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Numbers&lt;/strong&gt;&lt;br&gt;
values of the number type are numeric values.  for a number of 16, it will cause the bit pattern for the number 16 to come to existence.&lt;br&gt;
JavaScript uses 64 bits to store a single values. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arithmetic&lt;/strong&gt;&lt;br&gt;
Main thing to do with arithmetic is numbers&lt;br&gt;
10+20*3 &lt;br&gt;
first the computer uses 20*3 and then it adds with the rest. to make the addition first we use parenthesis. &lt;br&gt;
(10+20)&lt;em&gt;3 //now first adds then multiply&lt;br&gt;
the computer solves in this order /&lt;/em&gt;+- .i.e. division, multiplication, addition and then subtraction. &lt;br&gt;
There's also another one i.e. %.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Special Numbers&lt;/strong&gt;&lt;br&gt;
There are only three special values in JavaScript.&lt;br&gt;
first two are infinty and - infinity and the 3rd one is NaN which stands for not a number. &lt;br&gt;
if you try to calculate 0/0 or infinity - infinity etc. , you'll get NaN.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strings&lt;/strong&gt;&lt;br&gt;
anything inside quotes are strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"hello this is a string"

"hello \n this is a string"
Output: 
hello
this is a string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;/t is a tabline character&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(`half of 100 is ${100 / 2}`)
output: half of 100 is 50
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Unary Operators&lt;/strong&gt;&lt;br&gt;
Operators that use one values are called unary operators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(typeof 4.5)
// ‚Üí number
console.log(typeof "x")
// ‚Üí string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;operators that use two values are called binary operators&lt;br&gt;
example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(- (10 - 2))
// ‚Üí -8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Boolean Value&lt;/strong&gt;&lt;br&gt;
JavaScript produce two boolean values : true and false &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(3 &amp;gt; 2)
// ‚Üí true
console.log(3 &amp;lt; 2)
// ‚Üí false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way strings are ordered in roughly alphabetic.When comparing strings, JavaScript goes over the characters from left to right, comparing the Unicode codes one by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"a"&amp;lt;"b"&amp;lt;"c"&amp;lt;"d" etc.&lt;/li&gt;
&lt;li&gt;"A"&amp;lt;"a"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is only one value in JavaScript that is not equal to itself, and that is NaN (‚Äúnot a number‚Äù).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(NaN == NaN)
// ‚Üí false 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;==,!=,&amp;lt;,&amp;gt;,&amp;lt;=,&amp;gt;= are used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logical Operators&lt;/strong&gt;&lt;br&gt;
JavaScript supports three logical operators: and , or , not&lt;br&gt;
And(&amp;amp;&amp;amp;), OR(||), not(!)&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(true&amp;amp;&amp;amp;false) //false
console.log(true||false) //true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ternary operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(true ? 1 : 2);
// ‚Üí 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Empty values&lt;/strong&gt;&lt;br&gt;
There are two special valus: null and undefined The difference in meaning between undefined and null is an accident of JavaScript‚Äôs design, and it doesn‚Äôt matter most of the time. In cases where you actually have to concern yourself with these values, I recommend treating them as mostly interchangeable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automatic Type Conversion&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(8 * null) //null becomes zero
// ‚Üí 0
console.log("5" - 1)
// ‚Üí 4
console.log("5" + 1) //concatenate
// ‚Üí 51
console.log("five" * 2) //string and a number results Not a number(Nan)
// ‚Üí NaN
console.log(false == 0)
// ‚Üí true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When an operator is applied to the ‚Äúwrong‚Äù type of value, JavaScript will quietly convert that value to the type it needs, using a set of rules that often aren‚Äôt what you want or expect. This is called type coercion&lt;/p&gt;

&lt;p&gt;I recommend using the three-character comparison operators defensively to prevent unexpected type conversions from tripping you up. But when you‚Äôre certain the types on both sides will be the same, there is no problem with using the shorter operators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Short-circuiting of logical operators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The logical operators &amp;amp;&amp;amp; and || handle values of different types in a peculiar way. They will convert the value on their left side to Boolean type in order to decide what to do, but depending on the operator and the result of that conversion, they will return either the original left-hand value or the right-hand value.&lt;/p&gt;

&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(null || "user")
// ‚Üí user
console.log("Agnes" || "user")
// ‚Üí Agnes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the initial value can be converted to false, you‚Äôll get the replacement instead. The rules for converting strings and numbers to Boolean values state that 0, NaN, and the empty string ("") count as false, while all the other values count as true. So 0 || -1 produces -1, and "" || "!?" yields "!?".&lt;/p&gt;

&lt;p&gt;The &amp;amp;&amp;amp; operator works similarly but the other way around. When the value to its left is something that converts to false, it returns that value, and otherwise it returns the value on its right.&lt;/p&gt;

&lt;p&gt;Another important property of these two operators is that the part to their right is evaluated only when necessary. In the case of true || X, no matter what X is‚Äîeven if it‚Äôs a piece of program that does something terrible‚Äîthe result will be true, and X is never evaluated. The same goes for false &amp;amp;&amp;amp; X, which is false and will ignore X. This is called short-circuit evaluation.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to spend your first freelance income</title>
      <author>Saifullah Usmani</author>
      <pubDate>Sun, 26 Dec 2021 13:25:57 +0000</pubDate>
      <link>https://dev.to/saifullahusmani/how-to-spend-your-first-freelance-income-584o</link>
      <guid>https://dev.to/saifullahusmani/how-to-spend-your-first-freelance-income-584o</guid>
      <description>&lt;p&gt;This is a very easy question to answer but, not all of you will agree with it, as it can vary. But if you have a growth mindset you will at least consider my opinion. One thing I want to clear is that this is my opinion.&lt;/p&gt;

&lt;p&gt;Let us get started.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You should invest your first (maybe second, third, or a portion from all your incomes) in yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does it mean?&lt;/p&gt;

&lt;p&gt;It means that if you are a developer buy some great courses, if you are into physical objects, but good tools, buy books or whatever that will increase your knowledge and add value to you. Just empower yourself and more money will come to you just because you deserve it. Remember, knowledge gives you the power and as I increased my knowledge I started charging more and more to my clients. Thus resulting in even more money. I started from $5 just like you are starting now. No difference. This is my personal experience and I think it will add value to you. &lt;/p&gt;

&lt;p&gt;Be happy!&lt;br&gt;
See you soon&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow me:&lt;/strong&gt;&lt;br&gt;
Hire me: &lt;a href="https://www.fiverr.com/saifullah02"&gt;https://www.fiverr.com/saifullah02&lt;/a&gt; (For web development Purposes)&lt;br&gt;
My New Blog: saifullahusmani.blogspot.com I will post the majority of articles on this blog so make sure to follow.&lt;/p&gt;

&lt;p&gt;Follow me here: &lt;a href="https://dev.to/saifullahusmani"&gt;https://dev.to/saifullahusmani&lt;/a&gt;&lt;br&gt;
YouTube: &lt;a href="http://bit.ly/saifullahusmani"&gt;http://bit.ly/saifullahusmani&lt;/a&gt; (Programming Tutorials Coming Soon).&lt;/p&gt;

</description>
      <category>freelancing</category>
      <category>career</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Frontend Mentor challenge </title>
      <author>Narender Singh</author>
      <pubDate>Sun, 26 Dec 2021 13:25:38 +0000</pubDate>
      <link>https://dev.to/sinredneran/frontend-mentor-challenge-33hd</link>
      <guid>https://dev.to/sinredneran/frontend-mentor-challenge-33hd</guid>
      <description>&lt;p&gt;I've just completed a front-end coding challenge from @frontendmentor! üéâ&lt;/p&gt;

&lt;p&gt;You can see my solution here: &lt;a href="https://www.frontendmentor.io/solutions/simple-css-PhmnWtpIV"&gt;https://www.frontendmentor.io/solutions/simple-css-PhmnWtpIV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any suggestions on how I can improve are welcome!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#frontendmentor-codechallenge"&gt;
  &lt;/a&gt;
  FrontendMentor #CodeChallenge
&lt;/h1&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>ExpressJS</title>
      <author>sndp</author>
      <pubDate>Sun, 26 Dec 2021 13:24:23 +0000</pubDate>
      <link>https://dev.to/lizardkinglk/expressjs-58hg</link>
      <guid>https://dev.to/lizardkinglk/expressjs-58hg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KOtcTQSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ycqi6b0n7zhurisc4c3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOtcTQSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ycqi6b0n7zhurisc4c3.png" alt="Express JS" width="320" height="115"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-expressjs-"&gt;
  &lt;/a&gt;
  What is ExpressJS ?
&lt;/h2&gt;

&lt;p&gt;Express js is a efficient and easy to learn web application framework. It was written in javascript as a library with different tools which helps you in creating web apps. It was developed by T.J. Holowaychuk, StrongLoop and some contributors under MIT license. This initially released in November 16, 2010. The most stable version is 4.17.2 which released in December 16, 2021. We use Node JS run-time with express to develop web apps. Express work as the back-end web server in the MERN stack application which makes the application fast and robust.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-install-and-use-express-"&gt;
  &lt;/a&gt;
  How to install and use Express ?
&lt;/h2&gt;

&lt;p&gt;We need the following tools installed prior to get express.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/"&gt;NPM (Node Package Manager)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Any IDE or Code Editor. (&lt;a href="https://www.jetbrains.com/webstorm/"&gt;WebStorm&lt;/a&gt; / &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; / &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; / &lt;a href="https://www.sublimetext.com/"&gt;SublimeText&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download and install the LTS (Long Term Support) versions of these tools and you are ready to go.&lt;/p&gt;

&lt;p&gt;For this tutorial I'll use VSCode as our code editor.&lt;/p&gt;

&lt;p&gt;Create and open a folder using your editor.&lt;/p&gt;

&lt;p&gt;We will create / initialize a nodejs project using &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open a terminal in your editor in project's root directory. &lt;br&gt;
Enter the command below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init --y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will initialize the project with a new file called &lt;code&gt;package.json&lt;/code&gt; which includes the meta data collected from the folder that you created. To change these values we will go to this file and change it. Keywords, author &amp;amp; description etc.&lt;/p&gt;

&lt;p&gt;Then we should create the index.js file which is our application's entry point or the startup of our web application's backend. After creating index.js file in the project root we have to change a value in &lt;code&gt;package.json&lt;/code&gt; file. We will change the value of &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;index.js&lt;/code&gt;. Then it should look similar as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "expressproject",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"
  },
  "keywords": ["express"],
  "author": "sndp",
  "license": "ISC",
  "description": "An express js project"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we can enter the following command in the terminal and install express.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will download and add the library to work with your project. Make sure to check package.json to be changed like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "expressproject",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"
  },
  "keywords": [
    "express"
  ],
  "author": "sndp",
  "license": "ISC",
  "description": "An express js project",
  "dependencies": {
    "express": "^4.17.2"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;We have now successfully installed express in our project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will create a simple server that we can use in our project and run it.&lt;/p&gt;

&lt;p&gt;Change your &lt;code&gt;index.js&lt;/code&gt; file as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const server = express();
const port = 5000;

server.listen(port, () =&amp;gt; {
    console.log("server is listening on port " + port);
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to the terminal and enter the following command to run our server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the terminal reads like below with no errors&lt;br&gt;
&lt;code&gt;server is listening on port 5000&lt;/code&gt;&lt;br&gt;
Our server is running successfully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-developers-use-expressjs-"&gt;
  &lt;/a&gt;
  Why developers use expressjs ?
&lt;/h2&gt;

&lt;p&gt;If you are a web developer maybe you are familiar with back-end frameworks like Spring or ASP.Net. But also you must know the express js if you develop a Node JS app. Express is the most common back-end web framework in use for a node js web application in the world today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#because-it-is-easy"&gt;
  &lt;/a&gt;
  Because it is easy
&lt;/h3&gt;

&lt;p&gt;Working with express is easy because it is consist of all javascript based libraries. So the business code and library can work very well together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossplatform"&gt;
  &lt;/a&gt;
  Cross-platform
&lt;/h3&gt;

&lt;p&gt;Express can use in a wide variety of platforms. These include mobile app back-end or web application development and many web services. We can route the requests and serve every user with express js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicate-with-frontend"&gt;
  &lt;/a&gt;
  Communicate with front-end
&lt;/h3&gt;

&lt;p&gt;Express makes it easy to work with front-end because we don't need intermediate libraries. As an example we can use middleware functions in express to direct users before handling the requests using express. And we can use express-session and express-cookies to handle user meta data objects inside server. And there are many more add-ons we can use in our application to implement easier with the front-end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uses-of-express-js"&gt;
  &lt;/a&gt;
  Uses of express js
&lt;/h2&gt;

&lt;p&gt;There are many uses of building web apps and apis using express js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-develop-web-apps"&gt;
  &lt;/a&gt;
  To develop web apps
&lt;/h3&gt;

&lt;p&gt;To handle client's requests and handle them by giving responses and directing to the pages or provide implemented templates directly to the user with express. Also it is easy serving and working with static files like stylesheets (css), scripts (js) and images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developing-restful-web-services-apis"&gt;
  &lt;/a&gt;
  Developing ReSTful Web Services (APIs)
&lt;/h3&gt;

&lt;p&gt;Since the progress of web development technologies, apps based on microservices architecture were becoming relevant. From monolithic to microservices architecture they are evolving. A web application basically started after developing an API. Making a API using express js is very easy. It is just a couple of routing methods and connection to a data source away.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developing-other-javascript-libraries"&gt;
  &lt;/a&gt;
  Developing other javascript libraries.
&lt;/h3&gt;

&lt;p&gt;Many javascript libraries and frameworks uses express or had used express js in their implementation of libraries. There are many interesting work done with using express framework.&lt;br&gt;
These include, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://feathersjs.com/"&gt;Feathers&lt;/a&gt; - Build prototypes in minutes, &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.itemsapi.com/"&gt;ItemsAPI&lt;/a&gt; - Search backend for web and mobile apps built on  Express and Elastisearch.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://keystonejs.com/"&gt;KeystoneJS&lt;/a&gt; - Website and API Application Framework etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many companies use express js eg. IBM and UBER in their applications and it is one of the major step of building a node js based web apps.&lt;/p&gt;

&lt;p&gt;To learn more on expressjs refer the link below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://expressjs.com/en/starter/installing.html"&gt;https://expressjs.com/en/starter/installing.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>mernstack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding of CSS BEM</title>
      <author>‚ö°Preethi</author>
      <pubDate>Sun, 26 Dec 2021 13:20:54 +0000</pubDate>
      <link>https://dev.to/preethi_dev/understanding-of-css-bem-26gg</link>
      <guid>https://dev.to/preethi_dev/understanding-of-css-bem-26gg</guid>
      <description>&lt;p&gt;Hey Gang, Feel lucky to see you again. Every year design trends getting changed and then we plan to adapt our websites for trendy and present day feel. Sadly, website may sometimes styled without any structure or naming conventions. This leads to an &lt;b&gt;unmaintainable CSS codebase&lt;/b&gt; and crack out our plansüò•üò• be like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQhlI-_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3ml9vr5msdpccydpuud.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQhlI-_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3ml9vr5msdpccydpuud.gif" alt="Image description" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Uh, feel awkward right. But, don't getting trouble with that because every problem definitely have a solution. Likewise, we convert &lt;b&gt;unmaintainable CSS codebase to maintainable using BEM naming convention&lt;/b&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;BEM - &lt;b&gt;B&lt;/b&gt;lock &lt;b&gt;E&lt;/b&gt;lement &lt;b&gt;M&lt;/b&gt;odifier&lt;/h2&gt;

&lt;p&gt;BEM is constructed on basis of &lt;code&gt;class name&lt;/code&gt; selector only which not use &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;tag name&lt;/code&gt; selector.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCPkFQKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aklp29j5edmy6p3zg56o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HCPkFQKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aklp29j5edmy6p3zg56o.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above image seems little bit weiredüò•. It's not a big deal and hope keep continue reading and you grasp that tricksüéâ.&lt;/p&gt;

&lt;h2&gt;Block&lt;/h2&gt;

&lt;p&gt;Block is a standalone entity that is meaningful on its own and is a top-level abstraction of a new component.&lt;/p&gt;

&lt;p&gt;For instance, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;header&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;container&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkbox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Naming&lt;/h4&gt;

&lt;p&gt;Block names may consist of &lt;b&gt;Latin letters, digits, and dashes&lt;/b&gt;. To form a CSS class, add a short prefix for namespacing: &lt;code&gt;.block&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Blocks&lt;/span&gt; &lt;span class="nt"&gt;are&lt;/span&gt; &lt;span class="nt"&gt;named&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;standard&lt;/span&gt; &lt;span class="nt"&gt;CSS&lt;/span&gt; &lt;span class="nt"&gt;classes&lt;/span&gt;
&lt;span class="nc"&gt;.block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;example&lt;/span&gt; 
&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;Element&lt;/h2&gt;

&lt;p&gt;Element is a parts of a block (Child items of block) and have no standalone meaning. Any element is semantically tied to its block.&lt;/p&gt;

&lt;p&gt;For instance,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;menu item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkbox caption&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;header title&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Naming&lt;/h4&gt;

&lt;p&gt;Element names may consist of Latin letters, digits, dashes and underscores. &lt;br&gt;
CSS class is formed as block name followed by two underscores and then element name: &lt;code&gt;.block__elem&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Elements&lt;/span&gt; &lt;span class="nt"&gt;declared&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;underscores&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;after&lt;/span&gt; &lt;span class="nt"&gt;block&lt;/span&gt;
&lt;span class="nc"&gt;.block__element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;example&lt;/span&gt;
&lt;span class="nc"&gt;.card__title&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;Modifier&lt;/h2&gt;

&lt;p&gt;Flags on blocks or elements. Use them to change appearance, behavior or state. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In simple words, the use of a ‚Äòmodifier‚Äô to apply the additional unique styles.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For instance,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlighted&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checked&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fixed&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Naming&lt;/h4&gt;

&lt;p&gt;Modifier names may consist of Latin letters, digits, dashes and underscores. &lt;br&gt;
CSS class is formed as block‚Äôs or element‚Äôs name followed by two dashes (&lt;code&gt;--&lt;/code&gt;): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If block's modifier, then &lt;code&gt;.block--mod&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If Element's modifier, then &lt;code&gt;.block__elem--mod&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Modifiers&lt;/span&gt; &lt;span class="nt"&gt;declared&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;dashes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;after&lt;/span&gt; &lt;span class="nt"&gt;block&lt;/span&gt;
&lt;span class="nc"&gt;.block--modifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;example&lt;/span&gt;
&lt;span class="nc"&gt;.card--dark&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;Modifiers&lt;/span&gt; &lt;span class="nt"&gt;declared&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt; &lt;span class="nt"&gt;dashes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;after&lt;/span&gt; &lt;span class="nt"&gt;element&lt;/span&gt;
&lt;span class="nc"&gt;.block__element--modifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;example&lt;/span&gt;
&lt;span class="nc"&gt;.card__btn--large&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Hey still with meü•≥, I feel you getting curious about BEM. So, It's my pleasure to show the live demo. Just hover the containers, you may getting an confidence about block-element relationship (parent-child relationship).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/preethi-dev/embed/OJxxojO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;I can get your questionü§î&lt;/h2&gt; 

&lt;p&gt;there are so many naming conventions like &lt;code&gt;OOCSS&lt;/code&gt;, &lt;code&gt;SMACSS&lt;/code&gt;, &lt;code&gt;SUITCSS&lt;/code&gt;, &lt;code&gt;Atomic&lt;/code&gt;. But, why we choose BEM?? right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PuDL17ZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j17aknvmo41a0q3ev2eq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PuDL17ZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j17aknvmo41a0q3ev2eq.gif" alt="Image description" width="200" height="108"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt; The answer is..&lt;/h2&gt;

&lt;p&gt;If we are reading the markup instead of CSS, we should be able to quickly get an idea of which element depends on another (in the previous example we can see that .card__title depends on .card, even if we don‚Äôt know what that does just yet.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The BEM approach ensures that everyone who participates in the development of a website works with a single codebase and speaks the same language. Using proper naming will prepare you for the changes in design of the website.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Use BEM as it way&lt;/h2&gt;

&lt;p&gt;ofcourse you can break down the rule of BEM like below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;completely&lt;/span&gt; &lt;span class="nt"&gt;unrelated&lt;/span&gt;
&lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="nc"&gt;.nav__listItem&lt;/span&gt; &lt;span class="nc"&gt;.btn--orange&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;yes you are right which seems BEM naming convention. But, it's notüòë. which only make confusion and incosistent code. Hope you grasp my point.&lt;/p&gt;

&lt;h2&gt;Final instance for BEM&lt;/h2&gt;

&lt;p&gt;Hope you getting curious for using BEM in your projects. So, getting clear thought about BEM. I will show a little massive example below,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gueTa63J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybnz1whsb4a2qkz6zmhz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gueTa63J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybnz1whsb4a2qkz6zmhz.png" alt="Image description" width="827" height="492"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;let's test BEM skills. From above image, can you identify which one is &lt;code&gt;block&lt;/code&gt; / &lt;code&gt;element&lt;/code&gt; / &lt;code&gt;modifier&lt;/code&gt;. Don't hesitate, post your answer below as comment.&lt;/p&gt;

&lt;p&gt;If you loved this blog, Then give an endearing heartüíùand drop your thought about this blogüòç which really a lot to me. I love the discussion with you, If you feel not comfortable at styling concepts or have any doubts.&lt;/p&gt;

&lt;p&gt;Thanks for Reading!!&lt;br&gt;
&lt;b&gt;Preethi&lt;/b&gt;&lt;br&gt;
&lt;em&gt;- Make your CSS life easier&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>TypeRacer Hack Code</title>
      <author>Kaixin</author>
      <pubDate>Sun, 26 Dec 2021 13:07:24 +0000</pubDate>
      <link>https://dev.to/kaixinn/typeracer-hack-code-5dmo</link>
      <guid>https://dev.to/kaixinn/typeracer-hack-code-5dmo</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var counter = -1;
var firstWord = document.getElementsByClassName("inputPanel")[0].querySelectorAll("span")[0].innerHTML + document.getElementsByClassName("inputPanel")[0].querySelectorAll("span")[1].innerHTML,
restOfText = document.getElementsByClassName("inputPanel")[0].querySelectorAll("span")[2].innerHTML;
var fullText = firstWord.concat(restOfText);
var inputBox = document.getElementsByClassName('txtInput');
(function getString() {
    setTimeout(function() {
        counter++;
        inputBox[0].value += fullText[counter];
        if(counter != fullText.length) {
            getString();
        }
        //adjust the 100 milliseconds for a faster wpm &amp;amp; be undetected by their new system.
    }, 100);
})()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the code above ^^ then go to TypeRacer Enter a Race, on your keyboard press ctrl + shift + i to open the console When the game starts(It says GO!), paste the cheat code you just copied in the console and hit enter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://play.typeracer.com/?universe=lang_id"&gt;TypeRacer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoMoe9oV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjq627wxm5y506pahr8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoMoe9oV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjq627wxm5y506pahr8f.png" alt="Image description" width="880" height="601"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh7UUef1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04taxm58n1naadkb4h1a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uh7UUef1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04taxm58n1naadkb4h1a.PNG" alt="Image description" width="657" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>html</category>
    </item>
    <item>
      <title>Good Code, Bad Code: Start To Think Like A Software Engineer</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Sun, 26 Dec 2021 13:03:49 +0000</pubDate>
      <link>https://dev.to/unitybuddy/good-code-bad-code-start-to-think-like-a-software-engineer-44of</link>
      <guid>https://dev.to/unitybuddy/good-code-bad-code-start-to-think-like-a-software-engineer-44of</guid>
      <description>&lt;p&gt;Hello, buddies! During the past two weeks, I have been reading a fantastic book that introduces key concepts and techniques that professional and experienced software engineers regularly use to produce reliable and maintainable code. But this is not just for Software engineers; it's for everyone in the Software Development field. &lt;/p&gt;

&lt;p&gt;Good Code, Bad Code book aims to explain the core reasoning behind&lt;br&gt;
each concept and technique, as well as any trade-offs. This should help readers develop a fundamental understanding of how to think and code like a experienced software engineer&lt;/p&gt;

&lt;p&gt;Here you can read some key points of the book, but this won't cover the whole gold mine. I highly recommend you to read the whole book by Manning Publications by using this &lt;a href="https://www.manning.com/books/good-code-bad-code"&gt;link&lt;/a&gt;. If you want to try your luck and get a free book of "Good Code, Bad Code", scroll down to the end of the article and fill in the small form. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-quality"&gt;
  &lt;/a&gt;
  Code Quality
&lt;/h2&gt;

&lt;p&gt;We've heard this word thousands of times but who cares? This chapter is one of my favorites, let me elaborate more on this topic.&lt;/p&gt;

&lt;p&gt;In everyday life, we interact with software a lot. There are many pieces of software that we depend on. Think about a banking app that doesn't have a well-behaved backend system, is going to unexpectedly transfer the contents of our bank account to someone else, or suddenly decide that we‚Äôre in millions of dollars of debt! A small bug can ruin lives.&lt;/p&gt;

&lt;p&gt;Higher-quality code tends to produce software that is more reliable, easier to maintain, and less buggy which makes it is one of the most important things in Software development.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASe3ZYER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639468826578/Rx2sAQQPK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASe3ZYER--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639468826578/Rx2sAQQPK.png" alt="image.png" width="839" height="685"&gt;&lt;/a&gt;&lt;br&gt;
Source: The Book&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-goals-of-code-quality"&gt;
  &lt;/a&gt;
  The goals of code quality üéØ
&lt;/h3&gt;

&lt;p&gt;Defining code as being high quality or low quality is an inherently subjective and somewhat judgmental thing. To try to be a bit more objective about it, you should look back at the code and figure out what exactly you're trying to achieve by this piece of code. Tom Longs suggests the Code which helps anyone to achieve these 4 things is a high-quality code. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It should work: Your piece of code must work&lt;/li&gt;
&lt;li&gt;It should keep working: It should keep working all the time, without breaking in anywhere.&lt;/li&gt;
&lt;li&gt;It should be adaptable to changing requirements: It‚Äôs quite rare that a piece of code is written once and then never modified again. &lt;/li&gt;
&lt;li&gt;It should not reinvent the wheel: You don't have to code a file importing system from scratch when there's a library for it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#pillars-of-code-quality"&gt;
  &lt;/a&gt;
  Pillars of Code Quality
&lt;/h3&gt;

&lt;p&gt;The 4 goals we just looked at help us focus on what we‚Äôre trying to achieve, but they don‚Äôt provide specific advice about what to do in our everyday coding. I think it'll be useful to see some strategies that will help us to achieve these goals easily.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make code readable&lt;/strong&gt;:  If our code has poor readability, other engineers will have to spend a lot of time trying to decipher it. There is also a high chance that they might misinterpret what it does or miss important details. If this happens, then it‚Äôs less likely that bugs will be spotted during code review, and it‚Äôs more likely that new bugs will be introduced when someone else has to modify our code to add new functionality. Commenting on code can be a solution sometimes, but it's easier and safe to make your code readable itself. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Avoid surprises&lt;/strong&gt;: Surprises are very nice on your Birthday but when we‚Äôre trying to get a specific task done,  surprises are usually a bad thing. In software systems when some code does something surprising: because the caller of the code doesn‚Äôt know to expect it, they carry on unaware. It will often look like things are fine for a bit, but then later things will go horribly wrong when the program finds itself in an invalid state or a weird value is returned to a user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make code hard to misuse&lt;/strong&gt;: Code we write is often called by other code. We expect that other code to insert certain things in, like input arguments or placing the system in a certain state before calling. If the wrong things get inserted into our code,&lt;br&gt;
then things might blow up; the system crashes, a database gets permanently corrupted, or some important data gets lost. Even if things don‚Äôt blow up there‚Äôs a good chance that the code is not going to work. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make code modular&lt;/strong&gt;:  Modularity means that an object or system is composed of smaller components that can be independently exchanged or replaced. Simply, this means that you have to make your code just like a LEGO toy. Others should be able to remove and add things without breaking the code. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make code reusable and generalizable&lt;/strong&gt;:  Reusability means that something can be used to solve the same problem but in multiple scenarios. And Generalizability means something can be used to solve multiple conceptually similar problems that are subtly different. If we get a hand drill, it is also Generalizable because it can be used to drill holes, it can also be used to drive screws.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make code testable and test it properly&lt;/strong&gt;: It‚Äôs hard to explain how testing is important is in software development. There are different levels of testing such as Unit testing, which is well described in the book.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#writing-highquality-code-slows-us-down"&gt;
  &lt;/a&gt;
  Writing high-quality code slows us down? ü§î
&lt;/h3&gt;

&lt;p&gt;When thinking about how to do all these things, you may have often questioned that doesn't this slow us down? The book has a beautiful example, let's take a look at it.&lt;/p&gt;

&lt;p&gt;You are putting a shelf up at home. You get two ways of doing this,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The proper way&lt;/em&gt;: We attach brackets to the wall by drilling and screwing into something solid like the wall studs or masonry. We then mount the shelf on these brackets. Time took: 40 minutes&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hacky way&lt;/em&gt;: We buy some glue and glue the shelf to the wall. Time took: 10 minutes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3ofIGZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640324588983/2LBrhpL45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3ofIGZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640324588983/2LBrhpL45.png" alt="image.png" width="820" height="555"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How nice! The hacky way saves us 30 minutes.  We glued the shelf to whatever the wall is surfaced with; this is most likely a layer of plaster. Plaster is not strong and can easily crack and come off in large chunks.  When we put some weight on the shelf, it will fall down and now you don't have a shelf and your wall is also awful so you're gonna redecorate it which will take you hours; sometimes days!&lt;/p&gt;

&lt;p&gt;You get the idea. It might seem like doing it in the proper way is a waste of 20 minutes but when compared to the time and hassle by the "bugs" made by the hacky way, the proper way saves us a lot of time.&lt;/p&gt;

&lt;p&gt;Therefore, writing high-quality code never slows you down. It just makes great software.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-other-engineers"&gt;
  &lt;/a&gt;
  Working with Other engineers
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5w1PC4P2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640324302318/nJpU0r8I7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5w1PC4P2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640324302318/nJpU0r8I7.png" alt="image.png" width="397" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating software is usually Teamwork. A company making software may have hundreds of developers creating hundreds of projects and you may often have to work with other people's code as well as they will work with yours. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c6m_dlOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639486653422/PJL7fFlnB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c6m_dlOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639486653422/PJL7fFlnB.png" alt="image.png" width="880" height="626"&gt;&lt;/a&gt;&lt;br&gt;
Source: The Book&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, when writing code; even though you're single, you have to care about these things.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-things-that-are-obvious-to-you-are-not-obvious-to-others"&gt;
  &lt;/a&gt;
  1. Things that are obvious to you are not obvious to others
&lt;/h4&gt;

&lt;p&gt;When you get down to writing some code, you have probably already spent hours or days thinking about the problem you are solving. You may have been through several stages of design, user experience testing, product feedback, or bug reports. You might be so familiar with your logic that things seem obvious, and you barely need to think about why something is the way it is or why you are solving the problem the way you are.&lt;/p&gt;

&lt;p&gt;But what bout your teammates? They will need to interact with your code, make changes to it, or make changes to something it depends on. They will not have had the benefit of all your time to understand the problem and think about how to solve it.  The things that are obvious to you aren't obvious to them&lt;/p&gt;

&lt;p&gt;Therefore,  It‚Äôs useful to always consider this and make sure your code explains how it should be used, what it does, and why it is doing it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-other-engineers-will-inadvertently-try-to-break-your-code"&gt;
  &lt;/a&gt;
  2. Other engineers will inadvertently try to break your code
&lt;/h4&gt;

&lt;p&gt;Sounds cynical. Your code probably depends on multiple other pieces of code, and these, in turn, depend on even more pieces of code. And there are probably yet more pieces of code that depend on your code. &lt;/p&gt;

&lt;p&gt;If another engineer makes a change that breaks or misuses your code, then you want to ensure that their change does not get submitted into the main codebase until they‚Äôve fixed the issue they‚Äôve caused. The only two reliable ways to do this are to ensure that, when something is broken, either the code stops compiling or some tests start failing. A lot of the considerations around writing high-quality code are ultimately about ensuring that one of these two things happen when something is broken&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-in-time-you-will-forget-about-your-own-code"&gt;
  &lt;/a&gt;
  3. In time, you will forget about your own code.
&lt;/h4&gt;

&lt;p&gt;The piece of code you just wrote is in your mind and you will never think that you will forget it. But we're not machines, we forget things. By that time, you will forget the code that you wrote and ask someone else about it. This won't matter until a new feature comes along, or a bug gets assigned to you in a year‚Äôs time from now, you might have to modify that code you wrote and may no longer remember all the ins and outs of it. &lt;/p&gt;

&lt;p&gt;Looking at code that you wrote a year or two ago is not much different from looking at code written by someone else. Make sure your code is understandable even to someone with little or no context, and make it hard to break. You‚Äôll not only be doing everyone else a favor, but you‚Äôll be doing your future self one too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-testing"&gt;
  &lt;/a&gt;
  Unit Testing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hO8UAJMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640324480608/d_hLdlsOw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hO8UAJMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640324480608/d_hLdlsOw.png" alt="image.png" width="880" height="430"&gt;&lt;/a&gt;&lt;br&gt;
Unit testing involves the testing of each unit or an individual component of the software application. It is the first level of functional testing. The aim behind unit testing is to validate unit components with their performance. In the book, it has beautifully explained what exactly is Unit Testing, highly encourage you to get the book yourself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-makes-a-good-unit-test"&gt;
  &lt;/a&gt;
  What makes a Good Unit Test?
&lt;/h3&gt;

&lt;p&gt;While you may think it is not much important, it is the most important part of making good software. When it is not going well, it may lead to many problems such as unnoticed bugs, unable to maintain, etc. So knowing what makes good unit testing is important. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accurately detects breakages‚ÄîIf the code is broken, a test should fail. And a test
should only fail if the code is indeed broken (we don‚Äôt want false alarms).&lt;/li&gt;
&lt;li&gt;Agnostic to implementation details‚ÄîChanges in implementation details should
ideally not result in changes to tests.&lt;/li&gt;
&lt;li&gt;Well-explained failures‚ÄîIf the code is broken, the test failure should provide a
clear explanation of the problem.&lt;/li&gt;
&lt;li&gt;Understandable test code‚ÄîOther engineers need to be able to understand what
exactly a test is testing and how it is doing it.&lt;/li&gt;
&lt;li&gt;Easy and quick to run‚ÄîEngineers usually need to run unit tests quite often during their everyday work. A slow or difficult-to-run unit test will waste a lot of engineering time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thats-only-a-bit-of-the-book"&gt;
  &lt;/a&gt;
  That's only a bit of the book!
&lt;/h2&gt;

&lt;p&gt;Yes, 1000 words can't cover this gold mine. The book has a lot of things‚Äî I mean really a lot of things in those 300 pages. I highly recommend you to get it and read it yourself. Once you've read it, you will find some coding techniques that will take years to learn by experience. &lt;/p&gt;

&lt;p&gt;Get the book &lt;a href="https://www.manning.com/books/good-code-bad-code"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I guess it's the time for,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#giveaway"&gt;
  &lt;/a&gt;
  Giveaway!
&lt;/h3&gt;

&lt;p&gt;Yes, to be thanks to the Manning publications, you can try your luck to get a free eBook of "Good Code, Bad Code". Just fill this 2-question form &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScDWl1owIIL5TzehtRnoCBWwmKE86DWbf98U3Q9jroY_xQ2VA/viewform"&gt;here&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;And that's all for today. Don't forget to read the book and happy coding! See you soon ‚úå&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>Some Concepts of Backend</title>
      <author>Mubashshira Amjad</author>
      <pubDate>Sun, 26 Dec 2021 13:01:10 +0000</pubDate>
      <link>https://dev.to/muba23/some-concepts-of-backend-1ml0</link>
      <guid>https://dev.to/muba23/some-concepts-of-backend-1ml0</guid>
      <description>&lt;p&gt;&lt;strong&gt;CRUD Operations:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CRUD is an acronym that stands for Create, Read, Update and Delete. It refers to the operations implemented by databases. The NoSQL database MongoDB has these operations to create, read, update and delete documents. &lt;br&gt;
Create Operations: This operation is used to add a new document to a collection. The document can be newly created or inserted into an existing one. If there is no existing collection, then the insert operation creates a new collection. Insert operation basically targets a single collection. The method of inserting document into a collection in MongoDB is - &lt;br&gt;
    db.collection.insertOne()&lt;br&gt;
    db.collection.insertMany()&lt;/p&gt;

&lt;p&gt;Read Operations: This operation is used to retrieve a document from a collection. We can set query filters to identify a specific document. The method of retrieving documents from a collection in MongoDB is - &lt;br&gt;
           db.collection.find()&lt;/p&gt;

&lt;p&gt;Update Operations: This operation is used to modify an existing document in a collection. Update operation basically targets a single collection. We can specify criteria or filters to identify the specific document to update. The method of updating documents from a collection in MongoDB is - &lt;br&gt;
           db.collection.updateOne()&lt;br&gt;
           db.collection.updateMany()&lt;br&gt;
           db.collection.replaceOne()&lt;/p&gt;

&lt;p&gt;Delete Operations: This operation deletes or removes a document from a collection. Delete operation basically targets a single collection. We can specify criteria or filters to identify the specific document to delete. The method of deleting documents from a collection in MongoDB is - &lt;br&gt;
           db.collection.deleteOne()&lt;br&gt;
           db.collection.deleteMany()&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Mongoose: *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mongoose is an object data modeling(ODM) library for MongoDB and Nodejs. It is used to manage relationships between data and translate between objects in code and the representation of the objects in MongoDB. It provides schema validation as MongoDB is a schema-less NoSQL database. Everything starts with a schema in Mongoose and each schema maps to a MongoDB collection and the shape of the document is defined within that collection. Example of defining schema in Mongoose:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Express:&lt;/strong&gt;&lt;br&gt;
Express is a Node js web application framework that is equally flexible and minimal. It provides robust set of features for web and mobile applications. It provides a thin layer of features that is based on web application, without obscuring Nodejs features.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Eloquent JavaScript (Part I : Chapter 2/Program Structure)</title>
      <author>Pranish Shrestha</author>
      <pubDate>Sun, 26 Dec 2021 12:22:03 +0000</pubDate>
      <link>https://dev.to/pranish07/eloquent-javascript-part-i-chapter-2program-structure-33cp</link>
      <guid>https://dev.to/pranish07/eloquent-javascript-part-i-chapter-2program-structure-33cp</guid>
      <description>&lt;p&gt;As JavaScript can work in most of the fields like web development, mobile apps, desktop apps etc. It is a vital programming language to day to learn.&lt;br&gt;
&lt;em&gt;This blog is inspired by a book Eloquent JavaScript&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What you will learn in this post&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expressions and statements&lt;/li&gt;
&lt;li&gt;Bindings&lt;/li&gt;
&lt;li&gt;Binding Names&lt;/li&gt;
&lt;li&gt;the environment&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;console.log function&lt;/li&gt;
&lt;li&gt;return value&lt;/li&gt;
&lt;li&gt;control flow&lt;/li&gt;
&lt;li&gt;conditional execution (if, else, if else)&lt;/li&gt;
&lt;li&gt;loops(while, do-while, for)&lt;/li&gt;
&lt;li&gt;Indenting Code&lt;/li&gt;
&lt;li&gt;Breaking out of a loop&lt;/li&gt;
&lt;li&gt;Updating Bindings Succinctly&lt;/li&gt;
&lt;li&gt;Dispatching on available with switch &lt;/li&gt;
&lt;li&gt;Capitalization&lt;/li&gt;
&lt;li&gt;Comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Expressions and Statements&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A fragment of code that produces a value is called an expression.Expression is a piece of code that resolves to a value. Example: const number = 5; 5 is an expression and the whole const number = 5 is an statement.
Programs build statements which themselves sometimes is made out of statements and sometimes expressions contains by some other small expressions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bindings&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We know that new values can be made by old values and if new values aren't used immediately then it can disappear again. To catch and hold values , JavaScript Provides a thing called Binding or a variable. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let today = 'day';
 console.log (today);
//day

today ='night';
console.log(today);
//night
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Binding doesn't contain the values , they grasp them with var, let, const.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binding Names&lt;/strong&gt;&lt;br&gt;
Rules for writing names : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;can include numbers but cannot start with number eg: hello123 is good but 123hello is not accepted. &lt;/li&gt;
&lt;li&gt;may include $ and underScore(_) but except no other are taken. No Spaces are used.
-binding names or variable names cannot be used of the keywords eg : break case catch class const continue debugger default delete do else enum export extends false finally for
function if implements import interface in instanceof let
new package private protected public return static super
switch this throw true try typeof var void while with yield&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don‚Äôt worry about memorizing this list. When creating a binding produces an unexpected syntax error, see whether you‚Äôre trying to define a reserved word.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The collection of bindings and their values that exist at a given time is called the environment.When a program starts up, this environment is not empty. It always contains bindings that are part of the language standard, and most of the time, it also has bindings that provide ways to interact with the surrounding system. For example, in a browser, there are functions to interact with the currently loaded website and to read mouse and keyboard input.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;functions&lt;/strong&gt;&lt;br&gt;
functions are a piece of a program wrapped in a value. Values are given to a function called arguments. &lt;br&gt;
example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sum() {
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;console.log function&lt;/strong&gt;&lt;br&gt;
In the javascript we use console.log function to see what the output has come. It cannot be seen in the viewing area of the browser but can be see in the inspect of the browsers. f12 on windows and command-option-I on mac. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Return Value&lt;/strong&gt;&lt;br&gt;
When a function produces a value, it is said to return a value.&lt;br&gt;
example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; console.log(Math.max(2,4))
//4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Control Flow&lt;/strong&gt;&lt;br&gt;
In more than one statement, the statements are executed as if there are a story from top to bottom. &lt;br&gt;
example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let num = number(prompt("Pick a number"))
console.log("your number is " + num)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Conditional execution&lt;/strong&gt;&lt;br&gt;
 if there comes a choice then this execution can be used: &lt;br&gt;
  &lt;em&gt;if condition&lt;/em&gt;&lt;br&gt;
example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(1+1=2) console.log("Its true")
//Its true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if 1+2 isnt 2 then the console wouldnt have worked. &lt;br&gt;
for multiple choices example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let num = Number(prompt("Pick a number"));

if (num &amp;lt; 10) {
  console.log("Small");
} else if (num &amp;lt; 100) {
  console.log("Medium");
} else {
  console.log("Large");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Loops&lt;/strong&gt;&lt;br&gt;
to do a repeated work &lt;br&gt;
 &lt;em&gt;While loop&lt;/em&gt;&lt;br&gt;
we need is a way to run a piece of code multiple times. This form of control flow is called a loop.&lt;br&gt;
example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let number = 0;
while (number &amp;lt;= 12) {
  console.log(number);
  number = number + 2;
}
// ‚Üí 0
// ‚Üí 2
//   ‚Ä¶ etcetera
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;do while&lt;/em&gt;&lt;br&gt;
In this loop atleast the loop will run atleast once.&lt;br&gt;
example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let yourName;
do {
  yourName = prompt("Who are you?");
} while (!yourName);
console.log(yourName);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;for loop&lt;/em&gt;&lt;br&gt;
 example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for( var i=0;i&amp;lt;5;i++){
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Indenting Code&lt;/strong&gt;&lt;br&gt;
Many coders uses tabs to indent their code to look nice and easier to read. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breaking out of a loop&lt;/strong&gt;&lt;br&gt;
To prevent from the loop that will run continuously so the break statement is used. &lt;br&gt;
example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(let number=15; number=number+1){
  if (number%7==0){
console.log(number);
break;
}
}
//21
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine if the break statement wasn't here then the loop would've run infinite times so to prevent it, the break statement is used and if there want to continue for the other loops then the continue statement is used. continue;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating bindings Succinctly&lt;/strong&gt;&lt;br&gt;
(succinctly means brief or to the point)&lt;br&gt;
 Instead of number =number +1, we can also write number+=1 or number++ or number--. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dispatching on a value with switch&lt;/strong&gt;&lt;br&gt;
Instead of if condition to go into a decision. switch is more preferred.&lt;br&gt;
example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (prompt("What is the weather like?")) {
  case "rainy":
    console.log("Remember to bring an umbrella.");
    break;
  case "sunny":
    console.log("Dress lightly.");
  case "cloudy":
    console.log("Go outside.");
    break;
  default:
    console.log("Unknown weather type!");
    break;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Capitalization&lt;/strong&gt;&lt;br&gt;
There are 4 types to write a variable name in JS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hellopeopleoftheworld
hello_people_of_the_world
HelloPeopleOfTheWorld
helloPeopleOfTheWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1st one is hard to read. 2nd one is difficult to write the underscore. The effective way to write in a JavaScript is the 4th one: capitalizing every initials of the word except the first word;it is also called camelCase. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;br&gt;
// is used for single line comment and /**/ is used for multiple line comment.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// this is a good code
/*this code contains
alot of defining terms
to understand
*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;/&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
    </item>
  </channel>
</rss>
