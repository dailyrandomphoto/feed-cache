<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 CSS Resources that you should bookmark</title>
      <author>Jatin Sharma</author>
      <pubDate>Sun, 24 Oct 2021 02:53:51 +0000</pubDate>
      <link>https://dev.to/j471n/10-css-resources-that-you-should-bookmark-46l6</link>
      <guid>https://dev.to/j471n/10-css-resources-that-you-should-bookmark-46l6</guid>
      <description>&lt;p&gt;In this article we are going to look at some awesome resource for you that can improve your productivity, I can assure you that you will not regret on clicking this article, so Let's see what I have got for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-neumorphism"&gt;
  &lt;/a&gt;
  &lt;a href="https://neumorphism.io/"&gt;1. Neumorphism&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This website generates the soft UI for your &lt;code&gt;section&lt;/code&gt; or &lt;code&gt;div&lt;/code&gt; and it can also customize &lt;code&gt;border-radius&lt;/code&gt;, &lt;code&gt;box-shadow&lt;/code&gt; and etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U48p6dTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9Azvowr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U48p6dTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9Azvowr.png" alt="neumorphism"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-shadows-brumm"&gt;
  &lt;/a&gt;
  &lt;a href="https://shadows.brumm.af/"&gt;2. Shadows Brumm&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It can generate multiple Layered shadow for you which gives very cool effect and you can customize the color from the curve.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZOXS4nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2wiFPyS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZOXS4nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2wiFPyS.png" alt="shadows brumm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-css-clippath-maker"&gt;
  &lt;/a&gt;
  &lt;a href="https://bennettfeely.com/clippy/"&gt;3. CSS Clip-path Maker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It can generate beautiful clip-path with various different shapes it can be very handy if you use these king of shapes and properties.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WsYjLvSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RHi4NE3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WsYjLvSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RHi4NE3.png" alt="clip-path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-fancy-border-shape-generator"&gt;
  &lt;/a&gt;
  &lt;a href="https://9elements.github.io/fancy-border-radius/"&gt;4. Fancy Border Shape Generator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It generates most awesome shapes by manipulating &lt;code&gt;border-radius&lt;/code&gt; and you can use it anywhere in you project. You can also change the size of shape to check how it'll look with your project preference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJOhf2TG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Mi3hNOb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJOhf2TG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Mi3hNOb.png" alt="border-shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-cubic-curve"&gt;
  &lt;/a&gt;
  &lt;a href="https://cubic-bezier.com/"&gt;5. Cubic Curve&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It basically generates the &lt;code&gt;cubic-bezier&lt;/code&gt; for you animation in css. As we know we use &lt;code&gt;ease-in&lt;/code&gt;, &lt;code&gt;ease-out&lt;/code&gt; etc property for the animation to tell the browser what is the animation's flow. you can customize those properties here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pk7cQb2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RdpTDJl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pk7cQb2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RdpTDJl.png" alt="cubic-curve"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-css-gradient"&gt;
  &lt;/a&gt;
  &lt;a href="https://cssgradient.io/"&gt;6. CSS Gradient&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you work with gradient then you will love it. because I am using this for a long time and it's just perfect. and also here you can also get some tools like &lt;em&gt;Gradient Button&lt;/em&gt; and many more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KxmsZ7eX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GXQ30rQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KxmsZ7eX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GXQ30rQ.png" alt="gradient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-css-waves-generator"&gt;
  &lt;/a&gt;
  7. CSS Waves Generator
&lt;/h3&gt;

&lt;p&gt;According to me these three waves generators that are awesome to generate any kind of waves it could be for you footer or divider section etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#css-waves"&gt;
  &lt;/a&gt;
  &lt;a href="https://getwaves.io/"&gt;CSS Waves&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;It generates simple waves with some customization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ivv1Bsku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SIACH2I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ivv1Bsku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SIACH2I.png" alt="css-waves-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gradient-multiple-waves"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.softr.io/tools/svg-wave-generator"&gt;Gradient Multiple Waves&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;It can generate multiple gradient waves which is awesome.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wd2Qdjrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BKLsLsw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wd2Qdjrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BKLsLsw.png" alt="css-waves-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#multiple-animated-waves"&gt;
  &lt;/a&gt;
  &lt;a href="https://svgwave.in/"&gt;Multiple Animated Waves&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;It can generate multiple gradients waves but the main feature is that it can also generate Live animation for that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5KjHsh_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Qj9Fcft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5KjHsh_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Qj9Fcft.png" alt="css-waves-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-css-grid-generator"&gt;
  &lt;/a&gt;
  8. CSS Grid Generator
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#css-grid"&gt;
  &lt;/a&gt;
  &lt;a href="https://cssgrid-generator.netlify.app/"&gt;CSS grid &lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;It generates the awesome css For Grid and you can customize it with &lt;code&gt;div&lt;/code&gt; and it will also create the child element for that&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQ6LwiHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SkTnHrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQ6LwiHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SkTnHrb.png" alt="css-grid"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#css-grid-area"&gt;
  &lt;/a&gt;
  &lt;a href="https://grid.layoutit.com/"&gt;CSS Grid Area&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;It generates the &lt;code&gt;grid-area&lt;/code&gt; for you. and you can name that and customize the area according to your need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2u1KjDtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Bl6WXfY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2u1KjDtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Bl6WXfY.png" alt="css-grid-area"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-loading-animated-gifssvgs"&gt;
  &lt;/a&gt;
  &lt;a href="https://loading.io/"&gt;9. Loading Animated GIFs/SVGs&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Here you can generate multiple loading animation and download that as SVG, GIFs, PNG and other formats but the best feature of it is that you can customize these animation to the next level. You should try this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iLRnmOOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qApN28O.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLRnmOOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qApN28O.png" alt="loading"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-free-icon-library"&gt;
  &lt;/a&gt;
  10. Free Icon Library
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#flaticons"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.flaticon.com/"&gt;Flaticons&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;This Library have 5.7M+ vector icons. So you can find any possible icons here and you can use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EVVlTVdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lm8Tz78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVVlTVdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lm8Tz78.png" alt="flaticons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#icons8"&gt;
  &lt;/a&gt;
  &lt;a href="https://icons8.com/"&gt;icons8&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;This library also has the vast collection of icons and you can customize them as well, also you can directly use that icon without downloading it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJE1KZS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8gyhKQb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJE1KZS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8gyhKQb.png" alt="icons8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope you learned something from this article, if yes them thumbs up. There are unlimited resources but I've covered only ten in this article. I'll cover them in the future articles. So consider to Follow.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#also-read"&gt;
  &lt;/a&gt;
  Also Read
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/css-gradient-loading-animation-2695"&gt;CSS Gradient Loading Animation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/some-javascript-methods-you-should-know-i15"&gt;Some Javascript Methods you should know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/10-git-commands-everybody-should-know-3322"&gt;10 Git Commands everybody should know&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Emulate Firebase Auth</title>
      <author>Harvtronix</author>
      <pubDate>Sun, 24 Oct 2021 01:26:27 +0000</pubDate>
      <link>https://dev.to/harvtronix/how-to-emulate-firebase-auth-5ah7</link>
      <guid>https://dev.to/harvtronix/how-to-emulate-firebase-auth-5ah7</guid>
      <description>&lt;p&gt;I was recently building an app in which I was trying to integrate Firebase Authentication and Firebase Realtime Database. But I ran into a problem pretty quickly while I was testing things locally.&lt;/p&gt;

&lt;p&gt;Even though Firebase has a super amazing Emulator Suite for local testing, authentication is not included. To me, this meant that the lovely auth-based Realtime DB rules I'd crafted were impossible to test locally unless I modified my DB rules beforehand. But that doesn't make for a very good permissions test, does it? There is an open issue on &lt;a href="https://github.com/firebase/firebase-tools/issues/1677"&gt;GitHub&lt;/a&gt; for addressing this, but at the time of writing, no solution has yet been included in the emulator suite.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2020-10-27:&lt;/strong&gt; Firebase Auth is now part of the Emulator Suite! Upgrade the Firebase CLI to version 8.14.0 or greater to use it. If that's all you were looking for, the rest of this post might not be useful to you, but feel free to keep reading for a more detailed look at Firebase Auth and my general philosophy towards testing and modularization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I spent a bunch of hours trying to figure out how to string things together with Band-Aids and glue to do something that honestly seems like a pretty basic requirement for DB testing: Test my auth rules in both development and production without modifying the very security model I'm trying to test. After all, who would want to do "real" permissions testing for the first time in a production environment??&lt;/p&gt;

&lt;p&gt;Nothing was working. I was stuck. I missed. &lt;a href="https://youtu.be/02WuLTpe3sI?t=355"&gt;Then I missed again. Then I got sad. I had a popsicle. And then I passed out in the snow.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just kidding on the last few, but what I &lt;em&gt;did&lt;/em&gt; do what have an epiphany in the shower. I do some of my best thinking there. &lt;em&gt;Anyone else? No? Okay. Moving on.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;My app in particular is using Google Login and the Google auth provider, so that's what I'm going to focus on here, but I believe this approach would translate to other auth providers as well.&lt;/p&gt;

&lt;p&gt;The key to making this work is abstraction. Take any Firebase call that you'd normally make and hide it behind a function that may or may not do the same thing. Usually, it's the same sort of thing with some extras sprinkled in.&lt;/p&gt;

&lt;p&gt;In this case, we'll be looking at the &lt;code&gt;firebase.initializeApp&lt;/code&gt; function. In the normal production environment, this is super simple. We pass in a &lt;code&gt;siteConfig&lt;/code&gt; object and we're on our merry way. However, when working locally and/or with Firebase Emulators, this doesn't work one-for-one. In &lt;a href="https://firebase.google.com/docs/rules/unit-tests"&gt;the docs&lt;/a&gt;, they indicate that we should use &lt;code&gt;initializeTestApp&lt;/code&gt; instead to perform our initialization. This comes from the &lt;code&gt;@firebase/testing&lt;/code&gt; module as opposed to the &lt;code&gt;firebase/app&lt;/code&gt; module. This might seem perfect on the surface, but the issue is that anywhere we might normally use &lt;code&gt;firebase.&amp;lt;sometThing&amp;gt;&lt;/code&gt; to interact with the default firebase app, we can't. We instead need to work with the app instance returned from the call to &lt;code&gt;firebase.initializeTestApp()&lt;/code&gt;. By extension, this means we should structure our code so that we're &lt;em&gt;always&lt;/em&gt; using &lt;code&gt;app.&amp;lt;someThing&amp;gt;&lt;/code&gt; in favor of &lt;code&gt;firebase.&amp;lt;someThing&amp;gt;&lt;/code&gt;, regardless of whether we're using &lt;code&gt;initializeApp&lt;/code&gt; or &lt;code&gt;initializeTestApp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, this doesn't seem too bad on the surface, but there's one more catch: In each case, the app instance (as provided by &lt;code&gt;initialize*App(siteConfig)&lt;/code&gt;) is slightly different. Namely, &lt;code&gt;app.auth()&lt;/code&gt; is not a thing for apps initialized via &lt;code&gt;initializeTestApp()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the crux of the auth emulation problem. And this is what we are going to solve. Let's take a look at some code.&lt;/p&gt;

&lt;p&gt;Here is a utility function to initialize either a test or production app and return it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;importFirebase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDevelopment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeTestApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;siteConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// set up custom hooks for auth mocking&lt;/span&gt;
        &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__internal__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;siteConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// Set up the auth observer&lt;/span&gt;
        &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot going on here, so let's break it down line by line.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I went with &lt;code&gt;async&lt;/code&gt; here because, in a couple lines, you'll see some dynamic imports. More on that in a sec. The other important piece here is that this &lt;code&gt;createApp&lt;/code&gt; function takes an &lt;code&gt;onAuthStateChanged&lt;/code&gt; callback and not a &lt;code&gt;siteConfig&lt;/code&gt; object like &lt;code&gt;initializeApp&lt;/code&gt;. Since we control the module containing this abstraction function, we can put our &lt;code&gt;siteConfig&lt;/code&gt; object here too for easy access. I mean, you can put the &lt;code&gt;siteConfig&lt;/code&gt; wherever you want, but to me, it makes sense to have the same module own the config block and the utility functions since the goal is to drive all Firebase-related functions through this abstraction module.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;onAuthStateChanged&lt;/code&gt; callback will be called when—&lt;em&gt;you guessed it&lt;/em&gt;—the auth state changes. In the production case, we can simply set up an auth observer in the usual manner, but in the development case, it's a bit more interesting. More on that in a sec.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;importFirebase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's another layer of abstraction. We want a reference to Firebase as a module, and more specifically we might want a reference to the "testing" version of Firebase, but we don't actually care how it is obtained. Dynamic imports are a huge help here. This is what the definition of &lt;code&gt;importFirebase&lt;/code&gt; looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importFirebase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDevelopment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@firebase/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/database&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's nothing too surprising here. We are either importing "test" Firebase from &lt;code&gt;@firebase/testing&lt;/code&gt; or we are importing "real" Firebase from &lt;code&gt;firebase/app&lt;/code&gt; along with our other Firebase dependencies. Dynamically importing "real" Firebase is a little more involved, but it's basically the traditional way of doing it converted to dynamic import-form.&lt;/p&gt;

&lt;p&gt;I feel like this is a good time to mention that the reason for using dynamic imports here is so that you only ever end up importing &lt;em&gt;either&lt;/em&gt; the test Firebase &lt;em&gt;or&lt;/em&gt; the production one, but never both. Dynamic imports give us that flexibility.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The astute reader might realize that even with dynamic imports, Webpack will still bundle both modules into the output since we don't know until runtime which type of environment we'll be in. While this is true, it can be avoided by splitting the vendor modules out as part of the build and filtering out one of the two Firebase chunks, depending on the build type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#development-mode"&gt;
  &lt;/a&gt;
  Development Mode
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDevelopment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming this is a React app created via &lt;code&gt;create-react-app&lt;/code&gt;, we can calculate whether or not this is a development build by looking for &lt;code&gt;process.env.NODE_ENV === 'development'&lt;/code&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeTestApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;siteConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to initialize the test app using the now-obtained Firebase module, providing it our &lt;code&gt;siteConfig&lt;/code&gt; as usual. There's a key piece that needs to exist in the &lt;code&gt;siteConfig&lt;/code&gt; for this to work though: An &lt;code&gt;auth&lt;/code&gt; block. Here's an example config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;siteConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;databaseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isDevelopment&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:9000?ns=...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://....firebaseio.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;databaseName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;....appspot.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;measurementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;u111111&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;u111111@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That auth block is the key because that means that we can "inject" a user/email into the app manually as we see fit. There's a caveat though... Since this isn't &lt;em&gt;real&lt;/em&gt; auth, we'll never get &lt;code&gt;onAuthStateChanged&lt;/code&gt; callbacks fired. We're going to need to do that ourselves. And the first step towards doing that is to store a reference to the provided callback in our test app for later:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// set up custom hooks for auth mocking&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__internal__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Here I chose &lt;code&gt;__internal__&lt;/code&gt; as a namespace that I figured nobody would collide with, but this could just as easily have been any other unique key on the app object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#production-mode"&gt;
  &lt;/a&gt;
  Production Mode
&lt;/h2&gt;

&lt;p&gt;The other case to consider here is the production case. Let's take a look at the &lt;code&gt;else&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;siteConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Set up the auth observer&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very similar to what happens in development except we end up importing "real" Firebase and setting up an actual auth observer with that callback we took in as an argument.&lt;/p&gt;

&lt;p&gt;All of this is to say that we can now call&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MyFirebaseUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to get back a firebase app that's ready to go with either emulated auth in development or real auth in production.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I recommend holding onto this app instance in your application state so that it can be provided to any abstraction functions that may depend on it, such as simulating a login in development mode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#simulating-onauthstatechanged"&gt;
  &lt;/a&gt;
  Simulating onAuthStateChanged
&lt;/h2&gt;

&lt;p&gt;For any function we have that would trigger a login (or logout), we can add in a separate development-only flow in which we manually fire an &lt;code&gt;onAuthStateChanged&lt;/code&gt; event. Looking at the &lt;a href="https://firebase.google.com/docs/reference/js/firebase.auth.Auth#onauthstatechanged"&gt;docs&lt;/a&gt;, those events are either passed a user or &lt;code&gt;null&lt;/code&gt; depending on whether the user is logged in or not.&lt;/p&gt;

&lt;p&gt;If our production flow for logging in a user looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doGoogleLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;importFirebase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GoogleAuthProvider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// Show the actual login popup. Succeeding here will update the internally managed uid and&lt;/span&gt;
    &lt;span class="c1"&gt;// auth of the app, which allows subsequent database calls (and other stuff) to work.&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;signInWithPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can add in a development flow, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doGoogleLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDevelopment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// https://firebase.google.com/docs/reference/js/firebase.auth#usercredential&lt;/span&gt;
        &lt;span class="nx"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;credential&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TEST_ID_AUTH_TOKEN&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;siteConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="c1"&gt;// Fire a simulated onAuthStateChanged event, passing it the user from our siteConfig.auth block&lt;/span&gt;
        &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__internal__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onAuthStateChanged&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;siteConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;getIdToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TEST_ID_AUTH_TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// production flow&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you have it! A sorta-kinda way to emulate auth from within a Firebase-enabled app. Hopefully you find this useful. I've been successfully using this approach in my project to help with offline testing using Firebase emulators.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>firebase</category>
      <category>testing</category>
    </item>
    <item>
      <title>Dual booting Ubuntu and windows 10</title>
      <author>Ganesh K</author>
      <pubDate>Sun, 24 Oct 2021 01:18:21 +0000</pubDate>
      <link>https://dev.to/ganeshcs316/dual-booting-ubuntu-and-windows-10-3e9i</link>
      <guid>https://dev.to/ganeshcs316/dual-booting-ubuntu-and-windows-10-3e9i</guid>
      <description>&lt;p&gt;First, download the latest version of Ubuntu from their website &lt;a href="https://ubuntu.com/#download,then"&gt;https://ubuntu.com/#download,then&lt;/a&gt; inject your SanDisk Pendrive with more than 8Gb (I used 16Gb) to your pc. After downloading Ubuntu we need Rufus (The Reliable USB Formatting Utility, with Source) is a free and open-source portable application for Microsoft Windows that can be used to format and create bootable USB flash drives or Live USBs.&lt;/p&gt;

&lt;p&gt;Open the Rufus, there we can see the SanDisk Pendrive, also we can see the partition scheme I choose GPT and my target system is UEFI&lt;/p&gt;

&lt;p&gt;After that on the status section click on start to begin the process&lt;/p&gt;

&lt;p&gt;Then restart your computer and open the boot menu option using the shortcut f9 in case if it didn't work (for me it was pretty daunting but after a couple of google searches I found the solution) go to the settings--&amp;gt;update and security--&amp;gt;recovery--&amp;gt; on the recovery choose to restart on advanced setup&lt;/p&gt;

&lt;p&gt;After a couple of seconds there will be three options go for the Troubleshoot --&amp;gt;Advanced options--&amp;gt;UEFI firmware settings and last choose restart now&lt;/p&gt;

&lt;p&gt;That's all you will see the boot menu options then you have to choose the one with Sandisk&lt;/p&gt;

&lt;p&gt;After that, you will be redirected to the ubuntu installation&lt;/p&gt;

&lt;p&gt;Now enter all the user credentials, setting up the accounts, etc after that, you will be asked to restart when you go for it you can safely eject your Pendrive&lt;/p&gt;

&lt;p&gt;Now you can dual boot Ubuntu and windows :)&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Cybercrime: Devs against the Dark side</title>
      <author>ritaCosta93</author>
      <pubDate>Sun, 24 Oct 2021 00:17:06 +0000</pubDate>
      <link>https://dev.to/ritacosta/cybercrime-devs-against-the-dark-side-15hn</link>
      <guid>https://dev.to/ritacosta/cybercrime-devs-against-the-dark-side-15hn</guid>
      <description>&lt;p&gt;Conference: &lt;a href="http://Future.Works"&gt;Future.Works&lt;/a&gt; Tech Conference&lt;/p&gt;

&lt;p&gt;Speaker: Steve Poole&lt;/p&gt;

&lt;p&gt;Position: Developer Advocate at SonaType&lt;/p&gt;

&lt;p&gt;Conference Teaser: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=s02R4bj5PfA"&gt;https://www.youtube.com/watch?v=s02R4bj5PfA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my "review" and notes from the conference, not exactly what the speaker said, word by word, this is what I got from what was said.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-topics"&gt;
  &lt;/a&gt;
  Main topics
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cyber security

&lt;ul&gt;
&lt;li&gt;Developers point of view&lt;/li&gt;
&lt;li&gt;How to make it better&lt;/li&gt;
&lt;li&gt;As a developer, security is your problem. It's your responsability to produce secure software&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cybercrime</category>
      <category>hacking</category>
      <category>software</category>
      <category>developers</category>
    </item>
    <item>
      <title>Introduction</title>
      <author>Mahamud Arteh</author>
      <pubDate>Sat, 23 Oct 2021 23:32:32 +0000</pubDate>
      <link>https://dev.to/arteh97/introduction-5adc</link>
      <guid>https://dev.to/arteh97/introduction-5adc</guid>
      <description>&lt;p&gt;For those of you who don’t know me, hello, my name is Mahamud. I’m a freelance developer, solo entrepreneur, and blogger, based in Manchester, England. I would like to start sharing my experiences as a freelance developer, here on this website. This post will summarise my decision to change my career path, and how I was able to do so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9uwNJOhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9knzu70on25f651op4cl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9uwNJOhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9knzu70on25f651op4cl.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Earlier this year, a friend of mine suggested that I enrol in a coding bootcamp. after some research, I decided to take the leap of faith. since then, I have graduated from the northcoders bootcamp and completed several projects.  eventually, I would like to sell my own products online (physical &amp;amp; digital), so that i do not have to rely on clients. I will continue to build an online presence for myself, and complete freelance projects, so that i can work towards my goals.&lt;/p&gt;

&lt;p&gt;As part of the onboarding process, I had to complete a 7 question entry exam. I dedicated all of my free time to prepare, as the revision materials were extensive (150+ freecodecamp lessons &amp;amp; 25+ codewars katas). the course costs £7200, so the onboarding process is designed to ensure applicants have the drive to learn to code. not long before I began the bootcamp, I got a job working for the NHS, from home. I decided to take the bootcamp as a remote student, whilst continuing to work full-time. whilst it made my life very difficult and boring at the time, I do not regret the decision. financial problems can have an adverse effect on a person’s development, and I couldn’t afford to be in that predicament at the time. I would never do it again, but with the strong resolve I have gained, it was worth the struggle. &lt;/p&gt;

&lt;p&gt;My persistence allowed me to transform my difficult experience into something teachable. in the few weeks since I have graduated, I have established a personal brand, a freelance business, and started taking on client work. &lt;/p&gt;

&lt;p&gt;The structure of the course is as follows:&lt;/p&gt;

&lt;p&gt;The fundamentals of javascript were taught to us over the 1st three weeks. Learning version control, and how to manipulate data, laid the foundations for us to create interactivity on websites/apps. &lt;/p&gt;

&lt;p&gt;We then moved on to learning about back-end development. To complete the back-end segment of the course, we were challenged to build a postgresql database. The database would serve as the back-end infrastructure of a review website.&lt;/p&gt;

&lt;p&gt;Career week couldn’t have came at a better time, as i was starting to feel a little fatigued. We attended hiring partner presentations, in which company representatives expressed their interest in hiring northcoders graduates. They understood the value of the education we were receiving. it was a great experience overall, as we learned a lot about how we could move forward after our graduation.&lt;/p&gt;

&lt;p&gt;To complete the front-end segment of the course, i created an interactive web app, using react. The pages displayed the information held in a database, that i had previously created, allowing the user to interact with it.&lt;/p&gt;

&lt;p&gt;We were split into groups of 5, for the project phase. we were then challenged to create a mobile app, that we were to conceptualise and design as a team. We decided to build an app that informed travellers about the restrictions in place. We went with mongo, typescript, and react-native, which none of us had used before. The previous weeks of intense learning made it a lot easier for us to write the code in another language. &lt;/p&gt;

&lt;p&gt;I worked on the server-side logic of the app, and the map renders (native). This project has given me confidence and showed me that I am more than able to pick up new concepts. on graduation day, I and my team presented our project, at the bootcamp site. I felt nervous about my speech, but i feel it turned out well after all.&lt;/p&gt;

&lt;p&gt;It’s been 3 weeks since i graduated, and my job search is going very well. I have connected with fellow developers online and started completing projects for commercial clients. I am aware that my lack of experience will cause me to miss opportunities, so that is another reason I have started working for myself.&lt;/p&gt;

&lt;p&gt;Working for yourself is possibly the most rewarding decision you can ever make. web development is just about the perfect discipline to pair with entrepreneurship because there are a lot of problems out there just waiting to be solved. &lt;/p&gt;

&lt;p&gt;Once i have completed my started client projects, i will have commercial experience. I would like to thank you for reading my first blog post, it really means a lot to me. I will be posting weekly reviews about my experiences as a freelance developer. feel free to leave a comment, if you have any thoughts/criticisms on my decisions, and see you next Sunday!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>fullstack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Useful Websites Every Web developer Should Know About.</title>
      <author>Cess</author>
      <pubDate>Sat, 23 Oct 2021 22:37:21 +0000</pubDate>
      <link>https://dev.to/cesscode/useful-websites-every-web-developer-should-know-about-3n4n</link>
      <guid>https://dev.to/cesscode/useful-websites-every-web-developer-should-know-about-3n4n</guid>
      <description>&lt;p&gt;Hello everyone! 💙&lt;/p&gt;

&lt;p&gt;In this article, I will write about websites that will help you improve your productivity and manage some of the challenges we face in web development.&lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/redbull-happy-smile-l4FGnDqTrkewTIuRy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;br&gt;
*&lt;em&gt;Animista *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yw-HYjMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632349342155/-EOlhbw7C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yw-HYjMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632349342155/-EOlhbw7C.png" alt="frame_generic_light (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Animista&lt;/strong&gt; is a CSS animation library and a place where you can play with a collection of pre-made CSS animations, tweak them and you will be able to copy and paste the code into your website.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Animista website [&lt;a href="https://animista.net/"&gt;https://animista.net/&lt;/a&gt;]&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;Ray&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEr3cmIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350178684/WfhfRXfAZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEr3cmIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350178684/WfhfRXfAZ.png" alt="frame_generic_light (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ray's website&lt;/strong&gt; helps you turn your codes into beautiful images.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdOClMkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350267122/JTdkDEw3M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdOClMkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350267122/JTdkDEw3M.png" alt="raycast-untitled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Ray website [&lt;a href="https://ray.so/"&gt;https://ray.so/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A similar website to the ray website is &lt;strong&gt;Carbon&lt;/strong&gt;, it also helps in sharing beautiful images of your source code&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to carbon website [&lt;a href="https://carbon.now.sh/"&gt;https://carbon.now.sh/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;BGjar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hYv7nVii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350675534/fr1_UBPvD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hYv7nVii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632350675534/fr1_UBPvD.png" alt="frame_generic_light (3).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BGjar&lt;/strong&gt; is a free SVG background generator for websites, blogs, and apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to BGjar website [&lt;a href="https://bgjar.com"&gt;https://bgjar.com&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;Neumorphism&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bELGyt1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632351047960/5F8Y8da27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bELGyt1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632351047960/5F8Y8da27.png" alt="frame_generic_light (4).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Neumorphism&lt;/strong&gt; is a CSS code generator that will help you with colors, gradients, and shadows to your design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Neumorphism website [neumorphism.io]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;br&gt;
&lt;strong&gt;CSS Button Generator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5n8jfyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632351798700/Qc4dzNiIy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5n8jfyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632351798700/Qc4dzNiIy.png" alt="frame_generic_light (5).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS Button Generator&lt;/strong&gt; is a free online tool that helps you to create beautiful CSS button styles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to CSS Button Generator website [&lt;a href="https://css3buttongenerator.com/"&gt;https://css3buttongenerator.com/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;br&gt;
&lt;strong&gt;DevSamples&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XTYT8jQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632352751692/Fsfw2cHzL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XTYT8jQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632352751692/Fsfw2cHzL.png" alt="frame_generic_light (6).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevSamples&lt;/strong&gt; helps developers of all types find easy-to-use code samples for common use cases. It's a list of code samples for you to copy and paste into your work projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to DevSamples website [&lt;a href="http://www.devsamples.com"&gt;www.devsamples.com&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;br&gt;
&lt;strong&gt;ReadMe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjrcI9xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632353295859/7Lvg2hP0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjrcI9xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632353295859/7Lvg2hP0j.png" alt="frame_generic_light (7).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readme.so&lt;/strong&gt; is the easiest way to create a README file. This simple editor allows you to add and customize all the sections you need for your project's readme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Readme website [&lt;a href="https://readme.so/"&gt;https://readme.so/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A similar website to the above website is &lt;strong&gt;Readme Gen.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to readme gen website [&lt;a href="https://readme-gen.vercel.app/app"&gt;https://readme-gen.vercel.app/app&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;br&gt;
&lt;strong&gt;Coolors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FxQD5cNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632354941779/LWkCBoAgI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxQD5cNu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632354941779/LWkCBoAgI.png" alt="frame_generic_light (9).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website will help you with color selections when designing your website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to colors website [&lt;a href="https://coolors.co/"&gt;https://coolors.co/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;br&gt;
&lt;strong&gt;Remove Background From Image&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P00lDw_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632353719691/qZVvVVDnu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P00lDw_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632353719691/qZVvVVDnu.png" alt="frame_generic_light (8).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website helps you remove backgrounds from images in 5 seconds with zero clicks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Remove background from Image website [&lt;a href="https://www.remove.bg/"&gt;https://www.remove.bg/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;br&gt;
Poet.so&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MF7q5IJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632355577427/D5kuE0mar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MF7q5IJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632355577427/D5kuE0mar.png" alt="frame_generic_light (10).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This website will help you create beautiful images of your Twitter posts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link [&lt;a href="https://poet.so/"&gt;https://poet.so/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;11.&lt;br&gt;
&lt;strong&gt;Meta Tags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFyFwzYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632439504797/iPlIVFBFu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFyFwzYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632439504797/iPlIVFBFu.png" alt="frame_generic_light (11).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meta Tag is a tool used for debugging and generating meta tags for any website. It allows you to edit and experiment with your content, then previews how your webpage will look on Google, Facebook, Twitter, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to metatag website [&lt;a href="https://metatags.io/"&gt;https://metatags.io/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;12.&lt;br&gt;
&lt;strong&gt;Browser frame&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOAbtdgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440673077/l7jNEZHR5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOAbtdgd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440673077/l7jNEZHR5.png" alt="frame_chrome_mac_dark.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Browser Frame allows you to wrap screenshots in browser frames. Supports multiple browsers, operating systems, and themes.&lt;/p&gt;

&lt;p&gt;Before Browser frame:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gWizF3CG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440706101/Ci2jlW5pI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWizF3CG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440706101/Ci2jlW5pI.png" alt="screenbud-c4e26130-9db0-491b-a2af-93c5a9c50d69.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After browser Frame:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxVhHnbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440748569/dY6ezldwX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxVhHnbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632440748569/dY6ezldwX.png" alt="frame_generic_light (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to browser frame website [&lt;a href="https://browserframe.com/"&gt;https://browserframe.com/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A similar website to the browser frame website is &lt;strong&gt;Screely&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to  Screely website [&lt;a href="https://www.screely.com/"&gt;https://www.screely.com/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;13.&lt;br&gt;
&lt;strong&gt;DevDocs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hjOQfI7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633045578615/7ArybYO7B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjOQfI7l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633045578615/7ArybYO7B.png" alt="frame_chrome_mac_dark.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevDocs&lt;/strong&gt; is free and Open-source. It contains documentation for almost every technology used in web development. You can download documentation of any of your favorite technology for offline reading. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Devdocs website [&lt;a href="https://devdocs.io/"&gt;https://devdocs.io/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;14.&lt;br&gt;
&lt;strong&gt;Undesign&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-qtaGw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633046418288/rGVGgEN_n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-qtaGw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633046418288/rGVGgEN_n.png" alt="frame_chrome_mac_dark (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;undesign&lt;/strong&gt; is a collection of free resources for developers and designers. it contains code snippets, colors, gradients, templates, icons, animations, etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to undesign website [&lt;a href="https://undesign.learn.uno/"&gt;https://undesign.learn.uno/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;15.&lt;br&gt;
&lt;strong&gt;The Frontend Checklist&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JHcEVBcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632523736982/wzLGHvTtz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHcEVBcn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632523736982/wzLGHvTtz.png" alt="frame_chrome_mac_dark (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The frontend checklist website&lt;/strong&gt; tells you the best frontend practices you should use for building a website. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Frontend checklist website [&lt;a href="https://frontendchecklist.io/"&gt;https://frontendchecklist.io/&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;16.&lt;br&gt;
&lt;strong&gt;Unscreen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2vZQ6PI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635030657335/yT3T6N_wh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2vZQ6PI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635030657335/yT3T6N_wh.png" alt="frame_chrome_mac_dark (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unscreen&lt;/strong&gt; helps you remove the background of any video online for free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;link to Unscreen website [&lt;a href="http://www.unscreen.com"&gt;www.unscreen.com&lt;/a&gt;]&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CONCLUSION&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The above-mentioned websites will make your life easier as a web developer. If you have any questions or there are any other websites that help you a lot more than this, Post about it in the comment section below and I'll be happy to answer every single one.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it 💙.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/snl-saturday-night-live-season-44-f9RzoxHizH72k15FKS"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>What is CSS Variable - in simple terms</title>
      <author>Cess</author>
      <pubDate>Sat, 23 Oct 2021 22:30:43 +0000</pubDate>
      <link>https://dev.to/cesscode/what-is-css-variable-in-simple-terms-26c7</link>
      <guid>https://dev.to/cesscode/what-is-css-variable-in-simple-terms-26c7</guid>
      <description>&lt;p&gt;Hello everyone! 💙&lt;/p&gt;

&lt;p&gt;In this article, I will write about CSS Variables, scoping CSS Variables, and how they can help you to create better, and more maintainable CSS. &lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;CSS Variables&lt;/strong&gt; are sometimes referred to as &lt;strong&gt;CSS Custom properties&lt;/strong&gt; or &lt;strong&gt;Cascading Variables.&lt;/strong&gt; They allow information to be maintained and referenced in many locations. They make it easy to read and understand code especially when the code was done by someone else. &lt;/p&gt;

&lt;p&gt;A good way to use CSS variables is when it comes to the colors of your design. Instead of copy and paste the same colors over and over again, you can place them in variables. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#defining-variables"&gt;
  &lt;/a&gt;
  &lt;strong&gt;DEFINING VARIABLES&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Declaring a Variable is done using a Variable name that begins with a double hyphen (--), and a property value that can be any valid CSS value.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 {
--main-bg-color: #358597;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;CSS variables are case-sensitive: &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;--Main-Bg-Color&lt;/code&gt; and &lt;code&gt;--main-bg-color&lt;/code&gt; are not the same. To prevent this confusion, avoid using capital letters in variable names.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use hyphen delimited strings like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;--main-text-color&lt;/code&gt; instead of &lt;code&gt;--maintextcolor&lt;/code&gt; when defining a string.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-css-variables"&gt;
  &lt;/a&gt;
  &lt;strong&gt;USING CSS VARIABLES&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To use the CSS variables you must specify your CSS Variable name inside the &lt;code&gt;var()&lt;/code&gt; function, in place of a regular property value. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;var()&lt;/code&gt; function is used to insert the value of a CSS variable. &lt;/p&gt;

&lt;p&gt;The syntax of the var() function is as follows: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;var(--name, value)&lt;/code&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The variable name (must start with two dashes)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Value is Optional: The fallback value (used if the variable is not found) &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 {

--main-text-color: white;

color: var( --main-text-color);

} 


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 1&lt;/strong&gt; contains the variable name alone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 {

--main-text-color: white;

color: var( --main-text-color, red);

} 


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt; contains the variable name and the fallback value(red). &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#scooping-variables"&gt;
  &lt;/a&gt;
  &lt;strong&gt;SCOOPING VARIABLES&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Scope determines the range of the accessibility of the variable. Scope helps to store separate values, which come into play only when they are necessary. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variables have two types of scope:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global Scope&lt;/li&gt;
&lt;li&gt;local Scope&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#global-scope"&gt;
  &lt;/a&gt;
  &lt;strong&gt;GLOBAL SCOPE&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Global scope is declared in &lt;code&gt;:root&lt;/code&gt; pseudo-class. Declaring the variable in &lt;code&gt;:root&lt;/code&gt; enables the variable to be accessed/used through out the entire document or globally across the entire HTML document. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To declare a variable in the global scope, you:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define the variable in a &lt;code&gt;:root{}&lt;/code&gt; pseudo class
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root { 
--primary-color: #000;
--text-shadow: 2px 2px 1px white;
 }  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Assign the variables to different child elements in your document
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1,h2 { 
color: var(--primary-color); 
text-shadow: var(--text-shadow);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Declaring a CSS variable on the &lt;code&gt;:root&lt;/code&gt; pseudo-class and using it where needed throughout the document, will help you avoid repetition and it will be easier if you want to change the value across the entire page later.&lt;/p&gt;

&lt;p&gt;It is common practice to define variables inside the &lt;code&gt;:root&lt;/code&gt; but not mandatory &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#local-scope"&gt;
  &lt;/a&gt;
  &lt;strong&gt;LOCAL SCOPE&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;The local scope&lt;/strong&gt; would only affect the specific HTML element that it is declared in along with any children that the element may contain. &lt;/p&gt;

&lt;p&gt;To create a variable with local scope, declare it inside the selector that is going to use it.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 {
  --font-size: 18px;
  --line-height-h1: 1.6;
  font-size: var(--font-size);
  line-height: var(--line-height-h1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that &lt;strong&gt;Global variables&lt;/strong&gt; can be accessed/used throughout the entire document, while &lt;strong&gt;local variables&lt;/strong&gt; can be used only inside the selector where it is declared.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#hoisting-css-variables"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HOISTING CSS VARIABLES&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Like in JavaScript, &lt;strong&gt;CSS variables&lt;/strong&gt; can be hoisted. This means that CSS variables can be used before they are declared. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
color: var(--font-color);
}

:root {
--font-color: orange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above example, CSS variable &lt;code&gt;--font-color&lt;/code&gt; was used before it was declared in the &lt;code&gt;:root&lt;/code&gt; pseudo-selector, and the code works fine.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#overriding-css-variables"&gt;
  &lt;/a&gt;
  &lt;strong&gt;OVERRIDING CSS VARIABLES&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can override &lt;strong&gt;CSS Variables&lt;/strong&gt; like every other CSS property. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
--btn-color: red;
}

button {
--btn-color: white;
color: var(--btn-color);
padding: 2em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the button text color will be white.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I set the &lt;code&gt;--btn-color: red;&lt;/code&gt; on the &lt;code&gt;:root&lt;/code&gt; pseudo-class meaning I want my button text color to be red&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I wasn't okay with the red color for my button so I changed: &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;--btn-color: red;&lt;/code&gt; to &lt;code&gt;--btn-color: white;&lt;/code&gt; on the button selector meaning my button text color will be white instead of the red color I set on the &lt;code&gt;:root{}&lt;/code&gt; pseudo class.&lt;/p&gt;

&lt;p&gt;Overriding the CSS variable is cool, yeah? be careful not to overuse this as you are defeating the main purpose of CSS variables if you are going to be overriding them.&lt;/p&gt;

&lt;p&gt;I will tell you to change the value from the &lt;code&gt;:root&lt;/code&gt; pseudo-class or assign a different variable.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#use-of-multiple-variables"&gt;
  &lt;/a&gt;
  USE OF MULTIPLE VARIABLES
&lt;/h3&gt;

&lt;p&gt;You are not limited to use a single var() in your declarations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
--padding: 10px 20px;
}

div {
padding: var(--padding);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#declaring-a-variable-within-a-variable"&gt;
  &lt;/a&gt;
  &lt;strong&gt;DECLARING A VARIABLE WITHIN A VARIABLE&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can also declare a variable within another variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
--background-color: orange;
--border: 1px solid var(--background-color);
}

button {
border: var(--border);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#fallback-values"&gt;
  &lt;/a&gt;
  &lt;strong&gt;FALLBACK VALUES&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Fallback values&lt;/strong&gt; are used if the variable value given as the first argument isn't defined or has an invalid value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
background-color: var(--main-background-color, green);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;--main--background-color&lt;/code&gt; is not defined or declared, the color of the background will be green. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 {
color: var(--main-text-color, var(--text-color, green));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Notice any difference between **Example 1&lt;/strong&gt; and &lt;strong&gt;Example 2&lt;/strong&gt;?** &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt; have more than one fallback value. In &lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--text-color&lt;/code&gt; is the fallback value for &lt;code&gt;--main-text-color&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt; is the fallback value for &lt;code&gt;--text-color&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Color will be green  if ~--main-text-color~ and ~--text-color~ are not defined &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you understand?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fallback values&lt;/strong&gt; only accept two parameters, everything following the first comma is the second parameter. If the first parameter is provided the fallback will fail.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#advantages-of-using-css-variables"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ADVANTAGES OF USING CSS VARIABLES&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Makes the code easier to read(understandable).&lt;/li&gt;
&lt;li&gt;Makes it much easier to change the color values.&lt;/li&gt;
&lt;li&gt;CSS variables can be declared anywhere, it is flexible.&lt;/li&gt;
&lt;li&gt;CSS variables help remove redundancy In code.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CONCLUSION&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The ability to maintain and reference information in more than one location is a huge benefit of CSS variables. This allows us to easily update information and not have to go into every place we used that information. They also make it easier to read and understand code and they make it easier to work with other developers on a project.&lt;/p&gt;

&lt;p&gt;If you have any questions about &lt;strong&gt;CSS variables&lt;/strong&gt;, you can leave them in the comment section below and I'll be happy to answer every single one.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it 💙.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍.&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GraphQL in Production — Analyzing public GraphQL APIs #1: Twitch.tv</title>
      <author>S ♠️</author>
      <pubDate>Sat, 23 Oct 2021 21:47:58 +0000</pubDate>
      <link>https://dev.to/growthatwundergraph/graphql-in-production-analyzing-public-graphql-apis-1-twitchtv-1193</link>
      <guid>https://dev.to/growthatwundergraph/graphql-in-production-analyzing-public-graphql-apis-1-twitchtv-1193</guid>
      <description>&lt;p&gt;Hello Wunderfans! If you enjoy our content, never miss a blog post or story by subscribing to our &lt;a href="https://form.typeform.com/to/KJ96Egx6?typeform-embed-id=6417981227324653&amp;amp;typeform-embed=popup-blank&amp;amp;typeform-source=wundergraph.com&amp;amp;typeform-medium=embed-sdk&amp;amp;typeform-medium-version=next"&gt;newsletter&lt;/a&gt; or even better, joining our &lt;a href="https://discord.gg/cnRWwHXbQm"&gt;Discord!&lt;/a&gt; Hope you enjoy our latest piece and happy coding!&lt;/p&gt;

&lt;p&gt;Analyzing public GraphQL APIs is a Series of blog posts to learn from big public GraphQL implementations, starting with Twitch.tv, the popular streaming platform.&lt;/p&gt;

&lt;p&gt;We usually assume that GraphQL is just GraphQL. With REST, there's a lot of confusion what it actually is. Build a REST API and the first response you get is that someone says this is not really REST but just JSON over HTTP, etc...&lt;/p&gt;

&lt;p&gt;But is this really exclusively a REST thing? Is there really just one way of doing GraphQL?&lt;/p&gt;

&lt;p&gt;I've looked at many publicly available GraphQL APIs of companies whose name you're familiar with and analyzed how they "do GraphQL". I quickly realized that everybody does it a bit differently. With this series of posts, I want to extract good and bad patterns from large GraphQL production deployments.&lt;/p&gt;

&lt;p&gt;At the end of the series, we'll conclude with a WhitePaper, summarizing all the best practices on how to run GraphQL in production. Make sure to sign up with our WhitePaper early access list. We'll keep you updated on the next post of this series and send you the &lt;a href="https://form.typeform.com/to/MnT3tfml?typeform-embed-id=718541957924342&amp;amp;typeform-embed=embed-widget&amp;amp;typeform-source=wundergraph.com&amp;amp;typeform-medium=embed-sdk&amp;amp;typeform-medium-version=next"&gt;WhitePaper&lt;/a&gt; once it's out.&lt;br&gt;
I'm not using any special equipment to do this. You can use your preferred browser with the browser dev tools to follow along.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#lets-dive-into-the-first-candidate-twitchtv"&gt;
  &lt;/a&gt;
  Let's dive into the first candidate: Twitch.tv
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#analyzing-the-graphql-api-of-twitchtv"&gt;
  &lt;/a&gt;
  Analyzing the GraphQL API of Twitch.tv
&lt;/h2&gt;

&lt;p&gt;The first thing you notice is that twitch hosts their GraphQL API on the subdomain &lt;a href="https://gql.twitch.tv/gql"&gt;https://gql.twitch.tv/gql&lt;/a&gt;. Looking at the URL patterns and Headers, it seems that twitch is not versioning their API.&lt;/p&gt;

&lt;p&gt;If you look at the Chrome Devtools or similar, you'll notice that for each new "route" on the website, multiple requests are being made to the gql subdomain. In my case, I can count 12 requests on the initial load of the site.&lt;/p&gt;

&lt;p&gt;What's interesting is that these requests are being queued sequentially. Starting with the first one at 313ms, then 1.27s, 1.5s, 2.15s, ... , and the last one at 4.33s. One of the promises of GraphQL is to solve the Waterfall problem. However, this only works if all the data required for the website is available in a single GraphQL Operation.&lt;/p&gt;

&lt;p&gt;In case of twitch, we've counted 12 requests, but we're not yet at the operation level. Twitch batches requests, but we'll come to that in a minute.&lt;/p&gt;

&lt;p&gt;I've noticed another problem with the twitch API. It's using HTTP/1.1 for all requests, not HTTP/2. Why is it a problem? HTTP/2 multiplexes multiple Requests over a single TCP connection, HTTP/1.1 doesn't. You can see this if you look at the timings in Chrome DevTools. Most of the requests can (re-)use an existing TCP Connection, while others initiate a new one. Most of the requests have ~300ms latency while the ones with a connection init and TLS handshake clock in at around 430ms.&lt;/p&gt;

&lt;p&gt;Now let's have a closer look at the requests itself. Twitch sends GraphQL Queries using HTTP POST. Their preferred Content-Encoding for Responses is gzip, they don't support brotli.&lt;/p&gt;

&lt;p&gt;If you're not logged in, the client sends the Header "Authorization: undefined", which looks like a frontend glitch. Content-Type of the Request is "text/plain" although the payload is JSON.&lt;/p&gt;

&lt;p&gt;Some of their requests are single GraphQL requests with a JSON Object. Others are using a batching mechanism, meaning, they send multiple Operations as an Array. The response also comes back as an Array as well, so the client then matches all batched operations to the same response index.&lt;/p&gt;

&lt;p&gt;Here's an example of such a batch request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;operationName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ConnectAdIdentityMutation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;variables&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;targetDeviceID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2a38ce069ff87bd4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extensions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;persistedQuery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sha256Hash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aeb02ffde95392868a9da662631090526b891a2972620e6b6393873a39111564&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;operationName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VideoPreviewOverlay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;variables&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dason&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;extensions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;persistedQuery&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sha256Hash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3006e77e51b128d838fa4e835723ca4dc9a05c5efd4466c1085215c6e437e65c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Counting all GraphQL Operations for the initial Website load, I get at 74 Operations in total.&lt;/p&gt;

&lt;p&gt;Here's a list of all Operations in order of appearance:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Single 1 (1.2kb Response gzip)
    PlaybackAccessToken_Template
Batch 1 (5.9kb Response gzip)
    Consent
    Ads_Components_AdManager_User
    Prime_PrimeOffers_CurrentUser
    TopNav_CurrentUser
    PersonalSections
    PersonalSections (different arguments)
    SignupPromptCategory
    ChannelShell
    ChannelVideoLength
    UseLive
    ActiveWatchParty
    UseViewCount
    UseHosting
    DropCurrentSessionContext
    VideoPreviewOverlay
    VideoAdBanner
    ExtensionsOverlay
    MatureGateOverlayBroadcaster
    VideoPlayer_AgeGateOverlayBroadcaster
    CountessData
    VideoPlayer_VideoSourceManager
    StreamTagsTrackingChannel
    ComscoreStreamingQuery
    StreamRefetchManager
    AdRequestHandling
    NielsenContentMetadata
    ExtensionsForChannel
    ExtensionsUIContext_ChannelID
    PlayerTrackingContextQuery
    VideoPlayerStreamMetadata
Batch 2 (0.7kb Response gzip)
    WatchTrackQuery
    VideoPlayerStatusOverlayChannel
Batch 3 (20.4 Response gzip)
    ChatRestrictions
    MessageBuffer_Channel
    PollsEnabled
    CommunityPointsRewardRedemptionContext
    ChannelPointsPredictionContext
    ChannelPointsPredictionBadges
    ChannelPointsContext
    ChannelPointsGlobalContext
    ChatRoomState
    Chat_ChannelData
    BitsConfigContext_Global
    BitsConfigContext_Channel
    StreamRefetchManager
    ExtensionsForChannel
Batch 4 (0.5kb Response gzip)
    RadioCurrentlyPlaying
Batch 5 (15.7kb Response gzip)
    ChannelPollContext_GetViewablePoll
    AvailableEmotesForChannel
    TrackingManager_RequestInfo
    Prime_PrimeOffers_PrimeOfferIds_Eligibility
    ChatList_Badges
    ChatInput
    VideoPlayerPixelAnalyticsUrls
    VideoAdRequestDecline
Batch 6 (2kb Response gzip)
    ActiveWatchParty
    UseLive
    RealtimeStreamTagList
    StreamMetadata
    UseLiveBroadcast
Batch 7 (1.1kb Response gzip)
    ChannelRoot_AboutPanel
    GetHypeTrainExecution
    DropsHighlightService_AvailableDrops
    CrowdChantChannelEligibility
Batch 8 (1.5kb Response gzip)
    ChannelPage_SubscribeButton_User
    ConnectAdIdentityMutation
Batch 9 (1.0kb Response gzip)
    RealtimeStreamTagList
    RadioCurrentlyPlaying
    ChannelPage_SubscribeButton_User
    ReportMenuItem
Batch 10 (1.3kb Response gzip)
    AvailableEmotesForChannel
    EmotePicker_EmotePicker_UserSubscriptionProducts
Batch 11 (11.7kb Response gzip)
    ChannelLeaderboards
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;All responses cumulated clock in at 63kb gzipped.&lt;/p&gt;

&lt;p&gt;Note that all of these Requests are HTTP POST and therefore don't make any use of Cache-Control Headers. The batch requests use transfer-encoding chunked.&lt;/p&gt;

&lt;p&gt;However, on subsequent routes, there seems to be some client-side caching happening. If I change the route to another channel, I can only count 69 GraphQL Operations.&lt;/p&gt;

&lt;p&gt;Another observation I can make is that twitch uses APQ, Automatic Persisted Queries. On the first request, the client sends the complete Query to the server. The server then uses the "extends" field on the response object to tell the client the Persisted Operation Hash. Subsequent client requests will then omit the Query payload and instead just send the Hash of the Persisted Operation. This saves bandwidth for subsequent requests.&lt;/p&gt;

&lt;p&gt;Looking at the Batch Requests, it seems that the "registration" of Operations happens at build time. So there's no initial registration step. The client only sends the Operation Name as well the Query Hash using the extensions field in the JSON request. (see the example request from above)&lt;/p&gt;

&lt;p&gt;Next, I've tried to use Postman to talk to the GraphQL Endpoint.&lt;/p&gt;

&lt;p&gt;The first response I've got was a 400, Bad Request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bad Request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Client-ID&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; header is missing from the request.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've copy-pasted the Client-ID from Chrome Devtools to solve the "problem".&lt;/p&gt;

&lt;p&gt;I then wanted to explore their schema. Unfortunately, I wasn't able to use the Introspection Query, it seems to be silently blocked.&lt;/p&gt;

&lt;p&gt;However, you could still easily extract the schema from their API using a popular exploit of the graphql-js library.&lt;/p&gt;

&lt;p&gt;If you send the following Query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;contextUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll get this response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;errors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cannot query field &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;contextUser&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; on type &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Query&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;. Did you mean &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;currentUser&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;locations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using these suggestions, we're able to reconstruct the Schema. I don't really think this is a security risk though. They are storing all GraphQL Queries in the client, and their API is public.&lt;/p&gt;

&lt;p&gt;Finally, I've tried to figure out how their chat works and if they are using GraphQL Subscriptions as well. Switching the Chrome Dev Tools view to "WS" (WebSocket) shows us two WebSocket connections.&lt;/p&gt;

&lt;p&gt;One is hosted on the URL wss://pubsub-edge.twitch.tv/v1. It seems to be using versioning, or at least they expect to version this API. Looking at the messages going back and forth between client and server, I can say that the communication protocol is not GraphQL. The information exchanged over this connection is mainly around video playback, server time and view count, so it's keeping the player information in sync.&lt;/p&gt;

&lt;p&gt;Example message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;viewcount&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;server_time&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:1634212649.543356,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;viewers&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;:1574}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;topic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video-playback-by-id.31239503&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second WebSocket connection connects to this URL: wss://irc-ws.chat.twitch.tv/ IRC stands for "Internet Relay Chat". I can only assume that this WebSocket connection is a bridge to an IRC server which hosts all the chats for twitch. The protocol is also not GraphQL. Here's an example message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;badge&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;badges&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9989568&lt;/span&gt;&lt;span class="nx"&gt;f3c0ac4c1376b3d2394c5421e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;Kawazaki32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;emotes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;282886&lt;/span&gt;&lt;span class="nx"&gt;fb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7321&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="nx"&gt;a7&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="nx"&gt;c7c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="nx"&gt;fd994777244&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;57292293&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;tmi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;sent&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1634212378678&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;turbo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;711847782&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;kawazaki32&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;kawazaki32&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;kawazaki32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tmi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;twitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tv&lt;/span&gt; &lt;span class="nx"&gt;PRIVMSG&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;ratirl&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;KEKW&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#discussion"&gt;
  &lt;/a&gt;
  Discussion
&lt;/h1&gt;

&lt;p&gt;Let's start with the things that surprised me the most.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#http-11-vs-http2-graphql-request-batching"&gt;
  &lt;/a&gt;
  HTTP 1.1 vs. HTTP2 - GraphQL Request Batching
&lt;/h1&gt;

&lt;p&gt;If you need to run more than 70 GraphQL Operations, it's obvious that you have to implement some sort of optimizations to handle the load when there could be hundreds of thousands or even millions of viewers per channel.&lt;/p&gt;

&lt;p&gt;Batching can be achieved in different ways. One way of batching leverages the HTTP protocol, but batching is also possible in the application layer itself.&lt;/p&gt;

&lt;p&gt;Batching has the advantage that it can reduce the number of HTTP requests. In case of twitch, they are batching their 70+ Operations over 12 HTTP requests. Without batching, the Waterfall could be even more extreme. So, it's a very good solution to reduce the number of Requests.&lt;/p&gt;

&lt;p&gt;However, batching in the application layer also has its downsides. If you batch 20 Operations into one single Request, you always have to wait for all Operations to resolve before the first byte of the response can be sent to the client. If a single resolver is slow or times out, I assume there are timeouts, all other Operations must wait for the timeout until the responses can be delivered to the client.&lt;/p&gt;

&lt;p&gt;Another downside is that batch requests almost always defeat the possibility of HTTP caching. As the API from twitch uses HTTP POST for READ (Query) requests, this option is already gone though.&lt;/p&gt;

&lt;p&gt;Additionally, batching can also lead to a slower perceived user experience. A small response can be parsed and processed very quickly by a client. A large response with 20+ kb of gzipped JSON takes longer to parse, leading to longer processing times until the data can be presented in the UI.&lt;/p&gt;

&lt;p&gt;So, batching can reduce network latency, but it's not free.&lt;/p&gt;

&lt;p&gt;Another way of batching makes use of HTTP/2. It's a very elegant way and almost invisible.&lt;/p&gt;

&lt;p&gt;HTTP/2 allows browsers to send hundreds of individual HTTP Requests over the same TCP connection. Additionally, the protocol implements Header Compression, which means that client and server can build a dictionary of words in addition to some well known terms to reduce the size of Headers dramatically.&lt;/p&gt;

&lt;p&gt;This means, if you're using HTTP/2 for your API, there's no real benefit of "batching at the application layer".&lt;/p&gt;

&lt;p&gt;The opposite is actually the case, "batching" over HTTP/2 comes with big advantages over HTTP/1.1 application layer batching.&lt;/p&gt;

&lt;p&gt;First, you don't have to wait for all Requests to finish or time out. Each individual request can return a small portion of the required data, which the client can then render immediately.&lt;/p&gt;

&lt;p&gt;Second, serving READ Requests over HTTP GET allows for some extra optimizations. You're able to use Cache-Control Headers as well as ETags. Let's discuss these in the next section.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#http-post-the-wrong-way-of-doing-read-requests"&gt;
  &lt;/a&gt;
  HTTP POST, the wrong way of doing READ requests
&lt;/h1&gt;

&lt;p&gt;Twitch is sending all of their GraphQL Requests over HTTP/1.1 POST. I've investigated the payloads and found out that many of the Requests are loading public data that uses the current channel as a variable. This data seems to be always the same, for all users.&lt;/p&gt;

&lt;p&gt;In a high-traffic scenario where millions of users are watching a game, I'd assume that thousands of watchers will continually leave and join the same channel. With HTTP POST and no Cache-Control or ETag Headers, all these Requests will hit the origin server. Depending on the complexity of the backend, this could actually work, e.g. with a REST API and an in memory database.&lt;/p&gt;

&lt;p&gt;However, these POST Requests hit the origin server which then executes the persisted GraphQL Operations. This can only work with thousands of servers, combined with a well-defined Resolver architecture using the Data-Loader pattern and application-side caching, e.g. using Redis.&lt;/p&gt;

&lt;p&gt;I've looked into the Response timings, and they are coming back quite fast! So, the twitch engineers must have done a few things quite well to handle this kind of load with such a low latency.&lt;/p&gt;

&lt;p&gt;Let's assume that twitch used HTTP GET Requests for Queries over HTTP/2. Even with a MaxAge of just 1 second, we'd be able to use a CDN like Cloudflare which could turn 50k "channel joins" into a single Request. Reducing 50k RPS hitting the GraphQL origin can result in a dramatic cost reduction, and we're just talking about a single twitch channel.&lt;/p&gt;

&lt;p&gt;However, this is not yet the end of the story. If we add ETags to our environment, we can reduce the load even further. With ETags, the browser can send an "If-None-Match" Header with the value received from a previous network Request. If the response did not change, and therefore the ETag also didn't change, the server simply returns a 304 Not Modified response without a body.&lt;/p&gt;

&lt;p&gt;So, if not much has changed when hopping between channels, we're able to save most of the 60kb gzipped JSON per channel switch.&lt;/p&gt;

&lt;p&gt;Keep in mind that this is only possible if we don't do batching at the application layer. The larger the batch, the smaller the likelyhood that an ETag for a whole batch doesn't change.&lt;/p&gt;

&lt;p&gt;As you've learned, using HTTP/2 with GET for READS can reduce the load on the origin as well as reduce the bandwidth to load the website. For those watching twitch from their mobile or on a low bandwidth connection, this could make the difference.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#does-graphql-really-solve-the-waterfall-problem"&gt;
  &lt;/a&gt;
  Does GraphQL really solve the Waterfall problem?
&lt;/h1&gt;

&lt;p&gt;One of my pet peeves is when developers glorify GraphQL. One of these glorifications is that GraphQL solves the Waterfall problem of REST APIs.&lt;/p&gt;

&lt;p&gt;I've read it in many blog posts on GraphQL vs REST that the Query language allows you to Query all the data in one single Request and solves the Waterfall problem this way.&lt;/p&gt;

&lt;p&gt;Then tell me why the engineers decided to send 70 GraphQL Operations over 12 batch requests with a Waterfall of more than 4 seconds? Don't they understand the capabilities of GraphQL? Why do they use GraphQL if they still fall into the same traps as with REST APIs?&lt;/p&gt;

&lt;p&gt;The reality is, it's probably not a single team of 3 Frontend Developers and 2 Backend Developers who develop the website.&lt;/p&gt;

&lt;p&gt;If you were a single developer who builds a simple blog, you're probably able to Request all the data you need in a single GraphQL Request. Clients like Relay can help achieve this goal.&lt;/p&gt;

&lt;p&gt;However, I think every larger (not all) batch Request can be understood as a pointer to Conway's Law.&lt;/p&gt;

&lt;p&gt;Different parts of the website could be implemented by different teams. Each component, e.g. the Chat, has some specific Operations which are batched together.&lt;/p&gt;

&lt;p&gt;Obviously, these are just assumptions, but I want to be fair and not judge their implementation only by looking at it from the outside.&lt;/p&gt;

&lt;p&gt;In terms of the Waterfall problem, GraphQL doesn't really solve it for twitch. That said, I don't think this is their biggest issue. I just wanted to point out that it's not always possible to leverage technologies to their full extend if organizational structures don't allow for it.&lt;/p&gt;

&lt;p&gt;If you want to improve the architecture of your application, look at the organization first.&lt;/p&gt;

&lt;p&gt;Two teams will probably build a two-step compiler. The teams will probably build an application with three big batch requests. If you want to optimize how individual parts of your application communicate, think about the communication within your company first.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#apq-automatic-persisted-queries-are-they-worth-it"&gt;
  &lt;/a&gt;
  APQ - Automatic Persisted Queries, are they worth it?
&lt;/h1&gt;

&lt;p&gt;With APQ, GraphQL Operations will be stored on the server to reduce bandwidth and increase performance. Instead of sending the complete Query, the client only sends the Hash of the registered Operation. There's an example above.&lt;/p&gt;

&lt;p&gt;While APQ reduce the Request size slightly, we've already learned that they don't help with the Response size as ETags do.&lt;/p&gt;

&lt;p&gt;On the server-side, most implementations don't really optimize. They look up the Operation from a dictionary, parse and execute it. The operation will not be pre-processes or anything.&lt;/p&gt;

&lt;p&gt;The twitch GraphQL API allows you to send arbitrary, non-persisted, Operations as well, so they are not using APQ as a security mechanism.&lt;/p&gt;

&lt;p&gt;My personal opinion is that APQ add complexity without much benefit.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-youve-made-it-this-far-why-not-just-have-our-stories-sent-directly-to-your-inbox"&gt;
  &lt;/a&gt;
  If you’ve made it this far, why not just have our stories sent directly to your inbox?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://8bxwlo3ot55.typeform.com/to/KJ96Egx6?format=json&amp;amp;referrer=https%3A%2F%2Fmedium.com%2F%40Growth_at_Wundergraph%2Fgraphql-file-uploads-evaluating-the-5-most-common-approaches-d3ee4f3be612&amp;amp;typeform-embed-id=18449291482131458&amp;amp;typeform-embed=popup-blank&amp;amp;typeform-medium-version=next&amp;amp;typeform-medium=embed-sdk&amp;amp;typeform-source=wundergraph.com"&gt;Let's chat&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#disabling-introspection-without-fixing-the-recommendations-bug"&gt;
  &lt;/a&gt;
  Disabling introspection without fixing the recommendations bug
&lt;/h1&gt;

&lt;p&gt;I don't want to deep dive into security in this post, so this is just a quick note on disabling introspection.&lt;/p&gt;

&lt;p&gt;In general, it could make sense to disable introspection to not allow every API user to explore your GraphQL Schema. The schema might leak sensitive information. That said, there's a problem with some implementations, like the graphql-js reference implementation, that leak Schema information even with introspection disabled.&lt;/p&gt;

&lt;p&gt;If your implementation uses these suggestions, and you want to disable introspection entirely, make sure to tackle this problem. We'll discuss a solution in the suggestions section of this post.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#should-you-use-graphql-subscriptions-for-realtime-updates"&gt;
  &lt;/a&gt;
  Should you use GraphQL Subscriptions for Realtime Updates?
&lt;/h1&gt;

&lt;p&gt;GraphQL Subscriptions allow you to stream updates to the client using the Query Language. Twitch is not leveraging this feature though.&lt;/p&gt;

&lt;p&gt;In terms of the Chat, it looks like they are using IRC underneath. They've probably started using it before they looked at GraphQL. Wrapping this implementation with GraphQL Subscriptions might not add any extra benefits.&lt;/p&gt;

&lt;p&gt;It would obviously be a lot cleaner if all the traffic was handled by GraphQL but making the switch might not be worth it.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that twitch is using WebSockets for Realtime updates. I've tackled this topic in another blog post, the gist is that WebSockets are a terrible solution for Realtime Updates for many reasons. As an alternative, I suggest using HTTP/2 streams.&lt;/p&gt;

&lt;p&gt;That's enough for the discussion. Next, I'll share some of my recommendations on how you can build production-grade GraphQL APIs using the twitch API as an example.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#suggestions"&gt;
  &lt;/a&gt;
  Suggestions
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#read-requests-should-always-use-http-get-over-http2"&gt;
  &lt;/a&gt;
  READ Requests should always use HTTP GET over HTTP/2
&lt;/h3&gt;

&lt;p&gt;READ Requests or GraphQL Queries should always use HTTP GET Requests over HTTP/2. This solves almost all problems I've described above.&lt;/p&gt;

&lt;p&gt;With this in place, there's no need to do application layer batching.&lt;/p&gt;

&lt;p&gt;How can you achieve this?&lt;/p&gt;

&lt;p&gt;For each GraphQL Operation that you define within your application, create a dedicated JSON API Endpoint and make your API client use GET requests for Queries, variables can be sent using a Query parameter.&lt;/p&gt;

&lt;p&gt;For each Endpoint, you can then add specific Cache-Control configurations, and a middleware to handle ETags to improve performance for individual operations without sacrificing a good User Experience.&lt;/p&gt;

&lt;p&gt;You might be thinking that this adds complexity to your application. Keeping client and server in sync might be complicated. Doesn't this break all of the existing GraphQL clients?&lt;/p&gt;

&lt;p&gt;Yes, it does add complexity. It doesn't just break existing clients, it's against everything you've probably heard about GraphQL.&lt;/p&gt;

&lt;p&gt;Yet, it makes so much sense to leverage HTTP to its full extend, allow Browsers to do their Job as well as Proxies and CDNs. They all understand Cache-Control Headers and ETags, let them do their work!&lt;/p&gt;

&lt;p&gt;But please, without the additional complexity. At least, that's what we thought, so we solved this problem, the solution is way too simple.&lt;/p&gt;

&lt;p&gt;First, define all the Operations you need for your application, just like the twitch engineers did. WunderGraph then generates a GraphQL Gateway that exposes a secure JSON RPC API. Additionally, we generate a type-safe API client / SDK in any language so that you can easily "call" into your pre-defined Operations.&lt;/p&gt;

&lt;p&gt;This setup uses HTTP/2 and leverages all the capabilities of Browsers, CDNs and Proxies. Because we're not talking GraphQL over the wire, it also increases security. Introspection leaks? Impossible. Denial of Service attacks using complex Queries? Impossible.&lt;/p&gt;

&lt;p&gt;You're still defining GraphQL Operations, it still feels like GraphQL, it's just not sending Queries over POST Requests.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#apq-lt-compiled-operations"&gt;
  &lt;/a&gt;
  APQ &amp;lt; Compiled Operations
&lt;/h1&gt;

&lt;p&gt;Automatic Persisted Queries are a good idea to improve performance, however, they are not really thought out well.&lt;/p&gt;

&lt;p&gt;Looking up a persisted Operation in a hashmap to then parse and execute them still means you're "interpreting" with all its downsides.&lt;/p&gt;

&lt;p&gt;With WunderGraph we're going a different route. When you define an Operation, we're actually validating and compiling it into extremely efficient code, at runtime.&lt;/p&gt;

&lt;p&gt;When executing a pre-defined Operation in WunderGraph, all we do is to insert the variables and then execute a tree of operations. There's no parsing and validation happening at runtime.&lt;/p&gt;

&lt;p&gt;WunderGraph works like a database with prepared statements, it's just not using tables as storage but talks to APIs.&lt;/p&gt;

&lt;p&gt;This way, we're adding almost no overhead at runtime. Instead, with the ETag &amp;amp; Caching middlewares, we can easily speed up your GraphQL APIs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#subscriptions-over-http2-streams"&gt;
  &lt;/a&gt;
  Subscriptions over HTTP/2 Streams
&lt;/h1&gt;

&lt;p&gt;We've linked another post above outlining the problems with WebSockets. In a nutshell, WebSockets are stateful, make authentication complicated and require an extra TCP connection per socket.&lt;/p&gt;

&lt;p&gt;To solve this issue for you, both WunderGraph client and server implement Subscriptions and Realtime Streams over HTTP/2.&lt;/p&gt;

&lt;p&gt;We're fully compatible to "standard" GraphQL Subscription implementations using WebSockets, when talking to your origins though. We'll just hide these behind our secure JSON RPC API, streaming responses to clients over HTTP/2.&lt;/p&gt;

&lt;p&gt;This way, your Subscriptions are kept stateless and authentication is properly handled for you. Another problem you don't have to solve.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope this new series helps you see through glorified blog posts, and you realize that reality looks differently.&lt;/p&gt;

&lt;p&gt;I think it needs a standard to run GraphQL in production. If you follow this series, you'll realize that all big players do it differently. It's really inefficient if every company tries to find their own ways of building their API infrastructure.&lt;/p&gt;

&lt;p&gt;That's why we're here! We're establishing this standard. We can give you a tool that lets you leverage all the best practices you'll discover in this series. Ask yourself if solving all these problems is the core domain of your business. Your answer should be "no", otherwise you're probably an API or Dev-Tool vendor.&lt;/p&gt;

&lt;p&gt;If you need help with your GraphQL implementation, please get in touch!&lt;/p&gt;

&lt;p&gt;If you liked this new series, make sure to sign up with the WhitePaper or follow us on &lt;a href="https://twitter.com/wundergraphcom?lang=en"&gt;Twitter&lt;/a&gt; and &lt;a href="https://discord.gg/cnRWwHXbQm"&gt;Discord!&lt;/a&gt; Feel free suggest another API which we should analyze.&lt;/p&gt;

&lt;p&gt;By the way, if you're working at twitch, we'd love to talk to you and get some more insights on the internals of your GraphQL API.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>graphql</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Vscode is finally available in the browser</title>
      <author>Baadi Mohsin</author>
      <pubDate>Sat, 23 Oct 2021 20:50:15 +0000</pubDate>
      <link>https://dev.to/mohcine/vscode-is-finally-available-in-the-browser-26kd</link>
      <guid>https://dev.to/mohcine/vscode-is-finally-available-in-the-browser-26kd</guid>
      <description>&lt;p&gt;A web-based and lightweight version of vscode is now accessible via the web, all you have to do is go to the link  &lt;a href="https://vscode.dev"&gt;https://vscode.dev&lt;/a&gt;,  and you will be presented with an instance of vs code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ii89NXQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634918453125/9MCnDzu0Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ii89NXQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634918453125/9MCnDzu0Z.png" alt="vscode-dev.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and to make it even better, sync it (i.e. syncing settings, themes, key bindings, ...etc) with the vscode in your local machine by activating "Settings Sync" and connecting it with either your Microsoft or Github account.&lt;/p&gt;

&lt;p&gt;that's it, enjooooy &lt;/p&gt;

&lt;p&gt;Source:  &lt;a href="https://code.visualstudio.com/blogs/2021/10/20/vscode-dev#_bringing-vs-code-to-the-browser"&gt;vscode.dev&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to install Oracle 18c and Docker on Ubuntu 20</title>
      <author>Adriana Gómez</author>
      <pubDate>Sat, 23 Oct 2021 20:43:53 +0000</pubDate>
      <link>https://dev.to/adrigomez95/how-to-install-oracle-18c-and-docker-on-ubuntu-20-51cj</link>
      <guid>https://dev.to/adrigomez95/how-to-install-oracle-18c-and-docker-on-ubuntu-20-51cj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#first-step-installing-docker-on-ubuntu"&gt;
  &lt;/a&gt;
  First Step: installing docker on ubuntu
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Update your existing package list:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sudo apt update&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next, install some prerequisite packages that allow apt to use packages over HTTPS:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sudo apt install apt-transport-https ca-certificates curl software-properties-common&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then, add the GPG key for the official Docker repository on your system:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the Docker repository to the APT feeds:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next, update the database package with the Docker packages from the newly added repository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sudo apt update&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure you're about to install from the Docker repository instead of the default Ubuntu repository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ apt-cache policy docker-ce&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;While the Docker version number may be different, you will see an output like this &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynWGPEHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdbhnh6kgmh8fpy7ju0p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynWGPEHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdbhnh6kgmh8fpy7ju0p.jpeg" alt="img2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally, install Docker:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sudo apt install docker-ce&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check that it works:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sudo systemctl status docker&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;the output will show that the service is active and running :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#second-step-installing-oracle-18c-on-docker"&gt;
  &lt;/a&gt;
  Second Step: installing oracle 18c on docker
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First extract the image from the docker repository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sudo docker pull dockerhelp/docker-oracle-ee-18c&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We run the Oracle 18c image and assign a port where it is going to communicate:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sudo docker run -p 7000:7000 -it dockerhelp/docker-oracle-ee-18c bash&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We run the installation file sh:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sh post_install.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We proceed to connect to the database, always inside the container:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$ sqlplus&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The user who creates us by default is the following:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;USER: sys as sysdba&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;PASS: oracle&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We enter and create a test user
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;SQL&amp;gt; alter session set "_ORACLE_SCRIPT"=true;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;Session altered.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;SQL&amp;gt; create user TEST identified by 1234;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;User created.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;SQL&amp;gt; grant dba to TEST;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;The IP of the container can be found out by exiting the container (without turning it off) with &lt;br&gt;
the key combination ctrl + p and then ctrl + q and running the following commands.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To display all containers that are active. In turn we 
will display the container id:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo docker ps&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The following command is used to get the ip of the container:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo docker inspect -f '{{range &lt;br&gt;
.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' [CONTAINER_ID]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;where "CONTAINER_ID" is the id generated in the previous step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#third-step-start-an-existing-container-in-docker"&gt;
  &lt;/a&gt;
  Third Step: start an existing container in docker
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The following commands are run to start the server:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo docker start aqui_tu_id_del_contenedor&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;sudo docker exec -it aqui_tu_id_del_contenedor bash&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;where "aqui_tu_id_del_contenedor" is the id of the container to start&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the case of oracle 18c, the following commands are executed for sign in:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sh post_install.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;sqlplus&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U4AEZFxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dmeq1rh99vmiyxoaws0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U4AEZFxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dmeq1rh99vmiyxoaws0.jpg" alt="img3"&gt;&lt;/a&gt;&lt;br&gt;
so we finish the instalation, i hope i helped you :)&lt;/p&gt;

</description>
      <category>docker</category>
      <category>oracle</category>
      <category>ubuntu</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The css chrome dev tool you didnt know of</title>
      <author>Hrn Svncハルン Харун Севиндж</author>
      <pubDate>Sat, 23 Oct 2021 20:39:17 +0000</pubDate>
      <link>https://dev.to/harsvnc/the-css-chrome-dev-tool-you-didnt-know-of-3155</link>
      <guid>https://dev.to/harsvnc/the-css-chrome-dev-tool-you-didnt-know-of-3155</guid>
      <description>&lt;p&gt;Did you know that chrome dev tools has a css overview panel to identify flaws inside your css?&lt;/p&gt;

&lt;p&gt;You can find it when you open your dev-tools in chrome (F12) and than &lt;strong&gt;More options&lt;/strong&gt;()   &lt;strong&gt;More&lt;/strong&gt;   &amp;gt; &lt;strong&gt;More tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;CSS Overview&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cg_G3vAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kh7959u4l7lhfwv1q9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cg_G3vAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kh7959u4l7lhfwv1q9h.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can get an high level overview of you page's css&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--apsx8__f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09ts5o5pgnlx7l9f91ge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--apsx8__f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09ts5o5pgnlx7l9f91ge.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;colors&lt;/strong&gt; section you can see all the colors you used and it even indicates bad contrasts in your css.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TK-LC4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e89sj0jhjgnjsh75pkjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TK-LC4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e89sj0jhjgnjsh75pkjt.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you learned something just as i did =)&lt;/p&gt;

&lt;p&gt;✅ If you liked this post, you may like my  🏠 &lt;a href="https://www.harun-sevinc.com"&gt;blog&lt;/a&gt; or even want to connect 💬 on &lt;a href="https://twitter.com/harsvnc"&gt;twitter&lt;/a&gt; 📢 for more information about building web applications or saas development or 💻 software development in general.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Java Performance - Chapter 1</title>
      <author>Yousef Zook</author>
      <pubDate>Sat, 23 Oct 2021 20:37:37 +0000</pubDate>
      <link>https://dev.to/yousef_zook/java-performance-chapter-1-1ocn</link>
      <guid>https://dev.to/yousef_zook/java-performance-chapter-1-1ocn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h1&gt;

&lt;p&gt;In the previous article, we demonstrated that we are going to discuss the great book &lt;strong&gt;Java Performance 2&lt;/strong&gt;&lt;sup&gt;&lt;strong&gt;nd&lt;/strong&gt;&lt;/sup&gt; &lt;strong&gt;Edition&lt;/strong&gt; by Scott Oaks.&lt;br&gt;
In this article we are goind to summarize the first book chapter, &lt;em&gt;Chapter 1: Introduction&lt;/em&gt;.&lt;br&gt;
Please note that many senteces have been quoted from the book itself.&lt;br&gt;
While you are reading this article, please consider that you are reading a summarized version of the chapter and chapter bold points only are included.&lt;/p&gt;

&lt;p&gt;Great, let's start the first chapter...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpv4aq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/43/3d/83/433d83f7e481f35245f8c6bb7c7591d8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpv4aq98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/43/3d/83/433d83f7e481f35245f8c6bb7c7591d8.gif" alt="Intro"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#for-who"&gt;
  &lt;/a&gt;
  For who?
&lt;/h1&gt;

&lt;p&gt;This book is designed for performance engineers and developers who are looking to understand how various aspects of the JVM and the Java APIs impact performance.&lt;br&gt;
If it is late Sunday night, your site is going live Monday morning, and you’re looking for a quick fix for performance issues, this is not the book for you.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;This is a book about the art and science of Java performance.&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#java-platforms"&gt;
  &lt;/a&gt;
  Java Platforms
&lt;/h1&gt;

&lt;p&gt;The book has covered the performance of &lt;em&gt;Oracle Hotspot JVM&lt;/em&gt; and &lt;em&gt;Java Developement Kit&lt;/em&gt; &lt;code&gt;JDK&lt;/code&gt; version 8 and 11, This is also known as Java, Standard Edition (SE). &lt;br&gt;
These versions of the JDK were selected because they carry long-term support (LTS) from Oracle. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#jvm-tuning-flags"&gt;
  &lt;/a&gt;
  JVM tuning flags
&lt;/h3&gt;

&lt;p&gt;JVM flags are curical parameters that you can pass to the java virtual machine to enhance the performance of your application.&lt;br&gt;
With a few exceptions, the JVM accepts two kinds of flags: boolean flags, and flags that require a parameter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Boolean flags&lt;/strong&gt; use this syntax: &lt;code&gt;-XX:+FlagName&lt;/code&gt; enables the flag, and &lt;code&gt;-XX:-FlagName&lt;/code&gt; disables the flag.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Paramterized Flags&lt;/strong&gt; that require a parameter use this syntax: &lt;code&gt;-XX:FlagName=something&lt;/code&gt;, meaning to set the value of &lt;code&gt;FlagName&lt;/code&gt; to &lt;code&gt;something&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Jkg02I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jchpxqc171ej83y2hph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Jkg02I_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jchpxqc171ej83y2hph.png" alt="Tuning Flags"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;from jrebel.com&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#hardware-platforms"&gt;
  &lt;/a&gt;
  Hardware Platforms
&lt;/h1&gt;

&lt;p&gt;From a performance perspective, the important thing about a machine is its number of cores. Let’s take a basic four-core machine: each core can (for the most part) pro‐ cess independently of the others, so a machine with four cores can achieve four times the throughput of a machine with a single core. (This depends on other factors about the software, of course.)&lt;br&gt;
However adding more threads to this machine not necessirly increase throuput or make the program finishes quicker, will see more examples in the following chapters.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#software-containers"&gt;
  &lt;/a&gt;
  Software Containers
&lt;/h3&gt;

&lt;p&gt;The biggest change in Java deployments in recent years is that they are now fre‐ quently deployed within a software container. That change is not limited to Java, of course; it’s an industry trend hastened by the move to cloud computing.&lt;br&gt;
Two containers are important here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virtual Machine: which sets up a com‐ pletely isolated copy of the operating system on a subset of the hardware on which the virtual machine is running. From Java’s perspective (and the perspective of other applications), that virtual machine is indistinguishable from a regular machine with &lt;code&gt;x cores&lt;/code&gt; and &lt;code&gt;n GB&lt;/code&gt; of memory.&lt;/li&gt;
&lt;li&gt;Docker Containers: A Java process running inside a Docker container doesn’t necessarily know it is in such a container. The Docker container is just a process (potentially with resource constraints) within a running OS, the way Java handles that differs between early versions of Java 8 (up until update 192) and later version of Java 8 (and all versions of Java 11).&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#the-complete-performance-story"&gt;
  &lt;/a&gt;
  The Complete Performance Story
&lt;/h1&gt;

&lt;p&gt;This book is focused on how to best use the JVM and Java platform APIs so that programs run faster, but many outside influences affect performance. &lt;br&gt;
Here are some notes for these outsides...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1write-better-algorithms"&gt;
  &lt;/a&gt;
  1.Write Better Algorithms:
&lt;/h3&gt;

&lt;p&gt;Ultimately, the performance of an application is based on how well it is written. If the program loops through all elements in an array, the JVM will optimize the way it per‐ forms bounds checking of the array so that the loop runs faster, and it may unroll the loop operations to provide an additional speedup. But if the purpose of the loop is to find a specific item, no optimization in the world is going to make the array-based code as fast as a different version that uses a hash map.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2write-less-code"&gt;
  &lt;/a&gt;
  2.Write Less Code
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A small well-written program will run faster than a large well-written program.   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So even if your code should be neat, extensible and easy to read, you should also consider the performance while writing your code.&lt;br&gt;
A subset of the team may argue that they are adding a small piece of code which will not affect the perfromance, then another part calims the same, and after some repition you will find that the progress may be affected by 10%.&lt;br&gt;
Over time, as the small regressions creep in, it will be harder and harder to fix them.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3oh-go-ahead-prematurely-optimize"&gt;
  &lt;/a&gt;
  3.Oh, Go Ahead, Prematurely Optimize
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;premature optimization&lt;/em&gt;: A term often used by developers to claim that the performance of their code doesn’t matter, and if it does matter, we won’t know that until the code is run.&lt;br&gt;
&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are going to change the code to get better performance but this will lead to complicating the code and make it hard to fix in the future, then it's better to not do this enhancement till the profiling is done and points that this enhancement is mandatory.&lt;/li&gt;
&lt;li&gt;However, if you have 2 choices and they are both straighforward and easy to make, and 1 of them will enhance the performance, then do it. 
Let's take the following example:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FINE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"I am here, and the value of X is "&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcX&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" and Y is "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcY&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This code do string concatination and calls some functions &lt;code&gt;calcX()&lt;/code&gt; and &lt;code&gt;calcY()&lt;/code&gt;, when the log level is &lt;code&gt;FINE&lt;/code&gt;. However this level of logging often are not used and it will not be printed, in this case it is better to check if it is loggable first to save the time of string concatination and the functions calls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isLoggable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FINE&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FINE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"I am here, and the value of X is {} and Y is {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[]{&lt;/span&gt;&lt;span class="n"&gt;calcX&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;calcY&lt;/span&gt;&lt;span class="o"&gt;()});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This avoids the string concatenation altogether (the message format isn’t necessarily more efficient, but it is cleaner), and there are no method calls or allocation of the object array unless logging has been enabled&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4look-elsewhere-the-database-is-always-the-bottleneck"&gt;
  &lt;/a&gt;
  4.Look Elsewhere: The Database Is Always the Bottleneck
&lt;/h3&gt;

&lt;p&gt;If you are developing standalone Java applications that use no external resources, the performance of that application is (mostly) all that matters. Once an external resource (a database, for example) is added, the performance of both programs is important. And in a distributed environment—say with a Java REST server, a load balancer, a database, and a backend enterprise information system—the performance of the Java server may be the least of the performance issues.&lt;br&gt;
If the database is the bottleneck, tuning the Java application accessing the database won’t help overall performance at all. In fact, it might be counterproductive. &lt;strong&gt;As a general rule&lt;/strong&gt;, &lt;code&gt;when load is increased into a system that is overburdened, performance of that system gets worse.&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5optimize-for-the-common-case"&gt;
  &lt;/a&gt;
  5.Optimize for the Common Case
&lt;/h3&gt;

&lt;p&gt;we should focus on the common use case scenarios. This principle manifests itself in several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimize code by profiling it and focusing on the operations in the profile taking the most time. &lt;/li&gt;
&lt;li&gt;Apply &lt;a href="https://en.wikipedia.org/wiki/Occam's_razor"&gt;Occam’s razor&lt;/a&gt; to diagnosing performance problems. The simplest explana‐ tion for a performance issue is the most conceivable cause: a performance bug in new code is more likely than a configuration issue on a machine, which in turn is more likely than a bug in the JVM or operating system.&lt;/li&gt;
&lt;li&gt;Write simple algorithms for the most common operations in an application&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#runner-see-you-in-chapter-1-"&gt;
  &lt;/a&gt;
  🏃 See you in chapter 1 ...
&lt;/h4&gt;




&lt;h1&gt;
  &lt;a href="#monkeytake-a-tip"&gt;
  &lt;/a&gt;
  🐒take a tip
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Pareto principle: 80% of consequences come from 20% of causes.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARfChr3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://streetfins.com/wp-content/uploads/2021/03/7c-Pareto-Principle-1150x647-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARfChr3a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://streetfins.com/wp-content/uploads/2021/03/7c-Pareto-Principle-1150x647-1.png" alt="Rule"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>books</category>
      <category>java</category>
      <category>performance</category>
    </item>
  </channel>
</rss>
