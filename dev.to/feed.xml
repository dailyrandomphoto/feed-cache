<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Don't Launch Now - Things I Learned From My Launch and Development Hell</title>
      <author>Ayan S</author>
      <pubDate>Tue, 27 Jul 2021 19:17:04 +0000</pubDate>
      <link>https://dev.to/madebyayan/don-t-launch-now-things-i-learned-from-my-launch-and-development-hell-32mm</link>
      <guid>https://dev.to/madebyayan/don-t-launch-now-things-i-learned-from-my-launch-and-development-hell-32mm</guid>
      <description>&lt;p&gt;Launching can be hard, but not launching is even harder.&lt;/p&gt;

&lt;p&gt;This is a bit of a long post and is divided into several sections. For your convenience, this study consists of the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having A Product But Not Being Able To Launch&lt;/li&gt;
&lt;li&gt;Development Hell&lt;/li&gt;
&lt;li&gt;A Post (or two), A Hope&lt;/li&gt;
&lt;li&gt;The Week Before Launch&lt;/li&gt;
&lt;li&gt;The Launch Day Fix&lt;/li&gt;
&lt;li&gt;End Of Launch Day&lt;/li&gt;
&lt;li&gt;Lessons Learned&lt;/li&gt;
&lt;li&gt;About The Product&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#having-a-product-but-not-being-able-to-launch"&gt;
  &lt;/a&gt;
  Having A Product But Not Being Able To Launch
&lt;/h2&gt;

&lt;p&gt;After working on &lt;a href="https://focuswall.madebyayan.com/"&gt;Focus Wall&lt;/a&gt; for a while I decided that its time to finally launch since it had already passed its MVP stage a while back. However, something held me back from just launching it. I had a decent &lt;a href="https://focuswall.madebyayan.com/"&gt;website&lt;/a&gt; and the product was ready but I just couldn't get myself to launch it.&lt;/p&gt;

&lt;p&gt;This would mainly be because I was being psychologically held back due to the fact that I didn't have a big enough following on any social media, which led me to believe that I shouldn't launch now as it wouldn't be worth it unless people start showing more interest on social media.&lt;/p&gt;

&lt;p&gt;And hence, the launch didn't happen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-hell"&gt;
  &lt;/a&gt;
  Development Hell
&lt;/h2&gt;

&lt;p&gt;So after that I naturally went on to building my next project. Developing is the one thing that sucks me in and even though I enjoy it, sometimes it feels like this passion is holding me back from truly achieving somethings as I just jump from one thing that excites me to the next one after its completed.&lt;/p&gt;

&lt;p&gt;And as fun as developing, designing and coding are, there seemed to lack a meaning behind it all. If other people aren't able to use the things I'm making and take advantage of my tools and products, then what's even the point of making them?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-post-or-two-a-hope"&gt;
  &lt;/a&gt;
  A Post (or two), A Hope
&lt;/h2&gt;

&lt;p&gt;It's not always that something you read changes your perspective on things, but when that does happen, you start seeing things in a new light. And that's what happened when I encountered &lt;a href="https://www.indiehackers.com/post/i-dont-care-about-market-research-i-m-just-gonna-build-what-i-like-febe0c043c"&gt;this&lt;/a&gt; post on Indie Hackers.&lt;/p&gt;

&lt;p&gt;Just as I was working on my new project, I came across that post and reading it sparked something in me and made me realize that it's okay to just launch because I've built something that I want and if I don't put it out in the world, someone else who might want it as well might never get it.&lt;/p&gt;

&lt;p&gt;At the same time I had also come across &lt;a href="https://www.indiehackers.com/post/posting-on-social-media-every-day-the-gems-habit-6fa805dff6"&gt;this&lt;/a&gt; post and it helped me understand how to handle social media in a way while developing my product. I've always wanted to post more about what I'm building and my process, but I never knew where to start. So this post pointed in the a clear direction and now I've got a bunch of GEMS to post. And because of that, &lt;a href="https://twitter.com/madebyAyan"&gt;twitter&lt;/a&gt; seems to have become a more relaxed place rather than a source of anxiety.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-week-before-launch"&gt;
  &lt;/a&gt;
  The Week Before Launch
&lt;/h2&gt;

&lt;p&gt;After the development hell had somewhat faded, I committed myself towards a single goal, that within a week I'd launch my product on Product Hunt.&lt;/p&gt;

&lt;p&gt;So I left the current project that I had been working on and started polishing Focus Wall for the launch. At the time I even wrote a &lt;a href="https://www.indiehackers.com/post/share-your-project-and-goals-for-this-week-f0158fee05?commentId=-MdsMs7vkaTWjTy9-USO"&gt;comment&lt;/a&gt; on a post about my goals for the upcoming week.&lt;/p&gt;

&lt;p&gt;During the week, I shared progress of the product on Twitter and even slight details of it. This resulted in my follower count going from 4 to 11 in less that a week, which I consider to be a big achievement as I hadn't been active on social platforms prior to that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-launch-day-fix"&gt;
  &lt;/a&gt;
  The Launch Day Fix
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://www.producthunt.com/posts/focus-wall"&gt;Product Hunt Launch&lt;/a&gt; was right after the list refreshed. I had been working on the first comment for about an hour and added it the launch page along with some generic screenshots.&lt;/p&gt;

&lt;p&gt;What I didn't realize back then was that product hunt compress the images that you add and just having dark screenshots didn't look good, especially on phone.&lt;br&gt;
So I spent the next few hours completely redesigning the images and adding self made mockups and styles. And as soon as I finished making one image, I'd upload it to the the page and then work on the next one.&lt;br&gt;
After fixing the page and website with better images, I did see the number of upvotes go up, though I can't be certain if it was because of this or not.&lt;/p&gt;

&lt;p&gt;Along with this, I also had a sale going on over on itch.io and a coupon for gumroad, the two places where I uploaded the app.&lt;/p&gt;

&lt;p&gt;I then wrote about the launch on reddit, added a milestone on indie hackers and shared it on twitter. And also added the product upvote hunt button to my site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end-of-launch-day"&gt;
  &lt;/a&gt;
  End Of Launch Day
&lt;/h2&gt;

&lt;p&gt;At the end of the launch day, Focus Wall ranked 22nd on Product Hunt, with 36 upvotes, which I don't consider to be a bad rank for someone who just launched their very first product, in fact its motivated me work harder on my next product (the one I had kept on hold to release Focus Wall).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VmYBIwHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Pi8kei2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VmYBIwHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Pi8kei2.png" alt="Product Hunt Analytics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along with that, I had also gotten my very first customer within just the first 2 hours of my launch🎉, and that got me excited to work on it further, knowing that other people want it as well!&lt;/p&gt;

&lt;p&gt;Though the traffic on gumroad wasn't the best, the product was featured as one of the top products on itch.io since it appealed to all sorts of developers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fwNQ9KYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yBq5As7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fwNQ9KYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yBq5As7.png" alt="Itch.io Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And all of this traffic was totally organic, I hadn't told any friends or family about the launch just to see where I can get without relying on any extra factors for the launch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons Learned
&lt;/h2&gt;

&lt;p&gt;Instead of plain screenshots, make sure to use better pics that stand out next time and to check how it looks on various displays.&lt;/p&gt;

&lt;p&gt;Don't let social media give you anxiety, if you just give it a bit of your time, it'll become a relaxing place where you can not only show your products but even express yourself.&lt;/p&gt;

&lt;p&gt;Don't let the fear of 'not launching now' get to, instead launch when you're ready rather than keeping your product in the shadows. And this is a big part of the reason why I started building in public as well, as it's better to have your product out there instead of keeping it hidden from someone who might need it.&lt;/p&gt;

&lt;p&gt;And the above statement is further strengthened from all the sales I've made so far. It's made me realize that I wasn't the only one who needed this and if I hadn't released it, it wouldn't have reached to people who wanted it.&lt;/p&gt;

&lt;p&gt;And I guess that's the rewarding part about being a maker, you not only have fun making what you enjoy, but you also get to give people something that they need, that only your unique product or solution can provide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-product"&gt;
  &lt;/a&gt;
  About The Product
&lt;/h2&gt;

&lt;p&gt;Focus Wall is a clean dynamic desktop wallpaper to help you stay focused so you never lose track.&lt;br&gt;
Keeping all your important to-dos in that one perfect place that see everyday, your desktop wall! So you can easily sort out your priorities, right there on your wallpaper, with just a single glance.&lt;/p&gt;

&lt;p&gt;If you'd like to learn more about it or try it out, you can do so here:&lt;br&gt;
&lt;a href="https://focuswall.madebyayan.com"&gt;focuswall.madebyayan.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you'd like to get in touch, feel free to reach out on twitter &lt;a href="https://twitter.com/madebyAyan"&gt;@madebyAyan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this helps someone!😊&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>softwaredeveloper</category>
      <category>webdev</category>
      <category>launch</category>
    </item>
    <item>
      <title>namy.ai MVP DONE!</title>
      <author>Hugo Montenegro</author>
      <pubDate>Tue, 27 Jul 2021 19:00:13 +0000</pubDate>
      <link>https://dev.to/hm/namy-ai-mvp-done-1lbj</link>
      <guid>https://dev.to/hm/namy-ai-mvp-done-1lbj</guid>
      <description>&lt;p&gt;🎉🎉 Yaayyyyy! 🥳🎉&lt;/p&gt;

&lt;p&gt;I just pushed the new version to GitHub, so happy!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.namy.ai"&gt;www.namy.ai&lt;/a&gt; is at what I'd consider a proper "MVP" level.&lt;/p&gt;

&lt;p&gt;WHAT: It's a domain name generator that's powered with AI.&lt;br&gt;
WHY: I thought existing generators suck. Namerobot, Namekrea, Namelix, Google domains, etc... They all suck&lt;/p&gt;

&lt;p&gt;HOW YOU CAN HELP: please check it out and give me some feedback?&lt;/p&gt;

&lt;p&gt;Thanks! ❤️&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>saas</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Array rotation, a simple approach using JS</title>
      <author>Vishwa.R</author>
      <pubDate>Tue, 27 Jul 2021 18:47:04 +0000</pubDate>
      <link>https://dev.to/codereaper08/array-rotation-a-simple-approach-using-js-327o</link>
      <guid>https://dev.to/codereaper08/array-rotation-a-simple-approach-using-js-327o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-an-array"&gt;
  &lt;/a&gt;
  What's an array?
&lt;/h2&gt;

&lt;p&gt;An array is a type of linear data structure containing a collection of elements of similar data type. Arrays are one of the most important data structures. The elements in the array are stored in contiguous memory locations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-array-rotation"&gt;
  &lt;/a&gt;
  what's array rotation?
&lt;/h2&gt;

&lt;p&gt;Array rotation is nothing but shifting elements of the array in a specified direction with a rotation factor. No worries, this will be made clear with an example below,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#reversal-algorithm-for-array-rotation"&gt;
  &lt;/a&gt;
  Reversal algorithm for array rotation
&lt;/h2&gt;

&lt;p&gt;There are many ways to rotate an array, you may use a temporary array to store values and then replace them in the actual array, or you may store the first element of the array in a temporary variable. Shift the other elements to the left, and we have to do this for &lt;code&gt;d&lt;/code&gt; times (where &lt;code&gt;d&lt;/code&gt; is the rotation factor). We are going to use &lt;em&gt;Reversal algorithm&lt;/em&gt; for rotating the array in left direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-reversal-algorithm-works"&gt;
  &lt;/a&gt;
  How the Reversal algorithm works?
&lt;/h2&gt;

&lt;p&gt;Unlike other methods mentioned above, Reversal algorithm don't use any temporary variable or array for the rotation process. This makes it more space efficient. This algorithm works on &lt;em&gt;3 steps&lt;/em&gt;. They are,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;reverse &lt;code&gt;d&lt;/code&gt; elements.&lt;/li&gt;
&lt;li&gt;reverse &lt;code&gt;n-d&lt;/code&gt; elements.&lt;/li&gt;
&lt;li&gt;And finally, reverse &lt;code&gt;n&lt;/code&gt; elements.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
So, with these steps in mind, let us dive right into JavaScript and make the magic happen ✨
&lt;h2&gt;
  &lt;a href="#code-it-in-js"&gt;
  &lt;/a&gt;
  Code it in JS
&lt;/h2&gt;

&lt;p&gt;First, we need a function to rotate the array from a given index to the end. So it takes 3 parameters like &lt;code&gt;samparr&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;. We use a &lt;code&gt;while&lt;/code&gt; loop and assign the starting value of &lt;code&gt;samparr&lt;/code&gt; to a temporary variable called &lt;code&gt;temp&lt;/code&gt;. &lt;br&gt;
We then assign the starting value of &lt;code&gt;samparr&lt;/code&gt; to the ending value of &lt;code&gt;samparr&lt;/code&gt;. And, finally, we assign the ending value of &lt;code&gt;samparr&lt;/code&gt; to the &lt;code&gt;temp&lt;/code&gt; again. We use this &lt;code&gt;temp&lt;/code&gt; variable to dynamically change the starting and ending values of the &lt;code&gt;samparr&lt;/code&gt;. We then increment the start with 1 and decrement the end with 1. This is going to be our main function, which we would call with respect to the above-mentioned 3 steps.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We, then, need a function to actually rotate the array to the left using the rotation factor &lt;code&gt;d&lt;/code&gt;. For that, we create another function which takes the &lt;code&gt;samparr&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; as parameters and return the rotated array. We return the function if we have d=0, which means the array is empty. Going good till now, but wait!, What if the &lt;code&gt;d&lt;/code&gt; is greater than &lt;code&gt;n&lt;/code&gt;, &lt;em&gt;step 2&lt;/em&gt; will become broken, to fix that, we just update &lt;code&gt;d&lt;/code&gt; as &lt;code&gt;d % n&lt;/code&gt;. We'll look at an example in a minimum scale to better understand this &lt;code&gt;d % n&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
After, refactoring, we give &lt;em&gt;Step1&lt;/em&gt;, &lt;em&gt;Step2&lt;/em&gt; and &lt;em&gt;Step3&lt;/em&gt; to the &lt;code&gt;Reverse&lt;/code&gt; function. This will finally return a nicely rotated array as a result.&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;So, Finally, we have to console log the rotated array. For that, we create a function called &lt;code&gt;Logger&lt;/code&gt;, which will console log the rotated array. This function takes two parameters, &lt;code&gt;samparr&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;. It is a simple function which loops through all elements in the array and log them onto console.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#hurray"&gt;
  &lt;/a&gt;
  Hurray 🎉
&lt;/h2&gt;

&lt;p&gt;It's done. The last and final thing we do is pass inputs to our functions, to see them in action.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Use this *&lt;a href="https://jsfiddle.net/Vishwa_R/kn5Lv0qw/26/"&gt;JSFiddle&lt;/a&gt; to change rotation factor and input array.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements:
&lt;/h2&gt;

&lt;p&gt;Cover image : Photo by &lt;a href="https://unsplash.com/@marekpiwnicki?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marek Piwnicki&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/rotation?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading, give a 💖 if you like.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>todayilearned</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to make a Flask Web App for Keras Model?</title>
      <author>Avi Arora</author>
      <pubDate>Tue, 27 Jul 2021 18:25:27 +0000</pubDate>
      <link>https://dev.to/aarora4/how-to-make-a-flask-web-app-for-keras-model-5972</link>
      <guid>https://dev.to/aarora4/how-to-make-a-flask-web-app-for-keras-model-5972</guid>
      <description>&lt;p&gt;Read the full article here: &lt;a href="https://analyticsarora.com/how-to-make-a-flask-web-app-for-keras-model/"&gt;https://analyticsarora.com/how-to-make-a-flask-web-app-for-keras-model/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;So, you have built some kind of machine learning model in Keras. Now, you want to add a frontend interface so people can actually interact with your model in an approachable way. Look no further. In this tutorial, I will cover how to package your Keras model into a powerful web application using Flask.&lt;/p&gt;

&lt;p&gt;This is the second article in a series talking about how I made and deployed a neural network to rate songs like the popular music reviewer Anthony Fantano. You can read about the process of &lt;a href="https://analyticsarora.com/making-the-needle-bot/"&gt;researching and developing the neural network&lt;/a&gt; in the first article. The final article covers the &lt;a href="https://analyticsarora.com/how-to-fix-common-errors-deploying-keras-model-to-heroku/"&gt;issues I encountered deploying a Flask Web Application to Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Click &lt;a href="https://github.com/aarora4/keras-flask-deploy-webapp"&gt;here&lt;/a&gt; to see all my code.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Article Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cloning the Starter Code&lt;/li&gt;
&lt;li&gt;Mocking Up the Design&lt;/li&gt;
&lt;li&gt;Writing the HTML and CSS&lt;/li&gt;
&lt;li&gt;Creating the Model Operation Functions&lt;ul&gt;
&lt;li&gt;Saving the Best Model&lt;/li&gt;
&lt;li&gt;Initializing the Tensorflow Session&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;Data Preprocessing Function&lt;/li&gt;
&lt;li&gt;Prediction Function&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Taking in User Input&lt;ul&gt;&lt;li&gt;Accepting File Drag Events&lt;/li&gt;&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;Sending Files through a Post Request&lt;/li&gt;
&lt;li&gt;Saving Files to Temporary Directory&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Updating the Frontend with Javascript&lt;ul&gt;
&lt;li&gt;Showing and Hiding Elements&lt;/li&gt;
&lt;li&gt;Submit Function&lt;/li&gt;
&lt;li&gt;Clear Function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Demo and Conclusion&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top Skill You Need as a Python Developer</title>
      <author>Tousif</author>
      <pubDate>Tue, 27 Jul 2021 18:04:17 +0000</pubDate>
      <link>https://dev.to/project_beginners/top-skill-you-need-as-a-python-developer-391b</link>
      <guid>https://dev.to/project_beginners/top-skill-you-need-as-a-python-developer-391b</guid>
      <description>&lt;p&gt; &lt;span&gt;With the rising popularity of Python programming language and expanding demand of a Python developer in the market, one will undoubtedly consider 'How To Become A Python Developer.' In this blog, I will walk you through a structured approach, profession bits of knowledge, and skills required to turn into a Python Developer.&lt;/span&gt;&lt;/p&gt;
&lt;span id="who-is-a-python-developer"&gt;&lt;/span&gt;&lt;h2&gt;Who Is A Python Developer?&lt;/h2&gt;

&lt;p&gt;Let me first answer the inquiry, 'which precisely is a python developer?'. There is no reading material definition for a Python developer; there are certain domains and employment roles a Python developer can take as indicated by the range of abilities they have. A Python developer can be a Web developer, Software Engineer, Data Analyst, Data Scientist or an Automation analyzer, and so on. What's more, henceforth a Python developer can be anybody of the abovementioned.&lt;/p&gt;
&lt;p&gt;Presently the following inquiry would be, the reason becomes a python developer when there are such a large number of programming languages that we can learn. Let's investigate a couple of reasons why you should turn into a python developer.&lt;/p&gt;
&lt;span id="why-become-a-python-developer"&gt;&lt;/span&gt;&lt;h2&gt;Why Become A Python Developer?&lt;/h2&gt;

&lt;p&gt;Python was the most popular programming language in 2018, and the chart during the current year appears to be going upward too. Simple entry and increased demand are captivating enough to turn into a Python developer. The demand cooks well for Job openings and being the one with the in-demand skills would enable you to stand apart among the crowd. Python programming language has numerous highlights that do developers change to Python over other programming languages. Simple punctuation and meaningfulness make learning Python much progressively simpler.&lt;/p&gt;
&lt;h3&gt;
&lt;br&gt;
&lt;span&gt;Further Reading: &lt;/span&gt;&lt;b&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/top-python-developer-skills-you-need-to-know/"&gt;Top Skill You Need as a python Developer&lt;/a&gt;&lt;/span&gt;&lt;/b&gt;&lt;br&gt;
&lt;/h3&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Top Skill You Need as a Javascript Developer</title>
      <author>Tousif</author>
      <pubDate>Tue, 27 Jul 2021 17:59:54 +0000</pubDate>
      <link>https://dev.to/project_beginners/top-skill-you-need-as-a-javascript-developer-3gi3</link>
      <guid>https://dev.to/project_beginners/top-skill-you-need-as-a-javascript-developer-3gi3</guid>
      <description>&lt;p&gt; &lt;span&gt;No doubt, JavaScript development is a booming profile. Today there are around currently &lt;/span&gt;&lt;span&gt;12.1 million JavaScript developers&lt;/span&gt;&lt;span&gt; in the market worldwide and drawing a salary of &lt;/span&gt;&lt;span&gt;$110,673 annually&lt;/span&gt;&lt;span&gt;, which equals &lt;/span&gt;&lt;span&gt;$47.49 per hour&lt;/span&gt;&lt;span&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;These figures are clearly proving the prominence of JavaScript development. The profile is at its peak, and we have stepped into a programmer's world. Those looking to make a career have a bright future.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though, what I have observed among the students is that their focus is only on their degree. They are not working on their skills. I am not considering them wrong, but I want to clarify that it's not enough; it will not make them the top-notch JavaScript developer they wish to be.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But don't be sad, I have a perfect guide for you. In this blog, I have listed the top skills you need to become a JavaScript developer. &lt;/span&gt;&lt;/p&gt;
&lt;h1&gt;&lt;span&gt;&lt;span&gt;Originally Published: &lt;/span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-skills-you-need-as-a-javascript-developer"&gt;&lt;span&gt;Top Skill You Need as a Javascript Developer&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/h1&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>left/right vs start/end values. What's better for supporting of LTR and RTL languages</title>
      <author>Stas Melnikov</author>
      <pubDate>Tue, 27 Jul 2021 17:59:29 +0000</pubDate>
      <link>https://dev.to/melnik909/left-right-vs-start-end-values-what-s-better-for-supporting-of-ltr-and-rtl-languages-5fm6</link>
      <guid>https://dev.to/melnik909/left-right-vs-start-end-values-what-s-better-for-supporting-of-ltr-and-rtl-languages-5fm6</guid>
      <description>&lt;p&gt;When our website becomes popular there is the important issue of translating on different languages. For example, I often wanted to translate the website from English to Arabic. The problem is following, English is a matter of languages where the beginning of the line is on the left (LTR) and in Arabic the beginning of the line is on the right (RTL).    &lt;/p&gt;

&lt;p&gt;So if I use the text-align: left for Arabic users they will be confused because the beginning of the line will be by the left and no right like he thought. It happens because the left and right values don't consider text direction, i.e when we use the left or right value a text is aligned to the left or right edge always.&lt;/p&gt;

&lt;p&gt;But we can fix it using the start and end values that consider the text direction. If a browser of our user is setting in LTR language the beginning of the line will be by left. And if it's setting in RTL language then by right. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* or */&lt;/span&gt;

&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* or */&lt;/span&gt;

&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
🖐 I'm always open to any opportunities to share knowledge about CSS and HTML with you. If you need help feel free to reach out to me: &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get awesome goods for frontenders: 👕 &lt;a href="https://www.redbubble.com/i/t-shirt/Front-End-developer-by-melnik909/79109127.FPE53"&gt;T-Shirt&lt;/a&gt;, 🎁 &lt;a href="https://www.redbubble.com/i/sticker/Front-End-developer-by-melnik909/79109127.EJUG5"&gt;Stickers&lt;/a&gt;, 🥽 &lt;a href="https://www.redbubble.com/i/mask/Front-End-developer-by-melnik909/79109127.6BSL1"&gt;Masks&lt;/a&gt;, 🧩 &lt;a href="https://www.redbubble.com/i/magnet/Front-End-developer-by-melnik909/79109127.TBCTK"&gt;Magnets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Docker For Windows- An Overview To Dockerize A .Net Core App</title>
      <author>GravelSoft</author>
      <pubDate>Tue, 27 Jul 2021 17:49:51 +0000</pubDate>
      <link>https://dev.to/gravelsoft/docker-for-windows-an-overview-to-dockerize-a-net-core-app-2lk7</link>
      <guid>https://dev.to/gravelsoft/docker-for-windows-an-overview-to-dockerize-a-net-core-app-2lk7</guid>
      <description>&lt;p&gt;With expanding requests, organizations are wandering into huge and complex activities, which set aside more exertion and effort to work just as convey. At whatever point the testing group reports an issue, they need to fix the blunder and afterward convey the whole code. To conquer these intricacies, most endeavors are moving towards Docker for simple sending just as smooth working. Docker is a containerization device created to simplify it to make, convey just as arrived behind schedule inside holders known as Docker compartments. &lt;/p&gt;

&lt;p&gt;Individuals working in the Microsoft space accept that Docker compartments is a Linux driven innovation! In any case, Docker holders today support even .Net applications. Despite the fact that the Docker device was made for Linux, the Windows and .Net utilities in it are working on consistently. Prior to jumping into the subtleties of utilizing Docker for Windows to make, host, and scale .Net applications, we should reveal some insight into the essentials about Docker compartments. &lt;/p&gt;

&lt;p&gt;For what reason do we require Docker, Container and that's just the beginning? &lt;br&gt;
Envision you need to create an application, yet don't have a clue who will utilize it and on which stages it would run. There are different applications that can run on various OSs. Ordering the code for the most mainstream working frameworks (OS) is one of the approaches to tackle the issue. Nonetheless, there is a major support issue as far as making changes in the application - you need to recompile the code over and over for all stages. &lt;/p&gt;

&lt;p&gt;Making an application inside the compartment comes as an answer. It is an optimal method to wrap an application into a segregated bundle. The application won't be influenced in its compartment by any cycles or applications that exist outside of the holder. The holder holds all that the application relies upon to work effectively. Any place, the holder moves, the necessities of the application will consistently be fulfilled, as it is bundled with all that is needed to run including a library, runtimes, conditions, etc. &lt;/p&gt;

&lt;p&gt;Docker is the norm to construct and run containerized applications. It offers a holder climate to have any application of your decision. Docker compartments are lightweight and permit you to move applications just as administrations flawlessly between your host workers. It improves execution just as brings down cost while setting aside less effort to begin and offering fitting asset the board. &lt;/p&gt;

&lt;p&gt;Furthermore, you presently don't need pre-apportioning RAM to every Docker holder. The primary motivation behind utilizing Docker holder is to convey applications to the creation climate. Docker comes in two versions: Docker Enterprise Edition (EE) and Docker Community Edition (CE). CE is allowed to utilize and an optimal decision for little groups and improvement climate. EE is a membership based version and reasonable for running strategic applications. Besides, Docker programming accompanies two separate projects: Docker motor or Docker Daemon and Docker Client. &lt;/p&gt;

&lt;p&gt;Docker Concepts &lt;br&gt;
Docker Image &lt;/p&gt;

&lt;p&gt;Docker pictures are like dough shapers, outlines or forms. Docker picture is characterized as the unchanging expert layout used to produce compartments that are for the most part precisely indistinguishable. The picture incorporates the Dockerfile, code, and libraries that your application needs to run, all firmly bundling together. &lt;/p&gt;

&lt;p&gt;Dockerfile &lt;/p&gt;

&lt;p&gt;A record that accompanies guidelines for how Docker compartment should build your picture is alluded to as Dockerfile. It is notable as the base picture used to make the underlying Docker picture layer. Snow capped, Ubuntu, and Python are some famous authority base pictures. You can stack the extra layers on top of the base Docker picture layer, in view of the directions in your Dockerfile.&lt;/p&gt;

&lt;p&gt;Docker for Mac &lt;/p&gt;

&lt;p&gt;Docker for Mac is programming delivered from Docker, Inc and it works on the interaction of advancement with Docker on Mac Operating System. The bundle involves the undeniable virtual machine running on a HyperKit hypervisor of Mac OS, Docker customer, Docker daemon, Docker machine organization, and Docker-create devices. &lt;/p&gt;

&lt;p&gt;Docker for Windows &lt;/p&gt;

&lt;p&gt;Docker for Windows is programming arranged independently for Windows. It utilizes Hyper-v, local virtualization arrangement of Windows for its virtualization programming. It likewise empowers the chance to run windows compartments along with Linux holders. &lt;/p&gt;

&lt;p&gt;Understanding Docker for Windows &lt;br&gt;
Microsoft has been a fast connector to containerization approaches inside and its responsibility towards Docker holder is one of the crucial cross-industry improvements of late years. Windows incorporates its own compartment innovation. In the same way as other Windows Server highlights, Docker for Windows can be introduced either utilizing PowerShell or utilizing Windows include discourse. The whole Docker apparatus becomes viable with Windows including Docker form, information volumes, Docker Client, and any remaining structure blocks needed for containerized foundation. Since every one of the parts are currently locally viable with Docker for Windows, the Windows applications can execute with negligible calculation overhead. &lt;/p&gt;

&lt;p&gt;However it is totally founded on the open source Docker administration, it incorporates support for applying the PowerShell order line just as for additional disengagement with the accumulation of the holder centered Nano worker and Hyper-V compartments. Nano worker is Microsoft's recommended base picture. Nonetheless, organizations favor utilizing Windows worker center as the base picture, however it is bigger just as sets aside more effort to send than Nano worker takes. This is on the grounds that Windows worker center offers help for a full .Net execution. Thusly, it turns into significantly more straightforward to rapidly move the current application to the worker center. &lt;/p&gt;

&lt;p&gt;The principle benefit of Docker for Windows is that they give the choice to modernize the current .Net Framework applications, which are running on Windows by means of containerization.&lt;/p&gt;

&lt;p&gt;.Net Framework and .Net Core for Docker Containers &lt;br&gt;
With regards to building worker side containerized Docker applications with .Net, you can browse .Net Framework and .Net Core. Both offer many .Net stage segments yet remember some essential contrasts for terms of containerizing applications. &lt;/p&gt;

&lt;p&gt;You can pick .Net Framework when your application right now running in .Net structure just as solid conditions on Windows. .Net Framework is the lone choice to use instead of advancements that aren't upheld by .Net Core Technology. ASP.Net Web Forms, ASP.Net site page applications, Workflow related administrations, and WCF administration execution are a few innovations upheld just in .Net Frameworks, and .Net Core doesn't have any arrangement for them. Picking .Net Framework for Docker permits improving organization experience as it limits the arrangement issues. &lt;/p&gt;

&lt;p&gt;.Net center and Docker are ideal when you need to work with the two Windows and Linux holders; since, it meets the cross-stage needs. Essentially, if your application design manages microservices and you need to start Docker compartment quick, then, at that point .net center can be the best decision. .Net Core ought to be the default decision when you construct new containerized .Net applications. &lt;/p&gt;

&lt;p&gt;A significant advantage of utilizing .Net Core for Docker is it permits running .Net forms of applications one next to the other inside a similar machine. This is a significant necessity for VMs or workers that don't utilize compartments since holders confine the .Net forms that the application requires. The lightweight and secluded nature of .Net Core brands it as cool for Docker holders. &lt;/p&gt;

&lt;p&gt;Generally, Docker compartments can run on any machines, and on any framework including cloud. The adaptability, transportability, and effortlessness that Docker offers help it to produce a particularly significant energy. Generous commitment of Microsoft in the Docker people group empowers running Docker holders on Windows just as with Windows Nano Server. Thusly, on account of Docker for Windows, presently we can run .Net applications on their local stage.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Hello World</title>
      <author>Vinay </author>
      <pubDate>Tue, 27 Jul 2021 17:44:58 +0000</pubDate>
      <link>https://dev.to/vinaykeshava/hello-world-45i6</link>
      <guid>https://dev.to/vinaykeshava/hello-world-45i6</guid>
      <description>&lt;p&gt;Hello World ,&lt;br&gt;
    this is my first blog post on dev.to looking forward to learn more stuff from dev.to &lt;/p&gt;

</description>
      <category>linux</category>
    </item>
    <item>
      <title>3 Patterns for Cookiecutter Templates</title>
      <author>Conor Sheehan</author>
      <pubDate>Tue, 27 Jul 2021 17:03:20 +0000</pubDate>
      <link>https://dev.to/conorsheehan1/3-patterns-for-cookiecutter-templates-aha</link>
      <guid>https://dev.to/conorsheehan1/3-patterns-for-cookiecutter-templates-aha</guid>
      <description>&lt;h2&gt;
  &lt;a href="#toc"&gt;
  &lt;/a&gt;
  TOC
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#hooks"&gt;Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#tests"&gt;Tests&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#putting-tests-inside-the-template"&gt;Inside the template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#putting-tests-outside-the-template"&gt;Outside the template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ci"&gt;CI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-from-github"&gt;Install from GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;If you've heard of &lt;a href="https://github.com/cookiecutter/cookiecutter"&gt;cookiecutter&lt;/a&gt; you can skip this part.&lt;/p&gt;

&lt;p&gt;Cookiecutter is a command-line utility that creates projects from templates. There's a list of &lt;a href="https://github.com/cookiecutter/cookiecutter#cookiecutter-specials"&gt;templates maintained by the cookiecutter team&lt;/a&gt; and plenty of  &lt;a href="https://awesomeopensource.com/projects/cookiecutter"&gt;community awesome lists&lt;/a&gt;. It's built with &lt;a href="https://www.python.org/"&gt;python&lt;/a&gt; and uses the &lt;a href="https://github.com/pallets/jinja"&gt;jinja&lt;/a&gt; templating framework (found in python web frameworks like &lt;a href="https://flask.palletsprojects.com"&gt;flask&lt;/a&gt;). You can use it to make a template for pretty much anything! All you need to get started is &lt;code&gt;pip install cookiecutter&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h2&gt;

&lt;p&gt;Cookiecutter provides &lt;a href="https://cookiecutter.readthedocs.io/en/1.7.3/advanced/hooks.html"&gt;pre and post generate scripts&lt;/a&gt;. They are Python or Shell scripts that run before and/or after your project is generated.&lt;/p&gt;

&lt;p&gt;They can be really useful. For example, if you want to get the absolute path to the generated project, you can use a post generate script to replace a specific piece of text with the absolute path. e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# cookiecutter-$your-project/hooks/post_gen_project.py 
&lt;/span&gt;&lt;span class="n"&gt;abs_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'replace_me.base_dir'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abs_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an &lt;a href="https://github.com/ConorSheehan1/cookiecutter-jira-project/blob/master/hooks/post_gen_project.py#L3"&gt;example in a cookiecutter I made&lt;/a&gt;. &lt;br&gt;
See &lt;a href="https://github.com/cookiecutter/cookiecutter/issues/955#issuecomment-444864537"&gt;https://github.com/cookiecutter/cookiecutter/issues/955#issuecomment-444864537&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h2&gt;

&lt;p&gt;There are a few ways to test cookiecutters.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#putting-tests-inside-the-template"&gt;
  &lt;/a&gt;
  Putting tests inside the template
&lt;/h3&gt;

&lt;p&gt;This approach has the advantage that when someone generates a project using your template, they already have tests set up. e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# {{cookiecutter.repo_name}}/{{cookiecutter.repo_name}}.py
&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="nf"&gt;cookiecutter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repo_name&lt;/span&gt;&lt;span class="p"&gt;}}(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;__version__&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# do some cli stuff
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# {{cookiecutter.repo_name}}/tests/test_{{cookiecutter.repo_name}}.py 
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;cookiecutter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repo_name&lt;/span&gt;&lt;span class="p"&gt;}}(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;cookiecutter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repo_name&lt;/span&gt;&lt;span class="p"&gt;}}(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an &lt;a href="https://github.com/ConorSheehan1/cookiecutter-fire-cli/blob/621b635c23407b9704bcce322390dbebbc544ca3/%7B%7Bcookiecutter.repo_name%7D%7D/tests/test_%7B%7Bcookiecutter.repo_name%7D%7D.py#L1"&gt;example in a cookiecutter I made&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-tests-outside-the-template"&gt;
  &lt;/a&gt;
  Putting tests outside the template
&lt;/h3&gt;

&lt;p&gt;This approach is useful if it doesn't make sense to include tests in the generated project, but you still want to test what is generated. Note: this doesn't mean trying to test cookiecutter itself!&lt;/p&gt;

&lt;p&gt;Normally Cookiecutter opens a prompt to get user input to be injected into your template. You can bypass this with the &lt;code&gt;--no-input&lt;/code&gt; argument. It also allows you to &lt;a href="https://github.com/cookiecutter/cookiecutter/pull/666"&gt;pass values required by &lt;code&gt;cookiecutter.json&lt;/code&gt; as arguments&lt;/a&gt;. e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;cookiecutter-$your-project/cookiecutter.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"project_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"alphabet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# this will generate a project named foo instead of alphabet&lt;/span&gt;
cookiecutter &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;--no-input&lt;/span&gt; &lt;span class="nv"&gt;project_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've used this approach when creating cookiecutters that contain scripts rather than full projects. To test the scripts I generate a project, import and run functions from the scripts, and test the output. e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# cookiecutter-$your-project/{{cookiecutter.project_name|lower}}/script.sh&lt;/span&gt;
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="o"&gt;{{&lt;/span&gt;cookiecutter.project_name|lower&lt;span class="o"&gt;}}&lt;/span&gt;&lt;span class="nv"&gt;_repo_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{cookiecutter.repo_dir}}"&lt;/span&gt;

goto_&lt;span class="o"&gt;{{&lt;/span&gt;cookiecutter.project_name|lower&lt;span class="o"&gt;}}&lt;/span&gt;_repo&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="p"&gt;{cookiecutter.project_name|lower&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;}_repo_dir"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;return &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# cookiecutter-$your-project/tests/test_helper.bash&lt;/span&gt;
setup&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;# we expect foo/script.sh to be generated&lt;/span&gt;
    load &lt;span class="s2"&gt;"foo/script.sh"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# cookiecutter-$your-project/tests/script.bats&lt;/span&gt;
&lt;span class="c"&gt;#!/usr/bin/env bats&lt;/span&gt;

load &lt;span class="s2"&gt;"test_helper"&lt;/span&gt;

&lt;span class="c"&gt;# we expect a function named goto_foo_repo in foo/script.sh&lt;/span&gt;
@test &lt;span class="s2"&gt;"goto_foo_repo"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  goto_foo_repo
  assert_equal &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$foo_repo_dir&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an &lt;a href="https://github.com/ConorSheehan1/cookiecutter-jira-project/blob/60e341060198a4d8937095b6c2e53f545d1ff58f/tests/utils.bats#L8"&gt;example in a cookiecutter I made&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ci"&gt;
  &lt;/a&gt;
  CI
&lt;/h3&gt;

&lt;p&gt;Now that you have tests set up, you can set up continuous integration! The important bit of here is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;cookiecutter&lt;/span&gt; 
&lt;span class="s"&gt;.&lt;/span&gt; &lt;span class="c1"&gt;# create a project using the current directory as a template&lt;/span&gt;
&lt;span class="s"&gt;--overwrite-if-exists&lt;/span&gt; &lt;span class="c1"&gt;# if the destination directory exists overwrite it&lt;/span&gt;
&lt;span class="s"&gt;--no-input&lt;/span&gt; &lt;span class="c1"&gt;# don't prompt for user input. &lt;/span&gt;
&lt;span class="c1"&gt;# since there are no other args, use default values from cookiecutter.json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an example with github actions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/ci.yml&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ci&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macos-latest&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;python&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3.6&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.7&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;3.8&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Python ${{ matrix.python }}&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.python }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Poetry&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;python -m pip install --upgrade pip&lt;/span&gt;
          &lt;span class="s"&gt;pip install poetry&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install python packages&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry install&lt;/span&gt;
      &lt;span class="c1"&gt;# here's the important bit!&lt;/span&gt;
      &lt;span class="c1"&gt;# generate a new project using the cookiecutter template&lt;/span&gt;
      &lt;span class="c1"&gt;# use the default values in cookiecutter.json with --no-input&lt;/span&gt;
      &lt;span class="c1"&gt;# if the directory already exists, overwrite it&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate package using cookiecutter&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry run cookiecutter . --overwrite-if-exists --no-input&lt;/span&gt;
      &lt;span class="c1"&gt;# now inside the generated project, install dependencies and run tests&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install python packages (in cookiecutter dir)&lt;/span&gt;
        &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;example_cli&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests (in cookiecutter dir)&lt;/span&gt;
        &lt;span class="na"&gt;working-directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;example_cli&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;poetry run task tests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's an &lt;a href="https://github.com/ConorSheehan1/cookiecutter-fire-cli/blob/621b635c23407b9704bcce322390dbebbc544ca3/.github/workflows/ci.yml#L1"&gt;example in a cookiecutter I made&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-from-github"&gt;
  &lt;/a&gt;
  Install from GitHub
&lt;/h2&gt;

&lt;p&gt;Cookiecutter provides a &lt;a href="https://cookiecutter.readthedocs.io/en/1.7.3/usage.html#works-directly-with-git-and-hg-mercurial-repos-too"&gt;really easy way to use templates hosted on github&lt;/a&gt;. All you need is &lt;code&gt;cookiecutter gh:$username/$repo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hopefully now you should be able to create a Cookiecutter template with hooks, tests, and CI, all easily installable from GitHub!&lt;/p&gt;

</description>
      <category>cookiecutter</category>
      <category>template</category>
      <category>python</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>Make eslint and prettier play nice together</title>
      <author>Sardorbek Imomaliev</author>
      <pubDate>Tue, 27 Jul 2021 16:58:28 +0000</pubDate>
      <link>https://dev.to/imomaliev/make-eslint-and-prettier-play-nice-together-38ab</link>
      <guid>https://dev.to/imomaliev/make-eslint-and-prettier-play-nice-together-38ab</guid>
      <description>&lt;h2&gt;
  &lt;a href="#install-eslintconfigprettier"&gt;
  &lt;/a&gt;
  Install eslint-config-prettier
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install --save-dev eslint-config-prettier&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;'prettier'&lt;/code&gt; to &lt;code&gt;.eslintrc.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plugin:@typescript-eslint/recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;npm run lint&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;npm run format&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add -u&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git commit -m 'install eslint-config-prettier'&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/prettier/eslint-config-prettier#installation"&gt;https://github.com/prettier/eslint-config-prettier#installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vueschool.io/articles/vuejs-tutorials/eslint-and-prettier-with-vite-and-vue-js-3/"&gt;https://vueschool.io/articles/vuejs-tutorials/eslint-and-prettier-with-vite-and-vue-js-3/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/imomaliev/vue-ts-tailwind"&gt;vue-ts-tailwind&lt;/a&gt;&lt;/p&gt;

</description>
      <category>prettier</category>
      <category>eslint</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>6 Command Line Tools for Productive Programmers</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Tue, 27 Jul 2021 16:52:23 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/6-command-line-tools-for-productive-programmers-433l</link>
      <guid>https://dev.to/adamgordonbell/6-command-line-tools-for-productive-programmers-433l</guid>
      <description>&lt;p&gt;Lately, I've been doing a lot more things at the command line. I'm not a hard-core terminal guy -- I use VSCode more than Vim -- but I'm always surprised at the number of complex tasks that can be done using just the POSIX standard command-line tools like &lt;code&gt;grep&lt;/code&gt;,&lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tools are powerful. A good tool makes work easier and faster, and a great tool unlocks new abilities: Previously impossible things become possible and sometimes easy.&lt;/p&gt;

&lt;p&gt;As I've learned more I've been adding some new tools to my command-line toolbox, and in this article I'd like to share some I've found valuable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-broot-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;broot&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;I'm not sure how I came across &lt;code&gt;broot&lt;/code&gt;, but it's pretty handy. If you are in a small directory and want to see the lay of the land, &lt;code&gt;tree&lt;/code&gt; is excellent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;✗ tree
.
├── dartboard.png
├── header.jpg
├── opensign.png
├── quote1.png
└── trophy.png

0 directories, 5 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if the directory has many files or sub-directories, &lt;code&gt;tree&lt;/code&gt; becomes much less helpful: you only see the last screen full of information as files scroll past you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tree 
&amp;lt; scrolling text for a long time &amp;gt;
├── banner.js
└── index.html

328 directories, 2028 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;broot&lt;/code&gt; solves this problem by being aware of the size of your terminal window and sizing to fit it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---frK1r75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q488k9xp8uf4o0mb4hdc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---frK1r75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q488k9xp8uf4o0mb4hdc.png" alt="broot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can navigate around using the arrow keys in &lt;code&gt;broot&lt;/code&gt; and it is also helpful for tracking down disk space usage by passing in the &lt;code&gt;-w&lt;/code&gt; flag (&lt;code&gt;broot -w&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2KiFcOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4iunayuvjprrwz1opr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2KiFcOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4iunayuvjprrwz1opr8.png" alt="Broot2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can do lots of other things, so take a look at the &lt;a href="https://github.com/Canop/broot"&gt;GitHub guide&lt;/a&gt; but for me its just a better &lt;code&gt;tree&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install BRoot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install on MacOS using &lt;code&gt;brew&lt;/code&gt; or follow &lt;a href="https://dystroy.org/broot/install/"&gt;installation instructions&lt;/a&gt; for other environments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;broot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#funky"&gt;
  &lt;/a&gt;
  Funky
&lt;/h2&gt;

&lt;p&gt;If you live in the terminal, and you want to &lt;a href="https://blog.sanctum.geek.nz/unix-as-ide-files/"&gt;use your terminal as an IDE&lt;/a&gt;, then it's helpful to have your terminal change based on the current directory. There are many ways to do this.  &lt;a href="https://direnv.net/"&gt;&lt;code&gt;DirEnv&lt;/code&gt;&lt;/a&gt; loads and unloads &lt;code&gt;.env&lt;/code&gt; files as you enter directories.  &lt;a href="https://github.com/cxreg/smartcd"&gt;&lt;code&gt;smartcd&lt;/code&gt;&lt;/a&gt; is similar. It lets you run a shell script whenever you change to a certain path -- you can start and stop services, change the prompt, or anything else you want.  &lt;/p&gt;

&lt;p&gt;However, my favorite of this genre is the strangely named &lt;a href="https://github.com/bbugyi200/funky"&gt;&lt;code&gt;funky&lt;/code&gt;&lt;/a&gt;, which "takes shell functions to the next level by making them easier to define, more flexible, and more interactive."&lt;/p&gt;

&lt;p&gt;The way &lt;code&gt;funky&lt;/code&gt; works is simple: as you enter a directory, &lt;code&gt;funky&lt;/code&gt; looks for a &lt;code&gt;.funky&lt;/code&gt; file which contains a list of bash functions. It loads them, and when you leave, it unloads them.&lt;/p&gt;

&lt;p&gt;This means when I'm in the directory for this Jekyll blog, I have aliases loaded for creating a new post, linting my markdown, pulling in images, and so on. I can list these by typing &lt;code&gt;funky&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;funky
lint&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; markdownlint &lt;span class="nt"&gt;--fix&lt;/span&gt; &lt;span class="s2"&gt;"./_posts/*.md"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
set-header&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;latest-image&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;image-folder&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/header.jpg"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
set-image&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;latest-image&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;image-folder&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +%s&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;.png"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;funky&lt;/code&gt; can do more than this, though. It has features for interactively adding and editing functions, and for registering global functions and aliases. What I like, though, is just being able to quickly give a command, in a specific context, a short alias.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install Funky&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install Funky using pip&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip3 &lt;span class="nb"&gt;install &lt;/span&gt;pyfunky
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add hooks to your &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;bashrc&lt;/code&gt; or equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## find where funky.sh was installed by pip and source it&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/lib/python3.9/site-packages/scripts/shell/funky.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fuzzy-finder-fzf"&gt;
  &lt;/a&gt;
  Fuzzy Finder (FZF)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLl8K5Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m99eulbpc4nsz2qn7jl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLl8K5Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m99eulbpc4nsz2qn7jl6.png" alt="FZF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;funky&lt;/code&gt; and &lt;code&gt;broot&lt;/code&gt; improved my productivity then more tools could only improve it more, right? So I headed over to &lt;a href="https://lobste.rs/s/yfgwjr/what_interesting_command_line_tools_do"&gt;Lobste.rs&lt;/a&gt; and asked what other tools people were using.  &lt;code&gt;FZF&lt;/code&gt; came up quite a bit, and I've started using it myself now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;FZF&lt;/a&gt; is a command-line fuzzy finder. It's fast, and it interactively lets you filter options down based on a fuzzy keyword match in many places where you need to input a value at the command-line.&lt;/p&gt;

&lt;p&gt;If you install the included shortcuts (&lt;code&gt;/usr/local/opt/fzf/install&lt;/code&gt;), you can use &lt;code&gt;**&lt;/code&gt; anywhere and get an interactive fuzzy finder to narrow down to the desired path. &lt;code&gt;FZF&lt;/code&gt; also makes searching your &lt;code&gt;history&lt;/code&gt; much faster.&lt;/p&gt;

&lt;p&gt;It's a unix filter that reads in input, shows you an interactive list that you filter down and then sends the selected item out the other side but describing that way undersells its usefulness.&lt;/p&gt;

&lt;p&gt;I recommend watching this &lt;a href="https://www.youtube.com/watch?v=qgG5Jhi_Els"&gt;video&lt;/a&gt; where Alexey Samoshkin walks through many possible uses for &lt;code&gt;FZF&lt;/code&gt; with a soothing piano playing in the background.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install FZF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install Funky using your &lt;a href="https://github.com/junegunn/fzf#using-linux-package-managers"&gt;package manager of choice&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;fzf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add hooks to your &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;bashrc&lt;/code&gt; or equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#ZSH&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.fzf.zsh 
&lt;span class="c"&gt;#BASH&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.fzf.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mcfly"&gt;
  &lt;/a&gt;
  McFly
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8MvPWq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn4hmoszdmdqp8noelqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8MvPWq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn4hmoszdmdqp8noelqb.png" alt="MCFly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FZF&lt;/code&gt; is excellent for filtering file paths in a command line when you want to open a file (&lt;code&gt;vim **&lt;/code&gt;), but for command-line completion, there is more information available than the raw history file. &lt;a href="https://github.com/cantino/mcfly/"&gt;&lt;code&gt;McFly&lt;/code&gt;&lt;/a&gt; attempts to use this extra information to provide more relevant results.&lt;/p&gt;

&lt;p&gt;What extra information? To start with, McFly considers these options in its ranking heuristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The commands you typed before the command.&lt;/li&gt;
&lt;li&gt;How often you run the command.&lt;/li&gt;
&lt;li&gt;How recently you ran the command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It tracks all this in a SQLite database where it also tracks and weighs suggestions by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The commands exit status.&lt;/li&gt;
&lt;li&gt;The directory you ran the command in.&lt;/li&gt;
&lt;li&gt;If you have selected it in McFly before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Being suggested failed commands is a pet peeve of mine, but I never considered narrowing the choice based on the current directory or down-ranking items that are never selected.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;McFly&lt;/code&gt; uses a neural net to do its ranking, and one possible downside is the lag in coming up with suggestions if your SQLite database gets too large. However, &lt;code&gt;MCFLY_HISTORY_LIMIT&lt;/code&gt; is available to limit this growth.&lt;/p&gt;

&lt;p&gt;I've only been using it for a couple of days, so I can't give a fair appraisal of it, but the concept makes me pretty hopeful: using extra information to customize tools towards real-world usage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install McFly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can install McFly &lt;a href="https://github.com/cantino/mcfly/#installation"&gt;several ways&lt;/a&gt;. Here is brew: :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew tap cantino/mcfly
brew &lt;span class="nb"&gt;install &lt;/span&gt;mcfly
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add hooks to your &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;bashrc&lt;/code&gt; or equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;mcfly init zsh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The fact that the binary emits the init script rather than dumping an init script into my home directory is a nice touch. &lt;code&gt;zoxide&lt;/code&gt; - the following tool - does this as well.&lt;/p&gt;

&lt;p&gt;I found that &lt;code&gt;FZF&lt;/code&gt; was interfering with the &lt;code&gt;CTRL-R&lt;/code&gt; of McFly and had to comment out &lt;a href="https://github.com/junegunn/fzf/blob/764316a53d0eb60b315f0bbcd513de58ed57a876/shell/key-bindings.zsh#L109"&gt;this line&lt;/a&gt; in the &lt;code&gt;FZF&lt;/code&gt; init script to get McFly working.&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-cd"&gt;
  &lt;/a&gt;
  Better CD
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-g3Lvgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qd0i8j1g2x5oyrt5oml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-g3Lvgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qd0i8j1g2x5oyrt5oml.png" alt="zoxide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FZF&lt;/code&gt; works nicely for some path completions, but I didn't find it helpful when changing directories with &lt;code&gt;cd&lt;/code&gt;: After typing &lt;code&gt;cd **TAB&lt;/code&gt; from my home directory, it takes a while for &lt;code&gt;FZF&lt;/code&gt; to build up the full list options. It was much faster to use my existing ZSH completions of &lt;code&gt;cd TAB &amp;lt;choose a dir&amp;gt; TAB &amp;lt;choose a dir&amp;gt;&lt;/code&gt; to navigate to a folder.  &lt;/p&gt;

&lt;p&gt;However, many tools exist which attempt to improve upon &lt;code&gt;cd&lt;/code&gt;. &lt;a href="https://github.com/wting/autojump"&gt;&lt;code&gt;autojump&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://github.com/rupa/z"&gt;&lt;code&gt;z&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://github.com/clvv/fasd"&gt;&lt;code&gt;Fasd&lt;/code&gt;&lt;/a&gt; all track directory usage and give you a single key shortcut for changing to commonly accessed directories. &lt;a href="https://www.reddit.com/r/commandline/comments/4v5nlt/what_cd_tool_do_you_use_if_any_autojump_j_z_etc/"&gt;&lt;code&gt;r/commandline&lt;/code&gt;&lt;/a&gt; has an detailed discussion of these various &lt;code&gt;cd&lt;/code&gt; replacements, but the one that has the most momentum is &lt;code&gt;zoxide&lt;/code&gt;. &lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt; is a rewrite of z in Rust and promises improved speed.&lt;/p&gt;

&lt;p&gt;After you install it, you can use it just like &lt;code&gt;cd&lt;/code&gt; (&lt;code&gt;z ~/path/foo/bar&lt;/code&gt;), but you can also change directories based on ranked text matches of the path (&lt;code&gt;z bar&lt;/code&gt; ~= &lt;code&gt;cd ~/path/foo/bar&lt;/code&gt; ). Instead of needing to supply the full path to change locations, you can instead provide a unique sub-string of the path, and &lt;code&gt;zoxide&lt;/code&gt; will use its usage history to get you where you want.&lt;/p&gt;

&lt;p&gt;For ease of adoption, I've chosen to have &lt;code&gt;zoxide&lt;/code&gt; replace &lt;code&gt;cd&lt;/code&gt;, which is as simple as using the &lt;code&gt;--cmd&lt;/code&gt; flag when you add the initialization shell code (&lt;code&gt;eval "$(zoxide init zsh --cmd cd)"&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install zoxide&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zoxide&lt;/code&gt; can be installed &lt;a href="https://github.com/ajeetdsouza/zoxide#step-1-install-zoxide"&gt;several ways&lt;/a&gt;. Here is brew: :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;zoxide
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add hooks to your &lt;code&gt;.zshrc&lt;/code&gt;, &lt;code&gt;bashrc&lt;/code&gt; or equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;zoxide init zsh &lt;span class="nt"&gt;--cmd&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gitupdate"&gt;
  &lt;/a&gt;
  GitUpdate
&lt;/h2&gt;

&lt;p&gt;This tool is another find from the &lt;a href="https://lobste.rs/s/yfgwjr/what_interesting_command_line_tools_do"&gt;Lobste.rs&lt;/a&gt; thread. When working on a git branch, I like to commit my work frequently. For example, before I try to delete some large block of text in a blog post, or before I attempt to refactor some piece of code, I commit my work. Of course, I'll squash, or restructure, these commits later on, but for convenience, I have a git alias called &lt;code&gt;wip&lt;/code&gt; ('work in progress`) which gives me a low effort way to commit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
git wip = !git add --all; git ci -m WIP&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nikitavoloboev/gitupdate"&gt;&lt;code&gt;gitupdate&lt;/code&gt;&lt;/a&gt; is a simple improvement on this idea. &lt;code&gt;gitupdate .&lt;/code&gt; commits your files but uses the file names (but not extensions) of the changed files to create a more meaningful commit message. It's great for times when the commit message doesn't matter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ℹ️ Install GitUpdate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;bash&lt;br&gt;
git clone https://github.com/nikitavoloboev/gitupdate&lt;br&gt;
go build&lt;br&gt;
sudo cp gitupdate /usr/local/bin&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-tools"&gt;
  &lt;/a&gt;
  Other Tools
&lt;/h2&gt;

&lt;p&gt;There are many other helpful command-line tools. More than can be covered well in a single article. JQ, &lt;a href="https://dev.to/blog/mitmproxy"&gt;&lt;code&gt;mitmproxy&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://pandoc.org/"&gt;Pandoc&lt;/a&gt;, and &lt;a href="https://man7.org/linux/man-pages/man1/pstree.1.html"&gt;PSTree&lt;/a&gt; are some I use frequently. There is also a whole class of Rust rewrites of common POSIX tools that warrant an article of their own.  &lt;/p&gt;

&lt;p&gt;Of course, &lt;a href="https://earthly.dev/"&gt;Earthly&lt;/a&gt; itself is a command-line tool, and one I constantly use for gluing together various development steps together. It, and the tools I use for &lt;a href="https://dev.to/blog/markdown-lint"&gt;linting prose&lt;/a&gt; have become a standard part of how I work.&lt;/p&gt;

&lt;p&gt;What less common command-line tools do you use? If you have tool suggestions, I'd love to hear them.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>linux</category>
    </item>
  </channel>
</rss>
