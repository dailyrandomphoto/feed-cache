<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>üî• Objects in JavaScript </title>
      <author>Tejkumar Kempaiah</author>
      <pubDate>Thu, 10 Jun 2021 15:03:26 +0000</pubDate>
      <link>https://dev.to/tejkumar/objects-in-javascript-1jdp</link>
      <guid>https://dev.to/tejkumar/objects-in-javascript-1jdp</guid>
      <description>&lt;p&gt;‚òëÔ∏è What are Objects? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Objects are collection of property and property values&lt;/li&gt;
&lt;li&gt;Every object has state and behavior&lt;/li&gt;
&lt;li&gt;A real time object is mimicked in the programming world&lt;/li&gt;
&lt;li&gt;A object can contain below things in it. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a. variable(integer, decimal, Boolean, character, string)&lt;br&gt;
   b. array &lt;br&gt;
   c. function&lt;br&gt;
   d. another object &lt;/p&gt;

&lt;p&gt;‚òëÔ∏è How to create objects in JavaScript? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rw3-Paok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrlxbzq4v1wkpimiwk62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rw3-Paok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrlxbzq4v1wkpimiwk62.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jh0yVLF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjy78fs7xw4h6vk57xve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jh0yVLF9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjy78fs7xw4h6vk57xve.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òëÔ∏è How to make an object read only? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TD5faawz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0v8min6r8l6cj85ni3ew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TD5faawz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0v8min6r8l6cj85ni3ew.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpXLeVCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14fxut7sxq1z06grlrf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpXLeVCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14fxut7sxq1z06grlrf7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òëÔ∏è How to make an object extensible(un expandable) but modifiable&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xXOkMeUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fg3byzzd8dzc86lxrzh8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xXOkMeUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fg3byzzd8dzc86lxrzh8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJgnsjIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1ewasqnnow8bnc6j3rr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJgnsjIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1ewasqnnow8bnc6j3rr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òëÔ∏è How to expand an object property ? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OIt3QoWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ml8dcuzcdigud9nooqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OIt3QoWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ml8dcuzcdigud9nooqy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VqkzrGLh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99dy12c2hljf6nrqxv39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqkzrGLh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99dy12c2hljf6nrqxv39.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òëÔ∏è How to add an Boolean object property to an Object?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGKqpCJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db0ns64q5jrdyom7jq55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGKqpCJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db0ns64q5jrdyom7jq55.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPw0uSWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmzceemq6ymc9n61mzen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPw0uSWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmzceemq6ymc9n61mzen.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òëÔ∏è Object DE structuring&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j37746TI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2lgmiccurgsl7yodm89.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j37746TI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2lgmiccurgsl7yodm89.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nZ4KuvZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0odngiif6qldqnc5iseb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nZ4KuvZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0odngiif6qldqnc5iseb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>objectsinjavscript</category>
    </item>
    <item>
      <title>WAF for ALBs</title>
      <author>Arun Kumar</author>
      <pubDate>Thu, 10 Jun 2021 15:02:05 +0000</pubDate>
      <link>https://dev.to/aws-builders/waf-for-albs-55jf</link>
      <guid>https://dev.to/aws-builders/waf-for-albs-55jf</guid>
      <description>&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WAF support for ALB is now available in many regions.&lt;/p&gt;

&lt;p&gt;Clients want to provide a pattern of using ALB ‚Üí (Lambda | EC2) to be secured via WAF (and HTTPS).&lt;/p&gt;

&lt;p&gt;Clients want to minimise the maintenance footprint of adding WAF for many applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AW0nZAW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbo4bv0nq1p2x0bfjp5m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AW0nZAW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbo4bv0nq1p2x0bfjp5m.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing Details&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WAF Pricing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. WAF&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$5 per web ACL per month&lt;/li&gt;
&lt;li&gt;$1 per rule per web ACL per month (assume one rule = ‚Äúcore-waf-automations‚Ää‚Äî‚ÄäSQL Injection Rule‚Äù)&lt;/li&gt;
&lt;li&gt;$0.60 per million web requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;b. F5&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Charge per month in each available region (pro-rated by the hour) $20 / unit&lt;/li&gt;
&lt;li&gt;Charge per million requests in each available region $1.2 / unit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Estimates&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. WAF Pricing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;12 web acls (6x2 acls)&lt;/li&gt;
&lt;li&gt;10 rules per WebACL = 120 rules total = $120&lt;/li&gt;
&lt;li&gt;100 million requests = $60&lt;/li&gt;
&lt;li&gt;$2,160 Annual cost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;b. Market place pricing‚Ää‚Äî‚Ää4x F5 managed rulesets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$480 for $80 per account per region per month x 6&lt;/li&gt;
&lt;li&gt;$480 for 100 million requests x 4 rulesets (total requests across all accounts / regions)&lt;/li&gt;
&lt;li&gt;$11,520 Annual cost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;c. Total pricing estimate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$13,680 annual total&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. Author is AWS themselves&lt;/p&gt;

&lt;p&gt;b. Without dedicated security team‚Ää‚Äî‚Ää‚Äúweb application firewall strategy‚Äù can be a hassle (even with one)&lt;/p&gt;

&lt;p&gt;c. AWS WAF ACL‚Ää‚Äî‚Ääcentral inspection and decision point for incoming requests (for all apps that use it)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This solution has a bunch of preconfigured rules for use with ALB, CloudFront&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I‚Äôm assuming we can easily integrate with marketplace rules, like the F5 ones.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;d. Log analysis‚Ää‚Äî‚Äämore than just ‚Äúwaf rules to apply‚Äù‚Ää‚Äî‚Ääthere‚Äôs mechanisms for updating rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Both WAF logs and App logs can be parsed by Athena/Lamdba to inform on HTTP Flood, Scanners &amp;amp; Probes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scheduled cloudwatch event rule triggers lambda to maintain IP Reputation Lists&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bot lists also updated via a lambda.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Types of Rules&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. White/black listing (manual lists)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No automation setup around these lists‚Ää‚Äî‚Ääis the expectation you manage via AWS Console?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;b. SQL Injection, XSS (patterns in URI, querystring, request body)&lt;/p&gt;

&lt;p&gt;c. HTTP Flood (web-layer DDoS, brute force logins)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ConfigureRateBasedRule (Custom::ConfigureRateBasedRule‚Ää‚Äî‚ÄäHttpFloodProtectionRateBasedRuleActivated)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;d. Scanners &amp;amp; Probes (abnormal amount errors from an origin)&lt;/p&gt;

&lt;p&gt;e. IP Reputation Lists (3rd party lists hourly updated)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;spamhaus.org&lt;/li&gt;
&lt;li&gt;torproject.org&lt;/li&gt;
&lt;li&gt;emergingthreats.net&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;f. Bad Bot (honeypot to attract bots)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ApiGateway, Lambda&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>waf</category>
      <category>alb</category>
      <category>security</category>
    </item>
    <item>
      <title>Accessibility Essentials #1: Structuring our webpage using HTML5 semantic sectioning elements.</title>
      <author>_CODE</author>
      <pubDate>Thu, 10 Jun 2021 13:58:03 +0000</pubDate>
      <link>https://dev.to/underscorecode/accessibility-essentials-1-structuring-our-webpage-using-html5-semantic-sectioning-elements-p6d</link>
      <guid>https://dev.to/underscorecode/accessibility-essentials-1-structuring-our-webpage-using-html5-semantic-sectioning-elements-p6d</guid>
      <description>&lt;p&gt;With the arrival of HTML5, there were several new features coming on the scene, something that is always welcome, but that also brings associated a bit of confusion and an obvious process of adaptation to all that new stuff we want to learn about and include in our projects as soon as possible (leaving a little aside all that we already know beforehand).&lt;/p&gt;

&lt;p&gt;One of these new features was the introduction of &lt;strong&gt;semantic elements for sectioning&lt;/strong&gt; the document, which help us developers keep the structure of our webpages well organized. But, beyond that, these elements were specifically designed to inform the browser they're running on and other technologies used for HTML interpretation (like screen readers and voice assistants) about their &lt;strong&gt;structural function inside the document&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Before HTML5 appeared, the only suitable element for keeping documents organized and provide them with a decent structure was &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, which is very generic and doesn't convey any extra information to browsers or tools that interpret the documents. So, due to the fast-growing technology world and, with the appearance of &lt;strong&gt;new ways to access information&lt;/strong&gt;, having only one acceptable way for such purpose, which wasn't even covering the actual necessities at all, fell really short.&lt;/p&gt;

&lt;p&gt;Consequently, it was imminent that something like semantic sectioning elements would appear to alleviate those required needs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#semantic-elements-vs-presentational-elements"&gt;
  &lt;/a&gt;
  Semantic elements vs. presentational elements
&lt;/h1&gt;

&lt;p&gt;HTML has always had &lt;strong&gt;semantic elements&lt;/strong&gt;, but they were created with a different purpose, not exactly structuring. But this isn't the only kind of elements HTML comprises: it also provides &lt;strong&gt;presentational elements&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's see what's the difference between them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic elements:&lt;/strong&gt; Those HTML elements which &lt;strong&gt;contain extra information about their purpose&lt;/strong&gt; or role inside the document and the type of content expected inside of them.&lt;/p&gt;

&lt;p&gt;Examples of HTML semantic elements:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;: Form element.&lt;br&gt;
&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;: Table element.&lt;br&gt;
&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;: Big heading element.&lt;br&gt;
&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;: Unordered list element.&lt;br&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;: List item element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Presentational elements (or non-semantic):&lt;/strong&gt; Those HTML elements which &lt;strong&gt;only affect presentation, but not semantics&lt;/strong&gt;. They don't provide any extra information about their role and are mainly used for just styling the document.&lt;/p&gt;

&lt;p&gt;Examples of HTML presentational elements:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;: Div element. Used for defining a block of content.&lt;br&gt;
&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;: Span element. Used for defining an inline container.&lt;/p&gt;

&lt;p&gt;They tell nothing about their content.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#html5-semantic-elements-for-sectioning"&gt;
  &lt;/a&gt;
  HTML5 semantic elements for sectioning
&lt;/h1&gt;

&lt;p&gt;As mentioned above, structuring a HTML document using just &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements wasn't an option anymore, so that's why &lt;strong&gt;semantic sectioning elements&lt;/strong&gt; came to stay.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-is-important-to-use-semantic-sectioning-elements"&gt;
  &lt;/a&gt;
  Why is important to use semantic sectioning elements?
&lt;/h2&gt;

&lt;p&gt;At this point, you may be wondering why you should change your way of writing your HTML if that method has always worked for you in the development process. &lt;/p&gt;

&lt;p&gt;Well, even though there are a few very important reasons why you should &lt;strong&gt;change your way of getting things done with HTML&lt;/strong&gt; and start using these semantic elements (for your own benefit), the main one and definitely the most important is that your webpage should be &lt;strong&gt;available for everybody&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Many accessibility tools, like screen readers and voice assistants rely on semantic elements to be able to interpret HTML appropriately for people who make use of them.&lt;/p&gt;

&lt;p&gt;So, in short, the main benefit of using these elements is &lt;strong&gt;making your site accessible&lt;/strong&gt;, which should be reason enough for you, but, in case you still can't see things clearly, let's take a look at the complete list of advantages these elements bring with them.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-reasons-why-you-should-start-using-semantic-sectioning-elements-if-you-havent-already-done-so"&gt;
  &lt;/a&gt;
  More reasons why you should start using semantic sectioning elements if you haven't already done so
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Scalability:&lt;/strong&gt; If your project starts growing in size (and it probably will), at some point, it can become difficult to maintain if you don't structure your files properly, so using semantic sectioning elements is a good way to keep your code &lt;strong&gt;clean&lt;/strong&gt;, &lt;strong&gt;well-organized&lt;/strong&gt; and make it &lt;strong&gt;maintainable&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In Computer Science, &lt;strong&gt;naming everything as the role they perform or the function they accomplish&lt;/strong&gt; is always &lt;strong&gt;a good idea&lt;/strong&gt;, and you should start doing it from now on if you're not used to doing it. It will save you tons of time and will get you rid of possible future headaches üôÇ&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SEO positioning:&lt;/strong&gt; Search engines can make sense of semantic elements and &lt;strong&gt;they consider their content as important&lt;/strong&gt;. So using non-semantic elements for structuring your webpage may result in poorly performance in terms of SEO (definitely something you won't be happy with).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Element targeting purposes&lt;/strong&gt;: By using semantic elements, you're letting CSS and JS know that the elements they're referencing are relevant, so, therefore, they can &lt;strong&gt;effectively target them&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Your webpage will provide a &lt;strong&gt;better user experience&lt;/strong&gt; to everybody.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#a-common-bad-practice"&gt;
  &lt;/a&gt;
  A common bad practice
&lt;/h3&gt;

&lt;p&gt;Let's now have a glance at a bad navigation structure that we can still find in some webpages to this day (although it's true that it's becoming less and less common every day).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item3&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would this code do the trick for us in terms of styling and presentation? Absolutely yes. &lt;/p&gt;

&lt;p&gt;In terms of appearance, this navigation structure could seem as good as any other: we could style those &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements as we'd like and, visually, the results would be as expected.&lt;/p&gt;

&lt;p&gt;Would it be accurate for structural purposes and visual impaired users that use assistive technology to visit our webpage? &lt;strong&gt;Absolutely not&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These &lt;strong&gt;assistive technologies&lt;/strong&gt; couldn't be able to identify that block element as a navigation section and it wouldn't be interpreted as such, not letting the user have a good experience, which will result in them leaving your site in all probability.&lt;/p&gt;

&lt;p&gt;In addition to that, &lt;strong&gt;search engines wouldn't consider that content as important&lt;/strong&gt; or relevant, since we're defining generic block elements as &lt;em&gt;containers&lt;/em&gt; instead of indicating that our elements are supposed to define a navigation section consisting of a list with some items (even though we're using &lt;em&gt;ids&lt;/em&gt; and &lt;em&gt;classes&lt;/em&gt;. Search engines don't care about that.) So it's pretty obvious that our webpage &lt;strong&gt;won't be&lt;/strong&gt; as &lt;strong&gt;well-positioned&lt;/strong&gt; as if we'd be using semantic elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-does-this-mean-that-i-cant-use-nonsemantic-elements-like-raw-ltdivgt-endraw-anymore"&gt;
  &lt;/a&gt;
  So, does this mean that I can't use non-semantic elements like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; anymore?
&lt;/h2&gt;

&lt;p&gt;Of course not. &lt;strong&gt;You can and actually should&lt;/strong&gt;. But start thinking of them as elements that can come into play only when semantic elements don't fit your page necessities and you feel like they're not that useful or even necessary in that particular case.&lt;/p&gt;

&lt;p&gt;So, summing up:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use semantic elements?&lt;/strong&gt; Whenever possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use non-semantic elements?&lt;/strong&gt; Only when you are not able to find a suitable semantic element for such purpose.&lt;/p&gt;

&lt;p&gt;Now that we know why is important to change the way we define the structure of our documents, let's take a look at these (relatively) new elements and how we can include them in our code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sectioning-content-elements-in-html5"&gt;
  &lt;/a&gt;
  Sectioning content elements in HTML5
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-the-navigation-element-raw-ltnavgt-endraw-"&gt;
  &lt;/a&gt;
  1. The navigation element: &lt;strong&gt;&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The navigation element is intended to define a section of a page which contains &lt;strong&gt;navigation links&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This element is mostly used to define the main navigation of a webpage (which is likely going to be accessed from anywhere on the site), but it can be used as well to include a secondary navigation, which means &lt;strong&gt;you can have several navigation elements&lt;/strong&gt; within your document.&lt;/p&gt;

&lt;p&gt;Note that not every link on your webpage should be inside a navigation element. &lt;strong&gt;You should only use it for major navigation blocks&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;An example of use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-the-article-element-raw-ltarticlegt-endraw-"&gt;
  &lt;/a&gt;
  2. The article element: &lt;strong&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The article element represents an &lt;strong&gt;independent piece of content inside your document&lt;/strong&gt;. It encloses a block of related content and &lt;strong&gt;makes sense by itself&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It could be used to define a blog entry, or a newspapers or magazine article, but also for any item of content that you consider independent.&lt;/p&gt;

&lt;p&gt;A document can contain multiple articles inside and these can be structured into sections as well. &lt;/p&gt;

&lt;p&gt;Note that each article element should be &lt;strong&gt;identified&lt;/strong&gt;, ideally by adding a heading as a child.&lt;/p&gt;

&lt;p&gt;An example of use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Article #1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is an article&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-the-section-element-raw-ltsectiongt-endraw-"&gt;
  &lt;/a&gt;
  3. The section element: &lt;strong&gt;&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The section element represents an &lt;strong&gt;independent section of a document&lt;/strong&gt;. Similar to the article element (be careful not to confuse one with the other), the section element is basically used to &lt;strong&gt;group content that comprise the same functionality&lt;/strong&gt;. Its usage is only recommended when there isn't a more specific element to represent it.&lt;/p&gt;

&lt;p&gt;As well as the article element, the section element &lt;strong&gt;should also be identified&lt;/strong&gt;, ideally with a heading.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; elements can contain several &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; elements and &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; elements can contain several &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; elements, so it's key that you identify the necessities of your content (speaking in terms of structure) to come up with the best result for your purpose.&lt;/p&gt;

&lt;p&gt;A complete example of use that includes several &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; elements (a little bit tedious but worth the understanding, merely didactical):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Foods&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Fruits&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Strawberries&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Color&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Taste&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Sweet&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Oranges&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Color&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Orange&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Taste&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Sweet /sour&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Vegetables&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Carrots&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Color&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Orange and green&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Taste&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Fruity/bitter&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Broccoli&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Color&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Green&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Taste&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Herbaceous&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-the-aside-element-raw-ltasidegt-endraw-"&gt;
  &lt;/a&gt;
  4. The aside element: &lt;strong&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The aside element represents the &lt;strong&gt;additional content&lt;/strong&gt; that is not directly related to the main content of the page. They are typically used to define &lt;strong&gt;sidebars&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An example of use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Social&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Related posts&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Collaborators&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#other-semantic-html-elements-used-in-sectioning"&gt;
  &lt;/a&gt;
  Other semantic HTML elements used in sectioning
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#1-the-body-element-raw-ltbodygt-endraw-"&gt;
  &lt;/a&gt;
  1. The body element: &lt;strong&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The body element constitutes &lt;strong&gt;all the content of the document&lt;/strong&gt; and it belongs to a group of elements called &lt;strong&gt;sectioning root elements&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-the-main-element-raw-ltmaingt-endraw-"&gt;
  &lt;/a&gt;
  2. The main element: &lt;strong&gt;&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The main element is used to define &lt;strong&gt;the main content of the body element&lt;/strong&gt;. It's &lt;strong&gt;not a sectioning element&lt;/strong&gt; and &lt;strong&gt;there must not be more than one&lt;/strong&gt; visible per document (if you feel like you need to include more, you must use the &lt;strong&gt;hidden&lt;/strong&gt; attribute).&lt;/p&gt;

&lt;p&gt;In addition, it's not recommended to use this element to identify main content sections or subsections within the document and you must &lt;strong&gt;never include it as a descendant of&lt;/strong&gt; &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-the-header-element-raw-ltheadergt-endraw-"&gt;
  &lt;/a&gt;
  3. The header element: &lt;strong&gt;&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The header element represents every &lt;strong&gt;introductory content&lt;/strong&gt;. This element belongs to the &lt;strong&gt;flow content&lt;/strong&gt; category and can be used as many times as needed through a document to define headers for &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-the-footer-element-raw-ltfootergt-endraw-"&gt;
  &lt;/a&gt;
  4. The footer element: &lt;strong&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The footer element represents a footer for its nearest sectioning content element or sectioning root element and contains &lt;strong&gt;extra information related to the main content&lt;/strong&gt; of the page, such as links, copyright data, maps and so on. This element belongs to the &lt;strong&gt;flow content&lt;/strong&gt; category as well as the header element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
...
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;HTML5 semantic sectioning elements have come to stay due to all the &lt;strong&gt;advantages&lt;/strong&gt; they provide us with in terms of structure, but mostly, for letting us developers &lt;strong&gt;make the web accessible for everybody&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Based on those facts, we can conclude that it's definitely worth taking your time to learn how to use these &lt;em&gt;new&lt;/em&gt; sectioning elements and integrate them into your upcoming projects.&lt;/p&gt;




&lt;p&gt;I hope that this article has been helpful for you and I'll see you all in the next.&lt;/p&gt;




&lt;p&gt;üéâ Don't forget to follow me on &lt;a href="https://instagram.com/underscorecode"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/underscorecode"&gt;Twitter&lt;/a&gt; for more related content.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Understand React Js Hooks once and for all | part II</title>
      <author>Dimer Bwimba</author>
      <pubDate>Thu, 10 Jun 2021 13:55:06 +0000</pubDate>
      <link>https://dev.to/dimer191996/understand-react-js-hooks-once-and-for-all-part-ii-1128</link>
      <guid>https://dev.to/dimer191996/understand-react-js-hooks-once-and-for-all-part-ii-1128</guid>
      <description>&lt;p&gt;So  I really recommend you guys to look at the &lt;a href="https://dev.to/dimer191996/understand-react-js-hooks-once-and-for-all-part-i-86h"&gt;part one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;let Gooooooo üë¥üë¥üë¥ .&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-move-on-to-our-next-hook-use-context-"&gt;
  &lt;/a&gt;
  Let's move on to our next hook use context .
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJJkXa1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1okh8ycdq4rufg9ld0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJJkXa1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1okh8ycdq4rufg9ld0o.png" alt="Reactjs useContext Hook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üòä This hook allows you to work with react &lt;code&gt;context API&lt;/code&gt;, which itself is a mechanism that allows you to share or scope values throughout the entire component tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gDFYY71D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lxcgpz99163vbv8sy1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gDFYY71D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lxcgpz99163vbv8sy1g.png" alt="Reactjs useContext Hook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*üòä Let's imagine we have an object called moods that can be happy or sad. To share the current mood across multiple disconnected components, we can create a &lt;code&gt;context&lt;/code&gt;, one part of the application might be happy, So we use a context provider to scope the happy mood there. Now any child component inside of it can inherit that value without needing to pass props down to the children. *&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const moods = {
  happy: 'üòä',
  sad: 'üòî'
}

const MoodContext =  createContext(moods);

function App(props) {
    return (
       &amp;lt;MoodContext.Provider&amp;gt;
               //your components
       &amp;lt;/MoodContext.Provider&amp;gt;
    );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;And that finally brings us to the &lt;code&gt;useContext&lt;/code&gt; hook. It allows us to access or consume the current value from the context provider,üòä which might live many levels higher in the component tree, reading apparent value with &lt;code&gt;useContext&lt;/code&gt; is much easierüòä than passing props down through multiple children.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App(props) {
    return (
       &amp;lt;MoodContext.Provider value={moods.happy}&amp;gt;
               &amp;lt;MoodEmoji/&amp;gt;
       &amp;lt;/MoodContext.Provider&amp;gt;
    );
}

function MoodEmoji(){

     //consume value from nearest parent provider

     const mood = useContext(MoodContext);

     return &amp;lt;p&amp;gt;{ mood }&amp;lt;/p&amp;gt;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;_Now if the mood changes from happy to sad in the parent provider, the value here will be updated automatically. _&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Now if you've ever used react context in the past, you've likely used the consumer component, the &lt;code&gt;useContext&lt;/code&gt; hook is basically a cleaner replacement for the consumer.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#and-now-lets-switch-gears-to-raw-useref-endraw-"&gt;
  &lt;/a&gt;
  And now let's switch gears to &lt;code&gt;useRef&lt;/code&gt;.
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zL4fgsqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlbv4r3fkgov2r37anyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zL4fgsqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlbv4r3fkgov2r37anyh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This hook allows you to create a mutable object that will keep the same reference between renders.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;It can be used when you have a value that changes kind of like set state, but the difference being that it doesn't trigger a re-render when the value changes.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LlTbHfPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kvo9o5xn2i1qz4xdzwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LlTbHfPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kvo9o5xn2i1qz4xdzwn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
‚òùÔ∏è For example, if we tried to build a counter button with &lt;code&gt;useRef&lt;/code&gt;, we could reference the current count by calling count current. &lt;/p&gt;

&lt;p&gt;However, &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OpNblZPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqv4xj622rc594mqw55f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OpNblZPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqv4xj622rc594mqw55f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-we-click-the-button-the-count-would-never-change-in-the-ui-because-raw-useref-endraw-doesnt-trigger-a-rerender-like-raw-setstate-endraw-does-so-this-can-be-useful-when-you-need-a-mutable-value"&gt;
  &lt;/a&gt;
  ‚òùÔ∏è when we click the button, the count would never change in the UI, because &lt;code&gt;useRef&lt;/code&gt; doesn't trigger a re-render, like &lt;a href="https://reactjs.org/docs/hooks-state.html"&gt;&lt;code&gt;setState&lt;/code&gt;&lt;/a&gt; does. So this can be useful when you need a mutableüòä  value.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;ü¶∏But a more common use case for use ref is to grab HTML elements from the DOM, we can start by creating a null reference called my button, then connected to the raw HTML button using the ref attribute.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZM7NV9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz03o0ln4lb8fpr7jbwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZM7NV9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz03o0ln4lb8fpr7jbwi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
ü¶∏ü¶∏From there, we can reference the HTML button and a function to call native Dom API's like click in this example, which would programmatically click the button. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUh_yTMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jthebbsakp9d0ap46zqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUh_yTMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jthebbsakp9d0ap46zqe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;The bottom line is that when you need to grab an element from the DOM, use ref is the hook you're looking for.&lt;/em&gt;‚¨ÖüèÉ &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%E2%AC%85-the-next-hook-well-look-at-is-a-pretty-scary-one-usereducer"&gt;
  &lt;/a&gt;
  üòàüî•‚¨ÖüèÉ The next hook we'll look at is a pretty scary one useReducer.
&lt;/h1&gt;

&lt;p&gt;But what it does is actually very similar to setState, it just goes about it in a different way, using the Redux pattern,.... &lt;/p&gt;

&lt;p&gt;See you in Part_3&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>be</category>
    </item>
    <item>
      <title>Imba - a JavaScript alternative for increased developer productivity</title>
      <author>Sindre Aarsaether</author>
      <pubDate>Thu, 10 Jun 2021 13:39:46 +0000</pubDate>
      <link>https://dev.to/somebee/imba-a-javascript-alternative-for-increased-developer-productivity-49c9</link>
      <guid>https://dev.to/somebee/imba-a-javascript-alternative-for-increased-developer-productivity-49c9</guid>
      <description>&lt;p&gt;I'm Sindre, CTO at &lt;a href="https://scrimba.com"&gt;Scrimba.com&lt;/a&gt;. We're about to launch a major overhaul of &lt;a href="http://imba.io"&gt;Imba&lt;/a&gt;, the programming language we use for everything here at Scrimba. The language has been developed over many years, and it powers &lt;strong&gt;both the frontend and backend&lt;/strong&gt; of Scrimba (100K+ monthly users). Imba is &lt;em&gt;not an academic exercise or a toy project&lt;/em&gt;. Check out &lt;a href="https://imba.io"&gt;https://imba.io&lt;/a&gt; for more details!&lt;/p&gt;

&lt;p&gt;Since we've been flying under the radar for several years I thought I should post about it here now that we are approaching beta of this &lt;em&gt;major&lt;/em&gt; update.&lt;/p&gt;

&lt;p&gt;The main benefit of Imba is &lt;strong&gt;speed.&lt;/strong&gt; Both in development and performance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Imba's Memoized DOM approach is &lt;strong&gt;an order of magnitude&lt;/strong&gt; faster than Virtual DOMs (Vue, React). See &lt;a href="https://www.freecodecamp.org/news/the-virtual-dom-is-slow-meet-the-memoized-dom-bb19f546cc52/"&gt;this article&lt;/a&gt; for a short introduction to the approach.&lt;/li&gt;
&lt;li&gt;Imba's time-saving syntax with built-in tags and styles results in &lt;strong&gt;less typing and switching files&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Imba works with node and the npm ecosystem, and integrates tightly with both js and typescript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some of the features worth mentioning üëá&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#minimal-syntax"&gt;
  &lt;/a&gt;
  Minimal syntax
&lt;/h3&gt;

&lt;p&gt;Imba's syntax is minimal, beautiful, and packed with clever features. It combines logic, markup and styling in a powerful way. Less keystrokes, and less switching files means you'll be able to build things fast.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---H6EqpXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170829-074a8900-c856-11eb-88d9-d4a922c24893.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---H6EqpXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170829-074a8900-c856-11eb-88d9-d4a922c24893.png" alt=' "basics"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#runs-on-both-server-and-client"&gt;
  &lt;/a&gt;
  Runs on both server and client
&lt;/h3&gt;

&lt;p&gt;Imba powers both the frontend and the backend of Scrimba.com, our learning platform with 100K+ monthly active users. On the frontend, Imba replaces e.g. Vue or React, and on the backend, it works with the Node ecosystem (e.g. npm).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpkH9_NQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170852-0fa2c400-c856-11eb-8aab-322d4b6a875d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpkH9_NQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170852-0fa2c400-c856-11eb-8aab-322d4b6a875d.png" alt=' "server"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrated-styling"&gt;
  &lt;/a&gt;
  Integrated styling
&lt;/h3&gt;

&lt;p&gt;Inspired by tailwind, Imba brings styles directly into your code. Styles can be scoped to files, components, and even parts of your tag trees. Style modifiers like @hover, &lt;a class="mentioned-user" href="https://dev.to/lg"&gt;@lg&lt;/a&gt;
, @landscape and @dark can be used for extremely concise yet powerful styling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYWtujQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170905-1e897680-c856-11eb-8b67-2014f0c508e6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYWtujQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170905-1e897680-c856-11eb-8b67-2014f0c508e6.png" alt=' "styles"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blazing-fast-zero-config"&gt;
  &lt;/a&gt;
  Blazing fast, Zero config
&lt;/h3&gt;

&lt;p&gt;Imba comes with a built-in bundler based on the blazing fast esbuild. Import stylesheets, images, typescript, html, workers and more without any configuration. Bundling is so fast that there is no difference between production and development mode - it all happens on-demand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzXLrCm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170927-247f5780-c856-11eb-95bf-fa09ca5f8cff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzXLrCm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170927-247f5780-c856-11eb-95bf-fa09ca5f8cff.png" alt=' "bundling"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you run your app with the &lt;code&gt;imba&lt;/code&gt; command it automatically bundles and compiles your imba code, along with typescript, css and many other file types. It provides automatic reloading of both the server and client.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typing-and-tooling"&gt;
  &lt;/a&gt;
  Typing and tooling
&lt;/h3&gt;

&lt;p&gt;The tooling is implemented as a typescript server plugin giving us great intellisense, diagnostics, and even cross-file refactorings that works with js/ts files in the same project. You can import types just like in typescript, and annotate variables, parameters and expressions. Like the language, the tooling is still in alpha, but improving every day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KcZ78vD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170940-29440b80-c856-11eb-82bb-ac821d0d0c36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcZ78vD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8467/121170940-29440b80-c856-11eb-82bb-ac821d0d0c36.png" alt=' "types"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-involved"&gt;
  &lt;/a&gt;
  Get involved!
&lt;/h2&gt;

&lt;p&gt;If you'd like to learn more about Imba, please join our &lt;a href="https://discord.com/invite/mkcbkRw"&gt;Discord server.&lt;/a&gt; We also host community meetings (watch recordings of &lt;a href="https://www.youtube.com/playlist?list=PLf1a9PYKGPdl3OMBHV72Oz23eFy9q51jJ"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Imba has been under active development for 6+ years now, and activity is only ramping up. We're looking for contributors who would like to help improve documentation and the ecosystem around Imba.&lt;/p&gt;

&lt;p&gt;We really think Imba will add a lot of value in an already crowded space of languages and frameworks. if you're the type who loves to tinker with new things, I'd wholeheartedly recommend you to check it out :)&lt;/p&gt;

</description>
      <category>imba</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Registration Form Validation Using Javascript Tutorial</title>
      <author>avani-trivedi</author>
      <pubDate>Thu, 10 Jun 2021 13:38:40 +0000</pubDate>
      <link>https://dev.to/avanitrivedi/registration-form-validation-using-javascript-tutorial-3c94</link>
      <guid>https://dev.to/avanitrivedi/registration-form-validation-using-javascript-tutorial-3c94</guid>
      <description>&lt;p&gt;Hello Friends,&lt;/p&gt;

&lt;p&gt;Now let's see example of how to use form validation in javascript. Here you will learn how to use javascript form validation. We will use how to form validation in javascript. This is a short guide on form validation. Let's get started with how to use form validation in javascript.&lt;/p&gt;

&lt;p&gt;Here i will give you many example how you can use form validation in javascript.&lt;/p&gt;

&lt;p&gt;more..&lt;br&gt;
&lt;a href="https://www.mywebtuts.com/blog/registration-form-validation-using-javascript-example"&gt;https://www.mywebtuts.com/blog/registration-form-validation-using-javascript-example&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>[Part 2/100] Laravel encourages poor programming practices</title>
      <author>Mitchell</author>
      <pubDate>Thu, 10 Jun 2021 13:36:57 +0000</pubDate>
      <link>https://dev.to/verystrongfingers/part-2-100-laravel-encourages-poor-programming-practices-682</link>
      <guid>https://dev.to/verystrongfingers/part-2-100-laravel-encourages-poor-programming-practices-682</guid>
      <description>&lt;p&gt;&lt;strong&gt;Part 2 (of 100)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Skip the top half of this post if you just want to see specifics.&lt;/p&gt;

&lt;p&gt;Let me know if you find these too long/short/boring/irrelevant/notenoughplaceholdergifs. I'm still trying to get a feel for "good post length".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#poor-programming"&gt;
  &lt;/a&gt;
  "Poor programming"?
&lt;/h2&gt;

&lt;p&gt;Obviously the meaning behind &lt;em&gt;"poor programming practices"&lt;/em&gt; is subjective, there is no clear-cut rulebook of "good programming".&lt;br&gt;
However, to a degree there some level of mutual agreement throughout the internet with what defines "bad programming".&lt;/p&gt;

&lt;p&gt;My perspective of how "poor programming" can occur is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When someone understands their tooling more than the underlying language&lt;/li&gt;
&lt;li&gt;Implementations using frameworks that lack consistency &lt;/li&gt;
&lt;li&gt;Code has been writing to make something work (instead of writing code that enables functionality)&lt;/li&gt;
&lt;li&gt;Codebase developed with tight coupling&lt;/li&gt;
&lt;li&gt;Complex code is being developed (typically &lt;em&gt;looks&lt;/em&gt; impressive, but sucks to work with)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#why-is-laravel-popular"&gt;
  &lt;/a&gt;
  Why is Laravel popular?
&lt;/h2&gt;

&lt;p&gt;Why is Laravel such a popular framework?&lt;/p&gt;

&lt;p&gt;Could it be due to...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of use?  (Small learning curve)&lt;/li&gt;
&lt;li&gt;Due to good or lucky SEO for "PHP Framework"&lt;/li&gt;
&lt;li&gt;It's not, PHP is popular and Laravel has the most internet points&lt;/li&gt;
&lt;li&gt;Because it is a proven, mature, general purpose (web) framework&lt;/li&gt;
&lt;li&gt;Something else, or a combination of above?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously we can only speculate, not prove objectively.&lt;br&gt;
However, I believe the reason Laravel has gained so much traction is due to a combination of PHP being on the forefront of web development (plus its loosly typed nature), in combination with Laravel being a general-purpose framework that really is easy to learn and build with.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#laravel-s-poor-programming"&gt;
  &lt;/a&gt;
  Laravel ‚ù§Ô∏è's poor programming
&lt;/h2&gt;

&lt;p&gt;In the current state of the world in technology, it's very clear that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web technology &amp;amp; development has really blown up in the last 10 years&lt;/li&gt;
&lt;li&gt;PHP is &lt;strong&gt;relatively&lt;/strong&gt; very easy to run, write and learn (compared to other languages)&lt;/li&gt;
&lt;li&gt;Laravel is popular and commonly associated with PHP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is this new wave development where we have lots of people becoming Laravel developers. Not &lt;strong&gt;PHP developers&lt;/strong&gt;, nor "developers" - but becoming developers that are good with Laravel specifically.&lt;/p&gt;

&lt;p&gt;Laravel provides a wrapper for every conceivable &amp;amp; commonly used data type, and abstract concept so that these developers never have to leave the ecosystem.&lt;br&gt;
We have thousands of composer packages that exist for Laravel specifically, instead of being a package that provides an optional Laravel service provider.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#poor-laravel"&gt;
  &lt;/a&gt;
  Poor Laravel
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#facades"&gt;
  &lt;/a&gt;
  Facades
&lt;/h3&gt;

&lt;p&gt;Facades are an absolute sin. They should never have been.&lt;/p&gt;

&lt;p&gt;We know with certainty that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;global state is bad&lt;/li&gt;
&lt;li&gt;service-locators are an anti-pattern&lt;/li&gt;
&lt;li&gt;magic sucks and is not reliable&lt;/li&gt;
&lt;li&gt;phpDocs typing are not necessarily correct&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facades tick all four things. When you use a facade, you are asking:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Please oh magic eight ball, magically find my Cache service and fetch this cached item&lt;/span&gt;
&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Cache&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'my-cache-key'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, you've been lazy and have just admitted that you have absolutely no idea where your cache service lives.&lt;/p&gt;

&lt;p&gt;The unseen cost of this is: (not limited to)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code has become extremely less testable&lt;/li&gt;
&lt;li&gt;you have unnecessarily tightly coupled yourself with the framework&lt;/li&gt;
&lt;li&gt;your reliance on the framework greatly increases due to requiring test helpers to manipulate Facades&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facades exist because Laravel's creator believes in "beautiful code", and not because they are a good idea. Magical service resolution is rarely a good idea.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#helpers-functions"&gt;
  &lt;/a&gt;
  Helpers functions
&lt;/h3&gt;

&lt;p&gt;Keyword is "functions" (not classes &amp;amp; methods)&lt;br&gt;
&lt;a href="https://laravel.com/docs/8.x/helpers#available-methods"&gt;https://laravel.com/docs/8.x/helpers#available-methods&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll find similarities between the helper functions I will be picking on, and Facades (read above).&lt;/p&gt;

&lt;p&gt;Any global helper function that provides access to your application state is... (&lt;em&gt;say it with me&lt;/em&gt;) ... Evil.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;session()&lt;/code&gt; function may be used to get or set session values:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;request()&lt;/code&gt; returns the current request instance or obtains an input field's value from the current request&lt;/li&gt;
&lt;li&gt;there are many more... I'm too lazy to reference&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;P.S. &lt;code&gt;dd()&lt;/code&gt; is not a debugging tool.&lt;br&gt;
P.P.S. &lt;code&gt;tap()&lt;/code&gt; is really dumb and I refuse to understand it&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#chained-methods"&gt;
  &lt;/a&gt;
  Chained methods
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$paginator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$paginator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getCollection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ProcessAppointment&lt;/span&gt; &lt;span class="nv"&gt;$apptService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$appointment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$apptService&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;scheduleAppointment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'appt_time_requested'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$apptService&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;bookIt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$appointment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;ü§Æ We're all aware that Laravel &lt;a href="https://laravel.com/docs/8.x/helpers#method-with"&gt;fully&lt;/a&gt; &lt;a href="https://laravel.com/docs/8.x/helpers#method-fluent-str-tap"&gt;embraces&lt;/a&gt; &lt;a href="https://laravel.com/docs/8.x/queues#job-chaining"&gt;the&lt;/a&gt; &lt;a href="https://laravel.com/docs/8.x/responses#attaching-headers-to-responses"&gt;usage&lt;/a&gt; &lt;a href="https://laravel.com/docs/8.x/eloquent-relationships#chaining-orwhere-clauses-after-relationships"&gt;of&lt;/a&gt; callbacks &amp;amp; &lt;a href="https://laravel.com/docs/8.x/mix#introduction"&gt;chained methods&lt;/a&gt; (ie. &lt;code&gt;return $this;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Chained methods... look sort of cool I guess? Maybe slightly nicer to read at a glance?&lt;br&gt;
Go back to 2008 and write some JavaScript if you want to see where this story ends up.&lt;/p&gt;

&lt;p&gt;Chained methods result in complicated code (lots of function calls) that is not fun to work with, it makes testing harder and offers nothing of value other than writing less code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#late-intermission"&gt;
  &lt;/a&gt;
  Late Intermission
&lt;/h2&gt;

&lt;p&gt;If you're into "Wave" music (you're probably not), check out &lt;a href="https://soundcloud.com/YEDGAR"&gt;Yedgar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="80px" src="https://open.spotify.com/embed/track/1j3Xof38kNljpJm0vqFVNb"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;p&gt;This 100 part series is quite literally revolved around "Laravel bad", which to be honest is pretty dumb because Laravel isn't "bad" - I just disagree with some of the principles &amp;amp; features on offer.&lt;/p&gt;

&lt;p&gt;Laravel exists to be easy, and there's absolutely demand for it. The issue is that Laravel developers are increasingly turning into some weird cult. &lt;/p&gt;

&lt;p&gt;You shouldn't be proud to master a framework that exists to be easily mastered.&lt;br&gt;
Nor should you be defensive of your precious framework just because you've hinged your entire career off it.&lt;/p&gt;

&lt;p&gt;At very least be open minded enough to consider alternatives, learn why parts of Laravel is (or isn't) bad, don't assume anything, especially do not assume the documented Laravel way is the right way. Actually Learn PHP, don't learn PHP from Laravel, then learn how Laravel uses PHP (and how it abuses PHP).&lt;/p&gt;

&lt;p&gt;Please obtain the knowledge required so that you can justify the (lacking) usage of Facades.&lt;br&gt;
eg. &lt;em&gt;"I'm using using Facades but it doesn't matter because..."&lt;/em&gt;, instead of than using them because Otto wants you to write "artisan" code.&lt;/p&gt;

&lt;p&gt;Please leave comments telling me if you still love Facades. Just because something is original doesn't mean it's good.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>succ</category>
      <category>php</category>
      <category>idk</category>
    </item>
    <item>
      <title>Images in a Notion page with gatsby-source-notion-api</title>
      <author>Sergei Orlov</author>
      <pubDate>Thu, 10 Jun 2021 13:34:17 +0000</pubDate>
      <link>https://dev.to/orlowdev/images-in-a-notion-page-with-gatsby-source-notion-api-1k3e</link>
      <guid>https://dev.to/orlowdev/images-in-a-notion-page-with-gatsby-source-notion-api-1k3e</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-syntax"&gt;
  &lt;/a&gt;
  The syntax
&lt;/h1&gt;

&lt;p&gt;Simply put this line as text on your Notion page and replace &lt;strong&gt;image alt&lt;/strong&gt; and &lt;strong&gt;image source&lt;/strong&gt; with&lt;br&gt;
something that would work for you. I mean, literally, this will not work, you at least need a real&lt;br&gt;
image source. üëç&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;image alt&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;image&lt;/span&gt; source)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you'd like to find out how to make code blocks (like the one above) with&lt;br&gt;
&lt;code&gt;gatsby-source-notion-api&lt;/code&gt; while Notion API still doesn't support them,&lt;br&gt;
&lt;a href="https://orlow.dev/how-to-use-code-snippets-with-gatsby-source-notion-api"&gt;here's a rather dirty hack that will help you to do so&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-easiest-way-remote-images"&gt;
  &lt;/a&gt;
  The easiest way - remote images
&lt;/h1&gt;

&lt;p&gt;If an image is already available somewhere online, and you have the URL, simply put it between the&lt;br&gt;
braces and you're good to go.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#but-the-image-is-on-my-computer"&gt;
  &lt;/a&gt;
  But the image is on my computer...
&lt;/h1&gt;

&lt;p&gt;In Gatsby, there is a &lt;code&gt;static&lt;/code&gt; folder that you can create in the root directory of your project.&lt;br&gt;
Whatever you declare there, will be available publicly. All you need to do is refer to the image as&lt;br&gt;
if it was available at the root of your website.&lt;/p&gt;

&lt;p&gt;For instance, if you have an image called &lt;strong&gt;puppy.png&lt;/strong&gt;, you can put it to &lt;code&gt;./static&lt;/code&gt; inside your&lt;br&gt;
Gatsby project, and then refer to it on your notion page as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;Never lie in the alt text, it's a puppy!&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;/puppy.png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#caveat"&gt;
  &lt;/a&gt;
  Caveat
&lt;/h1&gt;

&lt;p&gt;Since the images are not referenced from a Markdown file, and the path to the image is not&lt;br&gt;
relative - you will need something like&lt;br&gt;
&lt;a href="https://www.gatsbyjs.com/plugins/gatsby-remark-images-anywhere/"&gt;gatsby-remark-images-anywhere&lt;/a&gt; so&lt;br&gt;
that they are converted into file nodes and all the gatsby-image magic works with them properly.&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
      <category>notion</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Turn a Pandas DataFrame into an API</title>
      <author>Eric P Green</author>
      <pubDate>Thu, 10 Jun 2021 13:20:22 +0000</pubDate>
      <link>https://dev.to/ericpgreen/turn-a-pandas-dataframe-into-an-api-57pk</link>
      <guid>https://dev.to/ericpgreen/turn-a-pandas-dataframe-into-an-api-57pk</guid>
      <description>&lt;p&gt;Pandas DataFrames are my favorite way to manipulate data in Python. In fact, the end product of many of my small analytics projects is just a data frame containing my results.&lt;/p&gt;

&lt;p&gt;I used to dump my dataframes to CSV files and save them to Github. But recently, I've been using &lt;a href="https://about.beneath.dev"&gt;Beneath&lt;/a&gt;, a data sharing service I'm building, to save my dataframes and simultaneously turn them into a full-blown API with a website. It's great when I need to hand-off a dataset to clients or integrate the data into a frontend.&lt;/p&gt;

&lt;p&gt;In this post, I'll show you how that works! I'm going to fetch GitHub commits, analyze them, and use Beneath to turn the result into an API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-beneath"&gt;
  &lt;/a&gt;
  Setup Beneath
&lt;/h2&gt;

&lt;p&gt;To get started, you need to install the Beneath &lt;code&gt;pip&lt;/code&gt; module and login with a free Beneath account. It's pretty easy and the docs already cover it. Just follow &lt;a href="https://about.beneath.dev/docs/quick-starts/install-sdk/"&gt;these steps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Make sure to remember your username as you'll need it in a minute!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-analyze-some-data"&gt;
  &lt;/a&gt;
  Let's analyze some data
&lt;/h2&gt;

&lt;p&gt;I think Github activity is a fascinating, underexplored data source. Let's scratch the surface and look at commits to... Pandas! Here's a quick script to fetch the &lt;code&gt;pandas&lt;/code&gt; source code and aggregate some daily stats on the number of commits and contributors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;

&lt;span class="c1"&gt;# Get all Pandas commit timestamps
&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pandas-dev/pandas"&lt;/span&gt;
&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"""
    if [ -d "repo" ]; then rm -Rf "repo"; fi;
    git clone https://github.com/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.git repo;
    cd repo;
    echo "timestamp,contributor";
    git log --pretty=format:"%ad,%ae" --date=iso
"""&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;capture_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Group by day and count number of commits and contributors
&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;parse_dates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;date_parser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"timestamp"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"contributor"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"count"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contributors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nunique"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename_axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"day"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the &lt;code&gt;df&lt;/code&gt; variable contains our insights. If you're following along, you can change the &lt;code&gt;repo&lt;/code&gt; variable to scrape another Github project. Just beware that some major repos can take a long time to analyze (I'm looking at you, &lt;a href="https://github.com/torvalds/linux"&gt;torvalds/linux&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-the-dataframe-to-beneath"&gt;
  &lt;/a&gt;
  Save the DataFrame to Beneath
&lt;/h2&gt;

&lt;p&gt;First, we'll create a new project to store our results. I'll do that from the command-line, but you can also use the web &lt;a href="https://beneath.dev/-/create/project"&gt;console&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;beneath project create USERNAME/github-fun
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just replace &lt;code&gt;USERNAME&lt;/code&gt; with your own username.&lt;/p&gt;

&lt;p&gt;Now, we're ready to publish the dataframe. We do it with a simple one-liner directly in Python (well, I split it over multiple lines, but it's still just one call):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;beneath&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;beneath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_full&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;stream_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"USERNAME/github-fun/pandas-commits"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"day"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Daily commits to https://github.com/pandas-dev/pandas"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few things going on here. Let's go through them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;stream_path&lt;/code&gt; gives the full path for the output stream, including our username and project. In Beneath, everything is a "stream", even static datasets like DataFrames (think of them as closed streams).&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;records&lt;/code&gt; parameter to pass our DataFrame.&lt;/li&gt;
&lt;li&gt;We provide a &lt;code&gt;key&lt;/code&gt; for the data. The auto-generated API uses the key to &lt;a href="https://about.beneath.dev/docs/reading-writing-data/index-filters/"&gt;index the data&lt;/a&gt; so we can quickly filter records. By default, Beneath will use our DataFrame's index as the key, but I prefer setting it manually.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;description&lt;/code&gt; parameter adds some documentation to the dataset that will be shown at the top of the stream page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's it! Now let's explore the results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explore-your-data"&gt;
  &lt;/a&gt;
  Explore your data
&lt;/h2&gt;

&lt;p&gt;You can now head over to the &lt;a href="https://beneath.dev/?noredirect=1"&gt;web console&lt;/a&gt; and browse the data and its API docs. Mine's at &lt;a href="https://beneath.dev/epg/github-fun/stream:pandas-commits"&gt;https://beneath.dev/epg/github-fun/stream:pandas-commits&lt;/a&gt; (if you used the same project and stream names, you can just replace my username &lt;code&gt;epg&lt;/code&gt; for your own).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jwuu6ZAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6wmu2lv3cp5ccpa2bac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jwuu6ZAQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6wmu2lv3cp5ccpa2bac.png" alt="explore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also share or publish the data. Permissions are managed at the project layer, so just head over to the project page and add members or flip the project settings to &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-api"&gt;
  &lt;/a&gt;
  Use the API
&lt;/h2&gt;

&lt;p&gt;Now that the data is in Beneath, anyone with access can use the API. On the "API" tab of the stream page, we get auto-generated code snippets for integrating the dataset.&lt;/p&gt;

&lt;p&gt;For example, we can load the dataframe back into Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;beneath&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;beneath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_full&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"USERNAME/github-fun/pandas-commits"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we can query the REST API and get the commit info every day in May 2021:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://data.beneath.dev/v1/USERNAME/github-fun/pandas-commits &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;index &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nv"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'{"day":{"_gte":"2021-05-01","_lt":"2021-06-01"}}'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-G&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or use the React hook to read data directly into the frontend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRecords&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beneath-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;records&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRecords&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USERNAME/github-fun/pandas-commits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"day":{"_gte":"2021-05-01","_lt":"2021-06-01"}}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out the &lt;a href="https://beneath.dev/epg/github-fun/stream:pandas-commits/-/api"&gt;API tab&lt;/a&gt; of my dataframe in the Beneath console to see all the ways to use the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;That's it! We used Beneath to turn a Pandas DataFrame into an API. If you have any questions, I'm online most of the time in Beneath's &lt;a href="https://discord.gg/f5yvx7YWau"&gt;Discord&lt;/a&gt; (I love to chat about data science, so you're also welcome to just say hi üëã). And let me know if you publish a cool dataset that I can spotlight in the featured projects!&lt;/p&gt;

</description>
      <category>python</category>
      <category>serverless</category>
      <category>datascience</category>
      <category>showdev</category>
    </item>
    <item>
      <title>React 18 is here! What's new?</title>
      <author>Mihaela</author>
      <pubDate>Thu, 10 Jun 2021 13:15:49 +0000</pubDate>
      <link>https://dev.to/workshub/react-18-is-here-what-s-new-ah4</link>
      <guid>https://dev.to/workshub/react-18-is-here-what-s-new-ah4</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;React Core Team released an alpha version of React18 recently. This release is more focused on User Experience and internal architecture changes, including adaptation to concurrent features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can install React 18 right away using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;alpha&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And ReactDOM,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;alpha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What's New?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-new-root-api-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1.  The New Root API :&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We usually create a Root level DOM level like his and append the React App. This has now been deprecated and is now called "Legacy Root API"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, a new &lt;code&gt;Root API&lt;/code&gt; is introduced in React18, which looks like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEleementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React18 will ship with both &lt;code&gt;Legacy Root API&lt;/code&gt; and the &lt;code&gt;New Root API&lt;/code&gt; to maintain a smooth transition of React 17(or older) apps to React 18.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using New Root API over Legacy Root API :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are quite a few improvements :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a.)Easy to use hydrate function as we can pass an optional boolean value directly to the root.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Legacy Root API :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hydrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;New Root API :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hydrate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read more about hydration &lt;a href="https://stackoverflow.com/questions/46516395/whats-the-difference-between-hydrate-and-render-in-react-16"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b.) Improvements in render callback :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Legacy Root API, we could pass a render callback function. This is an anonymous function that renders/runs after the root component has been mounted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;render only after initial component rendering&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;render at very last&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach has been changed in New Root API, instead of using callbacks, React Team suggests using &lt;code&gt;requestIdleCallback&lt;/code&gt; or even native &lt;code&gt;setTimeout&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-starttransition-api-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. startTransition API :&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This is a new API introduced with this release, which helps in keeping the current webpage responsive and being able to do heavy non-blocking UI updates at the same time.&lt;/p&gt;

&lt;p&gt;One important use case for &lt;code&gt;startTransition&lt;/code&gt; could be when a user starts typing in a search box. The input value has to be immediately updated while the search results could wait few milliseconds(as expected by the user).&lt;/p&gt;

&lt;p&gt;This API provides a way to differentiate between quick updates and delayed updates.&lt;br&gt;
The delayed update(i.e. transition of one UI view to another) is termed as Transition Updates.&lt;/p&gt;

&lt;p&gt;For urgent updates like typing, hover, clicking, we call props/functions usually like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For non-urgent or heavy UI updates, we can wrap it in a  &lt;code&gt;startTransition&lt;/code&gt; API as :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;startTransition&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-strict-effects-coming-to-strict-mode-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Strict Effects coming to Strict Mode :&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;React18 will ship &lt;code&gt;&amp;lt;StrictMode /&amp;gt;&lt;/code&gt; along with &lt;code&gt;Strict Effects&lt;/code&gt; Mode now. Just like &lt;code&gt;Strict Mode&lt;/code&gt;, this would be for development builds and improved DX. &lt;/p&gt;

&lt;p&gt;When a component is wrapped in Strict Effects, React will make sure to "intentionally" run side-effects twice to detect unusual behaviour/pattern, which usually a pain point when working with &lt;code&gt;useEffect&lt;/code&gt; mounting and cleanup functions.&lt;/p&gt;

&lt;p&gt;Running effects twice is somewhat like,&lt;br&gt;
mount -&amp;gt; unmount -&amp;gt; mount&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-ssr-improvements-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. SSR Improvements :&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Server-Side Rendering is getting an architectural overhaul in this release including improvements on first loading screen time.&lt;br&gt;
In the trivial version(till React 17), SSR had to load the entire page before it can start hydrating page.&lt;/p&gt;

&lt;p&gt;This changes in React18, now we can break React components into smaller chunks using &lt;code&gt;&amp;lt;Suspense /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is now called &lt;code&gt;selective hydration&lt;/code&gt;. suppose we have 4 - 5 different components on the screen, wrapping a component in  now will start hydrating the very specific component once the code has been loaded and it doesn't block the rest of the page. By having this strategy, more important parts/components of the page could become interactive first (under extreme slow connection ) while other components will continue to hydrate giving a good user experience.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadingSpinner&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DelayedComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;&amp;lt;Delayed /&amp;gt;&lt;/code&gt; component won't be resolved until the data is fetched, till then the component will fall back to &lt;code&gt;&amp;lt;LoadingSpinner /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;&amp;lt;Suspense /&amp;gt;&lt;/code&gt; for several components fetching data at different times keeping important components interactive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-suspense-list-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Suspense List :&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Another React 18 concurrent feature, which "orchestrates" the order in which heavy data fetched components appear on the screen.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;&amp;lt;SuspenseList /&amp;gt;&lt;/code&gt; takes in &lt;code&gt;revealOrder&lt;/code&gt; prop with values forward, backward or together&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SuspenseList&lt;/span&gt; &lt;span class="nx"&gt;revealOrder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;forwards&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadingSpinner&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardComponent&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Suspense&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Suspense&lt;/span&gt; &lt;span class="nx"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadingSpinner&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardComponent&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Suspense&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/SuspenseList&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the card component will be revealed in a forward direction(until the data is fetched, will fell back to LoadingSpinner Component). Similarly, &lt;code&gt;backwards&lt;/code&gt; will reveal Cards in reverse order, and together prop will render everything "together"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-usedeferredvalue-"&gt;
  &lt;/a&gt;
  *&lt;em&gt;6. useDeferredValue : *&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useDeferredValue&lt;/code&gt; takes in a state value, a timeout in milliseconds and returns a "deferred version" of that value. This value lags by the provided timeout seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deferredValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDeferredValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;timeoutMs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This could be a use case for a text input field. The text input would be immediately rendered to the screen however the &lt;code&gt;&amp;lt;CardLists /&amp;gt;&lt;/code&gt; text props takes in a &lt;code&gt;useDeferredValue&lt;/code&gt; and returns a &lt;code&gt;defferedText&lt;/code&gt; which lags by 3 seconds. This results in delaying the Card Lists component while still allowing users to have the text field feel snappy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deferredText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDeferredValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;timeoutMs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; 

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardLists&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;deferredText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Wrapping Up&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;React18 has been mostly about concurrent features rather than a full-blown concurrent mode (which has been hyped a lot from React16) reason being the application and libraries author can have a smooth transition and not any breaking changes.&lt;/p&gt;

&lt;p&gt;React18 is an alpha release right now and not suitable for production shipping so APIs might evolve until it reaches a stable release by the end of this year(expected). This concludes our post about React18.&lt;/p&gt;

&lt;p&gt;** Some Important Resources that I have collected over time: **&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://chan.dev/posts/concurrent-mode-is-dead/"&gt;https://chan.dev/posts/concurrent-mode-is-dead/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cassidoo/react-18-alpha-is-out-now-what-2apj"&gt;https://dev.to/cassidoo/react-18-alpha-is-out-now-what-2apj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reactwg/react-18/discussions/4"&gt;https://github.com/reactwg/react-18/discussions/4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/reactwg/react-18/discussions/37"&gt;https://github.com/reactwg/react-18/discussions/37&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;_ Loved this post? Have a suggestion or just want to say hi? Reach out to me on &lt;a href="https://twitter.com/abhhnv"&gt;Twitter&lt;/a&gt; _&lt;/p&gt;

&lt;p&gt;Originally written by &lt;a href="https://javascript.works-hub.com/users/c49b5fad-2fef-4acc-aa7a-7cd78f11c9a1?utm_source=dev_to&amp;amp;utm_medium=blog_xpost"&gt;Abhinav Anshul&lt;/a&gt; for &lt;a href="https://javascript.works-hub.com/learn/react-18-is-here-whats-new-9b46a?utm_source=dev_to&amp;amp;utm_medium=blog_xpost"&gt;JavaScript Works&lt;/a&gt;&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>frontenddevelopment</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Introducing Roover ‚Äì a lightweight audio library for React</title>
      <author>Leonardo Maldonado</author>
      <pubDate>Thu, 10 Jun 2021 13:12:02 +0000</pubDate>
      <link>https://dev.to/leonardomso/introducing-roover-a-lightweight-audio-library-for-react-1lh0</link>
      <guid>https://dev.to/leonardomso/introducing-roover-a-lightweight-audio-library-for-react-1lh0</guid>
      <description>&lt;p&gt;Modern applications are using audio all the time. Audio can turn a boring application into an interesting one, adding emotion to the content. Most of the modern applications that we use daily are using audio for at least in some part.&lt;/p&gt;

&lt;p&gt;Work with audio in React applications is painful. There are not too many good libraries to manage audio and most of the time we need to create our solutions. Manage audio in a modern application is important and should be made by using the best tools and libraries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-roover"&gt;
  &lt;/a&gt;
  Introducing Roover
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/leonardomso/roover"&gt;Roover&lt;/a&gt; is a powerful and lightweight library for working with audio in React apps. It is a simple custom React hook that can be used anywhere in your application.&lt;/p&gt;

&lt;p&gt;It is very easy to get started with Roover. Inside your React project, just run the command to install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add roover
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, just import the &lt;code&gt;useRoover&lt;/code&gt; hook and start to use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import useRoover from 'roover';

const src =
  'https://storage.googleapis.com/media-session/elephants-dream/the-wires.mp3';

const App = () =&amp;gt; {
  const {
    initial,
    loading,
    ready,
    playing,
    paused,
    onPlay,
    onPause,
  } = useRover({
    src,
    autoplay: true,
  });

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;Loading: {loading ? 'true' : 'false'}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Ready: {ready ? 'true' : 'false'}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={onPlay}&amp;gt;Play&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={onPause}&amp;gt;Pause&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library is fully open-source on &lt;a href="https://github.com/leonardomso/roover"&gt;GitHub&lt;/a&gt; and we have a very clear documentation page where you can check it out and the use-cases and how to use the library properly.&lt;/p&gt;

&lt;p&gt;Your contributions are welcome! If you have any questions or want to start to contribute to this library in any form, please open an issue. Feel free to open PR.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Introduction to open source security in the supply chain e-book</title>
      <author>Daniel Parmenvik</author>
      <pubDate>Thu, 10 Jun 2021 12:59:10 +0000</pubDate>
      <link>https://dev.to/danielp/introduction-to-open-source-security-in-the-supply-chain-e-book-8ok</link>
      <guid>https://dev.to/danielp/introduction-to-open-source-security-in-the-supply-chain-e-book-8ok</guid>
      <description>&lt;p&gt;Would you like to better understand what it means for your business to use open source npm packages and need a good summer read? üìñ üåû &lt;/p&gt;

&lt;p&gt;It‚Äôs a simple fact that open source is everywhere and we all seem to have a never ending thirst for more of them.&lt;/p&gt;

&lt;p&gt;So, questions do need to be raised on what controls are in place for the open source components your team are using. To aid that discussion we have just published an e-book called &lt;a href="https://bytesafe.dev/ebooks/weakest-link/"&gt;Don‚Äôt be the weakest link in your software supply chain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bytesafe.dev/ebooks/weakest-link/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uGlE8hi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh45cch272hoagqv4gns.jpeg" alt="Bytesafe E-book - Don't be the weakest link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#book-chapters"&gt;
  &lt;/a&gt;
  üìò Book chapters
&lt;/h2&gt;

&lt;p&gt;The book contains everything you need to know about controlling the open source code your business depends on, identifying the risks of the software supply chain and how to effectively manage them. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--suG7VWdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1fkykilfmtprice00li.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suG7VWdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1fkykilfmtprice00li.png" alt="Bytesafe E-book - Don't be the weakest link Chapters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bytesafe"&gt;
  &lt;/a&gt;
  üöÄ Bytesafe
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bytesafe.dev"&gt;Bytesafe&lt;/a&gt; reduces the risk of businesses failing to keep track of components, their dependencies and open source licenses.&lt;/p&gt;

&lt;p&gt;The Bytesafe team has extensive first-hand experience on the challenges companies face in highly regulated businesses when managing and deploying open source code. &lt;/p&gt;

&lt;p&gt;If you have any questions or feedback - just drop me a message. I would love to hear from you!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bytesafe.dev/ebooks/weakest-link/"&gt;Download our free e-book&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/bytesafedev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xa6AP1T3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3uehdo8j7i2g40bk382.png" alt="Follow Bytesafe on Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ebook</category>
      <category>npm</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
