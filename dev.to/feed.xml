<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Git Config and Git Aliases</title>
      <author>Gaurav Maheshwari</author>
      <pubDate>Fri, 16 Jul 2021 23:57:18 +0000</pubDate>
      <link>https://dev.to/gaurav24072002/git-config-and-git-aliases-5f2g</link>
      <guid>https://dev.to/gaurav24072002/git-config-and-git-aliases-5f2g</guid>
      <description>&lt;p&gt;Hey Guysüñê!! In this Blog I will tell you about git config command, Git aliases, which allow you to create shortcuts for frequently used Git operations. Becoming familiar with git config and the various Git configuration settings will help you create a powerful, customized Git workflow.&lt;br&gt;
I have posted the video on Git Config and Git Aliases on my YouTube Channel so you can watch that Video for Detailed Explanation through video.&lt;br&gt;
Link To Video - &lt;a href="https://www.youtube.com/watch?v=ANcQEnBjXyU&amp;amp;t=224s"&gt;Git Config and Git Aliases&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-is-git-config-"&gt;
  &lt;/a&gt;
  What is Git Config ü§∑‚Äç‚ôÇÔ∏è?
&lt;/h1&gt;

&lt;p&gt;The git config command is a convenience function that is used to set Git configuration values on a global or local project level. These configuration levels correspond to .gitconfig text files.&lt;br&gt;
In one line - "The git config command is a function that sets configuration variables"&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-git-config-levels-and-files"&gt;
  &lt;/a&gt;
  The git config levels and files
&lt;/h2&gt;

&lt;p&gt;Mainly there are three config levels &lt;/p&gt;

&lt;p&gt;&lt;code&gt;--local&lt;/code&gt;&lt;br&gt;
When no configuration option is passed git config writes to a local level, by default.The repository of the .git directory has a file that stores local configuration values.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--global&lt;/code&gt;&lt;br&gt;
The application of the global level configuration includes the operating system user. Global configuration values can be found in a file placed in a user's home directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--system&lt;/code&gt;&lt;br&gt;
The System-level configuration includes all users on an operating system and all repositories. System-level configuration is applied across an entire machine. System-level configuration file is located in a git config file of the system root path.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: the order of priority for configuration levels is: local, global, system. This means when looking for a configuration value, Git will start at the local level and bubble up to the system level.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ENpORdzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nugfa7qzkex8qs0wkmv9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ENpORdzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nugfa7qzkex8qs0wkmv9.PNG" alt="git_cinfig"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#configuring-name-and-email-in-git-bash-"&gt;
  &lt;/a&gt;
  Configuring Name and Email in Git Bash :
&lt;/h2&gt;

&lt;p&gt;Let's First check whether our name and email are set or not :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config user.email  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config user.name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your Email and name are not set you can set them by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config user.email "abc@gmail.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "first_name last_name"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#colorui"&gt;
  &lt;/a&gt;
  Color.Ui‚ú®
&lt;/h3&gt;

&lt;p&gt;Git comes with another property of providing color to the outputs. By default I think it is set to auto. &lt;br&gt;
&lt;strong&gt;If your git color ui is not enabled you can enable it by the command :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global color.ui true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make it set to auto apply this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global color.ui auto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For disabling all Git's colored terminal output you can do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global color.ui false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#git-aliases"&gt;
  &lt;/a&gt;
  Git Aliases üéâ
&lt;/h2&gt;

&lt;p&gt;Git Aliases are custom shortcuts that define which command will expand to longer or combined commands. Aliases save you the time and energy cost of typing frequently used commands. Git provides its own alias system.&lt;br&gt;
And every developer want his code to be short and clear to make it understand properly and conserve his time so that he can make that time useful to develop other thingsüòã.&lt;br&gt;
Git aliases are stored in Git configuration files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt; You do &lt;code&gt;git commit -m "new commit"&lt;/code&gt; but with git commit you can do it simply by &lt;code&gt;git cm "new commit"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The general git config command used to configure aliases is:&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_J9QXXGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g209gl3sfpex3ug9on8e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_J9QXXGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g209gl3sfpex3ug9on8e.PNG" alt="aliases"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: We will set aliases globally because we require alias to be set for our whole  Operating System.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's see some git alias:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#changing-git-aliases-at-any-time-"&gt;
  &lt;/a&gt;
  Changing git aliases at any time :
&lt;/h4&gt;

&lt;p&gt;You can Change, Delete or add new aliases by these ways: &lt;br&gt;
&lt;strong&gt;Command on git Bash -&lt;/strong&gt;&lt;br&gt;
Changing or Deleting -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global --unset alias.&amp;lt;alias&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Editing on Vim or VsCode Editors&lt;/strong&gt;&lt;br&gt;
Changing, Adding or Deleting -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vim ~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;code ~/.gitconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To See all your Global config file setups including email, name, color.ui, aliases and more use the command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat .gitconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IacPR1XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0d0nmjmks5j1ezm9huf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IacPR1XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0d0nmjmks5j1ezm9huf.png" alt="shows all details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summaryüëâ
&lt;/h1&gt;

&lt;p&gt;I hope this Blog was helpful in improving your Git workflow. If you have any queries or suggestions, let‚Äôs discuss in the comment section.&lt;br&gt;
If you all like the content and got to learn something new please give a ‚ù§ and ü¶Ñ. &lt;br&gt;
To learn more about Git, GitHub, Git Config or any code related stuff Please go to my &lt;a href="https://www.youtube.com/channel/UCcAsN-6g9KWAVxXFcVVKhkg"&gt;YouTube Channel&lt;/a&gt; and subscribe if you want more of such learning.&lt;br&gt;
Dedicated video link on this topic - &lt;a href="https://www.youtube.com/watch?v=ANcQEnBjXyU&amp;amp;t=224s"&gt;Video Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You and Happy Learningüòé!!&lt;/p&gt;

</description>
      <category>git</category>
      <category>productivity</category>
      <category>github</category>
      <category>bash</category>
    </item>
    <item>
      <title>The 3 most commun DOM selectors</title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 16 Jul 2021 23:46:59 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/the-3-most-commun-dom-selectors-1mge</link>
      <guid>https://dev.to/ayabouchiha/the-3-most-commun-dom-selectors-1mge</guid>
      <description>&lt;p&gt;Hello, on this amazing day, we'll discuss the 3 most common Javascript selectors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getelementbyid"&gt;
  &lt;/a&gt;
  getElementById
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;getElementById&lt;/strong&gt; is used to return an element using his id. If there is no element with the giving id, it returns null.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Aya Bouchiha&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElememntById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;logo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// null&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#queryselector"&gt;
  &lt;/a&gt;
  querySelector
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;querySelector&lt;/strong&gt; is used to return the first element that matches the giving CSS selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"search"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[type='search']&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#queryselectorall"&gt;
  &lt;/a&gt;
  querySelectorAll
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;querySelectorAll&lt;/strong&gt; is used to return all elements (&lt;em&gt;as a NodeList object&lt;/em&gt;) that matche the giving css selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Hi&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Bonjour&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Salam&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"changeColor()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;To Blue&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;changeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;getElementById&lt;/strong&gt;: for selecting an element using his Id&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;querySelector&lt;/strong&gt;: for getting the first element that matches the giving css selector&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;querySelectorAll&lt;/strong&gt;: for returning as a NodeList object All elements that matche the giving css selector.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy codding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Outcome-based Development w/ Bryan Finster</title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 16 Jul 2021 23:21:03 +0000</pubDate>
      <link>https://dev.to/linearb/outcome-based-development-w-bryan-finster-34am</link>
      <guid>https://dev.to/linearb/outcome-based-development-w-bryan-finster-34am</guid>
      <description>&lt;p&gt;Continuous Delivery isn‚Äôt about how fast you can deliver, it‚Äôs about the outcome your delivery achieves. &lt;/p&gt;

&lt;p&gt;In this week‚Äôs episode of the &lt;a href="https://devinterrupted.com/podcast/outcome-based-development/"&gt;Dev Interrupted podcast&lt;/a&gt; we talk with Bryan Finster, author of &lt;a href="https://bryanfinster.com/"&gt;5-minute DevOps&lt;/a&gt;, about outcome-based development and why failing small is better than failing fast.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3A11veWuh6y4DWmhBQYFem"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What is Outcome-based Development?&lt;/li&gt;
&lt;li&gt;What is the true goal of Continuous Delivery?&lt;/li&gt;
&lt;li&gt;Why failing small is better than failing fast.&lt;/li&gt;
&lt;li&gt;The most common pitfalls dev teams find when trying to optimize their delivery process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>agile</category>
      <category>delivery</category>
      <category>continuousdelivery</category>
    </item>
    <item>
      <title>Creando Arte CSS Accesible</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 16 Jul 2021 23:13:04 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/creando-arte-css-accesible-20dm</link>
      <guid>https://dev.to/alvaromontoro/creando-arte-css-accesible-20dm</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;For an English version of this article, visit this other &lt;a href="https://dev.to/alvaromontoro/creating-more-accessible-css-art-179n"&gt;DEV post&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;El arte y los dibujos CSS ha existido b√°sicamente desde que se creo CSS. Son una manera perfecta de practicar y aprender y son interesantes como retos de programaci√≥n. Pero tienen un gran problema: el arte CSS no es accesible.&lt;/p&gt;

&lt;p&gt;En este post no vamos a ver c√≥mo crear dibujos e ilustraciones en CSS (hay muchos de esos posts). En lugar de eso, nos centraremos en consejos y buenas pr√°cticas para hacer que los dibujos CSS sean m√°s accesibles para todos.&lt;/p&gt;

&lt;p&gt;Despu√©s de aplicar estas t√©cnicas, tus im√°genes en CSS se llevar√°n mejor con los lectores de pantalla, personas con necesidades espec√≠ficos de colores, gente con trastornos vestibulares o v√©rtigo... y todo sin impactar negativamente tu arte o tu creatividad. Todos ganan.&lt;/p&gt;

&lt;p&gt;Para ver un ejemplo con los consejos de este art√≠culo, &lt;a href="https://codepen.io/alvaromontoro/pen/WNwrPmW"&gt;visita esta ilustraci√≥n CSS&lt;/a&gt;. Y sin m√°s pre√°mbulos, vamos a ver las recomendaciones:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identifica el dibujo CSS como una imagen&lt;/li&gt;
&lt;li&gt;A√±ade texto alternativo&lt;/li&gt;
&lt;li&gt;Elige entre dibujar a la perfecci√≥n o responsivamente&lt;/li&gt;
&lt;li&gt;Usa elementos HTML sem√°nticos&lt;/li&gt;
&lt;li&gt;Precauci√≥n con las animaciones&lt;/li&gt;
&lt;li&gt;Respeta las elecciones del colores&lt;/li&gt;
&lt;li&gt;Especifica la relaci√≥n de aspecto &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#identifica-el-dibujo-css-como-una-imagen"&gt;
  &lt;/a&gt;
  Identifica el dibujo CSS como una imagen
&lt;/h2&gt;

&lt;p&gt;Una de las cosas m√°s importantes es identificar tu arte CSS como una image. Eso se puede hacer a√±adiendo un &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Role_Img"&gt;rol ARIA de &lt;code&gt;img&lt;/code&gt;&lt;/a&gt; al contenedor principal del dibujo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML de la imagen --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al a√±adir este rol ARIA, las tecnolog√≠as de asistencia anunciar√°n que el contenedor del arte CSS es una imagen cuando lleguen a √©l.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a%C3%B1ade-texto-alternativo"&gt;
  &lt;/a&gt;
  A√±ade texto alternativo
&lt;/h2&gt;

&lt;p&gt;Ahora que los lectores de pantalla anuncian el arte CSS como una imagen, es important proveer una descripci√≥n o texto alternativo tal y como lo tendr√≠a una imagen normal. Algo equivalente al &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-alt"&gt;atributo &lt;code&gt;alt&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Podemos lograr esto al a√±adir el &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute"&gt;atributo &lt;code&gt;aria-label&lt;/code&gt;&lt;/a&gt; al dibujo y a√±adiendo el texto alternativo ah√≠:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"El texto alternativo ir√≠a aqu√≠"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML de la imagen --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto funcionar√° pero, en el caso improbable (pero posible) de que el CSS no se cargue correctamente, puede no ser suficiente para hacer lo que queremos. Por eso prefiero usar mejor el &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute"&gt;atributo &lt;code&gt;aria-labelledby&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"alt-imagen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"alt-imagen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;El texto alternativo va aqu√≠&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML de la imagen --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esta soluci√≥n incluye la etiqueta como texto, lo que permite esconderla usando cualquier t√©cnica accesible. Hay muchas posibilidades para ello. Una sencilla se puede encontrar en la &lt;a href="https://www.a11yproject.com/posts/2013-01-11-how-to-hide-content/"&gt;p√°gina web de The A11Y Project&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#alt-imagen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;De este modo, si el CSS no se carga, el texto alternativo se mostrar√° parecido a como se mostrar√≠a el texto alternativo de un &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; nativo si la imagen no se carga correctamente en la p√°gina.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#elige-entre-dibujar-a-la-perfecci%C3%B3n-o-responsivamente"&gt;
  &lt;/a&gt;
  Elige entre dibujar a la perfecci√≥n o responsivamente
&lt;/h2&gt;

&lt;p&gt;Algo &lt;strong&gt;a tener en cuenta antes incluso de empezar a codificar nada&lt;/strong&gt;: ¬øqueremos que el dibujo sea &lt;em&gt;pixel-perfect&lt;/em&gt;? ¬øO queremos que sea algo responsivo y que cambie de tama√±o (al coste de que igual no se ve del todo bien)? Por supuesto, las respuesta tendr√°n consecuencias y decidir√°n sobre c√≥mo debemos crear el arte CSS.&lt;/p&gt;

&lt;p&gt;Si queremos alcanzar resultados perfectos, deber√≠amos usar &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#absolute_length_units"&gt;unidades absolutas de medida&lt;/a&gt; como &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;cm&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, etc. De este modo nuestra imagen tendr√° un tama√±o fijo y no escalar√° del todo bien (aunque mejor que las im√°genes raster ya que lo nuestro ser√° un dibujo vectorial), pero podremos usar cualquier propiedad y valor CSS.&lt;/p&gt;

&lt;p&gt;Por otro lado, utilizaremos &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#relative_length_units"&gt;unidades relativas de medida&lt;/a&gt; como &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;vmin&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, etc. si queremos que sea escalable.&lt;/p&gt;

&lt;p&gt;Para que sea responsivo debemos tener en cuenta otras consideraciones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El resultado ser√° escalable y responsivo... o al menos, tendr√° la capacidad de serlo.&lt;/li&gt;
&lt;li&gt;Tendremos que tener cuidado con algunas propiedades CSS que no funcionan bien con algunas unidades relativas (p.e. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/a&gt; o &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-width"&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Debemos evitar valores CSS que no usan unidades relativas (p.e. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path"&gt;&lt;code&gt;clip-path&lt;/code&gt;&lt;/a&gt; puede tener valores relativos con &lt;code&gt;polygon()&lt;/code&gt; pero no con &lt;code&gt;path()&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No hay nada malo con uno u otro enfoque. Para dibujos art√≠sticos seguramente optemos por escalabilidad, mientras que para cosas m√°s &lt;em&gt;pr√°cticas&lt;/em&gt; como iconos o fondos, optar por algo m√°s pixel perfecto ser√° conveniente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usa-elementos-html-sem%C3%A1nticos"&gt;
  &lt;/a&gt;
  Usa elementos HTML sem√°nticos
&lt;/h2&gt;

&lt;p&gt;HTML5 provee muchos elementos sem√°nticos. No hace falta usar &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; para todas las partes de nuestro dibujo y especialmente no para el contenedor principal. La pregunta deber√≠a ser "¬øqu√© elemento HTML debemos usar?"&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nota del autor: comprendo que mi elecci√≥n de elementos sem√°nticos puede ser discutible. Intentar√© ser lo m√°s neutral/objetivo posible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hay un par de elementos que parecen ideales en este caso: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/a&gt; y &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure"&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;&lt;/a&gt;/&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption"&gt;&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;&lt;/a&gt;. Mientras que el segundo parece una elecci√≥n obvia, el primero tiene algunas ventajas sem√°nticas, como veremos pronto.&lt;/p&gt;

&lt;p&gt;Por un lado, tenemos &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;. Un contenido aut√≥nomo con un subt√≠tulo opcional (&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;) que puede usarse para el texto alternativo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"alt-imagen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figcaption&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"alt-imagen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Aqu√≠ va el texto alternativo&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML de la imagen --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esta elecci√≥n parece venir como un guante para lo que queremos, pero no debemos olvidar &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;: una composici√≥n completa, aut√≥noma e independiente, con la intenci√≥n de ser reusada y distribuida. ¬°Precisamente lo que es el dibujo CSS!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML de la imagen --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬øQu√© elemento HTML sem√°ntico elegir? Eso depender√° del autor y de c√≥mo quiere que su arte CSS sea presentado a los usuarios.&lt;/p&gt;

&lt;p&gt;Alguna gente ha mencionado que no puede haber un &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; dentro de otro &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, pero eso no es correcto. &lt;a href="https://html.spec.whatwg.org/multipage/sections.html#the-article-element"&gt;Un art√≠culo puede contener otro art√≠culo&lt;/a&gt;. Cuando hay art√≠culos anidados, el art√≠culo interior debe estar relacionado con el art√≠culo exterior.&lt;/p&gt;

&lt;p&gt;El uso de &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; da mucho juego tambi√©n porque permite una incorporaci√≥n m√°s natural de otros elementos HTML sem√°nticos como encabezados para el t√≠tulo/texto alternativo de la ilustraci√≥n, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address"&gt;&lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt;&lt;/a&gt; para el contacto del autor, o &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time"&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; para la fecha de publicaci√≥n:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"image-alt"&lt;/span&gt; 
         &lt;span class="na"&gt;aria-describedby=&lt;/span&gt;&lt;span class="s"&gt;"image-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Todo el `&amp;lt;header&amp;gt;` se esconder√≠a de forma accesible --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"image-alt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;T√≠tulo/Texto alternativo&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"image-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;
        Creado por
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com/alvaro_montoro"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Alvaro Montoro
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
      el
      &lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2021-06-10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;10 de Junio de 2021&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML de la imagen --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#precauci%C3%B3n-con-las-animaciones"&gt;
  &lt;/a&gt;
  Precauci√≥n con las animaciones
&lt;/h2&gt;

&lt;p&gt;Algunas veces los dibujos CSS incluyen alg√∫n tipo de animaci√≥n: un perro que mueve la cola, una persona movi√©ndose y parpadeando, un avi√≥n que vuela y da vueltas...&lt;/p&gt;

&lt;p&gt;Cuando a√±adimos animaciones a nuestro arte CSS, debemos tener en cuenta que no a todo el mundo le gusta ver las animaciones o que pueden sufrir de alg√∫n trastorno que se vea acentuado por ellas (p.e. &lt;a href="https://css-tricks.com/introduction-reduced-motion-media-query/"&gt;los trastornos vestibulares o el v√©rtigo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Tenemos que proporcionar alg√∫n modo de para las animaciones o reemplazarlas con algo diferente. Para nuestra suerte, CSS ofrece la &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;media query &lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt; que permite a los desarrolladores hacer precisamente eso.&lt;/p&gt;

&lt;p&gt;Por ejemplo, podemos deshabilitar una animaci√≥n haciendo algo como esto (suponiendo que la clase "animado" est√° en todos los elementos que se animan):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.animado&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tambi√©n tenemos que tener en cuenta que no todas las animaciones son iguales y no todas causar√°n problemas. &lt;strong&gt;En lugar de cancelar todas las animaciones, podemos plantearnos cambiarlas por otras m√°s apropiadas&lt;/strong&gt; o ajustando los tiempos para que no sean tan bruscas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#respeta-las-elecciones-del-colores"&gt;
  &lt;/a&gt;
  Respeta las elecciones del colores
&lt;/h2&gt;

&lt;p&gt;Algunos sistemas operativos permiten a los usuarios seleccionar opciones de accesibilidad y, en algunos casos, CSS puede identificar esos valores usando algunas media queries y propiedades.&lt;/p&gt;

&lt;p&gt;Algunos de los m√©todos que vamos a comentario &lt;a href="https://caniuse.com/?search=forced-colors"&gt;no est√°n soportados por los navegadores&lt;/a&gt;, pero pueden usarse para mejorar nuestro arte CSS una vez que el soporte est√© m√°s extendido.&lt;/p&gt;

&lt;p&gt;Las media queries son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast"&gt;&lt;code&gt;prefers-contrast&lt;/code&gt;&lt;/a&gt;: para indicar si el usuario quiere un contraste m√°s alto o m√°s bajo.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"&gt;&lt;code&gt;prefers-color-scheme&lt;/code&gt;&lt;/a&gt;: para detectar si el usuario prefiere un tema oscuro o claro (muy com√∫n para mostrar el modo noche/d√≠a.)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors"&gt;&lt;code&gt;forced colors&lt;/code&gt;&lt;/a&gt;: especifica si un usuario ha elegido una paleta de colores limitada.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-contrast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* more: contrastes m√°s altos, bordes, sin transparencias... */&lt;/span&gt;
  &lt;span class="c"&gt;/* less: contrastes de color m√°s bajos */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-colors-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* dark: dibujos con m√°s contraste frente a fondos oscuros */&lt;/span&gt;
  &lt;span class="c"&gt;/* light: dibujos con m√°s contraste frente a fondos claros */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forced-colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* sobreescribir propiedades como box-shadow, a√±adir bordes, etc. */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El uso de &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;propiedades personalizadas en CSS&lt;/a&gt; (tambi√©n llamadas variables CSS) har√° m√°s f√°cil el uso de esas media queries ya que s√≥lo habr√° que redefinir los valores de las variables.&lt;/p&gt;

&lt;p&gt;En casos m√°s extremos, puede que queremos evitar algunas propiedades CSS. Por ejemplo, el valor de &lt;code&gt;box-shadow&lt;/code&gt; se fuerza a &lt;code&gt;none&lt;/code&gt; en el modo de colores forzados, y tendr√≠amos que buscar alternativas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#especifica-la-relaci%C3%B3n-de-aspecto"&gt;
  &lt;/a&gt;
  Especifica la relaci√≥n de aspecto
&lt;/h2&gt;

&lt;p&gt;Una propiedad m√°s reciente que puede ser √∫til para crear arte CSS responsivo es &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio"&gt;&lt;code&gt;aspect-ratio&lt;/code&gt;&lt;/a&gt;. Con ella podemos definir la relaci√≥n de aspecto preferida para la imagen, que el navegador usar√° para calcular el tama√±o y aplicarlo autom√°ticamente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Este dibujo CSS ser√° cuadrado */&lt;/span&gt;
&lt;span class="nf"&gt;#miArteCSS&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Este dibujo CSS ser√° el doble de alto que de ancho */&lt;/span&gt;
&lt;span class="nf"&gt;#miArteCSS&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto es algo muy conveniente para los desarrolladores, pero tambi√©n tiene un impacto en la accesibilidad porque asegura que nuestros dibujos CSS no se ver√°n estirados o deformados. Y tiene un &lt;a href="https://caniuse.com/?search=aspect-ratio"&gt;buen soporte&lt;/a&gt; por parte de los navegadores.&lt;/p&gt;




&lt;p&gt;Este art√≠culo es una extensi√≥n de la presentaci√≥n que hice durante un meetup de SydCSS. Puedes encontrar el &lt;a href="https://www.youtube.com/watch?v=bJRETGarbqE&amp;amp;t=2460s"&gt;video en Youtube&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>a11y</category>
      <category>html</category>
      <category>spanish</category>
    </item>
    <item>
      <title>üé¨Awesome Loading Animation HTML &amp; CSS‚ú®</title>
      <author>Robson Muniz</author>
      <pubDate>Fri, 16 Jul 2021 22:49:18 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/awesome-loading-animation-html-css-11pa</link>
      <guid>https://dev.to/robsonmuniz16/awesome-loading-animation-html-css-11pa</guid>
      <description>&lt;p&gt;Hey DEVs, in today's video we will create a loading spinner animation for your website using html and css.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-youtube-i4s69rutrwg-"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/i4s69rUtrWg"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>animation</category>
    </item>
    <item>
      <title>Finding the Story in the EU Fisheries Data</title>
      <author>benjamesdavis</author>
      <pubDate>Fri, 16 Jul 2021 22:37:07 +0000</pubDate>
      <link>https://dev.to/benjamesdavis/finding-the-story-in-the-eu-fisheries-data-1gpc</link>
      <guid>https://dev.to/benjamesdavis/finding-the-story-in-the-eu-fisheries-data-1gpc</guid>
      <description>&lt;p&gt;As Brexit trade negotiations were dragging on at the start of the year, a lot of the discourse was focused on perceived inequities in fishing rights. I felt there was a story in the data that needed to be told. Despite having the largest Exclusive Economic Zone (EEZ) of all EU countries, and some of the richest fishing grounds, UK fleets are restricted to quite modest catches.&lt;/p&gt;

&lt;p&gt;Initially, I had grand plans to create a sort of ‚Äòflow map‚Äô that would trace the translocation of fish from fishing grounds to the country of landing. The Common Fisheries Policy provides EU states with mutual access to each other's fishing grounds, but sets quotas that are largely based on catch figures from 40 years ago which today seem arbitrary. Earlier this year, the UK government was pushing to reverse this by proposing a ‚Äúzonal attachment‚Äù model, where quotas would be carved up relative to the abundance of fish in each country‚Äôs waters.&lt;/p&gt;

&lt;p&gt;I was interested to see what a switch to this model would mean. How significant a change would this make? Which countries would be the winners and losers?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-data"&gt;
  &lt;/a&gt;
  The Data
&lt;/h4&gt;

&lt;p&gt;Each EU state reports its annual landings across a grid of spatial cells, called ICES rectangles - each about 30 nautical miles by 30 nautical miles in size. By clipping this grid against a map of EEZ polygons, &lt;a href="https://www.ices.dk/data/maps/Pages/ICES-statistical-rectangles.aspx"&gt;ICES rectangles&lt;/a&gt; could be assigned to the country whose waters they are contained within, providing a state of origin for reported catches. Where cells straddled jurisdictions, catches were split relative to the proportion of the cell that falls within each country.&lt;/p&gt;

&lt;p&gt;Aggregating catches within each EEZ gave an approximation of what quotas would look like under a zonal attachment model, while aggregating catches by fleet shows how much the existing quotas diverge from this model.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#visualization-inspiration"&gt;
  &lt;/a&gt;
  Visualization Inspiration
&lt;/h4&gt;

&lt;p&gt;Initially, I had grand plans to create a sort of ‚Äòflow map‚Äô that would trace the translocation of fish from fishing grounds to the country of landing. One idea was to represent EEZ biomasses on a dot density map with dots transitioning into geographically arranged catch bars. Another was to illustrate catch flows through arrows of varying thickness, on a map that would‚Äôve likely resembled the opening sequence of ‚ÄúDad‚Äôs Army‚Äù.&lt;/p&gt;

&lt;p&gt;Both options were technically challenging and promised to produce a snazzy output, but since the geographic component was kind of superfluous for the analysis, it threatened to distract from the crux of the piece. I didn‚Äôt really care whether fish were flowing between adjacent or more distant countries - just the extent to which they were flowing between countries, and the resulting net imports / exports. Therefore, I opted to de-couple the flow component from the map component to favour a more functional chart in the form of a Sankey.&lt;/p&gt;

&lt;p&gt;Although Sankey has become a bit hackneyed in recent years, there have been some compelling D3-based variants that have breathed new life into the chart form. My main inspiration was from an &lt;a href="https://www.nytimes.com/interactive/2018/03/19/upshot/race-class-white-and-black-men.html"&gt;NYT article on social mobility bias&lt;/a&gt;, that conveyed ‚Äòflows‚Äô of black and white boys from different backgrounds into different socio-economic classes. Instead of encoding flows through ribbon thickness, like a traditional Sankey, particles flow between the Sankey dimension in varying density and frequency. The animation mesmerizes and keeps the reader engaged as the result emerges gradually through the course of the animation.&lt;/p&gt;

&lt;p&gt;By complementing the particle Sankey with marginal bar charts of fish biomass, the net flows out of and into each country could still be easily compared. For example, it‚Äôs clear Denmark gets a good deal, catching in excess of the biomass that their fishing grounds produce, while the UK is justified in feeling hard done by, with the majority of UK fish ending up in other country‚Äôs nets.&lt;/p&gt;

&lt;p&gt;I was pleased with how the marginal bar charts melded in with the animation sequence. At the top, the bars (representing fish caught in each country‚Äôs waters) are pushed downwards and seemingly shred into tiny particles - akin to Banksys‚Äô self-shredding artwork, and then as they work their way down shuffle satisfyingly into their destined lanes (representing the fleet of capture).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kWxIXwjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jybujaikprl9tk7v0ucl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kWxIXwjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jybujaikprl9tk7v0ucl.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-observable"&gt;
  &lt;/a&gt;
  Why Observable?
&lt;/h4&gt;

&lt;p&gt;For me, Observable is a gallery, a self-contained development environment, a sandbox, a collaboration platform, and crucially - as a relative newcomer to D3 - a library for learning. It‚Äôs simple and quick to browse through other people‚Äôs work, dig into their code, and decipher the mechanics of their visuals.&lt;/p&gt;

&lt;p&gt;For this particular piece, a search for ‚Äúanimated Sankey‚Äù yielded a raft of examples from an &lt;a href="https://observablehq.com/@chekos/animated-sankey"&gt;Amelia Wattenberger tutorial&lt;/a&gt;, which would form the basis of my Sankey template. Further, by porting &lt;a href="https://observablehq.com/@benjamesdavis/elijah-meeks-particle-sankey"&gt;Elijah Meeks' particle Sankey&lt;/a&gt; from Blocks to Observable, I learned of some neat javascript functions (e.g. getPointAtLength) that helped better control the paths of the particles.&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>javascript</category>
      <category>analytics</category>
      <category>datavisualization</category>
    </item>
    <item>
      <title>üé¨Awesome Loading Animation HTML &amp; CSS‚ú®</title>
      <author>Robson Muniz</author>
      <pubDate>Fri, 16 Jul 2021 22:08:47 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/awesome-loading-animation-html-css-1gpe</link>
      <guid>https://dev.to/robsonmuniz16/awesome-loading-animation-html-css-1gpe</guid>
      <description>&lt;p&gt;Hey DEVs, in today's video we will create a loading spinner animation for your website using html and css.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-youtube-i4s69rutrwg-"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/i4s69rUtrWg"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;

</description>
    </item>
    <item>
      <title>Hoisting in JavaScript.</title>
      <author>NikhilBelide</author>
      <pubDate>Fri, 16 Jul 2021 22:04:01 +0000</pubDate>
      <link>https://dev.to/belidenikhil/hoisting-in-javascript-1g7h</link>
      <guid>https://dev.to/belidenikhil/hoisting-in-javascript-1g7h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Interviewer&lt;/strong&gt; : Can you explain me the concept of &lt;em&gt;Hoisting?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Dev&lt;/strong&gt; : Sure. Hoisting is a phenomenon in which JavaScript magicallyü§∫ moves the code to the top.&lt;br&gt;
&lt;strong&gt;Interviewer&lt;/strong&gt; :   &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvL8rcpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ynlxt7fwl6ebkxengme.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvL8rcpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ynlxt7fwl6ebkxengme.jpg" alt="confused"&gt;&lt;/a&gt;&lt;br&gt;
Can you dive a little bit more deep?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dev&lt;/strong&gt; : Sure. Gives an example where we can call a function on a line which is before the function initialization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviewer&lt;/strong&gt; : &lt;em&gt;Hmm.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the end you wont get the Job.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I too have seen many &lt;em&gt;tutorials, blogs and sites&lt;/em&gt; where they mentioned the same. But programming is not magic. There lies a logic. So, lets actually see how actually &lt;em&gt;HOISTING&lt;/em&gt; works.&lt;/p&gt;

&lt;p&gt;We know that when we run a script, a Global Execution Context (GEC) is created which consists of two phases. &lt;em&gt;Memory creation phase&lt;/em&gt; and &lt;em&gt;Execution phases&lt;/em&gt; i.e. run phase.&lt;br&gt;
During this &lt;em&gt;memory creation phase&lt;/em&gt; all the magic happens.&lt;/p&gt;

&lt;p&gt;As soon as we run a script all the all the &lt;em&gt;variables&lt;/em&gt; and &lt;em&gt;functions&lt;/em&gt; are allocated space in the memory. This happens even before the first line of code is executed. This is the reason we are able to call/access &lt;em&gt;functions or variables&lt;/em&gt;  on a line which is before their &lt;em&gt;initialization&lt;/em&gt; and not face any errors. Don't believe me? Let's see with an&lt;br&gt;
example.&lt;/p&gt;

&lt;p&gt;Lets run the following code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HRfxTXxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8b7i2dbcdgsepngri37v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HRfxTXxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8b7i2dbcdgsepngri37v.png" alt="first"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nothing weird right? Now, lets make some changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uYo1uAAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df7jzru57tlpfyheamsb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uYo1uAAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df7jzru57tlpfyheamsb.png" alt="two"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Noticed the change? We called the function before its initialization.&lt;/p&gt;

&lt;p&gt;To see what exactly happened lets put a &lt;em&gt;debugger&lt;/em&gt; on &lt;em&gt;line 1&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaviDq-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skh9dfbueyv8ex3ulw3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaviDq-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skh9dfbueyv8ex3ulw3n.png" alt="Three"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we are at &lt;em&gt;line 1&lt;/em&gt; and we haven't executed anything yet.&lt;br&gt;
But as we discussed, memory is allocated to functions and variables before the &lt;em&gt;execution phase&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the above image, notice the &lt;em&gt;Global&lt;/em&gt; heading? That is memory.&lt;br&gt;
So, if what I said is true then the memory should show the function and variable now right? Correct.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxJFHZIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deamutwt4pa9ggif2ga3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxJFHZIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deamutwt4pa9ggif2ga3.png" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OqUanEk---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ng93kq997b3as6n05ivv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqUanEk---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ng93kq997b3as6n05ivv.png" alt="5"&gt;&lt;/a&gt;&lt;br&gt;
Observe the above two images, under &lt;em&gt;Global&lt;/em&gt;(which is on bottom right) and you'll see &lt;em&gt;a : undefined and one : f one();&lt;/em&gt; and remember we are still at &lt;em&gt;line 1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, if they are in the memory we should be able to &lt;em&gt;log&lt;/em&gt; them as well right? Yes.&lt;/p&gt;

&lt;p&gt;Making a few changes and the code now looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDZTYrxy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqbhak1eh010u7zkg71a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDZTYrxy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqbhak1eh010u7zkg71a.png" alt="6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, lets log them.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uiFUKVRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jr4ado9tyehlaorlkan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uiFUKVRE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6jr4ado9tyehlaorlkan.png" alt="7"&gt;&lt;/a&gt;&lt;br&gt;
See that? By default &lt;em&gt;variables&lt;/em&gt; are given 'undefined' and &lt;em&gt;functions&lt;/em&gt; are stored along with their code in memory before script execution phase. That's the reason we see undefined and inner function data in console and that is the reason we are able to access them at lines on code which are before &lt;em&gt;variable initialization&lt;/em&gt; or &lt;em&gt;function initialization&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For now, lets concentrate on functions and it's &lt;em&gt;hoisting&lt;/em&gt;.&lt;br&gt;
So, if a function is saved in memory along with the whole code before the run, we will also be able to use them on a line in code before their initialization or anywhere right? Correct.&lt;/p&gt;

&lt;p&gt;Lets make the code cleaner and see an example and the &lt;em&gt;HTML&lt;/em&gt; code as well.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_K0CVPnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y9oiijgr1b3wbzz51oe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_K0CVPnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y9oiijgr1b3wbzz51oe.png" alt="8"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odqesbCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0z656mdqdfxar5knai1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odqesbCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0z656mdqdfxar5knai1.png" alt="9"&gt;&lt;/a&gt;&lt;br&gt;
Notice the above data very carefully. &lt;/p&gt;

&lt;p&gt;Notice the &lt;em&gt;console&lt;/em&gt;, the &lt;em&gt;DOM&lt;/em&gt;, the &lt;em&gt;storage&lt;/em&gt; and where the &lt;em&gt;debugger&lt;/em&gt; is placed and until what line the code has been executed.&lt;br&gt;
So, we have run till &lt;em&gt;line 5&lt;/em&gt; and the storage holds var &lt;em&gt;a:100&lt;/em&gt; and we have it on the console as well. A &lt;em&gt;debugger&lt;/em&gt; is before the function &lt;strong&gt;one()&lt;/strong&gt; and the DOM page one the browser has only the initial data.&lt;/p&gt;

&lt;p&gt;Now lets call the function &lt;strong&gt;one()&lt;/strong&gt; and see the changes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iLYtrBYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8yynt1qhvh021cxi0u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLYtrBYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8yynt1qhvh021cxi0u8.png" alt="10"&gt;&lt;/a&gt;&lt;br&gt;
Noticed? The DOM? Console? and the fact that we are yet to run &lt;em&gt;line 8&lt;/em&gt;. We have successfully called/accessed  function &lt;em&gt;one()&lt;/em&gt; before its initialization.&lt;/p&gt;

&lt;p&gt;This is what &lt;strong&gt;Hoisting&lt;/strong&gt; is. This is how powerfulüí• &lt;em&gt;hoisting&lt;/em&gt; is and how things run behind the scenes.&lt;/p&gt;

&lt;p&gt;So, next time when an Interviewer asks what &lt;em&gt;hoisting&lt;/em&gt; is, you should not be like &lt;em&gt;magic happens and code moves to the top&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I hope that what I have written is understandable and I will be writing even more about &lt;em&gt;hoisting&lt;/em&gt; and why we see &lt;em&gt;not-defined&lt;/em&gt; and &lt;em&gt;undefined&lt;/em&gt; in this and why &lt;em&gt;arrow functions&lt;/em&gt; don't work with &lt;em&gt;hoisting&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Also I would like to thank Akshay Saini (&lt;a class="mentioned-user" href="https://dev.to/akshaymarch7"&gt;@akshaymarch7&lt;/a&gt;
) for the way he explained this topic and many more in such an accurate manner.&lt;/p&gt;

&lt;p&gt;Any feedback would be highly appreciated. üñ§&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating Your First Chrome Extension.</title>
      <author>Giwa Jossy</author>
      <pubDate>Fri, 16 Jul 2021 22:00:33 +0000</pubDate>
      <link>https://dev.to/giwajossy/creating-your-first-chrome-extension-26l</link>
      <guid>https://dev.to/giwajossy/creating-your-first-chrome-extension-26l</guid>
      <description>&lt;p&gt;Every four seconds, this chrome extension replaces images on any webpage I visit, with random pictures of some of my friends and family. &lt;/p&gt;

&lt;p&gt;Totally enjoyed the building process.&lt;br&gt;
Here's what it looks like when activated on YouTube üëÄ. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_WKvY0o2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dd3hmuucq/image/upload/v1626372936/friendsFX/sddd_w6nxdb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_WKvY0o2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dd3hmuucq/image/upload/v1626372936/friendsFX/sddd_w6nxdb.jpg" alt="Youtube"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h3&gt;

&lt;p&gt;A fairly solid understanding of the DOM [Document Object Model] goes a long way when building browser extensions, as you would have to do lots of DOM manipulation.&lt;/p&gt;

&lt;p&gt;The project folder contains two files; &lt;strong&gt;manifest.json&lt;/strong&gt; and &lt;strong&gt;content.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Project Folder/&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;manifest.json&lt;/em&gt;&lt;br&gt;
&lt;em&gt;content.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...&lt;br&gt;
&lt;strong&gt;manifest.json&lt;/strong&gt;&lt;br&gt;
This is the entry point of every chrome extension. It handles permissions, routes, and holds necessary information like the extension name, version, description, icons, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="nl"&gt;"manifest_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"FriendsFX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Converts every image on a webpage to random pictures of some of my friends"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content_scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"matches"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;all_urls&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"content.js"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the keys in the snippet above are self-explanatory, but let's talk about the &lt;code&gt;"content_scripts"&lt;/code&gt; key. &lt;/p&gt;

&lt;p&gt;It holds an array of one object - containing two key elements; &lt;code&gt;"matches"&lt;/code&gt; and &lt;code&gt;"js"&lt;/code&gt;, with values of &lt;code&gt;["&amp;lt;all_urls&amp;gt;"]&lt;/code&gt; and &lt;code&gt;["content.js"]&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;["&amp;lt;all_urls&amp;gt;"]&lt;/code&gt; basically matches any URL that starts with a permitted scheme; &lt;em&gt;http:, https:, file:, ftp:, or chrome-extension:.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;These permissions are required if your code wants to interact with the code running on webpages.&lt;/p&gt;

&lt;p&gt;...&lt;br&gt;
&lt;strong&gt;content.js&lt;/strong&gt;&lt;br&gt;
Here goes the code that replaces every image on a webpage with the selected pictures.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 1:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I had uploaded the pictures to cloudinary, a tool that automatically optimizes and delivers media files.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: You do not have to use cloudinary. Your friends' pictures must be somewhere on the internet, so you can just grab the links whenever you need them&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Below, I created an array - &lt;code&gt;imagesLinks&lt;/code&gt;, containing links to those pictures.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// An array of pictures to randomly select from&lt;/span&gt;
&lt;span class="c1"&gt;// You can have as many links/pictures as you want&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imagesLinks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://res.cloudinary.com/dd3hmuucq/image/upload/v1625511199/friendsFX/IMG20201223190841_1_gsz2dc.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://res.cloudinary.com/dd3hmuucq/image/upload/v1625511198/friendsFX/IMG20201223184904_tj8u3d.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://res.cloudinary.com/dd3hmuucq/image/upload/v1625511192/friendsFX/IMG20201223182200_xglqvv.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://res.cloudinary.com/dd3hmuucq/image/upload/v1625511189/friendsFX/IMG20201223191703_wnindo.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://res.cloudinary.com/dd3hmuucq/image/upload/v1625511184/friendsFX/IMG20201223182912_er8kil.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// fetches all &amp;lt;img&amp;gt; tags on the webpage&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageTags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Final Step:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Loops through each of the &amp;lt;img&amp;gt; tags on the webpage&lt;/span&gt;
&lt;span class="c1"&gt;// Replaces the 'src' attribute with a random link from the imageLinks array &lt;/span&gt;
&lt;span class="c1"&gt;// Do this every 4 seconds&lt;/span&gt;

&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;imageTags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;randomArrayIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;imagesLinks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;imageTags&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imagesLinks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomArrayIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-test-out-the-extension"&gt;
  &lt;/a&gt;
  Let's test out the extension.
&lt;/h3&gt;

&lt;p&gt;1) Upload the extension to your browser extension library.&lt;br&gt;&lt;br&gt;
Type this üëâüèº &lt;em&gt;chrome://extensions/&lt;/em&gt; in your browser&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrgVfkB5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dd3hmuucq/image/upload/v1626407266/friendsFX/1._chrome_extension_lttgyp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrgVfkB5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dd3hmuucq/image/upload/v1626407266/friendsFX/1._chrome_extension_lttgyp.jpg" alt="Access chrome extensions library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Activate "Developer mode" at the top right corner&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k9Xm962w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dd3hmuucq/image/upload/v1626407267/friendsFX/2._Activate_Developer_mode_oo6jer.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9Xm962w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dd3hmuucq/image/upload/v1626407267/friendsFX/2._Activate_Developer_mode_oo6jer.jpg" alt='Activate "Developer mode" at the top right corner'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Click "Load unpacked" and select the project folder. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sdnwQSX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dd3hmuucq/image/upload/v1626407267/friendsFX/3._Load_unpacked_c16b6f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sdnwQSX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dd3hmuucq/image/upload/v1626407267/friendsFX/3._Load_unpacked_c16b6f.jpg" alt='Click "Load unpacked" and select the project folder. '&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) The extension gets added and is immediately activated.&lt;/p&gt;

&lt;p&gt;5) Now go to any webpage, hold on for about 4 seconds and watch the selected pictures appear.&lt;/p&gt;

&lt;p&gt;...&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;Let me know if you found this helpful.&lt;br&gt;
You can also get the code on &lt;a href="https://github.com/giwajossy/FriendsCRX"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>chrome</category>
      <category>extension</category>
      <category>browser</category>
    </item>
    <item>
      <title>Getting started with Terraform: Remote Backend</title>
      <author>Daniel Huerta</author>
      <pubDate>Fri, 16 Jul 2021 21:22:15 +0000</pubDate>
      <link>https://dev.to/danihuerta/getting-started-with-terraform-remote-backend-4092</link>
      <guid>https://dev.to/danihuerta/getting-started-with-terraform-remote-backend-4092</guid>
      <description>&lt;p&gt;In the previous post we talked about how does Terraform manages the resources in the cloud using the local &lt;a href="https://dev.to/danihuerta/getting-started-with-terraform-state-file-1l2f"&gt;state&lt;/a&gt; file, however in the real world we will have to collaborate with other members of the team, it is to say that not only one person is going to modify the Terraform files.&lt;/p&gt;

&lt;p&gt;In this scenario, does the entire team have to modify  the &lt;em&gt;local state file&lt;/em&gt; manually in their machine to be all synchronized? ü§î.&lt;/p&gt;

&lt;p&gt;Well, it does not sound so practical. When we work in a collaborative workflow it is necessary to use a &lt;strong&gt;remote backend&lt;/strong&gt; which is the same as a &lt;strong&gt;remote state file&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-backend"&gt;
  &lt;/a&gt;
  Remote Backend
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;Remote Backend&lt;/em&gt; is the resource in Terraform that will allows us to store the &lt;a href="https://dev.to/danihuerta/getting-started-with-terraform-state-file-1l2f"&gt;state file&lt;/a&gt; in a remote location, not locally as it occurs in TF by default.&lt;/p&gt;

&lt;p&gt;Doing this, all the team members that are working with the Terraform files will be able to do it in a synchronized way, there will be a unique shared state file for the project placed in a remote location which can be an AWS S3 Bucket, Consul, AzureRM, etc. In this post we are going to use an AWS S3 Bucket as our remote backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-backend"&gt;
  &lt;/a&gt;
  S3 Backend
&lt;/h2&gt;

&lt;p&gt;If any backend is specified in the code, the state will be stored locally. Keeping that in mind, let's define our first remote backend üë®üèΩ‚Äçüíª.&lt;/p&gt;

&lt;p&gt;To keep our code in a good structure, we need to create a file named &lt;strong&gt;backend.tf&lt;/strong&gt; (you can name it as whatever you want, it is just to follow the standard). Inside of it we are going to use the next code and then configure it with the command &lt;em&gt;terraform init&lt;/em&gt; in the terminal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4UswvuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siqqno6srkb7e72sgusy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4UswvuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siqqno6srkb7e72sgusy.png" alt="Screen Shot 2021-07-16 at 16.09.37"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that the AWS S3 Bucket needs to be created in the cloud before running "terraform apply", otherwise it will show an error because there will not be a bucket to store the remote state file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once the code has been applied, you will see that inside of the &lt;em&gt;.terraform&lt;/em&gt; folder there is a &lt;em&gt;terraform.tfstate&lt;/em&gt; file. However, the information about the created resources are not stored there, it only specifies that the &lt;strong&gt;backend&lt;/strong&gt; is an S3 Bucket.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-locking"&gt;
  &lt;/a&gt;
  State Locking
&lt;/h2&gt;

&lt;p&gt;Now we are able to work in the same Terraform infrastructure file in a collaborative way, however, what if while I'm modifying a specific resource in the code, another member of the team modify the same part as well? What changes are the ones that will remain? üò£.&lt;/p&gt;

&lt;p&gt;This is a common problem when a team works in the same code, the solution of it is the &lt;strong&gt;state locking&lt;/strong&gt;. As its name says, it is going to block the state during the &lt;em&gt;applying operations&lt;/em&gt; such as &lt;em&gt;terraform plan&lt;/em&gt; or &lt;em&gt;terraform apply&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once we have added the state locking (which is also included by default when we use the local state but not in a remote backend) if a user is running a &lt;em&gt;terraform apply&lt;/em&gt; command for example, and another one tries to do it as well at the same time, TF will show him an error specifying that the state is currently locked by the changes of a different user, avoiding inconveniences in the code.&lt;/p&gt;

&lt;p&gt;To create the state locking with the S3 Bucket, it is necessary to create a &lt;strong&gt;DynamoDB&lt;/strong&gt; and add &lt;em&gt;LockID&lt;/em&gt; as primary key:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jRlMg8aj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0imwo71do6u70k1hbc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jRlMg8aj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0imwo71do6u70k1hbc2.png" alt="Screen Shot 2021-07-16 at 16.13.18"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's specify to the backend that we are going to use a DynamoDB for our State Locking. It is very simple, we just need to add the &lt;em&gt;dynamodb_table&lt;/em&gt; tag:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5MDEL19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih8y733y1ollfmbnto0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5MDEL19--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ih8y733y1ollfmbnto0x.png" alt="Screen Shot 2021-07-16 at 16.16.09"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To apply this configuration let's run the command &lt;em&gt;terraform init&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now we can work with the TF files within the team with the best practices üòâ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  Closure
&lt;/h2&gt;

&lt;p&gt;This topic can be a little tricky to understand, mainly because there are many resources that can be used as &lt;strong&gt;Remote Backends&lt;/strong&gt;, however, you don't have to be an expert implementing all of them. In my case, AWS is the CP that I mostly use in my job, that's why I'm using its resources with Terraform.&lt;/p&gt;

&lt;p&gt;If you have any doubt or comments about it let's discuss it, remember we are here to help each other üòâüíô.&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>aws</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>JavaScript Demystified: The execution context and the call stack</title>
      <author>Saran Chakravarthi</author>
      <pubDate>Fri, 16 Jul 2021 21:02:01 +0000</pubDate>
      <link>https://dev.to/saran_chakravarthi/javascript-demystified-the-execution-context-and-the-call-stack-2gka</link>
      <guid>https://dev.to/saran_chakravarthi/javascript-demystified-the-execution-context-and-the-call-stack-2gka</guid>
      <description>&lt;p&gt;Hello Devs, "JavaScript demystified" is going to be a series of blogs. And this is the first one. I will try to cover the important yet not well-known javascript concepts in this blog series. I would like to start off the series by explaining the execution context and the call stack.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#execution-context"&gt;
  &lt;/a&gt;
  Execution context:
&lt;/h1&gt;

&lt;p&gt;Execution context may be defined as the environment in which the code gets executed. Everything in JavaScript happens inside the execution context&lt;/p&gt;

&lt;p&gt;It is composed of two components, the memory component and the code component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-memory-component"&gt;
  &lt;/a&gt;
  The memory component:
&lt;/h2&gt;

&lt;p&gt;The memory component, also known as the variable environment, stores the variable, functions and their values as key-value pairs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code-component"&gt;
  &lt;/a&gt;
  The code component:
&lt;/h2&gt;

&lt;p&gt;It is also known as the thread of execution. Inside the code component, the code is executed one line at a time.&lt;/p&gt;

&lt;p&gt;Execution context is created in two phases. The first one is memory creation phase, in this phase the interpreter skims through the whole program and allocates memory to the variables and functions. The second phase is called the code execution phase, the code gets executed in this phase.&lt;/p&gt;

&lt;p&gt;Let's visualize this with an example. Consider the following program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var n = 10;

function double(num){
    return num*2;
}

a = double(n);
b = double(7);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the program starts to execute, a new execution context will be created, since we are dealing with global level, it is called the global execution context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-allocation-phase"&gt;
  &lt;/a&gt;
  Memory allocation phase:
&lt;/h2&gt;

&lt;p&gt;On line number one, memory is allocated for the variable n, and it is assigned with the value "undefined". You can think of "undefined" as a special placeholder keyword (we will learn more about it in the upcoming blogs).&lt;/p&gt;

&lt;p&gt;Then memory is allocated for double function, the whole function is assigned to it as its value.&lt;/p&gt;

&lt;p&gt;Similar to variable n, memory is allocated for variables a and b, and they are assigned with the value "undefined"&lt;/p&gt;

&lt;p&gt;This how the execution context will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlT1368u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvmsxu55hhbhyys1484o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlT1368u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvmsxu55hhbhyys1484o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-execution-phase"&gt;
  &lt;/a&gt;
  Code execution phase:
&lt;/h2&gt;

&lt;p&gt;Code is executed line by line, firstly the value of n will be replaced with 10. The function definition of double will be skipped, as it is just a definition, there is nothing to be executed. Then we reach the function invocation where double function is called. Now something interesting happens, a new execution context will be created inside the global execution context's thread of execution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJIp3rRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm6hq99nrdjam6ecel0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJIp3rRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm6hq99nrdjam6ecel0o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same process will happen to this new execution context as well.&lt;/p&gt;

&lt;p&gt;During the memory creation phase, memory will be allocated for num and will be assigned with undefined.&lt;/p&gt;

&lt;p&gt;During the code execution phase the value of num will be replaced by 10. &lt;/p&gt;

&lt;p&gt;When the program reaches "return" keyword, the control is returned to the function caller, along with value specified after the return keyword.  Then that particular execution context is deleted. In our case, execution context of &lt;code&gt;double(n)&lt;/code&gt; will be deleted.&lt;/p&gt;

&lt;p&gt;similarly &lt;code&gt;double(7)&lt;/code&gt; will also be executed.&lt;/p&gt;

&lt;p&gt;Once the program reaches the end of the file, the global execution context will also be deleted.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-call-stack"&gt;
  &lt;/a&gt;
  The call stack:
&lt;/h1&gt;

&lt;p&gt;The example we saw was pretty simple. But what if we have multiple function invocations inside a function, how will JavaScript handle it? The answer is call stack.&lt;/p&gt;

&lt;p&gt;It is similar to the stack data structure. It follows the LIFO(Last In First Out) principal.&lt;/p&gt;

&lt;p&gt;Whenever we start a program, the global execution context is pushed into to the stack. After that if we call a function it is pushed into the stack. Once the code reaches the return statement, the function gets popped off the stack. The global execution context will be popped off when we reach the end of the file.&lt;/p&gt;

&lt;p&gt;As we saw, JavaScript has only one call stack, hence it is &lt;strong&gt;single threaded&lt;/strong&gt;. And it executes the code line by line, so it is &lt;strong&gt;synchronous&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But you might say, "I have used AJAX, JavaScript is asynchronous". No, JavaScript is not asynchronous. We will see how javascript handles asynchronous code in the upcoming blogs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next:
&lt;/h3&gt;

&lt;p&gt;I hope you liked this blog, In the next blog, I will cover the concept of hoisting. Follow me to receive the notification.&lt;/p&gt;

&lt;p&gt;Want to connect with me? You can DM on Dev.to and &lt;a href="https://twitter.com/SaranChakravar3"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Laravel Deploy Script</title>
      <author>Alexandre Freire</author>
      <pubDate>Fri, 16 Jul 2021 20:14:15 +0000</pubDate>
      <link>https://dev.to/alexandrefreire/laravel-deploy-script-3ob6</link>
      <guid>https://dev.to/alexandrefreire/laravel-deploy-script-3ob6</guid>
      <description>&lt;p&gt;I found this example on gists page of Github. Was writed by github.com/BenSampo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Change to the project directory&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$FORGE_SITE_PATH&lt;/span&gt;

&lt;span class="c"&gt;# Turn on maintenance mode&lt;/span&gt;
php artisan down &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="c"&gt;# Pull the latest changes from the git repository&lt;/span&gt;
&lt;span class="c"&gt;# git reset --hard&lt;/span&gt;
&lt;span class="c"&gt;# git clean -df&lt;/span&gt;
git pull origin &lt;span class="nv"&gt;$FORGE_SITE_BRANCH&lt;/span&gt;

&lt;span class="c"&gt;# Install/update composer dependecies&lt;/span&gt;
composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-interaction&lt;/span&gt; &lt;span class="nt"&gt;--prefer-dist&lt;/span&gt; &lt;span class="nt"&gt;--optimize-autoloader&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt;

&lt;span class="c"&gt;# Restart FPM&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt; flock &lt;span class="nt"&gt;-w&lt;/span&gt; 10 9 &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;1
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Restarting FPM...'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-S&lt;/span&gt; service &lt;span class="nv"&gt;$FORGE_PHP_FPM&lt;/span&gt; reload &lt;span class="o"&gt;)&lt;/span&gt; 9&amp;gt;/tmp/fpmlock

&lt;span class="c"&gt;# Run database migrations&lt;/span&gt;
php artisan migrate &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="c"&gt;# Clear caches&lt;/span&gt;
php artisan cache:clear

&lt;span class="c"&gt;# Clear expired password reset tokens&lt;/span&gt;
php artisan auth:clear-resets

&lt;span class="c"&gt;# Clear and cache routes&lt;/span&gt;
php artisan route:cache

&lt;span class="c"&gt;# Clear and cache config&lt;/span&gt;
php artisan config:cache

&lt;span class="c"&gt;# Clear and cache views&lt;/span&gt;
php artisan view:cache

&lt;span class="c"&gt;# Install node modules&lt;/span&gt;
&lt;span class="c"&gt;# npm install&lt;/span&gt;

&lt;span class="c"&gt;# Build assets using Laravel Mix&lt;/span&gt;
&lt;span class="c"&gt;# npm run production&lt;/span&gt;

&lt;span class="c"&gt;# Turn off maintenance mode&lt;/span&gt;
php artisan up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>laravel</category>
    </item>
  </channel>
</rss>
