<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Simplifying Event Filtering and Value Aggregation with RudderStack</title>
      <author>RudderStack</author>
      <pubDate>Tue, 07 Dec 2021 12:55:23 +0000</pubDate>
      <link>https://dev.to/rudderstack/simplifying-event-filtering-and-value-aggregation-with-rudderstack-44gc</link>
      <guid>https://dev.to/rudderstack/simplifying-event-filtering-and-value-aggregation-with-rudderstack-44gc</guid>
      <description>&lt;p&gt;Dealing with event data is dirty work at times. Developers may transmit events with errors because of a change a developer made. Also, sometimes errors could be introduced if the data engineering team decides to change something on the data warehouse schema. Due to these changes to the schema, data type conflict may occur. How can someone deal with all the different event data issues that might arise in a production environment? This blog discusses how &lt;a href="http://www.rudderstack.com/"&gt;RudderStack&lt;/a&gt; handles event filtering and value aggregation without introducing manual errors.&lt;/p&gt;

&lt;p&gt;RudderStack's solution is a sophisticated mechanism. Here, you can implement custom logic using JavaScript to define transformations. You can apply these transformations to the incoming events.&lt;/p&gt;

&lt;p&gt;Having an expressive environment like RudderStack offers endless possibilities of how a data engineering team can interact with the data. In this blog post, we will explore just two of the most common use cases we've encountered among the RudderStack community. Event filtering and value aggregation are universal, simple to implement, yet very powerful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-transformation-for-event-filtering-and-value-aggregation"&gt;
  &lt;/a&gt;
  User Transformation for Event Filtering and Value Aggregation
&lt;/h2&gt;

&lt;p&gt;You can define user transformations in the Configuration Plane of your RudderStack setup. Few sample user transformations are available on our &lt;a href="https://github.com/rudderlabs/sample-user-transformers/"&gt;GitHub&lt;/a&gt;. This blog provides an insight into one such sample transformation that you can use for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Event Filtering: This stops events from passing to a destination. You might need to filter events where an organization employs multiple tools/platforms for addressing different business requirements. Also, you may want to route only specific events to specific tool/platform destinations.&lt;/li&gt;
&lt;li&gt;  Value Aggregation: This allows aggregation of values on specific attributes of particular event types. You might need to aggregate values where an organization is not looking to employ a tool/platform to perform transaction-level record keeping and/or analysis. Instead, they want consolidated records/analytics. So, this kind of transformation helps in reducing the network traffic, and request/message volume. This is because the system can replace multiple events of a particular type by a single event of the same type with the aggregated value(s). This transformation also helps in cost reduction, where the destination platform charges by volume of events/messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can view the sample transformation on our &lt;a href="https://github.com/rudderlabs/sample-user-transformers/"&gt;GitHub&lt;/a&gt; page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;You need to contain all logic within the &lt;code&gt;transform&lt;/code&gt; function, which takes an array of events as input and returns an array of transformed events. The &lt;code&gt;transform&lt;/code&gt; function is the entry-point function for all user transformations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterEventNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;// Add list of event names that you want to filter out&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;game_load_time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lobby_fps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

 &lt;span class="c1"&gt;//remove events whose name match those in above list&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;filterEventNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code snippet above shows how you can use the &lt;code&gt;filter&lt;/code&gt; function of JavaScript arrays to filter out events based on the event name.&lt;/p&gt;

&lt;p&gt;A variation of this code is also possible. Here, the values in the array of event names are the ones you &lt;em&gt;want&lt;/em&gt; to retain, and you remove the not (&lt;code&gt;!&lt;/code&gt;) condition from the &lt;code&gt;return&lt;/code&gt; statement in the penultimate line.&lt;/p&gt;

&lt;p&gt;Below code shows event removal based on a simple check like event name match but more complex logic involving checking the presence of value for a related attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//remove events of a certain type if related property value does not satisfy the pre-defined condition&lt;/span&gt;
&lt;span class="c1"&gt;//in this example, if 'total_payment' for a 'spin' event is null or 0, then it would be removed.&lt;/span&gt;
        &lt;span class="c1"&gt;//Only non-null, non-zero 'spin' events would be considered&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nonSpinAndSpinPayerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filteredEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// spin events&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the above examples, you can use the filtered array available as output from one step as the input to the next. As a result, you can daisy-chain the transformation conditions.&lt;/p&gt;

&lt;p&gt;Finally, the following code shows how you can prepare aggregates for specific attributes across events of a particular type present in a batch. After this, the code returns a single event of the concerned type. Also, the code returns the aggregated values for the corresponding attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//remove events of a certain type if related property value does not satisfy the pre-defined condition&lt;/span&gt;
&lt;span class="c1"&gt;//in this example, if 'total_payment' for a 'spin' event is null or 0, then it would be removed.&lt;/span&gt;
        &lt;span class="c1"&gt;//Only non-null, non-zero 'spin' events would be considered&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nonSpinAndSpinPayerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filteredEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// spin events&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; 
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total_payments&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In the above snippet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First, the code collects the &lt;code&gt;spin_result&lt;/code&gt; events into an array.&lt;/li&gt;
&lt;li&gt;  Then, the code aggregates the values for three attributes -- &lt;code&gt;bet_amount&lt;/code&gt;, &lt;code&gt;win_amount&lt;/code&gt;, and &lt;code&gt;no_of_spin&lt;/code&gt; by iterating over the elements of the above array.&lt;/li&gt;
&lt;li&gt;  After this, the system assigns the aggregated values to the respective attributes of the first &lt;code&gt;spin_result&lt;/code&gt; event in the array.&lt;/li&gt;
&lt;li&gt;  Now, the code separates the events that are not of the target type (&lt;code&gt;spin_result&lt;/code&gt; in this case) into another array. If there were no such events, an empty array is created.&lt;/li&gt;
&lt;li&gt;  Finally, the system adds the &lt;code&gt;single spin_result&lt;/code&gt; event to the array created in the previous step, and the result is returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>eventfiltering</category>
      <category>valueaggregation</category>
      <category>eventdata</category>
      <category>rudderstack</category>
    </item>
    <item>
      <title>Creating Super Buttons for Like, Share and Subscribe</title>
      <author>Mohit Maroliya</author>
      <pubDate>Tue, 07 Dec 2021 12:46:59 +0000</pubDate>
      <link>https://dev.to/mohitm15/creating-super-buttons-for-like-share-and-subscribe-gef</link>
      <guid>https://dev.to/mohitm15/creating-super-buttons-for-like-share-and-subscribe-gef</guid>
      <description>&lt;p&gt;Whenever you watches any YouTube video, I'm sure you have come across the terms &lt;code&gt;Like&lt;/code&gt;, &lt;code&gt;Share&lt;/code&gt; and &lt;code&gt;Subscribe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I wanted to create a cool &lt;code&gt;html-css&lt;/code&gt; button that represents the feeling of Like-Share-Subscribe.&lt;/p&gt;

&lt;p&gt;For this we require a html file &lt;code&gt;index.html&lt;/code&gt;, css file &lt;code&gt;style.css&lt;/code&gt; and javaScript file &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The end result for &lt;code&gt;Like&lt;/code&gt; button is like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/fill-heart-ldp1v"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-input-structure"&gt;
  &lt;/a&gt;
  Setting up the input structure
&lt;/h2&gt;

&lt;p&gt;Lets get started by setting up the basic structure. We had used &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt; of type &lt;code&gt;checkbox&lt;/code&gt; here which is also known as &lt;code&gt;toggle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So for our &lt;code&gt;index.html&lt;/code&gt; file, all we need is the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
    &amp;lt;label id="Likebtn" for="myBtn" class="star-button" onclick="fillheart()"&amp;gt;
      &amp;lt;input type="checkbox" id="myBtn" /&amp;gt;
      &amp;lt;div class="heart"&amp;gt;
        &amp;lt;i id="un-filled-heart" class="far fa-heart"&amp;gt;&amp;lt;/i&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="btn-text"&amp;gt;
        &amp;lt;span&amp;gt;Like&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;Liked&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="active-heart"&amp;gt;
        &amp;lt;i class="fas fa-heart"&amp;gt;&amp;lt;/i&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/label&amp;gt;
    &amp;lt;br /&amp;gt;
    &amp;lt;script src="src/index.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: just define the fillheart() function with a console.log statement as of now in &lt;code&gt;index.js&lt;/code&gt; or under &lt;code&gt;script&lt;/code&gt; tag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since, we have defined the &lt;code&gt;ids&lt;/code&gt; and &lt;code&gt;classes&lt;/code&gt; for the html components, so now its time to add some styling and animations to them. 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-styles"&gt;
  &lt;/a&gt;
  Adding the Styles
&lt;/h2&gt;

&lt;p&gt;We first add styling to input checkbox, label (&lt;em&gt;star-button&lt;/em&gt;) and the icon.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I have used the &lt;code&gt;cdn&lt;/code&gt; link of &lt;strong&gt;FontAwesome&lt;/strong&gt; to use the icons. Check &lt;a href="https://fontawesome.com/v5.15/how-to-use/customizing-wordpress/snippets/setup-cdn-webfont"&gt;here&lt;/a&gt; for the cdn link.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  height: 50vh;
  display: grid;
  place-items: center;
  overflow: hidden;
  background: rgb(218, 216, 216);
}

input {
  display: none;
}

.star-button {
  position: relative;
  width: 250px;
  height: 85px;
  margin-top: 70px;
  border-radius: 15px;
  cursor: pointer;
  background: rgb(255, 255, 255);
  z-index: 2;
  box-shadow: 0 5px 5px rgba(0, 0, 0, 0.096);
}

.heart {
  position: absolute;
  left: 15%;
  top: 55%;
  font-size: 45px;
  transform: translateY(-50%);
  color: rgb(196, 196, 196);
  z-index: 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we add some styling to the text over the button and on the span component of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.btn-text {
  position: absolute;
  left: 50%;
  width: 130px;
  height: 100%;
  background: rgb(228, 51, 66);
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  border-radius: 15px;
  overflow-x: hidden;
}

.btn-text span{
  color: rgb(255, 255, 255);
  transform: translateX(55%);
  font-size: 35px;
  padding: 20px;
  font-family: "sans-serif";
  transition: 0.2s;
  user-select: none;
}

.active-heart {
  position: absolute;
  right: 15%;
  top: 20%;
  font-size: 50px;
  z-index: -1;
  color: rgb(219, 219, 219);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we add the styling to all the corresponding components when the &lt;em&gt;input checkbox is checked.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;input:checked + .heart {
  animation: move 0.7s ease-in forwards;
  color: rgb(228, 51, 66);
}

input:checked ~ .active-heart {
  color: rgb(228, 51, 66);
  transition-delay: 0.7s;
  animation: shake 0.8s 0.2s forwards;
  animation-delay: 0.7s;
}

input:checked ~ .btn-text span {
  transform: translateX(-45%);
  transition-delay: 0.7s;
}

input:checked ~ .btn-text {
  left: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you observed that we have used two types of animation named &lt;code&gt;move&lt;/code&gt; and &lt;code&gt;shake&lt;/code&gt; for the icon heart. So now we define the above-mentioned animation using &lt;a href="https://www.w3schools.com/cssref/css3_pr_animation-keyframes.asp"&gt;keyframes&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#move-animation"&gt;
  &lt;/a&gt;
  move animation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes move {
  10% {
    transform: translateX(-330%) scale(1.2);
    left: 20%;
    opacity: 1;
  }
  30% {
    transform: translateY(150%);
  }
  50% {
    transform: translateX(300%);
    opacity: 1;
  }
  75% {
    transform: translateY(200%);
    left: 65%;
    opacity: 1;
  }
  85% {
    left: 70%;
  }
  100% {
    transform: translateY(-600%);
    left: 70%;
    opacity: 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shake-animation"&gt;
  &lt;/a&gt;
  shake animation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes shake {
  0% {
    transform: scale3d(1, 1, 1);
    text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
  }
  30% {
    transform: scale3d(1.25, 0.75, 1);
    text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
  }
  40% {
    transform: scale3d(0.75, 1.25, 1);
    text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
  }
  50% {
    transform: scale3d(1.15, 0.85, 1);
    text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff;
  }
  65% {
    transform: scale3d(0.95, 1.05, 1);
    text-shadow: 0 0 2px #ff0000, 0 0 5px #0000ffb7;
  }
  75% {
    transform: scale3d(1.05, 0.95, 1);
    text-shadow: 0 0 1px #ff0000, 0 0 5px #0000ff83;
  }
  100% {
    transform: scale3d(1, 1, 1);
    text-shadow: 0 0 1px rgb(153, 151, 151), 0 0 5px rgb(174, 174, 179);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we only left to add javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-javascript-logic"&gt;
  &lt;/a&gt;
  Adding JavaScript Logic
&lt;/h2&gt;

&lt;p&gt;Either create a seperate &lt;code&gt;index.js&lt;/code&gt; file or write within &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; in index.html .&lt;/p&gt;

&lt;p&gt;Add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let myBtn = document.getElementById("myBtn");

    function fillheart() {
      if (myBtn.checked === 1) {
        document
          .getElementById("un-filled-heart")
          .setAttribute("class", "fas fa-heart");
      } else {
        document
          .getElementById("un-filled-heart")
          .setAttribute("class", "far fa-heart");
      }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Cheers! 🍻, you have build the &lt;code&gt;SuperLike&lt;/code&gt; button. &lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/fill-heart-ldp1v"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now you can come up with as many stylings to this small application. You can take up some challenges by making &lt;code&gt;SuperShare&lt;/code&gt; and &lt;code&gt;SuperSubcribe&lt;/code&gt; button as given below. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supershare"&gt;
  &lt;/a&gt;
  SuperShare
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/delicate-feather-bvu7b"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supersubscribe"&gt;
  &lt;/a&gt;
  SuperSubscribe
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/subscribe-button-roukv"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you for your time. Since this is my second post, please share your valuable feedback in comments also.&lt;/p&gt;

&lt;p&gt;Happy Coding ! ☘️&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 10 DevOps Tools You Should Know</title>
      <author>Kuldeep Tarapara</author>
      <pubDate>Tue, 07 Dec 2021 12:31:40 +0000</pubDate>
      <link>https://dev.to/kuldeeptarapara/top-10-devops-tools-you-should-know-4nb8</link>
      <guid>https://dev.to/kuldeeptarapara/top-10-devops-tools-you-should-know-4nb8</guid>
      <description>&lt;p&gt;DevOps is a method to integrate IT operations and software development. So, in this article, we will see the Top 10 DevOps Tools You Should Know for Flutter App Development.&lt;/p&gt;

&lt;p&gt;Top 10 DevOps Tools You Should Know.&lt;br&gt;
DevOps allows businesses to use automation to release new software and make changes to their users as soon as possible. Due to the rapid adoption of DevOps practices, the demand for DevOps tools is very high. DevOps software tools ensure that automation, transparency, and collaboration are top priorities.&lt;/p&gt;

&lt;p&gt;These tools provide teams with a variety of options for efficiently sharing and exchanging data and technical knowledge among all involved parties in order to develop efficient products. Nowadays, many DevOps automation tools are available to suit your DevOps needs. Take a look at these important DevOps automation tools for 2021!&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;Kubernetes or K8s&lt;/strong&gt;&lt;br&gt;
Kubernetes is an open-source system to automate the deployment, scaling, and management of containerized applications. This open-source system treats containers extensively and seeks to take containerization to another level. Manage containerized apps in logical units to facilitate discovery and management, scaling, and deployment automation.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;Docker&lt;/strong&gt;&lt;br&gt;
Docker is a lightweight DevOps tool that uses a combination of methods to simplify and accelerate various SDLC workflows. A Docker container image is an applicable standalone package that contains everything you need to run your app. You can access the container using the Docker Engine. This allows the app to run in a remote environment.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Nagios&lt;/strong&gt;&lt;br&gt;
This is another popular DevOps tool that acts as a watchdog for your infrastructure and your entire system. The IT infrastructure monitoring team uses Nagios to troubleshoot infrastructure-related issues and provide solutions before the team is at risk. Therefore, monitor databases, networks, logs, apps, and event logs.&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;Ansible&lt;/strong&gt;&lt;br&gt;
This tool was developed for automation processes and collaboration. Increase productivity by helping you integrate and automate testing, development, performance management, and deployment. Ansible makes it easy to automate the entire IT process and app lifecycle. Ansible contains several modules to enable various apps. You can avoid complexity at all stages.&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;Git&lt;/strong&gt;&lt;br&gt;
Git is one of the most affordable tools for open-source workers and remote teams. It is also one of the most popular and widely used DevOps tools. This is a distributed source code management (SCM) tool that developers can use to track the progress of app development by maintaining different source code versions.&lt;/p&gt;

&lt;p&gt;Developers can easily revert to previous versions if needed. BitBucket and GitHub are currently two popular hosting services in Git repositories. BitBucket provides an unlimited private repository for teams of up to 5 members. GitHub, on the other hand, only provides free access to public repositories.&lt;/p&gt;

&lt;p&gt;6) &lt;strong&gt;Puppet&lt;/strong&gt;&lt;br&gt;
This open-source tool is designed to quickly monitor, manage, and maintain your infrastructure. As the most successful cross-platform configuration management tool, Puppet can be deployed safely and quickly. It’s also the perfect DevOps program for handling multiple servers.&lt;/p&gt;

&lt;p&gt;The puppet contains a master/slave infrastructure. It allows you to manage many resources and teams. Includes various modules that facilitate problem management and combine with other popular DevOps tools. By treating the entire infrastructure as code, Puppet can automate infrastructure management.&lt;/p&gt;

&lt;p&gt;7) &lt;strong&gt;Selenium&lt;/strong&gt;&lt;br&gt;
Selenium is primarily used to automate web-based apps. You can automate testing and management tasks for web-based apps. It consists of three main components.&lt;/p&gt;

&lt;p&gt;Grid Run tests on different devices to extend your testing work and handle many environments from the core.&lt;br&gt;
IDE is a Firefox and Chrome add-on that makes it easy to record and play browser actions.&lt;br&gt;
You can create your own browser-based regression automation suite to help you examine WebDriver scripts and distribute them to multiple sources.&lt;br&gt;
8) &lt;strong&gt;Prometheus&lt;/strong&gt;&lt;br&gt;
Prometheus is an open-source community-driven toolkit for monitoring systems and performance. It is based on a time-series data model and generates warnings based on this. In addition, it also supports container monitoring. The Prometheus monitoring process is widely used by the entire DevOps team and cloud organizations.&lt;/p&gt;

&lt;p&gt;9) &lt;strong&gt;Splunk&lt;/strong&gt;&lt;br&gt;
This DevOps tool provides a great analytical solution with a functional understanding that gives the DevOps team operational awareness. This allows you to compare logs from various sources such as devices, websites, and applications that are part of your entire IT infrastructure to identify problems. Splunk is the perfect platform for a smooth entry into IoT integration. It collects and interprets data and provides insights to help you make systematic business decisions.&lt;/p&gt;

&lt;p&gt;10) &lt;strong&gt;Jenkins&lt;/strong&gt;&lt;br&gt;
Jenkins is a persistent built-in server tool that you can use to run various jobs repeatedly. This software is provided on the main server where the software development takes place. As the leading open source automation server, the Jenkins automation engine allows DevOps teams to easily access and integrate project changes and quickly identify problems. Jenkins is tailored for projects of all sizes and complexity. Written in Java. Jenkins has hundreds of add-ons and plugins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;br&gt;
There are many DevOps tools are available for DevOps development. In this article, we have listed the Top 10 DevOps Tools You Should Know. The choice of tool which you want to choose will depend on the teams involved and the environment.&lt;/p&gt;

&lt;p&gt;Do let us know your feedback/comments on the same. Flutter Agency is the best &lt;a href="https://flutteragency.com/"&gt;&lt;strong&gt;Flutter App development company&lt;/strong&gt;&lt;/a&gt; dedicated to Flutter Technology and Flutter Developers. The portal is full of cool resources from Flutter like Flutter Widget Guide, Flutter Projects, Code libs and etc. So, contact us for your next project.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>splunk</category>
      <category>flutter</category>
    </item>
    <item>
      <title>How to join MySQL and Postgres in a live materialized view</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 07 Dec 2021 12:27:48 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/how-to-join-mysql-and-postgres-in-a-live-materialized-view-5864</link>
      <guid>https://dev.to/bobbyiliev/how-to-join-mysql-and-postgres-in-a-live-materialized-view-5864</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a self-contained demo using &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This demo would show you how to use Materialize to join MySQL and Postgres in a live materialized view. &lt;/p&gt;

&lt;p&gt;For this demo, we are going to monitor the orders on our demo website and generate events that could, later on, be used to send notifications when a cart has been abandoned for a long time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lUmRZ6JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/143267063-2dbb1ec2-d48d-4ba5-8da8-f0d9ac1404e4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUmRZ6JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/143267063-2dbb1ec2-d48d-4ba5-8da8-f0d9ac1404e4.png" alt="mz-abandoned-cart-demo" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before you get started, you need to make sure that you have Docker and Docker Compose installed.&lt;/p&gt;

&lt;p&gt;You can follow the steps here on how to install Docker:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://materialize.com/docs/third-party/docker/"&gt;Installing Docker&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;As shown in the diagram above we will have the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A mock service to continually generate orders.&lt;/li&gt;
&lt;li&gt;The orders would be stored in a MySQL database.&lt;/li&gt;
&lt;li&gt;As the database writes occur, Debezium streams the changes out of MySQL to a Redpanda topic.&lt;/li&gt;
&lt;li&gt;We also would have a Postgres database where we would get our users from.&lt;/li&gt;
&lt;li&gt;We would then ingest this Redpanda topic into Materialize directly along with the users from the Postgres database.&lt;/li&gt;
&lt;li&gt;In Materialize we will join our orders and users together, do some filtering and create a materialized view that shows the abandoned cart information.&lt;/li&gt;
&lt;li&gt;We will then create a sink to send the abandoned cart data out to a new Redpanda topic.&lt;/li&gt;
&lt;li&gt;You could, later on, use the information from that new topic to send out notifications to your users and remind them that they have an abandoned cart.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;As a side note here, you would be perfectly fine using Kafka instead of Redpanda. I just like the simplicity that Redpanda brings to the table, as you can run a single Redpanda instance instead of all of the Kafka components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#running-the-demo"&gt;
  &lt;/a&gt;
  Running the demo
&lt;/h2&gt;

&lt;p&gt;First, start by cloning the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bobbyiliev/mz-abandoned-cart-demo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that you can access the directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd mz-abandoned-cart-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start by first running the Redpanda container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d redpanda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build the images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, start all of the services:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to Launch the Materialize CLI, you can run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose run mzcli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This is just a shortcut to a docker container with &lt;code&gt;postgres-client&lt;/code&gt; pre-installed, if you already have &lt;code&gt;psql&lt;/code&gt; you could run &lt;code&gt;psql -U materialize -h localhost -p 6875 materialize&lt;/code&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#create-a-materialize-kafka-source"&gt;
  &lt;/a&gt;
  Create a Materialize Kafka Source
&lt;/h3&gt;

&lt;p&gt;Now that you're in the Materialize CLI, let's define the &lt;code&gt;orders&lt;/code&gt; tables in the &lt;code&gt;mysql.shop&lt;/code&gt; database as Redpanda sources:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;KAFKA&lt;/span&gt; &lt;span class="n"&gt;BROKER&lt;/span&gt; &lt;span class="s1"&gt;'redpanda:9092'&lt;/span&gt; &lt;span class="n"&gt;TOPIC&lt;/span&gt; &lt;span class="s1"&gt;'mysql.shop.orders'&lt;/span&gt;
&lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="n"&gt;AVRO&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;CONFLUENT&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt; &lt;span class="n"&gt;REGISTRY&lt;/span&gt; &lt;span class="s1"&gt;'http://redpanda:8081'&lt;/span&gt;
&lt;span class="n"&gt;ENVELOPE&lt;/span&gt; &lt;span class="n"&gt;DEBEZIUM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you were to check the available columns from the &lt;code&gt;orders&lt;/code&gt; source by running the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="n"&gt;COLUMNS&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would be able to see that, as Materialize is pulling the message schema data from the Redpanda registry, it knows the column types to use for each attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;    &lt;span class="n"&gt;name&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;nullable&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="k"&gt;type&lt;/span&gt;
&lt;span class="c1"&gt;--------------+----------+-----------&lt;/span&gt;
 &lt;span class="n"&gt;id&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;
 &lt;span class="n"&gt;user_id&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;
 &lt;span class="n"&gt;order_status&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt;
 &lt;span class="n"&gt;price&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;
 &lt;span class="n"&gt;created_at&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
 &lt;span class="n"&gt;updated_at&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;timestamp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-materialized-views"&gt;
  &lt;/a&gt;
  Create materialized views
&lt;/h3&gt;

&lt;p&gt;Next, we will create our first Materialized View, to get all of the data from the &lt;code&gt;orders&lt;/code&gt; Redpanda source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;orders_view&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;abandoned_orders&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;order_status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;revenue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;orders_view&lt;/span&gt;
    &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;order_status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now use &lt;code&gt;SELECT * FROM abandoned_orders;&lt;/code&gt; to see the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;abandoned_orders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more information on creating materialized views, check out the &lt;a href="https://materialize.com/docs/sql/create-materialized-view/"&gt;Materialized Views&lt;/a&gt; section of the Materialize documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-postgres-source"&gt;
  &lt;/a&gt;
  Create Postgres source
&lt;/h3&gt;

&lt;p&gt;There are two ways to create a Postgres source in Materialize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using Debezium just like we did with the MySQL source.&lt;/li&gt;
&lt;li&gt;Using the Postgres Materialize Source, which allows you to connect Materialize direct to Postgres so you don't have to use Debezium.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this demo, we will use the Postgres Materialize Source just as a demonstration on how to use it, but feel free to use Debezium instead.&lt;/p&gt;

&lt;p&gt;To create a Postgres Materialize Source run the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="nv"&gt;"mz_source"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;POSTGRES&lt;/span&gt;
&lt;span class="k"&gt;CONNECTION&lt;/span&gt; &lt;span class="s1"&gt;'user=postgres port=5432 host=postgres dbname=postgres password=postgres'&lt;/span&gt;
&lt;span class="n"&gt;PUBLICATION&lt;/span&gt; &lt;span class="s1"&gt;'mz_source'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick rundown of the above statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MATERIALIZED&lt;/code&gt;: Materializes the PostgreSQL source’s data. All of the data is retained in memory and makes sources directly selectable.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mz_source&lt;/code&gt;: The name for the PostgreSQL source.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CONNECTION&lt;/code&gt;: The PostgreSQL connection parameters.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUBLICATION&lt;/code&gt;: The PostgreSQL publication, containing the tables to be streamed to Materialize.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we've created the PostgreSQL source, in order to be able to query the PostgreSQL tables, we would need to create views that represent the upstream publication’s original tables. In our case, we only have one table called &lt;code&gt;users&lt;/code&gt; so the statement that we would need to run is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;VIEWS&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;mz_source&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the available views execute the following statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;FULL&lt;/span&gt; &lt;span class="n"&gt;VIEWS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is done, you can query the new views directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's go ahead and create a few more views.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-kafka-sink"&gt;
  &lt;/a&gt;
  Create Kafka sink
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://materialize.com/docs/sql/create-sink/"&gt;Sinks&lt;/a&gt; let you send data from Materialize to an external source.&lt;/p&gt;

&lt;p&gt;For this Demo, we will be using &lt;a href="https://materialize.com/docs/third-party/redpanda/"&gt;Redpanda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redpanda is a Kafka API-compatible and Materialize can process data from it just as it would process data from a Kafka source.&lt;/p&gt;

&lt;p&gt;Let's create a materialized view, that will hold all of the high volume unpaid orders:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;high_value_orders&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
      &lt;span class="k"&gt;SELECT&lt;/span&gt;
        &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;abandoned_orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;revenue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;abandoned_orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;
      &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
      &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;abandoned_orders&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;abandoned_orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
      &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
      &lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="n"&gt;revenue&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, here we are actually joining the &lt;code&gt;users&lt;/code&gt; view which is ingesting the data directly from our Postgres source, and the &lt;code&gt;abandond_orders&lt;/code&gt; view which is ingesting the data from the Redpanda topic, together.&lt;/p&gt;

&lt;p&gt;Let's create a Sink where we will send the data of the above materialized view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;SINK&lt;/span&gt; &lt;span class="n"&gt;high_value_orders_sink&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;high_value_orders&lt;/span&gt;
    &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;KAFKA&lt;/span&gt; &lt;span class="n"&gt;BROKER&lt;/span&gt; &lt;span class="s1"&gt;'redpanda:9092'&lt;/span&gt; &lt;span class="n"&gt;TOPIC&lt;/span&gt; &lt;span class="s1"&gt;'high-value-orders-sink'&lt;/span&gt;
    &lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="n"&gt;AVRO&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt;
    &lt;span class="n"&gt;CONFLUENT&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt; &lt;span class="n"&gt;REGISTRY&lt;/span&gt; &lt;span class="s1"&gt;'http://redpanda:8081'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you were to connect to the Redpanda container and use the &lt;code&gt;rpk topic consume&lt;/code&gt; command, you will be able to read the records from the topic.&lt;/p&gt;

&lt;p&gt;However, as of the time being, we won’t be able to preview the results with &lt;code&gt;rpk&lt;/code&gt; because it’s AVRO formatted. Redpanda would most likely implement this in the future, but for the moment, we can actually stream the topic back into Materialize to confirm the format.&lt;/p&gt;

&lt;p&gt;First, get the name of the topic that has been automatically generated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;mz_kafka_sinks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;                              &lt;span class="n"&gt;topic&lt;/span&gt;
&lt;span class="c1"&gt;-----------------------------------------------------------------&lt;/span&gt;
 &lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1637586945&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;13670686352905873426&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For more information on how the topic names are generated check out the documentation &lt;a href="https://materialize.com/docs/sql/create-sink/#kafka-sinks"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then create a new Materialized Source from this Redpanda topic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;MATERIALIZED&lt;/span&gt; &lt;span class="k"&gt;SOURCE&lt;/span&gt; &lt;span class="n"&gt;high_volume_orders_test&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;KAFKA&lt;/span&gt; &lt;span class="n"&gt;BROKER&lt;/span&gt; &lt;span class="s1"&gt;'redpanda:9092'&lt;/span&gt; &lt;span class="n"&gt;TOPIC&lt;/span&gt; &lt;span class="s1"&gt;' high-volume-orders-sink-u12-1637586945-13670686352905873426'&lt;/span&gt;
&lt;span class="n"&gt;FORMAT&lt;/span&gt; &lt;span class="n"&gt;AVRO&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;CONFLUENT&lt;/span&gt; &lt;span class="k"&gt;SCHEMA&lt;/span&gt; &lt;span class="n"&gt;REGISTRY&lt;/span&gt; &lt;span class="s1"&gt;'http://redpanda:8081'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure to change the topic name accordingly!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, query this new materialized view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;high_volume_orders_test&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have the data in the topic, you can have other services connect to it and consume it and then trigger emails or alerts for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metabase"&gt;
  &lt;/a&gt;
  Metabase
&lt;/h2&gt;

&lt;p&gt;In order to access the &lt;a href="https://materialize.com/docs/third-party/metabase/"&gt;Metabase&lt;/a&gt; instance visit &lt;code&gt;http://localhost:3030&lt;/code&gt; if you are running the demo locally or &lt;code&gt;http://your_server_ip:3030&lt;/code&gt; if you are running the demo on a server. Then follow the steps to complete the Metabase setup.&lt;/p&gt;

&lt;p&gt;Make sure to select Materialize as the source of the data.&lt;/p&gt;

&lt;p&gt;Once ready you will be able to visualize your data just as you would with a standard PostgreSQL database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stopping-the-demo"&gt;
  &lt;/a&gt;
  Stopping the Demo
&lt;/h2&gt;

&lt;p&gt;To stop all of the services run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker-compose down
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, this is a very simple example of how to use Materialize. You can use Materialize to ingest data from a variety of sources and then stream it to a variety of destinations.&lt;/p&gt;

&lt;p&gt;As a second part of this demo, we will build upon the current demo and add more functionality to make represent a more realistic eCommerce website and a more realistic data pipeline.&lt;/p&gt;

&lt;p&gt;To learn more about SQL, I could suggest this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;Introduction to SQL eBook&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-resources"&gt;
  &lt;/a&gt;
  Helpful resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/postgres/"&gt;&lt;code&gt;CREATE SOURCE: PostgreSQL&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-source/"&gt;&lt;code&gt;CREATE SOURCE&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/create-views"&gt;&lt;code&gt;CREATE VIEWS&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materialize.com/docs/sql/select"&gt;&lt;code&gt;SELECT&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>database</category>
      <category>mysql</category>
      <category>postgres</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Using Elixir's "with" statement.</title>
      <author>Martin Nijboer</author>
      <pubDate>Tue, 07 Dec 2021 12:22:04 +0000</pubDate>
      <link>https://dev.to/martinthenth/using-elixirs-with-statement-5e36</link>
      <guid>https://dev.to/martinthenth/using-elixirs-with-statement-5e36</guid>
      <description>&lt;p&gt;Elixir has many features to make code readable, maintainable, and correct. One of them is the &lt;code&gt;with&lt;/code&gt; statement.   Unfortunately, the &lt;code&gt;with&lt;/code&gt; statement can be confusing to work with, because there are some hidden assumptions on how it's used.&lt;/p&gt;

&lt;p&gt;Today I will introduce you to why, where, and when you would want to use a &lt;code&gt;with&lt;/code&gt; statement, and how you can deal with some of the challenges and underlying assumptions. Additionally, you'll read about a readability and differentiation trick using annotation tuples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-worst%C2%A0case"&gt;
  &lt;/a&gt;
  1. The worst "case".
&lt;/h2&gt;

&lt;p&gt;The use-case for &lt;code&gt;with&lt;/code&gt; statements is apparent when we look at the worst &lt;code&gt;case&lt;/code&gt; statement implementation. Nesting &lt;code&gt;case&lt;/code&gt; statements quickly leads to a pyramid of unreadable code (literally! tilt your head 90°):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;EmailConfirmations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailConfirmation&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
              &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;...&lt;/span&gt;

                      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                        &lt;span class="ss"&gt;:error&lt;/span&gt;
                    &lt;span class="k"&gt;end&lt;/span&gt;

                  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="ss"&gt;:error&lt;/span&gt;
                &lt;span class="k"&gt;end&lt;/span&gt;

              &lt;span class="n"&gt;_email_address&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class="ss"&gt;:error&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;

          &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="ss"&gt;:error&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="ss"&gt;:error&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="ss"&gt;:error&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What this code does well, is matching all possible returns from every function that is called; therefore the code is correct.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What this code does badly, is it's unreadable for you, me, and any other developer looking at it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need something better to maintain readability, while keeping the case statement's functionality and correctness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-simple-with-statements"&gt;
  &lt;/a&gt;
  2. Simple "with" statements.
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;with&lt;/code&gt; statements work like &lt;code&gt;case&lt;/code&gt; statements, but with a focus on successful function call results. The following statements are equivalent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see some examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-handling-of-nonmatching-results"&gt;
  &lt;/a&gt;
  Implicit  handling of non-matching results.
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;with&lt;/code&gt; statements do not need to handle non-matching clauses. Instead, the &lt;code&gt;with&lt;/code&gt; statement will return the non-matching clause directly to the parent scope.&lt;/p&gt;

&lt;p&gt;The Phoenix framework comes with context generators that will output controller functions with &lt;code&gt;with&lt;/code&gt; statements like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;      
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:accepted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"show.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the function &lt;code&gt;Users.create_user/1&lt;/code&gt; can return either &lt;code&gt;{:ok, user}&lt;/code&gt; or &lt;code&gt;{:error, changeset}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, the clause &lt;code&gt;{:error, changeset}&lt;/code&gt; is not caught in the &lt;code&gt;with&lt;/code&gt; statement. Let's see what this &lt;code&gt;with&lt;/code&gt; statement does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the expected clause matches, because it is &lt;code&gt;{:ok, user}&lt;/code&gt;, we continue with the function inside the &lt;code&gt;with&lt;/code&gt; statement and &lt;code&gt;user&lt;/code&gt; is available within the scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the expected clause does not match, for example we receive &lt;code&gt;{:error, changeset}&lt;/code&gt;, then the result is immediately returned to the parent scope (i.e. &lt;code&gt;create/2&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the function &lt;code&gt;create/2&lt;/code&gt; returns either the result of the successful clause (an updated &lt;code&gt;conn&lt;/code&gt;) or &lt;code&gt;{:error, changeset}&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explicit-handling-of-nonmatching-results"&gt;
  &lt;/a&gt;
  Explicit handling of non-matching results.
&lt;/h3&gt;

&lt;p&gt;We can explicitly handle the non-matching clauses in a &lt;code&gt;with&lt;/code&gt; statement by using the &lt;code&gt;else&lt;/code&gt; clause. The &lt;code&gt;else&lt;/code&gt; clause requires us to pattern match on &lt;strong&gt;all non-matching results&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;      
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;put_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:accepted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"show.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;user:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This does the same as the previous example. It will return either the result of the successful clause (an updated &lt;code&gt;conn&lt;/code&gt;) or &lt;code&gt;{:error, changeset}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because we are explicitly handling non-matching clauses, we must add pattern matches for &lt;strong&gt;all non-matching clauses&lt;/strong&gt; in the &lt;code&gt;else&lt;/code&gt; block. If we miss a returned clause, we will receive a &lt;code&gt;** (WithClauseError) no with clause matching&lt;/code&gt; error.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is the reason why Dialyzer will complain "The pattern can never match the type", because if a returned clause is not explicitly handled, it may crash the process at runtime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-chained-functions-in-with-statements"&gt;
  &lt;/a&gt;
  3. Chained functions in "with" statements.
&lt;/h2&gt;

&lt;p&gt;Chaining function calls in a &lt;code&gt;with&lt;/code&gt; statement is fairly straightforward. We can rewrite the "case pyramid" from the introduction by chaining the consecutive expressions in a &lt;code&gt;with&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Returns `...` or `:error`&lt;/span&gt;
&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailConfirmation&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailConfirmations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much cleaner and shorter than the original. And with syntax-highlighting in an IDE, this code will be much more readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges.
&lt;/h3&gt;

&lt;p&gt;In the previous examples, we always return &lt;code&gt;:error&lt;/code&gt; when a function call does not return the desired result. But this is rarely what we want in practice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We may want to differentiate between similar clauses in the &lt;code&gt;else&lt;/code&gt; block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to handle &lt;strong&gt;all non-matching clauses&lt;/strong&gt; in the &lt;code&gt;else&lt;/code&gt; block, of &lt;strong&gt;every chained function call&lt;/strong&gt;, or we will introduce app-crashing bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dialyzer will definitely complain if any of the functions does not return an expected clause (i.e. &lt;code&gt;:error&lt;/code&gt; in this example).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-advanced-with-statements"&gt;
  &lt;/a&gt;
  4. Advanced "with" statements.
&lt;/h2&gt;

&lt;p&gt;Let's add custom error-handling, differentiation of function calls and results, and readability improvements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-errorhandling"&gt;
  &lt;/a&gt;
  Custom error-handling.
&lt;/h3&gt;

&lt;p&gt;Let's introduce some custom error-handling to the rewritten "case pyramid"in a &lt;code&gt;with&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailConfirmation&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailConfirmations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bad_request&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:not_found&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailAddress&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:conflict&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now we can return different error messages depending on  which non-matching clause is returned.&lt;/p&gt;

&lt;p&gt;But what if the &lt;code&gt;with&lt;/code&gt; statement has multiple functions that return the same non-matching results, and we want to handle each return differently?&lt;/p&gt;

&lt;p&gt;For example, when two functions can return &lt;code&gt;false&lt;/code&gt;, and one version must return &lt;code&gt;{:error, :bad_request}&lt;/code&gt;, and the other must return &lt;code&gt;{:error, :conflict}&lt;/code&gt;, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="no"&gt;false&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;# Return either '{:error, :bad_request} or '{:error, :conflict}'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how we can differentiate the returned &lt;code&gt;false&lt;/code&gt; clause.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#differentiating-nonmatching-clauses"&gt;
  &lt;/a&gt;
  Differentiating non-matching clauses.
&lt;/h3&gt;

&lt;p&gt;We can use a simple mathematical trick to differentiate the returned results. If &lt;code&gt;x * y = z&lt;/code&gt;, then &lt;code&gt;x * y + c = z + c&lt;/code&gt; must be true as well. Therefore we can add some annotation tuples to the function calls and clauses, and write the previous example as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bad_request&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:conflict&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using tuples on both sides of the function calls, we can differentiate the returning values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improving-readability-for-large-with-statements"&gt;
  &lt;/a&gt;
  Improving readability for large "with" statements.
&lt;/h3&gt;

&lt;p&gt;We can improve readability of large &lt;code&gt;with&lt;/code&gt; statements by using the trick from the previous section. That is, by annotating function calls and pattern matches in the &lt;code&gt;with&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; block with tuples.&lt;/p&gt;

&lt;p&gt;Let's rewrite the "case pyramid" &lt;code&gt;with&lt;/code&gt; statement with annotation tuples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_email_address?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:is_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:confirmation_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailConfirmation&lt;/span&gt;&lt;span class="p"&gt;{}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:confirmation_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;EmailConfirmations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:user_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:user_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email_address&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;EmailAddresses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_email_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bad_request&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:confirmation_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:not_found&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:email_fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;EmailAddress&lt;/span&gt;&lt;span class="p"&gt;{}}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:conflict&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;changeset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this &lt;code&gt;with&lt;/code&gt; statement we chain six functions, and add the following tuples to make the code more readable: &lt;code&gt;{:is_email, _}&lt;/code&gt;, &lt;code&gt;{:is_code, _}&lt;/code&gt;, &lt;code&gt;{:confirmation_fetch, _}&lt;/code&gt;, &lt;code&gt;{:email_fetch, _}&lt;/code&gt;, &lt;code&gt;{:user_create, _}&lt;/code&gt;, and &lt;code&gt;{:email_create, _}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once again, in an IDE with syntax-highlighting this will look much better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-common-issues-and-how-to-solve%C2%A0them"&gt;
  &lt;/a&gt;
  5. Common issues and how to solve them.
&lt;/h2&gt;

&lt;p&gt;Be mindful of all the possible returned values from the functions you call in a &lt;code&gt;with&lt;/code&gt; statement. Properly handling matching and non-matching clauses will solve most of your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use formatting to make &lt;code&gt;with&lt;/code&gt; blocks more readable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;code&gt;else&lt;/code&gt; block in a with statement to handle non-matching results manually.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always pattern match &lt;strong&gt;all possible returned non-matching values&lt;/strong&gt; in &lt;code&gt;else&lt;/code&gt; blocks to prevent app-crashing bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use pattern matches on structs. For example &lt;code&gt;with %User{is_banned: false} &amp;lt;- Users.get_user(id) do&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To differentiate function calls and results, annotate the function call and their results with tuples (e.g. &lt;code&gt;{:is_email, true}&lt;/code&gt; and &lt;code&gt;{:is_available, true}&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make large &lt;code&gt;with&lt;/code&gt; statements more readable, consider annotating function calls and their results with tuples (e.g. &lt;code&gt;{:user_fetch, user}&lt;/code&gt; and &lt;code&gt;{:user_update, updated_user}&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dialyzer may show the warning &lt;code&gt;"The pattern can never match the type"&lt;/code&gt;. This means you've missed a result from one (or multiple) of the called functions in the &lt;code&gt;else&lt;/code&gt; block. Add the missing return clause, and the warning will resolve.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;I hope you learned something today. I'm a big fan of Elixir's &lt;code&gt;with&lt;/code&gt; clause, and of all the other readability, maintainability, and code correctness features that Elixir offers. The next post will be about Dialyzer, and why  you should (always) use it for development. Follow me to get a notification in January!&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>functional</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Emoji Bug in Heading Tags or Wherever The Emoji Has 500+ Font Weight 🤔</title>
      <author>SYAUQIZAIDAN KHAIRAN KHALAF</author>
      <pubDate>Tue, 07 Dec 2021 12:15:58 +0000</pubDate>
      <link>https://dev.to/syaufy/emoji-bug-in-heading-tags-or-wherever-the-emoji-has-500-font-weight-533n</link>
      <guid>https://dev.to/syaufy/emoji-bug-in-heading-tags-or-wherever-the-emoji-has-500-font-weight-533n</guid>
      <description>&lt;p&gt;Well, well, well&lt;/p&gt;

&lt;p&gt;Have you realized it? This started 2/3 weeks ago when I created a landing page for my app. I noticed that the emoji on my landing page suddenly turned black and white. I searched for a solution for several hours and realized that the emojis in the [p] tags are still the same but the heading [h1], [h2], [h3] tags and tags that have a font-weight class that has a value of 500 and above will create emojis are black and white.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;❎ Bugged emoji because the bold font weight 👇🏻&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MHVm7hIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhdcvutacfd7t3tvbgck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MHVm7hIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhdcvutacfd7t3tvbgck.png" alt="Emoji bugged because the bold font weight" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ I try to change the font-weight to 400 and it works and the emoji has a color now&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3fcUve1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctyfpbyssxfsn111xevr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3fcUve1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ctyfpbyssxfsn111xevr.png" alt="I try to change the font-weight to 400 and it works and the emoji has a color now" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;But how to get emoji color without losing the tags font weight? 🤔&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Well you can go use span between the emojis and make write the inline style to make the span has a 400 font weight
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QQPvctR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y12zqr3grmh75m4fbix1.png" alt="Well you can go use span between the emojis and make write the inline style to make the span has a 400 font weight
" width="880" height="495"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have you experienced it too? or is it just me experiencing it? Let me know in the comments 👇🏻&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Get Comfortable With CSS Selectors</title>
      <author>Cess</author>
      <pubDate>Tue, 07 Dec 2021 12:05:39 +0000</pubDate>
      <link>https://dev.to/cesscode/get-comfortable-with-css-selectors-1b8p</link>
      <guid>https://dev.to/cesscode/get-comfortable-with-css-selectors-1b8p</guid>
      <description>&lt;p&gt;HTML and CSS to a front-end developer are like a knife and a fork to a chef. The more you get used to using  HTML and CSS skills together, the better a front-end developer you will become.&lt;/p&gt;

&lt;p&gt;And the best way to learn how to use these skills together is to understand the different &lt;strong&gt;CSS Selectors.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This blog will look at the different types of CSS selectors and how you can use them to build efficient CSS code. &lt;/p&gt;

&lt;p&gt;let's get started 💃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-css-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are CSS Selectors?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CSS selectors&lt;/strong&gt; is the opening part of a CSS ruleset,  it determines how you apply styles to HTML elements on a web page.  &lt;/p&gt;

&lt;p&gt;There are many different types of CSS selectors, each with its own unique syntax. These tell the browser which elements to apply CSS property values to.&lt;/p&gt;

&lt;p&gt;The element or elements targeted by a CSS selector are  the &lt;strong&gt;“subject of the selector.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can select a subject based on its element type, class, ID name, or pseudo-state. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS selectors&lt;/strong&gt; are case-sensitive, they must match element names and attribute values exactly.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;.coding&lt;/code&gt; class selector is not the same as &lt;code&gt;.CODING&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is advisable to use small letters to avoid making mistakes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for CSS Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;selector {
CSS-property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#there-are-two-types-of-css-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;There are two types of CSS selectors:&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basic CSS selectors.&lt;/li&gt;
&lt;li&gt;Advanced CSS selectors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-css-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;BASIC CSS SELECTORS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Basic CSS selectors&lt;/strong&gt; are the most common type of CSS selectors. They style specific elements on a website, in the basic selectors we have selectors such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS class Selectors&lt;/li&gt;
&lt;li&gt;CSS ID Selectors&lt;/li&gt;
&lt;li&gt;Element Type Selectors&lt;/li&gt;
&lt;li&gt;CSS Universal Selectors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-css-class-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The CSS Class Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;CSS class selector&lt;/strong&gt; identifies an element based on its &lt;strong&gt;class attribute&lt;/strong&gt;. You can use CSS class selectors to style many HTML elements.&lt;/p&gt;

&lt;p&gt;You can use the &lt;strong&gt;CSS class selector&lt;/strong&gt; on any HTML element.&lt;/p&gt;

&lt;p&gt;To select elements with a specific class, write a &lt;strong&gt;period (.) character&lt;/strong&gt;, followed by the &lt;strong&gt;class name&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for CSS Class Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.class-name {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Examples of CSS Class selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the example below ⬇️ the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element has a &lt;code&gt;class="text"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p class="text"&amp;gt;When will manchester united win a trophy again?&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To select the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element using the CSS class selector, we:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.text {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All Html element with &lt;code&gt;class="text"&lt;/code&gt; will align to the center, have orange text color and a font-size of 20px.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remember-you-can-use-the-css-class-selector-to-style-many-html-elements-right"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Remember you can use the CSS class selector to style many HTML elements right?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;let us see how it works  🙂&lt;/p&gt;

&lt;p&gt;I want both the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element to have the same exact CSS style, so I give both the same &lt;code&gt;class="code"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Football&amp;lt;h1&amp;gt;
&amp;lt;p class="code"&amp;gt;When will manchester united win a trophy again?&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Rejoice&amp;lt;/h2&amp;gt;
&amp;lt;button class="code"&amp;gt;Submit&amp;lt;/button&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you noticed that both the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element have the same &lt;code&gt;class="code"&lt;/code&gt; in the above  ⬆ example? 🤔&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.code {
  text-align: center;
  color: green;
  font-size: 18px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; in the example above  ⬆ will have the same text color, font size, and will align to the center of the web page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-specify-that-a-class-should-affect-only-a-specific-html-element"&gt;
  &lt;/a&gt;
  &lt;strong&gt;You can also specify that a class should affect only a specific HTML element&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In the example below ⬇️ both the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element have the same &lt;code&gt;class="code"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Football&amp;lt;h1&amp;gt;
&amp;lt;p class="code"&amp;gt;When will manchester united win a trophy again?&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Rejoice&amp;lt;/h2&amp;gt;
&amp;lt;button class="code"&amp;gt;Submit&amp;lt;/button&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-want-to-style-only-the-raw-ltpgt-endraw-element-how-do-we-do-that"&gt;
  &lt;/a&gt;
  &lt;strong&gt;I want to style only the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, How do we do that?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Remember both the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; have the same class name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p.code {
  text-transform: capitalize;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above  ⬆ only paragraph &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements with &lt;code&gt;class="code"&lt;/code&gt; will be orange, and have a font-size of 20px. It won't affect the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css-id-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The CSS Id Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;CSS Id selector&lt;/strong&gt; identifies an element based on its ID attribute.  ID selector is unique and you should only use them once per page to select one unique element.  &lt;/p&gt;

&lt;p&gt;To select an element with a specific id, write a hash (#) character, followed by the id of the element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for CSS id Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#id-name {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example of CSS Id Selector&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the example below  ⬇ the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element has a &lt;code&gt;id="coding"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p id="coding"&amp;gt;football is no longer fun&amp;lt;/p&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To select the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element using the CSS Id selector, we:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#coding {
  text-align: center;
  color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above ⬆, the CSS rule will apply to the HTML element with id="coding".&lt;/p&gt;

&lt;p&gt;Remember that the Id Class selector is a unique identifier. It means that in an HTML document, you can't have more than one element with the same id; you can only select one element. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use  Id selectors rarely and only on elements that need to always appear the same. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-css-class-selectors-and-id-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What Is the Difference Between CSS Class selectors and Id selector?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can repeat the same &lt;strong&gt;CSS class selector&lt;/strong&gt; value across many Html elements but you can only use an ID once.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#element-type-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Element Type Selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Element Type Selectors&lt;/strong&gt; are the most common basic CSS selectors. They select HTML elements based on the element name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Element Type Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example of Element Type Selectors:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p {
text-align: center;
font-size: 20px;
color: red;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above  ⬆ example, all paragraph &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements will align to the center, have a font size of 20px, and text color of red.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css-universal-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The CSS Universal Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The universal selector (*) selects all HTML elements on the page. &lt;/p&gt;

&lt;p&gt;Every HTML element, from the &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; to the &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;,' follows the universal selector's style.&lt;/p&gt;

&lt;p&gt;The asterisk (*)  character represents Universal selectors.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Universal Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
CSS-Property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example of CSS Universal Selector&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
text-align: center;
text-transform: Uppercase;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every single element on the web page will align to the center of the page and have uppercase letters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-css-grouping-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The CSS Grouping Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CSS grouping selectors&lt;/strong&gt; select all the HTML elements with the same style definitions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS grouping selectors&lt;/strong&gt; save time and help you to write clearer codes.&lt;/p&gt;

&lt;p&gt;You may want to apply the same exact styles to several Html components at times.  For example, all your &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;,  &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; elements should have a red background,  a font-weight of 700 and a font-size of 28px. &lt;/p&gt;

&lt;p&gt;One approach is to style each HTML element in your CSS stylesheet,  &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; and  &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; as different selectors  . There's nothing wrong with this, but if you do it, you'll get a CSS stylesheet full of repeated declarations. &lt;/p&gt;

&lt;p&gt;A better solution is to use one CSS ruleset with many declarations separated by a comma(,).&lt;/p&gt;

&lt;p&gt;Take a close look at the CSS codes below  ⬇️; you'll see that the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; elements all have the same CSS style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 {
background-color: red;
color: white;
font-weight: 700;
font-size: 28px;
text-align: center;  
}

h2 {
background-color: red;
color: white;
font-weight: 700;
font-size: 28px;
text-align: center;
}

h3 {
background-color: red;
color: white;
font-weight: 700;
font-size: 28px;
text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above  ⬆️  we gave &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; the same exact CSS style, will it work that way? Yes, it will work but it will be better to group the selectors to avoid repetition and make our codes easier to read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To group selectors, we separate each selector with a comma(,).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's group the above CSS codes with a Comma (,)  😄&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1, h2, h3 {
background-color: red;
color: white;
font-weight: 700;
font-size: 28px;
text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It's possible for us to use comma(,) to group them together because &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; have the same exact CSS styles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The selectors don't have to match before you group them, as long as you give them the same exact CSS styling. For example, we can group &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; as long as we give them the same styles. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can also group a CSS Class selector with ID selectors if we want them to have the same exact CSS styling.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 id="tech"&amp;gt;Coding is life&amp;lt;/h1&amp;gt;
&amp;lt;p class="future"&amp;gt;Coding is fun&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To group the above Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#tech,
.future {
font-size: 20px;
color: red;
text-transform: capitalize;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember we use the Comma(,) cause we want them to have the same exact CSS style.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-we-do-when-raw-lth1gt-endraw-raw-lth2gt-endraw-and-raw-lth3gt-endraw-have-a-few-comparable-css-stylings-but-different-font-sizes-and-colors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What do we do when &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;,  &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;, and  &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; have a few comparable CSS stylings but different font sizes and colors?&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*group the selectors cause they have the same styles*/
h1,
h2,
h3 {
text-align: center;
text-transform: uppercase;
}


/*apply individual styles to all 3 selectors*/
h1 {
font-size: 30px;
color: red;
}

h2 {
font-size: 25px;
color: orangered;
}


h3 {
font-size: 20px;
color: green;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, and &lt;code&gt;h3&lt;/code&gt; all have  &lt;code&gt;text-align: center;&lt;/code&gt; &lt;code&gt;text-transform: uppercase;&lt;/code&gt;  so I grouped them.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;font size&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; are different for  &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;h3&lt;/code&gt;, so I applied the &lt;code&gt;font size&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; to all three selectors.  &lt;/p&gt;

&lt;p&gt;I hope you understand basic CSS selectors?  😄 . &lt;/p&gt;

&lt;p&gt;Let's move on to &lt;strong&gt;Advanced CSS Selectors&lt;/strong&gt;.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/ussoccer-dance-happy-26DOpJRJMhRPGqUsE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-css-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ADVANCED CSS SELECTORS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Advanced CSS selectors enable us to do more than what Basic CSS allows us to do.&lt;/p&gt;

&lt;p&gt;In advanced CSS selectors we have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Combination Selectors.&lt;/li&gt;
&lt;li&gt;Pseudo-class-selectors.&lt;/li&gt;
&lt;li&gt;CSS Attribute Selectors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#combination-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;COMBINATION SELECTORS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Combination Selectors&lt;/strong&gt; select elements based on a specific relationship between them.&lt;/p&gt;

&lt;p&gt;There are 4 types of combination selectors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Descendant selectors.&lt;/li&gt;
&lt;li&gt;Child selectors.&lt;/li&gt;
&lt;li&gt;Adjacent sibling selectors.&lt;/li&gt;
&lt;li&gt;General sibling selectors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSS selectors rely on the HTML Family Tree.  It's vital to grasp the relationships between HTML elements before I go further.&lt;/p&gt;

&lt;p&gt;The HTML family tree is also referred to as the HTML document tree.&lt;/p&gt;

&lt;p&gt;The family tree consists of descendants, parents, children, and sibling elements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A parent&lt;/strong&gt; element contains other elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The child element&lt;/strong&gt; is an element that is immediately contained by another element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A sibling&lt;/strong&gt; is an element that shares the same parent with another element.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;div&amp;gt;
2 &amp;lt;img src="" alt=""&amp;gt;

3 &amp;lt;article&amp;gt;
4 &amp;lt;h1&amp;gt;coding is life&amp;lt;/h1&amp;gt;
5 &amp;lt;p&amp;gt;Code everyday&amp;lt;/p&amp;gt;
6 &amp;lt;/article&amp;gt;

7 &amp;lt;aside&amp;gt;
8 &amp;lt;h2&amp;gt;Make out time to take care of yourself as a developer&amp;lt;/h2&amp;gt;
9 &amp;lt;p&amp;gt;It's okay to read something else other than a coding book&amp;lt;/p&amp;gt;
10 &amp;lt;/aside&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is &lt;strong&gt;the parent.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; in line 2, &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; in line 3 and the &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; element in line 7 are the &lt;strong&gt;children&lt;/strong&gt; of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element in line 3 is &lt;strong&gt;the parent&lt;/strong&gt; of the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; in line 4 and the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 5.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; in line 4 and the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 5 are &lt;strong&gt;siblings&lt;/strong&gt; with the same parent &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; in line 4 and the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 5 are the children of the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; and &lt;strong&gt;the grandchildren&lt;/strong&gt; of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; element in line 7 is &lt;strong&gt;the parent&lt;/strong&gt; of the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; in line 8 and the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 9.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at each of these selectors one by one, using examples to help us grasp how they function 😄.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#descendant-combinator-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Descendant Combinator Selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Descendant Combinator selectors&lt;/strong&gt; match all elements that are descendants of a specified element. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Descendant Combinator selectors&lt;/strong&gt; select the children, grand-children e.tc when used.&lt;/p&gt;

&lt;p&gt;To select &lt;strong&gt;Descendants&lt;/strong&gt; use multiple selectors separated by spaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Descendant Combinator Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;selector1  selector2 {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 0f Descendant Combinator selector:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;h2&amp;gt;Coding is Fun&amp;lt;/h2&amp;gt;

2 &amp;lt;article&amp;gt;

3 &amp;lt;h2&amp;gt;Cess - The Frontend Web developer&amp;lt;/h2&amp;gt;
4 &amp;lt;p&amp;gt;I will be working as a full-time frontend web developer by this time next year&amp;lt;/p&amp;gt;
5 &amp;lt;div&amp;gt;
6 &amp;lt;h2&amp;gt;Coding is life&amp;lt;/h2&amp;gt;
7 &amp;lt;p&amp;gt;I prefer using CSS flexbox to Grid&amp;lt;/p&amp;gt;
8 &amp;lt;/div&amp;gt;

9 &amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;In the above example:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element in &lt;em&gt;line 1&lt;/em&gt; is outside the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; in line 3, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; in line 4 and &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements in &lt;em&gt;line 5&lt;/em&gt; are the children of the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; in line 6 and &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 7 are the children of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element in line 5 which makes them the grandchildren&lt;br&gt;
of the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember Descendant selector selects both the children and the grand-children when used.&lt;/p&gt;

&lt;p&gt;let's style all the  &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; inside the &lt;code&gt;article&lt;/code&gt; element using the Descendant selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;article h2 {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above  ⬆️  example selects all &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;' elements within the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;' element because they are within the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;' element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#child-combinator-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Child Combinator Selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Child selectors&lt;/strong&gt; match an element that is an immediate child of another element. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Child Combinator Selectors&lt;/strong&gt; selects only the child elements. &lt;/p&gt;

&lt;p&gt;Child combinator selector does not select the grandchildren elements like the &lt;strong&gt;Descendant selector&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The greater-than sign (&amp;gt;) character is often used to represent a child selector.&lt;/p&gt;

&lt;p&gt;You place the greater than sign (&amp;gt;)  between the parent and child element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Child Combinator Selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Parent-selector &amp;gt; Child-selector {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 0f Child Combinator selector:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;h2&amp;gt;Coding is Fun&amp;lt;/h2&amp;gt;

2  &amp;lt;article&amp;gt;

3 &amp;lt;h2&amp;gt;Cess - The Frontend Web developer&amp;lt;/h2&amp;gt;
4 &amp;lt;p&amp;gt;I will be working as a full-time frontend web developer by this time next year&amp;lt;/p&amp;gt;

5 &amp;lt;div&amp;gt;
6 &amp;lt;h2&amp;gt;Coding is life&amp;lt;/h2&amp;gt;
7 &amp;lt;p&amp;gt;I prefer using CSS flexbox to Grid&amp;lt;/p&amp;gt;
8  &amp;lt;/div&amp;gt;
9  &amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;article &amp;gt; h2 {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The above ⬆️ example will target only the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element in line 3 cause it falls within the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will ignore any &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; that is outside of the &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; element or contained inside another element. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-descendant-combinator-selector-and-child-combinator-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is the difference between Descendant Combinator Selector and Child Combinator Selector?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The child combinator selector ( &amp;gt; ) targets an element that is a child of its parent.  It does not target descendants beyond the children. &lt;/p&gt;

&lt;p&gt;The descendant combinator selects all the children or grandchildren of a given element. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adjacent-sibling-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Adjacent sibling selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Adjacent sibling&lt;/strong&gt; selects an element that is after another specific element.&lt;/p&gt;

&lt;p&gt;Sibling elements must have the same parents. They must be immediately following each other.&lt;/p&gt;

&lt;p&gt;The plus (+) character represents adjacent sibling selectors. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Adjacent sibling selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first-sibling-selector + second-sibling-selector {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The way you read this combinator is from right to left.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first sibling element comes first.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second sibling element comes second and is the targeted element. the targeted element is the element you intend styling &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Adjacent sibling selector:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;h2&amp;gt;Coding is Fun&amp;lt;/h2&amp;gt;

2  &amp;lt;article&amp;gt;

3 &amp;lt;h2&amp;gt;Cess - The Frontend Web developer&amp;lt;/h2&amp;gt;
4 &amp;lt;p&amp;gt;I will be working as a full-time frontend web developer by this time next year&amp;lt;/p&amp;gt;

5 &amp;lt;div&amp;gt;
6 &amp;lt;h2&amp;gt;Coding is life&amp;lt;/h2&amp;gt;
7  &amp;lt;/div&amp;gt;
8  &amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h2 + P {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above  ⬆️  example will target only the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 4. It is exactly after the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element and they both share the same parent element. &lt;/p&gt;

&lt;p&gt;Remember the &lt;strong&gt;Adjacent sibling&lt;/strong&gt; selects the second sibling when it appears right after the first sibling element and they share the same parent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-sibling-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;General sibling selectors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;General sibling selectors&lt;/strong&gt; select the elements that follow and share the same parent. &lt;/p&gt;

&lt;p&gt;It is not necessary that the second element immediately follows the first element.&lt;/p&gt;

&lt;p&gt;The tilde (~) character represents general sibling selectors.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for General sibling selector is:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first-sibling-selector ~ second-sibling-selector {
property: value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first sibling element comes first.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second sibling element comes second and is the targeted element. The targeted element is the element you intend styling &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 0f General sibling selector:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 &amp;lt;h2&amp;gt;Coding is Fun&amp;lt;/h2&amp;gt;

2  &amp;lt;article&amp;gt;

3 &amp;lt;h2&amp;gt;Cess - The Frontend Web developer&amp;lt;/h2&amp;gt;
4  &amp;lt;img src="...." alt="..."&amp;gt;
5 &amp;lt;p&amp;gt;I will be working as a full-time frontend web developer by this time next year&amp;lt;/p&amp;gt;

5 &amp;lt;div&amp;gt;
6 &amp;lt;h2&amp;gt;Coding is life&amp;lt;/h2&amp;gt;
7  &amp;lt;/div&amp;gt;
8  &amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h2 ~ p {
  text-align: center;
  color: orange;
  font-size: 20px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above  ⬆️  example will target only the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element in line 5. It is exactly after the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; element in line 3 and they both share the same parent element.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;General sibling selector&lt;/strong&gt; will operate when both sibling elements have the same parent.&lt;/p&gt;

&lt;p&gt;As long as the siblings have the same parent, it doesn't matter if they are born immediately after each other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-attribute-selectors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CSS ATTRIBUTE SELECTORS&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Attribute selectors select all elements that have a given attribute or attribute value.&lt;/p&gt;

&lt;p&gt;An attribute is a piece of the markup language used to change how an HTML element behaves or displays.&lt;/p&gt;

&lt;p&gt;You include attributes in an HTML element's opening tag &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="https://www.twitter.com/cessss_" target="_blank"&amp;gt;Connect with me on twitter&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above &lt;code&gt;target="_blank" is an attribute of the anchor tag&lt;/code&gt;&lt;a&gt;&lt;/a&gt;`&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Attribute Selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are 7 types of Attribute selectors:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Present Attribute Selector&lt;/li&gt;
&lt;li&gt;Equals Attribute Selector&lt;/li&gt;
&lt;li&gt;Begins With Attribute Selector (^)&lt;/li&gt;
&lt;li&gt;Ends With Attribute Selector ($)&lt;/li&gt;
&lt;li&gt;Contains Attribute Selector (*)&lt;/li&gt;
&lt;li&gt;Attribute Spaced Attribute Selector (~)&lt;/li&gt;
&lt;li&gt;Hyphen Attribute Selector (|)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#present-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Present Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Present attribute selector&lt;/strong&gt; select elements with a specified attribute &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Present Attribute Selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Present attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="#" target="_blank"&amp;gt;Code everyday&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[target] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
The CSS styles above  ⬆️  will work on any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element with a &lt;code&gt;"target"&lt;/code&gt; attribute. &lt;/p&gt;

&lt;p&gt;Styles will not apply to all other &lt;code&gt;a&lt;/code&gt; elements that don't have a &lt;code&gt;target&lt;/code&gt; attribute. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#equals-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Equals Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Equals attribute selectors select elements with a specified attribute and value. &lt;/p&gt;

&lt;p&gt;The equals (=) character represents Equals attribute selectors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Equals Attribute Selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Equals attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="www.codecademy.com" target="_blank"&amp;gt;Code everyday&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[href="www.codecademy.com"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
The example above  ⬆️  will find any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;' element with a &lt;code&gt;'href'&lt;/code&gt; attribute set to &lt;code&gt;"www.codecademy.com"&lt;/code&gt; and apply the CSS styles to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#begins-with-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Begins With Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Begins with selector&lt;/strong&gt; select elements whose attribute value begins with a specific value. &lt;/p&gt;

&lt;p&gt;You don't have to write down the whole word of the value you specify when using  &lt;strong&gt;Begins with selector&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The circumflex accent (^) character represents Begins with selector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Begins with selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute^="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Begins with attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="https://www.codecademy.com" target="_blank"&amp;gt;Code everyday&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[href^="https://"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The example above  ⬆️   will find any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;' element with a &lt;code&gt;href&lt;/code&gt; attribute that starts with &lt;code&gt;"https://"&lt;/code&gt; and apply the CSS styles to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ends-with-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ends With Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ends with selector&lt;/strong&gt; select elements whose attribute value ends with a specific value. &lt;/p&gt;

&lt;p&gt;You don't have to write down the whole word of the value you specify when using  &lt;strong&gt;Ends with selector&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ends with selector&lt;/strong&gt; is the opposite of the &lt;strong&gt;begins with selector&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;The dollar sign ($) character represents Ends with selector&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Ends with selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute$="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Ends with attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="https://www.codecademy.com/docs/menu.pdf"&amp;gt;Code documentation&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[href$=".pdf"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
 The example above  ⬆️   will find any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;' element with a &lt;code&gt;''href''&lt;/code&gt; attribute that ends with &lt;code&gt;".pdf"&lt;/code&gt; and apply the CSS styles to it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attribute-spaced-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Attribute spaced Selector&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Attribute spaced Selector&lt;/strong&gt; is also called white space attribute selector. &lt;/p&gt;

&lt;p&gt;It matches any element whose attribute value is a list of space-separated values. One of the values used will be equal to any of the values in the space-separated values. &lt;/p&gt;

&lt;p&gt;By space-seperated values, I mean attribute values like  &lt;code&gt;class="fun coding"&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;The tilde (~) character represents the attribute spaced selector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Attribute spaced selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute~="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Attribute spaced selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="#" rel="tag nofollow"&amp;gt;Code documentation&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[rel~="tag"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
The example above  ⬆️   will find any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;' element with a &lt;code&gt;''rel''&lt;/code&gt; attribute with a value of &lt;code&gt;"tag"&lt;/code&gt; and apply the CSS styles to it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contains-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Contains Attribute Selector&lt;/strong&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Contains attribute selector&lt;/strong&gt; select elements whose attribute value contains a specified value. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The asterisk (*) character represents Contains Attribute selector&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Contains Attribute selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute*="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Contains Attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="/signin.com"&amp;gt;Code documentation&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
 &lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[href*="signin"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The CSS styles will work on any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element with a &lt;code&gt;"href"&lt;/code&gt; attribute that contains a value of  &lt;code&gt;"signin"&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hyphen-attribute-selector"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hyphen Attribute Selector&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Hyphen attribute-selector select elements with the specified attribute starting with the specified value. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It selects all elements whose attribute has a hyphen-seperated list of values. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The value has to be a whole word, either alone, like class="top", or followed by a hyphen( - ), like class="top-text"! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The vertical line (|) character represents Hyphen Attribute Selector&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Hyphen Attribute Selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector[attribute|="value"] {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 0f Hyphen Attribute selector:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
&amp;lt;a href="#" lang="en-US"&amp;gt;Code documentation&amp;lt;/a&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
  &lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
a[lang|="en"] {&lt;br&gt;
  color: orange;&lt;br&gt;
  font-size: 20px;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
 The CSS styles will work on any &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element with a &lt;code&gt;"lang"&lt;/code&gt; attribute that contains a value of  &lt;code&gt;"en"&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It matches the elements with the &lt;code&gt;lang&lt;/code&gt; attribute that has the values &lt;code&gt;en&lt;/code&gt; &lt;code&gt;en-US&lt;/code&gt; &lt;code&gt;en-GB&lt;/code&gt; and so on but not &lt;code&gt;US-en&lt;/code&gt;, &lt;code&gt;GB-en&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-selectors"&gt;
  &lt;/a&gt;
  PSEUDO SELECTORS
&lt;/h2&gt;

&lt;p&gt;There are two types of pseudo-selectors: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pseudo Class Selectors.&lt;/li&gt;
&lt;li&gt;Pseudo Element Selectors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-class-selectors"&gt;
  &lt;/a&gt;
  PSEUDO CLASS SELECTORS
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A pseudo-class is used to define a special state of an element.&lt;/p&gt;

&lt;p&gt;For example, it can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;style an element when a user mouses over it.&lt;/li&gt;
&lt;li&gt;style visited and unvisited links.&lt;/li&gt;
&lt;li&gt;style an element when it focus.     &lt;a href="https://www.w3schools.com/css/css_pseudo_classes.asp"&gt;w3schools&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pseudo-class&lt;/strong&gt; names are not case-sensitive. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;:Hover&lt;/code&gt; is the same as &lt;code&gt;:hover&lt;/code&gt;. I will advise you always use small letters when writing selectors.&lt;/p&gt;

&lt;p&gt;The colon (:) character represents Pseudo class selectors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Pseudo class selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:pseudo-class {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are 3 main types of Pseudo-class selectors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User Action Pseudo-classes.&lt;/li&gt;
&lt;li&gt;link Pseudo-classes.&lt;/li&gt;
&lt;li&gt;Structural And Positional Pseudo-classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#user-action-pseudoclasses"&gt;
  &lt;/a&gt;
  USER ACTION PSEUDO-CLASSES
&lt;/h2&gt;

&lt;p&gt;User Action Pseudo-classes works when the user interacts with your web page. &lt;/p&gt;

&lt;p&gt;The most used User Action Pseudo-classes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:hover&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;:hover&lt;/code&gt; works when the user moves their cursor over an element but does not select it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:hover&lt;/code&gt; selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:hover {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
%[&lt;a href="https://codepen.io/cesscode/pen/QWdaZYw"&gt;https://codepen.io/cesscode/pen/QWdaZYw&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;In the example above, the color of the link will change to red when you hover over the link.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:Active&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The :active selector is used to select and style the active link.&lt;/p&gt;

&lt;p&gt;A link becomes active when you click on it.  :active selector can be used on all elements, not only links.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:active&lt;/code&gt; selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:active {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:focus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;:focus&lt;/code&gt; selects an element that is being focused on by the user. "focused on by the user" means it accepts keyboard or any other user input. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It works on user input elements used in forms and is triggered as soon as the user clicks on it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:focus&lt;/code&gt; selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:focus {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/OJWzBWB"&gt;https://codepen.io/cesscode/pen/OJWzBWB&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;The background color of the input field when focused changes to yellow in the example above ⬆️.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-pseudoclasses"&gt;
  &lt;/a&gt;
  link Pseudo-classes
&lt;/h2&gt;

&lt;p&gt;There are two link pseudoclasses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;:link&lt;/strong&gt;
Link Pseudo class selector selects a link that the user has not visited before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The syntax for link selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector:link {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;:visited&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;:visited&lt;/code&gt; selects a link that the user has clicked on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use them to control the colors of the links and also whether they are to appear underlined or not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:visited&lt;/code&gt; selector is:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
:visited {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:visited&lt;/code&gt; can be overridden by a link pseudo-class with equal specificity.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If there are two or more conflicting CSS rules that point to the same element, the browser follows some rules to determine which one is most specific and therefore wins out.&lt;/p&gt;

&lt;p&gt;Think of specificity as a score/rank that determines which style declarations are ultimately applied to an element.   &lt;a href="https://www.w3schools.com/css/css_specificity.asp"&gt;W3schools&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make link pseudo-class work, It is advisable to use the LVHA rule in the exact order to style them&lt;/p&gt;

&lt;p&gt;LVHA stands for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a:link&lt;/li&gt;
&lt;li&gt;a:visited&lt;/li&gt;
&lt;li&gt;a:hover&lt;/li&gt;
&lt;li&gt;a:active&lt;/li&gt;
&lt;li&gt;a:focus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/zYErbKL"&gt;https://codepen.io/cesscode/pen/zYErbKL&lt;/a&gt;]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structural-and-positional-pseudoclasses"&gt;
  &lt;/a&gt;
  Structural And Positional Pseudo-classes.
&lt;/h2&gt;

&lt;p&gt;The most common structural and positional pseudo-classes you will likely come across are the:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:first-child: Applies style to the first child of the element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:first-child&lt;/code&gt; selector is:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
:first-child {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:last-child: Applies style to an element if is the last child within its parent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:last-child&lt;/code&gt; selector is:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
:last-child {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/NWaNqVx"&gt;https://codepen.io/cesscode/pen/NWaNqVx&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;In the above example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;li:first-child&lt;/code&gt; selects line 1 cause is the first list item within the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;li:last-child&lt;/code&gt; selects line 4 cause is the last item within the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;:Only-child: Applies style to an element if is the only element within a parent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;:only-child&lt;/code&gt; selector is:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
:only-child {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;The first child will be red&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
 &lt;strong&gt;Styling the above  ⬆️  Html code:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
li:only-child {&lt;br&gt;
background-color: red;&lt;br&gt;
color: white;&lt;br&gt;
padding: .7em;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
The above ⬆️ CSS styles will apply &lt;code&gt;background-color: red;&lt;/code&gt; to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element cause is the only child.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-elements"&gt;
  &lt;/a&gt;
  PSEUDO ELEMENTS
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s) &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;MDN&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The double colon (::) represents pseudo-element selectors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::pseudo-element {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#textual-pseudoelements"&gt;
  &lt;/a&gt;
  Textual Pseudo-elements
&lt;/h2&gt;

&lt;p&gt;The textual pseudo-elements consist of the:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;::first-letter pseudo-element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;::first-letter&lt;/code&gt; applies the style to the first letter of the element&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;::first-letter&lt;/code&gt; Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::first-letter {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;:first-line pseudo-element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;::first-line&lt;/code&gt; applies the style to the first line of the element&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;::first-line&lt;/code&gt; Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::first-line {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Both the &lt;code&gt;::first-line&lt;/code&gt; and the &lt;code&gt;::first-letter&lt;/code&gt; pseudo-element work only for block elements&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/qBPZObQ"&gt;https://codepen.io/cesscode/pen/qBPZObQ&lt;/a&gt;]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generated-content-pseudoelements"&gt;
  &lt;/a&gt;
  Generated Content Pseudo-elements
&lt;/h2&gt;

&lt;p&gt;The generated pseudo-element consist of the:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;::before pseudo-element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;::before&lt;/code&gt; adds content before the HTML element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;::before&lt;/code&gt; Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::before {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;::after pseudo-element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;::after&lt;/code&gt; adds content after the HTML element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The syntax for &lt;code&gt;::after&lt;/code&gt; Pseudo element selector is:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
selector::first-line {&lt;br&gt;
property: value;&lt;br&gt;
}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
When using the  &lt;code&gt;::after&lt;/code&gt; and &lt;code&gt;::before&lt;/code&gt; pseudo-elements you must use the  &lt;code&gt;content&lt;/code&gt; property to make your styles visible.&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://codepen.io/cesscode/pen/mdBPeMJ"&gt;https://codepen.io/cesscode/pen/mdBPeMJ&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;In the example above ⬆️, I added &lt;code&gt;'&lt;/code&gt; to before and after the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. You can also add images using the &lt;code&gt;content: URL("image_link.jpg")&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#difference-between-pseudoclass-and-pseudoelement"&gt;
  &lt;/a&gt;
  Difference between pseudo-class and pseudo-element
&lt;/h2&gt;

&lt;p&gt;The two main differences between a pseudo-class and pseudo-element are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.&lt;br&gt;
Pseudo-elements are preceded with two colons &lt;code&gt;::&lt;/code&gt; instead of one, although these days modern browsers are more forgiving and support both &lt;code&gt;:&lt;/code&gt; and double  &lt;code&gt;::&lt;/code&gt; colons for the pseudo-elements. It is best practice to use double colons &lt;code&gt;::&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
Pseudo-classes are all about the state, states like a visited link, a focused input field, an image that is being hovered upon, e.tc. While pseudo-elements are used to style sections or a particular part of an element, things like the first letter in a word, first-line e.tc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out some of these resources for a more in-depth look into CSS pseudo-classes and pseudo-elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3schools.com/css/css_pseudo_elements.asp"&gt;W3schools CSS Pseudo-elements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;MDN CSS Pseudo-elements&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;MDN CSS Pseudo-classes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed this post and that it helps you on your way to becoming a better front-end developer.&lt;/p&gt;

&lt;p&gt;Start experimenting with the various CSS selectors to see how you can improve your CSS code.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it 💙.&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/espn-smile-drake-drizzy-2UqWGeC4upMYXtvqR8"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GraphQL Editor - the journey from  initial release to version 5.0</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Tue, 07 Dec 2021 11:57:24 +0000</pubDate>
      <link>https://dev.to/graphqleditor/graphql-editor-the-journey-from-initial-release-to-version-50-8k1</link>
      <guid>https://dev.to/graphqleditor/graphql-editor-the-journey-from-initial-release-to-version-50-8k1</guid>
      <description>&lt;p&gt;From the very beginning of our adventure with GraphQL, we were impressed by how great its community is. The amount of content, libraries and great tools generated by GraphQL users amazed us from the very start. The more time we spent working with GraphQL the more things we saw that could be improved to make working with it easier and better. We also knew that we wanted to give something back to its wonderful community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-origins"&gt;
  &lt;/a&gt;
  The origins
&lt;/h2&gt;

&lt;p&gt;Three years ago we were working on quite a schema with a lot of complicated relationships, then a thought occurred to us:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"It would be nice to be able to visualize it well enough to understand all the connections."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes there were several solutions on the market that would let us do that, but hey everyone knows how it works. The question always arises, why not do it differently, better, and most importantly in our own way. A few days after saying:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"OK, lets do it"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;came&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"What if we could build a GraphQL scheme out of visual blocks?"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and that's how it all started. We begun with the PoC version, which included just these two functionalities, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL schema visualization,&lt;/li&gt;
&lt;li&gt;the ability to build it using viusal elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qLvDxpDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxf3ptvt6s4i3jml1etq.png" alt="Old GraphQL Editor UI" width="656" height="464"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;The very first version of GraphQL Editor from 2018&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Our project has been very warmly received by the GraphQL community which resulted in quickly amassing &lt;a href="https://github.com/graphql-editor"&gt;3 000 stars on GitHub&lt;/a&gt;. Users were not only happy to use these two simple features but also started suggesting some cool new ones. Users were not only happy to use these two simple features but also started suggesting some cool features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-graphql-editor-50"&gt;
  &lt;/a&gt;
  What's new in GraphQL Editor 5.0
&lt;/h2&gt;

&lt;p&gt;When we started we had a roadmap in mind which we tried to stick to, as much as it was possible. But with all the additional feedback we also kept adding features suggested by the community, which after more than 2 years has led us to the point we are at now, namely the release of &lt;strong&gt;&lt;a href="https://graphqleditor.com/"&gt;GraphQL Editor 5.0&lt;/a&gt;&lt;/strong&gt;.  &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLDuHRMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q5z9y3nsul6i9v9f1eu.png" alt="New GraphQL Editor UI" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Many graph improvements &amp;amp; various view modes&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So once again we would like to thank all our users for their valuable feedback, including those that were critical, it all really helped us improve. So without further ado, let's get into the new features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microservices"&gt;
  &lt;/a&gt;
  Microservices
&lt;/h3&gt;

&lt;p&gt;It's the most exciting as well as the most requested feature. What's even more satisfying about it finally being released, is that, we've been trying to figure out how to tackle this one since the first release of GraphgQL Editor. &lt;strong&gt;GraphQL Microservices&lt;/strong&gt; allow users instantly deploy their GraphQL backend prototypes using JavaScript or TypeScript. What's worth mentioning is microservices is powered by our open-source library called Stucco.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/graphql-editor"&gt;Stucco&lt;/a&gt; is a backend engine for our microservices. Its main goal is to keep you in charge of your infrastructure decisions. No risk of vendor lock-in, no worries. With Stucco you can use TypeScript, JavaScript or Golang to create GraphQL backends &amp;amp; deploy them easily using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL Editor Shared worker&lt;/li&gt;
&lt;li&gt;Local environment&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Kubernetes &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can deploy microservices directly from our built-in Live Editor (similar to those you may know from Git-based platforms), but the recommended way is to do it using &lt;a href="https://github.com/graphql-editor/graphql-editor-cli"&gt;graphql-editor-cli&lt;/a&gt;. Although microservices are great for testing and development purposes, we do not recommend using them on production as they run on very small machines with rate limit of 200 requests per minute &amp;amp; 1 000 000 requests per month. Additionally this feature is very much work-in-progress and is being released mostly because we need live testers to iterate on it and improve it.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9JXkJFKm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2o3u87fypvkix4q6t3ru.png" alt="Microservices" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;With Microservices you can deploy NodeJS GraphQL backends using JavaScript or TypeScript&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#jamstack-engine"&gt;
  &lt;/a&gt;
  JAMStack Engine
&lt;/h3&gt;

&lt;p&gt;Although JAMStack was introduced a couple versions back, in this one it received a significant update. We have added TypeScript and the most popular JS library for building user interfaces support - ReactJS. Among other notable features you can find:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;better ES modules support&lt;/strong&gt; - j just give our Live Service a CDN URL &amp;amp; it will fetch all types from your server and also look for typings,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;relative ES modules imports&lt;/strong&gt; -  now you can have user relative ES module imports inside our online code editor,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;deployment&lt;/strong&gt; - built-in static page deployment feature to easily show off your work to your team or a wider audience.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61dxKfns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqydfal3to1z1cysjzt1.png" alt="JAMStack engine" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;JAMStack with ReactJS, TS support &amp;amp; easy static deployment&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#graphql-cloud"&gt;
  &lt;/a&gt;
  GraphQL Cloud
&lt;/h3&gt;

&lt;p&gt;We want GraphQL Editor to become a self-sufficient IDE for GraphQL based project development. Following this goal we’re adding more and more "responsibilities" for our tools. Now you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create your own queries with ease,&lt;/li&gt;
&lt;li&gt;preview easily using built-in GraphiQL,&lt;/li&gt;
&lt;li&gt;save &amp;amp; access your work anytime you need from any device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have also added a proxy to support every GraphQL URL &amp;amp; CORS issues which frequently appear during development.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3k-A1iO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohajo2qv4e08amw7l1yy.png" alt="GraphQL Cloud" width="880" height="550"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;GraphQL Cloud offers GraphiQL-like queries preview, configurable mock backend &amp;amp; CORS support&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#last-but-not-least"&gt;
  &lt;/a&gt;
  Last but not least
&lt;/h2&gt;

&lt;p&gt;Aside from core features we have also been working on some quality of life improvements like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Graph improvements&lt;/strong&gt; - the graph module has been significantly improved:

&lt;ul&gt;
&lt;li&gt;node &amp;amp; fields creation is now much faster thanks to keyboard support,&lt;/li&gt;
&lt;li&gt;relation view includes all scalar fields,&lt;/li&gt;
&lt;li&gt;selected node state persists between view,&lt;/li&gt;
&lt;li&gt;code editor view can be toggled anytime now,&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Spotlight menu (CTRL/CMD + K)&lt;/strong&gt; - spotlight menu added for easier navigation,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Color Themes&lt;/strong&gt; - we have added 4 new color themes,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning center&lt;/strong&gt; - from now on every start, you will be welcomed with recent projects and a learning center to level up your editor skills,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;as well as tons of bug fixes &amp;amp; minor UI improvements.&lt;/p&gt;




&lt;p&gt;So that's basically what we've been working on for the last 12 months. I must say it feels great to be able to finally share all these new features with a broader audience (thanks David!). If your are using GraphQL already I would love to hear your feedback, if not I hope GraphQL Editor would make working with it even more efficient as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If once you start down the GraphQL path, forever will it &lt;br&gt;
dominate your destiny.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphqleditor.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zoIKUCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ur7var8ljvdb5tzhyjz9.png" alt="Try GraphQL Editor" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Chrome DevTools 101 (Parte 1)</title>
      <author>gonzalohk</author>
      <pubDate>Tue, 07 Dec 2021 11:55:09 +0000</pubDate>
      <link>https://dev.to/gonzalohk/chrome-devtools-101-parte-1-585f</link>
      <guid>https://dev.to/gonzalohk/chrome-devtools-101-parte-1-585f</guid>
      <description>&lt;h4&gt;
  &lt;a href="#qu%C3%A9-es-debugging"&gt;
  &lt;/a&gt;
  ¿Qué es Debugging?
&lt;/h4&gt;

&lt;p&gt;Debugging es el &lt;strong&gt;proceso de encontrar y resolver defectos dentro de un programa&lt;/strong&gt; (software) que impide su correcto funcionamiento. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#qu%C3%A9-es-el-chrome-devtools"&gt;
  &lt;/a&gt;
  ¿Qué es el Chrome DevTools?
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Es un conjunto de herramientas de creación y depuración de sitios web integrado en Google Chrome&lt;/strong&gt;. Es decir, son herramientas que permiten llevar a cabo pruebas, análisis, monitoreo y optimización de proyectos de desarrollo.&lt;/p&gt;

&lt;p&gt;Por lo general, se utiliza Chrome Devtools para inspeccionar elementos HTML, realizar cambios al CSS, visualizar la consola, monitorear peticiones y agregar breakpoints para depurar el código. Sin embargo, Chrome Devtools ofrece aún más herramientas para realizar tareas de depuración. &lt;/p&gt;

&lt;p&gt;Chrome Devtools viene integrado al navegador, se abre presionando:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;F12 o ⌘ + Shift + I en Mac
&lt;/li&gt;
&lt;li&gt;F12 o Ctrl + Shift + I en Windows y Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Así pues, algunas de estas herramientas y características del Chrome Devtools no son muy conocidas, por lo que podríamos exponer algunas a continuación.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-command-menu"&gt;
  &lt;/a&gt;
  The Command Menu
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Ctrl + Shift + P&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Es también llamado menú de comandos, proporciona una forma rápida de navegar por la interfaz de usuario de Chrome DevTools. En efecto, no permite tener acceso rápido a casi cualquier herramienta y configuración.&lt;/p&gt;

&lt;p&gt;Por ejemplo, podemos cambiar la apariencia e ir al modo dark simplemente ejecutando&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to dark theme&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--719MTbtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfxhc8w891q1vp0x87y5.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--719MTbtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfxhc8w891q1vp0x87y5.gif%3Fclasses%3Dcenter-block" alt="Switch Dark Mode" width="795" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Por otro lado, sacar una captura completa o parcial de la pantalla podría ser realizada con alguno de estos comandos. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Capture area screenshot&lt;/li&gt;
&lt;li&gt;Capture full size screenshot&lt;/li&gt;
&lt;li&gt;Capture node screenshot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTRwTwR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by73ogaf538c727dd3d6.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTRwTwR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by73ogaf538c727dd3d6.gif%3Fclasses%3Dcenter-block" alt="Capture Screenshot" width="869" height="616"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#logpoints"&gt;
  &lt;/a&gt;
  Logpoints
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Source -&amp;gt; Right Click # line code -&amp;gt; Add logpoint …&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agregar mensajes dentro del código para visualizar el valor de ciertas variables en la consola o identificar flujos es una práctica común, que no está mal, pero resulta ser una mala práctica cuando se abusa de ella. &lt;/p&gt;

&lt;p&gt;En efecto, para evitar escribir manualmente múltiples console.logs dentro de el código se tiene el logpoint. Esta permite inyectar un mensaje console.log en el código fuente en líneas específicas para incluir información importante a ser mostrada en consola. Es decir, se marca de forma similar a un breakpoint, se agrega un mensaje y al recorrer el flujo donde fue marcado este se muestran en la consola sin pausas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rv90syiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmkblcuxdijmd0p232si.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rv90syiz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmkblcuxdijmd0p232si.gif%3Fclasses%3Dcenter-block" alt="Logpoints" width="858" height="675"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conditional-breakpoints"&gt;
  &lt;/a&gt;
  Conditional Breakpoints
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Source -&amp;gt; Right Click # line code -&amp;gt; Add Conditional Breakpoint …&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Utilizar Breakpoints para detener la ejecución e inspeccionar paso a paso del código fuente es útil para validar la lógica programada, visualizar variables y localizar errores. No obstante, este proceso podría ser moroso debido a la cantidad de variables y flujos que se suelen tener.&lt;/p&gt;

&lt;p&gt;En tal sentido, a menudo es preciso detenerse en un lugar del programa solo bajo ciertas condiciones o comportamientos, ahí es cuando los Breakpoints Condicionales son una forma más efectiva de depurar el código. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMKZ7NpO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4xx2aygfb4x2om3io2d.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMKZ7NpO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4xx2aygfb4x2om3io2d.gif%3Fclasses%3Dcenter-block" alt="Conditional Breakpoints" width="859" height="516"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#network-conditions"&gt;
  &lt;/a&gt;
  Network Conditions
&lt;/h4&gt;

&lt;p&gt;_፧ -&amp;gt; More tools -&amp;gt;  Network Conditions _&lt;/p&gt;

&lt;p&gt;Las pruebas de software se realizan en todo el proceso de desarrollo, es decir pruebas funcionales como no funcionales son ejecutadas continuamente. Sin embargo, cometemos el error de hacer pruebas en condiciones ideales, ignorando la potencia de nuestros equipos/dispositivos que generalmente tiene una buena conexión a internet por encima del usuario final promedio. &lt;/p&gt;

&lt;p&gt;Chrome DevTools permite simular condiciones no ideales con una conexión a internet con menor ancho de banda o incluso un ancho de banda personalizado. Así mismo, editar el User Agent y deshabilitar el caché si fuera requerido.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eezojPqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqhk67er188ci205vvk4.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eezojPqo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqhk67er188ci205vvk4.gif%3Fclasses%3Dcenter-block" alt="Network Conditions" width="859" height="636"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#device-toolbar"&gt;
  &lt;/a&gt;
  Device Toolbar
&lt;/h4&gt;

&lt;p&gt;_Ctrl + shift + m _&lt;/p&gt;

&lt;p&gt;El desarrollo de aplicaciones modernas tiene como uno de sus principios ser Mobile First, lo que significa que se debería trabajar primero en la versión móvil y posteriormente en la de escritorio. &lt;/p&gt;

&lt;p&gt;Chrome Devtools permite editar el tamaño del Viewport o seleccionar algún modelo predefinido. También simular un dispositivo móvil de gama media o baja, ambas funciones tienen el fin de probar y validar el las vistas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCkJestS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqb6mtl6x3nfguwayg8l.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HCkJestS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqb6mtl6x3nfguwayg8l.gif%3Fclasses%3Dcenter-block" alt="Device Toolbar " width="859" height="718"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#devtools-as-editor"&gt;
  &lt;/a&gt;
  Devtools as editor
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Sources -&amp;gt; File System -&amp;gt; Add folder to workspace&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Al inspeccionar los elementos de nuestro proyecto es posible manipular el código fuente con el fin probar cambios inmediatamente y visualizarlos. Sin embargo, estos cambios son temporales, durando solo hasta que se refresque el navegador &lt;/p&gt;

&lt;p&gt;Chrome Devtools puede asociarse directamente al código fuente en nuestra máquina local agregando un Workspace en el File System. En efecto, cualquier cambio que se realice mediante las Devtools se verá reflejado en los archivos del código fuente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sKzgh9Aa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym5zarzb2zjn6tnhqejl.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sKzgh9Aa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ym5zarzb2zjn6tnhqejl.gif%3Fclasses%3Dcenter-block" alt="Devtools as editor" width="871" height="625"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;፧ -&amp;gt; More tools -&amp;gt;  Coverage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Cuando se trabaja en un proyecto antiguo probablemente Legacy que fue creciendo con el tiempo resulta fácil acumular código muerto. Es decir, probablemente exista código que ya no es utilizado ocupando espacio que debería ser eliminado, pero identificar este código en desuso resulta complejo en proyectos consolidados.&lt;/p&gt;

&lt;p&gt;Chrome Devtools tiene una herramienta denominada coverage que permite ayudarnos a identificar el código no utilizado de manera automática, pero debe ser tratada con cuidado porque podría mostrar falsos positivos para ciertos flujos. Es así que, una vez ejecutada la herramienta, está marca con verde el código en uso y en rojo el código que probablemente no es usado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qR1CkPeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u028lgk97j7dbghqjq0k.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qR1CkPeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u028lgk97j7dbghqjq0k.gif%3Fclasses%3Dcenter-block" alt="Coverage" width="860" height="569"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pretty-print"&gt;
  &lt;/a&gt;
  Pretty Print
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Source -&amp;gt; Open file -&amp;gt; { }&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Agregar breakpoints en el código de nuestros proyectos para hacer la depuración en un ambiente de desarrollo es una práctica fundamental. Sin embargo, en un ambiente de producción por lo general el código fuente está minificado. En efecto, esto nos impide agregar breakpoints para hacer la depuración y posterior análisis.&lt;/p&gt;

&lt;p&gt;Chrome devtools tiene un funcionalidad denominada Pretty Print que es representada por “{ }” encargada de revertir el proceso de minificado, no en su totalidad, pero resultado en código legible, separado por saltos de línea y tabulación. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRQMLc_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2rpaqdv8eusw9xdz58p.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRQMLc_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2rpaqdv8eusw9xdz58p.gif%3Fclasses%3Dcenter-block" alt="Pretty Print" width="858" height="675"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#override-geolocation"&gt;
  &lt;/a&gt;
  Override Geolocation
&lt;/h4&gt;

&lt;p&gt;_፧ -&amp;gt; More tools -&amp;gt;  Sensors _&lt;/p&gt;

&lt;p&gt;Desarrollar aplicaciones para usuarios en todo el mundo y más aún personalizar estas de acuerdo a la región en que se encuentran podría mejorar de sobremanera la experiencia usando la aplicación. Es decir, mostrar mapas, divisas y unidades de forma personalizada se consideran una gran ventaja.&lt;/p&gt;

&lt;p&gt;Para realizar pruebas de geolocalización existen diversas maneras, pero Chrome Devtools   permite sobreescribir la localización de forma más simple con alguna ciudad en particular o mejor aun pudiendo establecer cualquier ubicación deseada mediante coordenadas geográficas.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGY25T4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj4qtu4bl3bur9snilcd.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGY25T4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj4qtu4bl3bur9snilcd.gif%3Fclasses%3Dcenter-block" alt="Override Geolocation" width="860" height="514"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-expression"&gt;
  &lt;/a&gt;
  Live Expression
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Console&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Esta permite fijar en la parte superior de su consola una expresión de la cual se mostrará el valor actual y se actualizará en tiempo real. Es muy útil cuando se escribe la misma expresión de JavaScript en la consola repetidamente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHQY3mAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s5dzoy3p5xikiih5saq.gif%3Fclasses%3Dcenter-block" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHQY3mAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s5dzoy3p5xikiih5saq.gif%3Fclasses%3Dcenter-block" alt="Live Expression" width="860" height="661"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Chrome DevTools es mucho más que una herramienta para visualizar código y agregar breakpoints como solemos creer. En efecto, tiene un conjunto de herramientas robustas muy especializadas para hacer la depuración, pruebas, análisis y monitoreo de diferentes maneras. En tal sentido, es muy recomendable estudiarlo y conocer cada nuevo feature que se va agregando constantemente. &lt;/p&gt;

</description>
      <category>devtools</category>
      <category>debugging</category>
    </item>
    <item>
      <title>10 Tips For Launching a Successful SVOD Service</title>
      <author>hermoni versa</author>
      <pubDate>Tue, 07 Dec 2021 11:46:05 +0000</pubDate>
      <link>https://dev.to/hermoniversa/10-tips-for-launching-a-successful-svod-service-3ml</link>
      <guid>https://dev.to/hermoniversa/10-tips-for-launching-a-successful-svod-service-3ml</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.webnexs.com/svod.php"&gt;Subscription Video on Demand&lt;/a&gt;&lt;/strong&gt; is a rapidly growing industry for a variety of reasons. It allows consumers to pay for only the content they want, which is one of the primary reasons why audiences are neglecting cable and other traditional providers. &lt;/p&gt;

&lt;p&gt;Moreover, it provides businesses with a direct line of revenue from consumers without the need to consult with or sell to advertisers. This has the added benefit of freeing users from troubling ad interruptions. SVOD is an excellent solution for businesses that have a dedicated audience that is willing to pay. Businesses that use SVOD make money by selling packaged content in monthly, quarterly, or annual subscriptions and charging their customers a recurring fee. &lt;/p&gt;

&lt;p&gt;In this article, we'll give you some good tips  to help you launch your  successful SVOD service&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#should-you-know-what-svod-is-first"&gt;
  &lt;/a&gt;
  Should you know what SVOD is first?
&lt;/h1&gt;

&lt;p&gt;Subscription video on demand is called SVOD. It allows users to pay a regular price for unlimited access to a huge library of audio and video content for the term of the subscription. For a monthly/annual pay, subscription video on demand (SVOD) services provides access to a library of content, which includes movies, TV series, and other original content. SVOD services are often delivered via streaming, which requires the use of an active internet connection. Netflix and Amazon Prime Video are two major &lt;strong&gt;&lt;a href="https://www.webnexs.com/svod.php"&gt;SVOD businesses&lt;/a&gt;&lt;/strong&gt; that are market leaders. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svod-model-success"&gt;
  &lt;/a&gt;
  SVOD Model Success
&lt;/h2&gt;

&lt;p&gt;A successful SVOD model will generally have the following features: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Automated operations&lt;/strong&gt; – suitable for managing customer accounts, billing plans, and other logistics (product, price and billing frequency, which can grow exponentially as revenues scale). Manually doing these activities is inefficient, a mistake, and time-consuming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Easy-to-understand customer terms and conditions&lt;/strong&gt; -- simple communication ensuring that customer terms and conditions properly explain purchase information and cancelling options. Customer retention is ensured by including customer support contact details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Value proposition&lt;/strong&gt;--A major part of SVOD revenue success is the value proposition. When buying a product or service, customers must believe that they are getting better value for their money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Quick payment methods&lt;/strong&gt; --payments should be as easy as possible. This also applies to any additional measures that need customers to take further steps to activate recurring billing. As a result of these additional options, conversion rates are generally lower.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Larger Profit Margin&lt;/strong&gt;– SVOD delivers larger profit margins than other OTT video monetization options, even with a limited number of users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-following-are-some-helpful-tips-for-launching-an-svod-business"&gt;
  &lt;/a&gt;
  The following are some helpful tips for launching an SVOD business.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#1-prioritize-both-quantity-and-quality-of-content"&gt;
  &lt;/a&gt;
  1. Prioritize both quantity and quality of content
&lt;/h2&gt;

&lt;p&gt;Starting an SVOD service can be ideal for you if you have high-quality content for online consumption. Make sure, though, that you have a substantial library to offer. Content from a variety of genres and categories should also be included.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-make-sure-that-you-have-all-the-necessary-equipment"&gt;
  &lt;/a&gt;
  2. Make sure that you have all the necessary equipment
&lt;/h2&gt;

&lt;p&gt;As a content provider, you must ensure that your audience has access to new content regularly. As a result, you must be financially prepared to regularly acquire or provide new content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-determine-your-speciality"&gt;
  &lt;/a&gt;
  3. Determine your speciality
&lt;/h2&gt;

&lt;p&gt;Finding your speciality also helps in the creation of your company's personal brand. This includes a fantastic website, an easy-to-use platform, and high-quality, original content. Your target audience will be attracted to your brand because of the type of material you give and how simple it is to get that content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-find-the-best-mix-of-monetization-models"&gt;
  &lt;/a&gt;
  4. Find the best mix of monetization models.
&lt;/h2&gt;

&lt;p&gt;The subscription model is the most simple and popular revenue strategy for SVOD. You can, however, combine subscription, transactional, and ad-supported revenue methods to create effectively bundled revenue plans. Choose an appropriate mix and a hybrid revenue model that is most suited for your company and allows you to increase income with reduced expenses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-evaluate-the-opponent"&gt;
  &lt;/a&gt;
  5. Evaluate the opponent
&lt;/h2&gt;

&lt;p&gt;Examine the content of your competition to see what they have to offer. Keep a closer check on what they're buying or investing in when it comes to content. This helps you to spot gaps in your content mix and fill them with expert content that you can charge a premium for. Examine the revenue models of your competitors and design a pricing strategy to draw subscribers. Compare and contrast your content mix with that of your competitors to avoid duplicating content. The first mover always wins when there is a duplication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-application-of-appropriate-technologies"&gt;
  &lt;/a&gt;
  6. Application of appropriate technologies
&lt;/h2&gt;

&lt;p&gt;Choosing the correct technology is one of the most important components of creating a successful SVOD service.&lt;/p&gt;

&lt;p&gt;It's not easy to set up a streaming service. When creating an SVOD service, it's necessary to consider the following factors:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CDN&lt;/strong&gt;: It basically speeds up the rendering of content by distributing it to multiple locations at the same time, giving your consumers better coverage. Including a CDN in your SVOD platform is a wise choice because your content will be displayed faster to your subscribers, resulting in a better viewing experience. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;DRM (Digital Rights Management)&lt;/em&gt;*: Having a DRM system protects your content against unauthorized reproduction. This protects you from piracy while also ensuring a more consistent cash source.&lt;br&gt;
PCI Compliance: Make sure your platform complies with the PCI Security Standards Council. It means the platform must meet the requirements for processing, storing, and securely transmitting payment credentials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-support-live-streaming-api"&gt;
  &lt;/a&gt;
  7. Support Live Streaming API
&lt;/h2&gt;

&lt;p&gt;Make sure your SVOD service includes the option to integrate (API) with live streaming feeds for high-traffic content like live sports or award shows. Regularly, you might want to make your content available via live streaming. Cooking videos, for example, can be live-streamed on a weekly basis. This is an excellent method of promoting your subscription-based business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-decide-on-a-price-range"&gt;
  &lt;/a&gt;
  8. Decide on a price range
&lt;/h2&gt;

&lt;p&gt;One of the most critical things to figure out before the launch is pricing.&lt;/p&gt;

&lt;p&gt;Examine your competitors and see how much other SVOD providers charge. If you're not sure how much to charge for your content, offer a similar price to your competitors. Most streaming services provide two or three subscription options: monthly, quarterly, and annual.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-promote-your-content"&gt;
  &lt;/a&gt;
  9. Promote your content
&lt;/h2&gt;

&lt;p&gt;Using adverts to keep your audience engaged is an excellent method. You should promote premium content and future content on your website to remind your viewers of their favourite shows. The number of views for premium content will rise as a result of this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-before-the-launch-test-everything"&gt;
  &lt;/a&gt;
  10. Before the launch, test everything
&lt;/h2&gt;

&lt;p&gt;Conducting a test to ensure that everything is working properly before launching your business online is a good idea. Before submitting the apps to the store, there are a number of things you should evaluate. Check to see if: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the videos are properly playing&lt;/li&gt;
&lt;li&gt;You like the user interface.&lt;/li&gt;
&lt;li&gt;The website and app have good performance.&lt;/li&gt;
&lt;li&gt;To watch videos, you can pay.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;SVOD is on the rise and shows no signs of slowing. To launch a successful SVOD service, you'll need to develop a strong brand that will connect with your target audience, as well as an effective website with an appealing design and clear customer-focused messaging. To help you build a well-known brand and launch a &lt;strong&gt;&lt;a href="https://www.webnexs.com/svod.php"&gt;successful SVOD business&lt;/a&gt;&lt;/strong&gt;, use the tips listed above.&lt;/p&gt;

</description>
      <category>svodservices</category>
      <category>svodbusiness</category>
      <category>svod</category>
      <category>launchsvodservice</category>
    </item>
    <item>
      <title>I 👿 BRUTALLY 👿 review your crappy sites, first victim is Bhagya Mudgal!</title>
      <author>InHuOfficial</author>
      <pubDate>Tue, 07 Dec 2021 11:41:01 +0000</pubDate>
      <link>https://dev.to/inhuofficial/i-review-your-crappy-sites-first-victim-is-bhagya-mudgal-2cdn</link>
      <guid>https://dev.to/inhuofficial/i-review-your-crappy-sites-first-victim-is-bhagya-mudgal-2cdn</guid>
      <description>&lt;p&gt;Oh dear, I write these angry rants and people are actually silly enough to ask me to review their websites in the comments?&lt;/p&gt;

&lt;p&gt;Strap in as I destroy a young developer's site, with their permission of course!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#they-actually-asked-you-to-do-this"&gt;
  &lt;/a&gt;
  They actually asked you to do this?
&lt;/h2&gt;

&lt;p&gt;Yes, how silly of them! And they did it on &lt;a href="https://dev.to/inhuofficial/dont-add-a-video-background-to-your-landing-page-to-make-it-more-gorgeous-tw-gratuitous-swearing-bja"&gt;one of my angry rants posts&lt;/a&gt; too so I knew they were up for punishment!&lt;/p&gt;


&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/bhagyamudgal"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWrPjWbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VNPhTxBL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/694278/d8c6156a-47ea-466b-8411-44784c670291.png" alt="bhagyamudgal profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/bhagyamudgal"&gt;
        &lt;span class="comment-username"&gt;Bhagya Mudgal&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2 m:pl-0"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/bhagyamudgal/comment/1k4kg" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Nov 28
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;Can you review my Portfolio &lt;a href="https://www.bhagyamudgal.me" rel="nofollow"&gt;bhagyamudgal.me&lt;/a&gt;&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;



&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/inhuofficial"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmbVmdkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HHg2q6g4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_66%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/inhuofficial"&gt;
        &lt;span class="comment-username"&gt;InHuOfficial&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2 m:pl-0"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/inhuofficial/comment/1k4kk" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Nov 28
  &lt;/time&gt;

    • Edited &lt;span&gt;on &lt;time&gt;Nov 28&lt;/time&gt;&lt;/span&gt;
&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;That very much depends, do you want "a review" where I look at your site and give you a few pointers and tips to improve it.&lt;/p&gt;

&lt;p&gt;Or do you want "A REVIEW" where I pick apart every tiny little thing that isn't absolutely perfect with the site and trash you to within an inch of your life making you wonder why you ever thought you wanted to become a developer? (same as this article, anger is for fun!)&lt;/p&gt;

&lt;p&gt;Happy to do either, if you are brave enough to go for the second option I will do a whole article on it...but it will be brutal 🤣!&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;



&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/bhagyamudgal"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWrPjWbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VNPhTxBL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/694278/d8c6156a-47ea-466b-8411-44784c670291.png" alt="bhagyamudgal profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/bhagyamudgal"&gt;
        &lt;span class="comment-username"&gt;Bhagya Mudgal&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2 m:pl-0"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/bhagyamudgal/comment/1k4o5" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Nov 29
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;I want a genuine review so I am ok with 2nd option.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;See I am not lying, they volunteered to be shredded so here goes (angry man rant mode full engaged!)&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Trigger warnings:&lt;/strong&gt; The anger is for fun but the article will be aggressive and there are likely to be swears. If you are sensitive to either of those things then you should leave now! Oh and if you are a fan of TailWind I bash it repeatedly throughout the article, so you have been warned! 😉&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#first-impressions"&gt;
  &lt;/a&gt;
  First Impressions
&lt;/h2&gt;

&lt;p&gt;When I landed on &lt;a href="https://www.bhagyamudgal.me/"&gt;https://www.bhagyamudgal.me/&lt;/a&gt; I was greeted with a pleasing dark theme and a nice waving hand emoji.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOPL8giA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9mtoeqhunmn5phrmp7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOPL8giA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9mtoeqhunmn5phrmp7d.png" alt="Bhagya Mudal (a young man with dark hair and wearing a black shirt) website home page, black background with blue headings and navigation buttons, white text with a picture of Bhagya" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aww bless Bhagya, you even have a picture of your handsome face, which is great.&lt;/p&gt;

&lt;p&gt;But you have fallen into that trap of copying shitty ideas from other developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-be-so-weak-with-your-openings"&gt;
  &lt;/a&gt;
  Don't be so weak with your openings.
&lt;/h3&gt;

&lt;p&gt;First the main heading "Hi👋🏻, I am Bhagya Mudgal". &lt;/p&gt;

&lt;p&gt;Talk about a weak opening! Yes I know who you are your name is in the fucking URL. &lt;/p&gt;

&lt;p&gt;Also I don't really care what you are called yet, I have a problem and I want to know if you can fix it!&lt;/p&gt;

&lt;p&gt;That is immediately followed by a typewriter effect telling me all of the things you are! &lt;/p&gt;

&lt;p&gt;When did developers start thinking that they had to list 50 different attributes to make themselves appear interesting? Are we arrogant enough to think people care or it is even relevant? &lt;/p&gt;

&lt;p&gt;Also do you really expect someone to sit there and wait 20+ seconds to read 5 "interesting" factoids about you?&lt;/p&gt;

&lt;p&gt;Ditch the typewriter effect, only developers think it is good.&lt;/p&gt;

&lt;p&gt;Finally let's talk about that nice picture of that beautiful face of yours in pride of place. &lt;/p&gt;

&lt;p&gt;You look smart and professional which is great.&lt;/p&gt;

&lt;p&gt;Unfortunately it looks like you are in the scope of a sniper due to the circular surround and the line across the background! (I added the red dot just to complete the effect!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DW1SAREn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swbt6nllgsgtfi2iauu7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DW1SAREn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swbt6nllgsgtfi2iauu7.jpg" alt="Bhagya Mudgal on a light background with a line across it. I added a red dot to make it look more like a sniper scope" width="267" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-should-you-do"&gt;
  &lt;/a&gt;
  What should you do!
&lt;/h4&gt;

&lt;p&gt;Bhagya why are you doing this to yourself? &lt;/p&gt;

&lt;p&gt;You were smart enough (or is it stupid enough?!) to ask for a review, how can you not see how weak the first impression is if you just copy crappy developers who have no imagination!&lt;/p&gt;

&lt;p&gt;Rethink this bit. Ask yourself the key questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;why did I build this site, what is my goal?&lt;/li&gt;
&lt;li&gt;what do I want people to do when I finally persuade them to click on my link and visit my site?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the moment the answers are "I don't know" and "look at a pretty animation"?&lt;/p&gt;

&lt;p&gt;Fuck that, I can see you have just started freelancing, that is fucking great! So what do you want?&lt;/p&gt;

&lt;p&gt;My guess is freelancing work! &lt;/p&gt;

&lt;p&gt;But what work? Who do you help? Small businesses, development companies looking for temps and sub contractors? Do you do designs or do you build things from designs?&lt;/p&gt;

&lt;p&gt;Answer those questions before anyone has chance to click that back button. &lt;/p&gt;

&lt;p&gt;I am making this up obviously but something like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I build high quality software and web experiences that drive customer engagement and improve sales&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fuck me, you are the man I need, where is the contact button!&lt;/p&gt;

&lt;p&gt;No seriously, where the fuck is the contact button?&lt;/p&gt;

&lt;p&gt;Don't make me look for the next action. &lt;/p&gt;

&lt;p&gt;If you want me to contact you then place a "contact me" link (styled like a button) right below the opening paragraph. &lt;/p&gt;

&lt;p&gt;Or if you think I will need more information before making a decision then make the link lead to your projects page with the text "See how I can help".&lt;/p&gt;

&lt;p&gt;And for the love of God will you retake that picture (or photoshop out the background line) so you don't look like you are about to eat the wrong end of a .50 cal armour piercing rifle round?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-the-fuck-is-butter-cms"&gt;
  &lt;/a&gt;
  What the fuck is Butter CMS?
&lt;/h3&gt;

&lt;p&gt;I was going to ask you why you were being a cheapskate and allowing advertising on your site. Then I saw the price of butter CMS and realised you were actually smart!&lt;/p&gt;

&lt;p&gt;Fuck me that is some expensive software (that you really don't need!) for a brochure site!&lt;/p&gt;

&lt;p&gt;$333 a month ($399 a month if you don't want to part with $3996 in one go and pay annually!) for a 100 page maximum website? (they want me to pay extra for page 101?) &lt;/p&gt;

&lt;p&gt;Fuck me I will build you a CMS for $299 a month, how is that for a deal?&lt;/p&gt;

&lt;p&gt;Anyway this isn't a rant about Butter, the point is a big fat advert in the corner of your site is very off-putting! &lt;/p&gt;

&lt;p&gt;Ditch that over priced CMS and take the time to find an open source alternative if you want stuff for free!&lt;/p&gt;

&lt;p&gt;I mean, you spend ages writing an article, promoting it on social media, someone likes what you have to say and finally visits your site, excited that you might be able to help them.&lt;/p&gt;

&lt;p&gt;They see the massive and out of place advert, click it and go away from your site. &lt;/p&gt;

&lt;p&gt;They get confused by Heroku and all manner of words they don't understand, see the expensive prices of the CMS and go back to Google.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visitors are hard to get, don't give people a reason to click away ffs!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-fucking-hurt-me-with-your-markup"&gt;
  &lt;/a&gt;
  You fucking hurt me with your Markup
&lt;/h2&gt;

&lt;p&gt;Oh man, you used an SVG as a button for the mobile menu?&lt;/p&gt;

&lt;p&gt;Rather than cover all the ways you fucked up in detail, I already have a rant perfect for your site:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/they-just-won-t-learn-a-button-is-a-lt-button-gt-accessibility-rants-k1b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;They...just...won't...learn 🤦‍♂️ - a button is a &amp;amp;lt;button&amp;amp;gt;! [Series: Accessibility Rants]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ May 27 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Go on, read that shit before you continue!&lt;/p&gt;

&lt;p&gt;Read it? Good! Now please, for the love of God, will you just use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; for a button. It is right there in the name.&lt;/p&gt;

&lt;p&gt;This means that people using assistive technology such as a screen reader when viewing your site on a mobile can still reach your navigation and enjoy your site.&lt;/p&gt;

&lt;p&gt;But that isn't the worst of it!&lt;/p&gt;

&lt;p&gt;You used &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s for your navigation items themselves (on desktop and mobile). Buttons with &lt;code&gt;href&lt;/code&gt;s! It isn't even valid HTML!&lt;/p&gt;

&lt;p&gt;These should be anchors (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;Here is a golden rule to remember what to use - if the URL changes when you click something then it should be an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, otherwise use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally the links to other pages should also be within a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element as they are &lt;strong&gt;navigation&lt;/strong&gt; - the HTML spec peeps really outdid themselves making this element easy to remember.&lt;/p&gt;

&lt;p&gt;Yet again this helps screen reader users as they can then navigate the page by regions and find the navigation easily!&lt;/p&gt;

&lt;p&gt;Here is the Markup you should be using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"md:hidden Other TailWind Attrocities"&lt;/span&gt; &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"main-nav"&lt;/span&gt; &lt;span class="na"&gt;aria-haspopup=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;aria-expanded=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Your SVG for the menu on mobile&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"main-nav"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden md:flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"Arrrgghhh Tailwind mess"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Your SVG for closing the menu&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;aria-current=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/projects"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-button"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/contact"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fucking simple to make things accessible isn't it! &lt;/p&gt;

&lt;p&gt;First thing you will notice is I added &lt;code&gt;aria-current="page"&lt;/code&gt; to the current pages hyperlink.&lt;/p&gt;

&lt;p&gt;Instead of disabling the navigation item for the current page you can just add this attribute to tell screen readers what page they are on!&lt;/p&gt;

&lt;p&gt;What is even more cool is that you can use this for styling with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.nav-button&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;aria-current&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"page"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c"&gt;/*your styles*/&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well you could have done if you hadn't used TailWind! But there will be plenty of opportunity for me to slip in digs at TailWind throughout the article so I will leave that alone for now.&lt;/p&gt;

&lt;p&gt;Now there are a load of weird attributes I added that you might not recognise.&lt;/p&gt;

&lt;p&gt;Don't worry it isn't your fault that courses don't teach you about accessibility so it all looks scary!&lt;/p&gt;

&lt;p&gt;Let me break it down for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;aria-controls="main-nav"&lt;/code&gt; - This associates the button with the navigation so that screen reader users know what this button is related to. The &lt;code&gt;main-nav&lt;/code&gt; part is the &lt;code&gt;id&lt;/code&gt; of the navigation and that is how we make the link.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;aria-haspopup="true"&lt;/code&gt; - This lets screen reader users know that clicking this button will open some sort of modal / window.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;aria-expanded="false"&lt;/code&gt; - This attribute lets screen reader users know the current state of the modal / popup (that we associated earlier with &lt;code&gt;aria-controls&lt;/code&gt;). It should start as &lt;code&gt;aria-expanded="false"&lt;/code&gt; as the menu isn't open. However when the menu opens you need to change this to &lt;code&gt;aria-expanded="true"&lt;/code&gt; to let screen reader users know that the popup is now visible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a couple of other things to note.&lt;/p&gt;

&lt;p&gt;When I press the "open" button and the menu is displayed you should change the focus to land on your "close" button (which I have changed to a button in the same way I did with the open button).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#svg-accessibility"&gt;
  &lt;/a&gt;
  SVG accessibility
&lt;/h4&gt;

&lt;p&gt;Also with SVGs you need to provide a text alternative.&lt;/p&gt;

&lt;p&gt;Basically at the moment your SVGs do not contain any text that a computer can use to announce what the image is about.&lt;/p&gt;

&lt;p&gt;As we are using these images as the contents of buttons we need to give them a programatically determinable name so a screen reader user knows what the open and close buttons do!&lt;/p&gt;

&lt;p&gt;Luckily SVGs have a way of adding accessible names built in, this is the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"close-title"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"close-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Close&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M6 18L18 6M6 6l12 12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will notice how I added the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; as the first element above any paths in your SVG.&lt;/p&gt;

&lt;p&gt;Think of the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; as an &lt;code&gt;alt&lt;/code&gt; attribute on an image.&lt;/p&gt;

&lt;p&gt;The only other thing to note is that I used &lt;code&gt;aria-labelledby&lt;/code&gt; and pointed that to the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This is just a way to make the SVG more robust for screen readers.&lt;/p&gt;

&lt;p&gt;Finally I added &lt;code&gt;role="img"&lt;/code&gt;. This tells the browser to treat this SVG like an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element and is just another thing we have to do to make it more robust.&lt;/p&gt;

&lt;p&gt;I know that is a lot to take in but as long as you remember to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add &lt;code&gt;role="img"&lt;/code&gt; to the SVG element, &lt;/li&gt;
&lt;li&gt;add a &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element with a suitable description, &lt;/li&gt;
&lt;li&gt;give the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element a unique ID &lt;/li&gt;
&lt;li&gt;use &lt;code&gt;aria-labelledby&lt;/code&gt; to point to that ID &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;you will be fine, even if you don't understand the exactly why at this stage.&lt;/p&gt;

&lt;p&gt;Finally you should also trap focus within the menu but that is complicated and something for another day, especially as this is a mobile menu so it is less relevant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-new-sin"&gt;
  &lt;/a&gt;
  A new sin!
&lt;/h3&gt;

&lt;p&gt;Here is one I haven't covered before in any of my writing. &lt;/p&gt;

&lt;p&gt;You put a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;...in an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; on your projects page?!?&lt;/p&gt;

&lt;p&gt;What on Earth is that about?&lt;/p&gt;

&lt;p&gt;Your poor browser will be screaming!&lt;/p&gt;

&lt;p&gt;"Ok did he click the button, or the anchor. What should I do? Should I fire both or just one? Who am I? What day is it? Why did you do this too me, why?" - your poor browser&lt;/p&gt;

&lt;p&gt;As an added side effect of this atrocity it means that when tabbing through the page every single linkbutton (a new term! you invented a new shitty element!) has 2 tab stops.&lt;/p&gt;

&lt;p&gt;As each card has 2 linkbuttons within it you have added so many additional tab stops that I got fucking Repetitive Strain Injury (RSI) reviewing your crappy site!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never&lt;/strong&gt; nest interactive elements (well almost never but that is a long and nuanced conversation). &lt;/p&gt;

&lt;p&gt;Ditch the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; inner container in favour of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; as the outer anchor (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) is the right element to use here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contact-page"&gt;
  &lt;/a&gt;
  Contact Page
&lt;/h2&gt;

&lt;p&gt;You added labels to your form! You even put them in the right place (just above the relevant input and aligned to the left)&lt;/p&gt;

&lt;p&gt;I was starting to forgive you for the button fiasco and my heart rate had dropped below 150 Beats Per Minute (BPM) finally. Then I noticed that you didn't associate the label with an input! 🤦‍♂️&lt;/p&gt;

&lt;p&gt;Are you trying to give me a fucking heart attack? My heart's BPM is back over 180 now!&lt;/p&gt;

&lt;p&gt;Web Development 101: You need to give your inputs IDs. Then on the relevant label you add &lt;code&gt;for="IdOfRelevantInput"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Really fucking easy!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col my-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"nameInput"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"TailWind Bullshit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nameInput"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"More TailWind Bullshit"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter Your Name"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this does is make sure that a browser can tell a screen reader "this input is linked to this label so please say "Name" to describe this field".&lt;/p&gt;

&lt;p&gt;Oh and by doing that you will be able to click on the label to focus the input as well as the input itself, which is really handy if you are someone with accuracy / dexterity problems (i.e. someone with Parkinson's Disease or Cerebral Palsy).&lt;/p&gt;

&lt;p&gt;There are other problems like the fact that the error messages are not linked to the input, your inputs don't indicate they are invalid etc. etc. but let's start with the basics and link the inputs together first, I can help you with that stuff later or you can read up on making forms accessible.&lt;/p&gt;

&lt;p&gt;Oh and just a heads up, a certain angry accessibility guy not too far from here is going to release a monster article on forms in the next 2 weeks so you may want to keep an eye out for that as it will probably cover all the bits you need to know (and more besides!) 😃!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-page"&gt;
  &lt;/a&gt;
  About Page
&lt;/h2&gt;

&lt;p&gt;Yes I know I am not going in order, tough shit! I like making you have to think!&lt;/p&gt;

&lt;p&gt;Now being really brutal you have to ask: Is the about page actually relevant?&lt;/p&gt;

&lt;p&gt;Well yet again I do not know the goal of the site. If you are looking for love then you are certainly on the right track as this would make an excellent dating profile.&lt;/p&gt;

&lt;p&gt;But if you are looking for work, or looking to get more readers etc. then you need to cut the crap that doesn't matter.&lt;/p&gt;

&lt;p&gt;I like to ask myself the following question when writing copy:&lt;/p&gt;

&lt;p&gt;"Does this tell the person reading it one of the benefits of using my services / reading my stuff" etc.&lt;/p&gt;

&lt;p&gt;In this instance I will offer two variations:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-want-more-readers"&gt;
  &lt;/a&gt;
  You want more readers
&lt;/h3&gt;

&lt;p&gt;"I am a student in New Delhi with a passion for writing.&lt;/p&gt;

&lt;p&gt;I like to write about the MERN stack due to my extensive experience using it in personal projects, for client work and in open source projects.&lt;/p&gt;

&lt;p&gt;I also like to write about my journey and experiences when learning to use new technologies, as I believe this may be useful to others.&lt;/p&gt;

&lt;p&gt;If this is the sort of thing you like to read about then why not connect with me, I love making new friends in the developer community and seeing how we can help and learn from each other:"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-want-freelance-work-from-other-developers"&gt;
  &lt;/a&gt;
  You want freelance work from other developers
&lt;/h3&gt;

&lt;p&gt;"I am a college student by day and freelancer by night.&lt;/p&gt;

&lt;p&gt;I have created several site clones and helped several clients bring their ideas to life. "You can check out some of my work here" (link to projects and add any client work you have done).&lt;/p&gt;

&lt;p&gt;As a student I am able to offer a fresh perspective on common problems and utilise the latest technologies to help you achieve your end goals.&lt;/p&gt;

&lt;p&gt;I am proficient with [list of 3/4 core items] and can quickly pick up new frameworks if the need arises."&lt;/p&gt;

&lt;p&gt;Hopefully you get the idea, focus in on one thing. There is a saying "Jack of all trades, master of none" here in the UK. It basically means you haven't learned how to do one thing well and so do lots of things to an average or poor level. &lt;/p&gt;

&lt;p&gt;This leads me onto the massive list of technologies on the about page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkR7JM9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz799mt4277xe7gdhen9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkR7JM9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz799mt4277xe7gdhen9.png" alt="A total of 22 different logos over 4 rows with no explanations of what technologies these logos relate to" width="735" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It isn't helpful, it actually hurts you. Do you know what people think when they see all of those icons, "What a talented young man who can do everything".&lt;/p&gt;

&lt;p&gt;No I am fucking kidding, they think "yeah right, a student who has worked with all of those technologies is going to know how to do "hello world" at best in each of them and won't be any use!".&lt;/p&gt;

&lt;p&gt;I have no doubt you can do more than hello world in each of those technologies, but you should focus on the ones your are particularly strong on and show maybe 5 / 6 key ones to people.&lt;/p&gt;

&lt;p&gt;Also I would recommend changing them to be a list with the icon for the technology to the left and then the name of the technology and an example of your work with the technology (if applicable).&lt;/p&gt;

&lt;p&gt;This is due to the simple rule of "don't make people think". I was looking at those icons and it took me a few seconds to recognise some of them, and I have been at this for years. &lt;/p&gt;

&lt;p&gt;People have short attention spans and so they will only glance at the icons and then move on, possibly missing the very technology that will trigger them to think "ah, Bhagya uses that and we need someone to do XXX" and get you some work!&lt;/p&gt;

&lt;p&gt;A final thought here is if you want work from small businesses you need to scrap this page entirely as it stands.&lt;/p&gt;

&lt;p&gt;They do not care about tech stacks, small business owners care about what pain points you can fix. &lt;/p&gt;

&lt;p&gt;So if you are after work from small business owners focus on how you can bring them customers, fix problems with their current sites, help bring their next big idea to life etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blogs"&gt;
  &lt;/a&gt;
  Blogs!
&lt;/h2&gt;

&lt;p&gt;Now we are talking, some of your writing!&lt;/p&gt;

&lt;p&gt;Now before I tear you a new one over your shitty code once again let me just say you write well and I enjoyed your articles!&lt;/p&gt;

&lt;p&gt;Sorry, I don't know what came over me, back to the rant!&lt;/p&gt;

&lt;p&gt;First the blog landing page, &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; heading, check! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn-JrnCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/toewrpbpv8f6gsz6cfb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn-JrnCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/toewrpbpv8f6gsz6cfb9.png" alt="3 blog post cards in light blue on black background, they contain a published date, title, brief description and author information" width="880" height="431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A list of blog posts...yeah but in a load of nested divs!&lt;/p&gt;

&lt;p&gt;If something is a list, use a fucking list!&lt;/p&gt;

&lt;p&gt;Wrap your posts in a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; and make it easier for people using assistive tech (as it will then announce the number of posts...same principle as the navigation part I mentioned earlier!)&lt;/p&gt;

&lt;p&gt;Also your article "headings" are just styled to look like headings.&lt;/p&gt;

&lt;p&gt;By adding a &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; to contain your headings instead of &lt;code&gt;&amp;lt;p class="text-gray-800 text-xl font-medium mt-4 mb-2 break-words"&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; it means that people using a screen reader can also navigate by heading levels (the most popular way to navigate a site!)&lt;/p&gt;

&lt;p&gt;It is also good for SEO!&lt;/p&gt;

&lt;p&gt;Also do we really need the fucking "click to read more" in 2021? Meh, minor point but I would ditch that.&lt;/p&gt;

&lt;p&gt;Finally just as an observation but why have you got an author at the bottom of your posts? They are all written by you what is the fucking point? Are you thinking people are going to guest blog for you with your 12 visitors a month? &lt;/p&gt;

&lt;p&gt;Wait until you scale this blog up to be a monster, then add the author info to the blog cards!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-an-actual-post"&gt;
  &lt;/a&gt;
  Now an actual post
&lt;/h3&gt;

&lt;p&gt;Yet again it starts promising, you used a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; for the first heading (honestly I shouldn't be fucking impressed by this but as so many sites fuck this up I suppose I better praise you!)&lt;/p&gt;

&lt;p&gt;Now onto the article headings and...they are &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;Why oh fucking why would you do that? What made you think "oh yeah start with a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and then skip to a &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; that makes sense!"&lt;/p&gt;

&lt;p&gt;Do you not like &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;s? Are you h2phobic?&lt;/p&gt;

&lt;p&gt;Fix this shit, don't skip heading levels!&lt;/p&gt;

&lt;p&gt;The irony that one of your articles is called "Signs that bad programmers have" while skipping fucking heading levels is beyond funny, thanks for the laugh!&lt;/p&gt;

&lt;p&gt;The final thing to mention is the publication date. &lt;/p&gt;

&lt;p&gt;This should be located within a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time"&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; element. This is just good practice!&lt;/p&gt;

&lt;p&gt;When using the &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; element you should also set the &lt;code&gt;datetime&lt;/code&gt; attribute on the element so that computers can understand the date you have entered. So for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2021-09-12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sun Sep 12 2021&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;You have made fewer mistakes than most "senior" developers so I suppose you deserve some praise for not being as shitty as everyone else.&lt;/p&gt;

&lt;p&gt;Obviously there are still more things I haven't slated you for and I don't want to miss my chance!&lt;/p&gt;

&lt;p&gt;These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lack of &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element&lt;/li&gt;
&lt;li&gt;The fact your site "only" scores 90 / 100 on &lt;a href="https://web.dev/measure"&gt;web.dev/measure&lt;/a&gt; - but that is because you are using Client Side Rendering for a brochure site and that is just stupid! Don't worry though you are certainly not alone in this and 90 is respectable enough!&lt;/li&gt;
&lt;li&gt;The fact you don't use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt; detection or a way to switch off animations to make sure animations are reduced for people with vestibular disorders.&lt;/li&gt;
&lt;li&gt;The lack of relevant &lt;code&gt;WAI-ARIA&lt;/code&gt; attributes on your contact form that I mentioned earlier.&lt;/li&gt;
&lt;li&gt;using white text on a black background is just as fucking blinding as black text on a white background - find a slightly softer palette ffs! (Yes I am complaining your site has &lt;strong&gt;too much&lt;/strong&gt; contrast...get over it!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can tell I could go on and on and on telling you how many things you fucked up, but I feel like I have done enough damage for one day! &lt;/p&gt;

&lt;p&gt;Hopefully I have succeeded in destroying your site as requested!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You're fucking welcome!&lt;/strong&gt; 😂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#being-serious-for-a-second"&gt;
  &lt;/a&gt;
  Being serious for a second
&lt;/h2&gt;

&lt;p&gt;Ok the angry man rants are switched off now, I wanted to give my honest opinion.&lt;/p&gt;

&lt;p&gt;I just want to say Bhagya, the site is nice and simple and gets the point across well. &lt;/p&gt;

&lt;p&gt;It may look like a long list but honestly you have done quite well.&lt;/p&gt;

&lt;p&gt;The site is reasonably easy to use with a keyboard, the colour contrast is pretty good, the navigation is clear etc.&lt;/p&gt;

&lt;p&gt;One thing that is hard to get across in angry rants is where the important fixes are. &lt;/p&gt;

&lt;p&gt;The 3 things that you should tackle first from an accessibility perspective are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the labels not being associated with the inputs&lt;/li&gt;
&lt;li&gt;the skipping heading levels problem&lt;/li&gt;
&lt;li&gt;the nested / misuse of buttons and links.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fix those and the site becomes much more usable for people using a screen reader.&lt;/p&gt;

&lt;p&gt;Oh, and I am serious about that picture on the home page, you look really smart but also really like you are about to be taken out due to the unfortunate line behind you! 🤣&lt;/p&gt;

&lt;p&gt;Thanks for letting me unleash the angry man on your site, it was fun (and therapeutic!). &lt;/p&gt;

&lt;p&gt;If you have any questions just let me know and I will try and help / point you to useful information on how to fix stuff.&lt;/p&gt;

&lt;p&gt;Thanks for being my first victim and good luck with the BCA and freelancing!&lt;/p&gt;





&lt;center&gt;&lt;b&gt;Who's next? Anyone else want their site ripping to shreds? Step right up!&lt;/b&gt;&lt;/center&gt;



&lt;p&gt;Oh and I have a super important post going out later today so stay tuned - titled "1000 days to £1million - this should be fun!" so check that out please!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>a11y</category>
      <category>html</category>
    </item>
    <item>
      <title>Establishing Your Cloud Foundation on AWS | AWS White Paper Summary</title>
      <author>Adit Modi</author>
      <pubDate>Tue, 07 Dec 2021 11:37:20 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/establishing-your-cloud-foundation-on-aws-aws-white-paper-summary-11pp</link>
      <guid>https://dev.to/awsmenacommunity/establishing-your-cloud-foundation-on-aws-aws-white-paper-summary-11pp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The increasing breadth and depth of cloud services makes the cloud a powerful enabler of efficiency, agility, and rapid innovation. However, building a foundational AWS Cloud environment requires decisions across multiple AWS and partner products, services, and solutions. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customers are looking for guidance to help them set up and operate an environment that is compatible with their IT practices, and enables their builders and operators while adhering to governance requirements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This whitepaper introduces a guided path approach to help customers build and evolve their AWS Cloud environment based on a consolidated set of definitions, use cases, guidance, and automations. The approach includes people, process, and technology considerations of establishing an AWS Cloud environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The primary business drivers behind moving to the cloud include greater agility, innovation, and scale. When planning a cloud adoption strategy, the number of decisions that you need to make to stand up a production-ready cloud environment is significant. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decisions that are made early on can affect your ability to enhance and/or scale your environment in the future. This complexity has led customers to look for prescriptive guidance across the range of AWS services that can be used to create a foundational environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Establishing a cloud foundation on AWS requires guidance tailored to your business needs. Using a capability-based approach, you can create an environment to deploy, operate, and govern your workloads. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also enhance the capabilities to extend your environment as your requirements evolve and you deploy additional workloads to the cloud.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Building a foundational environment on AWS can be done with a standard, prescriptive set of capabilities across different functional areas. These capabilities can be used as a structured way to quickly build or expand your AWS Cloud environment, and include use case scenarios and corresponding guidance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can adopt and implement capabilities according to your operational and governance needs. As your business requirements mature, the capability-based approach can be used as a mechanism to verify that your cloud environment is ready to support your workloads and scale as needed. This approach enables you to confidently establish your cloud environment for your builders and your business.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#capabilities"&gt;
  &lt;/a&gt;
  Capabilities
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;To support cloud adoption, AWS recommends that you have a foundational set of capabilities that enable you to deploy, operate, and govern your workloads.&lt;/li&gt;
&lt;li&gt;A capability includes a definition, use case scenarios, opinionated guidance, and supporting automation to establish and operate a specific part of a cloud environment. &lt;/li&gt;
&lt;li&gt;Capabilities are components that can help you plan, implement, and operate your cloud environment, and include people, process, and technology considerations. Capabilities are designed to integrate into your overall technology environment.&lt;/li&gt;
&lt;li&gt;In addition to technology implementation guidance, capabilities include operational guidance (for instance, notifications, event handling, and remediation, as well as team resource skills and processes) needed to stand up and operate each capability. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS has defined a set of 30 capabilities to help you establish a cloud foundation. One way to categorize these capabilities is by functional areas which can help you identify accountable owners and stakeholders in the development, operations, and governance of capabilities. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each capability includes stages of maturity that enable you to implement based on where you are in your cloud journey, including your governance and operational requirements. As your cloud environment grows and matures, the capabilities can be enhanced to meet your new requirements.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#capabilities-definitions"&gt;
  &lt;/a&gt;
  Capabilities definitions
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This section includes high-level definitions for each foundational capability organized by their primary functional area. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Security functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Identity Management &amp;amp; Access Control&lt;/strong&gt; enables your teams to efficiently build and centrally manage the access to your cloud platform environment. The capability enables you to structure your organization, organize your accounts, and set up access to your environment based on a least-privilege model.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Log Storage&lt;/strong&gt; enables you to securely collect and store environment logs centrally within tamper resistant storage. This capability enables you to later evaluate, monitor, alert, and audit access and actions performed on your AWS resources and events.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data Isolation&lt;/strong&gt; enables you to limit access to data at rest and in transit so that data is only accessible to appropriate, authorized entities. This capability also includes the ability to detect misuse and/or unauthorized access, leak, and theft of data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Encryption and Key Management&lt;/strong&gt; refers to the ability to centrally manage encryption keys for different workloads, and the ability to encrypt data at rest and in transit. Access to keys is provided based on least privilege, and usage is monitored to report any anomalies. This capability also includes different patterns of rotation based on requirements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Secrets Management&lt;/strong&gt; applies to managing secrets (access credentials) such as passwords, access keys, other API keys, X.509, or SSH private keys. This capability incudes storage, access control, access logging, revocation, and rotation aspects for managing secrets.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security Incident Response&lt;/strong&gt; enables you to respond to a security incident. Based on decisions specified in policy, the response involves characterizing the nature of the incident and making changes (which may involve activities including restoration of operational status, identification and remediation of root cause, and gathering evidence pursuant to civil or criminal prosecution).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Forensics&lt;/strong&gt; involve the analysis of log data and evidentially-captured images of potentially compromised resources, to determine whether a compromise occurred (and if so, how). Outcomes of root cause analysis resulting from forensic investigations are typically used to produce and motivate the application of preventative measures.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Patching&lt;/strong&gt; is the ability to deploy sets of changes to update, fix, and/or enhance the operation and security properties of workloads. This includes addressing security vulnerabilities, bug fixes, and other related work. The scope of patching includes operating systems, applications, and any relevant software systems.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vulnerability &amp;amp; Threat Management&lt;/strong&gt; is the ability to identify vulnerabilities that can affect the environment (availability, performance, or security). This capability enables you to assess the impact and scope (e.g., blast radius) of vulnerabilities and threats, and address/remediate them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Workload Isolation Boundary&lt;/strong&gt; enables you to create and manage isolated environments to contain your newly created or migrated workloads. This approach reduces blast radius of vulnerabilities and threats, and eases the complexity of compliance by providing mechanisms to isolate access to resources.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#central-it"&gt;
  &lt;/a&gt;
  Central IT
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Central IT functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Template Management&lt;/strong&gt; is the ability to create and group reusable templates in a central repository to quickly deploy, manage, and update infrastructure, schemas, golden images, and resources across the environment. This capability includes the necessary processes to create, test, update, and validate the templates when required. These templates are pre-approved implementation patterns using already approved and onboarded AWS services, and are ready to be used by different teams based on requirements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tagging&lt;/strong&gt; enables you to group sets of resources by assigning metadata to cloud resources for a variety of purposes. These purposes include access control (e.g., ABAC), cost reporting, and automation (e.g., patching for select tagged instances). Tagging can also be used to create new resource constructs for visibility or control (e.g., grouping together resources that make up a microservice, application, or workload). Tagging is fundamental to providing enterprise-level visibility and control.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Metadata Sorting/Searching&lt;/strong&gt; is the ability to search and filter based on metadata applied to tagged resources within your environment. These resources can be accounts, or resources within these accounts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Service Onboarding&lt;/strong&gt; is the ability to review and approve AWS services for use based on consideration of internal, compliance, and regulatory requirements. This capability includes risk assessment, documentation, implementation patterns, and the change communication aspects of service consumption.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Records Management&lt;/strong&gt; enables you to set retention of data according to your internal policies and regulatory requirements, including how to transition data to archive before it is deleted. This data can include financial records, transactional data, audit logs, business records, personally identifiable information (PII), or other data subject to retention policies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data De-Identification&lt;/strong&gt; is the ability to anonymize subsets of data and information as they are stored and processed to reduce their sensitivity (for example, national ID numbers, trade data, healthcare information), and when required, preserving the underlying data format. This capability also includes the ability to tokenize data (such as credit card numbers, physical address, health care records) to reduce the need to access the underlying sensitive data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Logging &amp;amp; Monitoring&lt;/strong&gt; is the ability to gather and aggregate security and operational data about system and application activities, including near-real-time analysis of data to identify anomalies, indicators of compromise, performance issues, and configuration changes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Governance&lt;/strong&gt; is the ability to implement executive board policies that your AWS Cloud environment must adhere to. This policy includes the rules for your environment, defines risks, and informs alignment of internal policies. As your cloud foundation matures, a portion of this capability is embedded in all other capabilities to ensure adherence to governance requirements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Audit &amp;amp; Assessment&lt;/strong&gt; is the gathering and organizing of documentary evidence to enable internal or independent assessment of your cloud environment, and activities within it, against standards (including information about who accessed what, when, and from where, and what changes happened). This capability allows you to validate assertions that all changes were performed in accordance with policy and via appropriate workflow mechanisms.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Change Management&lt;/strong&gt; enables you to deploy planned alterations to all configurable items that are in an environment within the defined scope, such as production and test. An approved change is an action which alters resource configuration that is implemented with a minimized and accepted risk to existing IT infrastructure.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#operations"&gt;
  &lt;/a&gt;
  Operations
&lt;/h2&gt;

&lt;p&gt;Operations functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Support&lt;/strong&gt; is the ability to troubleshoot an environment, ask questions, submit tickets, integrate into existing ticketing systems, and escalate issues to an appropriate entity for a timely response depending on criticality and support level. Support may also require granting ability to access relevant resources to perform troubleshooting and remediation activities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Rollout/Rollback&lt;/strong&gt; is the defined strategy to roll out application or configuration changes to the environment, or roll back these changes in case of failure. Application and configuration changes can include updated permissions, new policies, new or updated network configuration, new version of the application, or updated software development kits. These configuration changes can also include modifications to the orchestration framework that deploy these changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Backup&lt;/strong&gt; is the ability to make reliable copy of data in a reliable way for retrieval as needed to meet business and security goals, Recovery Point Objective (RPO), and Recovery Time Objective (RTO). Content to be backed up includes: orchestration framework data and configuration, application data, logs, and customer data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Disaster Recovery&lt;/strong&gt; involves the use of automated mechanisms to resume processing of transactions hosted in one physical environment, in a different physical environment in the event that the physical environment where the transactions were originally being processed becomes unexpectedly unavailable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#software-engineering"&gt;
  &lt;/a&gt;
  Software Engineering
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Software Engineering functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Developer Experience &amp;amp; Tools&lt;/strong&gt; includes the tools and processes required for developers to build and deploy workloads easily to the cloud. This capability spans from storing code, to building workflows, to promoting workloads from test to production environment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Application Security&lt;/strong&gt; encompasses the protection of application software, and the detection of anomalous behavior in the context of the applications’ interactions with clients. Threats to be addressed include unauthorized access, privilege escalation, and other application-level threats typically characterized in threat frameworks.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Network functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Network Security&lt;/strong&gt; enables you to design and implement security policies and controls across different levels of the networking stack to protect your resources from external or internal threats to ensure confidentiality, availability, integrity, and usability. This capability includes prevention, detection, and blocking of anomalous network traffic based on monitoring of ingress/egress and lateral data movement.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Network Connectivity&lt;/strong&gt; enables you to design, build, and manage a secure and highly available network cloud infrastructure. This capability provides best practices and resources to automate network infrastructure build, configuration, and expansion.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#finance"&gt;
  &lt;/a&gt;
  Finance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Finance functional area capabilities include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cloud Financial Management&lt;/strong&gt; provides the ability to manage and optimize your variable expense for cloud services. This capability includes near real-time visibility as well as cost and usage analysis to support decision making (e.g., spend dashboards, optimization, spend limits, chargeback, anomaly detection and response). This capability also includes budget and forecasting, to enable you to have a defined cost optimized architecture for your workloads, to select right pricing model, attributing cost of resources to the relevant teams. This enables you to track, notify, and apply cost optimization techniques across your environment and resources. Expense information is centrally managed and consumed, and access to critical stakeholders can be provided for targeted visibility and decision making.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resource Inventory Management&lt;/strong&gt; enables visibility and configuration of cloud- based resources that make up an IT-level service or workload. Resources are tracked in the environment along with associated configurations via a system of record (e.g., CMDB for ITSM-managed environments) to enable a larger IT-level system of record for visibility and configuration management of all software, hardware, and firmware resources in the cloud environment.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#working-with-the-capabilities"&gt;
  &lt;/a&gt;
  Working with the capabilities
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each organization’s cloud adoption journey is unique. To successfully build your cloud environment, you need to understand your organization’s current state, the target state, and the transition required to achieve the target state. As you work on your plan to establish your environment, capabilities can help you drive the conversation and decisions across relevant stakeholders (identified by the functional areas for each capability).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following graph shows a path that you can follow when planning your environment. It’s based on dependencies between capabilities, and can be used to create a project plan for the implementation of capabilities in your environment. In addition to the dependencies shown (via the arrows), some capabilities apply to the overall environment (for example, Governance, and Audit &amp;amp; Assessment).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JyxDr5DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogoeemm9s72aykdptwf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JyxDr5DP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogoeemm9s72aykdptwf0.png" alt="Image description" width="627" height="421"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Capability dependency guided path&lt;/em&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;If you are still exploring the cloud, AWS recommends that you deploy a few proof-of- concepts (POCs) to demonstrate business value to your stakeholders. &lt;/li&gt;
&lt;li&gt;If you are ready to start building a cloud environment to host your workloads on the cloud, this set of defined capabilities can help you build your foundational cloud environment. &lt;/li&gt;
&lt;li&gt;Before getting started with your cloud adoption, AWS recommends that you complete the following activities, and reach out to your account team for more information:

&lt;ul&gt;
&lt;li&gt;Review the list of capabilities and create a timeline for implementing capabilities, accounting for any dependencies.&lt;/li&gt;
&lt;li&gt;Identify the stakeholders in your organization that are responsible for each capability.&lt;/li&gt;
&lt;li&gt;Create an implementation plan and a timeline to build your cloud environment.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;As your requirements change, to help you grow your presence in the AWS Cloud, you can use the defined capabilities to build your own approach using your own tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This whitepaper introduces a capability-based approach to establishing the foundation for your AWS environment, and helps you identify the relevant stakeholders needed to make important decisions along your journey. &lt;/li&gt;
&lt;li&gt;The defined capabilities in this paper are based on current AWS best practices, and the experience of thousands of customers that have built their foundational environment on the AWS Cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/establishing-your-cloud-foundation-on-aws.pdf?did=wp_card&amp;amp;trk=wp_card"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
