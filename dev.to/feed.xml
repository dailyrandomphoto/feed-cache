<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to build a cryptocurrency dashboard in 10 minutes using ToolJet</title>
      <author>Sherfin Shamsudeen</author>
      <pubDate>Thu, 18 Nov 2021 11:02:19 +0000</pubDate>
      <link>https://dev.to/sherfin94/how-to-build-a-cryptocurrency-dashboard-in-10-minutes-using-tooljet-11i2</link>
      <guid>https://dev.to/sherfin94/how-to-build-a-cryptocurrency-dashboard-in-10-minutes-using-tooljet-11i2</guid>
      <description>&lt;p&gt;In this tutorial, I will walk you through building a cryptocurrency dashboard in less than 10 minutes, using the &lt;strong&gt;ToolJet&lt;/strong&gt; platform. ToolJet is a free, open-source, low-code platform that allows you to quickly build tools(&lt;a href="https://github.com/ToolJet/ToolJet"&gt;https://github.com/ToolJet/ToolJet&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.tooljet.io/applications/crypto"&gt;Here&lt;/a&gt; is the final application that you would have at the end of this tutorial. (This dashboard was created with desktop screens in mind, please make sure you open it from your desktop).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Get ToolJet&lt;/strong&gt;&lt;br&gt;
You can run ToolJet locally or you can create a free ToolJet cloud account (which will be the easiest way to get started).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Create an application&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nuxcAFwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/createApplication-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nuxcAFwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/createApplication-2.gif" alt="" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Create a query to list the major cryptocurrencies&lt;/strong&gt;&lt;br&gt;
I'm using the API provided by &lt;a href="https://coinstats.app/"&gt;coinstats.app&lt;/a&gt;, feel free to use any other API you'd like.&lt;br&gt;
API-URL: &lt;br&gt;
&lt;code&gt;https://api.coinstats.app/public/v1/coins?skip=0&amp;amp;limit=100&amp;amp;currency=USD&lt;/code&gt;&lt;br&gt;
And I'm calling it &lt;code&gt;coinList&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HLLgVVjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/createQuery1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLLgVVjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/createQuery1.gif" alt="" width="880" height="427"&gt;&lt;/a&gt;&lt;br&gt;
And make the query run whenever the application is opened:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zoux6iH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/runOnLoad.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zoux6iH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/runOnLoad.gif" alt="" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Add a table and list all the coins on it&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H9zYI2rP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/addTable-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H9zYI2rP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/addTable-1.gif" alt="" width="880" height="358"&gt;&lt;/a&gt;&lt;br&gt;
The data returned by the query can be fed into the table using its inspector panel which opens up when you click on the table component's handle. Make sure that you've run the query by pressing the play button next to its name, otherwise, the query's data wont be available.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmzn-iKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/table-config.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmzn-iKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/table-config.gif" alt="" width="880" height="358"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 4: Create a query to fetch historical price data&lt;/strong&gt;&lt;br&gt;
The table row which was last clicked by the user is available in the global variable &lt;code&gt;components&lt;/code&gt; as &lt;code&gt;components.table1.selectedRow&lt;/code&gt;. Therefore the id of the coin that the user clicked last is available as &lt;code&gt;components.table1.selectedRow.id&lt;/code&gt;. &lt;em&gt;(Note that &lt;code&gt;table1&lt;/code&gt; is the name of the table, if you change this, the above code fragment will also change accordingly).&lt;/em&gt;&lt;br&gt;
The URL for the query shall therefore be: &lt;code&gt;https://api.coinstats.app/public/v1/charts?period=1m&amp;amp;coinId={{components.table1.selectedRow.id}}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's call this query &lt;code&gt;monthData&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dJ7udM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.tooljet.com/content/images/2021/11/query2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dJ7udM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.tooljet.com/content/images/2021/11/query2.png" alt="" width="880" height="516"&gt;&lt;/a&gt;&lt;br&gt;
Click on one of the rows of the table and run the &lt;code&gt;monthData&lt;/code&gt; query to ensure that the query has run and therefore that its response is available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Make sure that the query is run whenever a row is clicked&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AVpqucBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/onSelectRunQuery.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AVpqucBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/onSelectRunQuery.gif" alt="" width="880" height="378"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 6: Add a chart to visualize price history&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHGJr-9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/addChart.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHGJr-9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/addChart.gif" alt="" width="880" height="378"&gt;&lt;/a&gt;&lt;br&gt;
The chart takes in data in the format &lt;code&gt;[{x: 1, y: 1}, {x: 2, y: 2},..]&lt;/code&gt;.&lt;br&gt;
We can use this snippet to convert the response of our &lt;code&gt;monthData&lt;/code&gt; API to this format, where &lt;code&gt;x&lt;/code&gt; values are day numbers and &lt;code&gt;y&lt;/code&gt; values are the price of the coin in US dollars.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;monthData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}))}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HM51xIEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/chartData-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HM51xIEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/chartData-1.gif" alt="" width="880" height="378"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;OPTIONAL: Step 7: Repeat step 4 to step 6 to visualize weekly price history as well&lt;/strong&gt;&lt;br&gt;
This time, for &lt;strong&gt;step 4,&lt;/strong&gt; the URL would become &lt;code&gt;https://api.coinstats.app/public/v1/charts?period=1w&amp;amp;coinId={{components.table1.selectedRow.id}}&lt;/code&gt; as we need to get data for one week instead of one month.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;step 5&lt;/strong&gt;, the query to be run will be the newly created &lt;code&gt;weekData&lt;/code&gt; query.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;step 6&lt;/strong&gt;, the code snippet would become the following, &lt;em&gt;as the query name is different as well as, instead of day, this endpoint brings us price per hour of the coin, hence the variable 'day' is renamed to 'hour'.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;weekData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}))}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tIR-N8r1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.tooljet.com/content/images/2021/11/image-12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tIR-N8r1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.tooljet.com/content/images/2021/11/image-12.png" alt="" width="880" height="298"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 8: Save, deploy and launch the application!&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15Y7Zxou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15Y7Zxou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/demo.gif" alt="" width="880" height="379"&gt;&lt;/a&gt;&lt;br&gt;
Done!, we now have a fully functional cryptocurrency dashboard!.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optional-make-the-dashboard-look-a-little-better"&gt;
  &lt;/a&gt;
  Optional: Make the dashboard look a little better
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Styling the table&lt;/strong&gt;&lt;br&gt;
The appearance of the table can be configured from the inspector panel.&lt;br&gt;
Click on the table, on the inspector panel that opened up on the right, make the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Turn off 'Show search box'&lt;/li&gt;
&lt;li&gt;Turn on 'Highlight selected row'&lt;/li&gt;
&lt;li&gt;Change 'Table type' to borderless&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may also adjust the width of the columns to make the table look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgOIdf4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.tooljet.com/content/images/2021/11/image-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgOIdf4V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.tooljet.com/content/images/2021/11/image-15.png" alt="" width="880" height="224"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Loading icons and titles for the charts&lt;/strong&gt;&lt;br&gt;
To show loading icons on the charts, simply fill in their &lt;code&gt;Loading state&lt;/code&gt; field on the inspector with &lt;code&gt;{{queries.monthData.isLoading}}&lt;/code&gt; for the month level chart and &lt;code&gt;{{queries.weekData.isLoading}}&lt;/code&gt; for the week level chart. The &lt;code&gt;isLoading&lt;/code&gt; variable is made available with every query, and it indicates whether the query is loading or not.&lt;/p&gt;

&lt;p&gt;You can also type in relevant titles for the charts on their &lt;code&gt;Title&lt;/code&gt; field, on the inspector.&lt;/p&gt;

&lt;p&gt;Making these changes would finally make our application more interactive:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--456XOBeU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/final.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--456XOBeU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.tooljet.com/content/images/2021/11/final.gif" alt="" width="880" height="379"&gt;&lt;/a&gt;&lt;br&gt;
What would you like to build with ToolJet? I'm eager to listen to your ideas, questions and comments.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>lowcode</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Windster - Tailwind CSS admin dashboard interface [MIT License]</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Thu, 18 Nov 2021 10:54:24 +0000</pubDate>
      <link>https://dev.to/themesberg/windster-tailwind-css-admin-dashboard-interface-mit-license-3lb6</link>
      <guid>https://dev.to/themesberg/windster-tailwind-css-admin-dashboard-interface-mit-license-3lb6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#windster-tailwind-css-dashboard"&gt;
  &lt;/a&gt;
  &lt;a href="https://demo.themesberg.com/windster/"&gt;Windster - Tailwind CSS Dashboard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://demo.themesberg.com/windster/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9MgjgFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/products/windster/og-image-new.jpg" alt="Windster Tailwind CSS Dashboard" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Windster is a free and open source Tailwind CSS admin dashboard layout featuring responsive sidebar layouts, authentication pages, charts, users, products pages and hundreds of Tailwind CSS components based on the &lt;a href="https://github.com/themesberg/flowbite"&gt;Flowbite library&lt;/a&gt; such as buttons, dropdowns, navbars, datepickers, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-with-tailwind-css"&gt;
  &lt;/a&gt;
  Build with Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;The pages of this project have been built using only the utility classes from Tailwind CSS and you can continue working with Windster as with any other Tailwind CSS project as it uses the standard Post CSS configuration method together with purging classes as it is recommended.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components-from-flowbite"&gt;
  &lt;/a&gt;
  Components from Flowbite
&lt;/h2&gt;

&lt;p&gt;Windster also uses the &lt;a href="https://flowbite.com"&gt;open source Tailwind CSS components from Flowbite&lt;/a&gt; including buttons, alerts, typography, dropdowns, navbars, and many more. These components also exclusively use the Tailwind CSS utility classes so there is no need to include any extra CSS into your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-pages"&gt;
  &lt;/a&gt;
  Example pages
&lt;/h2&gt;

&lt;p&gt;The open source version of Windster includes 5 application UI example pages including a main dashboard layout, a login page, a register page, a users page and a products page where there are also modals included for the CRUD actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hugo-static-site-generator"&gt;
  &lt;/a&gt;
  HUGO static site generator
&lt;/h2&gt;

&lt;p&gt;We decided to use the HUGO static site generator system to build the HTML templates and also use JSON files as a source of data for some of the pages such as the products or users page. Of course you can adapt these templates to your own tech stack by extracting the HTML templates and the Webpack/POST CSS configuration files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webpack-module-bundler"&gt;
  &lt;/a&gt;
  Webpack module bundler
&lt;/h2&gt;

&lt;p&gt;Windster uses Webpack to bundle assets and to watch for changes and tie together the compilation actions from HUGO and Post CSS. Feel free to customize the Webpack configuration file based on your needs. We also included a CSS minification feature when building for production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h2&gt;

&lt;p&gt;This project uses the following tech stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tailwind CSS - utility-first CSS framework (&lt;a href="https://tailwindcss.com/"&gt;tailwindcss.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Flowbite - component library for Tailwind CSS (&lt;a href="https://flowbite.com"&gt;flowbite.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HUGO - static site generator (&lt;a href="https://gohugo.io/"&gt;gohugo.io&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Webpack - module bundler (&lt;a href="https://webpack.js.org/"&gt;webpack.js.org&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#demo"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quick-start"&gt;Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#folder-structure"&gt;Folder Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#upgrade-to-pro"&gt;Upgrade to PRO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reporting-issues"&gt;Reporting Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#technical-support-or-questions"&gt;Technical Support or Questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#licensing"&gt;Licensing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useful-links"&gt;Useful Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dashboard&lt;/th&gt;
&lt;th&gt;Users&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://demo.themesberg.com/windster/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pep6RLHq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/products/windster/github/pages/homepage.jpg" alt="Dashboard" width="880" height="633"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://demo.themesberg.com/windster/users/list/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1GgXB9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/products/windster/github/pages/users.jpg" alt="Users" width="880" height="634"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Products&lt;/th&gt;
&lt;th&gt;Login&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://demo.themesberg.com/windster/e-commerce/products/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlsmHB9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/products/windster/github/pages/products.jpg" alt="Products" width="880" height="634"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://demo.themesberg.com/windster/authentication/sign-in/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SV-ZTk7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/products/windster/github/pages/login.jpg" alt="Login" width="880" height="633"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Register&lt;/th&gt;
&lt;th&gt;Components&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://demo.themesberg.com/windster/authentication/sign-up/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZUnrau8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/products/windster/github/pages/register.jpg" alt="Register" width="880" height="633"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0n_FfLgR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themesberg.s3.us-east-2.amazonaws.com/public/products/windster/github/pages/docs.jpg" alt="Components" width="880" height="633"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://demo.themesberg.com/windster/"&gt;Live Preview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://themesberg.com/product/tailwind-css/dashboard-windster"&gt;Download from Themesberg&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#quick-start"&gt;
  &lt;/a&gt;
  Quick start
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download from &lt;a href="https://themesberg.com/product/tailwind-css/dashboard-windster"&gt;Themesberg&lt;/a&gt; or clone this repository&lt;/li&gt;
&lt;li&gt;Download the project's zip&lt;/li&gt;
&lt;li&gt;Make sure you have &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://gohugo.io/"&gt;HUGO&lt;/a&gt; installed.&lt;/li&gt;
&lt;li&gt;Run the following command to install the project dependencies:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run the development server:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-the-project"&gt;
  &lt;/a&gt;
  Building the project
&lt;/h2&gt;

&lt;p&gt;To build the final project files run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file will be available in the &lt;code&gt;.build/&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h2&gt;

&lt;p&gt;Windster is first of all a project based on Tailwind CSS but it also uses Flowbite to enable more components, HUGO to generate static HTML files and Webpack for assets bundling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; (main CSS framework)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flowbite.com/"&gt;Flowbite&lt;/a&gt; (Tailwind CSS components)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gohugo.io/"&gt;HUGO&lt;/a&gt; (static site generator)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; (module bundler)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h2&gt;

&lt;p&gt;Within the download you'll find the following directories and files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Windster Tailwind CSS Dashboard
.
├── LICENSE.md
├── README.md
├── _gh_pages
├── config.yml
├── content
├── data
├── layouts
├── node_modules
├── package-lock.json
├── package.json
├── postcss.config.js
├── resources
├── src
├── static
├── syntax.css
├── tailwind.config.js
├── temp
└── webpack.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Live demo: &lt;a href="https://demo.themesberg.com/windster/"&gt;https://demo.themesberg.com/windster/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Download: &lt;a href="https://themesberg.com/product/tailwind-css/dashboard-windster"&gt;https://themesberg.com/product/tailwind-css/dashboard-windster&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;License Agreement: &lt;a href="https://themesberg.com/licensing"&gt;https://themesberg.com/licensing&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Support: &lt;a href="https://themesberg.com/contact"&gt;https://themesberg.com/contact&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Issues: &lt;a href="https://github.com/themesberg/windster-tailwind-css-dashboard/issues"&gt;Github Issues Page&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#upgrade-to-pro"&gt;
  &lt;/a&gt;
  Upgrade to Pro
&lt;/h2&gt;

&lt;p&gt;If you like working with Windster and you would like to expand the number of pages and get access to a more advanced layout, kanban page, mailing application and 4 times more pages then check out &lt;a href="https://demo.themesberg.com/windster-pro/"&gt;Windster Pro&lt;/a&gt; and check out the &lt;a href="https://demo.themesberg.com/windster/pricing/"&gt;differences between the two versions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reporting-issues"&gt;
  &lt;/a&gt;
  Reporting Issues
&lt;/h2&gt;

&lt;p&gt;We use GitHub Issues as the official bug tracker for Windster. Here are some advices for our users that want to report an issue:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure that you are using the latest version of Windster.&lt;/li&gt;
&lt;li&gt;Providing us reproducible steps for the issue will shorten the time it takes for it to be fixed.&lt;/li&gt;
&lt;li&gt;Some issues may be browser specific, so specifying in what browser you encountered the issue might help.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#technical-support-or-questions"&gt;
  &lt;/a&gt;
  Technical Support or Questions
&lt;/h2&gt;

&lt;p&gt;If you have questions or need help integrating the product please &lt;a href="https://themesberg.com/contact"&gt;contact us&lt;/a&gt; instead of opening an issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#licensing"&gt;
  &lt;/a&gt;
  Licensing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Copyright 2021 Themesberg (Crafty Dwarf LLC) (&lt;a href="https://themesberg.com"&gt;https://themesberg.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Themesberg &lt;a href="https://themesberg.com/licensing#mit"&gt;license&lt;/a&gt; (MIT License)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://themesberg.com/templates/tailwind-css"&gt;Tailwind CSS themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://themesberg.com/affiliate"&gt;Affiliate Program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Implementing Onion architecture in NestJS</title>
      <author>Amro</author>
      <pubDate>Thu, 18 Nov 2021 10:52:44 +0000</pubDate>
      <link>https://dev.to/amroabdalla00/implementing-onion-architecture-in-nestjs-1k2f</link>
      <guid>https://dev.to/amroabdalla00/implementing-onion-architecture-in-nestjs-1k2f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-onion-architecture"&gt;
  &lt;/a&gt;
  What’s Onion architecture?
&lt;/h2&gt;

&lt;p&gt;As shown in the picture, onion architecture is a way to structure the code by dividing it into domain-driven design layers. each layer can only access the layer below it throw its interfaces, and then using the dependency inversion principle each interface will be replaced with its class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1pp10gHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjlw35okriyo96qu8uag.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1pp10gHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjlw35okriyo96qu8uag.jpeg" alt="onion architecture" width="600" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Onion Architecture leads to more maintainable applications since it emphasizes separation of concerns throughout the system.&lt;/em&gt;” Jeffery Palermo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-apply-onion-architecture-in-nestjs-projects"&gt;
  &lt;/a&gt;
  Why apply Onion Architecture in NestJs projects?
&lt;/h2&gt;

&lt;p&gt;NestJs is a service-side framework based on NodeJs. NestJs has many built-in features but most importantly for us now is the Dependency Injection and the possibility to add Dependency inversion which is what we need to apply the Onion Architecture.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#building-simple-serverside-blog"&gt;
  &lt;/a&gt;
  Building simple server-side Blog:
&lt;/h2&gt;

&lt;p&gt;In the rest of the article, I’ll try to explain the NestJs implementation using a simple blog project.&lt;/p&gt;

&lt;p&gt;I’ll assume most of the article readers already know Nestjs so I’ll focus on the architecture in the code example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-layers-in-nestjs"&gt;
  &lt;/a&gt;
  Project layers in NestJs
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ExO4lgVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0b8qyvzro3ykhz8bdc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ExO4lgVB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0b8qyvzro3ykhz8bdc2.png" alt="project layers in nestjs" width="332" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Domain entities&lt;/strong&gt;: in the core of our application we have the domain, according to the Domain-driven design(DDD), we should focus our implementation around our Domain and all other layers are built around it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our case, the Domain Entity is just the Article, so let’s do its interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IArticle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Repository&lt;/strong&gt;: is the layer that participates in the Domain Entity, like getting or deleting entity object but it has to abstract away database and infrastructure details, so it’ll work with any kind of database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so let’s build &lt;strong&gt;ArticleRepository&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IArticleRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IArticle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IArticle&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IArticle&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IArticle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the Repository interface most likely will have the same functions for all Entities as it should mainly perform these abstract functions, I recommend using Generics that takes the Entity type as parameter  to have general Repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Service&lt;/strong&gt;: here we implement the use cases, it participates in the Repository to get the data it needs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in our case we need a service to get an article by id and count article characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IArticleService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getArticle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IArticle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;getArticleLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Controller&lt;/strong&gt;: for the sake of simplification I made the controller the first layer, hence NestJs is a server-side framework. But normally in literature first layer suppose to be the UI or test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As Controller is our first layer and we won’t use it as dependencies somewhere else so no need to write an interface for it and we can implement it directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Param&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nestjs/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IArticle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./article.interface&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IArticleService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./articleService.interface&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;article&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ArticleController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IArticleService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IArticle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getArticle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#so-are-we-done"&gt;
  &lt;/a&gt;
  So are we done?
&lt;/h3&gt;

&lt;p&gt;ofc not yet, we just wrote the interfaces but still didn’t write the actual implementation of them, and then replace the interface with the class in the run time.&lt;br&gt;
&lt;strong&gt;I’ll implement one of the Classes(ArticleService) and the rest will be the same.&lt;/strong&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#implementing-articleservice"&gt;
  &lt;/a&gt;
  Implementing ArticleService
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ArticleService&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IArticleService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IArticle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;getArticleLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArticle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;must add @Injectable() so NestJs can inject it later in a class as dependency.&lt;/li&gt;
&lt;li&gt;the class &lt;code&gt;implements&lt;/code&gt; the interface to make sure the class has the same functions&lt;/li&gt;
&lt;li&gt;as we see here ArticleService has dependencies like the Controller but this time its dependency is IArticleRepository&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#dependency-inversion-replacing-the-interface-by-the-class"&gt;
  &lt;/a&gt;
  Dependency inversion( replacing the Interface by the Class):
&lt;/h3&gt;

&lt;p&gt;In the ArticleModule we can specify a string token for each class and use this token when we use the class as a dependency.&lt;/p&gt;

&lt;p&gt;so let’s apply that with ArticleService, giving it a token in &lt;strong&gt;ArticleModule&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ArticleController&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ARTICLE_SERVICE_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ArticleService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ArticleModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and using this token in the Controller to get the Class in run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Controller&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;article&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ArticleController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ARTICLE_SERVICE_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IArticleService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: as strings are bound to errors, it’s best practice to assign the token string to a const variable and export it from the IArticleService file and then use it instead of the string directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ARTICLE_SERVICE_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ARTICLE_SERVICE_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IArticleService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getArticle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IArticle&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;getArticleLength&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;— that’s it 🎉 now imagine if we needed to change any class, we’ll just add the new class to the useClass parameter in the Module without having to change the controller implementation.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--awJzQldy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qki8oc7p1shf8dv69co.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--awJzQldy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qki8oc7p1shf8dv69co.jpeg" alt="depenciey inversion spongbob" width="620" height="465"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dont-be-so-radical-about-it"&gt;
  &lt;/a&gt;
  Don’t be so radical about it:
&lt;/h2&gt;

&lt;p&gt;In the end, Onion Archecturie was made to make the development process easier, so don’t try to force it everywhere where it does not make much sense due to some libraries limitation or other reasons.&lt;/p&gt;




&lt;p&gt;Thanks for writing till the end and wish we meet in another article. &lt;strong&gt;take care!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>typescript</category>
      <category>nestjs</category>
      <category>onionarchitecture</category>
    </item>
    <item>
      <title>Running Tron (TRX) Node With GetBlock: Here’s How It Works</title>
      <author>GetBlock</author>
      <pubDate>Thu, 18 Nov 2021 10:44:02 +0000</pubDate>
      <link>https://dev.to/getblock/running-tron-trx-node-with-getblock-heres-how-it-works-2co4</link>
      <guid>https://dev.to/getblock/running-tron-trx-node-with-getblock-heres-how-it-works-2co4</guid>
      <description>&lt;p&gt;Being cutting-edge nodes API connection provider, GetBlock continues its series of articles designed to demonstrate the opportunities of our toolkit. Today let’s get our hands dirty with &lt;a href="https://getblock.io/en/nodes/trx/"&gt;Tron Network (TRX)&lt;/a&gt; that attempts to become a mainstream ‘Ethereum killer’ since 2017.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-tron-trx-node-what-is-tron-trx"&gt;
  &lt;/a&gt;
  Running Tron (TRX) Node: What is Tron (TRX)?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://getblock.io/en/nodes/trx/"&gt;Tron (Tron Network, Tron Blockchain)&lt;/a&gt; was introduced back in 2018 by Justin Sun, an eccentric Chinese American entrepreneur. Tron is developed and maintained by a Singapore-incorporated non-profit Tron Foundation established in July 2017.&lt;/p&gt;

&lt;p&gt;At its core, Tron is a &lt;a href="https://getblock.io/blog/proof-of-work-vs-proof-of-stake-whats-the-difference"&gt;Proof-of-Stake (PoS)&lt;/a&gt; blockchain built around native cryptocurrency Tronics (TRX). It works not unlike BitShares (BTS) or &lt;a href="https://getblock.io/en/nodes/eos/"&gt;Eos (EOS)&lt;/a&gt;: tokenholders lock their tokens in favour of validators in order to share transactional fees with them.&lt;/p&gt;

&lt;p&gt;In July, 2018, Tron acquired the iconic decentralized data sharing platform BitTorrent while SteemIt was added to its ecosystem in 2020. In 2020-2021, Tron CEO Justin Sun stressed its smart contracts platform is focused on &lt;a href="https://getblock.io/blog/nft-gamefi-defi-cross-chain-top-trends-in-crypto-in-2021-bonus-coins-to-watch"&gt;DeFi and NFT segments&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-tron-trx-node-who-already-uses-them"&gt;
  &lt;/a&gt;
  Running Tron (TRX) Node: Who Already Uses Them
&lt;/h2&gt;

&lt;p&gt;In Q4, every smart contracts platform (both ‘old-fashioned’ like &lt;a href="https://getblock.io/en/nodes/eth/"&gt;Ethereum&lt;/a&gt; or &lt;a href="https://getblock.io/en/nodes/eos/"&gt;Eos&lt;/a&gt; and novel like &lt;a href="https://getblock.io/en/nodes/bsc/"&gt;Binance Smart Chain&lt;/a&gt; or &lt;a href="https://getblock.io/en/nodes/matic/"&gt;Polygon Network&lt;/a&gt;) has its own specialization. For instance, Ethereum and Polygon host numerous DeFis while Binance Smart Chain ecosystem is focused on decentralized gaming (&lt;a href="https://getblock.io/blog/nft-gamefi-defi-cross-chain-top-trends-in-crypto-in-2021-bonus-coins-to-watch"&gt;GameFi&lt;/a&gt; or Play-to-Earn).&lt;/p&gt;

&lt;p&gt;When it comes to &lt;a href="https://getblock.io/en/nodes/trx/"&gt;Tron (TRX)&lt;/a&gt;, it is obvious that this platform is a go-to solution for gambling and high-risk applications.&lt;/p&gt;

&lt;p&gt;According to DappRadar dashboard, 6 out of 10 largest Tron-based decentralized applications by total value locked (TVL) belong to these two categories. At the same time, SunSwap DEX is the largest Tron’s dApp by trading volume: it processes $30 mln per day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-tron-trx-node-accessing-tron-via-getblock"&gt;
  &lt;/a&gt;
  Running Tron (TRX) Node: Accessing Tron via GetBlock
&lt;/h2&gt;

&lt;p&gt;GetBlock, a leading nodes API provider for &lt;a href="https://getblock.io/en/nodes/bsc/"&gt;Binance Smart Chain&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/eth/"&gt;Ethereum&lt;/a&gt;, &lt;a href="https://getblock.io/en/nodes/matic/"&gt;Polygon&lt;/a&gt; and 40+ other blockchain, allows its customers to connect their dApps to &lt;a href="https://getblock.io/en/nodes/trx/"&gt;Tron (TRX) nodes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Fi8pf8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.getblock.io/web/blog/article-images/Screenshot%25202021-11-17%2520at%252017.27.27.png" class="article-body-image-wrapper"&gt;&lt;img alt="article image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Fi8pf8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.getblock.io/web/blog/article-images/Screenshot%25202021-11-17%2520at%252017.27.27.png" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tron nodes module in GetBlock’s dashboard // Image by &lt;a href="https://getblock.io/en/nodes/trx/"&gt;GetBlock&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;a href="https://getblock.io/en/nodes/trx/"&gt;Tron (TRX)&lt;/a&gt; node is available with 100% uptime: its endpoint can be accessed via JSON-RPC method. Both shared and dedicated Tron nodes are available with GetBlock: to work with dedicated nodes, a potential customer should &lt;a href="https://t.me/getblockio_eng"&gt;contact our team&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s how &lt;a href="https://replit.com/@getblock/TRC20TokenBalance#index.js"&gt;GetBlock accesses the Tron (TRX) node&lt;/a&gt;. To demonstrate it, let’s check the TRX balance of a smart contract and of an account in the Tron (TRX) network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDMeoNXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.getblock.io/web/blog/article-images/Screenshot%25202021-11-17%2520at%252017.38.25.png" class="article-body-image-wrapper"&gt;&lt;img alt="article image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDMeoNXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://storage.getblock.io/web/blog/article-images/Screenshot%25202021-11-17%2520at%252017.38.25.png" width="880" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://replit.com/@getblock/TRC20TokenBalance#index.js"&gt;In this demo&lt;/a&gt;, &lt;em&gt;"YOUR-API-KEY"&lt;/em&gt; header refers to the unique identificator assigned by GetBlock. ‘TronWeb’ and ‘contract’ addresses refer to the public addresses of wallets and smart contracts tested.&lt;/p&gt;

&lt;p&gt;'&lt;em&gt;The TRC20 balance is:&lt;/em&gt;' strings demonstrate the result, i.e. the balance of the tested account in Tron-based tokens. Just like with &lt;a href="https://getblock.io/en/nodes/eth/"&gt;Ethereum&lt;/a&gt;, ‘TRC’ means ‘Tron Requests for Comments’&lt;/p&gt;

&lt;p&gt;That’s it: here’s how we access &lt;a href="https://getblock.io/en/nodes/trx/"&gt;Tron (TRX)&lt;/a&gt; in GetBlock. We can easily connect your decentralized application to Tron’s fast and cheap smart contract environment. To discuss our collaboration, please, tap our customer support team in &lt;a href="https://t.me/getblockio_eng"&gt;Telegram&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>devops</category>
      <category>node</category>
    </item>
    <item>
      <title>Best Machine Learning Training Institute In Jalandhar</title>
      <author>itronix11</author>
      <pubDate>Thu, 18 Nov 2021 10:41:31 +0000</pubDate>
      <link>https://dev.to/itronix11/best-machine-learning-training-institute-in-jalandhar-fff</link>
      <guid>https://dev.to/itronix11/best-machine-learning-training-institute-in-jalandhar-fff</guid>
      <description>&lt;p&gt;Itronix Solutions offers the &lt;a href="https://itronixsolution.com/machine-learning-training-jalandhar/"&gt;best Machine Learning Training in Jalandhar&lt;/a&gt;, according to industry standards. Itronix Solutions is one of the most highly regarded &lt;a href="https://priyadogra.com/machine-learning-training-chandigarh/"&gt;Machine Learning Training Institutes in Jalandhar&lt;/a&gt;, providing hands-on practical knowledge/practical implementation on live case studies, as well as advanced level Machine Learning Training Courses to assure job placement. &lt;a href="https://thedigitaladda.com/machine-learning-training-courses-in-ludhiana/"&gt;Machine Learning Training in Jalandhar&lt;/a&gt; is delivered by qualified corporate professionals with 10+ years of expertise implementing real-time Machine Learning projects and case studies at Itronix Solutions.&lt;br&gt;
What will you learn?&lt;br&gt;
Learn how to use advanced Machine Learning to master Machine Learning.&lt;br&gt;
To develop robust machine learning models, make accurate predictions and perform powerful analysis.&lt;br&gt;
Handle specialised issues such as supervised and unsupervised machine learning, reinforcement learning, natural language processing, and deep learning, as well as dimensionality reduction.&lt;br&gt;
The Machine Learning &amp;amp; Artificial Intelligence Program at Itronix Solutions in Jalandhar is designed to provide you with extensive data and active skills in pioneering Machine Learning models and investing your innovative abilities to form strategically important structural decisions.&lt;br&gt;
You'll be able to integrate trained models into a web application and assess their superior performance.&lt;br&gt;
Itronix Solutions provides beginner to advanced &lt;a href="https://www.itronixsolutions.com/machine-learning-training-mohali/"&gt;Machine Learning Training Course In Jalandhar&lt;/a&gt; . Certified Machine Learning trainers with vast training experience and regarded the best in the industry provides you Machine Learning coaching in Jalandhar.&lt;br&gt;
Being a Microsoft Authorized Education Partner, Cisco Partners, Intel Technology Provider, Google Certified Professionals, and IBM Certified, we are one of the best Machine Learning Training in Jalandhar. After the completion of the Machine Learning Course in Jalandhar, Itronix Solutions provides 100% job placement for eligible students.&lt;br&gt;
Contact Itronix Solutions to Enroll for &lt;a href="https://ccnatrainingjalandhar.in/machine-learning-training-in-jalandhar/"&gt;Best Machine Learning Course in Jalandhar&lt;/a&gt; and Get FREE Machine Learning Certification from IBM. In Their Jalandhar Branch, Machine Learning Course designs according to current IT requirements.&lt;br&gt;
Address: SCO-28, First Floor, Chotti Baradari, Garha Road, Jalandhar&lt;br&gt;
Phone No: +91 99140 77736, +91 94173 12121&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>deeplearning</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Starting Day 01: learning Vue JS</title>
      <author>Tahsin Ahmed</author>
      <pubDate>Thu, 18 Nov 2021 10:25:56 +0000</pubDate>
      <link>https://dev.to/tahsin52225/starting-day-01-learning-vue-js-3f86</link>
      <guid>https://dev.to/tahsin52225/starting-day-01-learning-vue-js-3f86</guid>
      <description>&lt;p&gt;Hello World,&lt;br&gt;
I was curious to learn Vue.Js for a long time, But unfortunately, I couldn't manage time to start this.&lt;br&gt;
So I took a 100 days challenge to Learn Vue.Js. I will be describing what I have learned and also going to share codes with you.&lt;br&gt;
I would appreciate any kind of advise, remarks and Highly appreciate if you guys join with me in this  journey&lt;br&gt;
Wish me Luck &amp;lt;3&lt;/p&gt;

</description>
      <category>vue</category>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Develop an On-demand Roadside Assistance App in 2022?</title>
      <author>EdgarDustin</author>
      <pubDate>Thu, 18 Nov 2021 10:25:37 +0000</pubDate>
      <link>https://dev.to/edgardustin/how-to-develop-an-on-demand-roadside-assistance-app-in-2022-3f39</link>
      <guid>https://dev.to/edgardustin/how-to-develop-an-on-demand-roadside-assistance-app-in-2022-3f39</guid>
      <description>&lt;p&gt;The towing industry is one of the most significant emergency services today. By lifting up the broken or damaged cars from the road and giving people help in the middle of the road when their vehicles break down or run out of fuel, on-demand roadside assistance has served as an instant saviour in these situations. &lt;/p&gt;

&lt;p&gt;Due to the widespread adoption of digital platforms, roadside assistance is now the most popular service for retrieving vehicles involved in accidents or that have been rebuilt on the side of the road. &lt;/p&gt;

&lt;p&gt;Many budding entrepreneurs are eagerly anticipating the opportunity to launch a towing business with a complete on-demand &lt;a href="https://www.uplogictech.com/towing-roadside-assistance-app-development-company"&gt;roadside assistance app solution&lt;/a&gt;&lt;br&gt;
roadside assistance app solution as it has a good revenue reputation among other on-demand services.&lt;/p&gt;

&lt;p&gt;In this blog, we will talk about how to build a custom roadside assistance app that meets the 360-degree requirements of the towing industry. &lt;/p&gt;

&lt;h2&gt; Why is an On-Demand Towing Service Important? &lt;/h2&gt;

&lt;p&gt;The percentage of residential and commercial vehicles on the road presently is growing with each day. Vehicles are indeed the primary means by which people commute from one location towards another. In certain instances, vehicle breakdowns occur as a result of fuel shortfall, Battery rundown, poor wheels, and keys mislay. &lt;/p&gt;

&lt;p&gt;The on-demand roadside assistance services help the people in case of these emergency situations. With the roadside assistance app, people can simply raise their bookings and get a towing truck at their required spot with just a few taps on their mobile phones. &lt;/p&gt;

&lt;p&gt;The on-demand roadside assistance app offers you the most sophisticated technology and functionalities to initiate your own towing service business online in the year 2022. &lt;/p&gt;

&lt;p&gt;Furthermore, its smart and deeply committed workflow will certainly assist your organization to be hoisted in a short period of time. Ahead of the launch, you must determine the most important issues.&lt;/p&gt;

&lt;p&gt;Concerns Regarding Uplifting the On-demand Roadside Assistance Service&lt;/p&gt;

&lt;p&gt;Because of the most timeous support given by on-demand roadside assistance services, a few people from numerous regions around the world have ended up waiting for a superior service allocation in this online business sector.&lt;/p&gt;

&lt;p&gt;Day after day, several more towing service companies strive to meet customers' desires in the industry. In this section, we will discuss some of the crucial challenges that must be addressed in order to advance the on-demand towing business.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Inadequacy in Availability&lt;/b&gt;: When a vehicle breaks down on a highway and strives for tow service guidance for instantaneous transport, the tow truck ought not to be available at all times to meet the customers and this issue should be met and addressed in the on-demand roadside assistance platform. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Lack of specialized technicians&lt;/b&gt;: When it comes to tow truck services, people look for highly skilled technicians. The importance of safety is paramount while towing since it will protect the vehicle from further damage on the way to the destination or during the repair process.  &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Valuation of services&lt;/b&gt;: Professionalism and neatness should be the hallmark of the service. Customers will be disappointed with the service if the workflow lacks value. &lt;/p&gt;

&lt;p&gt;While the business is in progress, all the stuff in the tow truck service app should be effective and rapid. To illustrate,&lt;/p&gt;

&lt;p&gt;Modes for quick accessibility, and&lt;br&gt;
Alerts are sent by instant notification.&lt;/p&gt;

&lt;p&gt;What Can Be Done as a Developer to Resolve These Issues When Developing On-demand Roadside Assistance App?&lt;/p&gt;

&lt;p&gt;To address the issues encountered by towing companies, the app model that comes with a tow truck business startup can be equipped with some unique techie features that will assist the companies and end-users to continue to make progress in the business.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Using a Map-based Technician Booking System&lt;/b&gt;: Customers can locate towing service technicians near their location using the map-based technician booking system. &lt;/p&gt;

&lt;p&gt;With a clear view of the maps, customers can know which trucks are closest to their location so that they can have a quick service completed on time.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Using Gps for Accurate Tracking&lt;/b&gt;: Let the customers have the option of choosing their location manually and accurately when booking for towing service technician assistance from the on-demand roadside assistance app. GPS mapping navigation allows the drivers to find their customers easily and quickly.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Consistent App Alerts&lt;/b&gt;: When the user makes a reservation for a tow truck service, the app immediately sends an instant notification to the technician. As a result, customers can immediately contact them for further information.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt; 

&lt;p&gt;Taking into consideration the entire blog referring to market trends and people's expectations of towing truck services, we can conclude that starting your own on-demand towing truck service business with a well-structured On-demand roadside assistance app will allow you to reach a wide range of targeted audiences in 2022 easily. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>android</category>
    </item>
    <item>
      <title>Top 10 Software Development Companies in the USA.</title>
      <author>Steven Davis</author>
      <pubDate>Thu, 18 Nov 2021 10:19:44 +0000</pubDate>
      <link>https://dev.to/steven_d_gital/top-10-software-development-companies-in-the-usa-1o86</link>
      <guid>https://dev.to/steven_d_gital/top-10-software-development-companies-in-the-usa-1o86</guid>
      <description>&lt;p&gt;We all know the software development industry is one of the fastest-growing industries in the terms of technologies updates. &lt;/p&gt;

&lt;p&gt;Today, where competition is taking place at the top, all small and big enterprises visit top software development companies to develop their digital presence and to transform their business into digital form.&lt;/p&gt;

&lt;p&gt;Here, My article will help you to find the best software development companies around the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-lets-define-what-software-development-company-is"&gt;
  &lt;/a&gt;
  First, Let’s Define What Software Development Company is.
&lt;/h2&gt;

&lt;p&gt;When a business is thinking about running the business on automated mode, looking to improve productivity by streamlining the workflow management - for that hiring a trusted software development company will be the best thing for business. Software development companies with their software experts help small and big enterprises to design their software business applications and website. So, in short, custom software development companies help organizations to get precise results!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operations-within-a-software-development-agency"&gt;
  &lt;/a&gt;
  Operations Within A Software Development Agency
&lt;/h2&gt;

&lt;p&gt;Let’s have a look at the operation of top-rated software development companies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delivering top-quality digital solutions around the corporate world.&lt;/li&gt;
&lt;li&gt;Build suits for customer-centric virtual products.&lt;/li&gt;
&lt;li&gt;Software development agency goes the mile and gives the right business solution to organizations.&lt;/li&gt;
&lt;li&gt;Offers the expertise of Business Intelligence (BI).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-10-best-software-development-companies-in-the-usa"&gt;
  &lt;/a&gt;
  The 10 Best Software Development Companies In The USA
&lt;/h2&gt;

&lt;p&gt;Get in touch with experienced brands to ensure customizable perks. And here are the top 10 software development companies in 2022.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-bacancy-technology"&gt;
  &lt;/a&gt;
  1. Bacancy Technology
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.bacancytechnology.com/"&gt;Bacancy Technology&lt;/a&gt; is a globally recognized web development firm, they offer fully customized web development solutions to all scales level businesses. Bacancy was incepted in 2011 and has expanded the business all around the world - USA, India, UAE, Australia, UK, etc.&lt;/p&gt;

&lt;p&gt;The software development company has more than 650+ developers with different expertise. You can hire remote developers as per your required expertise or build a team of dedicated developers with &lt;a href="https://www.bacancytechnology.com/it-staff-augmentation-services"&gt;IT staff augmentation&lt;/a&gt; services or also you can outsource the complete development project to the Bacancy technology for custom software development solutions. Based on your requirements, Bacancy Technology promises to handover you a user-centric technology solution to suit their tech needs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Software development and customization&lt;/li&gt;
&lt;li&gt;MVP development&lt;/li&gt;
&lt;li&gt;Mobile application development&lt;/li&gt;
&lt;li&gt;UI and UX design&lt;/li&gt;
&lt;li&gt;Website Development&lt;/li&gt;
&lt;li&gt;Full-cycle custom software development&lt;/li&gt;
&lt;li&gt;Product development, migration, maintenance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-dotsquares"&gt;
  &lt;/a&gt;
  2. DotSquares
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://clutch.co/profile/dotsquares"&gt;DotSquares&lt;/a&gt;  - Software development agency with 700+ software professionals. The company has its headquarters in the UK, Albourne, India, USA, etc. company has infrastructure that is able to deliver smooth software development for all scales.&lt;/p&gt;

&lt;p&gt;DotSquares is one of the best software development companies in USA and deliver quality development for the past 17 years. They have the experience of working with more than 10000 clients and develop around 2000 web applications in various industries.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Custom software development&lt;/li&gt;
&lt;li&gt;Mobile app development&lt;/li&gt;
&lt;li&gt;Web application development&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-britenet"&gt;
  &lt;/a&gt;
  3. Britenet
&lt;/h3&gt;

&lt;p&gt;Britenet is a custom software development company since 2006 and they have more than 800 experts in their family. They develop strong systems that support operational processes in various industries.&lt;/p&gt;

&lt;p&gt;They offer premium services to clients with innovative solutions. &lt;a href="https://clutch.co/profile/britenet"&gt;Britenet&lt;/a&gt; is committed to encouraging its employees to take a part in technological and industry events. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Software Outsourcing&lt;/li&gt;
&lt;li&gt;Salesforce&lt;/li&gt;
&lt;li&gt;Business Intelligence&lt;/li&gt;
&lt;li&gt;Software Development&lt;/li&gt;
&lt;li&gt;Mobile Apps&lt;/li&gt;
&lt;li&gt;UX&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-fatbit-technologies"&gt;
  &lt;/a&gt;
  4. FATbit Technologies
&lt;/h3&gt;

&lt;p&gt;It is also a custom software development company with its headquarters in India. They offer customizable, scalable, and flexible solutions for e-commerce and mobile applications at competitive prices. A few of the examples of FATbit are Yo!Coach, Yo!Kart, Growcer, VivoCabs, and Yo!Rent. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;White-label turnkey eCommerce solutions&lt;/li&gt;
&lt;li&gt;Mobile application development&lt;/li&gt;
&lt;li&gt;UI and UX design&lt;/li&gt;
&lt;li&gt;Software development and customization&lt;/li&gt;
&lt;li&gt;MVP development&lt;/li&gt;
&lt;li&gt;Website Development&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-spire-digital"&gt;
  &lt;/a&gt;
  5. Spire Digital
&lt;/h3&gt;

&lt;p&gt;Spire Digital is a digital product development organization, they offer staff augmentation services, user experience design, strategic consulting, DevOps, software development across the globe.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Web Development&lt;/li&gt;
&lt;li&gt;Microservices and API Design and Development&lt;/li&gt;
&lt;li&gt;IoT, Wearables&lt;/li&gt;
&lt;li&gt;Native and Cross-Platform Mobile Development&lt;/li&gt;
&lt;li&gt;Emerging Technologies&lt;/li&gt;
&lt;li&gt;AR/VR&lt;/li&gt;
&lt;li&gt;Blockchain&lt;/li&gt;
&lt;li&gt;Automation and DevOps&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-liventus"&gt;
  &lt;/a&gt;
  6. Liventus
&lt;/h3&gt;

&lt;p&gt;It is one of the finest full-time custom software development companies in the US, they offer dedicated teams of developers, IT professionals, and designers.&lt;/p&gt;

&lt;p&gt;Liventus helped their clients to manage the workflow smoothly and they are one of the top FinTech firms.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Software and application development&lt;/li&gt;
&lt;li&gt;Ecommerce solutions&lt;/li&gt;
&lt;li&gt;IT Automation&lt;/li&gt;
&lt;li&gt;CRM systems&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#7-door3"&gt;
  &lt;/a&gt;
  7. Door3
&lt;/h3&gt;

&lt;p&gt;DOOR3 is one of the most trusted technology consultancy firms, offering software development solutions. It delivers a reliable solution with an optimal budget. They have their headquarters in New York and provide their services around the world.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Custom Software Development&lt;/li&gt;
&lt;li&gt;Software consulting&lt;/li&gt;
&lt;li&gt;User experience design&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#8-itransition"&gt;
  &lt;/a&gt;
  8. Itransition
&lt;/h3&gt;

&lt;p&gt;Itransition is among the globally leading software development companies, they are in this service from 20 years. They have 2000+ IT professionals with different skills and knowledge.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Custom Software Development&lt;/li&gt;
&lt;li&gt;Enterprise Application Integration&lt;/li&gt;
&lt;li&gt;Application Security&lt;/li&gt;
&lt;li&gt;Software Product Development&lt;/li&gt;
&lt;li&gt;Technology Consulting&lt;/li&gt;
&lt;li&gt;Maintenance and Support&lt;/li&gt;
&lt;li&gt;Software Testing &amp;amp; QA&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#9-pixlogix"&gt;
  &lt;/a&gt;
  9. Pixlogix
&lt;/h3&gt;

&lt;p&gt;This is one of the award-winning web development and design company based in the USA and delivers quality work all over the developed industry. They delivered the services like website development, Magento development services, Graphic design services, HTML website development, logo design and help to boost the brand’s growth.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Magento eCommerce Development&lt;/li&gt;
&lt;li&gt;Website Design&lt;/li&gt;
&lt;li&gt;WordPress Development&lt;/li&gt;
&lt;li&gt;Graphic Design&lt;/li&gt;
&lt;li&gt;Mobile App Design &amp;amp; Development&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#10-experion-technologies"&gt;
  &lt;/a&gt;
  10. Experion Technologies
&lt;/h3&gt;

&lt;p&gt;They have a tagline that they are developing trust, not just software. They have started work as being a software development agency in 2006. They have more than 300 customers in around 32 countries.&lt;/p&gt;

&lt;p&gt;They have their headquarters in India and have offices across countries like New Zealand, Australia, the UK, the USA, Germany, and many more. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expertise-in"&gt;
  &lt;/a&gt;
  Expertise in:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Product engineering&lt;/li&gt;
&lt;li&gt;Enterprise software development&lt;/li&gt;
&lt;li&gt;Full-cycle software solutions for startups&lt;/li&gt;
&lt;li&gt;Custom software development&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;Businesses always prefer the best when it comes to getting in touch with web development companies. Listed web development companies have the best rating review and have excellent performance.  &lt;/p&gt;

&lt;p&gt;You can have a look at their experience, portfolios, tech expertise to take the smart decision.&lt;/p&gt;

&lt;p&gt;This list of top software development companies helps businesses to choose the right development partners.&lt;/p&gt;

</description>
      <category>software</category>
      <category>devops</category>
      <category>development</category>
    </item>
    <item>
      <title>Testing Svelte components with Jest</title>
      <author>Rob OLeary</author>
      <pubDate>Thu, 18 Nov 2021 10:18:57 +0000</pubDate>
      <link>https://dev.to/robole/testing-svelte-components-with-jest-and-vite-219d</link>
      <guid>https://dev.to/robole/testing-svelte-components-with-jest-and-vite-219d</guid>
      <description>&lt;p&gt;I have seen very little written about testing Svelte components. I have yet to see a tutorial build &lt;em&gt;and&lt;/em&gt; test a Svelte app! This is disconcerting. Maybe, testing is not considered a sexy topic, or for hobby projects people like to walk on the wild side. I don't know. In any case, it is not a good idea for any project to skip it! "Practice as you intend to play" is my philosophy!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; hasn't anointed a set of testing tools or does not advocate for a particular testing strategy. It gives some &lt;a href="https://svelte.dev/faq#how-do-i-test-svelte-apps"&gt;basic advice&lt;/a&gt;. More established frameworks have recommendations and integrations specific to their CLI tooling - &lt;a href="https://reactjs.org/docs/testing.html"&gt;React recommends using Jest and React Testing Library&lt;/a&gt;, and &lt;a href="https://vuejs.org/v2/guide/testing.html"&gt;Vue recommends using Mocha or Jest with Vue Testing Library&lt;/a&gt;. In theory, you can use whatever JavaScript testing library you want for testing, because in the end you will be testing JavaScript code, regardless of whether it is transpiled or not. However, it can prove to be tricky to integrate different tools into a frontend toolchain for your "dev stack".&lt;/p&gt;

&lt;p&gt;Svelte has relied on &lt;a href="https://rollupjs.org/guide/en/"&gt;Rollup&lt;/a&gt; for as the central point for it's dev tooling so far, but recently &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; has been adopted by &lt;a href="https://kit.svelte.dev/"&gt;SvelteKit&lt;/a&gt;. Vite is among the next generation frontend tooling brigade. It provides a much faster dev environment, hence the name, vite means fast in French. It uses native ECMAScript Modules (ESM) to provide on-demand file serving, which means updates are instantly reflected without reloading the page or blowing away application state.&lt;/p&gt;

&lt;p&gt;While the new direction for Svelte appears to be set, the current state of affairs is that most testing frameworks are still "last generation"! They mostly use &lt;a href="https://en.wikipedia.org/wiki/CommonJS"&gt;commonJS modules&lt;/a&gt; and need to adjust to this new paradigm. You can see the issue &lt;a href="https://github.com/vitejs/vite/issues/1955"&gt;"feature: first class Jest integration"&lt;/a&gt; in the Vite GithHub repo to see some of the issues you can run into. In the meantime, you need to transpile your code and do some extra hacks and configuration to get everything to play nice. This is never fun!&lt;/p&gt;

&lt;p&gt;In this tutorial, I will go through using Svelte with Vite, and show you how to test your components with Jest. I will be using JavaScript, but I will mention the extra steps you need to take if you want to use TypeScript instead. I will also test a Todo app to show you what testing looks like on an actual app.&lt;/p&gt;

&lt;p&gt;Let's get to it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Here are the GithHub repositories for the code I cover in the article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starter template - &lt;a href="https://github.com/robole/svelte-vite-jest-template"&gt;https://github.com/robole/svelte-vite-jest-template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Todo app - &lt;a href="https://github.com/robole/svelte-todo-with-tests"&gt;https://github.com/robole/svelte-todo-with-tests&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started-from-a-template"&gt;
  &lt;/a&gt;
  Getting started from a template
&lt;/h3&gt;

&lt;p&gt;Let's create a Svelte project based on the Vite "svelte" template, and call it &lt;em&gt;example-svelte-app&lt;/em&gt;. For TypeScript, use the "svelte-ts" template instead.&lt;/p&gt;

&lt;p&gt;With NPM 7+, you must supply an extra set of double hypens :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init vite@latest example-svelte-app &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--template&lt;/span&gt; svelte
&lt;span class="nb"&gt;cd &lt;/span&gt;example-svelte-app
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create vite example-svelte-app &lt;span class="nt"&gt;--template&lt;/span&gt; svelte
&lt;span class="nb"&gt;cd &lt;/span&gt;example-svelte-app
yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With PNPM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm create vite example-svelte-app &lt;span class="nt"&gt;--template&lt;/span&gt; svelte
&lt;span class="nb"&gt;cd &lt;/span&gt;example-svelte-app
pnpm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have a default project. It says "HELLO WORLD!" and has a &lt;code&gt;Counter&lt;/code&gt; component. We can run the project with &lt;code&gt;npm run dev&lt;/code&gt; and visit it at &lt;a href="https://dev.tolocalhost:3000"&gt;localhost:3000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yHlnZ9LX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wovvn6vfz6t6s8l4xwde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yHlnZ9LX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wovvn6vfz6t6s8l4xwde.png" alt="simple cover image of vs code logo" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;We need the following libraries to get set-up for testing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.npmjs.com/package/jest"&gt;Jest&lt;/a&gt;&lt;/em&gt; is the test runner that we will use. It also has some assertion and mocking functionality.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.npmjs.com/package/@babel/core"&gt;@babel/core&lt;/a&gt;&lt;/em&gt;, &lt;a href="https://www.npmjs.com/package/babel-jest"&gt;&lt;em&gt;babel-jest&lt;/em&gt;&lt;/a&gt;  and &lt;a href="https://www.npmjs.com/package/@babel/preset-env"&gt;&lt;em&gt;@babel/preset-env&lt;/em&gt;&lt;/a&gt; are required for the transpilation Jest requires. Jest uses commonJS by default, and we are using ECMAScript Modules (ESM) in our code, so we need to get them in the same form. The latest version of Jest  is &lt;a href="https://jestjs.io/docs/ecmascript-modules"&gt;v27.2&lt;/a&gt; and has &lt;em&gt;experimental&lt;/em&gt; support for ESM. I did not want to go down the experimental road! Hopefully, this will mature quickly and remove the need for Babel in the toolchain if you are using JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/svelte-jester"&gt;&lt;em&gt;svelte-jester&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/jest-transform-stub"&gt;&lt;em&gt;jest-transform-stub&lt;/em&gt;&lt;/a&gt;. Jest does not understand how to parse non-JavaScript files. We need to use  &lt;code&gt;svelte-jester&lt;/code&gt; to transform Svelte files, and &lt;code&gt;jest-transform-stub&lt;/code&gt; for importing non-JavaScript assets (images, CSS, etc).&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.npmjs.com/package/@testing-library/svelte"&gt;@testing-library/svelte&lt;/a&gt;&lt;/em&gt; (known as Svelte Testing Library) provides DOM query functions on top of Svelte in a way that encourages better testing practices. Some of the most commonly used functions are &lt;code&gt;render&lt;/code&gt;, &lt;code&gt;getByText&lt;/code&gt;, &lt;code&gt;getByLabelText&lt;/code&gt;, and &lt;code&gt;getByRole&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;a href="https://www.npmjs.com/package/@testing-library/user-event"&gt;@testing-library/user-event&lt;/a&gt;&lt;/em&gt; is a companion library to Svelte Testing Library that provides more advanced simulation of browser interactions than the built-in &lt;a href="https://testing-library.com/docs/dom-testing-library/api-events#fireevent"&gt;&lt;code&gt;fireEvent&lt;/code&gt;&lt;/a&gt; function. An example of this is if you need to trigger an event for a mouse click while the &lt;code&gt;Ctrl&lt;/code&gt;  key is being pressed. &lt;u&gt;You may not need this, but it is worth knowing about it.&lt;/u&gt;
&lt;/li&gt;
&lt;li&gt;If you use &lt;a href="https://vitejs.dev/guide/env-and-mode.html"&gt;global environment variables&lt;/a&gt; or a &lt;code&gt;.env&lt;/code&gt; file in your code, you need to install &lt;a href="https://www.npmjs.com/package/babel-plugin-transform-vite-meta-env"&gt;babel-plugin-transform-vite-meta-env&lt;/a&gt; to transform these variables for the commonJS module. This is &lt;u&gt;not a permanent solution&lt;/u&gt; (famous last words, I know). You can &lt;a href="https://github.com/vitejs/vite/issues/1149"&gt;read this issue&lt;/a&gt; for more details on the hopes for better integration where this would not be necessary.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/@testing-library/jest-dom"&gt;&lt;em&gt;@testing-library/jest-dom&lt;/em&gt;&lt;/a&gt; provides a set of custom jest matchers that you can use to extend jest. These can be used to make your tests more declarative. It has functions such as &lt;code&gt;toBeDisabled()&lt;/code&gt;, &lt;code&gt;toBeInTheDocument()&lt;/code&gt;, and &lt;code&gt;toBeVisible()&lt;/code&gt;. &lt;u&gt;This is optional too&lt;/u&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;u&gt;If you are using Typescript&lt;/u&gt;, you need to install &lt;a href="https://github.com/sveltejs/svelte-preprocess"&gt;&lt;em&gt;svelte-preprocess&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://github.com/kulshekhar/ts-jest"&gt;&lt;em&gt;ts-jest&lt;/em&gt;.&lt;/a&gt; also.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need to install these libraries and do some configuration before we can get to our tests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I will install the aforementioned libraries with NPM without the TypeScript dependencies:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; jest babel-jest @babel/preset-env svelte-jester jest-transform-stub @testing-library/svelte @testing-library/user-event babel-plugin-transform-vite-meta-env @testing-library/jest-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to configure Jest to transform our files. We must explicitly set our test environment to &lt;em&gt;jsdom&lt;/em&gt;, which we are using through Jest. Since v27 Jest's default test environment is &lt;em&gt;node&lt;/em&gt;. I will put the configuration in a specific Jest configuration file called &lt;em&gt;jest.config.json&lt;/em&gt; in the project root folder. If you create a configuration file called &lt;em&gt;jest.config.js&lt;/em&gt;, Vite will complain as it expects only ESM JavaScript by default. Vite will recommend that you rename it to a ".cjs" file if you want to do it that way. You can look at the &lt;a href="https://archive.jestjs.io/docs/en/next/configuration"&gt;different ways to configure Jest&lt;/a&gt; if you are unsure about the file conventions. If you're using TypeScript, you need to configure &lt;a href="https://github.com/sveltejs/svelte-preprocess"&gt;&lt;em&gt;svelte-preprocess&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://github.com/kulshekhar/ts-jest"&gt;&lt;em&gt;ts-jest&lt;/em&gt;&lt;/a&gt; also, see the &lt;a href="https://github.com/mihar-22/svelte-jester#typescript"&gt;&lt;em&gt;svelte-jester&lt;/em&gt;&lt;/a&gt; docs for how to do that.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"transform"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"^.+\\.js$"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel-jest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"^.+\\.svelte$"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-jester"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;".+\\.(css|styl|less|sass|scss|png|jpg|ttf|woff|woff2)$"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest-transform-stub"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"moduleFileExtensions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"svelte"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"js"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"testEnvironment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jsdom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"setupFilesAfterEnv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"@testing-library/jest-dom/extend-expect"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We configure Babel to use the current version of node. Include the &lt;a href="https://www.npmjs.com/package/babel-plugin-transform-vite-meta-env"&gt;babel-plugin-transform-vite-meta-env&lt;/a&gt; plugin if you are using environment variables. I will put the configuration in a &lt;em&gt;.babelrc&lt;/em&gt; file in the project root folder. If you are using TypeScript, you need to add a TypeScript preset also, see the &lt;a href="https://jestjs.io/docs/getting-started#using-typescript"&gt;Jest docs&lt;/a&gt; for the details.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;presets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;targets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}]],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plugins&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-plugin-transform-vite-meta-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the scripts to run the tests in your &lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest src"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"test:watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run test -- --watch"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Let's see if our set-up is correct by running &lt;code&gt;npm run test&lt;/code&gt;. Since we don't have any tests yet, you should see following message in console.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜ npm run test&amp;gt; example-svelte-app@0.0.0 test
&amp;gt; jest src

No tests found, exiting with code 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Whew, that's a lot! I wasn't lying when I said that it can prove to be tricky to integrate different tools into a frontend toolchain! 😅&lt;/p&gt;

&lt;p&gt;If you are using SvelteKit, this should work also. I have not delved into SvelteKit yet, so I don't know if something slightly different is required. If there is, let me know!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-unit-test"&gt;
  &lt;/a&gt;
  Your first unit test
&lt;/h3&gt;

&lt;p&gt;Now, lets create a test module for our &lt;em&gt;App.svelte&lt;/em&gt; component called  &lt;em&gt;App.spec.js&lt;/em&gt; in the same folder. By default Jest looks for filenames that end with either ".spec.js" or ".test.js".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;says 'hello world!'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeNull&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to import the component, and the functions we use from the Svelte Testing Library.&lt;/p&gt;

&lt;p&gt;We pass our component to the &lt;code&gt;render&lt;/code&gt; function to setup our component. Svelte Testing Library creates a &lt;code&gt;screen&lt;/code&gt; object for us that is bound to &lt;code&gt;document.body&lt;/code&gt; of the virtual document. We can use this to run some of the builtin DOM query functions against.&lt;/p&gt;

&lt;p&gt;Here, we use the &lt;code&gt;queryByText&lt;/code&gt; function to look for an element with that text content. It will return a node object if it finds an element with that text. It will return &lt;code&gt;null&lt;/code&gt; if no elements match.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For details on the query functions , see the &lt;a href="https://testing-library.com/docs/dom-testing-library/api-queries"&gt;DOM Testing Library’s “Queries” documentation&lt;/a&gt;. Some of the most commonly used query functions are &lt;code&gt;getByText&lt;/code&gt; and &lt;code&gt;getByLabelText&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we use some of Jest's &lt;a href="https://jestjs.io/docs/expect"&gt;expect matchers&lt;/a&gt; to check that the node is not null.&lt;/p&gt;

&lt;p&gt;Alternatively, you can use &lt;code&gt;expect(node).toBeInDocument()&lt;/code&gt; from &lt;em&gt;@testing-library/jest-dom&lt;/em&gt;. This is a bit easier to read I guess(?), so we will use this from now on.&lt;/p&gt;

&lt;p&gt;When we run the test, we get the folllowing output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ➜ npm run test 

&amp;gt; example-svelte-app@0.0.0 test&amp;gt; jest src

PASS  src/App.spec.js  
   ✓ says 'hello world!' (33 ms)

Test Suites: 1 passed, 1 totalTests:       
1 passed, 1 totalSnapshots:   0 total
Time:        1.711 s
Ran all test suites matching /src/i.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don't need to destroy the component after each test, this is &lt;a href="https://testing-library.com/docs/svelte-testing-library/api#cleanup"&gt;done automagically for you&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Typically, you would explicitly create a test suite for each component with the function &lt;code&gt;describe(name, fn)&lt;/code&gt;. We wrap our tests in a function and pass it as the second argument. It usually look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;says 'hello world!'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see that some people use the &lt;code&gt;it()&lt;/code&gt; function instead of &lt;code&gt;test()&lt;/code&gt; also. It's the &lt;a href="https://stackoverflow.com/questions/45778192/what-is-the-difference-between-it-and-test-in-jest"&gt;same thing&lt;/a&gt;, just a different style. The &lt;code&gt;it&lt;/code&gt; function is influenced by &lt;a href="https://en.wikipedia.org/wiki/RSpec"&gt;rspec&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-events"&gt;
  &lt;/a&gt;
  Testing events
&lt;/h3&gt;

&lt;p&gt;Lets test our &lt;code&gt;Counter&lt;/code&gt; component by creating a &lt;em&gt;Counter.spec.js&lt;/em&gt; file in the same folder (lib).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{increment}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Clicks: {count}
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever the button is pressed, it increments a &lt;code&gt;count&lt;/code&gt; variable that is displayed in the button label.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_8xM3mM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4afw9osfnxqzsgds12jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_8xM3mM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4afw9osfnxqzsgds12jw.png" alt="counter component" width="323" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will create a similar test to our first test for the &lt;code&gt;App&lt;/code&gt;. We just want to check that the button is rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Counter.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;it has a button with the text 'Clicks: 0'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicks: 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we want to check the action will increment the count. This is where we reach for the &lt;a href="https://testing-library.com/docs/dom-testing-library/api-events#fireevent"&gt;&lt;code&gt;fireEvent&lt;/code&gt;&lt;/a&gt; function. There is a convenient form of the function &lt;code&gt;fireEvent[eventName](node: HTMLElement, eventProperties: Object)&lt;/code&gt; where we can provide the event name as a suffix. So,  we can write &lt;code&gt;fireEvent.click(screen.getByText("Clicks: 0")&lt;/code&gt;. Because this is an asynchronous event, we need to use the &lt;code&gt;await&lt;/code&gt; syntax and make our test function &lt;code&gt;async&lt;/code&gt;. The test function looks this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;it should increment the count by 1 when it the button is pressed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicks: 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Clicks: 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the &lt;a href="https://testing-library.com/docs/ecosystem-user-event/"&gt;user-event library&lt;/a&gt; instead, but &lt;strong&gt;be aware that all events are treated as async in Svelte testing&lt;/strong&gt;. For other frameworks, they are probably synchronous. This is unique to the Svelte because the library must wait for the next &lt;code&gt;tick&lt;/code&gt; so that Svelte flushes all pending state changes.&lt;/p&gt;

&lt;p&gt;We can check the test coverage of our app now by running &lt;code&gt;npx jest --coverage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Al4bNxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugsbmx3jo1rlnz2x7e75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Al4bNxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugsbmx3jo1rlnz2x7e75.png" alt="counter component" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we're at 100% coverage. Yay!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-tests-for-a-todo-app"&gt;
  &lt;/a&gt;
  Unit tests for a Todo app
&lt;/h2&gt;

&lt;p&gt;While we're at it, let's test a more complete app. This is where we can really see what testing is like. Let's look at a minimal Todo app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7Wehk-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh0yntjw8z5mk2ajsxbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7Wehk-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh0yntjw8z5mk2ajsxbn.png" alt="todo app screenshot" width="556" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;p&gt;The app should do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;List todos. When there are no items, the message "Congratulations, all done!" should be shown.&lt;/li&gt;
&lt;li&gt;Allow a user to mark/unmark todos as done. When a todo is done, it is styled differently. The text color is gray and has a strike-through decoration.&lt;/li&gt;
&lt;li&gt;Allow a user to add new todos, but prohibit the addition of an empty todo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will write our tests on these requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-overview"&gt;
  &lt;/a&gt;
  Component overview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqwzurSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1s40pgvt7ui4ulshv7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqwzurSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1s40pgvt7ui4ulshv7a.png" alt="todo components figure" width="768" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;App&lt;/code&gt; component contains the other components. It has a subheading that shows the status of the todos e.g "1 of 3 remaining ". It passes an array of todos to &lt;code&gt;TodoList&lt;/code&gt;. We hardcode 3 todos in our app , as per screenshot above.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;AddTodo&lt;/code&gt; component contains the form with an text input and button to add new todos to our list.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;TodoList&lt;/code&gt; component is an unordered list of the todos. It has a &lt;code&gt;todos&lt;/code&gt; prop that is an array of todo objects. Each list item contains a &lt;code&gt;Todo&lt;/code&gt; component.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Todo&lt;/code&gt; component shows the text of the todo and has a checkbox for marking the item as done. It has a &lt;code&gt;todo&lt;/code&gt; prop that is a todo object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The child components dispatch events up to the &lt;code&gt;App&lt;/code&gt; when there are data changes from user interaction. For example, &lt;code&gt;Todo&lt;/code&gt; dispatches a &lt;code&gt;toggleTodo&lt;/code&gt; event whenever it's checkbox is clicked, this event is forwarded by &lt;code&gt;TodoList&lt;/code&gt; to &lt;code&gt;App&lt;/code&gt; to handle this event.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h3&gt;

&lt;p&gt;I will highlight a couple of the unique aspects of the tests to demonstrate some of the methods for using Jest.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#testing-with-props-and-classes-raw-todospecjs-endraw-"&gt;
  &lt;/a&gt;
  Testing with props and classes (&lt;code&gt;Todo.spec.js&lt;/code&gt;)
&lt;/h4&gt;

&lt;p&gt;This is an example of passing props to components when we are testing. We pass them through an object we provide as the second argument to the &lt;code&gt;render&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;buy milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoNotDone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;do laundry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shows the todo text when rendered&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todoDone&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//checkbox&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoDone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//etc..&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this test case, we want to get the checkbox for the todo. It has a lable of "Done", so we can get it through the function &lt;code&gt;getByLabelText()&lt;/code&gt;. The checkbox has an &lt;code&gt;aria-label&lt;/code&gt; attribute rather than a corresponding &lt;code&gt;label&lt;/code&gt; element, it does not matter which it is. I like to favour using this function as it is a a good reminder to ensure that every input should have a label to keep things accessible for everyone.&lt;/p&gt;

&lt;p&gt;Next, we want to test when a Todo item is marked as done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a done class should be added to the text item when a todo is done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todoDone&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoDone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the checkbox is checked, a &lt;code&gt;done&lt;/code&gt; class is added to the &lt;code&gt;span&lt;/code&gt; element that has the todo text. We can use the &lt;code&gt;toHaveClass()&lt;/code&gt; function to check that this class is added correctly for done todos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-text-entry-raw-addtodospecjs-endraw-"&gt;
  &lt;/a&gt;
  Testing text entry (&lt;code&gt;AddTodo.spec.js&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;To simulate a user entering text into the textbox, we use the &lt;code&gt;type&lt;/code&gt; function from the &lt;em&gt;@testing-library/user-event&lt;/em&gt; library. In this case, the button is only enabled when text is entered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AddTodo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AddTodo.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AddTodo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// other stuff&lt;/span&gt;

   &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;the add button should be enabled when text is entered&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AddTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeEnabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#testing-data-mutation-raw-appspecjs-endraw-"&gt;
  &lt;/a&gt;
  Testing data mutation (&lt;code&gt;App.spec.js&lt;/code&gt;)
&lt;/h4&gt;

&lt;p&gt;You may have expected the adding of a new todo to be tested in &lt;code&gt;AddTo.spec.js&lt;/code&gt;. However, since the &lt;code&gt;AddTodo&lt;/code&gt; component doesn't result in a DOM change, rather it fires an &lt;code&gt;AddNew&lt;/code&gt; event, there is no way for us to test it through DOM query methods. The action is delegated to the &lt;code&gt;App&lt;/code&gt; component, so this is where we will test it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PREDEFINED_TODOS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// other stuff&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should add a todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buy milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fireEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoListItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listitem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoListItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PREDEFINED_TODOS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this test case, we must simulate inserting some text to the textbox, and then hitting the "Add" button. I use &lt;code&gt;fireEvent.input&lt;/code&gt; to pass the text to the textbox to its &lt;code&gt;value&lt;/code&gt; property. This function is similar to &lt;code&gt;userEvent.type&lt;/code&gt; that I used in the previous example. I use it here to show you both ways, use whichever you prefer. Don't forget that these actions are asynchronous, so always use &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For our test assertion, we want to check that the text for our new todo is now added to the document. This should be familiar by now - &lt;code&gt;expect(screen.getByText(value)).toBeInTheDocument();&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can be doubly sure of the success of our action by checking the number of todos in the page. Because the todo items are added to the only list in the page, we can check the number of todos by getting elements that match the accessibility role of &lt;code&gt;listitem&lt;/code&gt; through &lt;code&gt;screen.getAllByRole("listitem")&lt;/code&gt;. We can then get the length of the returned array to check how many items there are.&lt;/p&gt;

&lt;p&gt;In more complicated apps, you may need not be able to find the elements you are after by searching by text, label or role. If there is no way around it, you can reach for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"&gt;&lt;code&gt;querySelector()&lt;/code&gt;&lt;/a&gt; on the document body like you would in vanilla JavaScript on a regular webpage. Just try to avoid using this 'escape hatch' if possible.&lt;/p&gt;

&lt;p&gt;Some people may choose to defer some of the testing of the &lt;code&gt;App&lt;/code&gt; component to end-to-end testing. It depends on who you are working with, and how the project is organized to decide who tests what, and where.&lt;/p&gt;




&lt;p&gt;And that's the bits that I think stand out the most, you can read through the tests yourself to get a more complete grasp.&lt;/p&gt;

&lt;p&gt;The test coverage is 98%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i94VBoLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4wq0pgerpjlp9yvoivl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i94VBoLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4wq0pgerpjlp9yvoivl.png" alt="counter component" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One important thing that I did not cover in my app is &lt;a href="https://www.martinfowler.com/bliki/TestDouble.html"&gt;Test Doubles&lt;/a&gt;. Even though it is quite a small app, I wrote what are called &lt;a href="https://www.martinfowler.com/bliki/UnitTest.html#SolitaryOrSociable"&gt;&lt;em&gt;social tests&lt;/em&gt;&lt;/a&gt;. The alternate approach is &lt;em&gt;solitary tests&lt;/em&gt;. For solitary tests, you need to mock components, you are trying to isolate a component and only the test the functionality of that "unit".&lt;/p&gt;

&lt;p&gt;In both approaches, you may need to mock some functions that rely on third-party libraries or native browser APIs. One common example is mocking calls to backend services through &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://axios-http.com/"&gt;&lt;code&gt;axios&lt;/code&gt;&lt;/a&gt;. I didn't use a backend service in my app, so I did not need to mock anything. This is something that I may pick up in another article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It is messy to get Jest set-up with Svelte and Vite. The template I have provided here will allow you start testing your Svelte components out of the gates. While you can get quite far without issues, using ESM in your frontend code and dev tools, but using a testing library that uses CommonJS, will inevitably create more work for you. Whether Jest will make this simpler with its ESM support has yet to be seen.&lt;/p&gt;

&lt;p&gt;I will be looking at some other options to see if there is unit testing library that requires less configuration and integrates with Vite and Svelte in a more seamless way.&lt;/p&gt;

&lt;p&gt;I encourage you to test your Svelte apps and make testing a core part of your development process. I hope I have shown that it is easier than you may think! The confidence that you will get from testing is invaluable to make more reliable and resilient apps. Don't treat it as an optional task for your own sake!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>svelte</category>
      <category>testing</category>
    </item>
    <item>
      <title>Fix the Bug on Telescope</title>
      <author>Minsu Kim</author>
      <pubDate>Thu, 18 Nov 2021 10:14:58 +0000</pubDate>
      <link>https://dev.to/mkim219/fix-the-bug-on-telescope-2d4i</link>
      <guid>https://dev.to/mkim219/fix-the-bug-on-telescope-2d4i</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://github.com/Seneca-CDOT/telescope"&gt;Telescope&lt;/a&gt; is the open source project that maintains by Seneca College. The Telescope is an open source web servce and client application gathers all blog posts from variety of platforms such as WordPress, Medium, Dev Community, and many others and presenting as timeline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bgyBviAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndd98as6up51noyx51uk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgyBviAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndd98as6up51noyx51uk.png" alt="before-fix" width="880" height="943"&gt;&lt;/a&gt;&lt;br&gt;
 The &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2479"&gt;issue&lt;/a&gt; is one of blog post contain many lines of &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;p&amp;gt;&lt;/code&gt; at the end of blog post. This numerous of line break tag that wrap with paragraph tag interrupt view other blog posts.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fix"&gt;
  &lt;/a&gt;
  Fix
&lt;/h3&gt;

&lt;p&gt;The issue is very simple to fix. In the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;remove-empty-paragraphs.js
const cleanWhiteSpace = require('clean-whitespace');

module.exports = function (dom) {
  if (!(dom &amp;amp;&amp;amp; dom.window &amp;amp;&amp;amp; dom.window.document)) {
    return;
  }

  dom.window.document.querySelectorAll('p').forEach((p) =&amp;gt; {
    p.innerHTML = cleanWhiteSpace(p.innerHTML);
    const paragraphInnerHTML = p.innerHTML;
    if(!paragraphInnerHTML.replace(/&amp;amp;nbsp;/gm,'').trim()) {
      p.remove();
    }
  });
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic already has been made for the &lt;code&gt;&amp;amp;nbsp&lt;/code&gt; non-breaking space. Therefore simply add one more condition &lt;code&gt;|| paragraphInnerHTML.trim() === '&amp;lt;br&amp;gt;'&lt;/code&gt; that catch if the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; contains only &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tag for remove the &lt;/p&gt;
&lt;p&gt; tag. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  challenge
&lt;/h3&gt;

&lt;p&gt;The issue supposed to be easily resolved. However there is two things that I have faced the challenge. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;remove-empty-paragraph.js&lt;/code&gt; is never called&lt;/li&gt;
&lt;li&gt;Since (1) challenge exists, I do not know my logic is correct. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reason that &lt;code&gt;remove-empty-paragraph.js&lt;/code&gt; is not called is actually function never get called. I think the empty &lt;code&gt;&amp;amp;nbsp&lt;/code&gt; treats as edge case so I think the code was missing. Therefore I have create the code for invoking the function&lt;br&gt;
The second challenge has been resolved with the advice from David who is instructor of this course. His advice is create unit test case for testing my logic is whether pass or fail. Therefore I have created&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test('should remove &amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt; (line break)', () =&amp;gt; {
    const htmlData = toDom('&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;');
    removeEmptyParagraphs(htmlData);
    const expectedHtml = '&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;';
    expect(htmlData.window.document.body.innerHTML).toEqual(expectedHtml);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output is pass! My logic is correct but I do not see the any change on the Telescope running in local. I have no idea why my change does not reflect to the Telescope. So I have asked this issue to our Telescope Slack channel. Thankfully Josue and Duc Bui Manh helped to resolve this issue. They suggested me to delete old &lt;code&gt;redis-data&lt;/code&gt; and re-run the application that also update database to fetch the blog posts. It takes while the &lt;code&gt;elasticSearch&lt;/code&gt; crawls the all the blog posts but finally I have the expected result. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FRXM6FMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6ktwt0gjdj4ae8rst8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRXM6FMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6ktwt0gjdj4ae8rst8k.png" alt="after-fix" width="880" height="706"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;During the time in Hacktoberfest, I have contributed 4 small projects. It is such a good experience to contribute to large open source project Telescope. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link"&gt;
  &lt;/a&gt;
  Link
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2481"&gt;PR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>telescope</category>
    </item>
    <item>
      <title>Introduction to Custom Angular Schematics</title>
      <author>Tarun Gurang</author>
      <pubDate>Thu, 18 Nov 2021 10:06:19 +0000</pubDate>
      <link>https://dev.to/tarungurang/introduction-to-custom-angular-schematics-1cn7</link>
      <guid>https://dev.to/tarungurang/introduction-to-custom-angular-schematics-1cn7</guid>
      <description>&lt;p&gt;Schematics are very useful. They provide us to achieve more in a shorter amount of time. But most significantly used, we can think less about routine stuff which leaves our limited attention span to focus on solving real changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;Ensure that you have the following packages installed at a global level on your computer. Note that in a real-life development context, you should have some of these local to your project. But for the having well been stable development environment we will install them globally.&lt;/p&gt;

&lt;p&gt;node v12.8.0 npm v.6.10.2 @angular-cli (core y cli) v.10 @schematics/angular @schematics/&lt;a href="mailto:schematics@0.1000.5"&gt;schematics@0.1000.5&lt;/a&gt;&lt;br&gt;
Before getting a start, we need to install @angular-devkit/schematics-cli package to allow us to use the schematics command in our terminal. This command is quite similar to the well-known ng generate but the main benefit is that we can run it anywhere because it is totally independent from the Angular CLI.&lt;/p&gt;

&lt;p&gt;This allows us to use the schematics command and specifically the blank schematics to generate a new schematics project where we can start implementing our custom schematics.&lt;/p&gt;

&lt;p&gt;Go to the folder where you want to place your schematics to be at and type in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ schematics blank --name=indepth-dev-schematic

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can already understand, we are basically invoking the schematics function to generate a blank schematic, and we are passing the name of the collection as an option.&lt;/p&gt;

&lt;p&gt;If we inspect the generated folder, we can verify it is an npm package, featuring a package.json with needed dependencies, and the node_modules folder.&lt;/p&gt;

&lt;p&gt;We will also find a tsconfig.json file and scr folder.&lt;/p&gt;

&lt;p&gt;Let we focus on the contents of the src folder&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;+ src&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;collection.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;+ indepth-dev-schematic&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Index.ts&lt;/li&gt;
&lt;li&gt;Index_spec.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This file read once by the schematic-cli and the angular-schematic tool, at the time of the running schematics&lt;/p&gt;

&lt;p&gt;Any successive schematics in the same package require to be added to the collection&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.ts&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';
// We don't have to export the function by default. we can also have per file more than one rule factory
export function indepthDevSchematic(_options: any): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the function is named camelcase form of the schematic name. This function holds options as arguments and returns a Rule. The Rule is a function that holds the tree and the context and returns another tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/setting-up-angular-in-the-system"&gt;Setting Up Angular In The System&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most useful things to remember over the entry file index.ts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It can feature a rule factory for certain&lt;/li&gt;
&lt;li&gt;You do not require to export the function as default&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In theory, we could earlier run this schematic through the schematics cli but it will definitely give null output but a console message that ' Nothing to be done'. So, let us make it more interesting and use the create method to create a readme file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';
// We do not have to export the function as default. You can also have per file more than one rule factory
export function indepthDevSchematic(_options: any): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    tree.create('readme.md', '#Mentioned is the Read Me file');
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#execute-custom-schematics-with-the-schematiccli"&gt;
  &lt;/a&gt;
  Execute custom schematics with the schematic-cli
&lt;/h3&gt;

&lt;p&gt;Now let us head back to the terminal and prompt the schematic execution. We must be inside the schematic folder, at the root level.&lt;/p&gt;

&lt;p&gt;Before we can execute it, we require to build our package to trans pile the typescript to JavaScript and compile it. Now we can run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ schematics .:indepth-dev-schematic

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we are at the root level, we do not require to pass the name of the collection. So, it is followed by a colon: and the name of the schematic, in this case, 'indepth-dev-schematic'. In the future, we will add an alias to the schematic to evoke it with a shorter or more user-friendly name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schematic-didnt-generate-anything"&gt;
  &lt;/a&gt;
  Schematic didn’t generate anything
&lt;/h3&gt;

&lt;p&gt;Do not distress. This is the desired behavior after schematics run in debug mode, by default. So, if we want to ensure that the schematics update the file system, you require to run them with the –dry-run=false flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ schematics.: indepth-dev-schematic --dry-run=false

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we should see the readme.md file in your file system.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passing-options-as-arguments-from-the-cli"&gt;
  &lt;/a&gt;
  Passing options as arguments from the CLI
&lt;/h4&gt;

&lt;p&gt;Now we have just hardcoded the values for the file path or name, and the content string. Let us see how to pass it from the CLI to reach a more dynamic output.&lt;/p&gt;

&lt;p&gt;In order to do that, let us Modify the RuleFactory like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';
import { join } from 'path';
import { capitalize } from '@angular-devkit/core/src/utils/strings';
// We do not have to export the function as default. We can also have per file more than one rule factory
export function indepthDevSchematic(_options: any): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    const fullname: string  = _options.fullname;
    const content: string = _options.content;
    const extension: string = _options.extension || '.md';
    tree.create(join(fullname, extension), capitalize(content));
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#let-us-create-a-model-now-so-that-we-can-get-rid-of-any"&gt;
  &lt;/a&gt;
  Let us create a model now so that we can get rid of ‘any’
&lt;/h4&gt;

&lt;p&gt;Whenever we generate a blank schematic, options are declared as type any. That is because of the generator has no idea that what will be required. We need to solve that by creating a schema model.&lt;/p&gt;

&lt;p&gt;Create a file named with schema.ts at the same level of your index.ts and update it like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface Schema {
    fullname:string;
    content:string;
    extension?:string;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can add the schema type to the option like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';
import { join } from 'path';
import { capitalize } from '@angular-devkit/core/src/utils/strings';
import { Schema } from './app/schema';
// We do not have to export the function as default. We can also have per file more than one rule factory
export function indepthDevSchematic(_options: Schema): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    const fullname: string  = _options.fullname;
    const content: string = _options.content;
    const extension: string = _options.extension || '.md';
    tree.create(join(fullname, extension), capitalize(content));
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#including-a-validation-schema-to-our-schematic"&gt;
  &lt;/a&gt;
  Including a validation schema to our schematic
&lt;/h5&gt;

&lt;p&gt;We can include a validation schema to our schematic by creating a schema.json file at the same level as our entry file. This will serve us to specify defaults for our options, flag them as we needed. Ensure that we are passing the right types and even issuing prompts.&lt;/p&gt;

&lt;p&gt;Include the following content to schema.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "$schema": "http://json-schema.org/schema",
    "id": "indepth-dev-schematics",
    "title": "Demo of Schematics",
    "type": "object",
    "properties": {
      "fullname": {
        "description": "File name, also same to its path",
        "type": "string",
        "$default": {
          "$source": "argv",
          "index": 0
        }
      },
      "content": {
        "description": "content of something for that file",
        "type": "string",
        "$default": {
          "$source": "argv",
          "index": 1
        }
      },
      "extension": {
        "description": "An extension for that file and markdown is to defaults",
        "type": "string",
        "default": ".md"
      }
    },
    "required": [
      "name", "content"
    ]
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This schema defines three options as per properties of schema option with id indepth-dev-schematic.fullname and content are argument vectors, at index 0 and 1, by defaults. They are also needed. The third value is the extension and it is not compulsory as user input. It also has it's the default value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking to &lt;a href="https://www.ifourtechnolab.com/hire-angular-js-developer"&gt;hire Angular Developer&lt;/a&gt;? Your Search ends here.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The schema.json will only implement when referenced from the collection. So, head toward the collection and modify it like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "$schema": "../node_modules/@angular-devkit/schematics/collection-schema.json",
    "schematics": {
      "indepth-dev-schematic": {
        "description": "A Demo of the blank schematic.",
        "factory": "./indepth-dev-schematic/index#indepthDevSchematic",
        "schema": "./indepth-dev-schematic/schema.json"
      }
    }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#input-prompts-for-the-custom-schematics"&gt;
  &lt;/a&gt;
  Input prompts for the custom schematics
&lt;/h5&gt;

&lt;p&gt;Another most important use of the schema is to create prompts to communicate with the user through the CLI. These prompts ensure a better user experience so developers do not have to read tons of documents to realize what input the schematic requirements, in order to run.&lt;/p&gt;

&lt;p&gt;There are three types of Prompts which are textual input, either string or number, decision, or yes or no/true or false, and list featuring an enum with subtypes.&lt;/p&gt;

&lt;p&gt;Let us update the schema.json to include prompts for the needed options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "$schema": "http://json-schema.org/schema",
    "id": "indepth-dev-schematics",
    "title": "Demo of Schematics",
    "type": "object",
    "properties": {
      "fullname": {
        "description": "File name, also same to its path",
        "type": "string",
        "x-prompt": "What is your file name? (matches path)"
      },
      "content": {
        "description": "content of something for that file",
        "type": "string",
        "x-prompt": "Please Enter some content for your file"
      },
      "extension": {
        "description": "An extension for that file and markdown is to defaults",
        "type": "string",
        "default": ".md"
      }
    },
    "required": [
      "name", "content"
    ]
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#aliases-for-custom-schematics"&gt;
  &lt;/a&gt;
  Aliases for custom schematics
&lt;/h5&gt;

&lt;p&gt;Before building and run the schematic once again we might maximize it a little bit more by determining a shorter alias, before generating with.: indept-dev-schematic is a bit long error inclined.&lt;/p&gt;

&lt;p&gt;To give an alias for it let we go to the collection.json again and modify it like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "$schema": "../node_modules/@angular-devkit/schematics/collection-schema.json",
    "schematics": {
      "indepth-dev-schematic": {
        "description": "A Demo of the blank schematic.",
        "factory": "./indepth-dev-schematic/index#indepthDevSchematic",
        "schema": "./indepth-dev-schematic/schema.json",
        "aliases": ["dive"]
      }
    }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should notice that aliases take an array of strings, so we can define multiple aliases for our schematic.&lt;/p&gt;

&lt;p&gt;Now we can execute it from the CLI with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ schematics .:dive

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should prompt us to pass a full name and content as options. It will realize the default for an extension is .md&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#generating-the-schematic-from-an-angular-app"&gt;
  &lt;/a&gt;
  Generating the schematic from an Angular app
&lt;/h5&gt;

&lt;p&gt;Unless now, we are running the schematic from the schematics-cli. But that is no fun. We need to run it in an Angular app.&lt;/p&gt;

&lt;p&gt;Let us start by linking the package to our current node version executing the following command at the root of our package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm link

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then generate a new angular app with the Angular CLI and when it gets completed, run the following in the app root folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm link indepth-dev-schematic

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a symlink to the schematic package so we can execute it Before we run it, let we modify the entry file a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Rule,SchematicsException,SchematicContext, Tree } from '@angular-devkit/schematics';
import { join } from 'path';
import { capitalize } from '@angular-devkit/core/src/utils/strings';
import { Schema } from './app/schema';
// We do not have to export the function as default. We can also have per file more than one rule factory
export function indepthDevSchematic(_options: Schema): Rule {
  return (tree: Tree, _context: SchematicContext) =&amp;gt; {
    const fullname: string  = _options.fullname;
    const content: string = _options.content;
    const extension: string = _options.extension || '.md';
    const path = join(name, extension);
    const angularConfig = 'angular.json';
    // Let we ensure that we are in an angular workspace
    if (!tree.exists(angularConfig)) {
      throw new SchematicsException('It is not an Angular worksapce. Please Try again in an Angular project.');
    } else {
      if (!tree.exists(path)) {
        tree.create(path, capitalize(content));
      } else {
        throw new SchematicsException('This name of file is already exists! Please try a different or new name');
      }
    }
    return tree;
  };
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using these changes, we ensure that we are executing the schematic in an angular workspace and that the file doesn't already exist.&lt;/p&gt;

&lt;p&gt;Now after rebuilding we can ultimately go to the app and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ng generate indepth-dev-schematic:dive

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h6&gt;

&lt;p&gt;In this blog, we have discussed the angular custom schematics with a proper example of creating a custom schematic with useful guidance.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS Drawing Tips</title>
      <author>Lucas jin</author>
      <pubDate>Thu, 18 Nov 2021 09:51:33 +0000</pubDate>
      <link>https://dev.to/dcsl-guidesmiths/css-drawing-tips-eie</link>
      <guid>https://dev.to/dcsl-guidesmiths/css-drawing-tips-eie</guid>
      <description>&lt;p&gt;Have you heard of &lt;a href="https://cssbattle.dev/"&gt;cssBattle&lt;/a&gt;? It's a website that provides some simple shape drawings, where  the user should use minimal  css code to recreate it. Recently  I have completed all 80 drawings, and I think I can share some css drawing techniques here. Learning these techniques may not be very helpful for your daily coding work life, but you may at least find some fun in css.&lt;/p&gt;

&lt;p&gt;First things first, here are some techniques that I often used during these 80 challenges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background"&gt;background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border"&gt;border&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius"&gt;border-radius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;box-shadow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow()"&gt;drop-shadow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path"&gt;clip-path&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-box-reflect"&gt;-webkit-box-reflect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I open a new challenge, before starting to write any css, first of all I analyse the original drawing, let's take this &lt;a href="https://cssbattle.dev/play/52"&gt;challenge No.52&lt;/a&gt; as an example. As I am looking at this, I can tell that there are only two shapes in this drawing, which is a circle and a rectangle, I am then thinking that do these shapes have the same angle and equal proportion, because we can only increase or decrease the size by using box-shadow and we can't change the box-shadow’s angle individually. And yes, the circle's angle doesn't really matter, and all the rectangles have the same angle and the same size. So in this case I can easily use box-shadow to recreate the shapes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CozPFxCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94sys880jcohmitobwj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CozPFxCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94sys880jcohmitobwj9.png" alt="No.52 challenge" width="768" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try it.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/WNEJyxe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;From the code example above, you can see that I only use one div to create all the circles using the css &lt;code&gt;box-shadow&lt;/code&gt; property. And for the rectangle we can do the same, first we create a rectangle as our base, from which we recreate the other rectangles using box-shadow. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/qBXYKxY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And that's it, we have completed our challenge. I use pseudo class &lt;code&gt;:before&lt;/code&gt; here just because I don't want to write another &lt;code&gt;div&lt;/code&gt; tag in the html, but you can use another html tag to create the rectangle.&lt;/p&gt;

&lt;p&gt;Let's see another example using &lt;code&gt;box-shadow&lt;/code&gt; and &lt;code&gt;-webkit-box-reflect&lt;/code&gt; to help us save writing more code. &lt;/p&gt;

&lt;p&gt;This is &lt;a href="https://cssbattle.dev/play/45"&gt;challenge No.45&lt;/a&gt; from css drawing:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ITzEWpdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m9xe2ijc34q6ckqdyx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITzEWpdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m9xe2ijc34q6ckqdyx7.png" alt="No.45 challenge" width="802" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same as the previous example, as I am looking at this drawing, I can tell that it's formed by some rectangles. But because they have two different angles, vertical and horizontal, I have to use two shapes to create them. And also the left and right side is symmetrical, so I only need to create half the drawing, then use &lt;code&gt;-webkit-box-reflect&lt;/code&gt; property to create the other half. So first I created the horizontal ones using box-shadow: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/YzxLjKb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Then I added the vertical ones:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/dyzejKy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And you can see that half of the drawing is done, now I only need to add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-webkit-box-reflect:right -20px
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà, the challenge is done.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/oNedmzE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;Here is another example that I use the exact same technique to create the drawing (&lt;a href="https://cssbattle.dev/play/66"&gt;challenge No.66&lt;/a&gt;), but in this case you have to focus on the negative space:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/eYErxGg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's take another two examples to see how to create shapes with css &lt;code&gt;background&lt;/code&gt; property&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssbattle.dev/play/6"&gt;Challenge No.6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/vYJjbRQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssbattle.dev/play/30"&gt;Challenge No.30&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/WNEyvBw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, css &lt;code&gt;background&lt;/code&gt; is a really powerful tool, it can create circles and rectangles at the same time and with different sizes. The only gotcha that we should keep in mind when we use background is that the background property is specified as one or more background layers, separated by commas. And the following layer will be positioned below the previous layer.&lt;/p&gt;

&lt;p&gt;So in challenge No.6 I first drew the background with a transparent circle in it, then I drew the color wheel in the second layer, so we can see the &lt;code&gt;conic-gradient&lt;/code&gt; as a circle in the center. If you mess up with the background layer, you will probably only see the conic-gradient layer take the whole screen, but not the background color nor the circle shape.&lt;/p&gt;

&lt;p&gt;Here is another example that I used background layer to complete the challenge:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssbattle.dev/play/33"&gt;Challenge No.33&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lucas1004jx/embed/yLoEYpp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;box-shadow&lt;/code&gt; and &lt;code&gt;background&lt;/code&gt; are the two most useful properties that I find to help me create the drawings during the challenge. As for the other properties, they are straightforward to use, so I won't explain them with more details here.&lt;/p&gt;

</description>
      <category>css</category>
      <category>cssdrawing</category>
      <category>cssbattle</category>
    </item>
  </channel>
</rss>
