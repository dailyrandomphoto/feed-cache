<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Angular directives: Interesting ways to use it.</title>
      <author>Rahman Adewale Hafeez</author>
      <pubDate>Wed, 19 May 2021 22:04:40 +0000</pubDate>
      <link>https://dev.to/dwale/angular-directives-interesting-ways-to-use-it-1k4b</link>
      <guid>https://dev.to/dwale/angular-directives-interesting-ways-to-use-it-1k4b</guid>
      <description>&lt;p&gt;This article will be using the angular directive to create a reusable custom user validation field. A typical use case will be an account lookup field or any user validation field.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mGRAelUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp7a4smvh4wgumcddaoo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mGRAelUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp7a4smvh4wgumcddaoo.gif" alt="gif for validate account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll be using a bank account validation feature for this document. I came about this idea due to my experience in the fintech industry, where I've had to implement this across various applications, this will allow you to keep your code DRY and it also looks cool 😉.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="text" [appAccountLookup] = "bankInformationForm.value"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we create our angular application using the Angular CLI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new account-validation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that's done, we need to navigate into our application and create our directive, it should be added automatically to your declarations array in your app.module.ts file. You can achieve that with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd account-validation
ng generate directive accountLookup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in our app folder, let's create an interface that will help define the signature of the object our directive will accept as an input. It should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**bankInfo.ts**

export class IBankInfo {
   bankCode: string;
   bankAccountNumber: string;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our newly created directive should have the structure displayed below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;** account-lookup.directive.ts **

import { Directive } from '@angular/core';

@Directive({
selector: '[appAccountLookup]'
})

export class AccountLookupDirective {
constructor() {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we continue with our directive, let's create the form that will house the input that will use the directive. It should look like this once you are done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**app.component.ts**

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  bankInformationForm!: FormGroup;

  constructor (private formBuilder: FormBuilder) {}
  ngOnInit(): void {
     this.initializeForm();
  }

  private initializeForm():void {
   this.bankInformationForm = this.formBuilder.group({
      bankCode: ["", Validators.required],
      bankAccountNumber: ["", Validators.required]
  });
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, let's bind our template to the form and use our directive in the account number input field&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**app.component.html**

&amp;lt;form  [formGroup]= "bankInformationForm"&amp;gt;
  &amp;lt;fieldset&amp;gt;
    &amp;lt;div class="input__field--row"&amp;gt;
      &amp;lt;label &amp;gt;Bank&amp;lt;/label&amp;gt;
      &amp;lt;span class="input__wrapper"&amp;gt;
       &amp;lt;select name="bankCode" id="bankCode" formControlName="bankCode"&amp;gt;
   &amp;lt;option [disabled]=true value=""&amp;gt;Choose Bank&amp;lt;/option&amp;gt;
   &amp;lt;option value="038"&amp;gt;GTBank&amp;lt;/option&amp;gt;
       &amp;lt;/select&amp;gt;
      &amp;lt;/span&amp;gt;
     &amp;lt;/div&amp;gt;

    &amp;lt;div class="input__field--row"&amp;gt;
      &amp;lt;label&amp;gt;Account Number&amp;lt;/label&amp;gt;
      &amp;lt;span class="input__wrapper"&amp;gt;
       &amp;lt;input type="text" name="bankAccountNumber"id="bankAccountNumber" formControlName="bankAccountNumber" [appAccountLookup] = "bankInformationForm.value"/&amp;gt;
      &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/fieldset&amp;gt; 
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's bring in all the elements we need to bring this directive to life.&lt;/p&gt;

&lt;p&gt;Our directive will accept the bank details we retrieve from our BankInformation form. We will be making use of reactive forms so don't forget to import the ReactiveFormsModule in your app.module.ts file, we will need to import the &lt;a href="https://angular.io/api/core/Input"&gt;Input&lt;/a&gt; decorator. We are also going to need the &lt;a href="https://angular.io/api/core/Renderer2"&gt;Renderer2&lt;/a&gt; and &lt;a href="https://angular.io/api/core/ElementRef"&gt;ElementRef&lt;/a&gt; classes to be injected in here to make this work, now your directive should look like this.&lt;br&gt;
It will take the &lt;strong&gt;bankDetails&lt;/strong&gt; object as its Input so we can declare it as it is below. We would also be adding a loading text and a default text to the element that will perform the action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;** account-lookup.directive.ts **
import { Directive, ElementRef, Input, Renderer2} from '@angular/core';
@Directive({
  selector: '[appAccountLookup]'
})
export class AccountLookupDirective {
 @Input('appAccountLookup') bankDetails!: IBankInfo;
 defaultActionText: string = 'Verify Account';
 loadingActionText: string = 'Verifying...';

  constructor(private renderer: Renderer2, private el: ElementRef)                                                    {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! next up, let's code the method that will modify our input by adding the necessary elements to it which will be called in the constructor of our AccountLookupDirective class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private modifyField():void {

  // Set style of parent
  const parent =  this.renderer.parentNode(this.el.nativeElement)
  this.renderer.setStyle(parent, 'position', 'relative');

  // Create action element inside the input field
  const actionButton = this.renderer.createElement('span');
  this.renderer.addClass(actionButton, 'inside__input--button');
this.renderer.setProperty(actionButton,'innerHTML',this.defaultActionText);

  actionButton.addEventListener('click', (event:any) =&amp;gt; {
  // Method that will return the account name
  });

  this.renderer.appendChild(parent, actionButton);
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above we've created the &lt;em&gt;"Verify"&lt;/em&gt; action, we also gave it a class of &lt;em&gt;"inside__input - button"&lt;/em&gt;, the CSS class will be styled like this. Let's also add the class our account name will be displayed, &lt;em&gt;"result__under - text"&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.inside__input--button {
   position: absolute;
   font-size: 10px;
   right: 13px;
   top:30%;
   cursor: pointer;
   user-select: none;
 }
.result__under--text {
   position: absolute;
   font-size: 12px;
   left: 0px;
   bottom: -50%;
   cursor: pointer;
   user-select: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we just did above was to add a verify button inside our input element so our users can click on that button and fetch the account name from the account validation API.&lt;/p&gt;

&lt;p&gt;Let's create a utility service that will contain the method which will make the API call to the service to validate the user's bank details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng generate service utility
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add the method that will make the API call, your service should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**utility.service.ts**
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class UtilityService {
  constructor( private httpClient: HttpClient ) { }

  public validateAccount(validateAccount): Observable&amp;lt;any&amp;gt; {

    return this.httpClient.post('this.apis.verifyAccount', validateAccount)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now import the service in our directive and inject it via the constructor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;** app.component.ts **
import { IBankInfo } from './bankInfo';
import { UtilityService } from './utility-service.service';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's code the method that will make this API call and the actions that will be performed after the account name is returned. We will call this method &lt;strong&gt;verifyAccountDetails&lt;/strong&gt;. This is where we retrieve the account name and append it to the input field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**account-lookup.directive.ts**

  private verifyAccountDetails(actionButton: HTMLElement,  parent:HTMLElement){
this.renderer.setProperty(actionButton,'innerHTML',this.loadingActionText);

  const accountNameDisplay = this.renderer.createElement('span');
  this.renderer.addClass(accountNameDisplay, 'result__under--text');

  this.renderer.appendChild(parent, accountNameDisplay);

 this.utilityService.validateAccount(this.bankDetails)
 .subscribe((resp)=&amp;gt; {
   actionButton.innerHTML = this.defaultActionText;
this.renderer.setProperty(accountNameDisplay,'innerHTML',resp.accountName);
},
 (error: any)=&amp;gt; {
   actionButton.innerHTML = this.defaultActionText;
   console.log(error);
  })
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, our method accepts the actionButton and the parent element as compulsory parameters. We created the element the returned account name will be displayed and gave a class of &lt;em&gt;result_under - text&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With that, we can easily reuse this directive in any component across our application. You can find the code on my &lt;a href="https://github.com/dwale/account-lookup-directive-in-angular"&gt;Github&lt;/a&gt;, please leave your comments and suggestions.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>directives</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>"Am I a bad developer?" - A question developers commonly face</title>
      <author>𝙼𝚊𝚗𝚞𝚃𝚑𝚎𝙲𝚘𝚍𝚎𝚛</author>
      <pubDate>Wed, 19 May 2021 22:00:41 +0000</pubDate>
      <link>https://dev.to/manuthecoder/am-i-a-bad-developer-a-question-developers-commonly-face-4gck</link>
      <guid>https://dev.to/manuthecoder/am-i-a-bad-developer-a-question-developers-commonly-face-4gck</guid>
      <description>&lt;p&gt;Being a developer is hard, no doubt about it.&lt;br&gt;
Software development is a field where nobody knows everything. Everyone in this field loves to share and talk about the technology they are working on or they have explored. &lt;strong&gt;Everybody wants to learn some sort of technology they are lacking because nobody wants to become a bad developer.&lt;/strong&gt; If you are a beginner or experienced understand that technology is a never-ending thing so there will be always something to learn and you can’t learn all the technology, frameworks, tools which are coming out every day. Accept that when you see someone’s proficiency in a certain domain or technology it doesn’t mean he/she knows everything. They are also like you and they also don’t know something in tech that you know. Today everyone in software development needs help from StackOverflow or other resources so you’re not alone with this feeling. &lt;strong&gt;Just because someone knows a framework or library which you don't know doesn't mean you're a bad developer!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A good programmer understands that that they have to continue to learn and grow. They strive to do their best at every effort, admit to failures and learn from them. A good programmer loves to program, and would do so in their spare time even if they already spend 80+ hours a week programming.&lt;br&gt;
&lt;a href="https://softwareengineering.stackexchange.com/questions/41473/how-can-i-know-whether-i-am-a-good-programmer"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's a couple of tips for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Don't judge yourself&lt;/strong&gt; - People tend to undervalue themselves. Ask a mentor instead&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learn the basics first&lt;/strong&gt; - React, jQuery, Vue might be wonderful technologies, but remember, they are all based on JavaScript! Learn the fundamentals first before going on to the frameworks/libraries. It will make life easier!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't try to learn everything&lt;/strong&gt; - If you know at least 10-15 programming languages, that's awesome! There are over 700 programming languages. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Be passionate&lt;/strong&gt; - Yes, you should &lt;em&gt;want&lt;/em&gt; to learn more. &lt;em&gt;Wanting to learn more makes you a very good programmer!&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Work on personal projects&lt;/strong&gt; - (ok, well, I'm still in school, and I dont have a job yet), but still, have personal projects. It makes coding fun!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully you found this useful&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Rails Generators</title>
      <author>Jessie Rohrer</author>
      <pubDate>Wed, 19 May 2021 21:47:07 +0000</pubDate>
      <link>https://dev.to/jrrohrer/rails-generators-1p44</link>
      <guid>https://dev.to/jrrohrer/rails-generators-1p44</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@robpumphrey?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Rob Pumphrey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/red-blocks?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I started learning Rails a few weeks ago, the concept of using generators scared me. I am a visual learner, and I like to have information laid out neatly in front of me. I can't push to GitHub without refreshing my repo page to make sure the push actually...pushed. So imagine my anxiety when I ran a generator for the first time and about 500 files were added to my project. &lt;/p&gt;

&lt;p&gt;If you are a beginner who is just as weary of new command line actions as I am, I am here to tell you it's totally OK to embrace Rails' generators. They will make your life easier, I promise. I'm going to break down what the most commonly used generators do, what they add to your project, and how to decide which ones to use and when.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scaffold-generator"&gt;
  &lt;/a&gt;
  Scaffold Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate scaffold ModelName column_name:data_type&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This one is basically cheating, but your app will be up and running (if not looking super bland) in just a couple of minutes. But it is unlikely that the code generated will be a perfect fit for your application, because it basically generates a complete app, minus the content. You will end up removing files and taking extra time to go through and figure out which of the generated files you actually need. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It
&lt;/h3&gt;

&lt;p&gt;If you need an app up and running, like, yesterday, and you don't care about bloat files. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resource-generator"&gt;
  &lt;/a&gt;
  Resource Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate resource ModelName column_name:data_type&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have your project planned out, this generator will save you a lot of time getting set up. It will create your model, controller, migration, helper file, scss file, and views folder. It will also add a full &lt;code&gt;resources&lt;/code&gt; call in your &lt;code&gt;routes.rb&lt;/code&gt; file.  You can specify attributes that will be added to your migration table, and you can specify a 'belongs_to' Active Record association that will automatically be filled in for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It
&lt;/h3&gt;

&lt;p&gt;If you want to create your views on your own, you are using a front-end MVC framework, or you are building an API. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#model-generator"&gt;
  &lt;/a&gt;
  Model Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate model ModelName column_name:data_type column_name2:data_type2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This generator is great for creating the core code needed to create a model and associated database table without adding a bunch of extra stuff to your program. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It
&lt;/h3&gt;

&lt;p&gt;Primarily when you are adding a new model to your project, if you only want the model file and the migration file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#controller-generator"&gt;
  &lt;/a&gt;
  Controller Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate controller ControllerName controller_action controller_action&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will allow you to create a controller. You can append the names of controller actions you want to add, and Rails will create routes to each of those arguments. It will also create a  new view directory and a template file for each of the controller actions specified. Finally, it will also create a helper file and an scss file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It:
&lt;/h3&gt;

&lt;p&gt;This generator is ideal if you want to create a static views or non-CRUD related features. Like adding a Sessions controller for handling signups and logins. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#migration-generator"&gt;
  &lt;/a&gt;
  Migration Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails generate migration MigrationName column_name:data_type&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Like the name implies, this generator will create a new migration for you, and add it to your &lt;code&gt;db/migrate&lt;/code&gt; file. You can specify the name of the migration and any attributes you want to add. Rails is even kind enough to infer from the name of your migration what you want to accomplish. So if you name your migration &lt;code&gt;AddContentToComments&lt;/code&gt; it will create a migration that will add a column called content to your comments table. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-should-use-it"&gt;
  &lt;/a&gt;
  When You Should Use It
&lt;/h3&gt;

&lt;p&gt;When all you need is a new migration file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes-on-rails-generators"&gt;
  &lt;/a&gt;
  Notes on Rails Generators
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can shorten the command by swapping the word &lt;code&gt;generate&lt;/code&gt; with the letter &lt;code&gt;g&lt;/code&gt;: &lt;code&gt;rails g model User username:string password:password_digest&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you don't want the included Rails test framework, append the flag &lt;code&gt;--no-test-framework&lt;/code&gt; to the end of your generate command.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you ever want to know what generators are available to you, you can always type &lt;code&gt;rails generate&lt;/code&gt; into your console. You'll get an output that looks like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Usage: rails generate GENERATOR [args] [options]

General options:
  -h, [--help]     # Print generator's options and usage
  -p, [--pretend]  # Run but do not make any changes
  -f, [--force]    # Overwrite files that already exist
  -s, [--skip]     # Skip files that already exist
  -q, [--quiet]    # Suppress status output

Please choose a generator below.

Rails:
  application_record
  assets
  benchmark
  channel
  controller
  generator
  helper
  integration_test
  jbuilder
  job
  mailbox
  mailer
  migration
  model
  resource
  scaffold
  scaffold_controller
  system_test
  task

ActiveRecord:
  active_record:application_record

TestUnit:
  test_unit:channel
  test_unit:generator
  test_unit:install
  test_unit:mailbox
  test_unit:plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rails generators are your friend. They do a lot of grunt work for you so you can get started on the fun parts of your project. &lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GitOps Superpowers</title>
      <author>Charles Landau</author>
      <pubDate>Wed, 19 May 2021 21:23:16 +0000</pubDate>
      <link>https://dev.to/charlesdlandau/gitops-superpowers-40p</link>
      <guid>https://dev.to/charlesdlandau/gitops-superpowers-40p</guid>
      <description>&lt;p&gt;I've been using GitOps for the past few years and I wanted to reflect briefly on what I've learned, how it helps, and how it breaks down.&lt;/p&gt;

&lt;p&gt;The term GitOps was developed by Weaveworks in 2017. It's a technique where you put the desired state of your system in a version controlled repository. When changes are made in the code, those changes get applied to your system automatically (they are "deployed"). There are lots of tools that implement this, including &lt;a href="https://fluxcd.io/"&gt;Weaveworks' own FluxCD tool&lt;/a&gt;, &lt;a href="https://www.terraform.io/cloud"&gt;Terraform Cloud&lt;/a&gt;, &lt;a href="https://vercel.com/"&gt;and Vercel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a deeper dive on GitOps, &lt;a href="//gitops.tech"&gt;gitops.tech&lt;/a&gt; is a great place to start.&lt;/p&gt;

&lt;p&gt;Since I started using it, GitOps has made it considerably easier for me to build. Considerations like governance, tracking changes, and testing are much less daunting. Generally, what I like to do now is require changes to get a peer review before being accepted. For more sensitive environments some providers will &lt;a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners"&gt;let you assign ownership to specific parts of the system&lt;/a&gt;, so that those owners must be the ones to approve changes. This is great for &lt;a href="https://www.openriskmanual.org/wiki/Four_Eyes_Principle"&gt;enforcing the "four eyes principle"&lt;/a&gt; - that changes can't get made by a single person. Sometimes it can be good to define the desired infrastructure alongside software, as with Vercel or many projects that use &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt;. In other cases it's much better to avoid this, such as when you're using GitOps to manage a cloud account.&lt;/p&gt;

&lt;p&gt;All the benefits of defining systems with code roll up to the GitOps approach. Changes in the repository can be tested automatically, you can write reusable libraries, you can try your changes in test/QA environments before accepting them. The nice thing here is that you can accomplish this using git branches! Your CI tool probably has prebuilt jobs that can cover many of these use cases.&lt;/p&gt;

&lt;p&gt;Unfortunately, not everything can always be defined declaratively and deployed automatically and on time. There are a lot of factors that could drive you back to "ClickOps". The most obvious one is when the code doesn't support a resource you need (e.g. there is no Terraform implementation for what you're doing.) Two different problems arise when this happens. The first is that the steps you took manually all add up to a debt, and they need to be taken again if you ever need to redeploy. They need to be documented, and they need to be automated. Failing to document them is very bad, and the task of automating them has a way of languishing in the backlog. The other problem is that you have chipped away at one of the benefits of GitOps. We want the team to trust that the source repository describes the desired state very well. If we have enough manual workarounds tacked on to that desired state it becomes much harder to look at the source repository and understand what's going on.&lt;/p&gt;

&lt;p&gt;In addition to the problem of manual workarounds, there can be some other challenges with GitOps having to do with bootstrapping and kickstarting.&lt;/p&gt;

&lt;p&gt;Bootstrapping a GitOps-managed system can be the cause of a lot of navel-gazing and &lt;a href="https://en.wikipedia.org/wiki/Rube_Goldberg_machine"&gt;Rube Goldberginess&lt;/a&gt;. There is usually no practical reason to automate every aspect of the bootstrapping, and it's turtles all the way down so why bother? (I have a strong urge to automate all the things, so this is mostly advice to myself.) An illustrative example: You may want to make an AWS Account Factory, but you wouldn’t write a puppet to automate the root account provisioning.&lt;/p&gt;

&lt;p&gt;It can sometimes be necessary to "kickstart" resources as well, wherein we delete something that's in the desired state definition, like a container or storage volume, so that the automation pipeline can detect the missing resource and recreate it. There are a lot of different reasons this can end up being needed, often tied to implementation details that are at a lower level of abstraction than you're dealing with. (Immutable infrastructure methodologies seem to have a bunch of related problems here.)&lt;/p&gt;

&lt;p&gt;Despite the challenges, I don't think I'll be transitioning out of GitOps any time soon, and in fact I want to manage more things with GitOps. It feels faster to click through the AWS dashboard and make an S3 bucket, but it's fast in the same way writing code without tests feels like saving time. I think there's more opportunity for data and analytics resources to be managed by GitOps, and &lt;a href="https://twitter.com/kelseyhightower/status/1164194470436302848"&gt;treating configuration like data&lt;/a&gt; opens up all kinds of new possibilities.&lt;/p&gt;

&lt;p&gt;Cover Photo by Zach Reiner on Unsplash&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>kubernetes</category>
      <category>cloud</category>
    </item>
    <item>
      <title>A closer look at the new Glitch starter apps</title>
      <author>jenn schiffer</author>
      <pubDate>Wed, 19 May 2021 21:09:03 +0000</pubDate>
      <link>https://dev.to/glitch/a-closer-look-at-the-new-glitch-starter-apps-22ke</link>
      <guid>https://dev.to/glitch/a-closer-look-at-the-new-glitch-starter-apps-22ke</guid>
      <description>&lt;p&gt;&lt;em&gt;The following post was written by Glitch engineer, &lt;a href="https://glitch.com/@cute"&gt;Keith Kurson&lt;/a&gt;. In it, he discusses the tech stack and opinions behind our new lineup of Glitch starter apps. Enjoy, and let us know what you think + create!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We &lt;a href="https://blog.glitch.com/post/remix-a-whole-new-glitch"&gt;just launched generated static sites&lt;/a&gt;! 🎉 This has been an in-flight feature for a long time, and something I’m really excited to finally see out in the world. There are a lot of moving pieces, but the most important thing to take away is this: generated static sites allow you to run a development process and, when you’re done editing, Glitch will run your &lt;code&gt;npm run build&lt;/code&gt; script and upload that optimized build to the glitch.me domain every project gets free.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://glitch.com/create-project"&gt;new starter projects&lt;/a&gt; were created for remixing. This bumps up our two templates (hello-express and hello-webpage) to four (website, node, react, eleventy) with opinionated and minimal versions of each. Thinking through the technology choices for each starter and choosing the packages that we were endorsing was an exciting challenge, and we were able to build on the incredible work the open-source community has been doing since we last created new starters. Let’s walk through the new starters and what powers them to give you a better idea of how they’ll help you get started building your idea in seconds.&lt;/p&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/glitch-hello-node?previewSize=100&amp;amp;path=index.html" alt="glitch-hello-node on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  Node.js
&lt;/h3&gt;

&lt;p&gt;Our previous Node.js starter, hello-express, was in daily use but starting to fall behind modern Node best practices. Looking at the landscape of Node web servers, there was a clear choice: &lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt;. The &lt;a href="https://github.com/fastify/benchmarks/"&gt;speed&lt;/a&gt; gives us the ability to serve more pages, faster, from the glitch containers. It’s also great how &lt;a href="https://www.fastify.io/ecosystem/"&gt;easily extensible&lt;/a&gt; Fastify is. Having &lt;a href="https://www.fastify.io/docs/latest/Validation-and-Serialization/"&gt;validation&lt;/a&gt; built-in didn’t hurt. We are really excited about what Fastify will allow us to build going forward and how to leverage it for Glitch users; plus, we can build &lt;a href="https://www.fastify.io/docs/latest/Plugins/"&gt;Glitch-specific plugins&lt;/a&gt; to interface with our asset management, fully-powered terminal, etc., in the future. There isn’t a lot of boilerplate needed to instantly create an API, so we were able to keep both the opinionated and minimal versions of the Node.js starter fairly straightforward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HMLQP7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tm20kqvf4lh3lecw29s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HMLQP7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tm20kqvf4lh3lecw29s.jpg" alt="screenshot of a benchmark comparison of requests per second showing that Fastify comes out on top. Data: Fastify, 38901 req/sec; Koa, 28576 req/sec; Express, 8458 req/sec; Restify, 24450 req/sec; Hapi, 20302 req/sec."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Above: Fastify benchmark comparison&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#react-generated-static-sites"&gt;
  &lt;/a&gt;
  React + Generated Static Sites
&lt;/h3&gt;

&lt;p&gt;We’ve had trouble in the past getting the React development process to be performant on Glitch servers, so solving the speed problem was the #1 priority. Fortunately, our team didn’t have to do much of the work here and instead could rely on &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; to do the heavy lifting. It starts &lt;strong&gt;immediately&lt;/strong&gt;, supports TypeScript and JSX, and has hot module reload enabled by default. That significantly reduced the surface area we needed to build ourselves to support a lightning-fast React workflow.&lt;/p&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/glitch-hello-react?previewSize=100&amp;amp;path=index.html" alt="glitch-hello-react on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;One way Vite achieves these incredible speeds is by bundling all of your dependencies (in &lt;a href="https://glitch.com/~glitch-hello-react"&gt;~glitch-hello-react&lt;/a&gt; they are: React, Wouter and react-helmet-async) with &lt;a href="https://esbuild.github.io/"&gt;ESBuild&lt;/a&gt;. ESBuild is an extremely fast JavaScript bundler written in Go. Most likely you aren’t changing your dependencies nearly as much as your code, so it can do that once and only build again when you add a new dependency or upgrade the version.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1siNpSQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvy5zn30qed2h5axdwdj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1siNpSQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvy5zn30qed2h5axdwdj.jpg" alt='bar graph captioned "above: the time to do a production bundle of 10 copies of the three.js library from scratch using default settings, including minification and source maps" and each bar represents a build time per tool, with esbuild having the best, lowest time. Data: esbuild, 0.37s; rollup + terser, 36s; webpack 4, 41.91s; webpack 5, 54.5s; parcel 2, 56.71s; parcel 1, 118.51s.'&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;From esbuild.github.io&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you close the editor and stop working on your site, it runs the Vite build process in the background which creates an &lt;a href="https://vitejs.dev/guide/features.html#build-optimizations"&gt;optimized bundle&lt;/a&gt; with Rollup. That means you can take advantage of the wild world of &lt;a href="https://vitejs.dev/guide/using-plugins.html"&gt;Rollup plugins&lt;/a&gt;. We serve this fast production bundle at your free glitch.me domain until you start working in the editor again.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#eleventy-generated-static-sites"&gt;
  &lt;/a&gt;
  Eleventy + Generated Static Sites
&lt;/h3&gt;

&lt;p&gt;Static site generators are all the rage today, and for good reason. &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt; cares about speed, ease of use, and—most importantly—the experience of someone browsing your site. When you run the Eleventy build script, it takes all of your files and creates a bundle that can be loaded by those still using AOL dialup. (Please let us know if you are still using AOL dialup!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PFn7HVbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvckd1rcjjsspixxeyp9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFn7HVbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvckd1rcjjsspixxeyp9.jpg" alt="screenshot from the 11ty site showing the ~glitch-hello-eleventy lighthouse scores of 95, 96, 100, 100"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Above: Eleventy Lighthouse scores&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Eleventy starters list is a scoreboard with Lighthouse scores, pushing Eleventy builders to make a performant site that anyone on any connection can view. As website bundles get more and more bloated, Eleventy pushes for as little JavaScript as possible, and uses it only where you need it.&lt;/p&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/glitch-hello-eleventy?previewSize=100&amp;amp;path=index.html" alt="glitch-hello-eleventy on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;Our &lt;a href=""&gt;~glitch-hello-eleventy&lt;/a&gt; starter has support for blog posts in Markdown, beautiful styling, and instructions for adding more complexity if you need it. The &lt;a href=""&gt;minimal template&lt;/a&gt; was built by the Eleventy team.&lt;/p&gt;

&lt;p&gt;Along with support for Eleventy, we’re supporting all of the Eleventy projects that others have built. Want a high-performance blog with image optimizations and analytics? Check out &lt;a href="https://www.industrialempathy.com/posts/eleventy-high-performance-blog/"&gt;eleventy-high-performance-blog&lt;/a&gt;. Something a little more designed, that uses Tailwind CSS and a JS framework (Alpine.js)? &lt;a href="https://11ta.netlify.app/"&gt;Try 11ta&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#everything-else"&gt;
  &lt;/a&gt;
  Everything else 🎉
&lt;/h3&gt;

&lt;p&gt;These are just our starters using the new generated static site functionality. You can apply the same concepts to a &lt;a href="https://glitch.com/~glitch-hello-vue"&gt;Vue site&lt;/a&gt;, or &lt;a href="https://glitch.com/~glitch-hello-svelte"&gt;Svelte&lt;/a&gt;! Any code you can run in the build script that outputs to a build folder can take advantage of this new functionality. Just add this configuration to your package.json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"glitch": {
  "projectType": "generated_static"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will tell Glitch to treat your project as a generated static site so you have a development environment when you want it, and a production site on your glitch.me domain when you’re done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, why not remix one of these starters and &lt;a href="https://glitch.com/create-project"&gt;create a new project&lt;/a&gt; right now?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>eleventy</category>
      <category>fastify</category>
      <category>vite</category>
    </item>
    <item>
      <title>Cheap Recommended Laptops for Coding</title>
      <author>Elijah Trillionz</author>
      <pubDate>Wed, 19 May 2021 21:04:57 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/cheap-recommended-laptops-for-coding-3jhi</link>
      <guid>https://dev.to/elijahtrillionz/cheap-recommended-laptops-for-coding-3jhi</guid>
      <description>&lt;p&gt;Oftentimes, laptops that you will see programmers and tech experts recommend for programmers are overrated. You don't need a $1000+ &lt;strong&gt;laptop for coding.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;cheap laptops&lt;/strong&gt; that have the core requirements to serve as a &lt;em&gt;laptop for coding.&lt;/em&gt; We will be talking about these core requirements because with them you can go to a laptop shop and get &lt;em&gt;good laptops for coding&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So if you're just starting out in programming and you may not have had the money for a $1000+ laptop, am saying there is no need to wait to get that money before starting. You can start now with what you have.&lt;/p&gt;

&lt;p&gt;I will categorize these core requirements into Speed, Storage (Memory), and Processor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rqjFVgUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/laptops-for-coding-webdeverguide-processor.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rqjFVgUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/laptops-for-coding-webdeverguide-processor.jpg" alt="processors" title="processors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-processors-microprocessors"&gt;
  &lt;/a&gt;
  1. Processors (Microprocessors):
&lt;/h3&gt;

&lt;p&gt;A microprocessor is a computer processor that processes instructions on a computer in an integrated circuit. In this article, we will only look at Intel and AMD. A 32-bit processor or a 64-bit processor?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XM2vAwjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/laptops-for-coding-webdeverguide-speed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XM2vAwjt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/laptops-for-coding-webdeverguide-speed.png" alt="speed of a computer" title="speed of a computer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-speed-clock-speed"&gt;
  &lt;/a&gt;
  2. Speed (Clock Speed):
&lt;/h3&gt;

&lt;p&gt;The speed of microcomputers (laptops) is measured in gigahertz (GHz). It determines how fast your laptop process instructions. The speed of a laptop in most cases depends on the laptop's processor. An Intel 2.5 GHz is faster than an AMD 3.0 GHz.&lt;/p&gt;

&lt;p&gt;Then there is something called &lt;a href="https://www.hp.com/us-en/shop/tech-takes/how-to-overclock-pc-cpu"&gt;overclocking your computer&lt;/a&gt;. It increases the speed of your laptop beyond what the manufacturer built. You can find details here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ng-KDzWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/laptops-for-coding-webdeverguide-storage.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ng-KDzWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://webdeverguide.com/wp-content/uploads/2021/05/laptops-for-coding-webdeverguide-storage.jpg" alt="ram" title="ram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-storage-memory"&gt;
  &lt;/a&gt;
  3. Storage (Memory):
&lt;/h3&gt;

&lt;p&gt;How much GB of &lt;em&gt;RAM (Random Access Memory)&lt;/em&gt; have? And what should be the size of your Permanent storage?&lt;/p&gt;

&lt;p&gt;Just a quick recap, your RAM stores instructions temporarily while the permanent storage could be your hard disk.&lt;/p&gt;

&lt;p&gt;We will analyze the above factors based on the aspect of programming you are into. Mobile App Developers and Web Developers. Every other one is beyond the scope of this article.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#offer-for-you-only"&gt;
  &lt;/a&gt;
  Offer For You only:
&lt;/h3&gt;

&lt;p&gt;If you want to host a website, you should try &lt;a href="https://www.bluehost.com/track/elijahonlinedailytech"&gt;&lt;strong&gt;BlueHost&lt;/strong&gt;&lt;/a&gt;. BlueHost is a leading host company that hosts more than &lt;strong&gt;2 MILLION&lt;/strong&gt; websites on the internet.&lt;/p&gt;

&lt;p&gt;Big CMS companies like Wordpress recommends it, because it is stress-free.&lt;br&gt;
With Just $2.75 dollars monthly you can get started. Use my referral link to get discount =&amp;gt; &lt;a href="https://www.bluehost.com/track/elijahonlinedailytech"&gt;&lt;strong&gt;Get Started&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#web-developers"&gt;
  &lt;/a&gt;
  Web Developers
&lt;/h3&gt;

&lt;p&gt;This field doesn't demand a lot from laptops. What you need is a laptop that can run a text editor at the same time run a browser and at the same time run two or three more apps.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-processor"&gt;
  &lt;/a&gt;
  1. Processor:
&lt;/h4&gt;

&lt;p&gt;A 32-bit processor would work fine. It is not the best option though, but it is the best affordable option.&lt;/p&gt;

&lt;p&gt;There are some web development tools (apps) that only runs on a 64-bit processor (that's what most modern apps build).&lt;/p&gt;

&lt;p&gt;But these apps either give you an option of using their websites like GitHub and Postman or they have alternatives that runs on 32-bit processors like Atom (Alternative: VSCode, Sublime)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-speed"&gt;
  &lt;/a&gt;
  2. Speed:
&lt;/h4&gt;

&lt;p&gt;At least a 1.6 GHz Intel (2.0 GHz AMD) would perform the above tasks just fine. (Am serious).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-storage"&gt;
  &lt;/a&gt;
  3. Storage:
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#permanent-storage"&gt;
  &lt;/a&gt;
  Permanent Storage:
&lt;/h5&gt;

&lt;p&gt;A 160 GB Hard-disk would work fine.&lt;/p&gt;

&lt;p&gt;Web developers shouldn't worry about permanent storage as they hardly do anything that takes a lot of storage space. If you watch movies or play a lot of songs then you could make use of external storage.&lt;/p&gt;

&lt;p&gt;But in all these, it's not bad or wrong to have a 1TB hard disk, but it's just unnecessary if you only program with the laptop.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#ram"&gt;
  &lt;/a&gt;
  RAM:
&lt;/h5&gt;

&lt;p&gt;A web developer needs a lot of RAM space, but nonetheless, a 2GB RAM will help you start fine. From my experience, I can say a 2GB RAM is not gonna give you a bad experience programming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mobile-app-developers"&gt;
  &lt;/a&gt;
  Mobile App Developers
&lt;/h3&gt;

&lt;p&gt;Unlike web developers, these guys' fields require a lot from &lt;em&gt;laptops for coding&lt;/em&gt;. What they usually do, is have a text editor running, a browser running, an emulator from Android studio, and maybe two or three other apps running.&lt;/p&gt;

&lt;p&gt;Running the above tasks on a 1.6 GHz processor can so frustrate you that you will destroy your laptop 😅. So follow along.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-processor"&gt;
  &lt;/a&gt;
  1. Processor:
&lt;/h4&gt;

&lt;p&gt;Same as that of web developers because Android Studio runs on a 32-bit processor but it's not recommended and is no longer supported by Android Studio.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-speed"&gt;
  &lt;/a&gt;
  2. Speed
&lt;/h4&gt;

&lt;p&gt;Now, this is very important, I would not recommend going below a 2.6GHz Intel (3.0 GHz AMD).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-storage"&gt;
  &lt;/a&gt;
  3. Storage:
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#permanent-storage"&gt;
  &lt;/a&gt;
  Permanent Storage:
&lt;/h5&gt;

&lt;p&gt;At least 260GB hard-disk would do.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#ram"&gt;
  &lt;/a&gt;
  RAM:
&lt;/h5&gt;

&lt;p&gt;Android studio requirements specify 8GB RAM or more.&lt;/p&gt;

&lt;p&gt;Now you must have noticed I didn't mention XCode, now that's because you and I know it's not possible to get a MacBook laptop below $1000. Except you are getting a used one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is a little tip:&lt;/strong&gt;&lt;br&gt;
For web developers, if you're going for Windows, use Windows 7. Don't use Windows 10 on a 1.5GHz processor (Intel or AMD). Should be 2.5GHz or more.&lt;/p&gt;

&lt;p&gt;Also, don't buy a used AMD laptop. If you get one for free, use it but if any graphic issue comes up, don't repair it; just get a new one. Speaking from my engineering experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With the above requirements and recommendations, you can purchase cheap laptops for coding. If you want to learn to code and can't purchase a laptop yet, am glad to let you know you can learn with your phone.&lt;/p&gt;

&lt;p&gt;More of learning coding with your phone will be discussed in another post, so stay subscribed to our newsletter to receive a notification when it is published.&lt;/p&gt;

&lt;p&gt;If you want to see more of these, you can support me with just $5 monthly on &lt;a href="https://www.patreon.com/elijahtrillionz"&gt;Patreon&lt;/a&gt;. It means a lot. Thank you and happy hacking.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Actionable Advice for Creating Killer Content &amp; Growing an Audience</title>
      <author>Sam Tanoak Sycamore</author>
      <pubDate>Wed, 19 May 2021 20:43:56 +0000</pubDate>
      <link>https://dev.to/tanoaksam/actionable-advice-for-creating-killer-content-growing-an-audience-3hb5</link>
      <guid>https://dev.to/tanoaksam/actionable-advice-for-creating-killer-content-growing-an-audience-3hb5</guid>
      <description>&lt;h3&gt;
  &lt;a href="#in-an-era-of-extrashort-attention-spans-and-a-severely-oversaturated-media-landscape-it-can-be-a-real-struggle-to-get-people-excited-about-your-creative-output-online-no-matter-how-good-it-is"&gt;
  &lt;/a&gt;
  In an era of extra-short attention spans and a severely over-saturated media landscape, it can be a real struggle to get people excited about your creative output online - no matter how good it is.
&lt;/h3&gt;

&lt;p&gt;If you're a regular DEV reader, chances are you've also written a blog post on a technical topic before - or you've at least thought about it.&lt;/p&gt;

&lt;p&gt;What made you decide to do this?&lt;/p&gt;

&lt;p&gt;Most of y'all probably had a coding problem, and then you solved it in an interesting way, and you want to share your solution so that others might benefit from your experiences.&lt;/p&gt;

&lt;p&gt;And we love you for that!&lt;/p&gt;

&lt;p&gt;But the content creation alone is usually not enough.&lt;/p&gt;

&lt;p&gt;How do you convince anyone to give up a few minutes of their day to read your blog post or watch your latest video - especially when you consider that we are all basically one click away, at all times, from watching literally any TV show or movie ever released?&lt;/p&gt;

&lt;p&gt;You're gonna hate me for this, but the answer comes down to...&lt;/p&gt;

&lt;p&gt;...did you guess it yet?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-marketing"&gt;
  &lt;/a&gt;
  It's Marketing!
&lt;/h2&gt;

&lt;p&gt;I know - I had &lt;em&gt;zero&lt;/em&gt; interest in marketing when I first starting writing online. &lt;/p&gt;

&lt;p&gt;For years I neglected Marketing 101 because I hated the idea that I would be "manipulating" people somehow.&lt;/p&gt;

&lt;p&gt;I don't want to persuade anyone to do anything they don't actually &lt;em&gt;want&lt;/em&gt; to do!&lt;/p&gt;

&lt;p&gt;But at the same time:&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;do&lt;/em&gt; want them to engage with this stuff that I've poured so much time and energy into. &lt;/p&gt;

&lt;p&gt;Don't I?&lt;/p&gt;

&lt;p&gt;Well then, that's going to require some convincin', I reckon.&lt;/p&gt;




&lt;p&gt;Years ago - long before &lt;a href="https://tanoaksam.hashnode.dev/learning-to-code-off-grid"&gt;I learned how to code&lt;/a&gt; and changed careers - I self-published &lt;a href="https://thegoodliferevival.com/shop/foraging"&gt;an ebook about edible wild plants&lt;/a&gt; and started selling it through &lt;a href="https://thegoodliferevival.com/"&gt;my Squarespace blog&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Surely,&lt;/em&gt; I reasoned with myself, &lt;em&gt;once people come to the site and read the very dry but informative description of the book and see that it meets their needs, the sales will naturally start rolling in.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Crickets.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I got more serious about email marketing. I started running experiments with my list of about a thousand subscribers at the time.&lt;/p&gt;

&lt;p&gt;I tried doing it "on my terms" by avoiding the kind of standard marketing tactics that often turn me off as a consumer. The results were dismal.&lt;/p&gt;

&lt;p&gt;Eventually I set aside my better judgement and ran a "this weekend only!" sale - you know the kind:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This weekend only: take 25% off of my ebook. It's the deal of a lifetime so don't miss out! Hurry - quick - this offer ends Sunday at midnight!!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I sold more copies in that weekend alone than I had in the months since I originally launched the book.&lt;/p&gt;

&lt;p&gt;I didn't force anyone to do anything. No lies or shady business.&lt;/p&gt;

&lt;p&gt;Nobody communicated that they were unsatisfied with their purchase. Some reached out to thank me.&lt;/p&gt;

&lt;p&gt;That's when I finally had to admit that maybe these kinds of marketing tactics are so common &lt;em&gt;because&lt;/em&gt; - hear me out on this one -&lt;/p&gt;

&lt;p&gt;they work.&lt;/p&gt;

&lt;p&gt;...I know, groundbreaking stuff, right? :P&lt;/p&gt;




&lt;p&gt;In the years since that first product launch, I've wizened up considerably to the ways of online marketing. &lt;/p&gt;

&lt;p&gt;I'm not afraid of being intentional about trying to sell what I create - because why else did I create it, if not to get it into the hands of as many people as I can?&lt;/p&gt;

&lt;p&gt;Content marketing isn't terribly complicated. If you keep some basic guidelines in mind when you're crafting content and thinking about how you're going to present it to the world, you can significantly improve your ability to reach a much wider audience.&lt;/p&gt;

&lt;p&gt;What follows is pretty much everything I've learned about creating engaging content in my ten years of publishing online, distilled down into as few words as possible. It's not a formula so much as a framework for optimizing your chances of success with any given piece of content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-provide-value"&gt;
  &lt;/a&gt;
  1. Provide value
&lt;/h2&gt;

&lt;p&gt;'Value' is one of those buzzwords that's been shredded to pieces by shady marketers.&lt;/p&gt;

&lt;p&gt;So what do we actually mean by this?&lt;/p&gt;

&lt;p&gt;Give your readers what they need!&lt;/p&gt;

&lt;p&gt;Or better yet:&lt;/p&gt;

&lt;p&gt;Give them what they don't even know they need yet.&lt;/p&gt;

&lt;p&gt;Anticipate their needs and they'll think you're magical.&lt;/p&gt;

&lt;p&gt;The vast majority of what you see on social media amounts to the &lt;em&gt;opposite&lt;/em&gt; of providing value: people want to &lt;em&gt;take&lt;/em&gt; from you, whether it's your money or just your attention.&lt;/p&gt;

&lt;p&gt;This approach rarely leads to engagement, unless it happens to be controversial or provocative in all the worst ways (more on that momentarily).&lt;/p&gt;

&lt;p&gt;Your job as a content creator is to go out of your way to &lt;em&gt;give&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-frame-everything-in-terms-of-you"&gt;
  &lt;/a&gt;
  2. Frame everything in terms of 'You'
&lt;/h2&gt;

&lt;p&gt;Nobody cares about me.&lt;/p&gt;

&lt;p&gt;They want to know what I can do for them.&lt;/p&gt;

&lt;p&gt;How does this thing I've created solve their problems?&lt;/p&gt;

&lt;p&gt;Even when I'm writing about myself, I am meticulous about framing every detail in terms of how it relates to 'you', my intended reader.&lt;/p&gt;

&lt;p&gt;No matter what I'm writing about, my goal is always to &lt;em&gt;give you info or advice that you can act on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you re-read the introduction to this post, you will notice that I was very intentional about framing the whole thing in terms of "you."&lt;/p&gt;

&lt;p&gt;I could have said "I am blogger on Hashnode, and I sometimes struggle to get noticed. Here's my strategy for increasing engagement."&lt;/p&gt;

&lt;p&gt;Instead I went with "If you're reading this, you're probably a blogger who sometimes struggles to get noticed. So how can you increase your engagement?"&lt;/p&gt;

&lt;p&gt;They both convey essentially the same information. But I'd wager that you are about a thousand times more likely to be interested in the latter version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-seek-an-emotional-connection"&gt;
  &lt;/a&gt;
  3. Seek an emotional connection
&lt;/h2&gt;

&lt;p&gt;All of the most popular things I've ever published online had some element of emotional appeal. &lt;/p&gt;

&lt;p&gt;This ain't rocket surgery - people make decisions with their emotions. &lt;/p&gt;

&lt;p&gt;The tough part is figuring out what actually resonates most with your audience. This requires being an exceptionally good listener.&lt;/p&gt;

&lt;p&gt;This is also an area where it's important to tread lightly - people don't take well to having their emotions abused or manipulated, so when you go for the heart, it has to be genuine and not gratuitous.&lt;/p&gt;

&lt;p&gt;I've had a handful of tweets go "viral" (by my standards anyway) on &lt;a href="https://www.twitter.com/tanoaksam"&gt;Twitter&lt;/a&gt;. Almost all of them were about my career transition and contained a strong emotional hook that resonated with my readers. Crucially, they all came from my actual experiences - people can tell that I'm being authentic about what I'm describing.&lt;/p&gt;

&lt;p&gt;But of course you don't have to tell some life-changing story in order to create an emotional connection with your audience. In tech writing, it can be as simple as "hey, have you encountered this problem before? Sucks, doesn't it? Well, I have a solution..." That's enough to establish a rapport with your reader.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-be-provocative-within-reason"&gt;
  &lt;/a&gt;
  4. Be provocative, within reason
&lt;/h2&gt;

&lt;p&gt;On the internet, the name of the game - for better or worse - is &lt;em&gt;engagement&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;People are most likely to engage with the stuff that elicits a strong reaction - whether positive or negative.&lt;/p&gt;

&lt;p&gt;This is a dangerous game, but the payoff can be enormous!&lt;/p&gt;

&lt;p&gt;You can be provocative while remaining positive - one way to pull this off is by making a strong statement about a belief that you genuinely hold, without watering it down via weasel words.&lt;/p&gt;

&lt;p&gt;One of my coding mentors encourages his students to cultivate "strong opinions, loosely held."&lt;/p&gt;

&lt;p&gt;It's not "possibly maybe one of the best" - it &lt;em&gt;IS&lt;/em&gt; the best! Full stop.&lt;/p&gt;

&lt;p&gt;Sure, I could be convinced otherwise. But I want to instigate the conversation!&lt;/p&gt;

&lt;p&gt;Let people disagree if they want to! Maybe I hope to be proven wrong.&lt;/p&gt;

&lt;p&gt;There can be value in this kind of discourse, when it's done in good faith. That's easier said than done.&lt;/p&gt;

&lt;p&gt;And yes, you can also generate a whole lotta engagement through negativity. &lt;/p&gt;

&lt;p&gt;But - trust me on this one - you're basically setting yourself up to become Emperor Palpatine, sustained purely by the toxic bad vibes emanating through the universe.&lt;/p&gt;

&lt;p&gt;Marketing is a whole lot like The Force, honestly. It flows through all things in our galaxy, and it can be harnessed for incredible good or pure evil.&lt;/p&gt;

&lt;p&gt;Don't be like Emperor Palpatine. I don't think it ended well for him.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-be-generous-to-a-fault"&gt;
  &lt;/a&gt;
  5. Be generous to a fault
&lt;/h2&gt;

&lt;p&gt;My policy for creating content has always been to give away the best stuff for free.&lt;/p&gt;

&lt;p&gt;That has a lot to do with my personal ethics, but it's also the best way I've found to generate goodwill with an audience.&lt;/p&gt;

&lt;p&gt;With everything you share for free, your goal should be to receive overwhelming feedback that "I can't believe they aren't charging money for this!"&lt;/p&gt;

&lt;p&gt;When you give away your best work for free, you'll be amazed by how many people will circle back around to purchase whatever you might create in the future purely because they want to support you.&lt;/p&gt;

&lt;p&gt;If engagement is the currency of the internet, then cultivating goodwill is how you persuade people to invest in your work.&lt;/p&gt;

&lt;p&gt;Growing an audience is a whole skill set unto itself, but the ground rules I've laid out here ought to be enough to set up any blogger for maximum success over the long term.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#if-you-enjoyed-this-piece-and-you-want-to-keep-up-with-my-work-you-can-sign-up-for-my-email-newsletter-through-this-link-i-promise-to-make-every-email-something-you-will-be-excited-to-open"&gt;
  &lt;/a&gt;
  &lt;strong&gt;If you enjoyed this piece and you want to keep up with my work, you can &lt;a href="https://sycamore.design/newsletter"&gt;sign up for my email newsletter through this link&lt;/a&gt;. I promise to make every email something you will be excited to open!&lt;/strong&gt;
&lt;/h2&gt;

</description>
    </item>
    <item>
      <title>When React Hooks "just clicked" in my head 💡🤩</title>
      <author>Dan Greene</author>
      <pubDate>Wed, 19 May 2021 20:43:08 +0000</pubDate>
      <link>https://dev.to/dgreene1/when-react-hooks-just-clicked-in-my-head-4hd3</link>
      <guid>https://dev.to/dgreene1/when-react-hooks-just-clicked-in-my-head-4hd3</guid>
      <description>&lt;p&gt;A lot of people writing React think that when they initialize a variable, it's going to stay that way every time.&lt;/p&gt;

&lt;p&gt;For instance, let's imagine a very simple React component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might come away thinking that the &lt;code&gt;name&lt;/code&gt; variable will always be the same piece of memory no matter how many times the &lt;code&gt;Demo&lt;/code&gt; component is rendered.&lt;/p&gt;

&lt;p&gt;In reality, React calls that &lt;code&gt;Demo&lt;/code&gt; function every time it renders the parent components that contain the Demo component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-a-second"&gt;
  &lt;/a&gt;
  Wait a second...
&lt;/h2&gt;

&lt;p&gt;Yes, that means that &lt;code&gt;name&lt;/code&gt; is going to be a new variable every time &lt;code&gt;Demo&lt;/code&gt; is called (which is every time React needs to render it).&lt;/p&gt;

&lt;p&gt;So, it's almost like each time &lt;code&gt;Demo&lt;/code&gt; is rendered, the &lt;code&gt;name&lt;/code&gt; property is born again. That realization is what helped make React Hooks click. Hooks lets you make &lt;code&gt;name&lt;/code&gt; immortal (for the life of the browser tab being open).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-if-i-wanted-it-to-stay-the-same"&gt;
  &lt;/a&gt;
  What if I wanted it to stay the same?
&lt;/h2&gt;

&lt;p&gt;Well, that's what hooks were more or less invented for. Hooks predominantly are about allowing React devs to use simple functions to describe their creational patterns but to allow these functions to express stateful concerns.&lt;/p&gt;

&lt;p&gt;Before hooks, you would have had to use a Class to describe a component that has state.&lt;/p&gt;

&lt;p&gt;But with React Hooks like &lt;code&gt;useRef&lt;/code&gt;, you can say "hey React, would you mind keeping this variable around?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#k-but-let-me-see-this-in-action"&gt;
  &lt;/a&gt;
  K, but let me see this in action
&lt;/h2&gt;

&lt;p&gt;Sure! Here's a demo that shows starts off showing how the &lt;code&gt;Demo&lt;/code&gt; component is essentially stateless and therefore the &lt;code&gt;name&lt;/code&gt; property can never be the same between renders.&lt;/p&gt;

&lt;p&gt;If you follow along the comments in the code example below, you'll be able to uncomment the correct lines to show how you can inform React of which pieces you want it to keep the same between renders.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-memory-ref-demo?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Git, A Look Under The Hood - Prologue</title>
      <author>Mohamed ELIDRISSI</author>
      <pubDate>Wed, 19 May 2021 20:16:03 +0000</pubDate>
      <link>https://dev.to/elidrissidev/git-a-look-under-the-hood-prologue-3c4m</link>
      <guid>https://dev.to/elidrissidev/git-a-look-under-the-hood-prologue-3c4m</guid>
      <description>&lt;p&gt;Git is a free and open-source Distributed Version Control System (DVCS) initially created by Linus Torvalds in 2005 following the &lt;a href="https://lwn.net/Articles/130746/"&gt;BitKeeper controversy&lt;/a&gt; after none of the existing systems met his needs. Because Linus intended to use it for the Linux Kernel development, Git was designed to take into account performance, distribution, and safeguards against data loss. Fast-forward 16 years later and it is the de facto Version Control System (VCS) for software and an indispensable tool for every Software Engineer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can never understand everything. But, you should push yourself to understand the system.&lt;/p&gt;

&lt;p&gt;- Ryan Dahl (Creator of Node.js)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Git has excellent documentation and even a &lt;a href="https://git-scm.com/book/en/v2"&gt;free book&lt;/a&gt;, but most people don't bother learning about it and instead only try to memorize the commands they use in their day-to-day work or rely only on GUIs that make everything seem magical, this leads to them peeling their hair in frustration as they start facing all kind of issues (looking at you, merge conflicts!). While one can certainly use Git with just basic knowledge, knowing how it all works under the hood will give you extra confidence and will make you a distinguishable engineer.&lt;/p&gt;

&lt;p&gt;In this series, we will be going down the rabbit hole to try and demystify how Git works internally, and at the end, you'll come to know that &lt;strong&gt;Git is not magic&lt;/strong&gt;, its design model is what made it the powerful tool that we all love and hate (not anymore) today, so we must understand that before going any deeper.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS: This is not a beginner's guide so a basic knowledge of Git is required&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-is-distributed"&gt;
  &lt;/a&gt;
  Git is Distributed
&lt;/h2&gt;

&lt;p&gt;We hear about Git being a DVCS all the time, but do you really know what that means? Before we understand the meaning of distributed, let's first talk about Centralized VCSs (CVCS).&lt;/p&gt;

&lt;p&gt;In CVCSs, nothing is stored locally, so all actions depend on a single remote repository. To commit code, view the logs, or compare your changes with other people's, you'll need to be online. Being centralized also means having a single point of failure. If the repository is deleted by mistake or the disks on the server crash, everything will be lost.&lt;/p&gt;

&lt;p&gt;Now let's go back to DVCSs, when you do a &lt;code&gt;git clone&lt;/code&gt;, Git downloads the whole history of the repository and stores it in – its local database – the &lt;code&gt;.git&lt;/code&gt; folder. This means that you can still commit your work locally when you're on an airplane or when the internet is down and push it to a remote repository when you're back online, and essentially all developers who cloned this repository now have a backup in their machine. This also has the benefit of being extremely fast, as most operations don't need to reach for a server.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QC3800Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsuj3e2duqbw62m529gz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QC3800Fl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsuj3e2duqbw62m529gz.png" alt="Centralized vs. Decentralized Version Control Systems"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-takes-snapshots"&gt;
  &lt;/a&gt;
  Git Takes Snapshots
&lt;/h2&gt;

&lt;p&gt;This is one of the key design differences between Git and other VCSs. These other systems store information as an initial file and the changes (diffs) made to it over time, Git follows a different approach and instead takes a snapshot (think a picture) of your whole files when you do a commit, now you might think that's expensive if you have a lot of files, but as we'll come to see in the next part, Git is smart enough to not store the same file twice if it hasn't changed and instead references the previous version of that file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIOWhvJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptiux5owlbkcaqgaoj1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIOWhvJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptiux5owlbkcaqgaoj1r.png" alt="How Git takes snapshots of your files on each commit (dashed lines represent a reference to the previous version of the file)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The important point to get from this is that Git acts like a mini filesystem, but with superpowers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrity-is-builtin"&gt;
  &lt;/a&gt;
  Integrity is Built-in
&lt;/h2&gt;

&lt;p&gt;Before Git stores any file, it computes a 40 character long hexadecimal string known as a hash that serves as an identifier. To accomplish this, Git uses a popular hashing algorithm called &lt;a href="https://en.wikipedia.org/wiki/SHA-1"&gt;SHA-1&lt;/a&gt;. We'll see how it does it in the next part, but it will look similar to this: &lt;code&gt;a0b65939670bc2c010f4d5d6a0b3e4e4590fb92b&lt;/code&gt;. This makes it impossible for your files to change or get corrupted without Git knowing about it. Note that SHA1 is considered insecure nowadays, especially after Google released &lt;a href="https://shattered.it"&gt;SHAttered&lt;/a&gt; –the first practical collision attack against SHA1– in 2017 and &lt;a href="https://github.com/git/git/blob/master/Documentation/technical/hash-function-transition.txt"&gt;Git is planning to transition to SHA-256&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-states-in-git"&gt;
  &lt;/a&gt;
  File States in Git
&lt;/h2&gt;

&lt;p&gt;All files in a Git repository can either be &lt;strong&gt;modified&lt;/strong&gt;, &lt;strong&gt;staged&lt;/strong&gt;, or &lt;strong&gt;committed&lt;/strong&gt;. Your files go into the first state when git detects that it has changed from the last version (remember the hash?) stored in its database. To save this change, you'll need to commit it, but first, you have to tell Git which changes you want to "prepare" for the next commit. This is accomplished by adding them to the staging area. Once committed, Git takes a snapshot of your files and saves it permanently in its database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1EI8PYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/howfre4i0eqob431co6l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1EI8PYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/howfre4i0eqob431co6l.png" alt="Every file in a Git repository resides either in the working directory, the staging area, or the .git folder."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was a short introduction to this series where we will uncover the nitty-gritty details behind Git internals. We started by first understanding the key aspects of the Git design model. In the next part, we'll see how this all comes down together as we discuss Git Objects.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Originally published in my personal blog: &lt;a href="https://www.elidrissi.dev"&gt;The Self-Taught Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>git</category>
    </item>
    <item>
      <title>"Working in Public" - a recommendation not a review</title>
      <author>jonasbn</author>
      <pubDate>Wed, 19 May 2021 19:30:57 +0000</pubDate>
      <link>https://dev.to/jonasbn/working-in-public-a-recommendation-not-a-review-32p2</link>
      <guid>https://dev.to/jonasbn/working-in-public-a-recommendation-not-a-review-32p2</guid>
      <description>&lt;p&gt;One of the podcasts from the Changelog I really really enjoyed (I actually enjoy all of them), was the &lt;a href="https://changelog.com/rfc"&gt;"Request for Commits"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is hosted by Nadia Eghbal (&lt;a href="https://twitter.com/nayafia"&gt;Twitter&lt;/a&gt;/&lt;a href="https://github.com/nayafia"&gt;GitHub&lt;/a&gt;) and Mikael Rogers (&lt;a href="https://twitter.com/mikeal"&gt;Twitter&lt;/a&gt;/&lt;a href="https://github.com/mikeal"&gt;GitHub&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The podcast covers topics such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;open source sustainability&lt;/li&gt;
&lt;li&gt;maintenance&lt;/li&gt;
&lt;li&gt;economics&lt;/li&gt;
&lt;li&gt;licensing&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I found out that one of the hosts: Nadia had published a book entitled &lt;a href="https://www.amazon.com/dp/0578675862/"&gt;"Working in Public"&lt;/a&gt; I had to get it. The book is not about sitting with your laptop in a &lt;em&gt;fancy&lt;/em&gt; coffeeshop in San Fransisco, but about open source, the complete title is: "Working in Public: The Making and Maintenance of Open Source Software".&lt;/p&gt;

&lt;p&gt;The podcast has been retired now, but the whole back catalogue is &lt;a href="https://changelog.com/rfc"&gt;available&lt;/a&gt; and is definitely worth a listen if you are interested in open source - now about the book.&lt;/p&gt;

&lt;p&gt;I personally find the whole open source &lt;em&gt;movement&lt;/em&gt; incredibly interesting and I have sort of grown up with open source, so books, articles and podcasts on the topics often catch my attention.&lt;/p&gt;

&lt;p&gt;I have previously read: "&lt;a href="https://www.amazon.com/Coding-Freedom-Ethics-Aesthetics-Hacking/dp/0691144613/ref=sr_1_2?crid=6DN0O6CI9DM7&amp;amp;dchild=1&amp;amp;keywords=gabriella+coleman&amp;amp;qid=1621402581&amp;amp;s=books&amp;amp;sprefix=gabriella+coleman%2Cstripbooks-intl-ship%2C244&amp;amp;sr=1-2"&gt;Coding Freedom: The Ethics and Aesthetics of Hacking&lt;/a&gt;" by &lt;a href="https://twitter.com/BiellaColeman"&gt;Gabriella Coleman&lt;/a&gt; another book on open source, which is worth mentioning.&lt;/p&gt;

&lt;p&gt;Having been an open source consumer, contributor and maintainer for a long time, the topics related to open source hold an interest to me, only surpassed by the actual technical making of software. None of the above titles are about the technical part directly, they are about community, open source and understanding what open source is.&lt;/p&gt;

&lt;p&gt;Nadia has worked for GitHub and her book is very much about &lt;em&gt;the GitHub generation&lt;/em&gt; as she calls it, which even though I got into open source long before GitHub and Git, the book really covers some aspects I have not come across before or seen covered in such a structured way. The books is not about &lt;em&gt;the GitHub generation&lt;/em&gt;, but it is founded in a period where GitHub and Git has been available and this defines a nice frame for the book and what Nadia wants to cover.&lt;/p&gt;

&lt;p&gt;The book covers some interesting aspects of open source. One of the aspects, which really was eye opening two me and made me reflect on my open source involvement was the categorization of open source projects.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;High User Growth&lt;/th&gt;
&lt;th&gt;Low User Growth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;High Contributor Growth&lt;/td&gt;
&lt;td&gt;Federations&lt;/td&gt;
&lt;td&gt;Clubs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Low Contributor Growth&lt;/td&gt;
&lt;td&gt;Stadiums&lt;/td&gt;
&lt;td&gt;Toys&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The above table is taken from &lt;a href="https://www.amazon.com/dp/0578675862/"&gt;"Working in Public"&lt;/a&gt;, page 59.&lt;/p&gt;

&lt;p&gt;I found out that even though I had been doing open source for a long time, &lt;strong&gt;ALL&lt;/strong&gt; my projects had:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Low User Growth&lt;/li&gt;
&lt;li&gt;Low Contributor Growth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So my projects are all actually &lt;em&gt;toys&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This was not really a surprise, I knew I was not making anything of significance, I actually make most of my open source stuff for myself, but it was interesting to reflect on this categorization.&lt;/p&gt;

&lt;p&gt;At some point a few years ago I decided to try to push myself to get involved in some more prolific projects. I wrote a blog post entitled &lt;a href="https://dev.to/jonasbn/blog-post-contributing-to-a-new-project--a-bit-like-starting-a-new-job-32o8"&gt;"Contributing to a new project – a bit like starting a new job"&lt;/a&gt;. Unfortunately the endeavour did not have the outcome I was hoping for and I slipped back into my comfort zone of &lt;em&gt;toys&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There is absolutely nothing wrong with &lt;em&gt;toys&lt;/em&gt;, to me open source is primarily two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A platform for consuming software, I can use and on some occasions contribute back&lt;/li&gt;
&lt;li&gt;A platform for me to experiment and learn, on occasion contribute back&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets start with the latter.&lt;/p&gt;

&lt;p&gt;Open source has learned me a great deal on the topics of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programming&lt;/li&gt;
&lt;li&gt;Test and quality&lt;/li&gt;
&lt;li&gt;Bug fixing and bug triage&lt;/li&gt;
&lt;li&gt;Documentation writing and communication&lt;/li&gt;
&lt;li&gt;Automation and CI/CD&lt;/li&gt;
&lt;li&gt;Software releases and road mapping and planning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you could say that I am often just &lt;em&gt;scratching my own itch&lt;/em&gt;. Oftentimes I do not even need the software I make, but I find the problem area interesting or contained and a good case for a learning experience. Almost all of my experiments are open sourced, since I do not mind sharing. I know this is not really contributing back, but I put it out there just because it might be of value or interest to somebody else - like I have found open source projects that have inspired me or taught me something useful.&lt;/p&gt;

&lt;p&gt;About the first part, I am a heavy consumer of open source and I use a lot of open source software, simply because it is easily available and it is sort of all over the community in which I navigate.&lt;/p&gt;

&lt;p&gt;Like the urge to contribute to something significant, as described above, I have taken over open source projects from other maintainers, either because I was using their software or I had the ambition to do so.&lt;/p&gt;

&lt;p&gt;Examples of this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/jonasbn/perl-workflow"&gt;Workflow&lt;/a&gt;, a simple, flexible system to implement workflows in Perl&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rojopolis/spellcheck-github-actions"&gt;Spellcheck GitHub Action&lt;/a&gt;, a GitHub action for checking the spelling of text in your documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use the latter professionally and for almost all of my open source projects.&lt;/p&gt;

&lt;p&gt;Workflow has been on quite an interesting journey. I have been close to abandoning it even though it has been one of the more successful projects I have worked on. Recently the project has picked up pace and currently I have been joined by two contributors and we are planning the future, improving the code, fixing bugs and shipping plenty of releases.&lt;/p&gt;

&lt;p&gt;I would even go so far as to say that Workflow has moved from a &lt;em&gt;toy&lt;/em&gt; to a &lt;em&gt;club&lt;/em&gt;, which is very satisfying and makes me want to continue to maintain and contribute. The project has actually gotten to 24 stars on GitHub - I find that amazing. All we do is work with the two other projects using Workflow and blog about it. Next step could be to see if we could obtain &lt;em&gt;stadium&lt;/em&gt; level - just kidding, but some more users and contributors could be beneficial to the project and lots of fun.&lt;/p&gt;

&lt;p&gt;Speaking of contributors, "Working in Public" touches on the topic of &lt;em&gt;casual contributors&lt;/em&gt;. This is a topic on which there are very differing view points. Nadia describes the difference between &lt;em&gt;active contributors&lt;/em&gt; and &lt;em&gt;casual contributors&lt;/em&gt;. The first group are the kind of contributors, which stick around the project for a long time and contribute regularly. Whereas &lt;em&gt;casual contributors&lt;/em&gt; do not, they submit a PR for a single improvement/fix or similar and are then on they way.&lt;/p&gt;

&lt;p&gt;I myself am very much a &lt;em&gt;casual contributor&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I have had PRs declined, sometimes because I did not know the project I was contributing as a whole or simply because I did not bring any value - I am sorry if this has taken up precious time for somebody, but I have always learned something, if not about technology, then about English spelling or something.&lt;/p&gt;

&lt;p&gt;I have also experienced, moving from &lt;em&gt;casual contributor&lt;/em&gt; to &lt;em&gt;active contributor&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A long time ago I was using Sublime Text and I was really getting into Markdown and I found &lt;a href="https://github.com/naokazuterada/MarkdownTOC"&gt;MarkdownTOC&lt;/a&gt;, a plugin to generate a table of contents for Markdown documents. I did some poking at the project, while working on picking up Python. I found the documentation a bit &lt;em&gt;unstructured&lt;/em&gt; and decided I approached the maintainer, who was most welcoming since he was not a native English speaker (neither am I) and started to contribute to the documentation big time. This evolved into a long term collaboration and I drop by the project from time to time or if the maintainer pings me and asks for assistance.&lt;/p&gt;

&lt;p&gt;I have been a &lt;em&gt;casual contributor&lt;/em&gt; to many projects and I recognize why some maintainers prefer &lt;em&gt;active contributors&lt;/em&gt; over &lt;em&gt;casual contributors&lt;/em&gt;, but some of us really want to help with a single thing and do not want to get involved full time in another project, but we want to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a feature&lt;/li&gt;
&lt;li&gt;Fix a bug&lt;/li&gt;
&lt;li&gt;Document the implementation&lt;/li&gt;
&lt;li&gt;Correct a spelling error or a broken link&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I for one welcome &lt;em&gt;casual contributors&lt;/em&gt; to my projects, I cannot allocate all of the time to my projects that I would like, so if somebody wants to do the &lt;em&gt;heavy lifting&lt;/em&gt; and all I need to do is review, squash and merge - please submit your PRs.&lt;/p&gt;

&lt;p&gt;I have only mentioned a few of the topics covered from "Working in Public" and I have by no means delved into the book. The book covers a lot of material, without being a &lt;em&gt;hard&lt;/em&gt; read. If you are vaguely interested in open source - you need to read this book. The book really helped me to understand aspects of open source I thought I understood, it have me perspective on things I did not fully comprehend and it framed me and my involvement in a way, where I now understand the open source "community" even better.&lt;/p&gt;

&lt;p&gt;Happy coding ... and reading - and remember to check out the podcast.&lt;/p&gt;

</description>
      <category>book</category>
      <category>opensource</category>
      <category>community</category>
    </item>
    <item>
      <title>What are the top 5 mobile apps that you use every day?</title>
      <author>Bobby Iliev</author>
      <pubDate>Wed, 19 May 2021 19:29:35 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/what-are-the-top-5-mobile-apps-that-you-use-every-day-mmj</link>
      <guid>https://dev.to/bobbyiliev/what-are-the-top-5-mobile-apps-that-you-use-every-day-mmj</guid>
      <description>&lt;p&gt;There is a huge number of useful apps you can download. They could make your day more organized, better planed, less stressful. Besides, they would save you time.  Here are my TOP 5 applications I use the most on my smartphone.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#headspace"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/us/app/headspace-meditation-sleep/id493145008"&gt;Headspace&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Headspace is a guide to mindfulness for everyday life.&lt;br&gt;
There are hundreds of guided meditations on everything from managing stress and anxiety to sleep, focus, and mind-body health. &lt;/p&gt;

&lt;p&gt;Headspace includes short 3-minute meditation sessions, which can fit into your busy daily schedule.&lt;/p&gt;

&lt;p&gt;The app includes a lot of guided meditations on subjects like focus, exercise, and sleep. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#notion"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/us/app/notion-notes-projects-docs/id1232780281"&gt;Notion&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Notion is a note taking app. It is an application that provides components such as databases, kanban boards, wikis, calendars, and reminders. You can connect these components to create your own systems for knowledge management, note-taking, and etc.&lt;/p&gt;

&lt;p&gt;The app can be considered as an all-in-one workspace for note-taking, knowledge and data management, project, and task management. &lt;/p&gt;

&lt;p&gt;The tool helps you to schedule tasks, manage files, save documents, and set a reminder for the weekly schedule, enabling you to organize your work. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#podcasts"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/us/app/apple-podcasts/id525463029"&gt;Podcasts&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Podcasts have been a big part of my daily routine. It is a great way to gather new ideas while stuck in traffic,  making dinner, washing the dishes, or walking in the park.&lt;/p&gt;

&lt;p&gt;I use the Apple podcasts app, but there are a lot of other apps out there.&lt;/p&gt;

&lt;p&gt;Some of my favourte non-tech podcasts series are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wondery.com/shows/american-innovations/"&gt;American Innovations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wondery.com/shows/imagined-life/"&gt;Imagined life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wondery.com/shows/the-next-big-idea"&gt;The next big idea&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#daily-yoga"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/us/app/daily-yoga-workout-fitness/id545849922"&gt;Daily Yoga&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Daily Yoga, an app that offers interactive Yoga workouts. It is focused on providing intuitive and comprehensive yoga training for everyone. &lt;/p&gt;

&lt;p&gt;There are more than 100 yoga and meditation classes to help people from all levels. Besides that, there are a series of beginner-friendly tutorials to help you find a different and better self in only two weeks.&lt;/p&gt;

&lt;p&gt;As I work on a desk, and I often have back pain, this app helps me to stretch the muscles and to relieve that pressure from the stressful day.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spending-tracker"&gt;
  &lt;/a&gt;
  &lt;a href="https://apps.apple.com/us/app/spending-tracker/id548615579"&gt;Spending tracker&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Spending Tracker is a personal finance app.&lt;/p&gt;

&lt;p&gt;I am trying to save money every month. Likewise, for me, it's essential to track my money and manage the expenses. With this app, I can stick and easily manage my budget. I also could see how much I spent last year and easily compare every week, month, or year.&lt;/p&gt;

&lt;p&gt;I am curious to hear what are the top apps that you use every day?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Automatically protect your supply chain from dependency confusion</title>
      <author>Andreas Sommarström</author>
      <pubDate>Wed, 19 May 2021 19:10:23 +0000</pubDate>
      <link>https://dev.to/sumstrm/automatically-protect-your-supply-chain-from-dependency-confusion-2n35</link>
      <guid>https://dev.to/sumstrm/automatically-protect-your-supply-chain-from-dependency-confusion-2n35</guid>
      <description>&lt;p&gt;&lt;strong&gt;Dependency confusion&lt;/strong&gt; occurs when a system or user is tricked into fetching a package version from a public registry, instead of the intended &lt;strong&gt;trusted&lt;/strong&gt; package with the same namespace from your private registry.&lt;/p&gt;

&lt;p&gt;Like other supply chain attacks it’s all about injecting non-intended packages into a vulnerable supply chain, where malicious code can be executed on installation. A critical security threat for your supply chain if left uncontrolled. And a problem that potentially gets even worse in automated environments like CI/CD pipelines, if left unnoticed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/sumstrm/control-your-npm-packages-avoid-dependency-confusion-1cjh"&gt;My previous post&lt;/a&gt; on the topic was focused on how to use security focused package management to improve control of the software supply chain.  &lt;/p&gt;

&lt;p&gt;This post focuses instead on a solution that automatically protects your supply chain against dependency confusion. A scalable solution that is safe by default and prevents internal packages from being replaced by packages from external sources, without requiring  complex configurations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-automatically-protect-against-dependency-confusion"&gt;
  &lt;/a&gt;
  How to automatically protect against dependency confusion
&lt;/h2&gt;

&lt;p&gt;Enforcing this protection from dependency confusion is based on using &lt;a href="https://bytesafe.dev/"&gt;Bytesafe&lt;/a&gt; registries for the private and public npm packages you depend on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OoyXfYrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iaquz717z5mj9ikexj87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OoyXfYrd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iaquz717z5mj9ikexj87.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Bytesafe offers fully managed and private npm registries that allow users to better control their supply chain and secure the private and public packages they depend on.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With Bytesafe any package version marked as internal, either automatically or manually, will be protected from dependency confusion. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The solution in short:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Package versions published, pushed or uploaded to an internal registry will automatically be flagged as internal&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fetching new versions of internal packages from upstream sources, will only consider upstreams with internal versions of the same package&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s as simple as that. Package versions added directly by users are automatically marked as &lt;strong&gt;internal&lt;/strong&gt;, making sure internal packages are not exposed by mistake. And the best part, all the complex logic behind resolving dependencies safely is handled by Bytesafe, instead of being pushed on to our users.&lt;/p&gt;

&lt;p&gt;Packages &lt;em&gt;without the internal flag&lt;/em&gt; will function as they always have, with full access to public upstreams.&lt;/p&gt;

&lt;p&gt;Users can continue to use registries for both public and private packages, enjoying the benefits of a single source of truth for all package dependencies. While simultaneously being fully protected from dependency confusion.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-publish-internal-packages-to-a-private-registry"&gt;
  &lt;/a&gt;
  Example: Publish internal packages to a private registry
&lt;/h4&gt;

&lt;p&gt;Publishing internal packages to a private registry allows them to be shared and available for other team members and systems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nt"&gt;--registry&lt;/span&gt; &lt;span class="s1"&gt;'https://workspace.bytesafe.dev/r/your-internal-registry/'&lt;/span&gt; publish

...

+ your-internal-package@4.5.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the target registry flagged as &lt;em&gt;internal&lt;/em&gt; the version will automatically be flagged &lt;em&gt;internal&lt;/em&gt; as well. Preventing it from being substituted by package versions from untrusted external sources.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GbFu8gnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhh0uevgznxqg3dnwblu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbFu8gnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhh0uevgznxqg3dnwblu.png" alt="example-internal-package-in-bytesafe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#protection-during-dependency-resolution-npm-install"&gt;
  &lt;/a&gt;
  Protection during dependency resolution (npm install)
&lt;/h2&gt;

&lt;p&gt;The core protection of internal packages is evident when resolving dependencies from upstream. This is typically the case when using &lt;code&gt;npm install&lt;/code&gt; to install dependencies for a project and &lt;code&gt;npm&lt;/code&gt; attempts to fetch all available versions.&lt;/p&gt;

&lt;p&gt;Any attempt to fetch new versions of internal packages will only use upstreams that contain other internal versions of the packages. All other sources will be ignored for the purpose of this action.&lt;/p&gt;

&lt;p&gt;Users can securely install any internal version from their registries, without ever having to worry about the possibility of the package being replaced with a malicious package from any external registry. A protection that scales to all users and systems.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-using-a-bytesafe-private-registry-together-with-registrynpmjsorg-as-an-upstream-for-public-packages"&gt;
  &lt;/a&gt;
  Example: Using a Bytesafe private registry together with registry.npmjs.org as an upstream for public packages
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qUgnCepM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzhdfmsoj26g9wwpvftk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qUgnCepM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzhdfmsoj26g9wwpvftk.png" alt="internal-registry-example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Package published to the private registry will be flagged internal&lt;/li&gt;
&lt;li&gt;Install of internal package by other users / systems will never fetch versions from registry.npmjs.org as it does not contain internal versions&lt;/li&gt;
&lt;li&gt;Installing any public package will work as normal, with registry.npmjs.org as a valid upstream&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-how-to-protect-your-supply-chain"&gt;
  &lt;/a&gt;
  Getting started - How to protect your supply chain
&lt;/h2&gt;

&lt;p&gt;Any new Bytesafe workspaces and registries come with protection from dependency confusion by default - No additional actions required.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create your own &lt;a href="https://login.bytesafe.dev/signup"&gt;Bytesafe Workspace&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Publish your internal packages to the private registry. They will automatically be marked internal.&lt;/li&gt;
&lt;li&gt;Install/add your other public dependencies. All dependencies are continuously monitored for security issues.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With both public and private dependencies now in one single source of truth, you can distribute this secure source to all team members and systems. A solution that scales across your whole organization.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>npm</category>
      <category>security</category>
      <category>javascript</category>
      <category>node</category>
    </item>
  </channel>
</rss>
