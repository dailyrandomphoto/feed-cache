<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Avoid Duplication! GitHub Actions Reusable Workflows</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Mon, 25 Oct 2021 23:42:59 +0000</pubDate>
      <link>https://dev.to/n3wt0n/avoid-duplication-github-actions-reusable-workflows-3ae8</link>
      <guid>https://dev.to/n3wt0n/avoid-duplication-github-actions-reusable-workflows-3ae8</guid>
      <description>&lt;p&gt;Thanks to the new GitHub Actions feature called "&lt;strong&gt;&lt;em&gt;Reusable Workflows&lt;/em&gt;&lt;/strong&gt;" you can now reference an existing workflow with a single line of configuration rather than copying and pasting from one workflow to another.&lt;/p&gt;

&lt;p&gt;Basically &lt;strong&gt;GitHub Actions Templates on steroids&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-reusable-workflows"&gt;
  &lt;/a&gt;
  What Are Reusable Workflows
&lt;/h3&gt;

&lt;p&gt;So, Reusable Workflows in GitHub Actions. Thanks to this feature you can now reference an entire Actions workflow in another workflow, like if it were a single action.&lt;/p&gt;

&lt;p&gt;This new feature builds on top of the Composite Actions introduced a while back. If you don't know what Composite Actions are, check &lt;a href="https://dev.to/n3wt0n/github-composite-actions-nest-actions-within-actions-3e5l"&gt;this post&lt;/a&gt; or &lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;this video&lt;/a&gt;, but in short they are &lt;strong&gt;one or more steps packaged together&lt;/strong&gt; which can be then referenced in an Actions workflows by a single line.&lt;/p&gt;

&lt;p&gt;Reusable Workflows extend this concept, allowing you to &lt;strong&gt;reference an entire workflow in another one&lt;/strong&gt;. If Composite Actions can be thought of as Templates, Reusable Workflows is on another new level.&lt;/p&gt;

&lt;p&gt;Right, let's see how to create a reusable workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lRypYtmbKMs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/lRypYtmbKMs"&gt;Link to the video: https://youtu.be/lRypYtmbKMs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-reusable-workflow"&gt;
  &lt;/a&gt;
  Create a Reusable Workflow
&lt;/h3&gt;

&lt;p&gt;Reusable workflows are &lt;em&gt;normal&lt;/em&gt; Actions YAML files, and as such they have to reside in the &lt;code&gt;.github/workflows&lt;/code&gt; folder in the root of a repo.&lt;/p&gt;

&lt;p&gt;The only particular thing they have to have is a &lt;em&gt;special trigger&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The workflow file can also have different triggers, but to make it reusable one of those must be the &lt;code&gt;workflow_call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also &lt;strong&gt;pass data&lt;/strong&gt; to a reusable workflow, via the trigger &lt;strong&gt;parameters&lt;/strong&gt; which can be of 2 types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;inputs&lt;/li&gt;
&lt;li&gt;secrets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;inputs&lt;/strong&gt; are used to pass &lt;em&gt;normal&lt;/em&gt; data (aka not sensitive information):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, where I want to use a reusable workflow as template to build and push a Docker Image to a registry, we can see that we have 2 inputs of type &lt;code&gt;string&lt;/code&gt;, with one required and one not required.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: if a required input has not been passed to the reusable workflow, it will fail &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other available types are &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;secrets&lt;/strong&gt;, instead, as the name says, are used to pass secret values to the workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case you can see that there is no &lt;code&gt;type&lt;/code&gt;, every secret is treated as string.&lt;/p&gt;

&lt;p&gt;Finally, you can use those parameters in your workflow by using &lt;code&gt;{{inputs.NAME_OF_THE_INPUT}}&lt;/code&gt; and &lt;code&gt;{{secrets.NAME_OF_THE_SECRET}}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, in the abovementioned example where I want to use a reusable workflow to build and push a Docker image to a registry, the reusable workflow will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create and Publish Docker Image&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;      
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup BuildX&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-buildx-action@v1&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to the Registry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.registry_username}}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.registry_password}}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set the tag&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;if [ -z "${{inputs.tag}}" ]&lt;/span&gt;
          &lt;span class="s"&gt;then&lt;/span&gt;
            &lt;span class="s"&gt;echo "final_tag=latest" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;else&lt;/span&gt;
            &lt;span class="s"&gt;echo "final_tag=${{inputs.tag}}" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;fi&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Push the Image&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/build-push-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
          &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.registry_username}}/${{inputs.image_name}}:${{env.final_tag}}&lt;/span&gt;


  &lt;span class="na"&gt;do-something-else&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "Hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note that &lt;strong&gt;reusable workflows can have multiple jobs&lt;/strong&gt;, as you can see in the example (where the &lt;code&gt;do-something-else&lt;/code&gt; does nothing, but it is to show it off)&lt;/p&gt;

&lt;p&gt;Easy right? One thing to keep in mind is that if the reusable workflow has other triggers apart from the &lt;code&gt;workflow_call&lt;/code&gt; you may want to make sure it doesn't accidentally run multiple times.&lt;/p&gt;

&lt;p&gt;Now that we have our reusable workflow, let's see how to use it in another workflow. And stay with me until the end because I will talk about the &lt;strong&gt;limitations&lt;/strong&gt; of reusable workflows and when they can be useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-a-reusable-workflow"&gt;
  &lt;/a&gt;
  Using a Reusable Workflow
&lt;/h3&gt;

&lt;p&gt;Now that we have our reusable workflow ready, it is time to use it in another workflow.&lt;/p&gt;

&lt;p&gt;To do so, just &lt;strong&gt;add it directly in a job&lt;/strong&gt; of your workflow with this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="na"&gt;job_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;USER_OR_ORG_NAME/REPO_NAME/.github/workflows/REUSABLE_WORKFLOW_FILE.yml@TAG_OR_BRANCH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's analyse this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You create a job with no steps&lt;/li&gt;
&lt;li&gt;You don't add a &lt;code&gt;runs-on&lt;/code&gt; clause, because it is contained in the reusable workflow&lt;/li&gt;
&lt;li&gt;You reference it as &lt;code&gt;uses&lt;/code&gt; passing:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;the name of the user or organization that owns the repo where the reusable workflow is stored&lt;/li&gt;
&lt;li&gt;the repo name&lt;/li&gt;
&lt;li&gt;the base folder&lt;/li&gt;
&lt;li&gt;the name of the reusable workflow yaml file&lt;/li&gt;
&lt;li&gt;and the tag or the branch where the file is store (if you haven't created a tag/version for it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my real example above, this is how I'd reference it in a job called &lt;em&gt;docker&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;n3wt0n/ReusableWorkflow/.github/workflows/buildAndPublishDockerImage.yml@main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now of course we have to pass the parameters. Let's start with the &lt;strong&gt;inputs&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-awesome-app&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$GITHUB_RUN_NUMBER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we just use the &lt;code&gt;with&lt;/code&gt; clause, and we specify the name of the inputs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Needless to say, the names have to be the same as the ones in the reusable workflow definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the secrets, instead, we use a new &lt;code&gt;secrets&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_USERNAME}}&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_PASSWORD}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is it. So the complete example would look like this (you can find it &lt;a href="https://github.com/n3wt0n/ActionsTest/blob/main/.github/workflows/reusableWorkflowsUser.yml"&gt;here&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is a basic workflow to showcase the use of Reusable Workflows&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Reusable Workflow user&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;do-it&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run a one-line script&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello, world!&lt;/span&gt;

  &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;n3wt0n/ReusableWorkflow/.github/workflows/buildAndPublishDockerImage.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-awesome-app&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$GITHUB_RUN_NUMBER&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_USERNAME}}&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_PASSWORD}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once again, as you can see the caller workflow can have multiple jobs as well.&lt;/p&gt;

&lt;p&gt;If we run the workflow, this is what we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5tThZBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gklfn5vy2mklzhhcjbs1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5tThZBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gklfn5vy2mklzhhcjbs1.png" alt="Workflow run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see in the image that we have the logs for the &lt;code&gt;do-it&lt;/code&gt; job that is present in the caller, and then for both the jobs in the reusable workflow.&lt;br&gt;
Since those 2 jobs &lt;em&gt;are run&lt;/em&gt; within the &lt;code&gt;docker&lt;/code&gt; job in the caller workflow, they are referenced in the log as &lt;code&gt;docker / build&lt;/code&gt; and &lt;code&gt;docker /do-something-else&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But apart from that, the logs are complete:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwLbl8SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onltrx96m0d3fxlpffe4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwLbl8SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onltrx96m0d3fxlpffe4.png" alt="Logs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We get &lt;strong&gt;the full details&lt;/strong&gt; of everything that has happened.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#limitations-and-caveats"&gt;
  &lt;/a&gt;
  Limitations and Caveats
&lt;/h3&gt;

&lt;p&gt;So, let's start with a few &lt;strong&gt;notes&lt;/strong&gt;. First, remember that the Reusable Workflows are currently in &lt;strong&gt;beta&lt;/strong&gt;, so things might change by the time they go GA.&lt;/p&gt;

&lt;p&gt;Second, for a workflow to be able to use it, a reusable workflow must be stored in the same repo as the call, or in a public repo, or yet in an internal repo with settings that allow it to be accessed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4B4_QtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw795lt2gzplxe64bfrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4B4_QtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw795lt2gzplxe64bfrp.png" alt="Repo access settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's talk now about &lt;strong&gt;limitations&lt;/strong&gt;. As direct result of what we have just said, reusable workflows stored in a private repository can be used only by other workflows in the same repo.&lt;/p&gt;

&lt;p&gt;Also, Reusable workflows &lt;strong&gt;cannot call and consume other Reusable workflows&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, and this is big one you need to remember, environment variables set at workflow level in the caller workflow are &lt;strong&gt;not passed to the reusable workflow&lt;/strong&gt;. So if you need use any of those variables in the reusable workflow, you'll have to pass them to the workflow via the parameters as I've shown above.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Reusing workflows avoids duplication&lt;/strong&gt;. This makes workflows easier to maintain and allows you to create new workflows more quickly by building on the work of others, just as you do with actions. &lt;/p&gt;

&lt;p&gt;Workflow reuse also promotes &lt;strong&gt;best practices&lt;/strong&gt; by helping you to use workflows that are well designed, have already been tested, and have been proved to be effective. Your organization can build up a library of reusable workflows that can be &lt;strong&gt;centrally maintained&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below what you think about these new reusable workflows, if and how you plan to use them, and if there is any feature that you think is missing.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;this video&lt;/a&gt; where I talk about the Composite Actions as templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üìß &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lRypYtmbKMs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>actions</category>
      <category>devops</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Secret dev tools for every code newbie</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Mon, 25 Oct 2021 23:36:52 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/secret-dev-tools-for-every-code-newbie-5a8a</link>
      <guid>https://dev.to/jasonleowsg/secret-dev-tools-for-every-code-newbie-5a8a</guid>
      <description>&lt;p&gt;I‚Äôd been learning a lot of new programming tricks lately and picking up new tools too. Some of these tools got me really excited that I have to share them! These tools are not commonly recommended in online tutorials or articles and might not be well-known to code newbies:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-hosting-glitch"&gt;
  &lt;/a&gt;
  Coding, hosting - &lt;a href="https://glitch.com/"&gt;Glitch&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This really blew my mind. It sounded like just another Github alternative on paper, but when I arrived on the site, all the vibrant colors, cool whimsical illustrations‚Ä¶‚Ä¶! It‚Äôs like Github but with unicorns and rainbows; like Willy Wonka‚Äôs chocolate factory but for coders! It‚Äôs got so much personality and confidence in their branding, that I‚Äôm super impressed. Such a fun and delightful experience just browsing through all the code repos. And it‚Äôs not just a prettier Github, but a better one too. Glitch allows you to code collaboratively in realtime, much like Google Docs. This makes Github feel like Windows 95 Microsoft Word (oh wait, Github was acquired by Microsoft lol). You also see your site or app deployed live in a preview window with a unique subdomain (or custom domain), much like Codepen and JSFiddle. There‚Äôs definitely something of a trend here, where community-generated content is built around a collaborative tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-line-hyper"&gt;
  &lt;/a&gt;
  Command Line - &lt;a href="https://hyper.is/"&gt;Hyper&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Using the terminal used to scare me a lot, but since having to learn Rails and Vue, I had to start using terminal quite a lot and am slowly coming round to it. But not the user experience of it though. The developer experience of using this dark mode interface with neon green characters isn‚Äôt the best, so I decided to try out Hyper. It‚Äôs an alternative to using your native terminal, and comes with themes to add color to the text, and plugins like search that allows you to search for a particular command you used in the past. Much better UX now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-apis-insomnia"&gt;
  &lt;/a&gt;
  Testing APIs - &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Postman is a popular tool for testing APIs, but it feels bloated. I chanced on Insomnia from a tutorial and loved the simple and well-designed interface for it. Sometimes simple with less features is better for beginners, because it‚Äôs not so overwhelming. Coding a Ruby on Rails API is completely new ground for me. It was scary initially, but after following a few tutorials, I feel more confident, and being able to now set up the GET/POST/PUT/DELETE requests and test the API easily had really boosted my morale. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-tableplus"&gt;
  &lt;/a&gt;
  Database - &lt;a href="https://tableplus.com/"&gt;TablePlus&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This was a real life-saver. I hated trying to access my database over the terminal. A database is best visualised as a table, but command line returns it in text! It just doesn‚Äôt go. TablePlus shows the data you have in a table format, allows you to query and search easily, and more.I‚Äôve not even touched the depth of the features available. I‚Äôm just so relieved to be able to see my data now in a table format, in a way I can understand, and manipulate my data much more easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-figma-community"&gt;
  &lt;/a&gt;
  Design - &lt;a href="https://www.figma.com/community/"&gt;Figma Community&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This new Community tab in Figma is still in beta, but I can see that it‚Äôs going to be a huge hit amongst designers. Figma is a collaborative UI/UX design tool, kind of like Photoshop remixed with Google Docs, but ten times better. I always felt it had an edge over Sketch (which is another design tool popular with UX designers), but now with the Community feature it‚Äôll really stand out, because the Community feature is like Dribble remixed with Github rolled into one - a bank of Figma templates made by notable tech companies (like Spotify) and great designers. Browsing through all the different templates made available for free, I almost feel like I don‚Äôt ever need to design anything original ever again, because all I need to do is to search, and then duplicate and customize to my own project. And it‚Äôs not just templates for designing UI for phones or desktop screens, but also lots of cool collaborative tools and templates to hold a remote brainstorming session together, resume templates, everything! It‚Äôs like a designer‚Äôs dream come through!&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>coding</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Aprendendo sobre testes em Java com as princesas da Disney</title>
      <author>Aleat√≥rio</author>
      <pubDate>Mon, 25 Oct 2021 23:34:16 +0000</pubDate>
      <link>https://dev.to/lucasscharf/aprendendo-sobre-testes-em-java-com-as-princesas-da-disney-1jk5</link>
      <guid>https://dev.to/lucasscharf/aprendendo-sobre-testes-em-java-com-as-princesas-da-disney-1jk5</guid>
      <description>&lt;p&gt;&lt;em&gt;"Era uma vez, um jovem Aleat√≥rio que achou que existia muitos conte√∫dos legais sobre testes, mas resolveu adicionar seus dois centavos. O resto da hist√≥ria, voc√™s ver√£o a seguir..."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O post de hoje ser√° um dos mais legais e mais densos que eu j√° tive o prazer de fazer. Falaremos sobre um dos assuntos que eu mais gosto que s√£o aÃ∂sÃ∂ Ã∂pÃ∂rÃ∂iÃ∂nÃ∂cÃ∂eÃ∂sÃ∂aÃ∂sÃ∂ Ã∂dÃ∂aÃ∂ Ã∂DÃ∂iÃ∂sÃ∂nÃ∂eÃ∂yÃ∂ os testes. Juro que vou tentar ser o mais sucinto poss√≠vel, mas conte√∫do √© t√£o legal que √© capaz que eu me empolgue. Para conseguir me ajudar nessa tarefa, eu trouxe a minha princesa da Disney favorita:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpG310M---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xij38hkrxsv9wtrcbrb9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpG310M---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xij38hkrxsv9wtrcbrb9.jpg" alt="Image Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#o-que-%C3%A9-um-teste"&gt;
  &lt;/a&gt;
  O que √© um teste?
&lt;/h1&gt;

&lt;p&gt;No contexto de desenvolvimento, um teste de software consiste em um conjunto de a√ß√µes que garantem que o software far√° o que est√° se propondo a fazer. As a√ß√µes realizadas variam de acordo com o projeto, a import√¢ncia, o tempo dispon√≠vel, complexidade, etc...&lt;/p&gt;

&lt;p&gt;Nesse ponto, trago um revela√ß√£o: colocar o c√≥digo em produ√ß√£o para ser utilizado pelos clientes j√° √© um teste. N√£o √© o melhor teste, tem v√°rios riscos, mas acaba acontecendo ;/ &lt;br&gt;
Num mundo ideal, nosso sistema tem boa cobertura e conseguimos garantir que a nossa aplica√ß√£o funcione e encontramos os casos de erro antes dos clientes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---gwZgQpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnosasagpajd3carzgpp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---gwZgQpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnosasagpajd3carzgpp.jpg" alt="Image jasmine meme"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#o-que-testar"&gt;
  &lt;/a&gt;
  O que testar?
&lt;/h1&gt;

&lt;p&gt;Esse ponto √© pol√™mico e existem pessoas que defendem as mais diferentes opini√µes. Alguns v√£o dizer que √© para testar todos os casos poss√≠veis, outros dir√£o que s√≥ precisa pegar os casos representativos, outros dir√£o que √© necess√°rio testar as interfaces, outros dir√£o que √© preciso testar as aplica√ß√µes usando sistemas reais outros dir√£o que os sistemas n√£o precisam ser reais e por a√≠ vai...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oW3A1tj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e4mf8ejyl8o4zgd2ez4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oW3A1tj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e4mf8ejyl8o4zgd2ez4.jpg" alt="Image Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como tudo na vida do dev, a resposta √©: &lt;strong&gt;depende&lt;/strong&gt;. Depende do tempo, recursos, tamanho do time, conhecimento e import√¢ncia do seu projeto. No &lt;strong&gt;meu caso&lt;/strong&gt;, eu prefiro testar o fluxo b√°sico (tamb√©m chamado de caminho feliz) com testes automatizados e alguns fluxos que eu acho que podem ocorrer erros. &lt;/p&gt;

&lt;p&gt;Conforme a aplica√ß√£o √© utilizada e os bugs v√£o sendo encontrados, ent√£o adiciono mais e mais testes automatizados que simulem esses erros e essa parte esteja coberta. Afinal, &lt;a href="https://dev.to/lucasscharf/usando-o-fault-tolerance-no-quarkus-porque-errar-e-umano-mas-tem-limites-4n2l"&gt;errar √© umano, mas tem limites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sempre achei que essa abordagem √© bom ponto de come√ßo para os testes, trazendo o equil√≠brio bom entre o que deve ser testado e os recursos dispon√≠veis.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#o-que-n%C3%A3o-testar"&gt;
  &lt;/a&gt;
  O que n√£o testar
&lt;/h1&gt;

&lt;p&gt;Existe uma linha muito t√™nue entre voc√™ testar a sua aplica√ß√£o e testar os frameworks que voc√™ est√° utilizando. O ideal √© testar apenas o nosso c√≥digo. E cÃ∂oÃ∂nÃ∂fÃ∂iÃ∂aÃ∂rÃ∂ assumir que os frameworks est√£o bem testados e cobertos. &lt;/p&gt;

&lt;p&gt;Para exemplificar isso, vamos imaginar um m√©todo que recebe uma princesa, verifica se o nome est√° nulo e salva no banco.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;salvarPrincesa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Princesa&lt;/span&gt; &lt;span class="n"&gt;princesa&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;princesa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNome&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Princesa com nome nulo"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;princesaDao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salvar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;princesa&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Olhando esse m√©todo, voc√™ diria que um teste deve verificar se a princesa foi salva no banco?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2BwQefqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqbp4bfwni5hdncjgpdb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2BwQefqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqbp4bfwni5hdncjgpdb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A resposta √© &lt;strong&gt;N√ÉO&lt;/strong&gt;. Esse m√©todo n√£o tem nenhuma rela√ß√£o com banco de dados. Ele lida com uma abstra√ß√£o (o &lt;a href="https://pt.wikipedia.org/wiki/Objeto_de_acesso_a_dados#:~:text=Objeto%20de%20acesso%20a%20dados%20(acr%C3%B4nimo%20do%20ingl%C3%AAs%20Data%20Access,por%20exemplo%20Java)%20e%20arquitetura"&gt;DAO&lt;/a&gt;). Logo, um teste deve verificar se o DAO foi chamado. Se o DAO vai realmente salvar no banco, vai colocar em mem√≥ria ou vai dar uma ma√ß√£ envenenada para que a princesa durma para todo o sempre, n√£o √© problema da nossa regra e neg√≥cio. Nossa regra testa apenas nome nulo e passa adiante.&lt;/p&gt;

&lt;p&gt;Caso seja necess√°rio fazer um teste que verifica se o m√©todo salvar realmente salva no banco ou n√£o, ent√£o esse teste deve ser feito em cima da classe PrincesaDao.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tipos-de-testes"&gt;
  &lt;/a&gt;
  Tipos de testes
&lt;/h1&gt;

&lt;p&gt;Da mesma forma que existem v√°rios tipos de princesas, existem v√°rios tipos de testes. E podemos classificar eles de diferentes formas. A lista abaixo traz algumas classifica√ß√µes poss√≠veis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatizados"&gt;
  &lt;/a&gt;
  Automatizados
&lt;/h2&gt;

&lt;p&gt;Nesses testes, todo o processo de an√°lise, execu√ß√£o dos testes e gera√ß√£o de relat√≥rios √© feito por um ou mais scripts diferentes. Isso permite que o mesmo teste possa ser repetido v√°rias e v√°rias vezes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manuais"&gt;
  &lt;/a&gt;
  Manuais
&lt;/h2&gt;

&lt;p&gt;Por outro lado, os testes manuais s√£o testes realizados com a intera√ß√£o humana. Nem tudo pode ser validado atrav√©s de scripts ou o custo de automatizar pode n√£o valer a pena. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qr1GeILC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2t464g079c38o2tifde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qr1GeILC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2t464g079c38o2tifde.png" alt="Image tiana com dinheiro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-funcionais"&gt;
  &lt;/a&gt;
  Testes funcionais
&lt;/h2&gt;

&lt;p&gt;Esses testes buscam garantir que o sistema faz o que ele se prop√µe a fazer. Existem v√°rias formas de fazermos esses testes e por isso os testes funcionais s√£o divididos de acordo com a granularidade. A divis√£o que eu apresento √© um pouco diferente do que √© visto na litaratura. Normalmente, os testes &lt;em&gt;mockeados&lt;/em&gt; ficam em algum limbo entre os testes unit√°rios e os de integra√ß√£o.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-unit%C3%A1rio"&gt;
  &lt;/a&gt;
  Teste unit√°rio
&lt;/h3&gt;

&lt;p&gt;Esses testes s√£o muito legais de fazer porque eles s√£o r√°pidos, leves e permitem que voc√™ consiga cobrir um monte de situa√ß√£o diferente. &lt;br&gt;
Por√©m, eles duas pegadinhas. A) Muito c√≥digo que voc√™ faz n√£o pode ser testado de forma unit√°ria. Pois ele acaba tendo depend√™ncias com objetos externos. B) Existem coisas que voc√™ n√£o consegue testar com teste unit√°rio.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-mockeado"&gt;
  &lt;/a&gt;
  Teste &lt;em&gt;mockeado&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Uma sa√≠da para lidar com os objetos externos √© criar um &lt;em&gt;mock&lt;/em&gt;. Um objeto de &lt;strong&gt;mentirinha&lt;/strong&gt; que vai reagir da forma que n√≥s queremos e dando os retornos que n√≥s esperamos. As duas principais bibliotecas de mock que n√≥s temos √© a &lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt; e a &lt;a href="https://github.com/powermock/powermock"&gt;Powermock&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-de-integra%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Teste de integra√ß√£o
&lt;/h3&gt;

&lt;p&gt;Ao inv√©s de usar um &lt;em&gt;mock&lt;/em&gt; para simular os objetos e ambientes externos, por que n√£o usar algo de verdade? &lt;br&gt;
Seguindo a linha dos &lt;a href="https://12factor.net/pt_br/"&gt;12 fatores para desenvolvimento de software&lt;/a&gt;, os ambientes de devsenvolvimento e produ√ß√£o devem ser semelhantes. Logo, se a aplica√ß√£o funcionar√° usando um banco de dados de verdade, vamos testar usando um banco de dados de verdade.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-ponta%C3%A0ponta"&gt;
  &lt;/a&gt;
  Teste ponta-√†-ponta
&lt;/h3&gt;

&lt;p&gt;Esse √© o suprassumo dos testes. Muitas pessoas s√£o contra faz√™-los porque eles s√£o caros ou dif√≠ceis de serem realizados. Mas esses testes s√£o os mais pr√≥ximos da realidade. &lt;br&gt;
Nesse tipo de teste levantamentos todos os sistemas e depend√™ncias de verdade. Buscando chegar o mais pr√≥ximo do que √© feito no mundo real. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-caixa-preta"&gt;
  &lt;/a&gt;
  Teste caixa preta
&lt;/h2&gt;

&lt;p&gt;Essa nomenclatura serve mais para dizer que o teste √© criado/planejado/executado sem saber as estruturas internas da aplica√ß√£o.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-caixa-branca"&gt;
  &lt;/a&gt;
  Teste caixa branca
&lt;/h2&gt;

&lt;p&gt;Ao contr√°rio dos testes caixa-preta, nos testes caixa-branca, os testes s√£o criados j√° tendo em mente as estruturas internas da aplica√ß√£o.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-performance"&gt;
  &lt;/a&gt;
  Teste de performance
&lt;/h2&gt;

&lt;p&gt;Esses testes buscam descobrir como √© o desempenho do sistema em diferentes cen√°rios. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-de-carga"&gt;
  &lt;/a&gt;
  Teste de carga
&lt;/h3&gt;

&lt;p&gt;Visa medir os tempos de resposta e vaz√µes do sistema em diferentes cargas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-de-stress"&gt;
  &lt;/a&gt;
  Teste de &lt;em&gt;stress&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Semelhante a teste anterior em termos de execu√ß√£o, mas totalmente em sua filosofia. Esse teste busca tanto descobrir quais s√£o os limites da aplica√ß√£o bem como o comportamento do sistema atuando no limite. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-regress%C3%A3o"&gt;
  &lt;/a&gt;
  Teste de regress√£o
&lt;/h2&gt;

&lt;p&gt;Consiste em executar todos testes funcionais criados (ou demais testes quando relevante) para garantir que novas mudan√ßas e altera√ß√µes n√£o introduzam novos erros.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-seguran%C3%A7a"&gt;
  &lt;/a&gt;
  Teste de seguran√ßa
&lt;/h2&gt;

&lt;p&gt;Tamb√©m conhecido com &lt;a href="https://pt.wikipedia.org/wiki/Teste_de_intrus%C3%A3o"&gt;teste de penetra√ß√£o&lt;/a&gt;. Geralmente √© feito por alguma empresa externa e visa encontrar falhas de seguran√ßa tanto no c√≥digo quanto nos processos executados pela aplica√ß√£o/empresa. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-usabilidade"&gt;
  &lt;/a&gt;
  Teste de usabilidade
&lt;/h2&gt;

&lt;p&gt;Mais focado para aplica√ß√µes que tem telas, esse tipo de teste consiste em navegar pelas telas feitas (ou por ideias de telas) para verificar se elas atender√£o o usu√°rio. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-aceita%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Teste de aceita√ß√£o
&lt;/h2&gt;

&lt;p&gt;O sonho de consumo de todo o software. Os testes de aceita√ß√£o v√£o dizer se o software est√° pronto ou n√£o para receber o aceite do cliente. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#por-que-testar"&gt;
  &lt;/a&gt;
  Por que testar?
&lt;/h1&gt;

&lt;p&gt;Qualidade. Fazer testes √© o que permite dizer que nossa aplica√ß√£o funciona ou n√£o. Como voc√™s viram no outro t√≥pico, existem v√°rias formas de fazer isso.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dicas-gerais-de-como-testar"&gt;
  &lt;/a&gt;
  Dicas gerais de como testar
&lt;/h1&gt;

&lt;p&gt;Caso voc√™ seja a Aurora ou Cinderella, voc√™ tem uma fada madrinha que te dar√° uma m√£o para resolver os problemas. Caso voc√™ n√£o seja, voc√™ precisa se ajudar. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DTF7XU5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvg1cf4x7m9i280of4dr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DTF7XU5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvg1cf4x7m9i280of4dr.jpg" alt="Image aleat√≥rio de fado madrinho"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Separei algumas dicas para trabalhar tanto em ferramentas que podem te ajudar a fazerem bonito nesse baile dos testes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fa%C3%A7a-que-os-testes-rodem-de-forma-r%C3%A1pida"&gt;
  &lt;/a&gt;
  Fa√ßa que os testes rodem de forma r√°pida
&lt;/h2&gt;

&lt;p&gt;Desenvolver √© algo estressante ent√£o as coisas precisam ser r√°pidas. Se cada vez que voc√™ precisar rodar os testes, voc√™ levar 10 minutos esperando, a tend√™ncia √© que voc√™ pare de testar. &lt;br&gt;
Parando de testar, as coisas come√ßam a dar ruim. Dando ruim, os prazos v√£o se apertar. Apertando os prazos, voc√™ vai tirar  o que for menos necess√°rias para o sistema ir pra produ√ß√£o. Tirando o menos necess√°rio, voc√™ tirar√° os testes e as coisas v√£o ficando &lt;strong&gt;pior&lt;/strong&gt;.  Ent√£o √© MUITO importante que voc√™ consiga fazer com que os testes rodem r√°pido. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escreva-um-c%C3%B3digo-que-facilite-os-testes"&gt;
  &lt;/a&gt;
  Escreva um c√≥digo que facilite os testes
&lt;/h2&gt;

&lt;p&gt;Se o seu c√≥digo n√£o for pensado para testes, quando voc√™ for escrev√™-los voc√™ provavelmente ter√° dificuldades. Tendo dificuldade para testar, voc√™ vai parar de testar. Parando de testar, as coisas come√ßam a dar ruim...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evite-o-uso-de-static"&gt;
  &lt;/a&gt;
  Evite o uso de &lt;em&gt;static&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;M√©todos est√°ticos como &lt;code&gt;LocalDate.now()&lt;/code&gt; ou &lt;code&gt;Objects.isNull()&lt;/code&gt; n√£o podem ser &lt;em&gt;mockeados&lt;/em&gt; facilmente. Ent√£o, se voc√™ precisa testar com algum comportamento espec√≠fico, fica complicado. &lt;/p&gt;

&lt;p&gt;Sempre que aparecer um m√©todo est√°tico, pense se isso pode afetar os testes. Caso afete, utilize um objeto para encapsular esse m√©todo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#saiba-o-porque-do-teste-estar-ali"&gt;
  &lt;/a&gt;
  Saiba o porque do teste estar ali
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nfxOwdUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l38ncuembd1qv7t0v6jq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfxOwdUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l38ncuembd1qv7t0v6jq.gif" alt="Image ariel pentendo o cabelo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Muitas vezes n√≥s fazemos as coisas sem saber bem o que estamos fazendo ou o porqu√™ das coisas. Com isso, n√≥s podemos testar umas 10 vezes a mesma l√≥gica e deixar de testar algo importante. Ent√£o, antes de escrever qualquer coisa crie algum tipo de "plano" onde voc√™ define o que voc√™ quer testar e o motivo desse teste.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilize-ferramentas-para-verificar-a-cobertura-de-testes"&gt;
  &lt;/a&gt;
  Utilize ferramentas para verificar a cobertura de testes
&lt;/h2&gt;

&lt;p&gt;Se n√≥s n√£o conseguimos medir, n√≥s nem podemos dizer se estamos fazendo um bom trabalho (provavelmente, nosso trabalho est√° ruim).&lt;br&gt;
O &lt;a href="https://www.eclemma.org/jacoco/"&gt;JaCoCo&lt;/a&gt; √© uma ferramenta √≥tima para dizer como est√° nossa cobertura. O que estamos esquecendo e o que precisamos melhorar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mas-n%C3%A3o-se-prenda-muito-a-isso"&gt;
  &lt;/a&gt;
  Mas n√£o se prenda muito a isso
&lt;/h2&gt;

&lt;p&gt;√â importante ter uma boa cobertura de teste. Particularmente, eu acho que 80% para um projeto maduro √© um bom n√∫mero. Existem coisas que simplesmente s√£o caras demais para serem testadas, ou que s√≥ n√£o tem motivo para testar. &lt;br&gt;
Al√©m disso, buscar os 100% pode dar a falsa sensa√ß√£o de que voc√™ tem todos os casos poss√≠veis mapeados e que nunca vai acontecer um erro. Spoiler: a menos que o seu nome seja Mulan e voc√™ esteja lutando contra os Hunos, voc√™ vai errar. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1vW7l4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/058lsrdv1uh6ptxmhya3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1vW7l4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/058lsrdv1uh6ptxmhya3.png" alt="Image mulan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considera√ß√µes
&lt;/h1&gt;

&lt;p&gt;Esse post foi mais te√≥rico. Nos pr√≥ximos, vamos ver como fazer testes unit√°rios, mockeados e de integra√ß√£o. Tudo isso trabalhando com Quarkus. Aguardem a continua√ß√£o /o/&lt;/p&gt;

</description>
      <category>testing</category>
      <category>braziliandevs</category>
      <category>java</category>
    </item>
    <item>
      <title>New project starting. </title>
      <author>Nelson Malbone</author>
      <pubDate>Mon, 25 Oct 2021 22:17:30 +0000</pubDate>
      <link>https://dev.to/nelsonmalbonecoding/new-project-starting-g8b</link>
      <guid>https://dev.to/nelsonmalbonecoding/new-project-starting-g8b</guid>
      <description>&lt;p&gt;Day one of many to come, my name is Nelson I‚Äôm just recently starting to pull myself out of tutorial hell. I‚Äôm starting a password generator with a list option and a copy function with custom toggle switches. If I can find a way to record a day to day process a time lapse I will post it on my Instagram. Today I‚Äôm starting to hand write the code out on paper. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Code Smell 96 - My Objects</title>
      <author>Maxi Contieri</author>
      <pubDate>Mon, 25 Oct 2021 22:12:37 +0000</pubDate>
      <link>https://dev.to/mcsee/code-smell-96-my-objects-5cij</link>
      <guid>https://dev.to/mcsee/code-smell-96-my-objects-5cij</guid>
      <description>&lt;p&gt;&lt;em&gt;You don't own objects.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR: don't use &lt;em&gt;my&lt;/em&gt; as a name prefix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lack of context&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bijection Fault&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Remove &lt;em&gt;my&lt;/em&gt; prefix. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change to a role suggesting name.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h1&gt;

&lt;p&gt;Several old tutorials use the word 'my' as a lazy name. &lt;br&gt;
This is vague and lead to context mistakes.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  Wrong
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="n"&gt;myWindow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#right"&gt;
  &lt;/a&gt;
  Right
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="n"&gt;salesWindow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*

Since window is instanciated, we are currently working
with a specialized window playing a special role

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#detection"&gt;
  &lt;/a&gt;
  Detection
&lt;/h1&gt;

&lt;p&gt;[x] Automatic&lt;/p&gt;

&lt;p&gt;We can tell our linters and static checkers to search for this prefix and warn us.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Naming&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Avoid using &lt;em&gt;my&lt;/em&gt;. Objects change according to the usage context.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#more-info"&gt;
  &lt;/a&gt;
  More Info
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/what-exactly-is-a-name-part-ii-rehab-20gd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What exactly is a name - Part II Rehab&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª May 23 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@bozu"&gt;Micha≈Ç Bo≈ºek&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/kid-toy"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Thinking about my experience of modifying code, I see that I spend much more time reading the existing code than I do writing new code. If I want to make my code cheap, therefore, I should make it easy to read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Kent Beck&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/software-engineering-great-quotes-26ci" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Software Engineering Great Quotes&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Dec 28 '20 „Éª 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#quotes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#software&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This article is part of the CodeSmell Series.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/how-to-find-the-stinky-parts-of-your-code-1dbc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Find the Stinky parts of your Code&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª May 21 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>oop</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Dropdown for GitHub workflows input parameters</title>
      <author>Arthur Diniz</author>
      <pubDate>Mon, 25 Oct 2021 22:09:59 +0000</pubDate>
      <link>https://dev.to/arthurbdiniz/dropdown-for-github-workflows-input-parameters-1e8d</link>
      <guid>https://dev.to/arthurbdiniz/dropdown-for-github-workflows-input-parameters-1e8d</guid>
      <description>&lt;h1&gt;
  &lt;a href="#dropdown-for-github-workflows-input-parameters"&gt;
  &lt;/a&gt;
  Dropdown for GitHub workflows input parameters
&lt;/h1&gt;

&lt;p&gt;Sometimes when we look at &lt;code&gt;CI/CD tools&lt;/code&gt; embedded within git-based software repository manager like &lt;code&gt;GitHub&lt;/code&gt;, &lt;code&gt;GitLab&lt;/code&gt; or &lt;code&gt;Bitbucket&lt;/code&gt;, we ran into a lack of some features.&lt;/p&gt;

&lt;p&gt;This time me and my DevOps/SRE team were facing a pain of not being able to have the option to create &lt;code&gt;drop-downs&lt;/code&gt; within GitHub workflows using input parameters. Although this functionality is already available on other platforms such as Bitbucket, the specific client we were working on stored the code inside GitHub.&lt;/p&gt;

&lt;p&gt;At first I thought that someone has already solved this problem somehow, but doing an extensive search on the internet I found several angry GitHub users opening requests within the Support Community and even in the stack overflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGk1bXUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGk1bXUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-1.png" alt="comment-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cju1B9Of--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cju1B9Of--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-2.png" alt="comment-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7RZIfhXm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7RZIfhXm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-3.png" alt="comment-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QdEUxKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QdEUxKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-5.png" alt="comment-5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qqWXtv5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qqWXtv5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-4.png" alt="comment-4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I decided to create a solution for this, always thinking about simplicity and in a way that makes it easy to get this missing functionality. I started by creating an input array pattern using &lt;code&gt;commas&lt;/code&gt; and using a &lt;code&gt;tag&lt;/code&gt; (the selector) e.g &lt;code&gt;brackets&lt;/code&gt; as the default value marker. Here is an example of what an input string would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-action-dropdown-list-input&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Environment'&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dev,staging,[uat],prod'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the final question that would turn out to be the most complicated to deal with. How can I change the GitHub Actions interface to replace the input pattern we created earlier to a dropdown?&lt;/p&gt;

&lt;p&gt;The simplest answer I thought was to create a &lt;code&gt;chrome and firefox extension&lt;/code&gt; that would do all this logic behind the scenes and replace the &lt;code&gt;HTML input element&lt;/code&gt; with the &lt;code&gt;selected tag&lt;/code&gt; containing the array values and leaving the tag value (selector) always as the default.&lt;/p&gt;

&lt;p&gt;All code was developed in pure JavaScript, open-source licensed under Apache 2.0 and available at &lt;a href="https://github.com/arthurbdiniz/gh-action-dropdown-list-input"&gt;https://github.com/arthurbdiniz/gh-action-dropdown-list-input&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-extension"&gt;
  &lt;/a&gt;
  Install extension
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/github-action-dropdown-in/deogklnblohhopmnkllaeinijefddcnm"&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Firefox: is still in review process to be published.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once installed, the extension is ready to use and the final result we see is the Actions interface with drop-downs. :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9h66RA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/showcase-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9h66RA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/showcase-1.png" alt="showcase-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGlVHD1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/showcase-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGlVHD1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/showcase-2.png" alt="showcase-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-selectors"&gt;
  &lt;/a&gt;
  Configuring selectors
&lt;/h3&gt;

&lt;p&gt;Go to the top right corner of the browser you are using and click on the extension logo. A screen will popup with tag options. Choose the right tags for you and save it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This action might require reloading the GitHub workflow tab.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5FGzNRTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/config.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5FGzNRTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/config.png" alt="config"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Have fun using drop-downs inside GitHub. If you liked this project please share this post and if possible "star" within the repository.&lt;/p&gt;

&lt;p&gt;Also feel free to connect with me on LinkedIn: &lt;a href="https://www.linkedin.com/in/arthurbdiniz"&gt;https://www.linkedin.com/in/arthurbdiniz&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.community/t/can-workflow-dispatch-input-be-option-list/127338"&gt;https://github.community/t/can-workflow-dispatch-input-be-option-list/127338&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/69296314/dropdown-for-github-workflows-input-parameters"&gt;https://stackoverflow.com/questions/69296314/dropdown-for-github-workflows-input-parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>actions</category>
      <category>dropdown</category>
    </item>
    <item>
      <title>‚ö°Ô∏èCombining Serverless Framework &amp; AWS CDK</title>
      <author>Sebastian Bille</author>
      <pubDate>Mon, 25 Oct 2021 21:51:11 +0000</pubDate>
      <link>https://dev.to/aws-builders/combining-serverless-framework-aws-cdk-1dg0</link>
      <guid>https://dev.to/aws-builders/combining-serverless-framework-aws-cdk-1dg0</guid>
      <description>&lt;p&gt;Serverless Framework is a fantastic tool for defining and managing your Lambda functions. But let's face it; it's not very good at handling other types of resources and infrastructure. CDK is though. This post will take a look at how we can combine the two!&lt;/p&gt;




&lt;p&gt;Serverless has excellent utility for describing and managing Lambda functions, but as soon as you need basically any other type of infrastructure, you'll have to resort to raw CloudFormation. Using the CDK with its declarative and straightforward constructs to define infrastructure is more expressive and easy to understand once the infrastructure stack grows. What if we could use them together and utilize each of them for its respective strengths, and what it does best? Unfortunately, there's no native way to use the two tools together, like &lt;a href="https://aws.amazon.com/blogs/compute/better-together-aws-sam-and-aws-cdk/"&gt;there is for SAM&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let's look at how we can work around that and whether or not it makes sense!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR - give me the &lt;a href="https://github.com/TastefulElk/sls-cdk-combined"&gt;code&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%97-setting-up-the-project"&gt;
  &lt;/a&gt;
  üèó Setting up the project
&lt;/h2&gt;

&lt;p&gt;Let's start by initializing a Typescript Serverless app. To keep things simple, we'll use a Yeoman generator to get us started with a project. Install it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; yo generator-sls-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then, in an empty folder, run the generator with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yo sls-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we'll be using CDK to manage our infrastructure, we'll want to manage CDK, its dependencies, and transpiling the infrastructure code separately from our actual application. Therefore, let's create a folder called &lt;code&gt;infrastructure&lt;/code&gt; in the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;infrastructure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, navigate to the created folder and initialize a CDK project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;infrastructure
npx cdk init &lt;span class="nt"&gt;--language&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now have a project with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- infrastructure # Our CDK infrastructure
    ‚Ü≥ bin     # CDK executable
    ‚Ü≥ lib     # infrastructure stack definition
    ‚Ü≥ test    # infrastructure tests
- src                    # application code
- tests                  # application tests
- serverless.yml # Serverless config

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-our-app"&gt;
  &lt;/a&gt;
  üî® Building our app
&lt;/h2&gt;

&lt;p&gt;The app we're building will contain a Lambda function, exposed in a HTTP API, which will put an item on an SQS queue for another Lambda to finally process the item.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dtJvVhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqdp7q58o0ikvgzw18z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dtJvVhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqdp7q58o0ikvgzw18z.png" alt="architecture diagram"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's start by adding an SQS queue to our CDK stack. To do that, we need to first add the &lt;code&gt;@aws-cdk/aws-sqs&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @aws-cdk/aws-sqs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I prefer Yarn over NPM, which is the default of the CDK init boilerplate. If you prefer to use Yarn too, remove the &lt;code&gt;package-lock.json&lt;/code&gt; so you don't get conflicting lock files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then add a queue to &lt;code&gt;infrastructure/lib/infrastructure-stack.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// infrastructure/lib/infrastructure-stack.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Queue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;InfrastructureStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SQS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sls-cdk-demo-queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As discussed earlier, we want to use Serverless and CDK for what they do best respectively. That means our API and Lambda functions will be defined in our &lt;code&gt;serverless.yml&lt;/code&gt;, seeing as Serverless handles those very capably and brings lots of functionality to interact with them once deployed. They're also the resources most likely to change often, meaning they don't really belong in our more long-living infrastructure stack. &lt;/p&gt;

&lt;p&gt;For this simple demo use case, all we need to do to set up our API Gateway, Lambda function and to map the function to the &lt;code&gt;/todo&lt;/code&gt; path, is to add the following to our &lt;code&gt;serverless.yml&lt;/code&gt;, using the &lt;code&gt;events&lt;/code&gt; mapping:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/createTodo.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/todos&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;createTodo&lt;/code&gt; function to send anything to our SQS buffer, it's going to need the URL of the queue. It's also going to need the queue's ARN to set up the necessary  &lt;code&gt;sqs:SendMessage&lt;/code&gt; IAM permission. However, since the SQS queue is not defined in the same CloudFormation stack as our Lambda function, we'll need to export those two properties from our CDK stack so that we can reference them in our Serverless stack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cross-stack-references"&gt;
  &lt;/a&gt;
  Cross Stack References
&lt;/h3&gt;

&lt;p&gt;CloudFormation stacks can export a set of properties, as "Outputs" which can then be referenced in other CloudFormation stacks. Conveniently, Serverless has built-in support to reference Outputs of other stacks, which means we can use this to easily transfer information from our CDK stack to our Serverless stack.&lt;/p&gt;

&lt;p&gt;In the CDK stack, we start by creating our output variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// infrastructure/lib/infrastructure-stack.ts&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queueUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueUrl&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queueArn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueArn&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, back in our &lt;code&gt;serverless.yml&lt;/code&gt;, we can reference those two variables with the &lt;code&gt;${cf:stackName.variableName}&lt;/code&gt; syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eu-north-1&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
  &lt;span class="na"&gt;iam&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Set up IAM permission for sending messages to the queue&lt;/span&gt;
    &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;statements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sqs:SendMessage&lt;/span&gt;
          &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:InfrastructureStack.queueArn}&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/createTodo.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/todos&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Set environment variable with the queue URL&lt;/span&gt;
      &lt;span class="na"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:InfrastructureStack.queueUrl}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and while we're at it, lets also add the definition for our second Lambda, the queue processor, again by using the cross stack reference to the queue ARN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;queueProcessor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/queueProcessor.handler&lt;/span&gt;
        &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;sqs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:InfrastructureStack.queueArn}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should be all we need for the infrastructure, all that's left is writing the actual Lambda code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda-code"&gt;
  &lt;/a&gt;
  Lambda Code
&lt;/h3&gt;

&lt;p&gt;Our Lambda code is going to be very simple. The &lt;code&gt;createTodo&lt;/code&gt; handler, the one exposed in the API, will take the &lt;code&gt;body&lt;/code&gt; of the request and put it directly on the SQS queue. The &lt;code&gt;queueProcessor&lt;/code&gt; will then automatically consume the queue. Starting with the &lt;code&gt;createTodo&lt;/code&gt; function, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/createTodo.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;QueueUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;MessageBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then let's just pretend to do some processing of the item in the &lt;code&gt;queueProcessor.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/queueProcessor.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doing some heavy processing right now. I promise! Don&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t come in!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, now all we need is to be able to deploy our app along with the infrastructure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying"&gt;
  &lt;/a&gt;
  üöÄ Deploying
&lt;/h2&gt;

&lt;p&gt;Since our application will live in two separate CloudFormation stacks, we need to do two separate deployments. The Serverless stack will depend on our infrastructure stack, but never the other way around - meaning we should always deploy the infrastructure stack first.&lt;/p&gt;

&lt;p&gt;To be able to deploy our app in one step, rather than manually first having to navigate to the infrastructure folder, deploy it,  navigate back to the project root and then deploy our Serverless app, we can add a script to our root &lt;code&gt;package.json&lt;/code&gt; that does us for us in one swift motion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd infrastructure &amp;amp;&amp;amp; yarn cdk deploy &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; yarn sls deploy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also add a CDK wrapper script that lets us easily run any CDK command without having to navigate to the infrastructure folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cdk"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd infrastructure &amp;amp;&amp;amp; yarn cdk"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;cdk&lt;/code&gt; script utilizes the fact that Yarn forwards arguments, and thus we can run, for example, &lt;code&gt;yarn cdk diff&lt;/code&gt; from the root of our app, even though CDK isn't actually in the root. Neat! üëµ&lt;/p&gt;

&lt;p&gt;What's even neater, though, is that we can now just run &lt;code&gt;yarn deploy&lt;/code&gt;. Since it's the first time we're deploying the app, it'll take a little longer than on subsequent deploys but after about half the time it takes refill your coffee, the app will be up and running! We can verify that it works by sending a &lt;code&gt;POST&lt;/code&gt; request to the API Gateway endpoint printed in the output, and by then looking at the logs of the final &lt;code&gt;queueProcessor&lt;/code&gt; lambda:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-type: application/json'&lt;/span&gt; &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"text":"Hello, World!"}'&lt;/span&gt; https://abcdefghij.execute-api.eu-north-1.amazonaws.com/dev/todos

yarn serverless logs &lt;span class="nt"&gt;--function&lt;/span&gt; queueProcessor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;CDK is excellent at defining and making sense of complex infrastructure and resources. However it does come with quite a bit of overhead. The CDK project itself has dependencies that you'll need to manage, and, most importantly; the infrastructure code is, well, code, which you'll need to maintain, lint and test. On the other hand, being able to test it, is definitely also one of the strengths. It's also generally a good idea to &lt;a href="https://twitter.com/JefClaes/status/1450795830542229504"&gt;separate your more long-living infrastructure into a separate CloudFormation stack&lt;/a&gt;. It minimizes the risk of accidentally modifying, or even deleting, important stateful resources such as a DynamoDB table.&lt;/p&gt;

&lt;p&gt;There are ongoing projects that tries to bring CDK constructs natively right into Serverless via plugins, one example being &lt;a href="https://github.com/getlift/lift"&gt;Lift&lt;/a&gt;, and other frameworks that are built on top of the CDK, such as &lt;a href="https://serverless-stack.com/"&gt;Serverless Stack&lt;/a&gt;. Lift looks promising, but it doesn't yet support using custom constructs, and many organizations and projects have invested a lot into Serverless Framework and aren't ready to jump ship to an alternative like Serverless Stack.&lt;/p&gt;

&lt;p&gt;For smaller projects, or projects where the infrastructure and/or the interaction between the infrastructure isn't complex, using CDK and Serverless together is unlikely to be worth the overhead. For larger, more complex apps, though, where you might want to unit test your resources or just be able to describe them better than with CloudFormation, which quickly gets very messy - it might be worth considering!&lt;/p&gt;




&lt;p&gt;If you enjoyed this post and want to see more, follow me on Twitter at &lt;a href="https://twitter.com/TastefulElk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS, and developer productivity!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Azure SQL Awesome List</title>
      <author>Davide Mauri</author>
      <pubDate>Mon, 25 Oct 2021 21:33:29 +0000</pubDate>
      <link>https://dev.to/azure/azure-sql-awesome-list-4pd5</link>
      <guid>https://dev.to/azure/azure-sql-awesome-list-4pd5</guid>
      <description>&lt;p&gt;It's been a while now I've been collecting links to resources I found useful for a developer working with Azure SQL, and today I realized that the list I've created become quite big and nice over the last months.&lt;/p&gt;

&lt;p&gt;I so decided to turn it into an official Awesome List, which, by GitHub definition is &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An awesome list is a list of awesome things curated by the community. There are awesome lists about everything from CLI applications to fantasy books. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here you go:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yorek"&gt;
        yorek
      &lt;/a&gt; / &lt;a href="https://github.com/yorek/awesome-azure-sql"&gt;
        awesome-azure-sql
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An awesome list of Azure SQL samples for Developers of any Language and Platform
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;as of now it contains a list of more than 50 curated links. I'll keep the list updated, and I really count on community's help here. If you have something you think it is worth and valuable to add to the list, please just submit a PR.&lt;/p&gt;

&lt;p&gt;The list is focused on Azure SQL and developers, and contains links to resources for every language, platform, tool and needs.&lt;/p&gt;

&lt;p&gt;Hope this is helpful to you as it has been to me!&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://www.pexels.com/@belart84?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Artem Beliaikin&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/come-in-we-re-awesome-sign-1051747/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>cloud</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Ace Data Science Interview by Working on Portfolio Projects</title>
      <author>Abid</author>
      <pubDate>Mon, 25 Oct 2021 20:52:47 +0000</pubDate>
      <link>https://dev.to/kingabzpro/how-to-ace-data-science-interview-by-working-on-portfolio-projects-4cd</link>
      <guid>https://dev.to/kingabzpro/how-to-ace-data-science-interview-by-working-on-portfolio-projects-4cd</guid>
      <description>&lt;p&gt;Recruiters of Data Science professionals around the world focus on portfolio projects rather than resumes and LinkedIn profiles. So, learning early how to contribute and share your work on GitHub, Deepnote, and Kaggle can help you perform your best during data science interviews.&lt;br&gt;
&lt;a href="https://www.kdnuggets.com/2021/10/ace-data-science-interview-portfolio-projects.html"&gt;How to Ace Data Science Interview by Working on Portfolio Projects&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>datascience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 5 smart contract programming languages for blockchain</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 25 Oct 2021 20:52:21 +0000</pubDate>
      <link>https://dev.to/logrocket/top-5-smart-contract-programming-languages-for-blockchain-4li6</link>
      <guid>https://dev.to/logrocket/top-5-smart-contract-programming-languages-for-blockchain-4li6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ezesunday/"&gt;Eze Sunday&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;p&gt;Everyone is talking about smart contracts, blockchain, decentralized finance, and cryptocurrencies. However, without developers, none of these would exist, so the demand for blockchain developers continues to surge.&lt;/p&gt;

&lt;p&gt;Many programming languages allow you to write smart contracts. In this article, we‚Äôll explore the top smart contract programming languages to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-smart-contracts"&gt;
  &lt;/a&gt;
  What are smart contracts?
&lt;/h2&gt;

&lt;p&gt;A smart contract is a computer program that automatically executes actions according to the terms of the contract without intermediaries. For example, if you want to purchase a piece of land using a smart contract mechanism, your land ownership documents will be sent to you immediately after your payment is completed. You don‚Äôt need to trust a third-party site to transfer the ownership after making payments.&lt;/p&gt;

&lt;p&gt;Also, you can see smart contracts in action in decentralized exchanges (DEX), like &lt;a href="https://pancakeswap.finance/"&gt;PancakeSwap&lt;/a&gt;, which allows you to exchange your tokens for another token. If you have BNB, you can easily exchange it for Ethereum without having to talk to customer support.&lt;/p&gt;

&lt;p&gt;Smart contract programming languages allow you to write programs that implement smart contracts on the blockchain.&lt;/p&gt;

&lt;p&gt;So, what are the top smart contract languages, you asked? Let‚Äôs get into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-solidity"&gt;
  &lt;/a&gt;
  1. Solidity
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ethereum/solidity"&gt;Solidity&lt;/a&gt; is an object-oriented and statically-typed programming language that was designed to allow developers to create smart contracts.&lt;/p&gt;

&lt;p&gt;Solidity is designed based on existing programming languages like &lt;a href="https://en.m.wikipedia.org/wiki/C%2B%2B"&gt;C++&lt;/a&gt;, &lt;a href="https://en.m.wikipedia.org/wiki/Python_(programming_language)"&gt;Python&lt;/a&gt;, and JavaScript, so it uses similar language structures found in these languages, most likely to make it easy for developer adoption.&lt;/p&gt;

&lt;p&gt;Here is an example of a smart contract with Solidity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"My value"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are a JavaScript or C++ developer, this will look familiar to you.&lt;/p&gt;

&lt;p&gt;Solidity, being the first smart contract programming language, has wide market adoption and is being used to build many decentralized applications. It was developed to write smart contracts on Ethereum, and, just like Java and &lt;a href="https://docs.oracle.com/en/java/javase/17/vm/java-virtual-machine-technology-overview.html"&gt;Java Virtual Machine (JVM)&lt;/a&gt;, Solidity runs on the &lt;a href="https://ethereum.org/en/developers/docs/evm/"&gt;Ethereum Virtual Machine (EVM)&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-programming-smart-contracts-with-solidity"&gt;
  &lt;/a&gt;
  Advantages of programming smart contracts with Solidity
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Solidity has a large, accessible community. Because Solidity was the first smart contract programming language and was developed solely for smart contract programming on the Ethereum network, it has gained wide community support, making it easy for new developers to get help when there are stuck&lt;/li&gt;
&lt;li&gt;  Solidity is Turing-complete, so it‚Äôs not limited to running just a handful of algorithms ‚Äî it can be used to compute all computable functions&lt;/li&gt;
&lt;li&gt;  Solidity offers concepts that are available in most modern programming languages. It has functions, string manipulation, classes, variables, arithmetic operations, etc. In addition, Solidity supports mapping data structures, which act as hash tables and consist of key types and key value pairs&lt;/li&gt;
&lt;li&gt;  Solidity doesn‚Äôt have a steep learning curve if you already know how to program with popular programming languages like Python, C++, and JavaScript, as most of its syntax was borrowed from these languages&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-programming-smart-contracts-with-solidity"&gt;
  &lt;/a&gt;
  Disadvantages of programming smart contracts with solidity
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Solidity is a newer language, and even though the community has been helping with library development and its tools, there‚Äôs still so much to be done in the language that you‚Äôll have to completely implement yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of blockchains using Solidity include &lt;a href="https://tendermint.com/"&gt;Tendermint&lt;/a&gt;, &lt;a href="https://docs.binance.org/smart-chain/wallet.html"&gt;Binance Smart Chain&lt;/a&gt;, &lt;a href="http://ethereumclassic.org/"&gt;Ethereum Classic&lt;/a&gt;, &lt;a href="http://tron.network/"&gt;Tron&lt;/a&gt;, &lt;a href="https://www.avax.network/"&gt;Avalanche&lt;/a&gt;, &lt;a href="http://www.counterparty.io/"&gt;CounterParty&lt;/a&gt;, and &lt;a href="https://hedera.com/"&gt;Hedera&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-rust"&gt;
  &lt;/a&gt;
  2. Rust
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted"&gt;Stack Overflow surveys&lt;/a&gt;, &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; is one of the most beloved programming languages for five years in a row.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sCfdNvPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/stack-overflow-survey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sCfdNvPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/10/stack-overflow-survey.png" alt="Stack Overflow Developer Survey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rust is a low-level statically-typed programming language that is fast and memory-efficient ‚Äî in an industry where scalability is not negotiable, Rust, as a language, finds a home. Rust is a relatively new programming language with enormous power while retaining simplicity, memory efficiency, reliability, and complexity combined.&lt;/p&gt;

&lt;p&gt;By default, Rust assumes best design and development practices and also gives you a chance to alter them if you choose to. Rust has no garbage collector, which means there would be no surprise incident (caused by the language) during the runtime.&lt;/p&gt;

&lt;p&gt;All of these factors make Rust a great choice for programming blockchain. It‚Äôs not surprising that one of the fastest blockchains, Solana, is built with Rust at its core.&lt;/p&gt;

&lt;p&gt;Rust's compiler has a color-coded output and an even more detailed error output to help with debugging.&lt;/p&gt;

&lt;p&gt;In many cases, Rust shows the cause of an error and where to find it by highlighting relevant code, accompanied by an explanation. Also, in some cases, it provides a fix for the error.&lt;/p&gt;

&lt;p&gt;Here is an example smart contract using Rust:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;borsh&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;BorshDeserialize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BorshSerialize&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;near_sdk&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;near_bindgen&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;near_sdk&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;UnorderedMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[global_allocator]&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ALLOC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;wee_alloc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;WeeAlloc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;wee_alloc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;WeeAlloc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;INIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;StatusMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UnorderedMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nd"&gt;#[near_bindgen]&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;StatusMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;set_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;account_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;signer_account_id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.records&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.records&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;account_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rust contains some object-oriented features; you can create structs and data. But unlike other object-oriented languages, it does not exhibit inheritance.&lt;/p&gt;

&lt;p&gt;Smart contracts blockchain using Rust include &lt;a href="https://coinsem.com/solana-all-you-need-to-know/?amp=1"&gt;Solana&lt;/a&gt;, &lt;a href="https://polkadot.network/"&gt;Polkadot&lt;/a&gt;, and &lt;a href="https://near.org/"&gt;Near Blockchain&lt;/a&gt;. You can find many blockchain projects built with Rust in &lt;a href="https://github.com/rust-in-blockchain/awesome-blockchain-rust"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-programming-smart-contracts-with-rust"&gt;
  &lt;/a&gt;
  Advantages of programming smart contracts with Rust
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Because Rust is a low-level programming language and is designed for efficiency, you can build decentralized applications with high throughput&lt;/li&gt;
&lt;li&gt;  Rust immutability allows you to write predictable programs, which is what is needed for the type of applications built on the blockchain&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-programming-smart-contracts-with-rust"&gt;
  &lt;/a&gt;
  Disadvantages of programming smart contracts with Rust
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Rust is a new programming language with some new concepts. It might take some time to get used to working with it, especially if you are new to programming&lt;/li&gt;
&lt;li&gt;  There are limited libraries for almost everything compared to other languages like Python and JavaScript&lt;/li&gt;
&lt;li&gt;  It‚Äôs verbose. With Rust, you‚Äôll have to state every program construct explicitly, meaning you‚Äôll write more code than you would in languages like JavaScript and Python&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-javascript"&gt;
  &lt;/a&gt;
  3. JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is a general-purpose programming language, and it‚Äôs found a place in the blockchain space. Because JavaScript is an entry-level language, most blockchains tend to create a JavaScript wrapper or library to allow developers to easily jump into the ecosystem and start building amazing products as soon as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hyperledger/fabric-chaincode-node"&gt;Hyperledger Fabric&lt;/a&gt; is a blockchain that allows you to build a smart contract with a few programming languages, including JavaScript (Node.js).&lt;/p&gt;

&lt;p&gt;Here is an &lt;a href="https://hyperledger.github.io/fabric-chaincode-node/main/api/"&gt;example of what a smart contract&lt;/a&gt; looks like in HyperLedger Fabric:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Contract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fabric-contract-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;util&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * A program to support updating values in a smart contract
 */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UpdateSmartContractValue&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Contract&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UpdateSmartContractValue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;transactionA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;putState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;transactionB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//  .....&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;UpdateSmartContractValue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The community built &lt;a href="https://web3js.readthedocs.io/en/v1.5.2/"&gt;web3.js&lt;/a&gt;, a collection of libraries that allows you to interact with Ethereum smart contracts using HTTP, WebSocket, or IPC.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://coinsem.com/solana-all-you-need-to-know/"&gt;Solana Foundation&lt;/a&gt;¬†also built JavaScript wrappers around Solana Rust programs that allow JavaScript developers to start building Dapps on the blockchain as soon as possible.&lt;/p&gt;

&lt;p&gt;Several tools have been built with JavaScript to help with blockchain development, but not for the core of the blockchain, due to its &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;weak type checking&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-programming-smart-contracts-with-javascript"&gt;
  &lt;/a&gt;
  Advantages of programming smart contracts with JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  It‚Äôs a popular and mature programming language with plenty of community support&lt;/li&gt;
&lt;li&gt;  You‚Äôll enjoy a faster development time compared to other languages, especially newer ones&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-programming-smart-contracts-with-javascript"&gt;
  &lt;/a&gt;
  Disadvantages of programming smart contracts with JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Dynamic typing: for mission-critical applications like smart contracts, type safety is an important feature. JavaScript implements dynamic type safety when most developers prefer to use a statically typed language for applications that are built on the blockchain&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-vyper"&gt;
  &lt;/a&gt;
  4. Vyper
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vyper.readthedocs.io/en/v0.1.0-beta.12/testing-contracts.html"&gt;Vyper&lt;/a&gt; is a contract-oriented Python-like programming language that targets the &lt;a href="https://ethereum.org/en/developers/docs/evm/"&gt;Ethereum Virtual Machine (EVM)&lt;/a&gt;. It has contract-specific features, such as event notifiers for listeners, custom global variables, and global constants.&lt;/p&gt;

&lt;p&gt;Vyper was built to address the security issues present in Solidity. It was developed to complement Solidity, not replace it.&lt;/p&gt;

&lt;p&gt;Vyper deliberately has fewer features than Solidity to make contracts more secure and easier to audit, and, as a result, it does not support modifiers, inheritance, inline assembly, function and operator overloading, recursive calling, infinite-length loops, and binary fixed points.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Building secure smart contracts is possible and natural with Vyper, as they are less prone to attacks&lt;/li&gt;
&lt;li&gt;  Vyper code is human-readable. For Vyper, simplicity for the reader is more important than simplicity for the writer&lt;/li&gt;
&lt;li&gt;  A striking feature of Vyper is the ability to compute a precise upper limit for gas consumption related to a specific Vyper function call&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Vyper has limited support for pure functions, hence anything marked &lt;code&gt;constant&lt;/code&gt; is not allowed to change state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have seen or worked with Python code, then you‚Äôll almost be able to write &lt;a href="https://vyper.readthedocs.io/en/v0.1.0-beta.12/testing-contracts.html"&gt;Vyper code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example from the &lt;a href="https://vyper.readthedocs.io/en/stable/"&gt;docs&lt;/a&gt;, just to give you a feel of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class VyperContract:
    """
    An alternative Contract Factory which invokes all methods as `call()`,
    unless you add a keyword argument. The keyword argument assigns the prep method.
    This call
    &amp;gt; contract.withdraw(amount, transact={'from': eth.accounts[1], 'gas': 100000, ...})
    is equivalent to this call in the classic contract:
    &amp;gt; contract.functions.withdraw(amount).transact({'from': eth.accounts[1], 'gas': 100000, ...})
    """

    def __init__(self, classic_contract, method_class=VyperMethod):
        classic_contract._return_data_normalizers += CONCISE_NORMALIZERS
        self._classic_contract = classic_contract
        self.address = self._classic_contract.address
        protected_fn_names = [fn for fn in dir(self) if not fn.endswith('__')]
        for fn_name in self._classic_contract.functions:
            # Override namespace collisions
            if fn_name in protected_fn_names:
                _concise_method = mk_collision_prop(fn_name)
            else:
                _classic_method = getattr(
                    self._classic_contract.functions,
                    fn_name)
                _concise_method = method_class(
                    _classic_method,
                    self._classic_contract._return_data_normalizers
                )
            setattr(self, fn_name, _concise_method)

    @classmethod
    def factory(cls, *args, **kwargs):
        return compose(cls, Contract.factory(*args, **kwargs))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-yul"&gt;
  &lt;/a&gt;
  5. Yul
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.soliditylang.org/en/v0.5.3/yul.html"&gt;Yul&lt;/a&gt; is an intermediate programming language that is compiled to bytecode for addressing the needs of different backends. The Solidity compiler has an experimental implementation that uses Yul as an intermediate language. Yul is used in stand-alone mode and for inline assembly inside Solidity.&lt;/p&gt;

&lt;p&gt;Yul bears planned support for EVM and &lt;a href="https://github.com/ewasm"&gt;ewasm&lt;/a&gt; (Ethereum flavored WebAssembly). It is designed to be a usable common denominator of both platforms.&lt;/p&gt;

&lt;p&gt;Yul is a great target for high-level optimization stages that can benefit both EVM and ewasm platforms equally.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-to-using-yul"&gt;
  &lt;/a&gt;
  Advantages to using Yul
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Readability: programs written in Yul are readable even if the code is generated by a compiler from Solidity. Yul offers high-level constructs such as loops, function calls, and if and switch statements&lt;/li&gt;
&lt;li&gt;  Yul is simple to use, thanks to the translation of code from Yul code to bytecode&lt;/li&gt;
&lt;li&gt;  Yul uses a simple and flexible language to create contracts and is beginner-friendly&lt;/li&gt;
&lt;li&gt;  Yul is statically typed to avoid confusion on concepts like values and references. It has a default type that can always be omitted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example of what Yul code looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;object "SmartContract" {
  code {
    // Smart contract constructor
    datacopy(0, dataoffset("Runtime"), datasize("Runtime"))
    return(0, datasize("Runtime"))
  }
  object "Runtime" {
    code {
       // Runtime code
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most Ethereum-based projects most likely already use Yul.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-using-yul"&gt;
  &lt;/a&gt;
  Disadvantages of using Yul
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Because Yul needs to be compiled to bytecode, it requires additional time to complete the entire compilation process, thus making it time-consuming during development&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Which programming language from the above list you should use is dependent on the blockchain you want to work on. For Ethereum blockchain, for example, Solidity is the top choice for most developers.&lt;/p&gt;

&lt;p&gt;Of course, we expect more conventional language support and more blockchain languages to come up, as it‚Äôs still an emerging space.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and &lt;a class="mentioned-user" href="https://dev.to/ngrx"&gt;@ngrx&lt;/a&gt;
/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>discuss</category>
      <category>performance</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Java Notes #1</title>
      <author>DH Kim</author>
      <pubDate>Mon, 25 Oct 2021 20:51:51 +0000</pubDate>
      <link>https://dev.to/icncsx/java-271p</link>
      <guid>https://dev.to/icncsx/java-271p</guid>
      <description>&lt;p&gt;I learned Java almost 6 years ago when I was in university, and since then I have used it sparingly at work. Today I am starting a series where I chronicle my journey re-learning Java, taking extensive notes and summarizing them to share with you all.&lt;/p&gt;

&lt;p&gt;Here is my first note that will start the series:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java is platform independent, meaning that you can write a program once, and as long as your host machine has JVM, it will just run - barring rare edge cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every class (in Java everything is inside a class) is compiled into a separate Java bytecode file that has the same name as the class but ends with the &lt;code&gt;.class&lt;/code&gt; extension instead of the &lt;code&gt;.java&lt;/code&gt; extension.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every Java program is a set of class definitions. To run a Java program, it must have a &lt;code&gt;main method&lt;/code&gt;, which represents the entry point where the program starts when it is executed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To compile a Java source-code file, you can use the &lt;code&gt;javac&lt;/code&gt; command. And to run a Java class, you use the &lt;code&gt;java&lt;/code&gt; command. More typically though, you will use some kind of IDE which has shortcuts and buttons to do this for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There can only be one public top-level class per &lt;code&gt;.java&lt;/code&gt; file, and public top-level classes must have the same name as the source file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Build Strong Data Science Portfolio as a Beginner</title>
      <author>Abid</author>
      <pubDate>Mon, 25 Oct 2021 20:49:27 +0000</pubDate>
      <link>https://dev.to/kingabzpro/how-to-build-strong-data-science-portfolio-as-a-beginner-5aec</link>
      <guid>https://dev.to/kingabzpro/how-to-build-strong-data-science-portfolio-as-a-beginner-5aec</guid>
      <description>&lt;p&gt;After learning the basics of data science, you can start to work on real-world problems. But how do you showcase your work? In this article, we are going to learn a unique way to create a data science portfolio.&lt;br&gt;
&lt;a href="https://www.kdnuggets.com/2021/10/strong-data-science-portfolio-as-beginner.html#.YXcXINQEoG8.link"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DUEx5HG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.kdnuggets.com/wp-content/uploads/strong-data-science-portfolio-as-beginner.jpg" alt="blog"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>career</category>
      <category>github</category>
    </item>
  </channel>
</rss>
