<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>FREE 3D ILLUSTRATION LIBRARIES </title>
      <author>Innocent Coder</author>
      <pubDate>Thu, 29 Apr 2021 08:23:43 +0000</pubDate>
      <link>https://dev.to/innocentcoder/free-3d-illustration-libraries-5d6c</link>
      <guid>https://dev.to/innocentcoder/free-3d-illustration-libraries-5d6c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#handz"&gt;
  &lt;/a&gt;
  Handz
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZPwnusT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0l5m4bjd54bt54w4t06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZPwnusT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0l5m4bjd54bt54w4t06.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Is Free 3D Hands Gestures Library For Any Occasion.&lt;/p&gt;

&lt;p&gt;link:- &lt;a href="https://www.handz.design/"&gt;https://www.handz.design/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#slam"&gt;
  &lt;/a&gt;
  Slam
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FqDPwy4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hg09ulby4fkugnh08d1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqDPwy4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hg09ulby4fkugnh08d1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discover Nice Objects Created With Cinema 4D. Virtual Reality Tools And Other Gadgets Are Embodied In Volumetric Graphics.&lt;/p&gt;

&lt;p&gt;link:- &lt;a href="https://craftwork.design/downloads/slam"&gt;https://craftwork.design/downloads/slam&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#power-people-platform"&gt;
  &lt;/a&gt;
  Power People Platform
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCfQciGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxvnh4btfw4y4pphtr0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCfQciGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxvnh4btfw4y4pphtr0n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Power People Platform Is A Delicious Design Library Of 3D Avatars. Made With Love For More Fun And Color In Your Work &lt;/p&gt;

&lt;p&gt;link:- &lt;a href="https://powerpeopleplatform.com/"&gt;https://powerpeopleplatform.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#shapefest"&gt;
  &lt;/a&gt;
  Shapefest
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cy4FsG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zslu9j6wh0g4ugcrkzqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cy4FsG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zslu9j6wh0g4ugcrkzqj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Massive Free Library Of Beautifully Rendered 3D Shapes. 160000+ High Resolution PNG Images In One Cohesive Library. &lt;/p&gt;

&lt;p&gt;link:- &lt;a href="https://www.shapefest.com/"&gt;https://www.shapefest.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#faticons-medicine"&gt;
  &lt;/a&gt;
  Faticons Medicine
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr-86hol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pwn9dac32hkqcyh9lzv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr-86hol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pwn9dac32hkqcyh9lzv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressive easy-customizable low-poly 3d icons for your project. Faticons Medicine. Sketch. Figma. Compatible with Figma and Sketch&lt;/p&gt;

&lt;p&gt;link:- &lt;a href="http://minima.market/faticons-medicine"&gt;http://minima.market/faticons-medicine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/innocentcoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGJ5NE5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICZsIDfS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620705/764eb964-ecd2-4875-90c2-142dfc2f639c.jpg" alt="innocentcoder image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/innocentcoder/5-icons-resource-for-your-web-projects-545a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Icons Resource For Your Web Projects&lt;/h2&gt;
      &lt;h3&gt;Innocent Coder ・ Apr 28 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>illustration</category>
      <category>freebies</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>State Machines: Should this be a state, or in context?</title>
      <author>Matt Pocock</author>
      <pubDate>Thu, 29 Apr 2021 07:54:37 +0000</pubDate>
      <link>https://dev.to/mpocock1/state-machines-should-this-be-a-state-or-in-context-1d7e</link>
      <guid>https://dev.to/mpocock1/state-machines-should-this-be-a-state-or-in-context-1d7e</guid>
      <description>&lt;p&gt;State machines offer several API's for expressing state. Like other tools, you can keep arbitrary values in a store (usually expressed as an object) called &lt;code&gt;context&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is handy for values which change over time and you need to keep updated, like the value of a form input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;CHANGE_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time the &lt;code&gt;CHANGE_NAME&lt;/code&gt; event is sent to the machine, we'll update the value in &lt;code&gt;context&lt;/code&gt;. We can then use that value to display the value in our UI or send it to an API.&lt;/p&gt;

&lt;p&gt;XState also gives you another way of expressing state - through finite states. Let's imagine a modal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;CLOSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the modal's state is expressed through the &lt;code&gt;states: {}&lt;/code&gt; attribute, which also defines which events can be received during each state. You can only &lt;code&gt;CLOSE&lt;/code&gt; the modal when it's &lt;code&gt;open&lt;/code&gt;, and vice versa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-should-i-choose"&gt;
  &lt;/a&gt;
  Which should I choose?
&lt;/h2&gt;

&lt;p&gt;The choice between using &lt;code&gt;context&lt;/code&gt; and &lt;code&gt;states&lt;/code&gt; isn't always clear. For instance, the modal machine above could be expressed using &lt;code&gt;context&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;CLOSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives you exactly the same functionality as the states-based one above - you can track when the modal is open and closed, and send the same events.&lt;/p&gt;

&lt;p&gt;The reason this can be expressed using both &lt;code&gt;states&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; is because &lt;em&gt;all of the events do the same thing no matter what state you're in&lt;/em&gt;. There are no events you need to declare as impossible in certain states.&lt;/p&gt;

&lt;p&gt;To show you what I mean, let's imagine a form input inside a modal. We only want to allow changes to the form input while the modal is open.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;states&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;CLOSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;CHANGE_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
          &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the modal is in the &lt;code&gt;closed&lt;/code&gt; state, the &lt;code&gt;CHANGE_NAME&lt;/code&gt; event will not change the value in &lt;code&gt;context&lt;/code&gt;. State machines are great at this - only allowing the things you want to happen to happen. Some other examples might be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not allowing users to submit a form while the previous API call is loading&lt;/li&gt;
&lt;li&gt;Only allowing users to log in if they're not already logged in&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#putting-things-in-context"&gt;
  &lt;/a&gt;
  Putting things in context
&lt;/h2&gt;

&lt;p&gt;You might be wondering - but, I &lt;em&gt;can&lt;/em&gt; express the above in &lt;code&gt;context&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMachine&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;OPEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;CLOSE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;CHANGE_NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// This acts as the guard to prevent editing&lt;/span&gt;
        &lt;span class="c1"&gt;// the name while it's open&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this is incorrect for two reasons. First, as requirements grow, so will the complexity of your logic. Let's imagine that the modal can now be either &lt;code&gt;closing&lt;/code&gt; (i.e. animating out) or &lt;code&gt;closed&lt;/code&gt;. We'll soon see an explosion of booleans, as I discussed in &lt;a href="https://dev.to/mpocock1/usestate-vs-usereducer-vs-xstate-part-1-modals-569e"&gt;this article on useState/useReducer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Second, XState is auto-documenting via the &lt;a href="https://xstate.js.org/viz/"&gt;XState visualiser&lt;/a&gt;. The more your logic is expressed in &lt;code&gt;states&lt;/code&gt;, the easier it's going to be to visualise. The machine above is basically a single state with its logic expressed in ways that XState can't visualise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rules-to-live-by"&gt;
  &lt;/a&gt;
  Rules to live by
&lt;/h2&gt;

&lt;p&gt;You should be keeping most of your state in context. That includes form values, API data - anything which cannot be expressed finitely.&lt;/p&gt;

&lt;p&gt;But state machines are powerful &lt;em&gt;because&lt;/em&gt; of their states. Use states when you want to express your logic visually, or gate events to certain states.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>xstate</category>
    </item>
    <item>
      <title>The best developer productivity hacks to master</title>
      <author>Pavel Polívka</author>
      <pubDate>Thu, 29 Apr 2021 07:49:16 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/the-best-developer-productivity-hacks-to-master-59o9</link>
      <guid>https://dev.to/pavel_polivka/the-best-developer-productivity-hacks-to-master-59o9</guid>
      <description>&lt;p&gt;In general, I consider myself a productive person. I usually manage to complete a lot of things per day. I read a lot of articles and books about how to increase your productivity and adopted few techniques that help me a lot. In this article, I will go over them, describe the technique, how it helps me and what I use to implement it. &lt;/p&gt;

&lt;p&gt;This is not an orderer list. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-goal"&gt;
  &lt;/a&gt;
  Single goal
&lt;/h2&gt;

&lt;p&gt;Every day I will set up a single goal for that day. The one thing I want complete. It does not have to necessarily be work-related, it should be the thing you spent most of your day doing. &lt;/p&gt;

&lt;p&gt;For me, it usually is something like: "Finish this JIRA ticket." But it can be stuff like clean your house, etc... &lt;/p&gt;

&lt;p&gt;If this is a work task I usually try to spend about 80% of my work time on this goal. Rest is spent on meetings, email, and other ad-hoc tasks. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#short-bursts"&gt;
  &lt;/a&gt;
  Short bursts
&lt;/h2&gt;

&lt;p&gt;This is also called the Pomodoro technique. The principle behind this is very simple. You set some time (20 minutes), start a timer, and focus on a single unit of work during that time. You will not answer email, chat, phone, etc.. you work on a task that you want to advance. I try to fit as many of these as possible into my day. Not just into my workday.&lt;/p&gt;

&lt;p&gt;Every time I complete an interval I follow it with a short break.&lt;/p&gt;

&lt;p&gt;There is a lot of timer apps that can be used. I mostly use &lt;a href="https://www.forestapp.cc"&gt;Forest&lt;/a&gt; but you can use anything you like. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conquer-email-and-chat"&gt;
  &lt;/a&gt;
  Conquer email and chat
&lt;/h2&gt;

&lt;p&gt;The biggest problem for my at the beginning was not to answer to email and or chat message right away. You see those notifications during your work session and it's super easy to just open Outlook and reply. The first step for me was to considerably disable notifications. I regularly open Outlook and Slack to skim through messages if there is something important that needs my immediate attention. I usually do it after every work session, not a lot of things are that important that it cannot wait 20 minutes. &lt;/p&gt;

&lt;p&gt;Twice a day I dedicate more time to deal with the rest of it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#say-no"&gt;
  &lt;/a&gt;
  Say NO
&lt;/h2&gt;

&lt;p&gt;This was big to me as well. I tend to please everyone so I was naturally saying yes to most of the requests that came my way. This way you get a lot of things to do and it will distract you from the main goal of the day. &lt;/p&gt;

&lt;p&gt;Normalize saying NO. Do not be mean about tho. If you do not have time right now, just say NO. Most people will not be mad at you, they are the ones asking. It's perfectly ok to say no to your manager as well, maybe explain that you have a lot on your plate right now. They may ask somebody else or reassign some of your other work if the new one is really important. Everything is always possible to discuss. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-tasks"&gt;
  &lt;/a&gt;
  Quick tasks
&lt;/h2&gt;

&lt;p&gt;When going through email or chat I have a rule if the required task to complete the action on the mail (can be a reply) takes less than 2 minutes I do it right now and then. This way you do not have a long TODO list filled with quick-to-complete tasks. This is one of those things that seem minor but increase your productivity a lot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-list"&gt;
  &lt;/a&gt;
  TODO list
&lt;/h2&gt;

&lt;p&gt;TODO list is essential to me. I am not using any apps or other technology I am a pen and paper guy. I have a list of things to do, every day I circle my main goal of the day. When the task is done I cross it. When my paper is full I copy incomplete items to a new sheet. &lt;/p&gt;

&lt;p&gt;I am adding stuff throughout the day, mainly after email/chat sessions.&lt;/p&gt;

&lt;p&gt;You can use any app or whatever technique works for you, but keeping a list of stuff that needs to be done is essential.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-multitasking"&gt;
  &lt;/a&gt;
  No multitasking
&lt;/h2&gt;

&lt;p&gt;Multitasking kills productivity. When you are trying to do multiple things at once you usually do all of them halfway only. When you are working with the Pomodoro technique do always just one thing in your interval. If you need multiple intervals to finish your task try to limit the intervals with other work to as few as possible. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#done-is-better-than-perfect"&gt;
  &lt;/a&gt;
  Done is better than perfect
&lt;/h2&gt;

&lt;p&gt;The "done is better than perfect" sentence was something that made me mad the first time one of our managers wrote it on our whiteboard with big letters. I want my work to be perfect, with no compromising. Over time I figure out that this is good for us. Let's finish our work and worry about theoretical edge cases when they become a thing. Do not spend weeks finishing that one feature that almost nobody will use just because you think it's super cool to do.&lt;/p&gt;




&lt;p&gt;For more awesome tips like this please follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>All About Knapsack Problem | python</title>
      <author>vinayak</author>
      <pubDate>Thu, 29 Apr 2021 07:37:45 +0000</pubDate>
      <link>https://dev.to/itsvinayak/all-about-knapsack-problem-python-1mc5</link>
      <guid>https://dev.to/itsvinayak/all-about-knapsack-problem-python-1mc5</guid>
      <description>&lt;p&gt;The knapsack problem is a problem in combinatorial optimization:&lt;/p&gt;

&lt;p&gt;Given a set of items, each with a weight and a value, determine the number of each item included in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items. The problem often arises in resource allocation where the decision-makers have to choose from a set of non-divisible projects or tasks under a fixed budget or time constraint, respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Types of knapsack problem:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0-1 Knapsack Problem

&lt;ul&gt;
&lt;li&gt;for recursive solution time Complexity - O(2^n)&lt;/li&gt;
&lt;li&gt;using dynamic programming time complexity is O(nW) where "W" is capacity and "n" in no. of the item &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Unbounded Knapsack (Repetition of items allowed) Θ((W+1)*N)&lt;/li&gt;
&lt;li&gt;fractional knapsack problem O(nlogn)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Given knapsack&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4TnXFu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619342085603/Z1S1f6z7U.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4TnXFu2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619342085603/Z1S1f6z7U.png" alt="Screenshot (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;variables used&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wt = [10,40,20,30]
val = [60,40,100,120]
capacity = 50
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#01-knapsack-problem-unbounded-knapsack-repetition-of-items-not-allowed"&gt;
  &lt;/a&gt;
  0-1 knapsack problem (Unbounded Knapsack (Repetition of items not allowed)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;### 0-1 Knapsack Problem
## recursive solution time Complexity - O(2^n)

def zeroOneKnapsackRec(index,wt,val,capacity):
    # base condition
    if capacity == 0 or index == 0:
        return 0
    elif wt[index-1] &amp;gt; capacity:
        return zeroOneKnapsackRec(index-1,wt,val,capacity)
    else:
        # if we take or leave
        return max(val[index-1]
                   + zeroOneKnapsackRec(index-1,wt,val,capacity-wt[index-1]),  # taking element
                   zeroOneKnapsackRec(index-1,wt,val,capacity)  # leaving element
                    )
zeroOneKnapsackRec(len(wt),wt,val,capacity)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 220&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-using-dp-on-a-recursive-solution"&gt;
  &lt;/a&gt;
  now using dp on a recursive solution
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#type-of-dynamic-programming-approach"&gt;
  &lt;/a&gt;
  Type of dynamic programming approach
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;top-down approach( Memoization Technique (an extension of recursive approach) )&lt;/li&gt;
&lt;li&gt;bottom-up approach
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Memoization Technique ... 

# Time Complexity: O(number of items*capacity).

# we have taken capacity and weigth because both variables are changing
dp = [[None for i in range(capacity + 1)] for j in range(len(wt) + 1)]  ## array to store recursive call or for Memoization

def zeroOneKnapsackMemoization(index,wt,val,capacity):
    # base condition
    if capacity == 0 or index == 0:
        return 0

    if dp[index][capacity] is not None:
        return dp[index][capacity]
    else:    
        if wt[index-1] &amp;gt; capacity:
            dp[index][capacity] = zeroOneKnapsackRec(index-1,wt,val,capacity)
            return dp[index][capacity]
        else:
            dp[index][capacity] =  max(val[index-1] \
                        + zeroOneKnapsackRec(index-1,wt,val,capacity-wt[index-1]) ,\
                                zeroOneKnapsackRec(index-1,wt,val,capacity-wt[index-1]))

            return dp[index][capacity]

zeroOneKnapsackMemoization(len(wt),wt,val,capacity)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 220&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def topDownKnapsack(wt,val,capacity):
    dp = [[0 for i in range(capacity+1)] for j in range(len(wt)+1)]
    for i in range(len(wt)+1):
        for j in range(capacity+1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif wt[i-1] &amp;lt;= j:
                dp[i][j] = max(
                    val[i - 1] + dp[i - 1][j - wt[i - 1]],
                               dp[i - 1][j])      
            else:
                 dp[i][j] = dp[i - 1][j]

    return dp

print("ans :",topDownKnapsack(wt,val,capacity)[len(wt)][capacity])

# to see dp table
from pandas import *
matrix = topDownKnapsack(wt,val,capacity)
df = DataFrame(matrix)
print(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; ans : 220&lt;/p&gt;

&lt;p&gt;Table formed :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50
0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
1   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60
2   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  60  100
3   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  100 100 100 100 100 100 100 100 100 100 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160 160
4   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  100 100 100 100 100 100 100 100 100 100 160 160 160 160 160 160 160 160 160 160 180 180 180 180 180 180 180 180 180 180 220
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#unbounded-knapsack-repetition-of-items-allowed"&gt;
  &lt;/a&gt;
  Unbounded Knapsack (Repetition of items allowed)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def recursiveUnboundedKnapsack(val, wt, W, n):
    """
    W = capacity,
    n = index
    """
    if n == 0 or W == 0:
        return 0
    elif wt[n - 1] &amp;gt; W:
        return recursiveUnboundedKnapsack(val, wt, W, n-1)
    else:
        return max(
            val[n - 1] + recursiveUnboundedKnapsack(val, wt, W - wt[n - 1], n),
            recursiveUnboundedKnapsack(val, wt, W, n-1),
        )
print(recursiveUnboundedKnapsack(val, wt, capacity, len(wt)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 300&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def unboundedKnapsackDp(val, wt, W, n):
    """
    W = capacity,
    n = index
    """
    dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]

    for i in range(n + 1):
        for j in range(W + 1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif wt[i - 1] &amp;gt; j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = max(val[i - 1] + dp[i][j - wt[i - 1]], dp[i - 1][j])
    return dp

print("ans :",unboundedKnapsackDp(val, wt, capacity, len(wt))[len(wt)][capacity])

# to see dp table
from pandas import *
matrix = unboundedKnapsackDp(val, wt, capacity, len(wt))
df = DataFrame(matrix)
print(df)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; ans : 300&lt;br&gt;
Table formed :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50
0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
1   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  120 120 120 120 120 120 120 120 120 120 180 180 180 180 180 180 180 180 180 180 240 240 240 240 240 240 240 240 240 240 300
2   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  120 120 120 120 120 120 120 120 120 120 180 180 180 180 180 180 180 180 180 180 240 240 240 240 240 240 240 240 240 240 300
3   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  120 120 120 120 120 120 120 120 120 120 180 180 180 180 180 180 180 180 180 180 240 240 240 240 240 240 240 240 240 240 300
4   0   0   0   0   0   0   0   0   0   0   60  60  60  60  60  60  60  60  60  60  120 120 120 120 120 120 120 120 120 120 180 180 180 180 180 180 180 180 180 180 240 240 240 240 240 240 240 240 240 240 300

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;## fractional knapsack problem (greedy  approach)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class item(object):
    """ class to store item """
    def __init__(self,wt,val,index):
        self.wt = wt
        self.val = val
        self.index = index
        self.cost = val // wt
    def __lt__(self, other):
        return self.cost &amp;lt; other.cost

class build_item_list:
    """ class to build item list """
    def __init__(self,wt_list,val_list):
        self.wt_list = wt_list
        self.val_list = val_list
    def build(self):
        item_list = []
        for index in range(len(self.wt_list)):
            item_list.append(item(self.wt_list[index],self.val_list[index],index))
        return item_list

class FractionalKnapSack(object):
    """ knapsack sol class """
    def __init__(self,wt_list,val_list,capacity):
        # Builder design pattern
        self.item_list = build_item_list(wt_list,val_list).build()
        self.capacity = capacity
        self.totalValue = 0
        self.totalValue = self.getMaxValue()   

    def getMaxValue(self):
        """ function return max val a knapsack can hold"""
        self.item_list.sort(reverse=True)
        for i in self.item_list:
            curWt = int(i.wt)
            curVal = int(i.val)
            if self.capacity - curWt &amp;gt;= 0:
                self.capacity -= curWt
                self.totalValue += curVal
            else:
                fraction = self.capacity / curWt
                self.totalValue += curVal * fraction
                self.capacity = int(self.capacity - (curWt * fraction))
                break
        return self.totalValue

    def __repr__(self):
        return f" Total value of knapsack is {self.totalValue}"

    def __str__(self):
        return f" Total value of knapsack is {self.totalValue}"

print(FractionalKnapSack(wt,val,capacity))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; Total value of knapsack is 240.0&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>python</category>
      <category>programming</category>
      <category>showdev</category>
    </item>
    <item>
      <title>A beginner’s journey into software development in Nigeria.</title>
      <author>Opeyemi Stephen</author>
      <pubDate>Thu, 29 Apr 2021 07:36:32 +0000</pubDate>
      <link>https://dev.to/resourcefulmind/a-beginner-s-journey-into-software-development-in-nigeria-86b</link>
      <guid>https://dev.to/resourcefulmind/a-beginner-s-journey-into-software-development-in-nigeria-86b</guid>
      <description>&lt;p&gt;No one really writes about the pain involved in learning to code in Nigeria and I don’t know why.&lt;/p&gt;

&lt;p&gt;First of all, peep the the cover picture on this post, it represents an art-work for a song by a music artiste in Nigeria titled “Thunder Fire You” by Ric Hassani. Literal meaning...may thunder strike a person dead. &lt;/p&gt;

&lt;p&gt;It was sung as a song for a heartbroken man but I put that up there because there’s a lot of forces designed to frustrate the average young Nigerian mind by the Government.&lt;/p&gt;

&lt;p&gt;I started my developer journey, no prior computer science degree, delving into a new career because well, there are simply not enough jobs. I said what I said.&lt;/p&gt;

&lt;p&gt;And now, it has only gotten worse...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Laptop prices have doubled and are now tripling due to the weak strength of the Naira against the dollar. Some developer advocates like Hack Sultan, Prosper Otemuyiwa and Adora Nwodo have been doing their best to help the Nigerian community but for how long? Trust the government to try and take the plaudits when a Nigerian dev builds a world class product tho.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data!!!! A successful developer needs to learn to know how to ask the right questions on Google and StackOverflow yeah? &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But you see,in order to use Google, you actually have to be connected to the internet...Now the average Nigerian earns 2000 naira daily and the least internet plans go for half that price!&lt;br&gt;
Funny story? Many people do not even earn that...tell me again how it’s supposed to be easy to just be in the “zone” to code? &lt;/p&gt;

&lt;p&gt;The way I see it, to use YouTube and the plenty resources available online for self-study, you’ve got to have access to the internet and how are you supposed to cope with spending at least 12-20 thousand naira on data monthly when you haven’t even started getting paid? And to plunge you into further depression, you’re given an option of “borrowing” data...sighs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now to the most annoying part...EPILEPTIC...nah scratch that...NO POWER SUPPLY!!! Paint this scenario in your head...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Young and defiant newbie dev who is trying their best to scale through, has been able to get a laptop, buy/borrow data and joined a free boot camp or tried to do some self study. This young developer wants to maximize their time and draws up a study schedule so they can also get their tasks and assignments submitted early enough. &lt;br&gt;
There’s a problem tho...”PHCN”(the corrupt organization in charge of supplying power) only gives them electricity 3 hours(phased irregularly) daily and coupled with that, they still have to “share” light in their street because the transformer is not powerful enough to supply the 12 streets using it.&lt;br&gt;
Their street uses the epileptic power for two days and there’s a total blackout for the third day. &lt;br&gt;
In total they have +/- 6 hours of a possible 72hours to power their devices, get studies in and also do their assignments. Then you find them at Bet9ja shops (sports betting kiosks) trying to charge and learning to code with street kings(agbero and urchins) shouting in the background trying to stake bets on virtual football games.&lt;/p&gt;

&lt;p&gt;That is just a peek into the life of most newbie Nigerian developers. I just thought you should know. I deliberately excluded some parts because it gets ugly as you go. Feel free to add your experiences and draw strength from each other. Selah.&lt;/p&gt;

&lt;p&gt;Despite all this, we still do our best yeah? But think of the talents being wasted because they do not have the psychological capacity to cope with these kinds of problems...just think about it for a minute?&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Technological Advancements in Aerospace Engineering.</title>
      <author>A.RAJSHEKAR</author>
      <pubDate>Thu, 29 Apr 2021 07:25:35 +0000</pubDate>
      <link>https://dev.to/raj100100/technological-advancements-in-aerospace-engineering-4a9l</link>
      <guid>https://dev.to/raj100100/technological-advancements-in-aerospace-engineering-4a9l</guid>
      <description>&lt;p&gt;"Over the past few years, the aerospace industry has seen countless innovations coming to fruition with many more on the horizon. Here are six emerging aerospace technologies everyone would want to know about":&lt;br&gt;
  1.ZERO-FUEL AIRCRAFT&lt;br&gt;
     Zero Fuel aircraft use photovoltaic panels to utilize solar energy to provide necessary thrust to the engines.&lt;br&gt;
  2.STRUCTURAL HEALTH MONITORING&lt;br&gt;
     Advanced health management systems such as monitoring, prognostics and self healing are being developed to enhance our ability to analyze and determine the status of an aircraft. This technology has already been used by Boeing and airbus and was previously used onboard an air frame jet that crashed in 2009 to notify headquarters of electrical problems.&lt;br&gt;
  3.ADVANCED SPACE PROPULSION TECHNOLOGIES&lt;br&gt;
   A new plasma based rocket propulsion technology known as the VASIMR ROCKET(variable specific impulse magneto plasma rocket)has been in development by NASA along with department of energy.&lt;br&gt;
 4.ADVANCED MATERIALS&lt;br&gt;
   Advances in material science have hinted toward huge benefits for aircraft manufacturers. New materials like graphene and carbon nanotubes are helping to make airplane wings more efficient by reducing weight and fuel consumption.&lt;br&gt;
 5.SMART AUTOMATION AND BLOCKCHAIN&lt;br&gt;
   Manufacturing aircraft parts is a highly specialized and complicated process. However, new technologies and processes are making it faster and simpler .Aerospace and defense companies are also staring to explore the digital realm, as well. Technologies such as blockchain are helping to improve transparency and automate transactions among supply chain partners.&lt;br&gt;
 6.3D PRINTING&lt;br&gt;
   Companies that have had trouble keeping up with production deadlines have turned to 3D printing as solution in recent years. Space parts that need to be replaced on a regular basis, such as door handles, will be the first targets. Next, the tools that are used to create aircraft parts will also be printed. This will cut back on time, cost and weight.&lt;br&gt;
THE FUTURE IS HERE:&lt;br&gt;
 Innovative technologies and manufacturing processes are being developed on a seemingly constant basis and small to medium sized manufacturers are reaping the benefits as aerospace companies look for niche suppliers to help expand their supply chain.&lt;br&gt;
  More and more joint ventures and outsourcing are expected to occur in the next five to ten years as these emerging markets start to compete on a global scale. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 React Practices To Make Your Code Better.</title>
      <author>Shubham Sananse</author>
      <pubDate>Thu, 29 Apr 2021 07:08:16 +0000</pubDate>
      <link>https://dev.to/shubham_sns/10-react-practices-to-make-your-code-better-5egj</link>
      <guid>https://dev.to/shubham_sns/10-react-practices-to-make-your-code-better-5egj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-functional-components-gt-class-components"&gt;
  &lt;/a&gt;
  1. Functional Components &amp;gt; Class Components
&lt;/h2&gt;

&lt;p&gt;Functional components have much simple syntax than class components and more readable.&lt;/p&gt;

&lt;p&gt;As of now, you can't create error boundaries with class components but if you want but you can also use packages like &lt;a href="https://www.npmjs.com/package/react-error-boundary/v/3.0.2"&gt;react-error-boundary&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 👎 Class components are verbose&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 👍 Functional components are easier to read and maintain&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-keep-your-styling-consistent"&gt;
  &lt;/a&gt;
  2. Keep your styling consistent
&lt;/h2&gt;

&lt;p&gt;Using prettier and Eslint will save you a lot of time. another thing that you can do is to fix how your components will differ from your methods or helper functions.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
one thing that you can do is to use &lt;strong&gt;function declaration&lt;/strong&gt; for your components and &lt;strong&gt;arrow functions&lt;/strong&gt; with other methods which are used inside components. easy search and reads.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-dont-use-the-default-export"&gt;
  &lt;/a&gt;
  3. Don't use the default export
&lt;/h2&gt;

&lt;p&gt;With named exports, you don't just get the editor to autocomplete but also consistent naming for your components and variables. &lt;br&gt;
I personally don't like to use &lt;code&gt;export function add(){}&lt;/code&gt; and would rather prefer &lt;code&gt;export {add}&lt;/code&gt; cause in any file I can just go to the end and know which functions are exported rather than searching for &lt;code&gt;export&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 👎  &lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// -----------------------//&lt;/span&gt;

&lt;span class="c1"&gt;// 👍&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;With lazy-loaded components there is no escape, you need to &lt;code&gt;export default&lt;/code&gt; them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#4-early-exit-with-raw-return-endraw-keyword"&gt;
  &lt;/a&gt;
  4. Early exit with &lt;code&gt;return&lt;/code&gt; keyword
&lt;/h2&gt;

&lt;p&gt;early exits makes your code look much cleaner than using ternary operators or if-else.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 👎  &lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;///&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CreatePost&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostsList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// -----------------------//&lt;/span&gt;

&lt;span class="c1"&gt;// 👍&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;///&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CreatePost&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostsList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-avoid-nested-ternary-operators"&gt;
  &lt;/a&gt;
  5. Avoid Nested Ternary Operators
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 👎 Nested ternaries are hard to read &lt;/span&gt;
&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostsList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CreatePost&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// 👍 Place them inside a component on their own&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostsPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostsList&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CreatePost&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;there's an Eslint rule for this named as &lt;code&gt;no-nested-ternary&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#6-destructure-props"&gt;
  &lt;/a&gt;
  6. Destructure props
&lt;/h2&gt;

&lt;p&gt;With all props destructured at the top, you always know which props this component is using and it also makes your code cleaner. there's no need to write &lt;code&gt;props&lt;/code&gt; everywhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 👎 Don't repeat props everywhere in your component&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 👍 Destructure and use the values directly&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-dont-create-components-inside-component"&gt;
  &lt;/a&gt;
  7. Don't create Components inside Component
&lt;/h2&gt;

&lt;p&gt;This is a very common mistake beginners make. whenever a component re-renders everything inside the component is recreated so if you create a component inside another component every time the parent component re-renders the child component will unnecessary unmount and then remount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// run this code and check console logs&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 👎 Avoid doing this&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am mounted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am unmounted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-you-might-not-need-state-management-library"&gt;
  &lt;/a&gt;
  8. You might not need State Management Library
&lt;/h2&gt;

&lt;p&gt;React provides state management API like &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt;. You can also use context API for making a piece of state accessible to multiple nested components. consider using redux, recoil, or any other state management library only when your app grows complex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-use-absolute-paths"&gt;
  &lt;/a&gt;
  9. Use Absolute Paths
&lt;/h2&gt;

&lt;p&gt;With absolute paths, you will have to change less when you move files from one place to another, o it makes it easier to find out where everything is getting pulled from.&lt;br&gt;
you can create a &lt;code&gt;jsconfig.json&lt;/code&gt; file at the root of your folder and have an absolute path for each directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// jsconfig.json&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;compilerOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baseUrl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;paths&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/components/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;components/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/lib/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lib/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/styles/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styles/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/assets/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;assets/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/utils/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utils/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with jsconfig file in the root of your folder now you can import files like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 👎 Don't use relative paths&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../components/common/input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// 👍 Absolute ones don't change&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/common/input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-use-data-fetching-libraries"&gt;
  &lt;/a&gt;
  10. Use Data Fetching Libraries
&lt;/h2&gt;

&lt;p&gt;React applications do not come with an opinionated way of fetching or updating data from your components so developers end up building their own ways of fetching data.&lt;br&gt;&lt;br&gt;
With data fetching libraries like &lt;a href="https://react-query.tanstack.com/"&gt;react-query&lt;/a&gt;, you can cache, fetch, invalidate and mutate server state easily with very minimal code.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Detecting barcodes from the webcam</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 29 Apr 2021 06:57:42 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/detecting-barcodes-from-the-webcam-378o</link>
      <guid>https://dev.to/dailydevtips1/detecting-barcodes-from-the-webcam-378o</guid>
      <description>&lt;p&gt;Yesterday we had a look at the &lt;a href="https://daily-dev-tips.com/posts/javascript-native-barcode-detector-api/"&gt;barcode detector API&lt;/a&gt; using an image as our source.&lt;br&gt;
Today I'd like to explore how this works when we use a webcam as the input source.&lt;/p&gt;

&lt;p&gt;This will work a little bit differently from what we've done with the image since we need to loop the function that detects the barcodes.&lt;/p&gt;

&lt;p&gt;The end result will be this application that can scan unique barcodes and outputs them as a list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saeYNM9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619422447740/1KBsrxNtQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saeYNM9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619422447740/1KBsrxNtQ.gif" alt="JavaScript barcode detecting from webcam"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#detecting-barcodes-from-the-camera"&gt;
  &lt;/a&gt;
  Detecting barcodes from the camera
&lt;/h2&gt;

&lt;p&gt;First of all, let's start without &lt;code&gt;HTML&lt;/code&gt; structure which has nothing fancy going on, we just want a placeholder for our list items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"barcode-list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, we want to change the unload function to call an async function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Function code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want it like this since we want to wait for the video to be accepting and working.&lt;/p&gt;

&lt;p&gt;Let's start by defining some variables inside our detect function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;barcodeDetector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BarcodeDetector&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;barcode-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;itemsFound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mediaStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUserMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;facingMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;environment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create out barcodeDetector as we did with the image.&lt;br&gt;
Then we define what element our list is, and we make a variable array that can hold our codes that have been found.&lt;br&gt;
Then we create a new media device targeting the webcam.&lt;/p&gt;

&lt;p&gt;The next step is to output this webcam onto the screen, so the user has some visual feedback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mediaStream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;autoplay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we create a new element of the type of video and set the source to be the media stream we just created.&lt;br&gt;
We then add it before our list.&lt;/p&gt;

&lt;p&gt;This should now give us the webcam output on our screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7lR1HBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619422122998/nHUUX3yY4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7lR1HBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619422122998/nHUUX3yY4.png" alt="Adding webcam output to HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we need to have a function that can check for out barcodes.&lt;br&gt;
However, this function needs to keep running.&lt;/p&gt;

&lt;p&gt;So inside the detect function, we can have another function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do the detection&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderLoop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderLoop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make sure the render function is called at a certain rate, and call it initially.&lt;/p&gt;

&lt;p&gt;The render function itself is much like what we've done before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;barcodeDetector&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;barcodes&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;barcodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;barcode&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;itemsFound&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;barcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;itemsFound&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;barcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;barcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For each barcode we find, we add a new list item.&lt;/p&gt;

&lt;p&gt;You can try this code out on the following Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/jOyJOzr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h2&gt;

&lt;p&gt;As mentioned the API is still in progress being rolled out, as of Chrome 83 and Edge 82 we can use it.&lt;br&gt;
However, Firefox does not yet support it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XORWW6MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619340054375/52URFcbqB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XORWW6MF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619340054375/52URFcbqB.png" alt="CSS barcode detector support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>PHP Pagination with MySQL and Bootstrap Tutorial</title>
      <author>Dharmik Tank</author>
      <pubDate>Thu, 29 Apr 2021 06:53:52 +0000</pubDate>
      <link>https://dev.to/dharmik_tank/php-pagination-with-mysql-and-bootstrap-tutorial-2nii</link>
      <guid>https://dev.to/dharmik_tank/php-pagination-with-mysql-and-bootstrap-tutorial-2nii</guid>
      <description>&lt;p&gt;Today, I will learn you how to create pagination in php. We will show example of php pagination with mysql and bootstrap. you can easy to create pagination with mysql and bootstrap in php. We will make dynamic limit in pagination with the session, create prev, next feature, active class in pagination to display results fetched from MySQL database.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;What is Pagination?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Pagination is a way of showing the data on multiple pages rather than putting them to a single page. Pagination helps to divide the records onto several pages, which makes the data more readable and understandable.&lt;/p&gt;

&lt;p&gt;Pagination is a common task for PHP developers. MySQL helps the developer to create pagination by using LIMIT clause, which takes two arguments. The first argument as OFFSET and the second argument is number of records that will return from database.&lt;/p&gt;

&lt;p&gt;more ...&lt;br&gt;
&lt;a href="https://itwebtuts.blogspot.com/2021/04/php-pagination-with-mysql-and-bootstrap.html"&gt;https://itwebtuts.blogspot.com/2021/04/php-pagination-with-mysql-and-bootstrap.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>mysql</category>
    </item>
    <item>
      <title>Stop writing CSS vendor prefixes manually</title>
      <author>🅰️ GEEK</author>
      <pubDate>Thu, 29 Apr 2021 06:53:30 +0000</pubDate>
      <link>https://dev.to/ageekdev/stop-writing-css-vendor-prefixes-manually-4jpk</link>
      <guid>https://dev.to/ageekdev/stop-writing-css-vendor-prefixes-manually-4jpk</guid>
      <description>&lt;p&gt;Major browser vendors implement CSS features at their own speed, and they have been using vendor prefixes to add experimental or nonstandard CSS properties. Following are a list of major prefixes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-webkit-&lt;/code&gt;: Chrome, Safari, WebKit based browsers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-ms-&lt;/code&gt;: Internet Explorer, Microsoft Edge&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-o-&lt;/code&gt;: pre-WebKit versions of Opera&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-moz-&lt;/code&gt;: Firefox
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-ms-border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-o-border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In theory, these prefixed properties should not be used in production. But in reality it doesn't work as expected, here's why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS is forgivable, unsupported properties will be ignored so it doesn't hurt to put new features in production.&lt;/li&gt;
&lt;li&gt;It takes forever to wait until those prefixed properties to be standardized, developers just ignore the experimental nature and eager to try but don't care to remove stale ones.&lt;/li&gt;
&lt;li&gt;CSS is not practically polyfilled, this is one way to support old browsers.&lt;/li&gt;
&lt;li&gt;It's better safe than sorry, some developers just recklessly prefix unnecessary properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vendor prefixing is one way to extend browser support to the point those prefixed properties implemented but not before any of that.&lt;/p&gt;

&lt;p&gt;Modern CSS has moved away from vendor prefixing in favor of &lt;strong&gt;feature queries&lt;/strong&gt; where you can style conditionally and provide fallback styles for something unsupported.&lt;/p&gt;

&lt;p&gt;If you're still writing vendor prefixes then you should consider setup &lt;strong&gt;automatic prefixing&lt;/strong&gt; because &lt;strong&gt;manual vendor prefixing doesn't scale well&lt;/strong&gt;. It's painful, tedious and error-prone for human eyes to keep track of which properties need to be prefixed for which browser versions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feature-queries"&gt;
  &lt;/a&gt;
  Feature queries
&lt;/h2&gt;

&lt;p&gt;The CSS &lt;code&gt;@supports&lt;/code&gt; at-rule lets you specify declarations that depend on a browser's support for one or more specific CSS features, known as feature queries.&lt;/p&gt;

&lt;p&gt;Feature queries associate a block of statements with a supports condition. The supports condition consists of one or more name-value pairs combined by conjunctions (&lt;code&gt;and&lt;/code&gt;), disjunctions (&lt;code&gt;or&lt;/code&gt;), and/or negations (&lt;code&gt;not&lt;/code&gt;). Precedence of operators can be defined with parentheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-grid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;-moz-transform-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the direction major browser vendors are pushing forward, it works great when providing a mean to write fallback styles when something not supported, but keep in mind following limitations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;@support&lt;/code&gt; at-rule will only work on browsers that support &lt;code&gt;@supports&lt;/code&gt;. Don't forget to write fallback code outside of feature queries.&lt;/li&gt;
&lt;li&gt;You still need to keep track which features you need to check manually, &lt;a href="https://caniuse.com/"&gt;caniuse.com&lt;/a&gt; can help with that. Obviously it's less mundane than writing prefixes and less worried about new browsers in market as long as they support feature queries.&lt;/li&gt;
&lt;li&gt;Browsers that do not support CSS Grid, which also doesn’t support feature queries.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#automatic-prefixing"&gt;
  &lt;/a&gt;
  Automatic prefixing
&lt;/h2&gt;

&lt;p&gt;Consider vendor prefixing is something can't be removed completely even when using &lt;strong&gt;feature queries&lt;/strong&gt; because of fears of missing out unchecked features. On the rise of CSS (pre|post)-processors, vendor prefixing can be done automatically. For this solution to work, you'll need following tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A tool to define target browsers&lt;/strong&gt;. &lt;a href="https://github.com/browserslist/browserslist"&gt;Browserslist&lt;/a&gt; is the best you can find, it will find target browsers automatically when you specify requirements in &lt;code&gt;.browserslistrc&lt;/code&gt; as follow:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# supported browsers
defaults
not IE 11
maintained node versions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A tool to prefix automatically based on above target browsers&lt;/strong&gt;. &lt;a href="https://github.com/postcss/autoprefixer"&gt;Autoprefixer&lt;/a&gt; is the best of its kind, a &lt;a href="https://github.com/postcss/postcss"&gt;PostCSS&lt;/a&gt; plugin uses target browsers from &lt;a href="https://github.com/browserslist/browserslist"&gt;browserslist&lt;/a&gt; and add prefixes based on &lt;a href="https://caniuse.com"&gt;caniuse.com&lt;/a&gt; data. Here's an example setup with Gulp:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoprefixer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;autoprefixer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sourcemaps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gulp-sourcemaps&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gulp-postcss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/*.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourcemaps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;()]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourcemaps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beside auto prefixing, &lt;a href="https://github.com/postcss/postcss"&gt;PostCSS&lt;/a&gt; can help with polyfills but very limited when new CSS features require JavaScript implementation in client side.&lt;/p&gt;




&lt;p&gt;This article was originally published at &lt;a href="https://ageek.dev"&gt;ageek.dev&lt;/a&gt; as part of online book &lt;a href="https://ageek.dev/css"&gt;Advanced CSS&lt;/a&gt; which covers some topics &lt;strong&gt;beyond the basics&lt;/strong&gt; that might bring your CSS skill to the next level.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Build A REST API With HarperDB and FastifyJS</title>
      <author>The Code Lounge</author>
      <pubDate>Thu, 29 Apr 2021 06:34:53 +0000</pubDate>
      <link>https://dev.to/codeloungedev/build-a-rest-api-with-harperdb-and-fastifyjs-2pkf</link>
      <guid>https://dev.to/codeloungedev/build-a-rest-api-with-harperdb-and-fastifyjs-2pkf</guid>
      <description>&lt;p&gt;&lt;a href="https://codelounge.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZGLRauQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617198357271/uoNdlXnwM.png" alt="cover (1).png"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This article will teach you how to use Node.js, Fastify and HarperDB to build a course management system. This application will help you track the courses you are doing and the courses you plan to do.&lt;/p&gt;

&lt;p&gt;You will use the following technologies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;HarperDB&lt;/li&gt;
&lt;li&gt;Fastify&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;When it comes to Node.js and Fastify, people are familiar with these technologies. However, when it comes to databases, there is a new kid on the block!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RzETrtCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harperdb.io/app/uploads/2020/08/logo_open_graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RzETrtCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harperdb.io/app/uploads/2020/08/logo_open_graph.png" alt="harperdb-logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently, I took a break from the databases I usually use to play around with HarperDB. &lt;a href="https://studio.harperdb.io/sign-up?utm_source=catalin"&gt;HarperDB&lt;/a&gt; is a distributed database with NoSQL and SQL capabilities. The &lt;strong&gt;most fascinating&lt;/strong&gt; thing about HarperDB is that you perform all the CRUD database operations using &lt;strong&gt;only&lt;/strong&gt; one endpoint.&lt;/p&gt;

&lt;p&gt;The most notable features of HarperDB are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using a single endpoint&lt;/li&gt;
&lt;li&gt;execute SQL queries on JSON data&lt;/li&gt;
&lt;li&gt;it removes the need for an ORM by returning the results as JSON arrays&lt;/li&gt;
&lt;li&gt;the ability to insert data via JSON, CSV or using SQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Does not that look interesting?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;Before going further, there are some prerequisites you should be aware of. The tutorial assumes basic knowledge of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js and FastifyJS&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Knowing how to use a package manager like npm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, you should have a Node version of &lt;code&gt;12.xx&lt;/code&gt; or higher for HarperDB to run. Lastly, you need to have a HarperDB account, which you can create &lt;a href="https://studio.harperdb.io/sign-up?utm_source=catalin"&gt;here&lt;/a&gt;. Do not worry; it's &lt;strong&gt;free&lt;/strong&gt;!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#set-up-the-folder-structure"&gt;
  &lt;/a&gt;
  Set up the folder structure
&lt;/h1&gt;

&lt;p&gt;The first step of the tutorial is to set up the folder structure of the application. Create a new folder called &lt;code&gt;course-management&lt;/code&gt; and open it. You can do it with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir course-management
cd course-management
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The basic folder structure is ready. Of course, when you build each part of the application, you'll create more folders.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install dependencies
&lt;/h1&gt;

&lt;p&gt;At this point, you should be in the &lt;code&gt;course-management&lt;/code&gt; folder. Let's initialise the project with the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-y&lt;/code&gt; flag generates the "package.json" automatically without you having to answer the usual questions about the project name, description and so on. If you open "package.json", you can see that all fields are autocompleted.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-the-required-packages"&gt;
  &lt;/a&gt;
  Install the required packages
&lt;/h3&gt;

&lt;p&gt;The next step is to install the packages needed to build the application. You can install multiple packages in one line. Run the command below in your terminal:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i fastify harperive dotenv --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The command installs three packages/dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fastify&lt;/strong&gt; - FastifyJS is a new web framework, and it claims to be the fastest web framework in town.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Harperive&lt;/strong&gt; - It's the Node.js driver for HarperDB.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dotenv&lt;/strong&gt; - A module that loads environment variables from an &lt;code&gt;.env&lt;/code&gt; file to &lt;code&gt;process.env&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#configure-the-fastify-server"&gt;
  &lt;/a&gt;
  Configure the Fastify server
&lt;/h3&gt;

&lt;p&gt;Before proceeding to configure the server, you need to create a few files. The first step is to create the following files:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch app.js
touch .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;app.js&lt;/code&gt; file contains the server configuration. On the other hand, the &lt;code&gt;.env&lt;/code&gt; file stores your environment variables.&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;app.js&lt;/code&gt; file and write the following code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;
    &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Your server is listening on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; 🧨`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With the first line, you import the Fastify package and store it in a constant named &lt;code&gt;app&lt;/code&gt;. In the same line, you also enable the &lt;code&gt;logger&lt;/code&gt;. After that, you import &lt;code&gt;dotenv&lt;/code&gt; so you can use environment variables.&lt;/p&gt;

&lt;p&gt;Lastly, you create a GET round that responds with JSON, and then you listen on the port specified in the &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Moving on, open the &lt;code&gt;.env&lt;/code&gt; file and add the following lines:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT=3000
INSTANCE_URL=
INSTANCE_USERNAME=
INSTANCE_PASSWORD=
INSTANCE_SCHEMA= 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The fields starting with &lt;strong&gt;INSTANCE&lt;/strong&gt; will hold information about the database. Now, it's time to create a HarperDB account if you do not have one already.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#create-and-configure-the-database"&gt;
  &lt;/a&gt;
  Create and configure the database
&lt;/h3&gt;

&lt;p&gt;First of all, login into the &lt;a href="https://studio.harperdb.io/?utm_source=catalin"&gt;HarperDB Studio&lt;/a&gt;. After you log in, click on the &lt;strong&gt;+&lt;/strong&gt; button, which creates a new HarperDB Cloud Instance. Figure 1 illustrates that!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Va9IK8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619069494007/FJg8UJTPI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Va9IK8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619069494007/FJg8UJTPI.png" alt="HarperDB Studio Screenshot"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After that, you will be asked to choose either a "New HarperDB Cloud Instance" or "Register User-Installed Instance", as shown in figure 2.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--px965XUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619069855625/u_vpb65hJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--px965XUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619069855625/u_vpb65hJ.png" alt="HarperDB Studio Instance Types"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Click on the button saying "&lt;strong&gt;Create HarperDB Cloud Instance&lt;/strong&gt;". As a result, you create a database instance in their cloud rather than hosting it yourself. After that, you need to enter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the name of the instance&lt;/li&gt;
&lt;li&gt;a username&lt;/li&gt;
&lt;li&gt;a password&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In figure 3 below, you can see my instance information.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1tefL1MD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619070065407/rRjVtpwVs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1tefL1MD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619070065407/rRjVtpwVs.png" alt="HarperDB Instance Information"&gt;&lt;/a&gt;&lt;br&gt;
Figure 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step is to choose your &lt;strong&gt;instance specifications&lt;/strong&gt;. For this tutorial, I advise you to choose the free options. You get the following specs for free:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0.5GB RAM&lt;/li&gt;
&lt;li&gt;1GB of storage and 100 IOPS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figure 4, below, illustrates that! However, if you plan to use the DB heavily, I recommend powering up the instance and choose better specifications!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d8WOPG5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619070380025/53sEO3jRb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d8WOPG5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619070380025/53sEO3jRb.png" alt="HarperDB Instance Specifications"&gt;&lt;/a&gt;&lt;br&gt;
Figure 4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last step is to confirm the instance details and then wait for the instance to spin up. After the instance is set up and initialised, click on the instance. For example, you can see my newly-created instance in figure 5 below.&lt;/p&gt;

&lt;p&gt;If you are accessing the instance for the first time, you might be prompted to enter the username and password you set previously.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tlWpMndx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619070980085/fDjcfdR4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tlWpMndx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619070980085/fDjcfdR4d.png" alt="HarperDB Dashboard"&gt;&lt;/a&gt;&lt;br&gt;
Figure 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your instance does not have any schemas or tables at the moment. As a result, you need to create a schema first! You can see that I chose &lt;code&gt;mydb&lt;/code&gt; as the name for my schema (figure 6). However, you can use any other name for your schema.&lt;/p&gt;

&lt;p&gt;Once you chose a name for your schema, click on the green checkmark to save it!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3DKmibn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619071030458/3U3sZZL7q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3DKmibn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619071030458/3U3sZZL7q.png" alt="HarperDB Create Database Schema"&gt;&lt;/a&gt;&lt;br&gt;
Figure 6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lastly, you need to create tables. For the moment, you'll set up only one table called &lt;code&gt;courses&lt;/code&gt;. Enter the name "courses" and provide a &lt;code&gt;hash_attribute&lt;/code&gt; name as well. The "hash attribute" is used to uniquely identify each record. In simpler words, the "hash attribute" is the ID, which is unique for each record. Now, click on the green checkmark to save it. As shown in figure 7.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBBKg6en--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619102826360/vww3aXtv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lBBKg6en--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619102826360/vww3aXtv5.png" alt="HarperDB Create Table"&gt;&lt;/a&gt;&lt;br&gt;
Figure 7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Now, you are ready to use the database in the Node.js application!&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#set-and-config-harperdb-in-the-app"&gt;
  &lt;/a&gt;
  Set and config HarperDB in the app
&lt;/h3&gt;

&lt;p&gt;Go into the &lt;code&gt;.env&lt;/code&gt; file and add the following lines:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTANCE_URL=https://app-tutorial.harperdbcloud.com/
INSTANCE_USERNAME=admin
INSTANCE_PASSWORD=password
INSTANCE_SCHEMA=mydb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Of course, you need to change those details with yours! The above information is fictive, so it will not work if you try!&lt;/p&gt;

&lt;p&gt;Save the file, and let's move on! Now create two folders and a database file. You can do so by following these commands:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir src
mkdir src/db
touch src/db/db_config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With the above commands, you create the "db" folder inside "src". Also, you create the file "db_config.js" that stores the configuration for the database.&lt;/p&gt;

&lt;p&gt;Open the newly-created file &lt;code&gt;db_config.js&lt;/code&gt; and write the following code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const harperive = require('harperive').Client;

const DB_CONFIG = {
    harperHost: process.env.INSTANCE_URL,
    username: process.env.INSTANCE_USERNAME,
    password: process.env.INSTANCE_PASSWORD,
    schema: process.env.INSTANCE_SCHEMA
};

const client = new harperive(DB_CONFIG);

module.exports = client;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With the first line, you import the Node.js driver for HarperDB. After that, you create the database configuration with the details stored in the &lt;code&gt;.env&lt;/code&gt; file. Lastly, you create a new client and export it.&lt;/p&gt;

&lt;p&gt;You'll use the client later, in the controller file! For now, let's move to the routes and controllers.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#configure-app-endpoints"&gt;
  &lt;/a&gt;
  Configure app endpoints
&lt;/h3&gt;

&lt;p&gt;The first step is to create two new folders in the &lt;code&gt;src&lt;/code&gt; folder. Create them as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir src/controllers
mkdir src/routes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After that, you need to create two new JavaScript files in the newly-created folders. Create the files &lt;code&gt;course.js&lt;/code&gt; and &lt;code&gt;courseController.js&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch src/routes/course.js
touch src/controllers/courseController.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You'll start by creating the routes. In this scenario, you can make use of the FastifyJS plugin architecture. So open the &lt;code&gt;course.js&lt;/code&gt; file from the "routes" folder, and write the following code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;courseController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/courseController&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There are three things happening:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You import the controllers used for routes.&lt;/li&gt;
&lt;li&gt;You create a &lt;code&gt;routes&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;You export the newly-created &lt;code&gt;routes&lt;/code&gt; function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this method - &lt;code&gt;routes&lt;/code&gt; - you configure the endpoints of your application. For each route, you specify the &lt;strong&gt;HTTP method&lt;/strong&gt;, the &lt;strong&gt;URL&lt;/strong&gt; and the &lt;strong&gt;handler&lt;/strong&gt; at minimum. &lt;em&gt;However, there are many other parameters. You can see the complete list &lt;a href="https://www.fastify.io/docs/latest/Routes/#options"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With that being said, let's build the first endpoint that returns all the courses when accessed. You can do so by calling the &lt;code&gt;route&lt;/code&gt; method on the &lt;code&gt;app&lt;/code&gt;, as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;courseController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/courseController&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Get all courses&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/courses&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;courseController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCourses&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You build all the other routes/endpoints in a similar fashion. The only things that change are the method, URL and handler. &lt;/p&gt;

&lt;p&gt;In the Gist below, you can see all the endpoints. You have an endpoint for each CRUD operation. Application users can see all the courses, a specific course, add new courses, delete and edit existing courses.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Each route/endpoint has a specific controller, as you can see. At the moment, they are just placeholders because there are no controllers. That means, if you try to access the routes they won't work! But that changes in the next step because you'll build the application logic now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One more thing before going further.&lt;/strong&gt; Go to the &lt;code&gt;app.js&lt;/code&gt; in the root folder, and add the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.register(require('./src/routes/course'));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The purpose of that line is to make the routes available in your application. If you do not add this line, your routes will not work.&lt;/p&gt;

&lt;p&gt;The final version of &lt;code&gt;app.js&lt;/code&gt; should look as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#build-application-logic-with-harperdb"&gt;
  &lt;/a&gt;
  Build application logic with HarperDB
&lt;/h3&gt;

&lt;p&gt;The application logic defines what happens when a user makes a request to the routes specified in the previous section.&lt;/p&gt;

&lt;p&gt;As an example, when someone accesses the route &lt;code&gt;/courses&lt;/code&gt;, they should see all the courses from the database. As a result, let's start with that route.&lt;/p&gt;

&lt;p&gt;The code for all routes will be in &lt;code&gt;courseController.js&lt;/code&gt;. Thus, open the &lt;code&gt;courseController.js&lt;/code&gt; file and import the "Harperive" client at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../db/db_config&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this where the fun begins. To portray the capabilities of HarperDB, you'll use both SQL and NoSQL operations to manipulate data.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-the-get-route"&gt;
  &lt;/a&gt;
  Build the GET route
&lt;/h4&gt;

&lt;p&gt;In the same file, add the following code after importing the database client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCourses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allCourses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SELECT * FROM mydb.courses&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;allCourses&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getCourses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the HarperDB Node.js driver allows you to run SQL queries on your database. The above query selects and returns all the courses from the database.&lt;/p&gt;

&lt;p&gt;After that, you use the &lt;code&gt;response&lt;/code&gt; object to send the data to the client. If you run the application and try to access the &lt;code&gt;/courses&lt;/code&gt; route, you won't get any data because the database is empty.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DodEZXkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619432980903/355xCIdC7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DodEZXkY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619432980903/355xCIdC7.png" alt="VS Code Thunder REST Client "&gt;&lt;/a&gt;&lt;br&gt;
Figure 8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Figure 8 illustrates a successful request. You can see that the "data" array is empty because the database is empty. However, we'll repeat the request once there is data in the database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-the-post-route"&gt;
  &lt;/a&gt;
  Build the POST route
&lt;/h4&gt;

&lt;p&gt;The next step is to build the POST route so you can add data into your database. In this case, we'll use a NoSQL operation. Write the following code after the &lt;code&gt;getCourses&lt;/code&gt; constant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const addCourse = async (req, res) =&amp;gt; {
    const allProperties = Object.keys(req.body).length;

    if (allProperties !== 4) {
        res.code(400).send({ 
            error: 'Some properties are missing! Add the name, description, author and link!' 
        });

        return;
    }

    try {
        const newCourse = await client.insert({
            table: 'courses',
            records: [
                {
                    name: req.body.name,
                    description: req.body.description,
                    author: req.body.author,
                    link: req.body.link
                }
            ]
        });

        res.send({ newCourse });
    } catch (error) {
        res.send({ error });
    }
};

module.exports = {
    getCourses,
    addCourse,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, the part before the &lt;code&gt;try catch&lt;/code&gt; block makes sure the user provides all the fields. If the user tries to add a course without specifying the &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;description&lt;/strong&gt;, &lt;strong&gt;author&lt;/strong&gt; or &lt;strong&gt;link&lt;/strong&gt;, it will return an error. The user must always provide all four fields.&lt;/p&gt;

&lt;p&gt;Then, in the &lt;code&gt;try catch&lt;/code&gt; block, you use the database client to insert the new course into the database. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You need to specify the table (which in this case is &lt;code&gt;courses&lt;/code&gt;) and then the &lt;code&gt;records&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;records&lt;/code&gt; field is an array of objects, which means you can enter multiple courses in one go. However, for now, one is enough.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Provided the insertion is &lt;strong&gt;successful&lt;/strong&gt;, it returns the newly-added course. You can see the route in action in figure 9 below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ikKjtxUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619433772117/RVIiKPZjQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ikKjtxUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619433772117/RVIiKPZjQ.png" alt="HarperDB POST Request"&gt;&lt;/a&gt;&lt;br&gt;
Figure 9&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The operation was successful, and the new course was added to the database! Figure 10 shows the course in the database!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQI-yLuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619433903120/h5-J9knLo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQI-yLuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619433903120/h5-J9knLo.png" alt="HarperDB.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 10&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#get-a-specific-course"&gt;
  &lt;/a&gt;
  GET a specific course
&lt;/h4&gt;

&lt;p&gt;Getting a specific course is similar to getting all courses, but with one addition. Now, you use a &lt;strong&gt;WHERE&lt;/strong&gt; clause to select a specific course.&lt;/p&gt;

&lt;p&gt;You pass the course "ID" in the URL, and then the SQL query matches that with a record from the database.&lt;/p&gt;

&lt;p&gt;But first of all, &lt;strong&gt;how do you get the ID?&lt;/strong&gt;, you might ask! There are two options (&lt;em&gt;you need courses in the database first&lt;/em&gt;):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can visit the route &lt;code&gt;http://localhost:3000/courses&lt;/code&gt; and get the ID of any course you want.&lt;/li&gt;
&lt;li&gt;Go to the HarperDB studio, click on the course, and you'll see all the details. At the top of the page, you'll see that it specifies which one is the ID - see figure 10 above.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getSpecificCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`SELECT * FROM mydb.courses WHERE id="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getCourses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;addCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;getSpecificCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, it returns the course. Figure 11 below illustrates what happens when you make a GET request to get a specific course!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DS8ogIEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619499724465/hns6ZUxHst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DS8ogIEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619499724465/hns6ZUxHst.png" alt="HarperDB Get A Specific Course"&gt;&lt;/a&gt;&lt;br&gt;
Figure 11&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#delete-a-specific-course"&gt;
  &lt;/a&gt;
  DELETE a specific course
&lt;/h4&gt;

&lt;p&gt;You can delete a course by providing the course ID in the URL. For example, if you make a &lt;code&gt;DELETE&lt;/code&gt; request to &lt;code&gt;http://localhost:3000/courses/0eb95456-255b-44da-b3df-b90671ef0908&lt;/code&gt;, you delete the course with the specified ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteCourse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`DELETE FROM mydb.courses WHERE id="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Course deleted!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;deleteCourse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getCourses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;addCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;getSpecificCourse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;deleteCourse&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the course is deleted, it sends a message confirming that and some more extra information. Figure 12 illustrates a "DELETE" request.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3hZFEFiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619500178504/ln5Hw2XGm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3hZFEFiq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619500178504/ln5Hw2XGm.png" alt="HarperDB Delete A Specific Course.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#build-the-put-route"&gt;
  &lt;/a&gt;
  Build the PUT route
&lt;/h4&gt;

&lt;p&gt;Lastly, this route allows you to update an existing course. All the code before the &lt;code&gt;try catch&lt;/code&gt; block makes sure the users only use the allowed fields - &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;description&lt;/em&gt;, &lt;em&gt;author&lt;/em&gt; and &lt;em&gt;link&lt;/em&gt;. If the user tries to update a field that does not exist, the server will respond with an error.&lt;/p&gt;

&lt;p&gt;To edit the course, you're using a NoSQL operation again. You call the &lt;code&gt;update&lt;/code&gt; method on the database client, then pass the table name &lt;em&gt;(courses - in this case)&lt;/em&gt; and the records you want to update.&lt;/p&gt;

&lt;p&gt;Also, it's essential to specify the &lt;code&gt;id&lt;/code&gt; in the records array. If you do not, the server does not know which record to update.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const editCourse = async (req, res) =&amp;gt; {
    const updates = Object.keys(req.body);
    const allowedUpdates = ['name', 'description', 'author', 'link'];
    const isValidOperation = updates.every((update) =&amp;gt; allowedUpdates.includes(update));

    if (!isValidOperation) {
        res.code(400).send({ error: 'Not a valid operation! '});

        return;
    }

    try {
        const updatedCourse = await client.update({
            table: 'courses',
            records: [
                {
                    id: req.params.id,
                    name: req.body.name,
                    description: req.body.description,
                    author: req.body.author,
                    link: req.body.link
                }
            ]
        });

        res.send({ updatedCourse });
    } catch (error) {
        res.send({ error });
    }
};

module.exports = {
    getCourses,
    addCourse,
    getSpecificCourse,
    deleteCourse,
    editCourse
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is an error, the server sends back the error. Otherwise, it returns the updated course. The figure below shows how to make a PUT requests and what happens it's successful!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewSuPVDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619500883422/glMjq-Qry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewSuPVDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619500883422/glMjq-Qry.png" alt="HarperDB Make PUT Request.png"&gt;&lt;/a&gt;&lt;br&gt;
Figure 13&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all about routes and controllers! You can see the whole &lt;code&gt;courseController.js&lt;/code&gt; file in &lt;a href="https://gist.github.com/catalinpit/191cbb0db15a52121e28461b31bc0a35"&gt;this Gist&lt;/a&gt;. I chose not to embed it because it is big and takes a significant space on the page!&lt;/p&gt;

&lt;p&gt;Similarly, you can &lt;strong&gt;see the complete application on &lt;a href="https://github.com/catalinpit/harperdb-fastifyjs-rest-api"&gt;my GitHub&lt;/a&gt;&lt;/strong&gt;. To learn better, go through it, change stuff, break stuff, add things and so on!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-start-the-application"&gt;
  &lt;/a&gt;
  How to start the application
&lt;/h3&gt;

&lt;p&gt;You can start the application by running &lt;code&gt;node app.js&lt;/code&gt; in the root folder. &lt;/p&gt;

&lt;p&gt;However, if you clone the application from GitHub, you need to install the dependencies first. You can do so by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;By this point, you should have a REST API that allows you to store and manipulate courses. The purpose of this tutorial was to get up-to-speed with the two technologies. As a result, other things could be added, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authorisation&lt;/li&gt;
&lt;li&gt;API rate limiting&lt;/li&gt;
&lt;li&gt;Adding a front-end and transform it into a full-stack application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that being said, if you like the tutorial and want part 2, where I build the front-end with Vue, let me know in the comments!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;If you are interested in JavaScript tutorials, I recommend&lt;/em&gt; &lt;a href="https://catalins.tech/frontend-masters-membership-is-it-worth-it"&gt;&lt;em&gt;Frontend Masters&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to make money with technical writing, check&lt;/em&gt; &lt;a href="https://catalins.tech/websites-that-pay-you-to-write-technical-articles"&gt;&lt;em&gt;websites that pay you to write&lt;/em&gt;&lt;/a&gt; &lt;em&gt;technical articles!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to learn JavaScript, I recommend these&lt;/em&gt; &lt;a href="https://catalins.tech/5-best-resources-to-learn-javascript-as-a-beginner"&gt;&lt;em&gt;5 resources to learn JavaScript as a beginner&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Negotiating your salary is essential — learn&lt;/em&gt; &lt;a href="https://catalins.tech/how-to-negotiate-your-salary-as-a-developer"&gt;&lt;em&gt;how to negotiate your salary as a developer&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Speed up your development with&lt;/em&gt; &lt;a href="https://catalins.tech/git-aliases-what-are-they-and-how-to-use-them"&gt;&lt;em&gt;Git Aliases&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to&lt;/em&gt; &lt;a href="https://catalins.tech/how-to-start-your-blog-as-a-developer"&gt;&lt;em&gt;start a blog as a developer&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, I recommend reading the article “&lt;/em&gt;&lt;a href="https://catalins.tech/how-to-start-your-blog-as-a-developer"&gt;&lt;em&gt;how to start your blog as a developer&lt;/em&gt;&lt;/a&gt;&lt;em&gt;”!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do you struggle to stay up-to-date with all news in tech? See&lt;/em&gt; &lt;a href="https://catalins.tech/one-way-to-stay-up-to-date-as-developer"&gt;&lt;em&gt;one way to stay up to date as a developer&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Learn&lt;/em&gt; &lt;a href="https://catalins.tech/how-to-use-asyncawait-in-javascript"&gt;&lt;em&gt;how to use Async/Await in JavaScript&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GitHub profiles are all the rage at the moment. Learn&lt;/em&gt; &lt;a href="https://catalins.tech/how-to-create-a-kickass-github-profile-page"&gt;&lt;em&gt;how to create a GitHub profile page&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check these 7&lt;/em&gt; &lt;a href="https://catalins.tech/7-github-repositories-to-help-you-crush-your-job-interviews"&gt;&lt;em&gt;resources to help you pass your job interviews&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See the new features coming in&lt;/em&gt; &lt;a href="https://catalins.tech/javascript-es2021-you-need-to-see-these-ecmascript-2021-features"&gt;&lt;em&gt;JavaScript ECMAScript 2021 ES2021&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Are you a beginner programmer? Check these&lt;/em&gt; &lt;a href="https://catalins.tech/10-programming-project-ideas-for-beginners"&gt;&lt;em&gt;programming project ideas for beginners&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Are you learning to code or do you plan to do it? Check the&lt;/em&gt; &lt;a href="https://catalins.tech/20-best-places-to-learn-programming-for-free"&gt;&lt;em&gt;best places to learn programming for FREE&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://catalins.tech/my-9-must-have-browser-extensions-for-increased-developer-productivity"&gt;&lt;em&gt;Increase your developer productivity&lt;/em&gt;&lt;/a&gt; &lt;em&gt;with these 9 browser extensions!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are a Node.js developer, I advise you to check these&lt;/em&gt; &lt;a href="https://catalins.tech/the-4-creational-design-patterns-in-nodejs-you-should-know"&gt;&lt;em&gt;4 creational design patterns in Node.js&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check these amazing&lt;/em&gt; &lt;a href="https://catalins.tech/javascript-es2020-the-features-you-should-know"&gt;&lt;em&gt;JavaScript ECMAScript 2020 features&lt;/em&gt;&lt;/a&gt;&lt;em&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can also check this &lt;a href="https://catalins.tech/keystonejs-and-graphql-api-crash-course"&gt;KeystoneJS&lt;/a&gt; crash course!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>UX and User Authentication</title>
      <author>SAWO Labs</author>
      <pubDate>Thu, 29 Apr 2021 06:07:45 +0000</pubDate>
      <link>https://dev.to/sawolabs/ux-and-user-authentication-2k4a</link>
      <guid>https://dev.to/sawolabs/ux-and-user-authentication-2k4a</guid>
      <description>&lt;p&gt;Hi&lt;br&gt;
I'm Siddharth from &lt;a href="https://sawolabs.com/"&gt;SAWO Labs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Some of the best practices for UX and User Authentication examined&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In order for any business to be successful online, it needs to ensure that the customer has a seamless experience right from the time they visit the website until the final intent (be it a purchase, a subscription or any other action that the business wants the user to take) is complete.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But when it comes to matters of user data and security, often website administrators end up in a fix. The trade-off between security and convenience can be a tough decision to make, considering how these two parameters are generally pitted against each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upping the security parameters leads to additional steps in the customer’s journey, which could be off putting. As an organization though, striking a fine balance between the two is the key to success.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;UX: Less is more&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When devising your User Experience, always follow the mantra of ‘Less is More’. Any hurdles during navigation would almost certainly lead to your potential customer bouncing off, as there is no dearth of options to choose from online.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By minimizing the number of actions required to complete a task or achieve a result, you make it easier for the user to browse your site. By being on the site for longer, your users are more likely to make a purchase decision, thereby helping you achieve your goals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logging in to websites that they don’t visit too often is a pain-point for users as they need to create and remember multiple passwords. Certain sites make it even more complicated by implementing two-factor authentication, which is no doubt secure, but requires the user to have a supplementary device.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To solve this issue, the highly secure yet extremely convenient process of biometric authentication is gaining momentum. Biometric authentication is super speedy and is completed in the blink of an eye, literally! However, due to the lack of biometric identification mechanisms on most desktops and laptops, website developers are wary of using this method.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;Data Privacy: Do Indians care, and should you?&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unlike internet users in foreign countries, Indians are usually lax when it comes to data security on the internet. Most Indian consumers are indifferent to data privacy rules and regulations, focusing more on the user experience rather than on improving their security.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A survey conducted by McAfee revealed that online shopping in India has gone up by 68% percent since March. However, another worrisome finding is that only 27.8% of the respondents admitted to using online security solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This poses a challenge to businesses as any data breach resulting even out of the negligence of the user could have a negative impact on the business’s brand image. So, the challenge lies in implementing a solution that is not only intuitive and easy to use, but secure at the core as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;Tips on providing a solid user experience&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Authentication alone does not guarantee security, as the users can have incorrect or fake information linked on their social account. Security is built on the fundamental concept of authentication combined with identification.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is essential for businesses to realize that both these processes need not be done simultaneously. Rather, breaking down the process into identification at registration and authentication at checkout can greatly boost conversions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Retailing giant Amazon adopted this method a few years ago, and is doing great, miles ahead of its competitors with regard to conversion rates. Amazon simply lets a guest user browse their entire catalogue and add items to the cart, personalizing recommendations based on cookies stored on the visitor’s device. Once the visitor has made the purchase decision by heading over to checkout, the login and authentication mechanism kicks in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By this time, the user is so deep into the purchase journey that they do not mind the task of logging in. However, if this process had to be done at the start, it would seem cumbersome to the user, who might leave the site altogether.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some businesses tend to use the fear factor to coerce users into keeping their account security details up to date. However, this ploy can backfire as the instilled fear can lead to reduced engagement and potential drop offs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Businesses need to identify user pain points and provide simple solutions that are user-centric and not solely security or functionality centric.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Passwords as a form of authentication are really outdated and pose a large number of security threats. Added to it, is the high cost of maintaining a secure database which can store all the customer’s passwords safely. It’s high time for companies to ditch password-based methods to authenticate users. This is where biometric authentication comes handy, due to its speed, simplicity and tamper-proof nature.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;Understanding your product from a security standpoint&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As a business, it is important for you to be realistic about your security requirements. While multiple checkpoints including 2FA, captchas, security challenges and the like make sense for a website or an app handling sensitive financial data or confidential private information, the same does not hold true for say, a subscription-based e-magazine, blog or news website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Planning an authentication system based on the security needs of your business while keeping the use-case and convenience of your visitors in mind will go a long way in attracting more visitors, consequently driving business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do a thorough competitor analysis, check out the best industry practices, conduct a risk-reward assessment and then replicate it by tweaking it to suit your business, and see the results for yourself.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;&lt;u&gt;A cost-effective quick fix crafted for you!&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We understand that the above-mentioned process of research and analysis may not be easy for most businesses because of multiple reasons including lack of time or technical expertise. That’s why we have a simple solution designed keeping you in mind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contact our security experts at SAWO Labs today for a free demo and walkthrough of our ground-breaking passwordless authentication system that’s easy to deploy and scale up. What’s more? It’s super convenient to use and extremely user friendly. Try it out yourself today.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Support &amp;amp; queries&lt;/b&gt;&lt;br&gt;
You can join our &lt;a href="https://discord.gg/TpnCfMUE5P"&gt;Discord Server&lt;/a&gt; Community and interact with other developers and can ask for any support you require.&lt;/p&gt;

&lt;p&gt;In case of any other query, feel free to reach out to us at &lt;a href="mailto:community.sawolabs@gmail.com"&gt;community.sawolabs@gmail.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>authentication</category>
      <category>ux</category>
      <category>security</category>
      <category>passwordless</category>
    </item>
  </channel>
</rss>
