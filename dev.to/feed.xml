<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A better way to visualize stacked branches in git</title>
      <author>Greg Foster</author>
      <pubDate>Thu, 26 Aug 2021 18:21:25 +0000</pubDate>
      <link>https://dev.to/foster/a-better-way-to-visualize-stacked-branches-in-git-1pl8</link>
      <guid>https://dev.to/foster/a-better-way-to-visualize-stacked-branches-in-git-1pl8</guid>
      <description>&lt;p&gt;The standard workflow in git is to create feature branches off of a trunk branch (usually called &lt;code&gt;main&lt;/code&gt;), submit a pull request, and merge approved changes back into the trunk.  This is fairly straightforward and follows the patterns of most pre-git version control systems.  However, as any experienced developer can tell you, this workflow is not without issues.  One of the biggest challenges of the feature branch workflow is that it often induces developers to create massive pull requests once they've finished building.  If you're working on a large project over many weeks or months, your feature branch can easily contain 100s of commits, which correspond to  1000s of lines of code changes.  Software engineering wisdom suggests that "any pull request longer than 400 lines is unmanageable" - so how can we improve on this widely-used workflow?&lt;/p&gt;

&lt;p&gt;To reduce the pain of large pull requests, engineers at many top companies (i.e. Facebook, Uber, Dropbox, Google) have moved towards "stacking" their git branches.  Stacking is the practice of creating new branches off of existing feature branches instead of the trunk branch.  This allows developers to break down large features into smaller, more manageable changesets, each of which can be reviewed, tested, and landed incrementally.  While stacking initially gained popularity at larger companies as a way to help engineers stay unblocked while they waited for code reviews, engineers at companies of all sizes have found value and velocity from writing and reviewing stacked changes (shhh... we are some of the converts).  For more on the fundamentals of stacking git branches, you can read more! &lt;a href="https://kurtisnusbaum.medium.com/stacked-diffs-keeping-phabricator-diffs-small-d9964f4dcfa6"&gt;here&lt;/a&gt;, &lt;a href="https://www.michaelagreiler.com/stacked-pull-requests/"&gt;here&lt;/a&gt;, &lt;a href="https://jg.gg/2018/09/29/stacked-diffs-versus-pull-requests/"&gt;here&lt;/a&gt;, and &lt;a href="https://news.ycombinator.com/item?id=26922633"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Although stacked changes have benefits for both authors and reviewers, they sadly lack first-class support from git and many of the popular git GUIs.  Perhaps the biggest conceptual change is that the state in git can no longer be represented as a &lt;em&gt;list of commits&lt;/em&gt; on a feature branch + &lt;em&gt;a list of feature branches&lt;/em&gt; - instead we need to think of our git state as a &lt;em&gt;DAG (Directed Acyclic Graph)&lt;/em&gt; &lt;em&gt;of branches&lt;/em&gt;.  Interestingly, while many major dev tools (i.e. ETL platforms, deployment pipelines, CI runners) support visualizing DAGs, this is almost entirely missing from git-related tooling.&lt;/p&gt;

&lt;p&gt;While developing the CLI for our code review platform &lt;a href="https://app.graphite.dev?utm_source=devto"&gt;Graphite&lt;/a&gt;, we wanted to provide an intuitive, DAG-based visualization of stacked git branches.  &lt;/p&gt;

&lt;p&gt;Let's take a look at the problem more closely - as mentioned, visualizing a &lt;em&gt;list&lt;/em&gt; of branches is easy:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZgip3NU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1maoavgzetgtnwm6logh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZgip3NU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1maoavgzetgtnwm6logh.png" alt="git branch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, git has no native command to visualize a &lt;em&gt;DAG&lt;/em&gt; of branches.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-solution"&gt;
  &lt;/a&gt;
  Our Solution
&lt;/h2&gt;

&lt;p&gt;After playing around a lot with git internals, we developed a good solution.  Let’s start small and consider commits.  Each commit references its parents - you can print them by running:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rev-parse ${SHA}^&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WMFTeSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gb6teuay9s9c6yhbwq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WMFTeSX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gb6teuay9s9c6yhbwq2.png" alt="git rev-parse ${SHA}^"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS: The &lt;code&gt;--help&lt;/code&gt; description of &lt;code&gt;git rev-parse&lt;/code&gt; is comically cryptic. &lt;a href="https://stackoverflow.com/questions/15798862/what-does-git-rev-parse-do#comment85949895_15798862"&gt;It seems like we're not alone in thinking this is weird.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zCOGQP9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uabv1fr9ifjdjm4am5yd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zCOGQP9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uabv1fr9ifjdjm4am5yd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also associate branches to revision SHAs by running:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git show-ref --heads&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65pHi5rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u9swicmtzzroaznhg6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65pHi5rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u9swicmtzzroaznhg6d.png" alt="git show-ref --heads"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can run a breadth-first search from a branch and stop when we see a revision matching a known branch.  Unfortunately, walking through many commits with a series of shell executions isn’t very fast, and doing so doesn't help us discover branch children.&lt;/p&gt;

&lt;p&gt;A more efficient approach here would then be to load the commit-graph into memory before walking it.  Fortunately, git has a helpful command (with a much more human-readable description) for listing all commits and their parent or child SHAs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rev-list --parents --all&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5jEaOdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v6f4isvqocjlac3stuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5jEaOdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v6f4isvqocjlac3stuv.png" alt="git rev-list --parents --all"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This provides all the nodes and edges needed to construct an in-memory graph of all commits, from which we can also construct the graph of all branches.  Getting the rev-list for child commits is as easy as changing “--parents” to “--children”.&lt;/p&gt;

&lt;p&gt;Unfortunately, loading &lt;em&gt;all&lt;/em&gt; commit relationships into memory is often a time-intensive operation. This would be prohibitively slow in a monorepo with millions of commits.  If we’re looking to build a performant CLI, we can do better by loading only a subset of commits.&lt;/p&gt;

&lt;p&gt;A key simplifying assumption we can make is that all our branches were created off of the trunk branch.  In this case, the minimum subset of commit relations needed for computing a branch parent is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rev-list --parents child_branch ^$(git merge-base child_branch main)~1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AYXFrUfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzaynjhqzaibgm4fzrqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AYXFrUfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzaynjhqzaibgm4fzrqf.png" alt="git rev-list --parents child_branch ^$(git merge-base child_branch main)~1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This command roughly translates to “List commits reachable from “child_branch,” but not reachable by the trunk.  This lists enough commits to calculate a branch’s parent and nothing more - but if we want the minimum set needed to calculate the graph of all branches, we need to tune it further:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rev-list --parent ^$(git merge-base --octopus branch_1 branch_2 branch_3...)~1 branch_1 branch_2 branch_3...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qgGf1ot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9o70vqjsnbrt4ppstyj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qgGf1ot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9o70vqjsnbrt4ppstyj3.png" alt="git rev-list --parent ^$(git merge-base --octopus branch_1 branch_2 branch_3...)~1 branch_1 branch_2 branch_3..."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which roughly translates to "&lt;strong&gt;all commits unreachable by the oldest shared commit of all branches&lt;/strong&gt;."  This final command is how our open-source CLI tool Graphite currently computes the relationships between stacks of branches.  Once we have the full graph of all branches, we can finally visualize complex stacks of branches as a graph:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gt log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C__BqiA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gb20ucz1z1o89j6bnio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C__BqiA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gb20ucz1z1o89j6bnio.png" alt="gt log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the full implementation of our branch graphing command &lt;code&gt;gt ls&lt;/code&gt; on &lt;a href="https://github.com/screenplaydev/graphite-cli/blob/764d9e44b0226167825e20c4b3ac48dcb868f4e7/src/lib/git-refs/branch_relations.ts#L86-L94"&gt;our Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to see our visualizations in action, simply run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install screenplaydev/tap/graphite &amp;amp;&amp;amp; cd &amp;lt;some_repo&amp;gt; &amp;amp;&amp;amp; gt ls&lt;/code&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>cli</category>
      <category>devtools</category>
    </item>
    <item>
      <title>Leading 650 Engineers with Microsoft's Brendan Burns </title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 26 Aug 2021 18:12:23 +0000</pubDate>
      <link>https://dev.to/linearb/leading-650-engineers-with-microsoft-s-brendan-burns-7lb</link>
      <guid>https://dev.to/linearb/leading-650-engineers-with-microsoft-s-brendan-burns-7lb</guid>
      <description>&lt;p&gt;Brendan Burns is famous in engineering circles as one of the co-founders of Kubernetes, but he’s more than just a talented developer — he leads a team of 650 engineers at Microsoft.&lt;/p&gt;

&lt;p&gt;In the first episode of a two-part series, Brendan joins the Dev Interrupted podcast to talk all things engineering leadership and management. After joining Microsoft and being given a team of 30 people, he has seen his teams double each year. Adopting a leadership style that he jokingly refers to as “my form of punishment is micromanagement,” Brendan discusses how to be intentional about employee interactions in a remote world, the importance of delivering a concise message and why saying “yes” to as many opportunities as possible has led to career success.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3XmNoCbN4Yxut30Fy1KO4R"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Learning to program on a Commodore 64&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Saying “yes” to as many opportunities as possible&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The “meet them where they are” philosophy of employee interaction&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to run distributed engineering teams&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being intentional about meeting employees in a remote world&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why missing deadlines creates opportunity&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qCKRMK1Uk1c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT&lt;/strong&gt;: An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;If you haven’t already joined the best developer discord out there, WYD?&lt;/p&gt;

&lt;p&gt;Look, I know we talk about it a lot but we love our developer discord community. With over 1500 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No salespeople allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBWLfe0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AxR_ViPMd2T8ljTzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBWLfe0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AxR_ViPMd2T8ljTzt.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/leading-650-engineers/"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>leadership</category>
      <category>podcast</category>
      <category>devops</category>
    </item>
    <item>
      <title>Kubernetes components made easy! - Part 1</title>
      <author>Shatakshi Gupta</author>
      <pubDate>Thu, 26 Aug 2021 17:44:54 +0000</pubDate>
      <link>https://dev.to/shatakshiigupta/kubernetes-components-made-easy-part-1-3k38</link>
      <guid>https://dev.to/shatakshiigupta/kubernetes-components-made-easy-part-1-3k38</guid>
      <description>&lt;p&gt;Kubernetes is an open-source container-orchestration system for automating computer application deployment, scaling, and management. This blog will help you know better about the main components of a Kubernetes Cluster.&lt;br&gt;
Starting from the very basic unit of a Kubernetes Cluster:&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Pod:&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;smallest unit of a k8s cluster &lt;/li&gt;
&lt;li&gt;usually preferred to contain only a single container
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZbOeudOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whpc0pne1l7rqjdo1pn6.jpg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit greater than pod&lt;/li&gt;
&lt;li&gt;consists of group of pods &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Cluster:&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collection of Nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;IP addresses&lt;/strong&gt;:&lt;/u&gt; &lt;br&gt;
Let us suppose you have an application that connects to a Database. Now Both of these components your &lt;em&gt;application&lt;/em&gt; and &lt;em&gt;Database&lt;/em&gt; are pods. Both these pods make use of IP addresses to connect to each other for managing the application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HkEiRQlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/260av070qghfek26hav3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HkEiRQlD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/260av070qghfek26hav3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now what if the IP address of one of the pods changes due to some reason like the container in the Pod could not get enough space allocation for it to work or simply any problem occurred and now the container is destroyed and along with it, it's IP address also gets lost which is used by your application to connect to the DB(Database). &lt;br&gt;
Now you create a new container and hence you need a new IP address and you now have to again change the configuration for managing IP addresses and much more. &lt;/p&gt;

&lt;p&gt;This costs a lot of time and effort due to this problem the concept of &lt;u&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;/u&gt; was introduced which replaces IP addresses or we can say it provides a permanent IP address which won't change even if your container gets destroyed. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2E_mqpLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7uwpl9f176irad8apa0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2E_mqpLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7uwpl9f176irad8apa0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your application is now working fine and you want to access your application on your system and for this you need to get it on local host and the &lt;em&gt;service&lt;/em&gt; would provide the IP address somewhat like:&lt;br&gt;
&lt;code&gt;https://124.89.101.2:8080&lt;/code&gt; which u don't prefer to see in place of:&lt;br&gt;
&lt;code&gt;https://my-app.com&lt;/code&gt;&lt;br&gt;
Here comes the role of &lt;u&gt;&lt;strong&gt;Ingress&lt;/strong&gt;&lt;/u&gt; which basically converts your not so good looking IP address to some preferred IP address which then forwards this IP address to services which is then used for communication between different dependent pods.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuMTizth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6l9a5ne4s5qdtvgmhqq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuMTizth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6l9a5ne4s5qdtvgmhqq.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now suppose your dependent pod URL that is the service URL which is used to interact with other pods changes or you change it due to any good reason then you will need to change it in all files, configuration files and many more to avoid any difficulties in the future. But this can be really tedious task to do, so this task is done by &lt;strong&gt;Config-Map&lt;/strong&gt; which basically stores the URL of services that are used and are dependent and in this you can simply change the URL anytime without any stress of modifying all the files.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIFz1gEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91smss003ppgtmcrz5py.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIFz1gEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91smss003ppgtmcrz5py.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ppvVOkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htbdrubuuwuq5ywswlwo.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ppvVOkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htbdrubuuwuq5ywswlwo.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now there can be some confidential data as well that you don't want others to see, that data is stored in &lt;u&gt;&lt;strong&gt;Secrets&lt;/strong&gt;&lt;/u&gt; like user_id, user_password and much more confidential data. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pwrbhfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0b1rzwuii65e65x126p.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pwrbhfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0b1rzwuii65e65x126p.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Deployments&lt;/strong&gt;&lt;/u&gt;&lt;br&gt;
Deployment for creating replicas is usually called a blueprint of pods and in actual we deal with deployments only and not actual pods. We connect multiple deployments through services which acts as a load balancer &amp;amp; when one pod/deployment/replica dies it(service) forwards the request of the user to another blueprint/deployment.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FkSYuPYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v8e90jtald21ww078u5.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FkSYuPYi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v8e90jtald21ww078u5.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can not create deployments for databases &amp;amp; that is because every Database has some state and and if we create deployments of Databases then we need to keep track of every pod like which pod is currently reading data from data storage and which one is writing data to that storage and all this mechanism needs to be synchronized, maintained among every replica to avoid data inconsistency which is not an easy task so here &lt;strong&gt;StatefulSets&lt;/strong&gt; are used.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;StatefulSets&lt;/strong&gt;&lt;/u&gt; is used for creating replicas, working or &lt;br&gt;
managing applications like Databases to avoid data inconsistency.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---k_-0tEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fox5ryi7vdjifwmhe9c9.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---k_-0tEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fox5ryi7vdjifwmhe9c9.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resources referenced:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/Krpb44XR0bk"&gt;Docker &amp;amp; Kubernetes Tutorial series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/"&gt;Kubernetes Official website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kubernetes/kubernetes"&gt;Kubernetes GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have come this far then I really appreciate your efforts and I hope you a little idea about the main components of a Kubernetes cluster. Thanks for reading and have a great day! :)&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kubernetes</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>When you should and shouldn't use React</title>
      <author>AsyncBanana</author>
      <pubDate>Thu, 26 Aug 2021 17:06:26 +0000</pubDate>
      <link>https://dev.to/asyncbanana/when-you-should-and-shouldn-t-use-react-59b</link>
      <guid>https://dev.to/asyncbanana/when-you-should-and-shouldn-t-use-react-59b</guid>
      <description>&lt;p&gt;If you do web development, chances are, you know what React is. It is one of the most well-known frameworks for building user interfaces using an HTML-like language called JSX.&lt;/p&gt;

&lt;p&gt;However, React is not the only solution for making complex interactive user interfaces. Many alternatives, like Vue, Svelte, and vanilla JavaScript, can also be good choices. In this article, we will go over when you should and should not use React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reacts-creation"&gt;
  &lt;/a&gt;
  React’s creation
&lt;/h2&gt;

&lt;p&gt;In 2011, Facebook needed an easier way to build their web app without wasting developer time. In 2011, Jordan Walke, an engineer at Facebook, created an experimental web framework called FaxJS. It promised easy component reuse, declarative updating based on state, and a seamless way to render on the client and server. FaxJS was first used on Facebook that year. Later, FaxJS was improved and renamed React. React was quickly adopted by developers, and many more features were added, like JSX in 2013, which allowed developers to write using an HTML-like language instead of raw function calls. They also have added things like React Native, allowing developers to use React to build mobile apps, and hooks that make it possible to use functions instead of classes for React components. All of this created the React known today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-react"&gt;
  &lt;/a&gt;
  When to use React
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#when-you-need-a-large-ecosystem"&gt;
  &lt;/a&gt;
  When you need a large ecosystem
&lt;/h3&gt;

&lt;p&gt;If you are building an app that uses a lot of different packages and libraries, React can be a good choice. It currently has one of the largest ecosystems for web development frameworks, with helpful libraries like Material UI and React Spring. In fact, there are more than 75,000 packages on NPM with the React Keyword, which is almost three times the next largest framework, Vue. React also has a large and mature community, with lots of tutorials and guides on various aspects of React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-need-a-mature-and-widely-used-base"&gt;
  &lt;/a&gt;
  When you need a mature and widely used base
&lt;/h3&gt;

&lt;p&gt;React is mature, having been used for years in production by many large companies, like Facebook, Netflix, Uber, and more. It is almost guaranteed to be stable, as Facebook uses the latest releases in production on their website and app. If you have an app that is required to be extremely reliable and stable, then React can be a good choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-not-use-react"&gt;
  &lt;/a&gt;
  When to not use React
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#when-you-are-worried-about-your-apps-size"&gt;
  &lt;/a&gt;
  When you are worried about your app’s size
&lt;/h3&gt;

&lt;p&gt;React can be very large. Just by adding React to your app, you add more than 121 kilobytes of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SluNuEEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1gbuiuj2awhtfb9m9ai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SluNuEEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1gbuiuj2awhtfb9m9ai.png" alt="Graph of React's bundle size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That 121 kilobytes can mean the difference between a snappy website and a slow-loading one. Slow websites can make your users more likely to leave the website. Many other frameworks like Vue, Preact, and Svelte have a much smaller bundle size and can be integrated without creating a much slower website.&lt;/p&gt;

&lt;p&gt;Additionally, all of your JavaScript needs to download before your website can even be rendered if you use approaches like Create React App. This is because Create React App and other Single Page App approaches require React to build the HTML using the JavaScript downloaded, instead of serving a pre-built HTML file. This can hurt SEO by making it harder for search engines to understand your content and can make the content load slower for your users. However, there are solutions to this that render the HTML on the server like Next.js. Although even if you do that, it still can take some time for the page to become interactive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-need-fast-rendering"&gt;
  &lt;/a&gt;
  When you need fast rendering
&lt;/h3&gt;

&lt;p&gt;When you are making an app like a game or a demanding creative app, React is not the best choice. This problem stems from the fact that it uses a Virtual DOM. Virtual DOMs, or VDOMs, are layers that help make unoptimized DOM manipulations faster. For example, let’s look at an example of rendering data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;DATA&amp;lt;/h1&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lorem ipsum colour&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, even though there is only a small string that is used, the whole document is rerendered. This can be very slow, as it takes time for the HTML to be parsed and rendered again. To solve this problem, React uses a VDOM. VDOMs keep the structure of the document in memory and then use that to figure out what has changed by checking to see what is different when you update the VDOM, making it possible to have tiny changes in HTML. However, managing the Virtual DOM has overhead and it is faster to just make optimized JavaScript in the first place. An example of this would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dataText&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lorem ipsum colour&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That example changes a lot less HTML, which makes it faster, and it does not have the overhead of the VDOM. So, while the VDOM can make unoptimized JavaScript faster, if you need top rendering performance, it is not the way to go. Additionally, some frameworks like Svelte move all of the VDOM computation into the compile step, making the output optimized JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-you-want-a-more-powerful-markup-language"&gt;
  &lt;/a&gt;
  When you want a more powerful markup language
&lt;/h3&gt;

&lt;p&gt;JSX is nice, but sometimes it can be verbose due to it basically being HTML with JavaScript mixed in. While it is easy to learn JSX due to it being so related to HTML, some markup languages, like Svelte, can be much less verbose. Svelte offers more abstractions, like built-in conditional blocks and reactive variables. for example, when you want to trigger an update, with React you need to use where in Svelte you can just set the variable. This can create more concise code and less development work once you learn the new syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;React is a great tool for building websites quickly. However, it is not for everything or everyone. It is not great for performance in general, and JSX could be more concise. There are also many great alternatives, like Vue, Svelte, and native JS. However, this might be somewhat biased, as I am a Svelte user. Anyway, I hoped you learned something from this, and thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>Easy local tunnel with docker environment</title>
      <author>Kirill Bobykin</author>
      <pubDate>Thu, 26 Aug 2021 16:58:24 +0000</pubDate>
      <link>https://dev.to/qelphybox/easy-local-tunnel-with-docker-environment-1oc0</link>
      <guid>https://dev.to/qelphybox/easy-local-tunnel-with-docker-environment-1oc0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can provide demo for your web application from development environment&lt;/li&gt;
&lt;li&gt;You can use domain and https connection for test purposes&lt;/li&gt;
&lt;li&gt;It is pretty easy to setup&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h2&gt;

&lt;p&gt;Try to use tunnel services like &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;, &lt;a href="https://localtunnel.me/"&gt;localtunnel&lt;/a&gt;, etc...&lt;/p&gt;

&lt;p&gt;You can check it with docker-compose. Setup &lt;code&gt;docker-compose.yml&lt;/code&gt;, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginxdemos/hello&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;

  &lt;span class="na"&gt;localtunnel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;efrecon/localtunnel&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;on-failure&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;--local-host server --port 80 --subdomain $SUBDOMAIN&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;SUBDOMAIN=my_unique_subdomain&lt;/span&gt;
    &lt;span class="na"&gt;links&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;server&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run this config with &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;br&gt;
Then check &lt;a href="https://megauniquedomain.loca.lt/"&gt;https://megauniquedomain.loca.lt/&lt;/a&gt; you will meet your server root page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;I found &lt;a href="https://stackoverflow.com/a/53180742/4636729"&gt;great answer on stackoverflow&lt;/a&gt; for you!&lt;/p&gt;

</description>
      <category>localtunnel</category>
      <category>devenv</category>
      <category>docker</category>
    </item>
    <item>
      <title>GSoC Coding Phase 2: Challenge Is an Understatement</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Thu, 26 Aug 2021 16:54:12 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/gsoc-coding-phase-2-challenge-is-an-understatement-bji</link>
      <guid>https://dev.to/rohanlekhwani/gsoc-coding-phase-2-challenge-is-an-understatement-bji</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;It was all going smooth. And then this happened.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt;&lt;/strong&gt; is a 10 week global open-source program for students.&lt;/p&gt;

&lt;p&gt;It has been in the running for 16 years! In case you're new here, I recommend checking out my first blog in this series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/how-i-got-selected-into-google-summer-of-code-27"&gt;How I Got Selected into Google Summer of Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm revamping the &lt;strong&gt;&lt;a href="https://rocket.chat/blog/product/top-8-the-most-popular-rocket-chat-apps/"&gt;most downloaded app&lt;/a&gt;&lt;/strong&gt; on Rocket.Chat - the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll"&gt;Poll App&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; While it's been a smooth ride, there's one thing that happened that made all of us scratch our heads. Hang tight!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;Here’s a recap of the features I built in &lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/commit-push-merge-gsoc-coding-phase-1-51i0"&gt;Coding Phase 1&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Improved Response Visualizations:&lt;/strong&gt; Previously the Poll App displayed simple grayscale reponses. This was dull and boring. Moreover, there wasn’t a way to distinguish winners and total votes cast. &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/2"&gt;Here’s&lt;/a&gt;&lt;/strong&gt; how we changed this.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mixed Visibility Mode:&lt;/strong&gt; The Poll App allowed only two modes — open where voter identities were visible and closed where they were not. What about something in the middle? Introducing &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/5"&gt;Mixed Visibility Mode&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Word Clouds:&lt;/strong&gt; Bar graphs are simple. Bar graphs do the job. And bar graphs are just &lt;em&gt;“okay”&lt;/em&gt;. Word Clouds are lit! Visualize responses in word clouds &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/6"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-did-i-add-to-the-poll-app"&gt;
  &lt;/a&gt;
  What Did I Add to the Poll App?
&lt;/h2&gt;

&lt;p&gt;While planning my timeline within my GSoC proposal, my strategy was to take up easier features at the start. This would allow me to have more time to explore the &lt;strong&gt;&lt;a href="https://rocketchat.github.io/Rocket.Chat.Apps-engine/"&gt;Rocket.Chat Apps Engine&lt;/a&gt;&lt;/strong&gt; while still shipping out features consistently.&lt;/p&gt;

&lt;p&gt;Coding Phase 1 was a success. It was time to bring out the &lt;strong&gt;big guns&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#userdefined-options"&gt;
  &lt;/a&gt;
  User-defined Options
&lt;/h3&gt;

&lt;p&gt;Until now the Poll App only allowed the Poll Creator to add options. Once they posted the poll no changes to the options could be made. &lt;strong&gt;What if users have an idea not covered within the options?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now if you’ve ever used Facebook polls within groups you might’ve noticed a subtle feature. All group members can add options after the poll is posted. Allowing group members to vote not only involves the community better but also evokes ideas and opinions from the entire group, not just limited to the poll creator.&lt;/p&gt;

&lt;p&gt;We decided to give the Poll Creator an option — allow or disallow users from adding choices. Here’s how the poll message looks when the poll creator allowed users to add options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TfAwxQUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8t99e9zogzfw03tnpjl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TfAwxQUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8t99e9zogzfw03tnpjl.png" alt="Allow Users to Add Options After Poll Creation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See that Add option button? That becomes available to all the users within the room. Let’s click on it and see what happens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gsrfJHqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chgq3b6crsj46s5ej3hk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gsrfJHqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chgq3b6crsj46s5ej3hk.png" alt="Adding German as a new option. I don’t speak German. (yet :P)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It opens up a modal that allows users to add an option. On clicking Add the option gets added to the existing Poll message with both vote quantity and voters set to 0.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lGCJraCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygbsm3u1v8vpw9q54463.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lGCJraCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygbsm3u1v8vpw9q54463.png" alt="Germans in the house!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Poll message updates for everyone within the room with the new option. Yay!&lt;/p&gt;

&lt;p&gt;The PR for this feature along with a video demo can be found here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-poll-modes"&gt;
  &lt;/a&gt;
  Additional Poll Modes
&lt;/h3&gt;

&lt;p&gt;Adding options to Poll was kind of repetitive. Especially if you’re doing a 1 to 10 poll typing 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 was what you had to do (&lt;em&gt;okay I just did that&lt;/em&gt;). I thought:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68C4gHf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdz8qcgoasq9ghulpaih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68C4gHf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdz8qcgoasq9ghulpaih.png" alt="Why not?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Poll App only had two modes — Mutliple Choice and Single Choice. That. Is. It. &lt;strong&gt;What if I could add more modes that would auto-fill all the options?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over the next few days (and nights) I added the following modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Overrated/Underrated Polls&lt;/strong&gt; (Options: Overrated, Appropriately Rated, Never Tried, Underrated)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1-to-5 Polls&lt;/strong&gt; (Options: 1–5)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1-to-10 Polls&lt;/strong&gt; (Options: 1–10)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Agree/Disagree Polls&lt;/strong&gt; (Options: Agree/Disagree)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Emoji Rank Polls&lt;/strong&gt; (Options: Watch the demo! 🚀)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ieOwIyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AsPhvVXxvC7wogIUc869mZg.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Emoji Rank Polls in Action!" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ieOwIyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AsPhvVXxvC7wogIUc869mZg.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best part is that the modal is completely interactive. This means that as soon as you select one of the additional poll modes the Options fields automatically disappear. Not to mention that Additional Poll modes support Mixed Visibility. How cool is that?&lt;/p&gt;

&lt;p&gt;To view other additional poll modes, checkout the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/11"&gt;PR&lt;/a&gt;&lt;/strong&gt; for Additional Poll Modes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-polls"&gt;
  &lt;/a&gt;
  Live Polls
&lt;/h3&gt;

&lt;p&gt;If you’ve attempted an online quiz before. Well this it!&lt;/p&gt;

&lt;p&gt;Introducing Live Polls. To be honest about it, the effort and thought that went into this feature qualifies it as a &lt;strong&gt;mini-GSoC project&lt;/strong&gt; itself.&lt;/p&gt;

&lt;p&gt;Live Polls are an array of regular Polls with additional functionality of having a time limit to vote upon after which the current Poll ends and the next one is posted. Poll creators can also click on a new “Next Poll” button to trigger a pre-scheduled finish of the current Poll.&lt;/p&gt;

&lt;p&gt;The scheduling magic happens using the &lt;strong&gt;&lt;a href="https://developer.rocket.chat/apps-development/fundamentals-of-apps/scheduler-api"&gt;Scheduler API&lt;/a&gt;&lt;/strong&gt;. Every time a Poll within a Live Poll is posted, a processor is scheduled to end it after the user-specified time to vote.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kkcp9IRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6s865itd4d0ji4vezg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkcp9IRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6s865itd4d0ji4vezg3.png" alt="Time to vote on the Poll along with a “Next Poll” button."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live Polls are triggered using the command &lt;code&gt;/poll live &amp;lt;number of polls&amp;gt;&lt;/code&gt;.&lt;br&gt;
An excellent use-case for the Live Poll are stand-up and retro meetings. An additional use case is by teachers wanting to conduct &lt;strong&gt;timed quizzes&lt;/strong&gt; on Rocket.Chat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Late Retrieval&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My mentor suggested that in addition to having the Polls timed, the user should also be able to create a Live Poll at a time and retrieve or play it at a later time.&lt;/p&gt;

&lt;p&gt;I created a subcommand &lt;code&gt;/poll live save &amp;lt;number of polls&amp;gt;&lt;/code&gt;. It saves all the Poll states in the Poll App’s persistent storage. A unique &lt;strong&gt;Live Poll ID&lt;/strong&gt; is provided to the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUdEnQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puw7nh6isld1w95ixc76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUdEnQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puw7nh6isld1w95ixc76.png" alt="Live Poll ID generated after saving Live Poll within persistent storage.&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The created Live Poll can be subsequently retrieved using the &lt;code&gt;/poll live load &amp;lt;Live Poll ID&amp;gt;&lt;/code&gt;. In case the user enters a wrong or non-existent Live Poll ID they’re shown a notification. On executing the above command with a correct Poll ID the Live Poll can be retrieved at any time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GT_vKtm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AvA5bEwLTDGNTnMBS7LL_fQ.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Retrieving a pre-created Live Poll." src="https://res.cloudinary.com/practicaldev/image/fetch/s--GT_vKtm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AvA5bEwLTDGNTnMBS7LL_fQ.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of teachers using Rocket.Chat for exams, the Live Poll Late Retrieval features proves an excellent tool for teachers to create quizzes even weeks before and then schedule the quiz on D-day with ease. All this while having control over the time limit to answer each question.&lt;/p&gt;

&lt;p&gt;The PR for Live Poll and Live Poll Late Retrieval features can be found &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/13"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-an-unexpected-problem"&gt;
  &lt;/a&gt;
  Bonus: An Unexpected Problem!
&lt;/h3&gt;

&lt;p&gt;If you’ve been through my &lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/commit-push-merge-gsoc-coding-phase-1-51i0"&gt;Coding Phase 1 article&lt;/a&gt;&lt;/strong&gt; you would remember us using the &lt;strong&gt;&lt;a href="http://quickchart.io/documentation/word-cloud-api/"&gt;Quickchart Wordcloud API&lt;/a&gt;&lt;/strong&gt; to generate wordclouds.&lt;/p&gt;

&lt;p&gt;While this API works well when your Rocket.Chat server is connected to the Internet, a lot of organizations (my mentors org Credit Suisse, US Defence) use Rocket.Chat in an isolated environment. That means no Internet access. What then?&lt;/p&gt;

&lt;p&gt;We thought why not host Quickchart locally using their &lt;strong&gt;&lt;a href="https://github.com/typpo/quickchart"&gt;open-sourced codebase&lt;/a&gt;&lt;/strong&gt;? But…Wait-for-it. Quickchart has all APIs &lt;strong&gt;except&lt;/strong&gt; wordcloud open-sourced. Ha!&lt;/p&gt;

&lt;p&gt;Another problem was rate-limits. Quickchart has a rate-limit of &lt;code&gt;60 requests per minute per IP&lt;/code&gt; on their free tier. This means it is totally unsuitable for rooms with more than 60 members. My mentor Murtaza shared a perfect explaination. Quoting him from the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/6"&gt;PR&lt;/a&gt;&lt;/strong&gt; comment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if all the users are accessing the room from a different network then the limit is fair enough, however if all the users are on a private network behind a (Router + NAT) then although each of them will have a different local IP, but the same public IP — In that case if there is a single room with more than 60 users, they all would be identified as a single entity/IP and the rate limit will come into picture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;I thought, why can’t I build my own API and remove Quickchart out of the equation altogether? And:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCWUEzOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/349/1%2APHq45ZJJ4ibMrl8yI2e0zQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCWUEzOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/349/1%2APHq45ZJJ4ibMrl8yI2e0zQ.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within a few days I had our own in-house developed Wordcloud API. The best thing about it? It offered &lt;strong&gt;more&lt;/strong&gt; customizations than Quickchart Enterprise, worked without an Internet connection, had practically no rate-limits and was free.&lt;/p&gt;

&lt;p&gt;I have open-sourced the word-cloud API &lt;strong&gt;&lt;a href="https://github.com/RonLek/wordcloud-api"&gt;here&lt;/a&gt;&lt;/strong&gt;. Feel free to use it in your own projects or raise a PR for further customizations.&lt;/p&gt;

&lt;p&gt;My API also factors in the number of votes cast per option. For example, if English received twice as many votes as Hindi on a Poll then “English” would appear twice as big as “Hindi” within the word-cloud.&lt;/p&gt;

&lt;p&gt;I provided the repository link within the Poll App settings page for users to self-host the API. This solved our Wordcloud frenzy forever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you faced an unexpected problem while coding a project? How did you solve it? Could you find a solution or did you just leave it for the future? Let me know in the comments section below!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I write biweekly about my GSoC journey at Rocket.Chat and this was the fifth blog in this series. Follow my voyage on &lt;a href="https://dev.to/rohanlekhwani"&gt;DEV&lt;/a&gt; and &lt;a href="https://rohanlekhwani.medium.com/about"&gt;Medium&lt;/a&gt; ⭐️&lt;/p&gt;

&lt;p&gt;In case you haven’t checked out my previous blog about GSoC First Evaluations, go check it out now —it covers in detail how a GSoC student is evaluated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/gsoc-first-evaluations-all-you-need-to-know-2pjf"&gt;GSoC First Evaluations: All You Need to Know&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Like what I do? Help me pull my next all-nighter. Consider &lt;a href="https://www.buymeacoffee.com/rohanlekhwani"&gt;buying me a coffee&lt;/a&gt;.🥤&lt;/p&gt;

&lt;p&gt;Rohan Lekhwani is an open source contributor and enthusiast. You can connect with him on &lt;a href="https://www.linkedin.com/in/rohanlekhwani/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="http://github.com/RonLek"&gt;GitHub&lt;/a&gt;, &lt;a href="https://twitter.com/Rohanlekhwani"&gt;Twitter&lt;/a&gt;, and his &lt;a href="https://ronlek.github.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Brief History Of Bootstrap</title>
      <author>prosperyong</author>
      <pubDate>Thu, 26 Aug 2021 16:53:54 +0000</pubDate>
      <link>https://dev.to/yongdev/brief-history-of-bootstrap-3gi6</link>
      <guid>https://dev.to/yongdev/brief-history-of-bootstrap-3gi6</guid>
      <description>&lt;p&gt;Free and open source, Bootstrap is a framework for creating websites and online applications. It is designed on CSS and JavaScript (JS) to make it easier to create responsive, mobile-first websites and apps using the Bootstrap framework. As a result of responsive design, a website or app can recognise the size and orientation of a visitor's screen and dynamically adjust its presentation appropriately. Employers rely on mobile applications as their primary means of completing tasks, therefore it's important that designers take into account the technology's requirements.&lt;/p&gt;

&lt;p&gt;In addition to the framework, Bootstrap contains user interface components, layouts and JS tools. Source code and precompiled applications are also available. Bootstrap was created in mid-2010 by Mark Otto and Jacob Thornton at Twitter to improve the uniformity of tools used on the site and reduce maintenance costs for the site. Previous versions of the programme were referred to as Twitter Blueprint and Twitter Bootstrap.&lt;/p&gt;

&lt;p&gt;After a few months of development, Twitter conducted its inaugural Hack Week, and the project expanded as developers of various skill levels stepped in without any external supervision from the company. As of today, it still serves as a style guide for internal tool development.&lt;br&gt;
There have been almost twenty releases since the first on August 19, 2011, including two significant rewrites with v2 and 3. To make the entire framework more responsive, we included a responsive stylesheet in Bootstrap 2. By using Bootstrap 3, we made it responsive by default, with a mobile-first focus.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#share-your-thoughts-below"&gt;
  &lt;/a&gt;
  Share Your Thoughts Below
&lt;/h3&gt;

</description>
      <category>bootstrap</category>
      <category>history</category>
      <category>css</category>
      <category>framework</category>
    </item>
    <item>
      <title>Calculator</title>
      <author>Al Siam</author>
      <pubDate>Thu, 26 Aug 2021 16:21:01 +0000</pubDate>
      <link>https://dev.to/alsiamworld/calculator-epd</link>
      <guid>https://dev.to/alsiamworld/calculator-epd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-13"&gt;
  &lt;/a&gt;
  100daysofcode [Day - 13]
&lt;/h1&gt;

&lt;p&gt;Hello everyone, today I created a simple calculator using js.&lt;/p&gt;

&lt;p&gt;Live preview: &lt;a href="https://smart-js-calculator.netlify.app"&gt;https://smart-js-calculator.netlify.app&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQsiIaPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rfh0klfbpshzffft8ur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQsiIaPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rfh0klfbpshzffft8ur.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Bite-Sized CSS: Pseudo Classes vs. Pseudo Elements</title>
      <author>Albert Chang</author>
      <pubDate>Thu, 26 Aug 2021 15:54:11 +0000</pubDate>
      <link>https://dev.to/a89529294/bite-sized-css-pseudo-classes-vs-pseudo-elements-1fmf</link>
      <guid>https://dev.to/a89529294/bite-sized-css-pseudo-classes-vs-pseudo-elements-1fmf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pseudo-classes"&gt;
  &lt;/a&gt;
  Pseudo Classes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Starts with one colon.&lt;/li&gt;
&lt;li&gt;Deals with states, such as button:hover, button:focus.&lt;/li&gt;
&lt;li&gt;Selects the whole element.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;MDN Pseudo Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-elements"&gt;
  &lt;/a&gt;
  Pseudo Elements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Starts with double colons, ::before, ::first-letter, etc.&lt;/li&gt;
&lt;li&gt;Selects part of the element.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;MDN Pseudo Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Using Fixtures In Testing Symfony Application</title>
      <author>Jarek</author>
      <pubDate>Thu, 26 Aug 2021 15:47:12 +0000</pubDate>
      <link>https://dev.to/jszutkowski/using-fixtures-in-testing-symfony-application-47n2</link>
      <guid>https://dev.to/jszutkowski/using-fixtures-in-testing-symfony-application-47n2</guid>
      <description>&lt;p&gt;Recently I was creating a Symfony application. I used Doctrine as the ORM. I also wrote tests in which I used a database to check that the components were properly interacting with each other and that the data was fetched correctly. I needed a tool which would populate the database with sample data so that I didn't have to create them every time and that they would be the same in all tests.&lt;/p&gt;

&lt;p&gt;DoctrineFixturesBundle turned out to be an excellent tool for this purpose. It enables the creation of sample data that can later be used in tests. Data can be created in one file or divided, e.g. by entity. The bundle supports many databases such as MySQL, PostgreSQL or SQLite. What is more, fixtures can be used not only in tests - they can, for example, be used to fill the development database with sample data.&lt;/p&gt;

&lt;p&gt;I also used the LiipTestFixturesBundle. This tool includes services which would load fixtures into the test database. It allows writing functional tests as well. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing Dependencies
&lt;/h1&gt;

&lt;p&gt;Assuming we start our project from scratch, we will add a few packages. First, let's install Doctrine. We do this with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require symfony/orm-pack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, we will need a SymfonyMakerBundle that allows you to generate predefined test classes, controllers, migrations, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require &lt;span class="nt"&gt;--dev&lt;/span&gt; symfony/maker-bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DoctrineFixturesBundle installation is done by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require orm-fixtures &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need PHPUnit to write tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require &lt;span class="nt"&gt;--dev&lt;/span&gt; phpunit/phpunit symfony/test-pack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we install the Liip Test Fixtures Bundle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require liip/test-fixtures-bundle &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example-entities"&gt;
  &lt;/a&gt;
  Example Entities
&lt;/h1&gt;

&lt;p&gt;In such an application, let's create example entities that we will use in tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\ORM\Mapping&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="no"&gt;ORM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;#[ORM\Entity]&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Id]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\GeneratedValue(strategy: 'AUTO')]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Column(type: 'integer')]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;?int&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\Column(type: 'string', nullable: false)]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\Column(type: 'integer', nullable: false)]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\ManyToOne(targetEntity: Category::class)]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\JoinColumn(name: 'category_id', referencedColumnName: 'id')]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;Category&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Category&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\ORM\Mapping&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="no"&gt;ORM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;#[ORM\Entity]&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Id]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\GeneratedValue(strategy: 'AUTO')]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Column(type: 'integer')]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;?int&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\Column(type: 'string', nullable: false)]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#creating-fixtures"&gt;
  &lt;/a&gt;
  Creating Fixtures
&lt;/h1&gt;

&lt;p&gt;We create fixtures in classes which extend the Fixture class. We can add sample entities here and save them using EntityManager.&lt;br&gt;
We can also add references to such created entities - then we can use them in other fixtures classes.&lt;br&gt;
Moreover, if our class implements the DependentFixtureInterface interface, we will be able to specify which fixtures it depends on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\DataFixtures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Entity\Category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\Bundle\FixturesBundle\Fixture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\Common\DataFixtures\DependentFixtureInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\Persistence\ObjectManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryFixtures&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Fixture&lt;/span&gt; &lt;span class="c1"&gt;//implements DependentFixtureInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ObjectManager&lt;/span&gt; &lt;span class="nv"&gt;$manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Books'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Sport'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$categories&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$categoryName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$categoryName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;persist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'category-%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$categoryName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//    public function getDependencies(): array&lt;/span&gt;
&lt;span class="c1"&gt;//    {&lt;/span&gt;
&lt;span class="c1"&gt;//        return [OtherFixtures::class];&lt;/span&gt;
&lt;span class="c1"&gt;//    }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h1&gt;

&lt;p&gt;Tests should extend the KernelTestCase class. This will allow us to use database in them. Adding fixtures is now very easy. We can just call the loadFixtures method on the DatabaseToolCollection service, which takes an array of class names as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Tests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\DataFixtures\CategoryFixtures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Entity\Category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Entity\Product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\ORM\EntityManagerInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Liip\TestFixturesBundle\Services\DatabaseToolCollection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Liip\TestFixturesBundle\Services\DatabaseTools\AbstractDatabaseTool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Symfony\Bundle\FrameworkBundle\Test\KernelTestCase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductTest&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;KernelTestCase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;AbstractDatabaseTool&lt;/span&gt; &lt;span class="nv"&gt;$databaseTool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;EntityManagerInterface&lt;/span&gt; &lt;span class="nv"&gt;$entityManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;databaseTool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DatabaseToolCollection&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;EntityManagerInterface&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;testChangeProductPrice&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;databaseTool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;loadFixtures&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="nc"&gt;CategoryFixtures&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="nv"&gt;$category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;findOneBy&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Books'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;


        &lt;span class="nv"&gt;$product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;persist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cd"&gt;/** @var $product Product */&lt;/span&gt;
        &lt;span class="nv"&gt;$product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Books'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getCategory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>symfony</category>
      <category>tutorial</category>
      <category>phpunit</category>
    </item>
    <item>
      <title>React Native Image Resource Generator</title>
      <author>Sergei Butko</author>
      <pubDate>Thu, 26 Aug 2021 15:40:36 +0000</pubDate>
      <link>https://dev.to/svbutko/react-native-image-resource-generator-m14</link>
      <guid>https://dev.to/svbutko/react-native-image-resource-generator-m14</guid>
      <description>&lt;p&gt;Nearly every single react-native application uses images and icons to make them look more appealing to the end user or help them use it by providing additional information.&lt;/p&gt;

&lt;p&gt;Since react-native became publicly available the process of adding these images to apps didn't change much and while working with different people and apps there've been issues, problems and mild inconveniences about which I'd like to present here and most importantly give a solution to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues-problems-and-motivation"&gt;
  &lt;/a&gt;
  Issues, problems and motivation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#file-existence"&gt;
  &lt;/a&gt;
  File existence
&lt;/h4&gt;

&lt;p&gt;In order to use images and icons in code they first have to be imported. The most common way is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./my-icon.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By using &lt;em&gt;require&lt;/em&gt; we are manually setting the path to our file with little IDE support. And without any 3rd party plugins IDE can't guarantee whether the file exists or not, there won't be any error or at least warning to indicate that file doesn't exist. Like the file can be deleted, or you accidentally added some symbol into the require path. You will never know about it until you launch the app and open the screen where this icon is used.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#manual-typing"&gt;
  &lt;/a&gt;
  Manual typing
&lt;/h4&gt;

&lt;p&gt;As mentioned before:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By using &lt;em&gt;require&lt;/em&gt; we are &lt;strong&gt;manually&lt;/strong&gt; setting the path to our file...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If it's 1-5 icons it might be fine but if there are more than 10 or 50 or even 100 (there are lots of different cases). And always manually typing paths is tedious and takes your valuable time.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#icon-replacementremoval"&gt;
  &lt;/a&gt;
  Icon replacement/removal
&lt;/h4&gt;

&lt;p&gt;Possibly a single icon can be used in different components/screens and for some reasons we have to remove it and replace it with a new one. In this case we have to search for every usage of this icon in our application and replace it with a new one, although with search-and-replacement it's a bit easier but still takes time.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#icon-names"&gt;
  &lt;/a&gt;
  Icon names
&lt;/h4&gt;

&lt;p&gt;Not everybody create icons and UI itself, most of the time a designer does this job and while drawing and finishing icons they receive names and sometimes a person can write things like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bell icon.png
$.png
icon,t.png
icon's.png
icon".png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or there might be even non-Latin alphabet letters:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;звонок.png
zurück.png
鐘.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Not everybody do things like this but it's still possible and after seeing this one can only introduce coding/naming conventions to a designer and politely ask him to change this or in case if it's impossible to manually change it by yourself.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/svbutko/react-native-image-resource-generator"&gt;&lt;strong&gt;react-native-image-resource-generator&lt;/strong&gt;&lt;/a&gt; was developed to overcome all of these problems, add structure, save time and nerves.&lt;/p&gt;

&lt;p&gt;It's a simple CLI tool which generates code-friendly image URI source constants to use in projects.&lt;/p&gt;

&lt;p&gt;Create a folder and put all of your images there (&lt;em&gt;sub-folders are supported too&lt;/em&gt;), e.g.:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;project
│   package.json
│   src  
│
└───resources
│   │   fonts
│   │   settings
│   │
│   └───images
│       │   arrow_down.png
│       │   arrow_down@2x.png
│       │   arrow_down@3x.png
│       │   arrow_up.png
│       │   ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add script to your &lt;code&gt;package.json&lt;/code&gt; scripts or type into terminal:&lt;/p&gt;

&lt;p&gt;JavaScript&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;img-res-gen --dir=resources/images --out=src/common/ImageResources.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;TypeScript&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;img-res-gen --dir=resources/images --out=src/common/ImageResources.g.ts --ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The result of the command will create a file with static image URI sources, which will look something similar to this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* eslint-disable */&lt;/span&gt;
&lt;span class="cm"&gt;/* tslint:disable */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ImageURISource&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ImageResources&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/account.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;arrow_down&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/arrow_down.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;arrow_up&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/arrow_up.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/avatar.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/back.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/bank.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;bell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/bell.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After this use it anywhere you need:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ImageResources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You don't need to manually write requires anymore and stop worrying about file existence and path names.&lt;/p&gt;

&lt;p&gt;If you added or removed images, simply re-run the script to regenerate the file. IDE will give you a list of errors of used constants which don't exist anymore and you can simply replace them.&lt;/p&gt;

&lt;p&gt;As mentioned before it works with JavaScript and with TypeScript.&lt;/p&gt;

&lt;p&gt;To handle non-Latin letters and other symbols and follow naming conventions, the tool uses &lt;a href="https://github.com/dzcpy/transliteration"&gt;transliteration&lt;/a&gt; under the hood and transliterates file names.&lt;/p&gt;



&lt;p&gt;Hope you will use it in your projects and it will serve you well. And if you see any issues or would like to propose changes, feel free to create PRs!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/svbutko"&gt;
        svbutko
      &lt;/a&gt; / &lt;a href="https://github.com/svbutko/react-native-image-resource-generator"&gt;
        react-native-image-resource-generator
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>reactnative</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Building a Node.js API with Hapi.js and MongoDB</title>
      <author>Claradev32</author>
      <pubDate>Thu, 26 Aug 2021 15:33:33 +0000</pubDate>
      <link>https://dev.to/claradev32/building-a-node-js-api-with-hapi-js-and-mongodb-454c</link>
      <guid>https://dev.to/claradev32/building-a-node-js-api-with-hapi-js-and-mongodb-454c</guid>
      <description>&lt;p&gt;As our web applications scale, there is a need to reduce the development time by the use of a more reliable, and salable, tool, which gets the job done much faster.&lt;br&gt;
In this tutorial, we will build a Book Store API with Hapi.js and MongoDB. We will set up MongoDB, Hapi.js and build a RESTful API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Prerequisites&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This tutorial will be a hands-on demonstration, you can find the source code on &lt;a href="https://github.com/Claradev32/BookStore.git"&gt;Gitbub&lt;/a&gt;. If you'd like to follow along, be sure you have the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.mongodb.com/cloud/atlas"&gt;MongoDB&lt;/a&gt; Database - This tutorial uses MongoDB.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.dev/"&gt;Node.js&lt;/a&gt; - This tutorial uses Nodjs and NPM &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; - This tutorial uses Postman to test the API&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hapjs"&gt;
  &lt;/a&gt;
  What is Hap.js
&lt;/h2&gt;

&lt;p&gt;Hapi.js is a Nodejs framework used to build powerful, scalable applications, with minimal overhead and full out-of-the-box functionality. Hapi.js was originally developed to handle Walmart’s Black Friday scale, hapi continues to be the proven choice for enterprise-grade backend needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get started
&lt;/h2&gt;

&lt;p&gt;To get started to create a folder for your project and access it from your terminal. Open the folder in Visual Studio Code or any other IDE you prefer.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir BookApp //create a folder for the project
cd \BookApp // change directory to the app folder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Then initialize NPM, which will create a package.json file in our app root directory where we store our dependencies.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, we need to install some packages for our project.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @hapi/Hapi mongoose dotenv morgan --save 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let's take a look at our project structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U_Q7V5KI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0FEADB409A157CAA8DD14F2CA9AC086842E68BDBD81AF897CA3A753F47922E22_1629990892959_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U_Q7V5KI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0FEADB409A157CAA8DD14F2CA9AC086842E68BDBD81AF897CA3A753F47922E22_1629990892959_image.png" alt="Project Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Controllers - is where we handle the application logic&lt;/li&gt;
&lt;li&gt;Model - is where we handle our database collection
## Setting Up Hapi.js Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will start by creating a &lt;strong&gt;server.js&lt;/strong&gt; and *&lt;strong&gt;*file. Which is our application entry point.&lt;br&gt;
In your project root directory create and **server.js&lt;/strong&gt; file, then import the Hapi package we installed in the previous section, create an instance of the Hapi server, specify the &lt;strong&gt;port&lt;/strong&gt; you want the server to listen to, and &lt;strong&gt;host&lt;/strong&gt; address*&lt;em&gt;.&lt;/em&gt;* &lt;br&gt;
Next, we will create the root route, of our application with a GET request and create a &lt;strong&gt;handler.&lt;/strong&gt; For now, we will be sending a simple text to the client. &lt;br&gt;
Finally, we start the Hapi.js server with the &lt;strong&gt;start&lt;/strong&gt; method and display a message to the console.&lt;/p&gt;

&lt;p&gt;Add this code to your &lt;strong&gt;server.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Hapi = require('@hapi/hapi');

const server = Hapi.server({
  port: 4000,
  host: '127.0.0.1'
});

server.route({
  method: 'GET',
  path: '/',
  handler: (req, h) =&amp;gt; {

    return 'Hello I am Hapi!&amp;lt;';
  }
});

server.start();
console.log(`Server running on port ${server.info.uri}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It's to start our server. run this command on your command line to start the server.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, open your web browser, navigate to &lt;strong&gt;localhost:4000.&lt;/strong&gt; The server will respond with &lt;strong&gt;Hello I am Hapi!.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-mongodb-database"&gt;
  &lt;/a&gt;
  Creating a MongoDB Database
&lt;/h2&gt;

&lt;p&gt;Now that you have learned how to create a Hapi server, let's go ahead and set up MongoDB for our project.&lt;br&gt;
We will be using &lt;a href="https://mongoosejs.com/"&gt;Mongoose&lt;/a&gt; to communicate with the MongoDB database.&lt;br&gt;
Run this command to install Mongoose:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let’s connect MongoDB to our application using Mongoose. We will require mongoose, create a connection using the mongoose connect method and pass in our local server address to the server.&lt;br&gt;
If the database is up, you should see “DB started” on the console.&lt;br&gt;
Add this code to your server.js:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require("mongoose");
mongoose
 .connect("mongodb://localhost:27017/BookStore")
 .then(() =&amp;gt; {
  console.log("db started!");
 })
 .catch((e) =&amp;gt; {
  console.log(e);
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-book-schema"&gt;
  &lt;/a&gt;
  Creating Book Schema
&lt;/h2&gt;

&lt;p&gt;We now have our database up and running, let’s go ahead and create a book &lt;a href="https://mongoosejs.com/docs/guide.html"&gt;schema&lt;/a&gt;. Each book in our store will have a &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;author,&lt;/strong&gt; &lt;strong&gt;price&lt;/strong&gt;, &lt;strong&gt;supplier&lt;/strong&gt;, and &lt;strong&gt;createdAt.&lt;/strong&gt; &lt;br&gt;
Next, we define the type of data the documents should accept, then we validate the data from the users, to make sure they don’t submit empty records.&lt;br&gt;
Add this code to &lt;strong&gt;model/BookModel:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require("mongoose");
const BookSchema = new mongoose.Schema({
 name: {
  type: String,
  required: [true, "Book price is required"],
 },
 author: {
  type: String,
  required: [true, "Authors name is required"],
 },
 price: { type: Number, required: [true, "Book price is required"] },
 ISBN: {
  type: String,
  required: [true, "Book ISBN is required"],
 },
 supplier :{
  type: String,
  required: [true, "Suppliers name is required"],
 },
 createdAt: {
  type: Date,
  default: Date.now(),
 },
});
module.exports = mongoose.model("Books", BookSchema);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-books"&gt;
  &lt;/a&gt;
  Creating Books
&lt;/h2&gt;

&lt;p&gt;Now that we have defined our database schema. let’s go ahead and add a handler to add books to the store.&lt;br&gt;
First, we require the Books model, then create and export our handler function.&lt;/p&gt;

&lt;p&gt;Next, we create an object from the book model and add a record of the collection using the &lt;strong&gt;create&lt;/strong&gt; method. The data from the form is stored in the &lt;strong&gt;payload&lt;/strong&gt; as &lt;a href="https://www.w3schools.com/whatis/whatis_json.asp#:~:text=JSON%20stands%20for%20JavaScript%20Object,server%20to%20a%20web%20page"&gt;JSON&lt;/a&gt;, so we need to convert it to an object using the JSON parse method.&lt;br&gt;
Lastly, we return the created document as a response to the users.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookControllers.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.createBook = async (req, h) =&amp;gt; {
 const data = await Books.create(JSON.parse(req.payload));
 return status;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now lets go ahead and create a route for this handler function.&lt;br&gt;
add this code to your server.js&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({
 method: "GET",
 path: "/api/store",
 handler: controllers.getAllBooks,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#getting-all-books"&gt;
  &lt;/a&gt;
  Getting All Books
&lt;/h2&gt;

&lt;p&gt;Now that we can now add books to our database, let’s get the books stored in the database.&lt;br&gt;
First, we get the books from the form, which is stored as &lt;a href="https://www.w3schools.com/whatis/whatis_json.asp#:~:text=JSON%20stands%20for%20JavaScript%20Object,server%20to%20a%20web%20page"&gt;JSON&lt;/a&gt; in the payload. Then we need to convert the data to an object since we store data as objects to our collection.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookController:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.getAllBooks = async (req, h) =&amp;gt; {
 const books = await Books.find();
 return books;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now let's go ahead and create a route for this handler function.&lt;br&gt;
Add this code to &lt;strong&gt;server.js.&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({
 method: "POST",
 path: "/api/store",
 handler: controllers.createBook,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#getting-a-book"&gt;
  &lt;/a&gt;
  Getting a Book
&lt;/h2&gt;

&lt;p&gt;Let's go now get a book by its id. &lt;br&gt;
First, we need the &lt;strong&gt;id&lt;/strong&gt; of the Book selected, then we use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;object destructing&lt;/a&gt; to the id from the &lt;strong&gt;params&lt;/strong&gt; object.&lt;br&gt;
Next, we query the book collection to get a book by its id, using the &lt;strong&gt;findById&lt;/strong&gt; method. Then now return the book to the client.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookController:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.getBook = async(req, h) =&amp;gt; {
 const {id} = req.params
 const book = await Books.findById({_id:id});
 return book;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let’s go ahead and create the &lt;strong&gt;getBook&lt;/strong&gt; route with a patch request with an id parameter.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;server.js:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({
 method: "GET",
 path: "/api/store/{id}",
 handler: controllers.getBook,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#updating-a-book"&gt;
  &lt;/a&gt;
  Updating a Book
&lt;/h2&gt;

&lt;p&gt;Now, let create a handler function to update the book in our collection.&lt;br&gt;
First, we need to get the book id from the params object, also get the update data from the request payload. &lt;br&gt;
Next, we create an object from the books model and use the findByIdAndUpdate method to update the book whose id is specified in the request parameters. Then convert the payload to an object and pass it as the new value of the document.&lt;/p&gt;

&lt;p&gt;Next, we return the updated document with the &lt;strong&gt;new&lt;/strong&gt; option set to true and send the document to the client.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookController:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.updateBook = async (req, h) =&amp;gt; {
 const { id } = req.params;
 const data = JSON.parse(req.payload);
 const modifiedBook = await Books.findByIdAndUpdate({ _id: id }, data, {
  new:true,
 });
 return modified book;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let’s go ahead and create the update route with a patch request and an id parameter.&lt;br&gt;
Add this code to &lt;strong&gt;server.js:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({
 method: "PATCH",
 path: "/api/store/{id}",
 handler: controllers.updateBook,
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#deleting-a-book"&gt;
  &lt;/a&gt;
  Deleting a Book
&lt;/h2&gt;

&lt;p&gt;Let's go ahead and create our delete handler. &lt;br&gt;
First, we need to get the book id from the params object, then delete the book from the collection from the id.&lt;br&gt;
Next, we return null to the client, since the record no longer exists.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookController.js:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.deleteBook = async (req, h) =&amp;gt; {
 const { id } = req.params;
 await Books.findByIdAndDelete({ _id: id });
 return "null";
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let’s go ahead and create the delete route, which will listen to a delete request, then we pass an id as a parameter.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;server.js:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({&lt;br&gt;
 method: "DELETE",&lt;br&gt;
 path: "/api/store/{id}",&lt;br&gt;
 handler: controllers.deleteBook,&lt;br&gt;
})&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#testing-our-api"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Testing our API&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have implemented our RESTful API, let us go ahead and test them.&lt;br&gt;
Open Postman, test the with these endpoints.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store/"&gt;http://localhost:3000/api/store/&lt;/a&gt; - GET request&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store"&gt;http://localhost:3000/api/store&lt;/a&gt; - POST request with this request body&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{&lt;br&gt;
      "name": "Advanced Javacript",&lt;br&gt;
      "price": 2000,&lt;br&gt;
      "ISBN" : "AD90976",&lt;br&gt;
      "supplier": "mark James",&lt;br&gt;
      "author": "james"&lt;br&gt;
  }&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store/"&gt;http://localhost:3000/api/store/&lt;/a&gt;{id} - GET request&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store/"&gt;http://localhost:3000/api/store/&lt;/a&gt;{id} - PATCH request&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store/"&gt;http://localhost:3000/api/store/&lt;/a&gt;{id} - DELETE request&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Throughout this tutorial, you've learned how to create a RESTful API using Hapi.js. You've also experienced setting up MongoDB and testing API using Postman.&lt;br&gt;
Now, how would you use Hapi in your next project to create APIs?&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
