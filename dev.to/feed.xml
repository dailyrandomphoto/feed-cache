<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 43 of 100 Days of Code &amp; Scrum: Sixth Weekly Retrospective</title>
      <author>Rammina</author>
      <pubDate>Sun, 21 Nov 2021 03:47:05 +0000</pubDate>
      <link>https://dev.to/rammina/day-43-of-100-days-of-code-scrum-sixth-weekly-retrospective-4k34</link>
      <guid>https://dev.to/rammina/day-43-of-100-days-of-code-scrum-sixth-weekly-retrospective-4k34</guid>
      <description>&lt;p&gt;Happy weekend, everyone!&lt;/p&gt;

&lt;p&gt;...I still don't have my Internet back. However, I finished most of the single page skeleton of my company website, and I still made decent progress despite these impediments.&lt;/p&gt;

&lt;p&gt;It definitely felt like a frustratingly slow burn. Troubleshooting issues was annoying because I had to wait for my Mobile data (which is horrible where I live) to load a page. Looking for images took me a lot longer than it would normally when I had my DSL working. There was even a point where my connection had DNS issues for 2 days, and I could only load Discord and YouTube.&lt;/p&gt;

&lt;p&gt;I will admit that I've been pretty demotivated to work lately because I didn't feel like I'm in control of my daily routine. Thankfully, this challenge and the people who gave their support held me accountable. I couldn't just give up knowing that there are those who expect me to do my part.&lt;/p&gt;

&lt;p&gt;Thank you all for continuing to support me!&lt;/p&gt;

&lt;p&gt;Special thanks to my wife and editor, May for editing images and posting the blog on my behalf. Also, thanks for deciphering text messages and turning them into cover images.&lt;/p&gt;

&lt;p&gt;Let's move on to my weekly retrospective!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;build my company website (and avoid getting distracted by more interesting projects).&lt;/li&gt;
&lt;li&gt;continue to learn Next.js.&lt;/li&gt;
&lt;li&gt;go through the Typescript documentation at least 30 minutes each day.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;continue networking, but allocate less time to this (coding is more important).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-review"&gt;
  &lt;/a&gt;
  Weekly Review
&lt;/h2&gt;

&lt;p&gt;Here are the things I've managed to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;company homepage has most of the skeleton layout done (only missing styling and functionality).&lt;/li&gt;
&lt;li&gt;I connected the AWS SES, Lambda, and API Gateway services together (only needs to connect to the frontend now).&lt;/li&gt;
&lt;li&gt;I studied Typescript for a few days in the week.&lt;/li&gt;
&lt;li&gt;continued to network and expand my connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's no surprise that I wasn't able the fulfill many of my goals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-retrospective"&gt;
  &lt;/a&gt;
  Weekly Retrospective
&lt;/h2&gt;

&lt;p&gt;Moving on, let's tackle what I've managed to do well, what my shortcomings are, and what I could do better next time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-went-great"&gt;
  &lt;/a&gt;
  What Went Great
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I managed to finish a decent portion of the homepage for my website.&lt;/li&gt;
&lt;li&gt;learned more about implementing contact e-mails through AWS.&lt;/li&gt;
&lt;li&gt;expanded my network a little bit more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#some-mistakes-ive-made"&gt;
  &lt;/a&gt;
  Some Mistakes I've Made
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I didn't follow through with studying Typescript every day.&lt;/li&gt;
&lt;li&gt;barely learned new things about Next.js.&lt;/li&gt;
&lt;li&gt;didn't study Scrum enough.&lt;/li&gt;
&lt;li&gt;I kind of let my lack of motivation drag me down to much.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-i-could-improve-on"&gt;
  &lt;/a&gt;
  Things I Could Improve On
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;make a schedule to do my daily learnings, so I don't have to think about it too much.&lt;/li&gt;
&lt;li&gt;have learning resources already opened, so I don't have to spend much energy opening them or looking for them.&lt;/li&gt;
&lt;li&gt;commit to my goals more.&lt;/li&gt;
&lt;li&gt;prioritize tasks that are more likely to help me meet my weekly goals.&lt;/li&gt;
&lt;li&gt;have some backup in case I have Internet outage, that way I don't lose too much productivity.&lt;/li&gt;
&lt;li&gt;I should DEFINITELY install something that blocks me from checking certain sites at a specific time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you once again, everyone! Have a great weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Find the closest Color from the Tailwind CSS Color pallet</title>
      <author>Mohamed</author>
      <pubDate>Sun, 21 Nov 2021 03:45:36 +0000</pubDate>
      <link>https://dev.to/mohamedsm/find-the-closest-color-from-the-tailwind-css-color-pallet-5bka</link>
      <guid>https://dev.to/mohamedsm/find-the-closest-color-from-the-tailwind-css-color-pallet-5bka</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tailwind-css-color-matcher"&gt;
  &lt;/a&gt;
  Tailwind CSS color matcher
&lt;/h2&gt;

&lt;p&gt;put your Hex Code and edit the ranges to find the closes match to your color from the tailwind CSS color pallet,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bvOybou_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eblfikexqggl5c1x5vyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvOybou_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eblfikexqggl5c1x5vyx.png" alt="Screen Shot" width="880" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm using the HSL value to compare and find the best match for the color  that you want to find. &lt;br&gt;
The Background of the result section will use the input value as color, this will help you compare visually to see the best match&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link"&gt;
  &lt;/a&gt;
  Link
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://moh-slimani.github.io/tailwind-css-color-matcher"&gt;Tailwind CSS color matcher&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/moh-slimani/tailwind-css-color-matcher"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>vue</category>
      <category>design</category>
      <category>webdev</category>
    </item>
    <item>
      <title>First Exposion to Rust in Yassgy</title>
      <author>dbelokon</author>
      <pubDate>Sun, 21 Nov 2021 01:28:55 +0000</pubDate>
      <link>https://dev.to/belokond/first-exposion-to-rust-in-yassgy-o72</link>
      <guid>https://dev.to/belokond/first-exposion-to-rust-in-yassgy-o72</guid>
      <description>&lt;p&gt;This time I decided to torture myself and try learning Rust by writing integration tests. It was my first time using Rust and writing integration tests. However, &lt;a class="mentioned-user" href="https://dev.to/jerryhue"&gt;@jerryhue&lt;/a&gt;
 taught me a lot about Rust, so the process wasn't as painful as I expected😅&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h2&gt;

&lt;p&gt;I learned that integration tests are testing whether all the smaller modules in the code work when joined together. That is why they are called "integration" tests, they primarily focus on the integration aspect of the code. 💡&lt;/p&gt;

&lt;p&gt;In Rust, integration tests are conventionally placed on a directory named "tests", which should be inside the root directory of the project.&lt;/p&gt;

&lt;p&gt;The first problem I encountered was accessing the code to test it.😵 &lt;br&gt;
In C#, I knew that if I wanted to use a package, I would need to add a reference to it (usually added through the UI of the IDE I use), and then I could bring the name into the file with another name using the &lt;code&gt;using&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;In Rust, there is a similar mechanism, however, there is a slight difference and that is in the fact that it is built-in. All integration tests found in the &lt;code&gt;tests&lt;/code&gt; folder can access the application code to test it, if the application code is found in the &lt;code&gt;lib&lt;/code&gt; crate. This was the main issue. Before, &lt;a href="https://github.com/JerryHue/yassgy"&gt;&lt;code&gt;yassgy&lt;/code&gt;&lt;/a&gt; had all of the code placed inside the &lt;code&gt;binary&lt;/code&gt; crate, making it inaccessible for the &lt;code&gt;tests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I created &lt;a href="https://github.com/JerryHue/yassgy/issues/17"&gt;an issue&lt;/a&gt; to address this. JerryHue answered by making a small change so that &lt;code&gt;yassgy&lt;/code&gt; had its application code in the library crate.🥳&lt;/p&gt;

&lt;p&gt;After I pulled the changes, I started working on the integration tests!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-simple-integration-test"&gt;
  &lt;/a&gt;
  Creating a simple integration test
&lt;/h2&gt;

&lt;p&gt;I opened an &lt;a href="https://github.com/JerryHue/yassgy/issues/16"&gt;issue&lt;/a&gt; to create a small integration test that would test the "normal" behaviour of &lt;code&gt;yassgy&lt;/code&gt;, which means, no weird inputs or interactions, just normal values that &lt;code&gt;yassgy&lt;/code&gt; should accept with no issues.&lt;/p&gt;

&lt;p&gt;Because it was my first time implementing an integration test at all🙈🥶, I asked JerryHue for a little advice on how I should approach this.&lt;/p&gt;

&lt;p&gt;He basically told me that integration tests should work like unit tests, but with more assertions happening across several layers, and with real components (file systems, networks, databases, etc).&lt;/p&gt;

&lt;p&gt;For example, if there was a specific part of the code that created a file, my integration test should check that creation by opening that created file. If the opening went wrong, that means either &lt;code&gt;yassgy&lt;/code&gt; did something wrong, or the file system failed. The second situation is not as common, but it could happen.&lt;/p&gt;

&lt;p&gt;I mainly focused on two situations in my PR: passing a single file to &lt;code&gt;yassgy&lt;/code&gt; through the &lt;code&gt;StaticSite&lt;/code&gt;&lt;code&gt;struct&lt;/code&gt;, and passing a directory that contains several files.&lt;/p&gt;

&lt;p&gt;For the first case, I called the &lt;code&gt;StaticSite::from_file()&lt;/code&gt; method, to create a &lt;code&gt;StaticSite&lt;/code&gt; value, by passing a path to a single file. After creating the value, I then called &lt;code&gt;site.create()&lt;/code&gt;, and passed a file path to a directory that &lt;code&gt;yassgy&lt;/code&gt; will create to place the generated HTML file. &lt;/p&gt;

&lt;p&gt;After that, I did some assertions, just like the tests that JerryHue did for the &lt;code&gt;HtmlPage&lt;/code&gt; structure. First, I opened the HTML file that &lt;code&gt;yassgy&lt;/code&gt; created, and then I read its contents into a string to then assert whether it was equal to an expected string.&lt;/p&gt;

&lt;p&gt;For the second case, I did something similar. The major difference was when opening the resultant files, since first I had to open the directory and get all the filenames available in that directory, and then I had to open each file separately.&lt;/p&gt;

&lt;p&gt;Overall, I think the tests were easy to write, especially because JerryHue was really detailed on his explanations when we were discussing on how implement the test cases. It was nice to learn a bit of Rust.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>testing</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Simple Setup for Application Wide State in React</title>
      <author>Alex Merced</author>
      <pubDate>Sat, 20 Nov 2021 22:46:31 +0000</pubDate>
      <link>https://dev.to/alexmercedcoder/simple-setup-for-application-wide-state-in-react-5e7g</link>
      <guid>https://dev.to/alexmercedcoder/simple-setup-for-application-wide-state-in-react-5e7g</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/merced-react-hooks"&gt;For a lot of useful State Related Hooks, Checkout my Library merced-react-hooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To quick setup application wide state in your app just make a file called src/GlobalState.js in your react app.&lt;/p&gt;

&lt;p&gt;GlobalState.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// The initial state, you can setup any properties initilal values here.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// create the context object for delivering your state across your app.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// custom component to provide the state to your app&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// declare the GlobalState&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;globalState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGlobalState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;

  &lt;span class="c1"&gt;// create a function that'll make it easy to update one state property at a time&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateGlobalState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setGlobalState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;oldState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;oldState&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlobalContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;globalState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateGlobalState&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/GlobalContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// custom hook for retrieving the provided state&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useGlobalState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GlobalContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then you just have wrap your application with the GlobalState component in index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlobalState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/GlobalState&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then in any component you can use the state. Below is an example of a counter component using the GlobalState.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useGlobalState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../GlobalState.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;globalState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateGlobalState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGlobalState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;globalState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updateGlobalState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;globalState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;One&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updateGlobalState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;globalState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subtract&lt;/span&gt; &lt;span class="nx"&gt;One&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you go, now you can share state across your app in an easy that you can customize to your needs.&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>recoil</category>
      <category>state</category>
    </item>
    <item>
      <title>Add git blame on Visual Studio Code</title>
      <author>Sara Ounissi</author>
      <pubDate>Sat, 20 Nov 2021 22:21:31 +0000</pubDate>
      <link>https://dev.to/thetrendycoder/add-git-blame-on-visual-studio-code-23p4</link>
      <guid>https://dev.to/thetrendycoder/add-git-blame-on-visual-studio-code-23p4</guid>
      <description>&lt;p&gt;When you are working on a project, it is very useful to know the history of the modifications using git. If you are coding on Visual Studio Code like me, you should activate git blame by following these steps :&lt;br&gt;
&lt;strong&gt;- Open Visual Studio Code&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;- Press Ctrl+Shift+X (windows) or ⇧⌘X (Mac)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;- Type blame&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;- Click install on Git Blame&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, you can see at the bottom of the vs code window who is responsible for the line of code you have your cursor on, as you can see on the image below: line 37 Sara Ounissi (that would be me), pushed this code 1 day ago.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JHBXXoe0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sanoaph9vo9028xm612q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHBXXoe0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sanoaph9vo9028xm612q.png" alt="screen shot vs code" width="880" height="333"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, the aim of this option is not just to see who wrote the code, but why and when. You can click on the name of the person, this will open a pop-in, the button View will then redirect you to the git repository where you will see the whole modification, the name of the commit, etc… Hopefully, that will help you get more context.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_M357jUV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s641ajyx4z648k4taojv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_M357jUV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s641ajyx4z648k4taojv.png" alt="git blame vs code" width="449" height="82"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>visualstudiocode</category>
      <category>tutorial</category>
      <category>ide</category>
    </item>
    <item>
      <title>Elementary OS - Dev Environment Setup</title>
      <author>skino</author>
      <pubDate>Sat, 20 Nov 2021 22:13:26 +0000</pubDate>
      <link>https://dev.to/skino2020/elementary-os-dev-environment-setup-1jjh</link>
      <guid>https://dev.to/skino2020/elementary-os-dev-environment-setup-1jjh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;So every now and then i see something that catches my eye. Recently that seems to be Linux Distributions, over the last few months i have changed my distribution's a few times to try and find one i'm comfortable with. I moved from my iMac (getting a bit sluggish) to Ubuntu originally and it worked but i didn't "enjoy it", i then tried Manjaro, then Pop!_OS and then finally thought id have a go with &lt;a href="https://elementary.io/"&gt;Elementary OS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far i am really enjoying it! it feels a bit "Mac'ish", Looks nice and feels quick!&lt;/p&gt;

&lt;p&gt;But compared to Ubuntu its a little bit different with the Setup of the dev environment, so i thought id write up a little tutorial on setting a Laravel Dev Environment on Elementary OS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started!
&lt;/h3&gt;

&lt;p&gt;So as with any tutorial i do with Linux, we start with an update/upgrade.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update
sudo apt upgrade

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this is a fresh install you're setting up on, it could take few more mins than usual, Any messages you get for Diskspace just accept them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;After this operation, 36.4 MB of additional disk space will be used.
Do you want to continue? [Y/n] y

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-git"&gt;
  &lt;/a&gt;
  Install Git!
&lt;/h3&gt;

&lt;p&gt;Git is something use a lot anyway so its worth installing it. works from the IDE and normal terminals when working so it just helps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install git

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the install is finished type &lt;code&gt;git --version&lt;/code&gt; in you're terminal and you should see something like: &lt;strong&gt;git version 2.25.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Boom! GIt is installed!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-to-install-zsh"&gt;
  &lt;/a&gt;
  Time to install ZSH
&lt;/h3&gt;

&lt;p&gt;This is a personal preference for me, but i cant recommend the terminal application enough, it cleans up your terminal window to a nice clean output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install zsh

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can stick with ZSH in its basic form, or you can install &lt;a href="https://github.com/romkatv/powerlevel10k"&gt;PowerLineLevel10k&lt;/a&gt; later on, which again id recommend as there is a shed load of options to use. but for the purpose of this tutorial... i'm just doing the basic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-php-and-relevant-dependencies"&gt;
  &lt;/a&gt;
  Install PHP and Relevant dependencies.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install software-properties-common
sudo add-apt-repository ppa:ondrej/php
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install -y php8.0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And once that's done you can check the version by typing &lt;code&gt;php -v&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  ~ php -v                                        
PHP 8.0.10 (cli) (built: Aug 26 2021 15:50:07) ( NTS )
Copyright (c) The PHP Group
Zend Engine v4.0.10, Copyright (c) Zend Technologies
    with Zend OPcache v8.0.10, Copyright (c), by Zend Technologies

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#laravel-php-requirements"&gt;
  &lt;/a&gt;
  Laravel PHP Requirements
&lt;/h3&gt;

&lt;p&gt;The Laravel framework requires some PHP Dependencies, these can be installed in a single command. The Dependencies are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenSSL&lt;/li&gt;
&lt;li&gt;Common&lt;/li&gt;
&lt;li&gt;BCMath&lt;/li&gt;
&lt;li&gt;Curl&lt;/li&gt;
&lt;li&gt;mbstring&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;li&gt;zip&lt;/li&gt;
&lt;li&gt;sqlite3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you go to the Laravel website there will be a requirement for &lt;strong&gt;php-json&lt;/strong&gt; also. But, with PHP 8 it comes with it, so there is no extra install to complete. This will also include some of the Valet Dependencies.&lt;/p&gt;

&lt;p&gt;The command for all of these is as follows. (Type 'y' to the question about disk space)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install openssl php8.0-cli php8.0-curl php8.0-mbstring php8.0-mcrypt php8.0-xml php8.0-zip php8.0-common php8.0-bcmath php8.0-mysql php8.0-sqlite3

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-composer"&gt;
  &lt;/a&gt;
  Install Composer
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qj3tX8eL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/gbWtHrEpsQ8PRMk4dzo0Ilo5sYHPGvgFkp3UdIiR.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qj3tX8eL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/gbWtHrEpsQ8PRMk4dzo0Ilo5sYHPGvgFkp3UdIiR.jpg" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have no idea why but on my windows machine i used to learn dev work on i always struggled to get composer working properly. On Linux and macOS it just seemed easier...&lt;/p&gt;

&lt;p&gt;The following commands needs to be run in terminal, I tend to run them one at a time just in case, but as far as i'm aware you can run them all at the same time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: hash_file command is subject to change, so it might be worth checking for the latest command for this&lt;/em&gt; &lt;a href="https://getcomposer.org/download/"&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets make it Globally accessible so you can just run &lt;code&gt;composer &amp;lt;Your Command&amp;gt;&lt;/code&gt; Instead of &lt;code&gt;php composer.phar &amp;lt;your command&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You need to move the composer.phar file to a location that is part of your systems path. In my case running Elementary 6 its &lt;strong&gt;/usr/local/bin/composer&lt;/strong&gt; The command for this is simply;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mv composer.phar /usr/local/bin/composer

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now if you type &lt;code&gt;composer --version&lt;/code&gt; You should get your current composer version.&lt;/p&gt;

&lt;p&gt;Now we need to add composer to our global path so ZSH can use it correctly as well. Open the ZSH config;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano ~/.zshrc

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the following lines at the bottom of the file;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PATH=$HOME/.config/composer/vendor/bin:~/.composer/vendor/bin:$PATH
export PATH

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just above this command add a shortcut to a folder you will make in a second (if you want to). i add an alias to my &lt;strong&gt;zshrc&lt;/strong&gt; file called &lt;strong&gt;wd&lt;/strong&gt; and this will Change Directory to &lt;strong&gt;~/www&lt;/strong&gt; add the the below command BEFORE the PATH export.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias wd="cd ~/www"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Ctrl + X&lt;/code&gt; to exit and &lt;code&gt;Save modified buffer? y&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;Now apply them changes by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source ~/.zshrc

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-install-valet-linux"&gt;
  &lt;/a&gt;
  Lets install Valet Linux
&lt;/h3&gt;

&lt;p&gt;Valet is awesome, early in my Laravel journey i used homestead which is also very powerful but can be cumbersome. Average memory usage could be a gig or two whereas Valet..... 7mb..... Yep 7MB, you can park your domains so you can use ANY folder on your system you want for ease of use. I believe Valet was originally designed just for macOS but has since been ported to both Windows and Linux.&lt;/p&gt;

&lt;p&gt;If you checkout the requirements for Valet-Linux &lt;a href="https://cpriego.github.io/valet-linux/requirements"&gt;here&lt;/a&gt; you will see there are a number of Dependencies required. You'll also note that we have installed the &lt;strong&gt;PHP Extensions&lt;/strong&gt; and &lt;strong&gt;Optional Packages&lt;/strong&gt; already when we first installed PHP. we now just need to run the following command to grab the OS packages required for Linux Valet:&lt;/p&gt;

&lt;p&gt;Network Manager tools for Valet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install network-manager libnss3-tools jq xsel

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;one the prerequisites have installed it's time to time to composer require it from the Git repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer global require cpriego/valet-linux

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that has run you need to install the package like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;valet install

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you press enter to this it will start running through checks for the Valet installations. In my installation &lt;strong&gt;nginx&lt;/strong&gt;, &lt;strong&gt;php7.4-fpm&lt;/strong&gt;, &lt;strong&gt;dnsmasq&lt;/strong&gt; and &lt;strong&gt;inotify-tools&lt;/strong&gt; were not installed and Valet automatically pulled these down and installed for me.&lt;/p&gt;

&lt;p&gt;Once its finished you should have received: &lt;code&gt;Valet Installed successfully!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Time to create our websites folder. My preferred sites folder is &lt;strong&gt;www&lt;/strong&gt;. so lets make that in the root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir ~/www

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have created our websites folder we need to tell Valet that's where our sites will be hosted locally, With windows and homestead you need to add the directories manually to the &lt;strong&gt;Homestead.yaml&lt;/strong&gt; but with Valet it couldn't be any easier!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/www
valet park

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;﻿That's it, now when you add a site to that folder it will generate the necessary dns records and links so you can run something like: &lt;code&gt;raspada-blog.vm&lt;/code&gt; And it will load the site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-mysql"&gt;
  &lt;/a&gt;
  Install MySQL
&lt;/h3&gt;

&lt;p&gt;We could actually just go ahead and install the Laravel package but nine times out of ten we will need a MySQL DB so lets get that done now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install mysql-server -y

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember to just accept the installation message for MySQL.&lt;/p&gt;

&lt;p&gt;Now the next bit is entirely up to you, however i will say that i select &lt;code&gt;Y&lt;/code&gt; to everything in the next installation process. And when it gets to the Password Tool, select &lt;code&gt;0&lt;/code&gt; as your complexity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql_secure_installation

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're, installing on a server you want to add a higher level password for security reason... but locally, it really doesn't matter.&lt;/p&gt;

&lt;p&gt;And that is it, MySQL is installed and you can check the installation with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl status mysql.service

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you should see the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  ~ systemctl status mysql.service
● mysql.service - MySQL Community Server
     Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled)
     Active: active (running) since Sun 2021-09-12 15:08:29 UTC; 2h 24min ago
    Process: 800 ExecStartPre=/usr/share/mysql/mysql-systemd-start pre (code=exited, status=0/SUCCESS)
   Main PID: 926 (mysqld)
     Status: "Server is operational"
      Tasks: 37 (limit: 18755)
     Memory: 418.1M
     CGroup: /system.slice/mysql.service
             └─926 /usr/sbin/mysqld

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So were not using the root user in MySQL by default were going to create another user with all privileges, including grant privileges.&lt;/p&gt;

&lt;p&gt;To open up MySQL Command line Type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you will be faced with the &lt;code&gt;mysql&amp;gt;&lt;/code&gt; prompt now lets create a user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE USER 'raspadatest'@'localhost' IDENTIFIED BY 'ThisIsMyNewPassword12!';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the user created! now lets grant all privileges, do this by typing the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GRANT ALL PRIVILEGES ON *.* TO 'raspadatest'@'localhost'; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's our new user with rights to all tables we currently have but will also create in the future.&lt;/p&gt;

&lt;p&gt;We need to flush privileges now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FLUSH PRIVILEGES;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to test it we can exit out the MySQL prompt by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql&amp;gt; exit;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. which ever client you decide to use, login with what ever you created above on &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt; and you're good to go.&lt;/p&gt;

&lt;p&gt;Now if you want to manage the DB's with a GUI instead of going through command line you can install MySQL &lt;strong&gt;Workbench&lt;/strong&gt; or &lt;strong&gt;phpMyAdmin&lt;/strong&gt; i prefer to use DataGrip from JetBrains. I wont go through the specifics of that as it will depend on what you want to install. But if your following along and using Datagrip also you can simply run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo snap install datagrip --classic

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-laravel"&gt;
  &lt;/a&gt;
  Install Laravel!
&lt;/h3&gt;

&lt;p&gt;This bit is just a single command...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer global require laravel/installer

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it, CD into your website directory and run the:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;laravel new *site* - change site to you site name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;running the above command will add the relevant links so you can run site.test and you will be directed to your new application.&lt;/p&gt;

&lt;p&gt;All done, you now have a fully functioning Laravel development server locally with Elementary OS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-things-to-do"&gt;
  &lt;/a&gt;
  Other things to do
&lt;/h2&gt;

&lt;p&gt;Make sure you setup your local .env if your pulling from Git.... I stupidly spent around an hour wondering why i couldn't access my site! its because i didn't have an .env properly configured for local environment.&lt;/p&gt;

&lt;p&gt;Another thing i tend to do is change the domain from test to &lt;strong&gt;.vm&lt;/strong&gt; this is easily done by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;valet domain vm

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apache2 still showing up when you try access one of your sites? This happened with me and i needed to run the following to stop Apache2 from startup up with system reboot:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl disable apache2 &amp;amp;&amp;amp; sudo systemctl stop apache2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should stop Apache2 from starting when the machine boots up, we now need to get &lt;strong&gt;nginx&lt;/strong&gt; starting up with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable nginx

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Need to install NodeJS? use the following two commands one for NodeJS itself and also the build essentials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
sudo apt-get install -y nodejs

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt-get install -y build-essential

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All done!&lt;/p&gt;

&lt;p&gt;So far this has been my biggest Blog post so i hope it was all good, if you have any suggestions please drop me a message :D&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-word"&gt;
  &lt;/a&gt;
  Final Word
&lt;/h3&gt;

&lt;p&gt;I hope this little walk through has has been helpful for you all!.&lt;/p&gt;


&lt;p&gt;if you found this post useful please consider following me on twitter &lt;a href="https://twitter.com/skino2020"&gt;@skino2020&lt;/a&gt; and if you found it really helpful consider buying me a coffee &lt;a href="https://www.buymeacoffee.com/skino2020"&gt;here&lt;/a&gt;.&lt;br&gt;&lt;br&gt; &lt;/p&gt;
&lt;h2&gt;Raspada-Blog&lt;/h2&gt;  I post on my blog primarily and share the posts via API, please check out &lt;a href="//www.raspada-blog.co.uk"&gt;Raspada-Blog&lt;/a&gt; for more posts and information. If you have any questions please message me on twitter or use my website contact form.

</description>
      <category>linux</category>
      <category>php</category>
      <category>mysql</category>
    </item>
    <item>
      <title>Google Trends with Python</title>
      <author>Stan ku2ck4</author>
      <pubDate>Sat, 20 Nov 2021 21:26:31 +0000</pubDate>
      <link>https://dev.to/stankukucka/google-trends-with-python-5fh7</link>
      <guid>https://dev.to/stankukucka/google-trends-with-python-5fh7</guid>
      <description>&lt;p&gt;Thinking these days how we probably started to value more building blocks of our existence. As it started to feel more integrated into our existence as follows - health, water, food and often mentioned Covid that limited our ability to travel for some regions. To have overall knowledge of how does it goes worldwide there is well known &lt;a href="https://trends.google.com/trends"&gt;Google Trends&lt;/a&gt; online tool to work with. But there is something special for those who are in love with Python. Beautiful graphing library &lt;a href="https://plotly.com/python/"&gt;Plotly&lt;/a&gt; licensed under the MIT license. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scripts-to-download"&gt;
  &lt;/a&gt;
  Scripts to download
&lt;/h2&gt;

&lt;p&gt;Here is a simple installation prepared to work with on my GitHub repository with a &lt;code&gt;requirements.txt&lt;/code&gt; file and a short script to plot data into a nice histogram data form. &lt;a href="https://github.com/stanislav-kukucka/google-trends-analysis/tree/main/google-trends-analysis"&gt;Simply download these two files&lt;/a&gt; as follows so save to your desktop into some working directory &lt;code&gt;google-trends-analysis.py&lt;/code&gt; and &lt;code&gt;requirements.txt&lt;/code&gt; Create a directory named &lt;code&gt;google-trends-analysis&lt;/code&gt; and save these files into.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#activate-virtualenv"&gt;
  &lt;/a&gt;
  Activate Virtualenv
&lt;/h2&gt;

&lt;p&gt;I do assume you already have &lt;code&gt;virtualenv&lt;/code&gt; installed, but if not just execute &lt;code&gt;sudo pip3 install virtualenv&lt;/code&gt;. Enter into &lt;code&gt;google-trends-analysis&lt;/code&gt; directory with &lt;code&gt;cd google-trends-analysis&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd google-trends-analysis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make all stuff properly done activate &lt;code&gt;virtualenv&lt;/code&gt; with the creation of working virtual environment directory called &lt;code&gt;venv&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;virtualenv venv 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;google-trends-analysis&lt;/code&gt; directory looks like now like on picture hereunder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oL46rSmz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vghnq1nlpsvvo7ljrujr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oL46rSmz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vghnq1nlpsvvo7ljrujr.png" alt="Image description" width="349" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now activate this working environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pytrends-and-plotly-libraries-to-install"&gt;
  &lt;/a&gt;
  Pytrends and Plotly Libraries to Install
&lt;/h2&gt;

&lt;p&gt;All libraries needed to run Google Trends and Plotly correctly are saved in &lt;code&gt;requirements.txt&lt;/code&gt; file. Now execute installation in a virtual environment we already activated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take a while to pass all installations. You'll see in your terminal how all libraries are installed to properly run the script.&lt;/p&gt;

&lt;p&gt;After installation to run &lt;code&gt;google-trends-analysis.py&lt;/code&gt; script hereunder just type this command and enjoy response in your browser IP 127.0.0.1 on a random port.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 google-trends-analysis.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how it will look like, a nicely plotted graph in the final result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z0RQQnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nka8n9npv2vtuv07rnxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Z0RQQnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nka8n9npv2vtuv07rnxa.png" alt="Image description" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hAm3WZi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnc6r4namln60syh7aok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hAm3WZi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnc6r4namln60syh7aok.png" alt="Image description" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://unsplash.com/@edwardhowellphotography?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=CreditCopyTextGratitude"&gt;Edward Howell&lt;/a&gt; for the cover image from Unsplash.&lt;/p&gt;

</description>
      <category>python</category>
      <category>gratitude</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Why you should choose Node.js for developing server-side applications</title>
      <author>Matvey Romanov</author>
      <pubDate>Sat, 20 Nov 2021 21:20:20 +0000</pubDate>
      <link>https://dev.to/ra1nbow1/why-you-should-choose-nodejs-for-developing-server-side-applications-3jkf</link>
      <guid>https://dev.to/ra1nbow1/why-you-should-choose-nodejs-for-developing-server-side-applications-3jkf</guid>
      <description>&lt;p&gt;Node.JS is a technology that has transformed JavaScript, which is familiar to all web developers, from a client-side scripting language to a general-purpose language that has a large number of application use cases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uj2OJo6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkd5jv7fprmntj1oiwyc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uj2OJo6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkd5jv7fprmntj1oiwyc.png" alt="Image description" width="800" height="800"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-node-good-compared-to-other-serverside-scripting-technologies"&gt;
  &lt;/a&gt;
  How is Node good compared to other server-side scripting technologies?
&lt;/h2&gt;

&lt;p&gt;At the heart of how Node works.js is asynchronous. In addition to non-blocking I / O, this allows a server-side application on Node.js can handle much more client requests per unit of time than a similar application developed on most other server-side development technologies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does this mean for your business?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can start your own project with relatively low costs for the server infrastructure.&lt;/li&gt;
&lt;li&gt;With the right architecture, this allows you to scale your business without investing a lot of money.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What does this mean for developers?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you don't have an understanding of asynchronous code and experience working with it, it will be very difficult at first. It is difficult to understand that some instruction written "upstream" may be executed much later than the subsequent ones, or it may not be executed at all. You will need to thoroughly study the concepts of callbacks, promises, async-await wrappers over promises, synchronous and asynchronous generators, and iterators. But it is very well structured thinking, allows you to take a different look at the program execution process and understand how much time a "normal" - synchronous-program wastes during waiting periods, and also learn how to save this time.&lt;/li&gt;
&lt;li&gt;A good understanding of asynchronous development approaches greatly increases the value of a specialist in the labor market and, accordingly, allows you to qualify for a higher salary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node allows you to quickly develop an MVP. Node has already developed a large number of packages with various functions. You don't have to spend time developing the basic functionality, but just focus on the business logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does this mean for your business?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The new product will be brought to the market faster (TTM will decrease).&lt;/li&gt;
&lt;li&gt;Less money will be spent on the development process, as it will take less developer hours to create the first version of the product.&lt;/li&gt;
&lt;li&gt;Hypotheses formed during the initial market research will be tested faster, product adjustments will be made faster, and funds will eventually be turned around faster. This is a very important characteristic for project investors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What does this mean for developers?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don't have to reinvent the wheel on every project, which inevitably causes a lot of mistakes and makes the work boring, but you can work closely on tasks that are important for the project.&lt;/li&gt;
&lt;li&gt;Greater freedom in choosing an approach, building an architecture, and finalizing standard functionality that does not meet the requirements of the architect and/or customer.&lt;/li&gt;
&lt;li&gt;Node is built on the basis of the JavaScript language. As a result, this significantly increases the likelihood of developing full-stack specialists in the development team: front-enders who are well versed in the backend, or backenders who are well versed in the frontend.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node.js is very closely related to JavaScript, the syntax and architectural approaches are identical, only the "bindings" (browser and server) differ.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does this mean for your business?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The development team will include specialists with a broader view of the problem, which means that the burden on management will be reduced.&lt;/li&gt;
&lt;li&gt;The development process will be more efficient, because it is always easier and faster for a person (a full-stack developer) to negotiate with themselves than with another person. This reduces the cost of communication between specialists.&lt;/li&gt;
&lt;li&gt;There will be fewer errors in the development process, because floating bugs often occur at the intersection of different development technologies with different data types.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What does this mean for developers?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you had to work closely with the front-end before, then you have a good understanding of the processes that occur with data in the user part of the resource, and, as a result, a simpler dialogue with front-end users.&lt;/li&gt;
&lt;li&gt;A good full-stack specialist is often more valued in the market than a good backend or frontend developer&lt;/li&gt;
&lt;li&gt;If you have enough time allocated for the development of the project, you can independently create both the front and back, thereby avoiding a huge number of "collisions", which often take a lot of time to solve.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Naturally, like any other technology, Node has its drawbacks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MlPgsvy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zolx2srr3xirkp58kto3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MlPgsvy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zolx2srr3xirkp58kto3.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-nodes-weaknesses"&gt;
  &lt;/a&gt;
  What are Node's weaknesses?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Node works very quickly with a large number of lightweight queries (such as those that do not require long data processing, complex calculations, etc.), but its performance significantly decreases if the requests require large server resources.&lt;/li&gt;
&lt;li&gt;The language and its execution machine are very actively developed, and sometimes it happens that individual packages are incompatible with each other or with the current version of the platform, which can lead to a complete failure of the project when updating the "engine" or a separate package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Often, these shortcomings are used by opponents of Node in order to explain the reluctance to use it in production. Moreover, in confirmation of the first drawback, it is often stated that Node is single-threaded, so you can't write serious applications on it. At the current stage of technology development, this is completely wrong. First, there has long been an approach that runs multiple instances of the application and uses the Nginx web server as a load balancer. Secondly, in modern versions of Node, there is a built-in ability to create clusters of single-threaded processes, as well as special utilities for load balancing, automatic restart of processes, control over memory usage, etc.&lt;/p&gt;

&lt;p&gt;The second disadvantage of Node is quite easy to compensate for. First, never specify the package version in the "latest" format, but specify the exact version of the package that the system is guaranteed to be compatible with. Second, to avoid losing access to the exact versions of packages in the public register, create copies of them in the local register. Third, do not update the platform or package versions in the production environment without first testing this bundle in the development environment (the statement is obvious, but it is often ignored).&lt;/p&gt;

&lt;p&gt;will not be able to" overclock " Node in resource-intensive operations. But there is a solution: transfer operations that create a high hardware load to individual system components that are not written on Node, often even located on separate physical or virtual machines. There are various options for implementing this solution: microservice architecture, connecting modules written in other programming languages, etc.&lt;/p&gt;

&lt;p&gt;As technologies that allow you to implement high-performance functionality, it is convenient to use: Rust, Go, C++.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-is-it-convenient-to-use-node"&gt;
  &lt;/a&gt;
  Where is it convenient to use Node?
&lt;/h2&gt;

&lt;p&gt;The technology is perfect for most projects implemented in the modern world of web development. The founders of almost any project at the start dream of having their product used by as many people as possible. Sample projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;online stores;&lt;/li&gt;
&lt;li&gt;video and audio hosting services;&lt;/li&gt;
&lt;li&gt;instant messengers;&lt;/li&gt;
&lt;li&gt;social network;&lt;/li&gt;
&lt;li&gt;any b2c products.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all these directions, Node allows you to implement, as mentioned above, a quick start, and then fast, relatively inexpensive horizontal scaling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H9kJKfrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rff4xqxi8jdewkk5q33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H9kJKfrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rff4xqxi8jdewkk5q33.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projects-on-node"&gt;
  &lt;/a&gt;
  Projects on Node
&lt;/h2&gt;

&lt;p&gt;During the year leading up to writing this article, we applied technology to develop resources from scratch such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;freelance exchange;&lt;/li&gt;
&lt;li&gt;spare parts marketplace;&lt;/li&gt;
&lt;li&gt;realtime auction (API for the mobile app and web version);&lt;/li&gt;
&lt;li&gt;interactive system for creating media materials for - social networks;&lt;/li&gt;
&lt;li&gt;system for organising e-mail newsletters;&lt;/li&gt;
&lt;li&gt;assistant to the inspector of retail enterprises (API for the mobile app);&lt;/li&gt;
&lt;li&gt;patient assistant (API for the mobile app).&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>programming</category>
    </item>
    <item>
      <title>Different ways for User Authentication with NodeJS Part - 1</title>
      <author>Lavish Goyal</author>
      <pubDate>Sat, 20 Nov 2021 20:15:09 +0000</pubDate>
      <link>https://dev.to/lavig10/different-ways-for-user-authentication-with-nodejs-1odj</link>
      <guid>https://dev.to/lavig10/different-ways-for-user-authentication-with-nodejs-1odj</guid>
      <description>&lt;p&gt;First let us get over with the debate of &lt;strong&gt;Authentication&lt;/strong&gt; vs &lt;strong&gt;Authorization&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h2&gt;

&lt;p&gt;It is the process to verify if the user is telling the truth. For example: when we log into our account with some username and password, the process of verifying those credentials with the stored information in database and knowing that the user is really whom he/she claims to be is called Authentication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authorization"&gt;
  &lt;/a&gt;
  Authorization
&lt;/h2&gt;

&lt;p&gt;It is a security process to know what information user has access to. Giving someone permission to download a particular file on a server or providing individual users with administrative access to an application are good examples of authorization.&lt;/p&gt;

&lt;p&gt;In this article we are going to look into two different methods of User Authentication with NodeJS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sesssion Based Authentication&lt;/li&gt;
&lt;li&gt;Token Based Authentication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prerequisites&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; 
(You can use an Atlas account or local mongodb connection)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setup a new NodeJS project using &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt; whatever you like.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#session-based-authentication"&gt;
  &lt;/a&gt;
  Session Based Authentication
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/WtQ8dtZp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rYLn0uN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ncLPwDcm/session-auth.png" alt="session-auth.png" width="780" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This image very simply summarizes the session based authentication. Let's implement it in code and understand better.&lt;/p&gt;

&lt;p&gt;Execute the following line of code on your terminal within your project directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install express express-session mongoose connect-mongo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;express - For creating our server&lt;br&gt;
express-session - For creating our session based authentication&lt;br&gt;
mongoose - To Connect to our MongoDB Database&lt;br&gt;
connect-mongo - For storing our sessions in MongoDB Database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
const app = express();
const mongoose = require('mongoose');
const MongoStore = require('connect-mongo');
const session = require('express-session');

await mongoose.connect('your_mongo_url', (err, db) =&amp;gt; {
            console.log('MongoDB Connected....');
      });

app.get('/', (req,res)=&amp;gt;{
    res.send('&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;')  
})

app.listen(5000, () =&amp;gt; console.log(`Server 🔥🔥🔥 up on 5000`));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This block of code will make our server up and running on Port 5000. So if you now visit &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt; you will see the desired result.&lt;/p&gt;

&lt;p&gt;Now let us configure the MongoDB Store for session storage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use(session({
    secret: 'fiwafhiwfwhvuwvu9hvvvwv', // Never ever share this secret in production, keep this in separate file on environmental variable
    resave: false,
    saveUninitialized: true,
    cookie: { maxAge: oneDay },
    store: MongoStore.create({
        mongoUrl: 'your_mongo_url'
    })
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This block of code used the express-session package to create an empty Session object for a request. &lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/40381401/when-to-use-saveuninitialized-and-resave-in-express-session"&gt;Refer&lt;/a&gt; to this link to understand about saveUninitialized and resave properties in the object.&lt;/p&gt;

&lt;p&gt;So this will create a new empty session inside our mongodb database with a collection name sessions.&lt;/p&gt;

&lt;p&gt;Let's create a login route for user&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post('/login', async (req, res) =&amp;gt; {
    const { username, password } = req.body;    
try {
        let user = await User.findOne({ email: username })
        req.session.userId = user.id;

        console.log(req.session);

        res.redirect('/dashboard')

    } catch (err) {
        console.log(err);
        res.json({ msg: 'Server Error! Please reload page' });
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this block of code is important. Now when the user logs into its account with username and password we send that request to our server and store the request in the session. &lt;code&gt;req.session.userId&lt;/code&gt; is storing the unique _id of the user in the session and server creates a unique session id which is placed in the cookie which will be sent back to the client and stored in the client's browser as. Now whenever the client will make any request to the server the header will contain this cookie and we at server side are able to authenticate that particular user using that cookie in the header and obtaining the userId of the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports.authentication = async (req, res, next) =&amp;gt; {
    const userId = req.session.userId;
    if (!userId) {
        return res.redirect('/login?q=session-expired');
    }
    try {
        let user = await User.findById(userId);
        if (!user) {
            return res.redirect('/login?q=session-expired');
        }
        next();
    } catch (err) {
        console.log(err);
        res.json({ msg: 'Server error. Please reload page after sometime' })
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can create this type of middleware function where for every request on protected routes like dashboard, booking history, payment routes etc we can authenticate the user and display the correct data according to the user. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-session-based-authentication"&gt;
  &lt;/a&gt;
  Advantages of Session Based Authentication
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Cookies are small-sized values, easy to use and implement and can revoke the validity of the cookies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages-of-session-based-authentication"&gt;
  &lt;/a&gt;
  Disadvantages of Session Based Authentication
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sessions are stored in server/database and not on client side thus it makes it really difficult to scale the project when there is a huge number of requests simultaneously.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is where token based authentication (a modern and scalable solution) comes in. It solves the biggest headache with the session authentication that tokens are stored in client's browser thus making it really simple to scale the application.&lt;br&gt;
Stay Tuned for part 2 where we talk all about the Token Based Authentication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/lavishgoyal"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The ephemeral miniconf - Once Upon Perl Acronyms</title>
      <author>Tib</author>
      <pubDate>Sat, 20 Nov 2021 19:53:17 +0000</pubDate>
      <link>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-once-upon-perl-acronyms-366c</link>
      <guid>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-once-upon-perl-acronyms-366c</guid>
      <description>&lt;p&gt;(This was a talk at &lt;a href="https://thibaultduponchelle.github.io/the-ephemeral-miniconf/"&gt;The ephemeral miniconf&lt;/a&gt;, here are &lt;a href="https://thibaultduponchelle.github.io/talk-once-upon-perl-acronyms/"&gt;the slides&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Once upon a time, 
a guy named Larry Wall 
created a language called Perl.

He became the BDFL 
of this PL 
which values are TIMTOWTDI, 
DWIM, 
POLA 
and as all UNIXes: 
KISS 
and DOTADIW.

Perl enhances some key concepts 
of AWK, 
SED 
or GREP 
and even provides ACK 
and leads industry standard REGEX 
(PCRE).

PPL started to ❤️ Perl, 
meeting in PM groups 
and calling themself JAPH.

Eventually, big-sized meetings appeared 
like YAPC, 
TPC 
and TPRCIC 
(or chartreuse-sized ones like PTS).

There were also associations 
like TPF 
or EPO 
and individuals 
like YOU 
and ME.

FYI in 2021, 
I decided to organize TEM 
because hey, YOLO!

Technically speaking, 
you can say Perl 
or perl 
but not PERL 
nor the horrific PEARL... 😱

And if you don't know, 
go on IRC 
and ask PURL! 🤖 

People say 
"Only perl can parse Perl" 
but there is PPI, 
PPR 
and PLS.

Interfacing w/ native extensions is easy 
with FFI, 
XS, 
SWIG 
or WASM 
(and even easier with NCI in Raku).

Perl lovers contribute 
to the CPAN w/ ❤️  
via PAUSE 
so Perl users can use CPANP, 
CPANM 
or CPM 
to DRY.

You can browse MetaCPAN 
for DBI, 
EUMM, 
MB, 
LWP 
or PDL 
or even some idiot ACME.

Each DIST 
contains a whole lot of DOC 
in a format named POD 
and even a dedicated RT Q.

If you're in trouble, 
have a look at HOP 
or PBP.

IMHO 
it is a good PPT, 
but maybe a bit WTF... 
IDK 🤷
THX for attending 
and FWIW 
here is a well deserved GIF.

TY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wC1hWYDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t7k4nk8h4ybkz7zd8p7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wC1hWYDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8t7k4nk8h4ybkz7zd8p7.gif" alt="Camel GIF" width="400" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>perl</category>
    </item>
    <item>
      <title>Internal PR for Release 0.3</title>
      <author>irenejoeunpark</author>
      <pubDate>Sat, 20 Nov 2021 19:51:33 +0000</pubDate>
      <link>https://dev.to/irenejoeunpark/internal-pr-for-release-03-421g</link>
      <guid>https://dev.to/irenejoeunpark/internal-pr-for-release-03-421g</guid>
      <description></description>
    </item>
    <item>
      <title>Spread Operator and Rest Parameters</title>
      <author>Sergio Turpín</author>
      <pubDate>Sat, 20 Nov 2021 18:43:10 +0000</pubDate>
      <link>https://dev.to/sturpin/spread-operator-and-rest-parameters-4dij</link>
      <guid>https://dev.to/sturpin/spread-operator-and-rest-parameters-4dij</guid>
      <description>&lt;h3&gt;
  &lt;a href="#-english-version-"&gt;
  &lt;/a&gt;
  &lt;center&gt;- English Version -&lt;/center&gt;
&lt;/h3&gt;




&lt;p&gt;There are many pages wich explain what the &lt;strong&gt;Spread Operator&lt;/strong&gt; (also know as &lt;em&gt;three dots&lt;/em&gt;) and &lt;strong&gt;Rest Parameters&lt;/strong&gt; are. &lt;/p&gt;

&lt;p&gt;It is an operator that I really like and I would like to share with you some ways that I use it.&lt;/p&gt;

&lt;p&gt;📓 &lt;strong&gt;Spread Operator&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; [ 1, 2, 3, 4 ] (print as array)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we use the spread operator we get the values ​​independently:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; 1 2 3 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add an array to another:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;customers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Claudia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Borja&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;otherCustomers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sergio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherCustomers&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;customers&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; [ 'Claudia', 'Borja', 'May', 'Sergio', 'Jose' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Concat arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;customers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Claudia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Borja&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;otherCustomers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sergio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;concatCustomers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;customers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherCustomers&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;concatCustomers&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; [ 'Claudia', 'Borja', 'May', 'Sergio', 'Jose' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It also happens with objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jesús&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userAdrress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C/ Gran Vía&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;userAdrress&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; (Output)&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     name: 'Jesús',&lt;/span&gt;
&lt;span class="c1"&gt;//     surname: 'Cano',&lt;/span&gt;
&lt;span class="c1"&gt;//     age: 8,&lt;/span&gt;
&lt;span class="c1"&gt;//     address: 'C/ Gran Vía',&lt;/span&gt;
&lt;span class="c1"&gt;//     number: 34&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Destructuring on objects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jesús&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userAdrress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C/ Gran Vía&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;userAdrress&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Address:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; Name: Jesús Adrress: C/ Gran Vía&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cleaned up repeated elements from an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mySelect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mySelect&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; [1, 2, 3, 4, 5, 6, 7]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;📓 &lt;strong&gt;Rest Parameters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spread operator can also be used as a &lt;strong&gt;Rest Parameters&lt;/strong&gt;, rest of the parameters that are passed to a javascript function and form an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;qualities&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s qualities are: `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;qualities&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;quality&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;quality&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jaime&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sympathetic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Affective&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Talkative&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; (Output)&lt;/span&gt;
&lt;span class="c1"&gt;// Jaime's qualities are: &lt;/span&gt;
&lt;span class="c1"&gt;// Sympathetic&lt;/span&gt;
&lt;span class="c1"&gt;// Nice&lt;/span&gt;
&lt;span class="c1"&gt;// Affective&lt;/span&gt;
&lt;span class="c1"&gt;// Talkative&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, the rest parameters must be at the end, otherwise we will get an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fullstack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The possibilities are endless 😃&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🔍 Recommended reading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;MDN Web Docs Javascript - Spread Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/coding-at-dawn/how-to-use-the-spread-operator-in-javascript-b9e4a8b06fab"&gt;How to Use the Spread Operator (…) in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Functions/rest_parameters"&gt;MDN Web Docs Javascript - Rest Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://javascript.info/rest-parameters-spread"&gt;Javascript.info - Rest Parameters / Spread&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading 🙏  &lt;/p&gt;

&lt;p&gt;🌎 &lt;a href="https://sergioturpin.es"&gt;https://sergioturpin.es&lt;/a&gt;&lt;br&gt;
📷 &lt;a href="https://instagram.com/sergioturpin"&gt;Instagram&lt;/a&gt;&lt;br&gt;
🐦 &lt;a href="https://twitter.com/sergio_turpin"&gt;Twitter&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-versi%C3%B3n-en-espa%C3%B1ol-"&gt;
  &lt;/a&gt;
  &lt;center&gt;- Versión en Español -&lt;/center&gt;
&lt;/h3&gt;



&lt;p&gt;Hay muchas páginas que explican qué es el &lt;strong&gt;Spread Operator&lt;/strong&gt; (también conocido como operador de los tres puntos) y los &lt;strong&gt;Rest Parameters&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Es un operador que me gusta mucho y me gustaría compartir con vosotros alguna de las situaciones que suelo utilizarlo 😊&lt;/p&gt;

&lt;p&gt;📓 &lt;strong&gt;Spread Operator&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; [ 1, 2, 3, 4 ] (se imprime como un array)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cuando utilizamos el Spread Operator obtenemos los valores de manera independiente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; 1 2 3 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo utilizo también para añadir un array a otro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;clientes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Claudia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Borja&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;otrosClientes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sergio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;clientes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otrosClientes&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;clientes&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; [ 'Claudia', 'Borja', 'May', 'Sergio', 'Jose' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para concatenar arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;clientes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Claudia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Borja&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;otrosClientes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sergio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;concatenaClientes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;clientes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otrosClientes&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;concatenaClientes&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; [ 'Claudia', 'Borja', 'May', 'Sergio', 'Jose' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo suelo utilizar también con objetos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;datosUsuario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jesús&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apellido&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;edad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;direccionUsuario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;direccion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C/ Gran Vía&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;numero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;datos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;datosUsuario&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;direccionUsuario&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;datos&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; (Output)&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     nombre: 'Jesús',&lt;/span&gt;
&lt;span class="c1"&gt;//     apellido: 'Cano',&lt;/span&gt;
&lt;span class="c1"&gt;//     edad: 8,&lt;/span&gt;
&lt;span class="c1"&gt;//     direccion: 'C/ Gran Vía',&lt;/span&gt;
&lt;span class="c1"&gt;//     numero: 34&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;También para desestructuración de objetos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;datosUsuario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jesús&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apellido&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;edad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;direccionUsuario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;direccion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C/ Gran Vía&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;numero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;miObjeto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;datosUsuario&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;direccionUsuario&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;direccion&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;miObjeto&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nombre:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dirección:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;direccion&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; Nombre: Jesús Dirección: C/ Gran Vía&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para limpiar elementos repetidos en un array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;miSeleccion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;miSeleccion&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;numeros&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; [1, 2, 3, 4, 5, 6, 7]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;📓 &lt;strong&gt;Rest Parameters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spread operator se puede utilizar como un &lt;strong&gt;Rest Parameters&lt;/strong&gt;, el resto de parámetros son pasados a la función javascript y ya con ellos forma un array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;persona&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;cualidades&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Las cualidades de &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nombre&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; son: `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;cualidades&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;cualidad&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;cualidad&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;persona&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jaime&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Simpático&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Agradable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Afectivo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Charlatán&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; (Output)&lt;/span&gt;
&lt;span class="c1"&gt;// Las cualidades de Jaime son: &lt;/span&gt;
&lt;span class="c1"&gt;// Simpático&lt;/span&gt;
&lt;span class="c1"&gt;// Agradable&lt;/span&gt;
&lt;span class="c1"&gt;// Afectivo&lt;/span&gt;
&lt;span class="c1"&gt;// Charlatán&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como puedes ver, el &lt;strong&gt;Rest Parameters&lt;/strong&gt; está colocado al final, de otra manera nos devolvería un error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumaNumeros&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sumaNumeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fullstack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;resultado&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// =&amp;gt; 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Las posibilidades son infinitas 😃&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🔍 Lecturas recomendadas&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://platzi.com/contributions/entendiendo-el-spread-operator-en-javascript/?utm_source=google&amp;amp;utm_medium=paid&amp;amp;utm_campaign=14603491644&amp;amp;utm_adgroup=&amp;amp;utm_content=&amp;amp;gclid=CjwKCAiA1uKMBhAGEiwAxzvX90fxG8-kqRVKY0fphPi9gwOpHWurX978HobwLzyfBS7vmLBHQ7dRuBoCbcIQAvD_BwE&amp;amp;gclsrc=aw.ds"&gt;Entendiendo Spread Operator - Platzi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;MDN Web Docs - Spread Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://desarrolloweb.com/articulos/operador-spread-es6.html"&gt;Operador Spread - Desarrolloweb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Functions/rest_parameters"&gt;MDN Web Docs - Rest Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.w3cub.com/javascript/functions/rest_parameters"&gt;W3 Club Docs - Rest Parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leer 🙏  &lt;/p&gt;

&lt;p&gt;🌎 &lt;a href="https://sergioturpin.es"&gt;https://sergioturpin.es&lt;/a&gt;&lt;br&gt;
📷 &lt;a href="https://instagram.com/sergioturpin"&gt;Instagram&lt;/a&gt;&lt;br&gt;
🐦 &lt;a href="https://twitter.com/sergio_turpin"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
