<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is the difference between JOIN and INNER JOIN in SQL?</title>
      <author>Bobby Iliev</author>
      <pubDate>Thu, 11 Nov 2021 18:52:38 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/what-is-the-difference-between-join-and-inner-join-in-sql-lp7</link>
      <guid>https://dev.to/bobbyiliev/what-is-the-difference-between-join-and-inner-join-in-sql-lp7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;If you've ever used SQL, you probably know that &lt;code&gt;JOIN&lt;/code&gt;s can be very confusing. In this quick post we are going to learn what the difference between &lt;code&gt;JOIN&lt;/code&gt; and &lt;code&gt;INNER JOIN&lt;/code&gt; is!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#difference-between-join-and-inner-join"&gt;
  &lt;/a&gt;
  Difference between JOIN and INNER JOIN
&lt;/h1&gt;

&lt;p&gt;Actually, &lt;code&gt;INNER JOIN&lt;/code&gt; AND &lt;code&gt;JOIN&lt;/code&gt; are functionally equivalent. &lt;/p&gt;

&lt;p&gt;You can think of this as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INNER JOIN == JOIN
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you need to remember is that &lt;code&gt;INNER JOIN&lt;/code&gt; is the default if you don't specify the type when you use the word JOIN.&lt;/p&gt;

&lt;p&gt;However you need to keep in mind that &lt;code&gt;INNER JOIN&lt;/code&gt; can be a bit clearer to read. Especially in cases that you have a query containing other join types.&lt;/p&gt;

&lt;p&gt;Also, keep in mind that some database management system like Microsoft Access doesn't allow just join. It requires you to specify &lt;code&gt;INNER&lt;/code&gt; as the join type.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-an-raw-inner-join-endraw-"&gt;
  &lt;/a&gt;
  What is an &lt;code&gt;INNER JOIN&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Once we know that the functionality is qeuvealent, let's start by quickly mentioning what an &lt;code&gt;INNER JOIN&lt;/code&gt; is. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tyzCV1s1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/np7HEeX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tyzCV1s1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/np7HEeX.png" alt="INNER JOIN" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;INNER&lt;/code&gt; join is used to join two tables. However, unlike the &lt;code&gt;CROSS&lt;/code&gt; join, by convention, it is based on a condition. By using an &lt;code&gt;INNER&lt;/code&gt; join, you can match the first table to the second one.&lt;/p&gt;

&lt;p&gt;As we have a one-to-many relationship, a best practice would be to use a primary key for the posts &lt;code&gt;id&lt;/code&gt; column and a foreign key for the &lt;code&gt;user_id&lt;/code&gt;; that way, we can 'link' or relate the users table to the posts table. However, this is beyond the scope of this SQL basics eBook, though I might extend it in the future and add more chapters.&lt;/p&gt;

&lt;p&gt;As an example and to make things a bit clearer, let's say that you wanted to get all of your users and the posts associated with each user. The query that we would use will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rundown of the query:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SELECT * FROM users&lt;/code&gt;: This is a standard select we've covered many times in the previous chapters.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;INNER JOIN posts&lt;/code&gt;: Then, we specify the second table and which table we want to join the result set.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ON users.id = posts.user_id&lt;/code&gt;: Finally, we specify how we want the data in these two tables to be merged. The &lt;code&gt;user.id&lt;/code&gt; is the &lt;code&gt;id&lt;/code&gt; column of the &lt;code&gt;user&lt;/code&gt; table, which is also the primary ID, and &lt;code&gt;posts.user_id&lt;/code&gt; is the foreign key in the email address table referring to the ID column in the users table.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The output will be the following, associating each user with their post based on the &lt;code&gt;user_id&lt;/code&gt; column:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----+----------+----+---------+-----------------+
| id | username | id | user_id | title           |
+----+----------+----+---------+-----------------+
|  1 | bobby    |  1 |       1 | Hello World!    |
|  2 | devdojo  |  2 |       2 | Getting started |
|  3 | tony     |  3 |       3 | SQL is awesome  |
|  2 | devdojo  |  4 |       2 | MySQL is up!    |
|  1 | bobby    |  5 |       1 | SQL             |
+----+----------+----+---------+-----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the INNER JOIN could (in MySQL) equivalently be written merely as JOIN, but that can vary for other SQL dialects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main things that you need to keep in mind here are the &lt;code&gt;INNER JOIN&lt;/code&gt; and &lt;code&gt;ON&lt;/code&gt; clauses.&lt;/p&gt;

&lt;p&gt;With the inner join, the &lt;code&gt;NULL&lt;/code&gt; values are discarded. For example, if you have a user who does not have a post associated with it, the user with NULL posts will not be displayed when running the above &lt;code&gt;INNER&lt;/code&gt; join query.&lt;/p&gt;

&lt;p&gt;To get the null values as well, you would need to use an outer join.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is pretty much it! Now you know what the difference between a JOIN and an INNER JOIN is!&lt;/p&gt;

&lt;p&gt;In case that you are just getting started with SQL, I would suggest making sure to check out this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;ðŸ’¡ Introduction to SQL eBook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case that you are already use SQL on daily basis, and are looking for a way to drastically reduce the latency of your data analitycs, make sure to out &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMy5AXa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/52d9a6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMy5AXa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/52d9a6h.png" alt="Materialize - a streaming database" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Materialize is a Streaming Database for Real-time Analytics. Materialize is a reactive database that delivers incremental view updates and it helps developers easily build with streaming data using standard SQL.&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>DAOs Can End World Poverty (Probabily)</title>
      <author>Nukala Suraj</author>
      <pubDate>Thu, 11 Nov 2021 18:23:29 +0000</pubDate>
      <link>https://dev.to/lucidmach/daos-can-end-world-poverty-probabily-5e86</link>
      <guid>https://dev.to/lucidmach/daos-can-end-world-poverty-probabily-5e86</guid>
      <description>&lt;p&gt;By the end of this blog post, &lt;/p&gt;

&lt;p&gt;I'm pretty sure that you would be able to convince anyone that DAOs could potentially end world poverty&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-first-what-are-daos"&gt;
  &lt;/a&gt;
  but first what are DAOs???
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;DAO&lt;/em&gt;&lt;/strong&gt; stands for Decentralized Autonomous Organizations&lt;/p&gt;

&lt;p&gt;and the best way to explain DAOs would be on elaborating the individual terms&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decentralized-ao"&gt;
  &lt;/a&gt;
  Decentralized AO:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fiAxPWDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcR-cS61y0ZoQiiEH7xk1u-KN0TRcqBGZoH_yPY34Zx3MZ2ZqQes1fL-JiL-2iuFHHPxyfo%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fiAxPWDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcR-cS61y0ZoQiiEH7xk1u-KN0TRcqBGZoH_yPY34Zx3MZ2ZqQes1fL-JiL-2iuFHHPxyfo%26usqp%3DCAU" alt="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-cS61y0ZoQiiEH7xk1u-KN0TRcqBGZoH_yPY34Zx3MZ2ZqQes1fL-JiL-2iuFHHPxyfo&amp;amp;usqp=CAU" width="238" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You know how democracy is defined as &lt;em&gt;by the people, for the people, of the people&lt;/em&gt; but then it rarely does much about the people.&lt;/p&gt;

&lt;p&gt;We'd imagine on just listening to that definition that the people would make decisions and hence govern themselves... that my friend is a decentralized government i.e. there is no central authoritative, it's the locals/individuals that make the decisions&lt;/p&gt;

&lt;p&gt;Now here in DAOs, that is done using blockchain... you know that ledger system that every member of the network has access to and on verifying new transactions gets money(mining lol).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#d-autonomous-o"&gt;
  &lt;/a&gt;
  D Autonomous O:
&lt;/h3&gt;

&lt;p&gt;I don't know about you, but when I hear the term "Autonomous", I get a picture of Arnold Swazenblahblahger as the terminator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ovw9u2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.denofgeek.com/wp-content/uploads/2019/10/header_main_image_2.jpg%3Fresize%3D768%252C432" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ovw9u2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.denofgeek.com/wp-content/uploads/2019/10/header_main_image_2.jpg%3Fresize%3D768%252C432" alt="https://www.denofgeek.com/wp-content/uploads/2019/10/header_main_image_2.jpg?resize=768%2C432" width="768" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This term means that something that is carried out without human intervention...&lt;/p&gt;

&lt;p&gt;and in DAOs that is done using &lt;strong&gt;smart contracts&lt;/strong&gt; basically just contracts that are recorded on a blockchain.&lt;/p&gt;

&lt;p&gt;You do know that a contract is essentially a paper that records a promise of payment upon completion of the job right&lt;/p&gt;

&lt;p&gt;So smart contracts can be made for pre-agreed upon terms &lt;/p&gt;

&lt;p&gt;eg) every time the company makes a sale... 5% of the profit go to that NGO we're supporting   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#da-organizations"&gt;
  &lt;/a&gt;
  DA Organizations:
&lt;/h3&gt;

&lt;p&gt;we'll do I really have to break this term down lmao...&lt;/p&gt;

&lt;p&gt;basically any group of people doing anything... be it a business or a club or a charity &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOXDPkGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.insperity.com/wp-content/uploads/organization_structure1200x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOXDPkGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.insperity.com/wp-content/uploads/organization_structure1200x600.png" alt="https://www.insperity.com/wp-content/uploads/organization_structure1200x600.png" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-the-actual-f-would-daos-end-world-poverty-ffs"&gt;
  &lt;/a&gt;
  So how the actual f would DAOs end world poverty ffs
&lt;/h2&gt;

&lt;p&gt;lol If you could determine how DAOs could end world poverty just be reading that... you're probably Einstein level genius&lt;/p&gt;

&lt;p&gt;So let's say a hypothetical country "A" has a DAO based government.&lt;/p&gt;

&lt;p&gt;a government like any other organization requires income to function... &lt;/p&gt;

&lt;p&gt;how does a government earn money?&lt;/p&gt;

&lt;p&gt;through taxes of course&lt;/p&gt;

&lt;p&gt;let's say this government has adopted etherium/cardano/polygon/(any crypto that supports smart contracts)&lt;/p&gt;

&lt;p&gt;Every time a citizen in this country makes a purchase, he pays some sort of Goods and Service Tax.&lt;/p&gt;

&lt;p&gt;There could be a smart contract that says "whenever citizen makes a payment to a business, transfer 5% to military, 5% to the infrastructure fund, 5% to &lt;del&gt;bank account&lt;/del&gt; etherium addresses of people living below the poverty line"&lt;/p&gt;

&lt;p&gt;This need not be just on GST, or to the military/infrastructure/NPL fund. We could apply it to any tax paid inside the country and the money being transferred based on the proposed annual budget of the nation... all &lt;del&gt;automatically&lt;/del&gt; autonomously&lt;/p&gt;

&lt;p&gt;You get the point right...&lt;/p&gt;

&lt;p&gt;in a DAO based government &lt;/p&gt;

&lt;p&gt;the money goes directly to people who need money from people who have surplus&lt;/p&gt;

&lt;p&gt;instead of &lt;/p&gt;

&lt;p&gt;the money goes to the government, out of which some who knows and finally a negligible amount to the ones in need&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but"&gt;
  &lt;/a&gt;
  But
&lt;/h3&gt;

&lt;p&gt;Ok, so you might ask me how would the DAO know that a person is actually BPL and not someone who no longer is BPL&lt;/p&gt;

&lt;p&gt;well, the entire transaction history of every citizen of the country is recorded on the blockchain... we could have another smart contract that adds/removes people from the BPL list based on the gross income every month&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fun-fact"&gt;
  &lt;/a&gt;
  Fun Fact
&lt;/h2&gt;

&lt;p&gt;The above scenario is kinda implemented except it was implemented to help the refugees that flocked to the country of Ethiopia&lt;/p&gt;

&lt;p&gt;A company called Atala Prism developed a smart contract-based system in Ethiopia to fund the student refugee and the system was pretty much what we discussed in this blog post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link"&gt;
  &lt;/a&gt;
  Link:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://forum.cardano.org/t/emergency-identification-and-financial-inclusion-for-refugees-and-disaster-victims-through-blockchain/60685"&gt;https://forum.cardano.org/t/emergency-identification-and-financial-inclusion-for-refugees-and-disaster-victims-through-blockchain/60685&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;DAOs are basically a collection of pre-agreed upon smart contracts that control the finances of an organization&lt;/li&gt;
&lt;li&gt;any organization that adopts a DAO approach can get rid of corruption&lt;/li&gt;
&lt;li&gt;the benefits of adapting DAO will make blockchain more mainstream&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#homework"&gt;
  &lt;/a&gt;
  Homework
&lt;/h2&gt;

&lt;p&gt;Try to see how a local business you know would be if it were a DAO. What would the smart contracts controlling the finances of the business look like?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect"&gt;
  &lt;/a&gt;
  Connect???
&lt;/h2&gt;

&lt;p&gt;I'm pretty active on twitter and that's where you could reach out and we DM/PM talking about random tech stuff&lt;br&gt;
&lt;a href="https://twitter.com/lucidmach"&gt;@lucidmach&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>blockchain</category>
      <category>beginners</category>
      <category>speaking</category>
    </item>
    <item>
      <title>Free eBook for React Optimization and Development Resources</title>
      <author>Nilanth</author>
      <pubDate>Thu, 11 Nov 2021 18:04:28 +0000</pubDate>
      <link>https://dev.to/nilanth/free-ebook-for-react-optimization-and-development-resources-2d4</link>
      <guid>https://dev.to/nilanth/free-ebook-for-react-optimization-and-development-resources-2d4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ug3OuSZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er0vbdeoxdm5dp5qo2xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ug3OuSZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er0vbdeoxdm5dp5qo2xv.png" alt="ebook" width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReactJS Optimization Techniques and Development Resources&lt;/strong&gt; ebook helps you to optimize your React App during the development stage using some open-source packages and avoid unexpected issues during production ðŸš€.&lt;/p&gt;

&lt;p&gt;This also has a number of React development resources for&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;10+ Hosting&lt;/strong&gt; services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;10K Plus&lt;/strong&gt; Open source UI Components List and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;15+ Custom Hooks&lt;/strong&gt; to fasten your development.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Grab your Copy now on &lt;strong&gt;&lt;a href="https://nilanth.gumroad.com/l/NYkdN"&gt;Gumroad&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grab your free copy now&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get more updates on &lt;a href="https://twitter.com/Nilanth"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blogs"&gt;
  &lt;/a&gt;
  Blogs
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-structure-your-react-redux-app-4d24"&gt;How to Structure Your React Redux App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-reduce-react-app-loading-time-by-70-1kmm"&gt;How to Reduce React App Loading Time By 70%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/build-a-portfolio-using-next-js-tailwind-and-vercel-4dd8"&gt;Build a Portfolio Using Next.js, Tailwind, and Vercel with Dark Mode Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/no-more-import-in-react-2mbo"&gt;No More ../../../ Import in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-react-packages-with-1k-ui-components-2bf3"&gt;10 React Packages with 1K UI Components
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/5-packages-to-optimize-and-speed-up-your-react-app-during-development-4h5f"&gt;5 Packages to Optimize and Speed Up Your React App During Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-use-axios-in-an-optimized-and-scalable-way-with-react-518n"&gt;How To Use Axios in an Optimized and Scalable Way With React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/15-custom-hooks-to-make-your-react-component-lightweight-17cd"&gt;15 Custom Hooks to Make your React Component Lightweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-ways-to-host-your-react-app-for-free-27ga"&gt;10 Ways to Host Your React App For Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko"&gt;How to Secure JWT in a Single-Page Application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>C++ from the beginning - control flow</title>
      <author>Chris Noring</author>
      <pubDate>Thu, 11 Nov 2021 17:58:47 +0000</pubDate>
      <link>https://dev.to/azure/c-from-the-beginning-control-flow-21jg</link>
      <guid>https://dev.to/azure/c-from-the-beginning-control-flow-21jg</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR; this is a part of the series C++ for beginners, this part ia about control flows, the execution path taken through your program using constructs like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-2o2l"&gt;Your first program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-variables-22nm"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-input-and-output-5ad0"&gt;Working with input and output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-functions-5cnl"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Control flow, &lt;strong&gt;you are here&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Working with files&lt;/li&gt;
&lt;li&gt;Pointers&lt;/li&gt;
&lt;li&gt;Error management&lt;/li&gt;
&lt;li&gt;Structs and Classes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0what-is-control-flow-and-why-should-i-care"&gt;
  &lt;/a&gt;
  Â What is control flow and why should I care
&lt;/h2&gt;

&lt;p&gt;A control flow is the order in which the instructions are executed. Consider the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we have a &lt;code&gt;main()&lt;/code&gt;. The code will be executed from top to bottom, first the declaration of &lt;code&gt;value&lt;/code&gt;, followed by the call to &lt;code&gt;cout&lt;/code&gt;, to print the value and lastly to &lt;code&gt;return&lt;/code&gt; statement. &lt;/p&gt;

&lt;p&gt;However, sometimes you want to change that flow, so it's not top to bottom. The reason for wanting that is that you might have a condition in your code that says execute these statements instead of that, or you might want to repeat a set of statements.&lt;/p&gt;

&lt;p&gt;Let's look at how you can control the flow with &lt;code&gt;if&lt;/code&gt; next up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-a-new-execution-path"&gt;
  &lt;/a&gt;
  If, a new execution path
&lt;/h2&gt;

&lt;p&gt;By using &lt;code&gt;if&lt;/code&gt;, you can declare in the code that if a certain condition holds true, then the code should do something different. Typically, your &lt;code&gt;if&lt;/code&gt; constructs looks like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; construct wrapt a bool condition within parenthesis and uses curly braces to define what should happen if the condition evaluates to true. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Welcome to your account&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You can withdraw money"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where we to run this code, it would only print "Welcome to your account" as &lt;code&gt;account_balance &amp;gt; 0&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. To change that, we can modify &lt;code&gt;account_balance&lt;/code&gt; and set it to 10 for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Welcome to your account&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You can withdraw money&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your code would print:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Welcome to your account
You can withdraw money
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you saw here &lt;code&gt;account_balance &amp;gt; 0&lt;/code&gt;, is a boolean expression, you could just replace it with the values true or false. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0else-then-what-to-do"&gt;
  &lt;/a&gt;
  Â Else, then what to do
&lt;/h2&gt;

&lt;p&gt;So far, we looked at using &lt;code&gt;if&lt;/code&gt;, there's also &lt;code&gt;else&lt;/code&gt;. &lt;code&gt;else&lt;/code&gt; expresses that if the boolean expression for &lt;code&gt;if&lt;/code&gt; is false, then &lt;code&gt;else&lt;/code&gt; will be run. Therefore, &lt;code&gt;else&lt;/code&gt; can't exist without &lt;code&gt;if&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;else&lt;/code&gt;, you place it right after the &lt;code&gt;if&lt;/code&gt;, it doesn't need a boolean expression. Let's modify the code from before to incorporate &lt;code&gt;else&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Welcome to your account&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You can withdraw money&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"No money, you can' withdraw&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With our addition of &lt;code&gt;else&lt;/code&gt;, we know have another execution path, it will run &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;else&lt;/code&gt;. Given the code above, it will run the &lt;code&gt;if&lt;/code&gt;, let's change that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Welcome to your account&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You can withdraw money&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"No money, you can't withdraw&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this, your program will say:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Welcome to your account
No money, you can't withdraw
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might have another case, if you think about it, what if you balance is negative, that can happen. Looks look at that next with &lt;code&gt;else if&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0elseif-if-raw-if-endraw-fails"&gt;
  &lt;/a&gt;
  Â Else-If, if &lt;code&gt;if&lt;/code&gt; fails
&lt;/h2&gt;

&lt;p&gt;Ok, so you have another condition that you want to test if &lt;code&gt;if&lt;/code&gt; fails and it's a specific one, like checking for a negative balance? Great, that's when you should use &lt;code&gt;else if&lt;/code&gt;. Like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt; takes a condition within parenthesis. Also, just like &lt;code&gt;else&lt;/code&gt;, it can't exist without &lt;code&gt;if&lt;/code&gt;. Here's how we can modify our code to incorporate &lt;code&gt;else if&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Welcome to your account&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You can withdraw money&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_balance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You are overdrawn, please top up the balance to at least 0&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"No money, you can't withdraw&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where you to run this code, you would now get this output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;
&lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;overdrawn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;please&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the &lt;code&gt;else if&lt;/code&gt; is being hit. This program now has three different paths through it, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0loop-constructs-repeat-instructions"&gt;
  &lt;/a&gt;
  Â Loop constructs, repeat instructions
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; is way to make your code create different execution paths. Sometimes however, your code needs a different behavior, it needs to repeat a behavior until a condition is fulfilled.  Take an example where you want to keep the user in the program as long as they enter valid commands and only quit when the typed command equals the phrase "quit". Or imagine that you have an array of values, and you need to summarize them. In both these cases, you need a loop construct, albeit different types of loop constructs.&lt;/p&gt;

&lt;p&gt;Let's look at the first one &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#while-repeat-until-false"&gt;
  &lt;/a&gt;
  While, repeat until false
&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;while&lt;/code&gt;, you express that you want to repeat a set of instructions until false. Let's take the below code for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Value is"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// prints 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above will repeat this loop two times, as the first time, &lt;code&gt;value&lt;/code&gt; will be 3 and incremented to 4. Next iteration, 4 will be incremented to 5. The last time, it will fail the check as the value is 5.&lt;/p&gt;

&lt;p&gt;Here's another example, that you can use to create command-based console programs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Type a command: "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You typed: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Greetings"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Unknown command: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// add command definitions here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Bye"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A possible program execution of the above could be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; Type a command: hello
&amp;gt; Greetings
&amp;gt; Type a command: help
&amp;gt; Unknown command: help
&amp;gt; Type a command: quit
&amp;gt; Bye
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the use of &lt;code&gt;break&lt;/code&gt; in this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Calling &lt;code&gt;break&lt;/code&gt; while stop the loop from looping. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-when-you-know-more-about-what-you-loop"&gt;
  &lt;/a&gt;
  for, when you know more about what you loop
&lt;/h2&gt;

&lt;p&gt;There's another looping construct that it's good to know about, &lt;code&gt;for&lt;/code&gt;. &lt;code&gt;for&lt;/code&gt;, just like &lt;code&gt;while&lt;/code&gt; allows you to repeat instructions until a condition is met. Where it differs is that with a &lt;code&gt;for&lt;/code&gt; loop, you have additional concepts, an index variable that keeps track of starting point, a comparison point and increment point. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// will print values 0-9&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are three parts here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;int i = 0&lt;/code&gt;, this is where you initialize a variable&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i &amp;lt; 10&lt;/code&gt;, for every iteration, the loop construct will test this comparison, if it results in false then looping will stop&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i++&lt;/code&gt;, this is where i++ gets incremented for every iteration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A more real example can be iterating a set of records, let's say actions on a bank account:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Your account balance is: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;transactions&lt;/code&gt; are being iterated over, and for each item in its collection, the value is added to &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You've learned about &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;. These constructs are used to create different execution paths in your program. Your code will select one of these paths. Additionally, you were told about while and for loops that's used to repeat instructions. &lt;code&gt;for&lt;/code&gt; is different from &lt;code&gt;while&lt;/code&gt; as you have the idea of a variable that keeps tracks of what looping iteration you are on.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Interactive Feedback Design | CSS Feedback Working UI Design</title>
      <author>ziontutorial</author>
      <pubDate>Thu, 11 Nov 2021 17:53:24 +0000</pubDate>
      <link>https://dev.to/ziontutorial/how-to-make-interactive-feedback-design-using-html-css-js-19k0</link>
      <guid>https://dev.to/ziontutorial/how-to-make-interactive-feedback-design-using-html-css-js-19k0</guid>
      <description>&lt;p&gt;So today we will start our second JavaScript project a interactive feedback design using HTML CSS &amp;amp; Js . I have already create a very dedicated tutorial on this &lt;strong&gt;don't miss&lt;/strong&gt; this tutorial &lt;a href="https://ziontutorial.com/how-to-make-interactive-feedback-design-using-html-css-js/"&gt;Make Interactive Feedback Design Using HTML CSS &amp;amp; JS&lt;/a&gt; . Lets start our second JavaScript mini project  &lt;a href="https://dev.to/ziontutorial/javascript-clock-css-neumorphism-working-analog-clock-ui-design-5037"&gt;Also watch our first Analog Clock JavaScript project &lt;/a&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JsHNah9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l22kqzi19vk808d6ojtv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JsHNah9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l22kqzi19vk808d6ojtv.png" alt="Make Interactive Feedback Design Using HTML CSS &amp;amp; JS" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So lets understand the concepts of what is basically a Feedback design is.&lt;/p&gt;

&lt;p&gt;Feedback is a way to accept the user feedback for any product or service from user end . if you want you can use this feedback design source code in your project just feel free and use this code freely . &lt;/p&gt;

&lt;p&gt;If you want you can &lt;a href="https://ziontutorial.com/how-to-make-interactive-feedback-design-using-html-css-js/"&gt;watch the live demo&lt;/a&gt; with this link.&lt;/p&gt;

&lt;p&gt;if you are a beginner do follow my steps what i am doing to create this beautiful Analog Clock UI Design using html CSS and javascript. &lt;/p&gt;

&lt;p&gt;So lets start our feedback mini project. I have divide this tutorial in step wising do follow all the steps and make your first feedback design ui using HTML CSS &amp;amp; JS . &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Basic HTML Code&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
First of all add the basic html code to create this feedback UI Design using html css and javascript .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://kit.fontawesome.com/db2813a42b.js"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Feedback System&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"feedbackbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"emoji"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"emoji"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/Pain.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/Bored.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/Hello.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/Laugh.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/4Star.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-star"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-star"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-star"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-star"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-star"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;                    
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2: Basic CSS Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Courier New'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Courier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.58&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;199&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;232&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.04&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.feedbackbox&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.emoji&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.emoji&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#emoji&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-100px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.6s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.rating&lt;/span&gt; &lt;span class="nc"&gt;.fas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e4e4e4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3: JavaScript Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;emoji&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;emoji&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;translateX(0)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;translateX(-100px)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;translateX(-200px)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e4e4e4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;translateX(-300px)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffd93b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;emoji&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;translateX(-400px)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use DOM manipulation methods to manipulate the element and update at the webpage. Every star is treated as a Array and with that array we combine our particular emoji . And change it using on click method with star rating . if you have any query regarding this tutorial just comment below i will help you out.&lt;/p&gt;

&lt;p&gt;Hope you like this feedback design and you have learned how to make it from this article. You can watch the live demo of this design if you want and download the source code if necessary. You can also see the designs I have made many more.&lt;br&gt;
If there is any difficulty, of course you can comment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most important don't forget to leave a comment for next mini project&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://ziontutorial.com/"&gt;https://ziontutorial.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Management and the Future of AI with Azure's CTO</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 11 Nov 2021 17:51:23 +0000</pubDate>
      <link>https://dev.to/linearb/management-and-the-future-of-ai-with-azures-cto-59j5</link>
      <guid>https://dev.to/linearb/management-and-the-future-of-ai-with-azures-cto-59j5</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5a7inFgjcw1ea5rDBNZqXg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Has your entire career ever hinged on a single moment? For Darren Dillon, free beer in college set him on the path to a computer science degree and eventually a wildly successful career at Microsoft.&lt;/p&gt;

&lt;p&gt;Today, as the CTO of Azure and AI at Microsoft Industry Solutions, Darren leads an impressive team of over 130 engineers and is at the forefront of cloud computing and AI technology.&lt;/p&gt;

&lt;p&gt;Listen to Darren as he discusses his management philosophy, why he believes status reports are overrated, how to best think about building products for your end user and the implications of the GDPR on the future of AI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What GDPR means for the future of AI&lt;/li&gt;
&lt;li&gt;Why managers shouldn't believe status reports&lt;/li&gt;
&lt;li&gt;How "real people" use computers&lt;/li&gt;
&lt;li&gt;Advice for setting boundaries when working with close friends&lt;/li&gt;
&lt;li&gt;The future of cloud computing and Azure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 2000 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFu9oAAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdkw3dauehushxuopkb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFu9oAAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdkw3dauehushxuopkb8.png" alt="https://discord.com/invite/devinterrupted" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ai</category>
      <category>azure</category>
      <category>cloud</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Good Vs Bad Performance Test Engineer</title>
      <author>NaveenKumar Namachivayam âš¡</author>
      <pubDate>Thu, 11 Nov 2021 17:48:29 +0000</pubDate>
      <link>https://dev.to/qainsights/good-vs-bad-performance-test-engineer-2fj9</link>
      <guid>https://dev.to/qainsights/good-vs-bad-performance-test-engineer-2fj9</guid>
      <description>&lt;p&gt;In my &lt;a href="https://qainsights.com/interviewing-hiring-software-performance-test-professionals-book-review/" rel="noreferrer noopener"&gt;last post&lt;/a&gt;, I have shared my views about James Pulley's latest book &lt;a href="https://amzn.to/3wlB6zw" rel="noreferrer noopener"&gt;Interviewing &amp;amp; Hiring Software Performance Test Professionals&lt;/a&gt;. The first chapter deals with the cost of hiring bad talent and its consequences. So I thought, why not come up with what good and bad performance test engineers do in their project. I hope this comparison will help you to transform into a valued performance test engineer and avoid the mistakes of bad performance test engineers. Let us see the difference between good and bad performance test engineers' traits. &lt;/p&gt;

&lt;p&gt;Please scroll down further to see the table :)&lt;/p&gt;

&lt;h2&gt;Traits&lt;/h2&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;&lt;tbody&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;&lt;em&gt;&lt;strong&gt;Good Performance Test Engineers&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;&lt;em&gt;&lt;strong&gt;Bad Performance Test Engineers&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;always cares for performance&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;has a &lt;em&gt;who cares&lt;/em&gt; mindset&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;always learn new technology, tools, and products&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;won't learn anything new&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;involved in all the phases&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;involves only in testing phase&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;understand the architecture, network, protocols, and business transactions&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;understands only business transactions&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;develop a strategy to find performance issues&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;do ad hoc runs&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;starts with single user testing.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;directly goes to load testing&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;validates their scripts using unit/smoke testing&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;don't pay attention to unit/smoke testing&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;starts the test and observe the whole run.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;starts the test and run for a coffee or tea.&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;validates the test data before starting the test.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;keep on reusing the test data&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;validates the response properly&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;validates only the status code&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;loves automating other tasks&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;don't do automation&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;carefully develop workload model&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;follows a generic workload model&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;knows how the production environment works.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;no insights into the production environment&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;validates the runtime settings, logging level, duration, and other configuration&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;don't pay attention to the configuration and reuses them&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;analyze the test results and provide value to the report&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;copies the test result and share it with the stakeholders as it is&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;deep dive into response time, transactions pass/fail, throughput, errors per second, CPU, Memory, Network, Disk, Garbage collection, and more.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;limited to response time analysis &lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;knows statistical methods&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;don't apply statistial analysis&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;validates the database or other means after the test is done&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;don't perform any validation&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;validates the performance tool infrastructure &lt;/td&gt;
&lt;br&gt;
&lt;td&gt;don't validate the test infrastructure &lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;works closely with architects, developers and product owners&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;no or limited interactions with the team&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;implements CI/CD and integrates with the dev pipeline&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;no CI/CD mindset&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;share knowledge and document the findings and best practices.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;don't share their knowledge and no/limited documentation &lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;takes full responsibility for missed defects&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;don't take responsibility and blames others&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;keep improving their tests and adapt to new features and releases&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;follows a process for prolonged duration.&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;good at communication and proactive in raising issues.&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;bad/unclear communication and reactive in raising issues&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;tr&gt;
&lt;br&gt;
&lt;td&gt;brings value to the team, product and organization&lt;/td&gt;
&lt;br&gt;
&lt;td&gt;brings no value&lt;/td&gt;
&lt;br&gt;
&lt;/tr&gt;
&lt;br&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
Good Vs Bad Performance Test Engineer Traits


&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/Thank-you-for-being-good.jpeg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HZMC-HG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/Thank-you-for-being-good.jpeg" alt="Good Vs Bad Performance Test Engineer" width="880" height="738"&gt;&lt;/a&gt;Good Vs Bad Performance Test Engineer&lt;/p&gt;

&lt;p&gt;If I miss anything critical, please share it in the comment. &lt;/p&gt;

</description>
      <category>webperf</category>
      <category>performance</category>
      <category>testing</category>
    </item>
    <item>
      <title>Data Science Feels Like a Fake Entrepreneur in a YouTube Ad</title>
      <author>kuwala</author>
      <pubDate>Thu, 11 Nov 2021 17:39:13 +0000</pubDate>
      <link>https://dev.to/kuwala_io/data-science-feels-like-a-fake-entrepreneur-in-a-youtube-ad-3g53</link>
      <guid>https://dev.to/kuwala_io/data-science-feels-like-a-fake-entrepreneur-in-a-youtube-ad-3g53</guid>
      <description>&lt;p&gt;&lt;strong&gt;Philosophers, politicians, and visionaries&lt;/strong&gt; are talking about a future in 2030 in which autonomous vehicles will be driving through the streets, cities will be able to adapt efficiently to environmental influences, and digitization will be a crucial tool for operating efficiently and saving resources.&lt;/p&gt;

&lt;p&gt;The world we live in today is subject to constant technological change. With the commercialization of the Internet, companies quickly recognized the value of data. The most authoritative innovations of this time are based on fast data-driven decisions and intelligent algorithms fed by the constant linking of data.&lt;/p&gt;

&lt;p&gt;Examples include the recommendation algorithms of Amazon, Youtube, and Netflix or surge pricing of Uber and Airbnb and any Ad-based business (hello Facebook).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSi7jaOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96vl47kulzipzlpdk4hn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSi7jaOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96vl47kulzipzlpdk4hn.png" alt="Utopia_2030" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data are archived building blocks of knowledge&lt;/strong&gt; that can be used to be more predictive in a world of rapid change and shape the world into a better place.&lt;/p&gt;

&lt;p&gt;Governments launched open data initiatives. Public data is made available to the general public so that businesses and individuals can work with the data. Data scientists, professions that use programming to analyze large amounts of data, became the sexiest job description in the technology world and, as a result, a scarce resource for companies. &lt;/p&gt;

&lt;p&gt;They are under enormous pressure by expectations to make the world and especially the company more innovative.&lt;/p&gt;

&lt;p&gt;While at the same time, they face a massive flood of data from a wide variety of data sources and formats. Surveys and studies show that data scientists spend up to 80% of their time searching, collecting, preparing, and integrating data. Rarely are the desires of policymakers and businesses and the true reality so far apart.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lErbG8fc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cim0r4jljeq4obge7z8h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lErbG8fc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cim0r4jljeq4obge7z8h.png" alt="reality_2021" width="682" height="556"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I worked as a Data Scientist and Data Consultant for many larger companies.&lt;/p&gt;

&lt;p&gt;In a project for the city of Leipzig, I advised their administration on its Open Data strategy.&lt;/p&gt;

&lt;p&gt;So in December 2019, I audited hundreds of data sources of the city of Leipzig to find out how to make the data more readily available for relevant target groups (Data Scientists and Developers) and how to simplify data access.&lt;/p&gt;

&lt;p&gt;I spent my time just before Christmas combining hundreds of CSV files and then evaluating when, where, and to which granularity the data was available.&lt;/p&gt;

&lt;p&gt;Together with the city of Leipzig, the results of the data audit were presented and discussed at the world-famous Chaos Communication Congress. The audience was about to challenge us! The results were clear: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Data scientists approach external data with great skepticism&lt;/strong&gt; regarding data quality. For good reasons, the data documentation is mostly not very useful, file formats vary, and the link between data sets is virtually non-existent.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Searching for high-quality data is tedious and takes too long.&lt;/strong&gt; Open Data platforms primarily launch their data on different subdomains. The data among them is not connected.&lt;/li&gt;
&lt;li&gt;Moreover, &lt;strong&gt;integrating data for digital products from various data sources requires considerable data standardization&lt;/strong&gt; and harmonization effort. Letâ€™s face it. My mother also works with Excel files for her private finances. But CSV, Excel, and PDF formats are not formats that facilitate the work of a Data Scientist or even an Engineer. And thatâ€™s the target group an open data platform should go for.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Then 2020 â€” Covid Year.&lt;/strong&gt; Give yourself a second to go through the changes and impacts on us, on you, and others.&lt;/p&gt;

&lt;p&gt;An interesting side effect: The world became a statistician. Curves were analyzed but never was the intensive care bed occupancy predicted correctly.&lt;/p&gt;

&lt;p&gt;Traffic modelers from TU Berlin (Technical University of Berlin) and physicists were consulted, but even they canâ€™t build good models with bad data. When I had a chance to talk with a science task force working on predicting ICUbed occupancy, they told me they were nowhere near modeling.&lt;/p&gt;

&lt;p&gt;They were still trying to find and use the correct numbers from three different data sources of ICU bed occupancy. And to be honest, I donâ€™t think they cracked the nut till this point. I have never felt so far away from the 2030 utopias as I did this spring 2020. &lt;/p&gt;

&lt;p&gt;How can we talk about mobility transformation when e-scooters remain a fun factor for hipsters but not an efficient mobility solution? How can we dream of self-driving cars? How are we going to use technology to solve our problems?&lt;/p&gt;

&lt;p&gt;Throw away all your AI/ML bullshit bingo when you cannot understand the world in clean data. Data Science thus becomes in that quarter a joke for me. But when you lose confidence in others, you find it in yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yY63NCr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxdygvn3h2hhm1dnapsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yY63NCr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxdygvn3h2hhm1dnapsq.png" alt="greta_meme" width="682" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I didnâ€™t get it. Why is data integration from external data sources so tricky? After all, the ETL process has been around since 1980. There is at least a starting point for standardizing data.&lt;/p&gt;

&lt;p&gt;ETL is the process of extracting, transforming, and loading data. The term first became prominent for me when &lt;a href="https://www.alteryx.com"&gt;Alteryx&lt;/a&gt;, with its visual interface, made the process accessible to analysts and data scientists. Data came in, then it was transformed, and at the end, you had a dataset that you could visualize and report in Tableau.&lt;/p&gt;

&lt;p&gt;In an era with a lot of data, the ETL process has shifted back towards the engineer. Due to circumstances, the last two letters were swapped to ELT. Data is now extracted via APIs to fit into a data warehouse (Snowflake), loading is orchestrated (Airflow), data is observed (Great Expectations) and transformed directly in the table of data warehouses (DBT).&lt;/p&gt;

&lt;p&gt;This works pretty well if you want to combine your Mailchimp data with your CustomerID. This works pretty well as long as you have a reliable source (e.g., Mailchimp). The data is connected via an API, and itâ€™s managed in a commercial superlative. But there hasnâ€™t been a similar eruption with third-party data integration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Today, if you ask a third-party data provider for transactional data, &lt;strong&gt;you get 10 CSV files with 1M rows each for your +20K bucks.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;If you look for data on an open data platform, &lt;strong&gt;you donâ€™t find sufficient documentation.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When you scrape data, you trust your own&lt;/strong&gt; results but probably none of those scraping providers.&lt;/li&gt;
&lt;li&gt;And one last question, &lt;strong&gt;have you tried working with OpenStreetMap data?&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are lucky, you will find the external data you are looking for. But there, the luck usually stops. The data is not of high quality, nor is it easy to integrate, or at least as adequately documented as you would expect from the APIs of SaaS solutions. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNd1erKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkzdal0kmmi8451b4jtx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNd1erKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkzdal0kmmi8451b4jtx.png" alt="osm_usage" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenStreetMap is an excellent example of a buried data treasure. One of my favorite slides shows how open-source contribution has been increasing from commercial companies since 2019. Yes, your Apple Maps is based on free, open, external data. &lt;/p&gt;

&lt;p&gt;Your Tesla sends new road segments to this data treasure. Microsoft even put all the buildings in the U.S. into GeoJSON and shared it with the world on OpenStreetMap. Most of Mapbox is based on OpenStreetMap (it would be just fair to attribute them well and contribute more back!).&lt;/p&gt;

&lt;p&gt;These are billion-dollar companies that put a lot of developer effort into cleaning and preparing OpenStreetMap data to build outstanding products. Just imagine if your young scooter startup would have access to those data points? And what if you donâ€™t have just one open data treasure but 100s of those?&lt;/p&gt;

&lt;p&gt;I am currently working with Matti on &lt;a href="https://kuwala.io/?utm_source=dev-to"&gt;Kuwala&lt;/a&gt;, an &lt;a href="https://github.com/kuwala-io/kuwala/?utm_source=dev-to"&gt;open-source platform&lt;/a&gt; platform to transfer the ELT logic we know to external, third-party providers. For example, we are also integrating OpenStreetMap data. We pre-process the data, clean it and connect the features to each other.&lt;/p&gt;

&lt;p&gt;This data pipeline can then be easily connected to, e.g., the High-Resolution Demographics data from Facebook for Good. The setup is straightforward via a CLI. Then you can launch a Jupyter Notebook with which you can transform the data directly in your familiar environment and create stunning insights.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SKHAGr5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3d1981vk7fdupdr3h8bp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SKHAGr5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3d1981vk7fdupdr3h8bp.gif" alt="kuwala_jupyter_notebook" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are looking for more collaborators to help us also support smaller companies to connect many external data sources, not only Apple and Co.&lt;/p&gt;

&lt;p&gt;You have a completely different opinion, a use case, or are you just curious? Visit us on &lt;a href="https://kuwala-community.slack.com/ssb/redirect"&gt;Slack&lt;/a&gt; and join the discussion.&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>programming</category>
      <category>beginners</category>
      <category>opensource</category>
    </item>
    <item>
      <title>API Client Design Across Languages - Part 1</title>
      <author>Andrew McIntosh</author>
      <pubDate>Thu, 11 Nov 2021 17:39:03 +0000</pubDate>
      <link>https://dev.to/freshbooks/api-client-design-across-languages-part-1-5hmk</link>
      <guid>https://dev.to/freshbooks/api-client-design-across-languages-part-1-5hmk</guid>
      <description>&lt;p&gt;In my recent post &lt;a href="https://dev.to/freshbooks/some-best-practices-on-building-an-integration-1gbb"&gt;Some Best Practices On Building An Integration&lt;/a&gt;, I espoused the benefits of &lt;a href="https://dev.to/freshbooks/some-best-practices-on-building-an-integration-1gbb#use-libraries-tools-and-sdks"&gt;using API owner supplied tools and libraries&lt;/a&gt;, and mentioned areas where a well-built SDK hides complexity from, or otherwise makes things easier for, a developer.&lt;/p&gt;

&lt;p&gt;A colleague suggested that it might be useful to present examples of some of these areas to give some pointers for someone who needs to implement that functionality themselves, can't make use of an SDK, or simply for someone looking to build their own API client. So, this is part 1 of a deep dive into functionality in FreshBooks' (and some other API owner's) SDKs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-structure"&gt;
  &lt;/a&gt;
  Basic Structure
&lt;/h2&gt;

&lt;p&gt;This first post won't go too much into functionality as I think it's best to start on structure.&lt;/p&gt;

&lt;p&gt;A RESTful API is language agnostic and clients built any number of languages must all support the same API features and resources. However, the actual design of the client and usage of the client itself can, and probably should, be different language to language. For example, a Ruby client versus a Java client will still call the same API endpoint, but the form of the methods to make that call, and the form of the returned data could look very different.&lt;/p&gt;

&lt;p&gt;I feel it's best to build an API client in a way that is natural to the specific language it's written in. This extends from the project layout, to the client initialization, the method calls themselves, and the returned data. This makes things more intuitive and easy for a developer to use.&lt;/p&gt;

&lt;p&gt;The language influences the design primarily in two ways: language capabilities, and common language conventions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#capabilities"&gt;
  &lt;/a&gt;
  Capabilities
&lt;/h3&gt;

&lt;p&gt;By capabilities, I'm talking about language design and features. A statically typed language usually needs a bit more structure than a dynamically typed one. For instance, an API client in a language like PHP or Python could return JSON results as associative arrays (array and dictionary respectively), as you don't have to declare the various return value's types are. It would be difficult to do the same in Java with a HashMap (possible, but it would not be clean), so you're much more likely to build data objects for the responses with all the fields included and nicely typed.&lt;/p&gt;

&lt;p&gt;Other features play in as well. How does the language handle functions with different options? Function overloadings? Optional arguments? These all affect the design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conventions"&gt;
  &lt;/a&gt;
  Conventions
&lt;/h3&gt;

&lt;p&gt;Beyond what you &lt;em&gt;can&lt;/em&gt; do with a language, there's also what you &lt;em&gt;should&lt;/em&gt; do. You &lt;em&gt;can&lt;/em&gt; write your Python or Ruby in a very Java-like way, but it might not feel as natural to a Ruby developer using your library. Of course conventions aren't so cut-and-dry as capabilities; there are many ways to do something and sometimes one is considered "more right" than others, but often not as well. Looking at how other libraries are implemented and getting to know a language helps informs a lot of design choices. The best advice is to try to make things clear.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#freshbooks-sdks"&gt;
  &lt;/a&gt;
  FreshBook's SDKs
&lt;/h2&gt;

&lt;p&gt;At the time of writing, FreshBooks has first-party Python and Node.js SDKs, and a community-supported Java one (all three are listed &lt;a href="https://www.freshbooks.com/api/libraries"&gt;here&lt;/a&gt;). As I said, I'm going to walk through some of the differences in the design, but today I'll get started with the basics of client initialization and configuration.&lt;/p&gt;

&lt;p&gt;First, let's talk about the configuration the FreshBooks' SDKs need to support:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We require the clients to be initialized with their application's unique client id for the user-agent string, so that's a required parameter.&lt;/li&gt;
&lt;li&gt;To use the API requires authentication. Depending on what a developer has implemented, they'll either have a valid OAuth2 access token to initialize the client with, or they'll want to go through the authorization flow, which would require their client secret and redirect urls. Ideally the SDK supports both.&lt;/li&gt;
&lt;li&gt;If they have an expired token, they may want to refresh it, which would require the refresh token to be supplied.&lt;/li&gt;
&lt;li&gt;The developer may want to override some of the default settings like user-agent string, timeouts, or disabling automatic retries on failures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h3&gt;

&lt;p&gt;I'll start with the Java SDK because the features of the Java language makes it a good first example to set the others against.&lt;/p&gt;

&lt;p&gt;Java supports function overloading, but with the number of possible options mentioned above, that would get very compicated combination-wise. You could just use nullable parameters, but that would be confusing and ugly. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;FreshBooksClient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;clientSecret&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;redirectUri&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;userAgent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which could like anything like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FreshBooksClient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;);&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FreshBooksClient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;);&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FreshBooksClient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what the &lt;a href="https://en.wikipedia.org/wiki/Builder_pattern"&gt;builder pattern&lt;/a&gt; is for. You can see the full code for&lt;br&gt;
&lt;a href="https://github.com/amcintosh/freshbooks-java-sdk/blob/v0.3.0/lib/src/main/java/net/amcintosh/freshbooks/FreshBooksClient.java#L73-L88"&gt;the client&lt;/a&gt; and &lt;a href="https://github.com/amcintosh/freshbooks-java-sdk/blob/v0.3.0/lib/src/main/java/net/amcintosh/freshbooks/FreshBooksClient.java#L410"&gt;the builder&lt;/a&gt; on github but essentially the client is not initialized directly. You initialize a "client builder", which has a constructor for each of the base cases (&lt;strong&gt;"client_id"&lt;/strong&gt; versus &lt;strong&gt;"client_id, secret, url"&lt;/strong&gt;) and different methods for the various options, and the builder returns a client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;FreshBooksClient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FreshBooksClientBuilder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;FreshBooksClientBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;clientSecret&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;redirectUri&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;FreshBooksClientBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;FreshBooksClientBuilder&lt;/span&gt; &lt;span class="nf"&gt;withAccessToken&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;accessToken&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;FreshBooksClientBuilder&lt;/span&gt; &lt;span class="nf"&gt;withReadTimeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;allowing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FreshBooksClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FreshBooksClientBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FreshBooksClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FreshBooksClientBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withAccessToken&lt;/span&gt;&lt;span class="o"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FreshBooksClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FreshBooksClientBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withAccessToken&lt;/span&gt;&lt;span class="o"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withReadTimeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;resulting in much more structure, but much cleaner usage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;

&lt;p&gt;By comparison, Python allows for a much more concise implementation. Python is an object-oriented language, and you could implement a builder pattern, but as python also supports &lt;a href="https://en.wikipedia.org/wiki/Named_parameter"&gt;named parameters&lt;/a&gt;, and there actually aren't too many options for the client, we can get away with something much simpler (again, &lt;a href="https://github.com/freshbooks/freshbooks-python-sdk/blob/release/0.8.0/freshbooks/client.py#L33"&gt;full code on github&lt;/a&gt;) and more in the pythonic style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;redirect_uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;refresh_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_TIMEOUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;auto_retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which allows for:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_secret&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;redirect_uri&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;client_id&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the language features of Python can lead to a very different implementation and usage than Java.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  Node.js
&lt;/h3&gt;

&lt;p&gt;FreshBooks' Node.js SDK is written in TypeScript. Again, there are different ways to go about implementation, but we took a fairly common javascript pattern and passed &lt;a href="https://github.com/freshbooks/freshbooks-nodejs-sdk/blob/%40freshbooks/api%402.1.0/packages/api/src/APIClient.ts#L1141-L1145"&gt;a configuration object&lt;/a&gt; as &lt;a href="https://github.com/freshbooks/freshbooks-nodejs-sdk/blob/%40freshbooks/api%402.1.0/packages/api/src/APIClient.ts#L123"&gt;a parameter&lt;/a&gt;. The &lt;a href="https://github.com/stripe/stripe-node"&gt;Stripe Node.js Library&lt;/a&gt; does something similar (in general Stripe is a great place to look for any "how have others"-type API questions.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;retryOptions&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;IAxiosRetryConfig&lt;/span&gt;
    &lt;span class="nx"&gt;userAgent&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultRetry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;retryDelay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;axiosRetry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exponentialDelay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;retryCondition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APIClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNetworkRateLimitOrIdempotentRequestError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;retryOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultRetry&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also happens to be a fairly common pattern in PHP, thus a possible future FreshBooks PHP SDK would likely look similar. &lt;a href="https://github.com/auth0/auth0-PHP#sdk-initialization"&gt;auth0's PHP SDK&lt;/a&gt; has an example of this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#up-next"&gt;
  &lt;/a&gt;
  Up Next
&lt;/h2&gt;

&lt;p&gt;I hope you found it interesting seeing the different ways a client for the same API can look language-to-language. As I said, I'll dive a bit more into functionality differences next time, but feel free to dig around the projects and if you have any questions, please reach out.&lt;/p&gt;

</description>
      <category>sdk</category>
      <category>java</category>
      <category>python</category>
      <category>node</category>
    </item>
    <item>
      <title>Tools for generating REST  API docs rapidly?</title>
      <author>Sharad Raj (He/Him)</author>
      <pubDate>Thu, 11 Nov 2021 17:37:28 +0000</pubDate>
      <link>https://dev.to/sharadcodes/tools-for-generating-docs-for-rest-apis-rapidly-113a</link>
      <guid>https://dev.to/sharadcodes/tools-for-generating-docs-for-rest-apis-rapidly-113a</guid>
      <description>&lt;p&gt;So let's assume you have this REST API in whatever foo language, how will you document it if in hurry or you don't want to do complex things just for the sake of it.&lt;/p&gt;

&lt;p&gt;Let's have a discussion and share resources (-.-)&lt;/p&gt;

&lt;p&gt;PS: It's 11pm here so I may be on sleep mode after some time.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>So here is a new Gatsby, Hugo &amp; Jekyll theme (-.-) ðŸ”¥ðŸ”¥ </title>
      <author>Sharad Raj (He/Him)</author>
      <pubDate>Thu, 11 Nov 2021 17:28:06 +0000</pubDate>
      <link>https://dev.to/sharadcodes/so-here-is-a-new-gatsby-hugo-jekyll-theme--4008</link>
      <guid>https://dev.to/sharadcodes/so-here-is-a-new-gatsby-hugo-jekyll-theme--4008</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I'm posting this after a long time, I think a year maybe. So making the comeback with creating some themes and sharing FOSS side projects that I created for myself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So first one in the list is this Gatsby theme.&lt;br&gt;
Actually, I created this theme first for Jekyll then Hugo and then for Gatsby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-looks"&gt;
  &lt;/a&gt;
  How it looks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRJpAWjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sharadcodes/gatsby-theme-serial-programmer/main/screenshots/blog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRJpAWjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sharadcodes/gatsby-theme-serial-programmer/main/screenshots/blog.png" alt="" width="880" height="608"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are all the repository links:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gatsby-theme-serial-programmer"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/sharadcodes/gatsby-theme-serial-programmer"&gt;Gatsby Theme Serial Programmer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://gatsby-theme-serial-programmer.vercel.app/"&gt;Live Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jekyll-theme-serial-programmer"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/sharadcodes/jekyll-theme-serial-programmer"&gt;Jekyll Theme Serial Programmer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://sharadcodes.github.io/jekyll-theme-serial-programmer/"&gt;Live Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hugo-theme-serial-programmer"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/sharadcodes/hugo-theme-serial-programmer"&gt;Hugo Theme Serial Programmer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://sharadcodes.github.io/hugo-theme-serial-programmer/"&gt;Live Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait for other side projects in next post.&lt;/p&gt;

&lt;p&gt;Thank you for reading (-.-)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>gatsby</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Most Used Built-in functions in Python </title>
      <author>Adarsh Rawat</author>
      <pubDate>Thu, 11 Nov 2021 17:27:15 +0000</pubDate>
      <link>https://dev.to/adarshrawat7400/most-used-built-in-functions-in-python-dn2</link>
      <guid>https://dev.to/adarshrawat7400/most-used-built-in-functions-in-python-dn2</guid>
      <description>&lt;p&gt;In this article we will going to look some very useful built-in functions that will always come handly in your python journey,&lt;br&gt;
these functions will save you writing extra lines of code,&lt;/p&gt;

&lt;p&gt;We will going to understand the defination and look some useful use-cases for each built-in function.&lt;/p&gt;

&lt;p&gt;We will going to go through the following built-in functions :-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filter()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zip()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;enumerate()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;all()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;any()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#1-map"&gt;
  &lt;/a&gt;
  1. &lt;em&gt;map()&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;map() is a built-in Python function that takes in two or more arguments: a function and one or more iterables, in the form:&lt;br&gt;
&lt;strong&gt;Syntax :- *map(callable, iterable)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;map() returns an &lt;strong&gt;iterator&lt;/strong&gt; - that is, map() returns a special object that yields one result at a time as needed.&lt;br&gt;
if you're not fimiliar with &lt;em&gt;iterator&lt;/em&gt; :-&lt;br&gt;
refer to this post :- &lt;a href="https://dev.to/adarshrawat7400/what-is-iterableiterator-in-python-3325"&gt;iterator,iterable in python&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for n size of input , it will return n size output&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's see some example of &lt;em&gt;map()&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Task :- convert list of string integer to to int&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:-
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lst_of_str_ints = ['1','2','3','4','5','6','7','8','9','10']
print("list of str ints :- ",lst_of_str_ints)

lst_of_ints = list(map(int, lst_of_str_ints))
print("list of ints :- ",lst_of_ints)

Output :-
list of str ints :-  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
list of ints :-  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;we passed &lt;em&gt;int&lt;/em&gt; object as first argument in the map function, second argument is the &lt;em&gt;list_of_str_int&lt;/em&gt;, in this example&lt;br&gt;
the iterator iterate each element at a time and map it to the corresponding callable argument &lt;em&gt;int()&lt;/em&gt; passed as first argument,&lt;br&gt;
then after iterating over all the elements, the &lt;em&gt;map()&lt;/em&gt; function returns  a &lt;em&gt;map&lt;/em&gt; object will can then be &lt;em&gt;casted&lt;/em&gt; to iterable like &lt;br&gt;
&lt;em&gt;(list,tuple,set)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;we can perform the same task using &lt;em&gt;lambda function&lt;/em&gt;:-&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:-
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lst_of_str_ints = ['1','2','3','4','5','6','7','8','9','10']
print("list of str ints :- ",lst_of_str_ints)

lst_of_ints = list(map(lambda x:int(x), lst_of_str_ints))
print("list of ints :- ",lst_of_ints)

Output :-
list of str ints :-  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
list of ints :-  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Task :- we will convert temprature from celsius to fahrenheit&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;temps_in_celsius = [0, 22.5, 40, 100]
print("temprature in celsius :-",temps_in_celsius)

temps_in_fahrenheit = list(map(lambda celsius : (9/5)*celsius + 32, temps_in_celsius))
print("temprature in fahrenheit :-",temps_in_fahrenheit)

Output :-
temprature in celsius :- [0, 22.5, 40, 100]
temprature in fahrenheit :- [32.0, 72.5, 104.0, 212.0]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we converted &lt;em&gt;list of temperature in celsius&lt;/em&gt; to "temprature in fahrenheit"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Task :- capitalize each name in a list to uppercase&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;names = ['Ram','Shyam','Abhiansh','Raven','Marcus']
print("Original list :-",names)

upper_cased_names = list(map(lambda x : x.upper(), names))
print("Upper case name :-",upper_cased_names)

Output :-
Original list :- ['Ram', 'Shyam', 'Abhiansh', 'Raven', 'Marcus']
Upper case name :- ['RAM', 'SHYAM', 'ABHIANSH', 'RAVEN', 'MARCUS']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-filter"&gt;
  &lt;/a&gt;
  2. &lt;em&gt;filter()&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;filter(function, iterable)( offers a efficient way to filter out all the elements of an iterable, based on if a condition evaluates to treu&lt;br&gt;
**Syntax :- *filter(callable, iterable)&lt;/em&gt;*&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It takes first argument as function which evaluates to some boolean condition &lt;em&gt;(True or False)&lt;/em&gt;, second argument as &lt;em&gt;iterable&lt;/em&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The element will only be included if the function return **&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for n size of input , it will return &lt;strong&gt;n-m&lt;/strong&gt; size output&lt;br&gt;
where m is the no. of element for which the function evaluates to &lt;em&gt;False&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's see some example of &lt;em&gt;filter()&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Task :- fitler ints from a list of object of various type i.e. (float,string,lst,...)&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lst = [12, 43.42, 'hello', [1,3,4], 54,92, (1,2), 12.22, 9]
print("Orignal list of object without filteration :- ",lst)

lst_of_ints = list(filter(lambda x:type(x)== int, lst))
print("Updated list of ints  :- ",lst_of_ints)

Output :-
Orignal list of object without filteration :-  [12, 43.42, 'hello', [1, 3, 4], 54, 92, (1, 2), 12.22, 9]
Updated list of ints  :-  [12, 54, 92, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above example we have filtered &lt;em&gt;ints&lt;/em&gt; from  a list of objects of different &lt;em&gt;type&lt;/em&gt;, we used the same approch as in the previous example, but not here we're using a function which evaluates to two condition ,&lt;em&gt;i.e., if the type of object is int then it returning True, and that element get included in the result list , Otherwise if the type in not int then it returning False , means item will not be included in  the result list&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;let's see some other example :-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Task :- filter even integer from a list of integers&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;list_of_ints = [1,2,3,4,5,6,7,8,9,10]

print("Orignal list of ints :- ",list_of_ints)

list_of_even_ints = list(filter(lambda x: x % 2 ==0, list_of_ints))
print("Updated list of only even ints  :- ",list_of_even_ints)

Output :- 
Orignal list of ints :-  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Updated list of only even ints  :-  [2, 4, 6, 8, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above example we filtered list of even integer from a  list of integers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Task :- we have a list of random emails, so of which are valid and some are invalid , we have to filter out only valid emails&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import re
list_of_emails = ['nullchar@aol.com',
                  'salesgeek@yahoo.com',
                  'luebkehotmail.com',
                  'fmergeslive.com',
                  'jonathan@outlook.com',
                  'lydia@gmail.com',
                  'grdschl@comcast.net',
                  'catalogsbcglobal.net',
                  'glenz@outlook.com',
                  'cumarana@outlook.com',
                  'rsteinericloud.com',
                  'mosses@mac.com']

email_regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

print("Orignal list of emails :- ",list_of_emails,"\n")

valid_emails = list(filter(lambda email:re.match(email_regex, email), list_of_emails))
print("Updated list of valid emails  :- ",valid_emails)

Output :-
Orignal list of emails :-  ['nullchar@aol.com', 'salesgeek@yahoo.com', 'luebkehotmail.com', 'fmergeslive.com', 'jonathan@outlook.com', 'lydia@gmail.com', 'grdschl@comcast.net', 'catalogsbcglobal.net', 'glenz@outlook.com', 'cumarana@outlook.com', 'rsteinericloud.com', 'mosses@mac.com']

Updated list of valid emails  :-  ['nullchar@aol.com', 'salesgeek@yahoo.com', 'jonathan@outlook.com', 'lydia@gmail.com', 'grdschl@comcast.net', 'glenz@outlook.com', 'cumarana@outlook.com', 'mosses@mac.com']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above example we make use of &lt;em&gt;re&lt;/em&gt; regex module to match if the email is valid or not using the &lt;strong&gt;regular expression&lt;/strong&gt; in &lt;em&gt;email_regex&lt;/em&gt; variable, and after iterating over each element at matching it to the &lt;em&gt;email_regex&lt;/em&gt; we get a list of valid emails&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-reduce"&gt;
  &lt;/a&gt;
  3. &lt;em&gt;reduce()&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The function &lt;em&gt;reduce(function, sequence)&lt;/em&gt; continually applies the function to the sequence. It then returns a single value.
&lt;strong&gt;Syntax :- *reduce(callable, iterable)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;i.e., If seq = [ s1, s2, s3, ... , sn ], calling reduce(function, sequence) works like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;At first the first two elements of seq will be applied to function, i.e. func(s1,s2)&lt;/li&gt;
&lt;li&gt;The list on which reduce() works looks now like this: [ 
function(s1, s2), s3, ... , sn ]&lt;/li&gt;
&lt;li&gt;In the next step the function will be applied on the previous result and the third element of the list, i.e. function(function(s1, s2),s3)&lt;/li&gt;
&lt;li&gt;The list looks like this now: [ function(function(s1, s2),s3), ... , sn ]

&lt;ol&gt;
&lt;li&gt;It continues like this until just one element is left and return this element as the result of reduce()&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;let's see some example of &lt;em&gt;reduce()&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Task :- reduce a list of int to a single integer using + operator&lt;/strong&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from functools import reduce

lst =[47,11,42,13]
print("Original list :- ",lst)
print("reduced value :- ",reduce(lambda x,y: x+y,lst))

Output :-
Original list :-  [47, 11, 42, 13]
reduced value :-  113
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;let me explain what is going on in the above example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;45    11     42    13
 \    /      /     /
  \  /      /     /
   58      /     /
    \     /     /
     \   /     /
      100     /
       \     /
        \   /
         \ /
         113

numbers at index 0 and 1 first added
then their sum added with value at index 3
then their sum added with value at index 4
then after completing the sequence 
we the reduced value  :- 113

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;let's see one more example of reduce&lt;br&gt;
&lt;strong&gt;Task :- reduce a list of int to a single integer using * operator&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from functools import reduce

lst =[47,11,42,13]
print("Original list :- ",lst)
print("reduced value :- ",reduce(lambda x,y: x*y,lst))

Output :-
Original list :-  [47, 11, 42, 13]
reduced value :-  282282
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The visual that i have demostrated in the previous example ,in this example the same process going , but this time using &lt;em&gt;x&lt;/em&gt; operator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-zip"&gt;
  &lt;/a&gt;
  4. &lt;em&gt;zip()&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The function &lt;em&gt;zip()&lt;/em&gt; makes an iterator that combines elements from each of the iterables&lt;br&gt;
&lt;strong&gt;Syntax :- zip(iter1, iter2, iter3, iter4....)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;zip()&lt;/em&gt; function return &lt;em&gt;zip object&lt;/em&gt; which iterate over a list of &lt;em&gt;tuples&lt;/em&gt;  where tuples size is equal to the no. of list passed in the &lt;em&gt;zip()&lt;/em&gt; function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The iterator stops when the shortest input iterable is exhausted&lt;br&gt;
&lt;em&gt;i.e it will return list of tuples of size equal to the length of (minimum size *iterable&lt;/em&gt; among all the &lt;em&gt;iterables&lt;/em&gt; passed in the &lt;em&gt;zip()&lt;/em&gt; function)*&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's see some example of &lt;em&gt;zip()&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Task :- we will combine user firstname,lastname,hometown using &lt;br&gt;
zip() function&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first_names = ['ram','shyam','ajay','bipin','manoj','alex']
print("list of first names :- ", first_names,"\n")

last_names = ['gupta','tiwari','yadav','rawat','desai','khan','raven']
print("list of first names :- ", last_names,"\n")

home_towns = ['ayodhya','vrindavan','bihar','jhnasi','boston','delhi','lanka']
print("list of hometowns :-" , home_towns,"\n")


persons_info = list(zip(first_names,last_names,home_towns))
print("data after using zip() function :-",persons_info)

Output :-
list of first names :-  ['ram', 'shyam', 'ajay', 'bipin', 'manoj', 'alex'] 

list of first names :-  ['gupta', 'tiwari', 'yadav', 'rawat', 'desai', 'khan', 'raven'] 

list of hometowns :- ['ayodhya', 'vrindavan', 'bihar', 'jhnasi', 'boston', 'delhi', 'lanka'] 

data after using zip() function :- [('ram', 'gupta', 'ayodhya'), ('shyam', 'tiwari', 'vrindavan'), ('ajay', 'yadav', 'bihar'), ('bipin', 'rawat', 'jhnasi'), ('manoj', 'desai', 'boston'), ('alex', 'khan', 'delhi')]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we have combined inforation from three iterable (firstnames,lastnames,hometowns) into list of tuples with information combined from all three iterables.&lt;/p&gt;

&lt;p&gt;also notice that,&lt;br&gt;
&lt;em&gt;it has returned a list of tuples of size equal to the length of (minimum size *iterable&lt;/em&gt; among all the &lt;em&gt;iterables&lt;/em&gt; passed in the &lt;em&gt;zip()&lt;/em&gt; function)&lt;br&gt;
i.e &lt;br&gt;
    * &lt;em&gt;first_names&lt;/em&gt; list has &lt;em&gt;length&lt;/em&gt; of 6&lt;br&gt;
    * &lt;em&gt;last_names&lt;/em&gt; list has &lt;em&gt;length&lt;/em&gt; of 6&lt;br&gt;
    * &lt;em&gt;home_town&lt;/em&gt; list has &lt;em&gt;length&lt;/em&gt; of 7&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-enumerate"&gt;
  &lt;/a&gt;
  5. &lt;em&gt;enumerate()&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The function &lt;em&gt;enumerate()&lt;/em&gt; return an iterates to a list of tuples , where  first element of each tuple is it's corresponding index (by default is 0) and second element is the value at store at the index&lt;br&gt;
&lt;strong&gt;Syntax :- enumerate(iterable, start)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the second argument &lt;em&gt;start&lt;/em&gt; denotes from where the index start &lt;br&gt;
&lt;em&gt;i.e.,&lt;/em&gt; if start = 4 then [(value1,4), (value2,5), (value3,6)...]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's us take an example with start argument and without start arguement&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Task :- without start argument&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;names = ['ram','shyam','ajay','bipin','manoj','alex']

names_with_indexes = list(enumerate(names))
for name in names_with_indexes:
  print(name)

Output :-
(0, 'ram')
(1, 'shyam')
(2, 'ajay')
(3, 'bipin')
(4, 'manoj')
(5, 'alex')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Task :- with start argument&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;names = ['ram','shyam','ajay','bipin','manoj','alex']

names_with_indexes = list(enumerate(names, 4))
for name in names_with_indexes:
  print(name)

Output :-
(4, 'ram')
(5, 'shyam')
(6, 'ajay')
(7, 'bipin')
(8, 'manoj')
(9, 'alex')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can see the difference in the above two examples&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-all"&gt;
  &lt;/a&gt;
  6. &lt;em&gt;all()&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;all()&lt;/em&gt; are built-in functions that allow us to conveniently check for boolean matching in an iterable.&lt;br&gt;
&lt;strong&gt;Syntax :- all(iterable)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;all() will return True if all elements in an iterable are True.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's understand with examples&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lst = [True,True,False,True]
print(all(lst))

Output :-
False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since element at index 2 is false , &lt;em&gt;all()&lt;/em&gt; returned &lt;em&gt;False&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lst = [True,True,False,True]
print(all(lst))

Output :-
True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the result is &lt;em&gt;True&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lst = [True,[],[1,2,3],True]

print(all(lst))

Output :-
False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if any one counfused why the result is &lt;em&gt;False&lt;/em&gt;, there is a concept of &lt;em&gt;Truthy and Falsy&lt;/em&gt; in python.&lt;br&gt;
here is a good example your can check &lt;a href="https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-how-is-it-different-from-true-and-false"&gt;&lt;em&gt;Truthy and Falsy&lt;/em&gt; in python&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-any"&gt;
  &lt;/a&gt;
  7. &lt;em&gt;any()&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;any()&lt;/em&gt; are built-in functions that allow us to conveniently check for boolean matching in an iterable.&lt;br&gt;
&lt;strong&gt;Syntax :- any(iterable)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;any() will return True if any elements in an iterable are True.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let's understand with examples&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-"&gt;
  &lt;/a&gt;
  Example :-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lst = [True,False,False,False]
print(any(lst))

Output :-
True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since element at index 0 is True, &lt;em&gt;any()&lt;/em&gt; returned &lt;em&gt;True&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lst = [False,False,False,False]
print(any(lst))

Output :-
False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the result is &lt;em&gt;False&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lst = [(),[],[1,2,3],False]

print(any(lst))

Output :-
True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the result is true because at index 2, there is a &lt;em&gt;list&lt;/em&gt; of size greater than 0 , which is a Truthy value.&lt;/p&gt;

&lt;p&gt;with this example we have come to an end,&lt;br&gt;
we have covered various useful &lt;em&gt;built-in&lt;/em&gt; functions&lt;br&gt;
which are very useful in certain scenarios&lt;/p&gt;

&lt;p&gt;Hope you all have learned some useful stuff today. :-)&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>beginners</category>
      <category>functional</category>
    </item>
  </channel>
</rss>
