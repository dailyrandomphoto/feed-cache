<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What are your biggest performance engineering hacks? Answer to be featured on our podcast üéß  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 29 Jul 2021 21:48:59 +0000</pubDate>
      <link>https://dev.to/devteam/what-are-your-biggest-performance-engineering-hacks-answer-to-be-featured-on-our-podcast-3009</link>
      <guid>https://dev.to/devteam/what-are-your-biggest-performance-engineering-hacks-answer-to-be-featured-on-our-podcast-3009</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners ‚Äî and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-are-your-biggest-performance-engineering-hacks"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are your biggest performance engineering hacks?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message üìû&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; üéô&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) üó£&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, August 4th at 1 PM, ET (5 PM UTC, 10 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement üòâ
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt;. The new season premieres soon üëÄ  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>performance</category>
    </item>
    <item>
      <title>Got Bots? 4: Making Bots with the Azure Portal</title>
      <author>Chloe Condon üéÄ</author>
      <pubDate>Thu, 29 Jul 2021 21:42:49 +0000</pubDate>
      <link>https://dev.to/azure/got-bots-4-making-bots-with-the-azure-portal-23jn</link>
      <guid>https://dev.to/azure/got-bots-4-making-bots-with-the-azure-portal-23jn</guid>
      <description>&lt;p&gt;Thanks to everyone who joined me live for my 4th episode of &lt;a href="https://dev.to/azure/got-bots-a-weekly-bots-series-with-the-microsoft-reactor-2b2h"&gt;Got Bots?&lt;/a&gt; with the Microsoft Reactor last week. It was such a joy to have y'all give your bot suggestions for our Clippy bot, and taking your questions on bots!&lt;/p&gt;

&lt;p&gt;If you missed the fun live, don't worry- you can watch the replay &lt;a href="https://youtu.be/2oAsXTS92LM"&gt;here&lt;/a&gt;, and in the embedded video below! ü§ñ‚§µÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2oAsXTS92LM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pssst! üôã‚Äç‚ôÄÔ∏è If you've missed any previous episode, check out my &lt;strong&gt;Got Bots?&lt;/strong&gt; &lt;a href="https://dev.to/azure/got-bots-a-weekly-bots-series-with-the-microsoft-reactor-2b2h"&gt;series summary dev.to post&lt;/a&gt; to get caught up!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On this episode we cover:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=235"&gt;3:55&lt;/a&gt; Previously on... &lt;em&gt;Got Bots?&lt;/em&gt; (a short recap)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=580"&gt;9:40&lt;/a&gt; A review of &lt;a href="https://docs.microsoft.com/en-us/learn/modules/build-qna-solution-qna-maker/?WT.mc_id=academic-33454-chcondon"&gt;QnA Maker&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=646"&gt;10:46&lt;/a&gt; &lt;a href="https://twitter.com/learnwdaniel"&gt;Daniel&lt;/a&gt; joins the stream for a brief cameo!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=1240"&gt;20:40&lt;/a&gt; We talk about my &lt;a href="https://dev.to/azure/building-an-animal-crossing-turnip-timer-video-2dni"&gt;Azure Functions Turnip Timer&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=1513"&gt;25:13&lt;/a&gt; Testing and training out QnA Maker bot&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=1579"&gt;26:19&lt;/a&gt; Selecting &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/qnamaker/how-to/chit-chat-knowledge-base/?WT.mc_id=academic-33454-chcondon"&gt;chit-chat&lt;/a&gt; for your bot&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=2799"&gt;46:39&lt;/a&gt; Follow-up prompts with &lt;a href="https://docs.microsoft.com/en-us/learn/modules/build-qna-solution-qna-maker/?WT.mc_id=academic-33454-chcondon"&gt;QnA Maker&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Did you have fun? Thanks for joining me this month for &lt;a href="//aka.ms/gotbotslinks"&gt;Got Bots&lt;/a&gt;! Join me next month for Beep Boop: an AI/ML series (more details coming soon!)&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Fetching Teams User Info from Microsoft Graph with TeamsFx SDK</title>
      <author>Tomomi Imura üê± </author>
      <pubDate>Thu, 29 Jul 2021 21:26:21 +0000</pubDate>
      <link>https://dev.to/azure/fetching-teams-user-info-from-microsoft-graph-with-teamsfx-sdk-301c</link>
      <guid>https://dev.to/azure/fetching-teams-user-info-from-microsoft-graph-with-teamsfx-sdk-301c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  üòò TL;DR
&lt;/h2&gt;

&lt;p&gt;First of all, this tutorial became far longer than I initially intended, so I decided to include this quick summary of the article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are various tools and SDKs for Teams app develpment so you need to pick the right &amp;amp; prefered tools!&lt;/li&gt;
&lt;li&gt;TeamsFx is a great tool when you build app that uses Microsoft Graph API for fetching data, such as basic user info&lt;/li&gt;
&lt;li&gt;TeamsFx handles the OAuth 2.0 authorization code grant flow, getting an access token, and use the token to make Graph API calls&lt;/li&gt;
&lt;li&gt;Use the Graph wrapper, &lt;code&gt;client.api(path).get&lt;/code&gt; to make the call&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, proceed to the main content!&lt;/p&gt;




&lt;p&gt;In my &lt;a href="https://dev.to/azure/using-vs-code-toolkit-for-teams-app-development-2o0g"&gt;previous tutorial&lt;/a&gt;, I showed you how to use a VS Code extension, Teams Toolkit to start buidling a Teams bot. In this tutotial, I walk you through the sample bot app from Toolkit and introduce you Microsoft Graph and TeamsFx. But before getting into the code, let me quickly explain about development tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teams-development-tools"&gt;
  &lt;/a&gt;
  üîß Teams Development Tools
&lt;/h2&gt;

&lt;p&gt;In my other Microsoft Teams-related tutorials, I mentioned &lt;strong&gt;Teams SDK&lt;/strong&gt; to build Tabs core user interface, &lt;strong&gt;Bot Framework&lt;/strong&gt; to build bots and messaging extensions, &lt;strong&gt;Adaptive Cards&lt;/strong&gt; for UI components in messages, and &lt;strong&gt;Teams Toolkit&lt;/strong&gt; VSCode extention for quick scaffolding all types of Teams apps.&lt;/p&gt;

&lt;p&gt;Some of the tools are not only created for Teams development, but for multiple Microsoft products. Here's a quick table of available tools for Teams:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Product&lt;/th&gt;
&lt;th&gt;What it is&lt;/th&gt;
&lt;th&gt;What it does for Teams app development&lt;/th&gt;
&lt;th&gt;What else it is used for&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href="https://docs.microsoft.com/en-us/javascript/api/overview/msteams-client?view=msteams-client-js-latest&amp;amp;WT.mc_id=m365-35902-timura"&gt;Teams SDK&lt;/a&gt; (Teams.js)&lt;/td&gt;
&lt;td&gt;Teams Client SDK&lt;/td&gt;
&lt;td&gt;Tabs development (Front-end)&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://dev.botframework.com/?WT.mc_id=m365-35902-timura"&gt;Bot Framework&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Bot SDK&lt;/td&gt;
&lt;td&gt;Teams bots development&lt;/td&gt;
&lt;td&gt;Web &amp;amp; mobile chat, Skype, Facebook, Amazon Alexa, Slack, Twilio, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://adaptivecards.io/?WT.mc_id=m365-35902-timura"&gt;Adaptive Cards&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Platform-agnostic UI snippets (JSON)&lt;/td&gt;
&lt;td&gt;Rich-format messages &amp;amp; cards&lt;/td&gt;
&lt;td&gt;Web &amp;amp; mobile UI, Outlook messages, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/app-studio-overview/?WT.mc_id=m365-35902-timura"&gt;App Studio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Visual tool&lt;/td&gt;
&lt;td&gt;Create &amp;amp; configurate Teams app packages&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension&amp;amp;WT.mc_id=m365-35902-timura"&gt;Teams Toolkit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;VS Code Extension&lt;/td&gt;
&lt;td&gt;Register &amp;amp; configure app. App scaffoldig.&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.microsoft.com/en-us/javascript/api/@microsoft/teamsfx/?view=msteams-client-js-latest&amp;amp;WT.mc_id=m365-35902-timura"&gt;TeamsFx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;SDK &amp;amp; CLI&lt;/td&gt;
&lt;td&gt;Implement identity and access to Graph resources&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.microsoft.com/en-us/graph/?WT.mc_id=m365-35902-timura"&gt;Microsoft Graph&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;REST API&lt;/td&gt;
&lt;td&gt;Provides access to data stored across Microsoft 365 services, icluding Teams&lt;/td&gt;
&lt;td&gt;Access &amp;amp; manage calendar, mail, oneDrive, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href="https://dev.teams.microsoft.com/home"&gt;Developer Portal for Microsoft Teams&lt;/a&gt; (Preview)&lt;/td&gt;
&lt;td&gt;Web tool&lt;/td&gt;
&lt;td&gt;Configurations &amp;amp; references&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;There are more tools you can use for Teams, but I am not covering everything in this tutorial!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Usually during development, you would use a combination of some of them. For example, in this tutorial we are going to use Teams Toolkit, Bot Framework (that includes wrapper methods for Adaptive Cards), and TeamsFx (that includes Graph API wrappers). &lt;/p&gt;

&lt;p&gt;Now, let's start off where we left off in the previous tutorial, &lt;a href="https://dev.to/azure/using-vs-code-toolkit-for-teams-app-development-2o0g"&gt;Using VS Code Teams Toolkit Extension for Teams App Development&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-microsoft-bot-framework"&gt;
  &lt;/a&gt;
  ü§ñ Using Microsoft Bot Framework
&lt;/h2&gt;

&lt;p&gt;After you build and run the template code from the Toolkit, let's take a look at &lt;strong&gt;bot&lt;/strong&gt; directory, where the bot code is stored.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--63VbLqae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ngd7tbfbq2y3ra1iq7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--63VbLqae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ngd7tbfbq2y3ra1iq7d.png" alt="Screenshot - VS Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's walk through the template code together quickly‚Äî&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#botindexjs"&gt;
  &lt;/a&gt;
  üìÑ bot/index.js
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;index.js&lt;/strong&gt;, notice &lt;a href="https://docs.microsoft.com/en-us/javascript/api/botbuilder/?view=botbuilder-ts-latest&amp;amp;WT.mc_id=m365-35902-timura"&gt;&lt;code&gt;botbuilder&lt;/code&gt;&lt;/a&gt; (Microsoft Bot Framework) is imported.&lt;/p&gt;

&lt;p&gt;This is where the adapter is created so that it allows your bot to communicate with the user and send responses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BotFrameworkAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ConversationState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MemoryStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;botbuilder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BotFrameworkAdapter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BOT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;appPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BOT_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Teams Toolkit already has handled registering your bot to Azure Active Directory so you don't need to manually configure your Bot ID and password&lt;/em&gt; üôå&lt;/p&gt;

&lt;p&gt;Also, &lt;code&gt;Restify&lt;/code&gt; is set up to HTTP server and routing HTTP requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;restify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Listen for incoming requests.&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/messages&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To simplify the tutorial, I am not explaining how to manage states, and what &lt;em&gt;trun&lt;/em&gt; means. If you would like to learn the concept of bot, read &lt;a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-basics?view=azure-bot-service-4.0&amp;amp;WT.mc_id=m365-35902-timura"&gt;How bot works&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#botteamsbotjs"&gt;
  &lt;/a&gt;
  üìÑ bot/teamsBot.js
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;bot/teamsBot.js&lt;/strong&gt; is the main entry point for the bot.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;TeamsBot&lt;/code&gt; class is being created here. Its &lt;code&gt;run&lt;/code&gt; function is called by the adapter and routed to bot's activity logic through &lt;code&gt;Restify&lt;/code&gt; middleware (from &lt;strong&gt;index.js&lt;/strong&gt;). &lt;/p&gt;

&lt;p&gt;In the constructor, it overrides some of the &lt;a href="https://docs.microsoft.com/en-us/javascript/api/botbuilder/teamsactivityhandler?view=botbuilder-ts-latest&amp;amp;WT.mc_id=m365-35902-timura"&gt;&lt;code&gt;TeamsActivityHandler&lt;/code&gt;&lt;/a&gt; methods by extending it to customize bot behavior and message text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TeamsBot&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;TeamsActivityHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conversationState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMembersAdded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, methods overridden are &lt;code&gt;onMessage&lt;/code&gt; and &lt;code&gt;onMembersAdded&lt;/code&gt; in this sample. They register the event handlers for the &lt;code&gt;message&lt;/code&gt; event, emitted for every incoming message activity, and &lt;code&gt;MembersAdded&lt;/code&gt; event emitted when a new member is added to the conversation, respectively.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#message-event"&gt;
  &lt;/a&gt;
  Message event
&lt;/h4&gt;

&lt;p&gt;When a message is sent to bot from a user (like, &lt;code&gt;show&lt;/code&gt; command), &lt;code&gt;onMessage&lt;/code&gt; gets triggered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, it runs the &lt;code&gt;Dialog&lt;/code&gt; with the new message Activity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#botdialogsmaindialogsjs"&gt;
  &lt;/a&gt;
  üìÑ bot/dialogs/mainDialogs.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DialogSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DialogTurnStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WaterfallDialog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;botbuilder-dialogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-dialog?view=azure-bot-service-4.0&amp;amp;WT.mc_id=m365-35902-timura"&gt;dialogs library&lt;/a&gt; üí¨ provides a state-based model to manage a long-running conversation with the user. A dialog performs a task that can represent conversational thread. &lt;/p&gt;




&lt;p&gt;Okay, this was a quick walk-through of what some of the code does. Now, let's get to the main topic, &lt;strong&gt;TeamsFx&lt;/strong&gt; and &lt;strong&gt;Graph&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-teamsfx"&gt;
  &lt;/a&gt;
  ü™Ö What is TeamsFx?
&lt;/h2&gt;

&lt;p&gt;TeamsFx is a framework, created to make the integrations of &lt;strong&gt;Microsoft Graph API&lt;/strong&gt; and implementing identity and access with Teams easier. For example, it handles the OAuth 2.0 authorization code grant flow, getting an access token, and use the token to make Graph API calls.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microsoft-graph-api"&gt;
  &lt;/a&gt;
  Microsoft Graph API
&lt;/h3&gt;

&lt;p&gt;So what is &lt;a href="https://docs.microsoft.com/en-us/graph/?WT.mc_id=m365-35902-timura"&gt;Microsoft Graph API&lt;/a&gt;, first of all? It is a REST API lets you to connect the data from Microsoft 365 services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VeIC_fS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/graph/images/microsoft-graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VeIC_fS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/graph/images/microsoft-graph.png" alt="Microsoft Graph API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;M365 platform holds various people-centric data and insights across the Microsoft cloud services, including Teams, Outlook, Calendars, etc. It means whenever you want to access to the data within your Teams app, you need to use Graph to access the data. &lt;/p&gt;

&lt;p&gt;For example, in this sample app, when a user asks a bot to display the user's info with the &lt;code&gt;show&lt;/code&gt; command, the app make an API call to fetch the data from Graph.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-teamsfx-to-call-graph-api"&gt;
  &lt;/a&gt;
  ü™Ö Using TeamsFx to call Graph API
&lt;/h2&gt;

&lt;p&gt;In &lt;strong&gt;bot/dialogs/mainDialogs.js&lt;/strong&gt;, both TeamsFx and Graph libraries are imported:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createMicrosoftGraphClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loadConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnBehalfOfUserCredential&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TeamsBotSsoPrompt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@microsoft/teamsfx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ResponseType&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@microsoft/microsoft-graph-client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#user-authentication-amp-authorization"&gt;
  &lt;/a&gt;
  üîè User Authentication &amp;amp; Authorization
&lt;/h3&gt;

&lt;p&gt;The app creates and authenticates a &lt;code&gt;MicrosoftGraphClient&lt;/code&gt; by calling &lt;code&gt;loadConfiguration()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Then, a new instance of &lt;code&gt;TeamsBotSsoPrompt&lt;/code&gt; is added as a named dialog. &lt;code&gt;TeamsBotSsoPrompt&lt;/code&gt; is integrated with Bot Framework to simplify the authentication process for bots:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;loadConfiguration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;dialogs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TeamsBotSsoPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TeamsBotSsoPrompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;scopes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User.Read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;scopes&lt;/code&gt; are the types of permission it requires to call Graph APIs for Teams. The resource-specific permissions are granular and define what an application can do within a specific resource.&lt;/p&gt;

&lt;p&gt;There are various permission scopes that can &lt;em&gt;read&lt;/em&gt; or &lt;em&gt;write&lt;/em&gt; (create, edit, delete). For instance, &lt;code&gt;User.Read&lt;/code&gt; is the scope needed to read users info, as the name suggests. And to enable the permissions, the app must ask the user for their consent.&lt;/p&gt;

&lt;p&gt;This operation creates a new prompt that leverages Teams Single Sign On (SSO) support for bot to automatically sign in user to receive OAuth token üèÖ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aLyfFpfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--h3bHmAbq--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r80t4cvr4fdxt9vyx3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aLyfFpfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--h3bHmAbq--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r80t4cvr4fdxt9vyx3k.png" alt="Screenshot - permissions dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Authentication and authorization are big topics here. I would need another tutorial to explain deeply about Microsoft identity platform. In the meantime, please read &lt;a href="https://docs.microsoft.com/en-us/graph/auth/auth-concepts/?WT.mc_id=m365-35902-timura"&gt;Authentication and authorization basics for Microsoft Graph&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calling-graph-api"&gt;
  &lt;/a&gt;
  üìá Calling Graph API
&lt;/h3&gt;

&lt;p&gt;In the app, when a user sends the "show" command to the bot, the app calls an API from Graph to fetch the user info. (The app asks the user a permission by popping up a SSO window before fetching the user's info, as explained in the previous section.)&lt;/p&gt;

&lt;p&gt;Every API call requires the access token üèÖ that has been aqcuired at the SSO sign-in process. (The token is attached in the Authorization header of the request). &lt;/p&gt;

&lt;p&gt;Also, to access the Microsoft Graph API for Teams, you will need the Teams credentials to do authentication to create a Graph client object.&lt;/p&gt;

&lt;p&gt;3 credential classes that are used to help simplifying authentication in TeamsFx:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;TeamsUserCredential&lt;/code&gt; - Teams current user's identity. Using this credential will request user consent at the first time. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M365TenantCredential&lt;/code&gt; - Microsoft 365 tenant identity. It is usually used when user is not involved like time-triggered automation job. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;OnBehalfOfUserCredential&lt;/code&gt; - on-behalf-of flow. It needs an access token and you can get a new token for different scope. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For bot scenarios, we are using &lt;code&gt;OnBehalfOfUserCredential&lt;/code&gt; here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oboCredential&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OnBehalfOfUserCredential&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ssoToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMicrosoftGraphClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oboCredential&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User.Read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you have authentication setup and an instance of Graph client, you can finally begin to make calls to the service! &lt;/p&gt;

&lt;p&gt;This is how you can fetch the basic user information, then making the bot to send a message to Teams client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stepContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`You're logged in as &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and your job title is: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jobTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this is the simplified flow of what you have just learned:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0s14dAnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x77ebyoyygnxmij1cuh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0s14dAnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x77ebyoyygnxmij1cuh2.png" alt="Teams bot flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/azure/using-vs-code-toolkit-for-teams-app-development-2o0g#running-a-sample-bot-locally"&gt;Build and run&lt;/a&gt; on Teams client if you haven't. Try the &lt;code&gt;show&lt;/code&gt; command to ask the bot to display your info. &lt;br&gt;
When everything goes well, this is how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mChQ1Y0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjn7n2z1dy9vx6557lvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mChQ1Y0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjn7n2z1dy9vx6557lvu.png" alt="Screenshot - bot showing user info"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ta-da üéâ&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-with-graph"&gt;
  &lt;/a&gt;
  üß∫ More with Graph
&lt;/h2&gt;

&lt;p&gt;Try making more Graph calls with the &lt;code&gt;api&lt;/code&gt; method. All requests start with &lt;code&gt;client.api(path)&lt;/code&gt; and end with an action, &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;post&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;To get the Teams group the user have joined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;me/joinedTeams&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response gives you a list of groups including the group IDs.&lt;/p&gt;

&lt;p&gt;To get the members of a Teams group:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;groups/{Teams group ID}/members&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, try &lt;a href="https://developer.microsoft.com/en-us/graph/graph-explorer/?WT.mc_id=m365-35902-timura"&gt;Graph Explorer&lt;/a&gt; to test out the REST API and visualize the response!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9gJOqqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rd4gan1mhpdmm4jzuyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9gJOqqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rd4gan1mhpdmm4jzuyx.png" alt="Screenshot - Graph Explorer"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope you enjoyed the tutorial. There are many things you would want to know, such as concepts of bots, OAuth, identity management, etc. but I tried not to make this tutorial too wordy by flooding with info, so I simplified everything by not diving deep into the details on purpose. But hopefully, this tutorial still made sense to you!&lt;/p&gt;

&lt;p&gt;If you would like to dive deep, please check out the docs and code repos listed below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  üìö Learn More
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.botframework.com/?T.mc_id=m365-35902-timura"&gt;Microsoft Bot Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bot Services Documentation - &lt;a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-basics?view=azure-bot-service-4.0&amp;amp;tabs=javascript&amp;amp;WT.mc_id=m365-35902-timura"&gt;How bot works?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/javascript/api/@microsoft/teamsfx/?view=msteams-client-js-latest&amp;amp;T.mc_id=m365-35902-timura"&gt;TeamsFx SDK references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OfficeDev/TeamsFx"&gt;TeamsFx GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/graph/?WT.mc_id=m365-35902-timura"&gt;Microsoft Graph API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/graph/auth/auth-concepts/?WT.mc_id=m365-35902-timura"&gt;Authentication and authorization basics for Microsoft Graph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>msteams</category>
      <category>m365</category>
      <category>node</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Building Microservices in Go: Graceful Shutdown</title>
      <author>Mario Carrion</author>
      <pubDate>Thu, 29 Jul 2021 21:23:02 +0000</pubDate>
      <link>https://dev.to/mariocarrion/building-microservices-in-go-graceful-shutdown-4adf</link>
      <guid>https://dev.to/mariocarrion/building-microservices-in-go-graceful-shutdown-4adf</guid>
      <description>&lt;p&gt;When building any &lt;em&gt;long-term running&lt;/em&gt; process, like a webserver or a program importing data, we should consider providing a way to gracefully shut it down, the idea behind this is to provide a way to exit the process cleanly, to clean up resources and to properly cancel that said running process.&lt;/p&gt;

&lt;p&gt;The steps to support &lt;code&gt;Graceful Shutdown&lt;/code&gt; in Go consist of two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Listen for OS signals, and&lt;/li&gt;
&lt;li&gt;Handle those signals.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Go those signals are provided by the &lt;a href="https://pkg.go.dev/os/signal"&gt;&lt;code&gt;os/signal&lt;/code&gt; package&lt;/a&gt;. Starting with &lt;a href="https://mariocarrion.com/2021/02/17/what-is-new-in-go-1-16.html"&gt;Go 1.16&lt;/a&gt; the way I like to implement &lt;em&gt;Graceful Shutdown&lt;/em&gt; is by using &lt;code&gt;os/signal.NotifyContext&lt;/code&gt;, this function provides an idiomatic way to propagate cancellation when using goroutines, which is usually the case when dealing with long-term running processes.&lt;/p&gt;

&lt;p&gt;Keep in mind that depending on how our &lt;code&gt;main&lt;/code&gt; package is implemented you may need to refactor it, having the &lt;code&gt;main&lt;/code&gt; function to reach the following objectives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Call a &lt;code&gt;Parse&lt;/code&gt; function, if needed, like &lt;code&gt;flag.Parse()&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;Call a &lt;code&gt;run&lt;/code&gt;-like function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; function is the one orchestrating all the different types, initializing everything, connecting all the dots and perhaps using explicit &lt;em&gt;Dependency Injection&lt;/em&gt;, and more importantly it may run a few goroutines to implement the call to &lt;code&gt;signal.NotifyContext&lt;/code&gt; that in the end is going to handle the logic for implementing &lt;em&gt;Graceful Shutdown&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's look at some concrete examples.&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VXxe7-b5euo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-raw-signalnotifycontext-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;signal.NotifyContext&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Starting in Go 1.16 &lt;code&gt;signal.NotifyContext&lt;/code&gt; is the way I like to recommend when handling signals, this replaces the previous way where a channel was required.&lt;/p&gt;

&lt;p&gt;For example having the same &lt;code&gt;main()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;errC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"exiting..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using &lt;code&gt;signal.Notify&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interrupt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"waiting for signal..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"signal received"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errC&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And when using &lt;code&gt;signal.NotifyContext&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotifyContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interrupt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}()&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"waiting for signal..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"signal received"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errC&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In practice both of them work achieve the same goal because both of them are meant to listen to signals, however the biggest difference is that &lt;code&gt;signal.NotifyContext&lt;/code&gt; provides a context &lt;code&gt;ctx&lt;/code&gt; that could be used for creating more complex propagation rules (like timeouts for example) that we can use to cancel other goroutines, instead of doing more work manually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-graceful-shutdown-in-http-servers"&gt;
  &lt;/a&gt;
  Implementing Graceful Shutdown in HTTP Servers
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code used for this post is &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/tree/76509a58cabf95bb8329da4e8bf41986885ba814"&gt;available on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Included in the standard library, in &lt;code&gt;net/http&lt;/code&gt;, Go includes its own HTTP Server in &lt;a href="https://pkg.go.dev/net/http#Server"&gt;&lt;code&gt;net/http.Server&lt;/code&gt;&lt;/a&gt;, this server defines a method called &lt;a href="https://pkg.go.dev/net/http#Server.Shutdown"&gt;&lt;code&gt;Shutdown&lt;/code&gt;&lt;/a&gt; meant to be called when the server is supposed to exit and it shutdowns the server gracefully.&lt;/p&gt;

&lt;p&gt;If we use the snippet we defined above we can write our code to handle &lt;em&gt;Graceful Shutdown&lt;/em&gt; for HTTP servers in &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/76509a58cabf95bb8329da4e8bf41986885ba814/cmd/rest-server/main.go#L117-L150"&gt;the following way&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="c"&gt;// ... other code initializing things used by this HTTP server&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Shutdown signal received"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;ctxTimeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}()&lt;/span&gt;

        &lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetKeepAlivesEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Shutdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctxTimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Shutdown completed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Listening and serving"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// "ListenAndServe always returns a non-nil error. After Shutdown or Close, the returned error is&lt;/span&gt;
        &lt;span class="c"&gt;// ErrServerClosed."&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrServerClosed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The goal of implementing &lt;em&gt;Graceful Shutdowns&lt;/em&gt; is to allow defining some clean-up steps when dealing with a long-running process, in cases where perhaps we need to commit some database transactions, remove some used files or maybe trigger an event to indicate some other process should take over the subsequent events.&lt;/p&gt;

</description>
      <category>go</category>
      <category>microservices</category>
    </item>
    <item>
      <title>8 Dicas para conseguir o seu primeiro est√°gio como desenvolvedor(a)</title>
      <author>Francielle Dellamora</author>
      <pubDate>Thu, 29 Jul 2021 20:47:02 +0000</pubDate>
      <link>https://dev.to/francidellamora/8-dicas-para-conseguir-o-seu-primeiro-estagio-como-desenvolvedor-a-4345</link>
      <guid>https://dev.to/francidellamora/8-dicas-para-conseguir-o-seu-primeiro-estagio-como-desenvolvedor-a-4345</guid>
      <description>&lt;p&gt;Ol√° Pessoal!&lt;/p&gt;

&lt;p&gt;Conseguir o primeiro est√°gio as vezes pode parecer dif√≠cil,  muitas vezes nem sabemos por onde come√ßar e √© por isso que escolhi compartilhar algumas dicas e um poquinho da minha exp√™riencia como estagi√°ria.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Quando n√£o se tem exp√™riencia, a melhor op√ß√£o √© arriscar.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;H√° 8 meses me candidatei para uma vaga de desenvolvedora front-end sabendo quase nada de programa√ß√£o e sem qualquer preparo. Esperava pelo "n√£o" e estava tudo bem, visto que a minha inten√ß√£o na √©poca era entender mais sobre os processos seletivos e criar exp√™riencia em entrevistas. Por fim, acabou que alguns dias depois da entrevista recebi uma liga√ß√£o avisando que passei.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ningu√©m realmente se importa se voc√™ faz faculdade em Harvard ou se aprende a programar pelo youtube.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como estagi√°rio o que as empresas procuram s√£o pessoas que querem aprender e uma das melhores formas de mostrar interesse na √°rea √© tendo projetinhos pessoais no github.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redes sociais s√£o importantes!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Foi por meio de um retweet que achei a vaga na qual trabalho  e tamb√©m √© atrav√©s do twitter que atualmente recebo propostas de emprego.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A primeira impress√£o √© a que fica.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Geralmente o curr√≠culo √© o primeiro contato que a empresa tem com o estagi√°rio e por isso voc√™ deve manter o seu o mais limpo e objetivo poss√≠vel.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sua atitude √© muito mais importante que o seu conhecimento t√©cnico.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tenha em mente que muito mais importante do que saber escrever um algortimo √© a sua postura diante de problemas e relacionamentos interpessoais, ou seja, invista nas soft skills.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Foque em descobrir um m√©todo de aprendizagem bom e comece pela base.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Antes de sair estudando os frameworks ou libs da modinha, lembre-se que voc√™ rec√©m est√° entrando no mercado de trabalho. Procure saber estruturas de dados, programa√ß√£o orientada a objetos e algoritmos primeiro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Estude a empresa para a qual voc√™ est√° se candidatando.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para se destacar na entrevista uma das formas de mostrar verdadeiro interesse √© fazendo perguntas sobre como seria o seu dia-a-dia de trabalho, se existe plano de carreira e pequenos coment√°rios sobre o que voc√™ achou legal na cultura da empresa.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;partic√≠pe de Hackathons.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Com toda certeza eu ter comentado que j√° participei de maratona de programa√ß√£o na faculade influ√™nciou a minha contrata√ß√£o, logo a pr√≥xima dica √© que mesmo voc√™ n√£o se achando bom o suficiente para competir, v√° mesmo assim. Hackathons s√£o muito mais sobre aprender, fazer networking e ter um momento divertido do que ganhar&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;E por fim, n√£o desanime com os ‚Äún√£os‚Äù que ir√° receber nessa caminhada. Eles s√£o necess√°rios para te tornar antifragil e te mostrar que as vezes, as coisas n√£o v√£o ter o melhor resultado. &lt;br&gt;
Dependendo do local, um retorno do seu curr√≠culo ao banco de dados da empresa acaba sendo melhor do que voc√™ ser aceito para um local que n√£o √© a sua cara! Empresas assim n√£o ser√£o agrad√°veis, e impedir√£o com que voc√™ desenvolva da maneira que voc√™ precisa! &lt;/p&gt;

&lt;p&gt;Espero que esse artigo tenha ajudado e se voc√™ tem mais alguma dica, n√£o deixe de comentar!&lt;/p&gt;

&lt;p&gt;Boa sorte na jornada!&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>twitter</category>
      <category>beginners</category>
    </item>
    <item>
      <title>omeniscient - One Tool For All</title>
      <author>Vusal Ismayilov</author>
      <pubDate>Thu, 29 Jul 2021 20:46:59 +0000</pubDate>
      <link>https://dev.to/woosal/omeniscient-one-tool-for-all-1pc</link>
      <guid>https://dev.to/woosal/omeniscient-one-tool-for-all-1pc</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P3aH6cz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient_banner.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P3aH6cz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient_banner.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#omeniscient" class="anchor"&gt;
  &lt;/a&gt;
  omeniscient
&lt;/h1&gt;

&lt;p&gt;üïµüèº‚Äç‚ôÇÔ∏è Omniscient is who knows everything. As yet this is going to be the most powerful and various API powered assistant, OMEN and Omniscient combination is what &lt;code&gt;omeniscient&lt;/code&gt; about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#currently-playing-spotify-lyrics"&gt;
  &lt;/a&gt;
  Currently Playing Spotify Lyrics:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;lyricsnow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lyrics-of-any-song-by-songartist-name"&gt;
  &lt;/a&gt;
  Lyrics of any song by song/artist name:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;lyrics&lt;/span&gt; &lt;span class="n"&gt;corda&lt;/span&gt; &lt;span class="n"&gt;harry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pRk2svU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/lyricsnow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pRk2svU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/lyricsnow.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#azerbaijani-dictionary"&gt;
  &lt;/a&gt;
  Azerbaijani Dictionary
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;aztr&lt;/span&gt; &lt;span class="n"&gt;salam&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#translate"&gt;
  &lt;/a&gt;
  Translate
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#english"&gt;
  &lt;/a&gt;
  English
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#translate-any-language-to-english"&gt;
  &lt;/a&gt;
  Translate any language to English:
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="n"&gt;Hallo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#turkish"&gt;
  &lt;/a&gt;
  Turkish
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#translate-any-language-to-turkish"&gt;
  &lt;/a&gt;
  Translate any language to Turkish:
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#german"&gt;
  &lt;/a&gt;
  German
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#translate-any-language-to-german"&gt;
  &lt;/a&gt;
  Translate any language to German:
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Merhaba&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dostum&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#french"&gt;
  &lt;/a&gt;
  French
&lt;/h5&gt;

&lt;h6&gt;
  &lt;a href="#translate-any-language-to-french"&gt;
  &lt;/a&gt;
  Translate any language to French:
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;Guten&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;morgen&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2j-NKItl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2j-NKItl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/en.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internet"&gt;
  &lt;/a&gt;
  Internet
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#download-speed"&gt;
  &lt;/a&gt;
  Download Speed
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;downloadspeed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#upload-speed"&gt;
  &lt;/a&gt;
  Upload Speed
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;uploadspeed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#downloaduploadping-speeds"&gt;
  &lt;/a&gt;
  Download/Upload/Ping Speeds
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;internet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wmsYBFiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/internet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wmsYBFiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/internet.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typo-check"&gt;
  &lt;/a&gt;
  Typo Check
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#check-whether-the-sentenceword-you-are-writing-has-any-typo-english"&gt;
  &lt;/a&gt;
  Check whether the sentence/word you are writing has any typo (English)
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;typo&lt;/span&gt; &lt;span class="n"&gt;helol&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2jBhA4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/typo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2jBhA4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/typo.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wikipedia"&gt;
  &lt;/a&gt;
  Wikipedia
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#suggest-wikipedia-article-titlepage"&gt;
  &lt;/a&gt;
  Suggest Wikipedia Article Title/Page
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;suggest&lt;/span&gt; &lt;span class="n"&gt;Turke&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#search-wikipedia-summary"&gt;
  &lt;/a&gt;
  Search Wikipedia Summary
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="n"&gt;Turkey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V2Bn_LNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/summary.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V2Bn_LNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://woosal.com/1337/omeniscient/summary.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-to-come"&gt;
  &lt;/a&gt;
  What to come:
&lt;/h3&gt;

&lt;p&gt;[X] Reddit API&lt;br&gt;
[X] Weather API&lt;br&gt;
[X] GitHub API&lt;br&gt;
[X] StackOverflow (Metastack) API&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opensource"&gt;
  &lt;/a&gt;
  Open-Source:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/woosal1337/omeniscient"&gt;https://github.com/woosal1337/omeniscient&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License:
&lt;/h3&gt;

&lt;p&gt;MIT&lt;/p&gt;

</description>
      <category>spotify</category>
      <category>python</category>
      <category>tool</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Amazing CSS Tips &amp; Tricks - Part 2</title>
      <author>Tarandeep Singh</author>
      <pubDate>Thu, 29 Jul 2021 19:55:37 +0000</pubDate>
      <link>https://dev.to/tarandeep_singh/amazing-css-tips-tricks-part-2-37lg</link>
      <guid>https://dev.to/tarandeep_singh/amazing-css-tips-tricks-part-2-37lg</guid>
      <description>&lt;p&gt;After an amazing response on my first &lt;a href="https://dev.to/tarandeep_singh/amazing-css-tips-tricks-1jl0"&gt;"Amazing CSS Tips &amp;amp; Tricks"&lt;/a&gt; blog, here I am with Part-2. So gear up and get ready to take a dive into CSS!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clamp-it-down"&gt;
  &lt;/a&gt;
  Clamp it Down
&lt;/h3&gt;

&lt;p&gt;Making the websites responsive is a big headache for most developers as they have to write lengthy code with lots of media queries. But I have a life-saver for you guys. You can use functions like min, max, and clamp to refactor your code. The following code shows how you can set the width to a clamped value that has a minimum of 200 pixels, a max of 600, and a preferred value of 50%.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;article {
    width: clamp(200px, 50%, 600px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following comparison image shows how I turned 13 lines of code into just 1 using this trick:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CD821T5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rfbiq6uvviviwqp56bb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CD821T5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rfbiq6uvviviwqp56bb.png" alt="Comparison: clamp() vs media query"&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-link-pseudoclass"&gt;
  &lt;/a&gt;
  The link pseudo-class
&lt;/h3&gt;

&lt;p&gt;A lot of developers and designers often miss this simple yet effective CSS trick that solves usability issues with visitors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a:link { color: blue; }
a:visited { color: purple; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;link:&lt;/code&gt; pseudo-class controls all links that haven‚Äôt been clicked on yet &amp;amp; the &lt;code&gt;:visited&lt;/code&gt; pseudo-class handles the styling of all of the links user has already visited. This tells the visitors where they have already been on your site, and where they have yet to explore. &lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drop-caps"&gt;
  &lt;/a&gt;
  Drop Caps
&lt;/h3&gt;

&lt;p&gt;Drop caps remind me of the traditional printed books &amp;amp; newspapers. I just love it as it is a great way to start a page with written content. That first, large letter really grabs your attention. We can use &lt;code&gt;:first-letter&lt;/code&gt; to create a drop cap in CSS. Here‚Äôs an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p:first-letter {
  font-family: "Source Sans Pro", Arial, Helvetica, sans-serif;
  float: left;
  font-size: 6rem;
  line-height: 0.65;
  margin: 0.1em 0.1em 0.2em 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPtRhBc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5u3x73txtfkjnomiwty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPtRhBc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5u3x73txtfkjnomiwty.png" alt="drop-cap output image"&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hover-effects"&gt;
  &lt;/a&gt;
  Hover Effects
&lt;/h3&gt;

&lt;p&gt;This might be an easy one, yet very useful. If you want to highlight something whenever the user hovers the mouse over it then add &lt;code&gt;:hover&lt;/code&gt; to that button, text link, block section or icon. Here's how the CSS would look if you wanted to change the color of h2 tag whenever the user hovers over it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.entry h2{
    font-size:24px;
    color:#000;
    font-weight:700;
}

.entry h2:hover{
    color:#f00;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#transition-for-hover-effect"&gt;
  &lt;/a&gt;
  Transition for Hover Effect
&lt;/h3&gt;

&lt;p&gt;For hover effects, on menus or images in your website, you don‚Äôt want colors snapping too quickly as they might not look pleasing to the end-user. So ideally, we should ease the change gradually, which is where the transition property comes into play. The following code shows how in the same hover effect used above, we can make the change happen over .4 seconds, instead of just instantly snapping to red.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.entry h2:hover{
    color:#f00;
    transition: all 0.3s ease;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
That's all for this one! I want to thank all of you guys for such an overwhelming response on my first blog. I was amazed to see how it got 60+ bookmarks in just 24 hours of posting it! If you have not seen it, Check it out &lt;a href="https://dev.to/tarandeep_singh/amazing-css-tips-tricks-1jl0"&gt;here.&lt;/a&gt; &lt;br&gt;
Tell me in the comments which trick did you guys liked the most!&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/Tarandeep_s1ngh"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/tarandeep-s1ngh/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript's Forgotten Keyword (with)</title>
      <author>Randall</author>
      <pubDate>Thu, 29 Jul 2021 19:22:27 +0000</pubDate>
      <link>https://dev.to/mistval/javascript-s-forgotten-keyword-with-48id</link>
      <guid>https://dev.to/mistval/javascript-s-forgotten-keyword-with-48id</guid>
      <description>&lt;p&gt;Being a JavaScript developer can be an exciting job. Almost every day you will find something mysterious and otherworldly. Sometimes that's a magical experience, other times it's downright frightening.&lt;/p&gt;

&lt;p&gt;In this article we will take a look at the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with"&gt;"with" keyword&lt;/a&gt;. It's one of those dark corners of the language that even veteran developers are rarely aware of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Let's use the &lt;strong&gt;with&lt;/strong&gt; keyword to help us log a message to the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I dont need the "console." part anymore!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's use it to help us join an array into a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// writes "abc" to the console.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes my friends, believe it or not, this is JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-with-does"&gt;
  &lt;/a&gt;
  What "with" Does
&lt;/h2&gt;

&lt;p&gt;Here is the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with"&gt;explanation from MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript looks up an unqualified name by searching a scope chain associated with the execution context of the script or function containing that unqualified name. The 'with' statement adds the given object to the head of this scope chain during the evaluation of its statement body. If an unqualified name used in the body matches a property in the scope chain, then the name is bound to the property and the object containing the property. Otherwise a ReferenceError is thrown.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To reword that hopefully a little more simply: when you write an identifier in your code (like &lt;code&gt;log&lt;/code&gt; or &lt;code&gt;join&lt;/code&gt; in the above code snippet) there is a chain of objects that JavaScript looks at, and if one of those objects has a property with the same name as the identifier you wrote in your code, JavaScript uses the value of that property.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;with&lt;/code&gt; keyword lets you inject any arbitrary object into the front of that chain. Here's another example that might make that clearer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;myProperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myProperty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Logs "Hello world!"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dont-use-it"&gt;
  &lt;/a&gt;
  Don't Use It
&lt;/h2&gt;

&lt;p&gt;Awesome, right? Yeah, well, maybe not.&lt;/p&gt;

&lt;p&gt;In most cases, the same effect can be achieved just by using temporary variables, which is easier than ever since the advent of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;destructuring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with"&gt;MDN&lt;/a&gt; lists a number of pitfalls:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-forbidden-in-strict-mode"&gt;
  &lt;/a&gt;
  It's Forbidden in Strict Mode
&lt;/h3&gt;

&lt;p&gt;You can't use &lt;code&gt;with&lt;/code&gt; in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with"&gt;strict mode&lt;/a&gt;. Considering that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;ES modules&lt;/a&gt; and classes are automatically in strict mode, this limitation kills even the possibility of using &lt;code&gt;with&lt;/code&gt; in most modern use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accidental-shadowing"&gt;
  &lt;/a&gt;
  Accidental Shadowing
&lt;/h3&gt;

&lt;p&gt;Consider the following code to average two numbers and round the result to an integer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAverage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getAverage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This returns &lt;code&gt;NaN&lt;/code&gt;. Why? Because &lt;code&gt;Math.min()&lt;/code&gt; and &lt;code&gt;Math.max()&lt;/code&gt; shadow the function's arguments, so we end up calculating the sum of two functions, which of course, is NaN.&lt;/p&gt;

&lt;p&gt;Basically when you use &lt;code&gt;with&lt;/code&gt; in this way, you suddenly have to be more careful about choosing identifiers. You have to go and look at what you are passing into &lt;code&gt;with&lt;/code&gt; to make sure it does not have properties that might inadvertently shadow something else in a higher scope.&lt;/p&gt;

&lt;p&gt;This behavior can also introduce security vulnerabilities. If an attacker is able to add properties to the object you pass to &lt;code&gt;with&lt;/code&gt;, then they can shadow your identifiers and modify the behavior of your code in unexpected ways.&lt;/p&gt;

&lt;p&gt;As one example, passing an object that was parsed from an unvalidated JSON HTTP request body to &lt;code&gt;with&lt;/code&gt; would be extremely dangerous.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;By adding something to the scope chain, you slightly slow down just about every line of code, because you are increasing the number of objects that need to be searched to resolve your identifiers to values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ostracism"&gt;
  &lt;/a&gt;
  Ostracism
&lt;/h3&gt;

&lt;p&gt;If you use the &lt;code&gt;with&lt;/code&gt; keyword, everyone will think you are crazy and avoid you in the lunch room. Or maybe they will just look at you funny.&lt;/p&gt;

&lt;p&gt;Either way, using magical language features that no one else knows about will make your code harder to maintain, and in this case won't gain you much.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;with&lt;/code&gt; keyword adds some interesting capabilities to the language, but ultimately it comes with too many downsides, and too few advantages, for me to be able to recommend using it.&lt;/p&gt;

&lt;p&gt;Of course, don't just take it from me. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with"&gt;MDN&lt;/a&gt; seems to hate it with a passion, and it is forbidden in strict mode for a reason.&lt;/p&gt;

&lt;p&gt;I have been writing JavaScript for well over five years, and it amazes me that to this day I'm still learning language keywords that are not even remotely new. What else might be lurking out there?&lt;/p&gt;

&lt;p&gt;Whence came &lt;code&gt;with&lt;/code&gt;? Who envisioned it? Why? Did they want something like C++ namespaces? Did a Ouija board tell them to do it?&lt;/p&gt;

&lt;p&gt;Whatever the case may be, it looks like the long-forgotten &lt;code&gt;with&lt;/code&gt; statement will forever be relegated to the dustbin of history.&lt;/p&gt;

&lt;p&gt;Though like many dark arts, it is fun to mess with!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Haskell - The Most Gentle Introduction Ever</title>
      <author>Mateusz Podlasin</author>
      <pubDate>Thu, 29 Jul 2021 19:13:49 +0000</pubDate>
      <link>https://dev.to/mpodlasin/haskell-the-most-gentle-introduction-ever-32ho</link>
      <guid>https://dev.to/mpodlasin/haskell-the-most-gentle-introduction-ever-32ho</guid>
      <description>&lt;h3&gt;
  &lt;a href="#who-is-this-article-for"&gt;
  &lt;/a&gt;
  Who Is This Article For?
&lt;/h3&gt;

&lt;p&gt;This article is the first in (hopefully) a series on functional programming in Haskell.&lt;/p&gt;

&lt;p&gt;It doesn't assume any previous knowledge of Haskell or even functional programming for that matter.&lt;/p&gt;

&lt;p&gt;It does however assume that you can already program in &lt;strong&gt;some&lt;/strong&gt; programming language.&lt;/p&gt;

&lt;p&gt;If you feel fairly comfortable in a language like JavaScript, Python, Java, C/C++, or anything similar, you are more than capable of going through this tutorial. You can rest assured that everything will be explained slowly and carefully.&lt;/p&gt;

&lt;p&gt;The main point of this series will be to highlight the differences between Haskell and those "typical" languages that I've mentioned. So the less you know about Haskell and/or functional programming, the more illuminating and mindbending those articles will be for you.&lt;/p&gt;

&lt;p&gt;I will also be showing you how learning Haskell can benefit you in writing better code even when using other, more mainstream languages. If you feel stuck when it comes to your programming skills and if you feel like you haven't been stretching your coding muscles lately - Haskell will be perfect for you! &lt;/p&gt;

&lt;p&gt;Whether you are a senior coding veteran or a junior dev that barely started your career, Haskell will push you to be an all-around better programmer. If you need more convincing, in the past I've written about &lt;a href="https://dev.to/mpodlasin/5-practical-reasons-why-your-next-programming-language-to-learn-should-be-haskell-gc"&gt;why it is beneficial to learn Haskell&lt;/a&gt;, even if you don't plan to code in it professionally.&lt;/p&gt;

&lt;p&gt;Are you ready? Let's go then!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-haskellers-toolbelt"&gt;
  &lt;/a&gt;
  Installing Haskellers Toolbelt
&lt;/h3&gt;

&lt;p&gt;If you are on this journey with me, we'll begin by installing some software needed to run Haskell.&lt;/p&gt;

&lt;p&gt;But if you are still unsure/unconvinced, you don't have to do even that. I will be keeping all the examples as simple as possible, so it will be enough to just use a REPL like &lt;a href="https://replit.com/languages/haskell"&gt;this one&lt;/a&gt;. The only thing you need to do there is to empty the file in the REPL - we will start from scratch - and run &lt;code&gt;ghci&lt;/code&gt; command in the terminal. You are ready now, so if you don't want to install Haskell tools on your computer, you can safely omit the rest of this section.&lt;/p&gt;

&lt;p&gt;Still here? All in on learning Haskell? Awesome!&lt;/p&gt;

&lt;p&gt;The download section on &lt;a href="https://haskell.org"&gt;haskell.org&lt;/a&gt; can be a bit confusing, so I would recommend you to go straight to &lt;a href="https://www.haskell.org/ghcup/"&gt;ghcup&lt;/a&gt; page. You just have to copy the script from the website, paste it to your terminal and run it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ghcup&lt;/code&gt; is a "Haskell toolchain installer". This means that it allows you to easily install and manage various tools related to Haskell.&lt;/p&gt;

&lt;p&gt;The installation process guides you by hand - you will just have to answer a few questions. &lt;/p&gt;

&lt;p&gt;The installer will ask you about installing secondary packages - &lt;code&gt;stack&lt;/code&gt; and &lt;code&gt;hls&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hls&lt;/code&gt; is "Haskell Language Server". It allows IDE plugins and extensions to work seamlessly with Haskell. So it's worth having it since the very beginning.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; is a build tool that allows you to create isolated Haskell projects easily. This would be massive overkill for simple, one-file scripts that we will be writing at the beginning. However, once we move on to writing more complex programs, Stack will be extremely helpful. Whether you prefer to install it now or later - it's up to you.&lt;/p&gt;

&lt;p&gt;After running the script, you can test if everything went well by running the &lt;code&gt;ghci&lt;/code&gt; command in your terminal.&lt;/p&gt;

&lt;p&gt;We've mentioned quite a few tools so far, but &lt;code&gt;ghci&lt;/code&gt; is the one that we will &lt;em&gt;actually&lt;/em&gt; use in this article. It is an interactive environment for running Haskell code. &lt;code&gt;ghc&lt;/code&gt; (no "i" at the end!) stands for Glasgow Haskell Compiler. &lt;code&gt;ghc&lt;/code&gt; is in fact its own command, that will allow us to compile code into binary executables.&lt;/p&gt;

&lt;p&gt;However, if we just want to play around with code and test some stuff, an &lt;em&gt;interactive&lt;/em&gt; &lt;code&gt;ghc&lt;/code&gt; - called &lt;code&gt;ghci&lt;/code&gt; - is perfect for that, because it allows us to run Haskell code without the compilation step. On top of that, it has some handy commands which we will use today.&lt;/p&gt;

&lt;p&gt;If you type in &lt;code&gt;ghci&lt;/code&gt; in the terminal and get an error, it likely means that your terminal doesn't know how to find the &lt;code&gt;ghci&lt;/code&gt; binary. You might have to close and reopen the terminal window after finishing the installation.&lt;/p&gt;

&lt;p&gt;If it's still not working, then - depending on the environment you are using - you will have to edit your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Luckily &lt;code&gt;ghcup&lt;/code&gt; is very tidy - it just installs everything in a single directory, in my case &lt;code&gt;/Users/mateusz.podlasin/.ghcup&lt;/code&gt;. In that directory, there is a &lt;code&gt;bin&lt;/code&gt; folder. You need to point the terminal you are using to that folder.&lt;/p&gt;

&lt;p&gt;So, in my case, I had to add the following line to my &lt;code&gt;.zshrc&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export PATH="/Users/mateusz.podlasin/.ghcup/bin:$PATH"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After closing the terminal and opening it again, running &lt;code&gt;ghci&lt;/code&gt; should now result in the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GHCi, version 8.10.5: https://www.haskell.org/ghc/ :? for help
Prelude&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see this, you are ready to begin our Haskell adventure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#playing-with-booleans"&gt;
  &lt;/a&gt;
  Playing With Booleans
&lt;/h3&gt;

&lt;p&gt;A boolean (in Haskell named &lt;code&gt;Bool&lt;/code&gt;) is one of the simplest and most familiar types that a programmer encounters regularly. No matter what programming language you've used previously, you likely know booleans very well.&lt;/p&gt;

&lt;p&gt;That's why they will be perfect for learning the basics of Haskell.&lt;/p&gt;

&lt;p&gt;In Haskell boolean values are written starting with a big letter, so we have &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ghci&lt;/code&gt; you can type in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:t True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;:t&lt;/code&gt; is a &lt;code&gt;ghci&lt;/code&gt; command for checking the type of a value. Note that this command is not a part of Haskell itself, just a &lt;code&gt;ghci&lt;/code&gt; functionality.&lt;/p&gt;

&lt;p&gt;After clicking enter, as a result, you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True :: Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read &lt;code&gt;::&lt;/code&gt; as "has type". So this line says that the value True has type Bool.&lt;/p&gt;

&lt;p&gt;Just to make sure we understand that correctly, let's check the type of value False:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:t False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False :: Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you probably anticipated, the value False has type Bool as well. So True and False are of the same type. And in Haskell - quite reasonably - True and False are the &lt;em&gt;only&lt;/em&gt; values of the type Bool.&lt;/p&gt;

&lt;p&gt;Contrary to &lt;code&gt;:t&lt;/code&gt;, the &lt;code&gt;&amp;lt;value&amp;gt; :: &amp;lt;type&amp;gt;&lt;/code&gt; syntax &lt;em&gt;is&lt;/em&gt; a part of Haskell language. And this should already hint at something to you. If a language has a dedicated syntax to express the sentence "&amp;lt;value&amp;gt; has type &amp;lt;type&amp;gt;", it means that this language probably treats types fairly seriously. &lt;/p&gt;

&lt;p&gt;As we will soon see, types are at the very heart of programming in Haskell. As a matter of fact, sometimes when coding in Haskell you will be thinking about types &lt;em&gt;more&lt;/em&gt; than about actual values!&lt;/p&gt;

&lt;p&gt;And while we are here, note that the name of the type - &lt;code&gt;Bool&lt;/code&gt; - is also written starting with a big letter in Haskell, just like the names of values. This will be important later.&lt;/p&gt;

&lt;p&gt;Let's now start writing some actual code. We will still use &lt;code&gt;ghci&lt;/code&gt; to run it, but we need to write it in an actual file.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;lesson_1.hs&lt;/code&gt; (in REPL I linked, the file is already created for you and is called &lt;code&gt;main.hs&lt;/code&gt;). Note the &lt;code&gt;.hs&lt;/code&gt; suffix, which represents Haskell source code files.&lt;/p&gt;

&lt;p&gt;You can create that file anywhere you want. You can also edit it with any text editor you desire. &lt;/p&gt;

&lt;p&gt;I would recommend using &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt;. After installing VS Code, immediately go to the "Extensions" tab (on the left) and install the "Haskell" extension. It will give you many handy features. It will for example start displaying the types of values you hover over. If you have trouble with the extension "not detecting &lt;code&gt;ghc&lt;/code&gt;", remember to edit the PATH in the &lt;code&gt;.bashrc&lt;/code&gt;/&lt;code&gt;.zshrc&lt;/code&gt; file, just like I described in the setup section. After that restart the editor.&lt;/p&gt;

&lt;p&gt;After you've created the file, make sure to be - using the terminal - in the same directory where the file is located. To do that, you can leave &lt;code&gt;ghci&lt;/code&gt; by running &lt;code&gt;:q&lt;/code&gt;. Then switch directories to a proper one and run the &lt;code&gt;ghci&lt;/code&gt; command once again. &lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ghci&lt;/code&gt; try loading the file, by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:l lesson_1.hs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though your file doesn't have any code in it just yet, you should see a success message like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1 of 1] Compiling Main ( lesson_1.hs, interpreted )
Ok, one module loaded.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't see that, you've likely run &lt;code&gt;ghci&lt;/code&gt; in a different directory than your file is located.&lt;/p&gt;

&lt;p&gt;But if you see the message, you are ready to begin coding!&lt;/p&gt;

&lt;p&gt;So we have types (&lt;code&gt;Bool&lt;/code&gt;) and values (&lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;). What can we do with them? The most basic thing, known from other languages, would be to assign a value to a variable.&lt;/p&gt;

&lt;p&gt;Write the following line in &lt;code&gt;lesson_1.hs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now load it again in &lt;code&gt;ghci&lt;/code&gt; with the same command as before - &lt;code&gt;:l lesson_1.hs&lt;/code&gt; (remember to save the file beforehand).&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ghci&lt;/code&gt; you can now type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a response you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This shows that, indeed, we assigned the value True to the variable x.&lt;/p&gt;

&lt;p&gt;Now let's do something that might surprise you and that will show you just like radically different Haskell is from "regular" languages.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;lesson_1.hs&lt;/code&gt; file let's write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Load it again in &lt;code&gt;ghci&lt;/code&gt;. You will see the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1 of 1] Compiling Main ( lesson_1.hs, interpreted )

test.hs:2:1: error:
 Multiple declarations of ‚Äòx‚Äô
 Declared at: lesson_1.hs:1:1
 lesson_2.hs:2:1
 |
2 | x = False
 | ^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important part of that error message says that there are &lt;em&gt;Multiple declarations of ‚Äòx‚Äô&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It turns out that in Haskell, once you've assigned a value to a variable, you can't overwrite it or change it in any way. Ever.&lt;/p&gt;

&lt;p&gt;If it's a Bool, you can't change it from True to False. If it's a number (which we will cover in future articles), you can't change its value. For example, you can't even increase the value of a numeric variable by one!&lt;/p&gt;

&lt;p&gt;This sounds incredibly radical to someone used to traditional, imperative programming. Idioms like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;i++;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;someBoolean = !someBoolean;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;etc. are so prevalent in those languages that thought of only assigning a value to a variable once sounds... well... frankly just crazy!&lt;/p&gt;

&lt;p&gt;Is it even possible to write actual, real-world programs with a language like this? &lt;/p&gt;

&lt;p&gt;The answer is absolutely, and we will see that quite soon. But for now, you just have to accept that - once assigned a value - you can't ever change that variable anymore.&lt;/p&gt;

&lt;p&gt;You've likely heard about immutability at this point. I already wrote about &lt;a href="https://dev.to/mpodlasin/functional-programming-in-js-part-ii-immutability-vanilla-js-immutable-js-and-immer-2ccm"&gt;immutability in JavaScript&lt;/a&gt; for example.&lt;/p&gt;

&lt;p&gt;That's the thing though. In those other, imperative languages immutability has to be introduced via some library or specific programming approach. &lt;/p&gt;

&lt;p&gt;It's exactly the reverse in Haskell. Here immutability is the default and you have to use libraries or certain methods to achieve mutable variables/state.&lt;/p&gt;

&lt;p&gt;That might sound cumbersome, but it's not an accident that the principle of immutability became so popular even in the mainstream, "mutable by default" languages. It really makes your code less buggy, safer, and more predictable.&lt;/p&gt;

&lt;p&gt;Ok, enough of talky talk. So we know that once created, we can't alter that variable. But it is by no means useless. We can now call some functions using it.&lt;/p&gt;

&lt;p&gt;Remove the &lt;code&gt;x = False&lt;/code&gt; line from your file, so that loading the file in &lt;code&gt;ghci&lt;/code&gt; works again and &lt;code&gt;x&lt;/code&gt; has the value True.&lt;/p&gt;

&lt;p&gt;Then run the following in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an answer you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you've coded in Python or a language with similar syntax, you might think that &lt;code&gt;not&lt;/code&gt; is some special, reserved keyword for negating booleans.&lt;/p&gt;

&lt;p&gt;No. In Haskell, &lt;code&gt;not&lt;/code&gt; is just a regular function.&lt;/p&gt;

&lt;p&gt;In a typical language, a function call would look something like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;not(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But this is not the case in Haskell. In Haskell, you write the function name, and then - instead of parenthesis - you provide arguments by separating them with a single space.&lt;/p&gt;

&lt;p&gt;So to call a function &lt;code&gt;f&lt;/code&gt; on a variable &lt;code&gt;x&lt;/code&gt; you would write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;f&lt;/code&gt; accepted two parameters, instead of typical &lt;code&gt;f(x, y)&lt;/code&gt; you would write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;f&lt;/code&gt; accepted three parameters, you would write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And so on. You get the idea.&lt;/p&gt;

&lt;p&gt;Let's go back to our &lt;code&gt;not&lt;/code&gt; function. We called it on a variable, but nothing is preventing us from calling it on values directly.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ghci&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;results in the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, just as values, functions have types as well. We can investigate the type of &lt;code&gt;not&lt;/code&gt; function in the same way we investigated the types of True and False - using the &lt;code&gt;:t&lt;/code&gt; command in &lt;code&gt;ghci&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:t not
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you will see the following answer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;not :: Bool -&amp;gt; Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We again see the &lt;code&gt;::&lt;/code&gt; symbol, which means "has type". We see the Bool type mentioned twice. &lt;/p&gt;

&lt;p&gt;The only new symbol here is &lt;code&gt;-&amp;gt;&lt;/code&gt;. As you probably expect, &lt;code&gt;&amp;lt;something&amp;gt; -&amp;gt; &amp;lt;something else&amp;gt;&lt;/code&gt; reads as "function from &amp;lt;something&amp;gt; to &amp;lt;something else&amp;gt;".&lt;/p&gt;

&lt;p&gt;So the output that we got from &lt;code&gt;ghci&lt;/code&gt; can be read as "&lt;code&gt;not&lt;/code&gt; has the type of function from Bool to Bool". Or, more naturally, "&lt;code&gt;not&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; a function from Bool to Bool".&lt;/p&gt;

&lt;p&gt;This shouldn't be surprising. When we call &lt;code&gt;not&lt;/code&gt; on a Bool value, we expect to see the Bool value as a result - the "opposite" of what we've passed. If we called &lt;code&gt;not True&lt;/code&gt; and got &lt;code&gt;15&lt;/code&gt; as an answer, we would be extremely confused, wouldn't we?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-functions"&gt;
  &lt;/a&gt;
  Writing Functions
&lt;/h3&gt;

&lt;p&gt;At this point, I would like to prove to you that there is nothing magical about &lt;code&gt;not&lt;/code&gt;. If it's just a regular function, you should be able to write it by yourself, right?&lt;/p&gt;

&lt;p&gt;Yup, and that's exactly what we will do right now. We will write our first Haskell function!&lt;/p&gt;

&lt;p&gt;We will do that in our &lt;code&gt;lesson_1.hs&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Under the &lt;code&gt;x&lt;/code&gt; definition, write the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down what is happening here a little bit. &lt;/p&gt;

&lt;p&gt;First, we have something that looks exactly like a call of a function - beginning with the name (&lt;code&gt;myNot&lt;/code&gt;), and later the parameters of the function, separated by spaces. In this particular case, we have only one parameter, which we named &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we have an assignment (&lt;code&gt;=&lt;/code&gt; character), after which we write the actual function - the part which we call "function body". In this case, the function body is just a simple &lt;code&gt;if then else&lt;/code&gt; expression. Let's break it down.&lt;/p&gt;

&lt;p&gt;Right after the &lt;code&gt;if&lt;/code&gt; keyword we have to provide a condition. Our condition is really &lt;code&gt;x == True&lt;/code&gt;. You probably recognize &lt;code&gt;==&lt;/code&gt; from other languages. In Haskell it means the same thing - it's an equality operator. &lt;/p&gt;

&lt;p&gt;But &lt;code&gt;x == True&lt;/code&gt; is equivalent to simply writing &lt;code&gt;x&lt;/code&gt;. After all, if &lt;code&gt;x == True&lt;/code&gt; evaluates to True, this means that &lt;code&gt;x&lt;/code&gt; itself has the value of True. So we can just write &lt;code&gt;x&lt;/code&gt; as our condition, for brevity.&lt;/p&gt;

&lt;p&gt;If the condition in &lt;code&gt;if then else&lt;/code&gt; (our &lt;code&gt;x&lt;/code&gt;) evaluates to &lt;code&gt;True&lt;/code&gt;, the function will return the value after the &lt;code&gt;then&lt;/code&gt; keyword. If it evaluates to &lt;code&gt;False&lt;/code&gt;, the function will return the value after the &lt;code&gt;else&lt;/code&gt; keyword. Quite simple.&lt;/p&gt;

&lt;p&gt;Note that in Haskell &lt;code&gt;if then else&lt;/code&gt; is an &lt;em&gt;expression&lt;/em&gt;. This means that in the end, it evaluates to a value - one of the two provided after "then" and "else" keywords. In JavaScript for example this means that it has more common with a ternary operator, rather than regular &lt;code&gt;if/else&lt;/code&gt; &lt;em&gt;statement&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The following code in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;firstValue&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;secondValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;would be therefore equivalent to the following in Haskell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;someVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;firstValue&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;secondValue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's return to the definition of our function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will admit that I've used &lt;code&gt;x&lt;/code&gt; as a parameter name here just to confuse you a little bit. For a second you might think that there is a naming conflict between &lt;code&gt;x&lt;/code&gt; that we defined earlier and the &lt;code&gt;x&lt;/code&gt; from the function.&lt;/p&gt;

&lt;p&gt;You can however convince yourself that that's not true, by loading the file again in &lt;code&gt;ghci&lt;/code&gt;. It loads properly, without any errors. On top of that, our newly defined function &lt;code&gt;myNot&lt;/code&gt; actually works.&lt;/p&gt;

&lt;p&gt;Calling in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;returns&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and vice versa.&lt;/p&gt;

&lt;p&gt;We can even use the function on our &lt;code&gt;x&lt;/code&gt; variable defined above it.&lt;/p&gt;

&lt;p&gt;Running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myNot x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;results in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is correct because in the file we assigned &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So there is no naming conflict, but &lt;em&gt;it is&lt;/em&gt; true that we are "shadowing" the &lt;code&gt;x&lt;/code&gt; variable. If we now wanted to use it in the function body, we couldn't, because we decided to give the same name to the function parameter.&lt;/p&gt;

&lt;p&gt;So, just for clarity, let's change the name of the function parameter to &lt;code&gt;b&lt;/code&gt; (as in "boolean").&lt;/p&gt;

&lt;p&gt;The whole file looks now like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will help us not get confused.&lt;/p&gt;

&lt;p&gt;Perhaps the function definition that we came up with is not at all what you expected. We moaned for so long about the importance of types, but now we've written something that borderline looks like untyped Python. What's going on? Where are those scary types?&lt;/p&gt;

&lt;p&gt;It turns out that Haskell's type system is so powerful, that most of the time it can &lt;em&gt;infer&lt;/em&gt; what should be the type of a function - or a value - you've written. Save the file, load it in &lt;code&gt;ghci&lt;/code&gt; and write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t: myNot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myNot :: Bool -&amp;gt; Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So indeed your custom &lt;code&gt;myNot&lt;/code&gt; function has the same type as the original &lt;code&gt;not&lt;/code&gt;. But how Haskell came to that conclusion?&lt;/p&gt;

&lt;p&gt;It's quite straightforward.&lt;/p&gt;

&lt;p&gt;Since you wrote &lt;code&gt;if x then ...&lt;/code&gt;, using &lt;code&gt;x&lt;/code&gt; as a condition, Haskell knew that parameter &lt;code&gt;x&lt;/code&gt; had to be a Bool. That's because Haskell is (again!) quite strict here and only the value of type Bool can be used as a condition in the &lt;code&gt;if then else&lt;/code&gt; construct. (Note that we've written &lt;em&gt;"as a condition"&lt;/em&gt; here! It's completely fine to provide values of other types after &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; keywords - we will see that in future articles.)&lt;/p&gt;

&lt;p&gt;And at the same time, you wrote &lt;code&gt;then False else True&lt;/code&gt;. Here, in both cases ("then" case and "else" case) you are returning a Bool. Therefore the output of your function has type Bool as well.&lt;/p&gt;

&lt;p&gt;Those two facts combined bring us to a conclusion that the type of &lt;code&gt;myNot&lt;/code&gt; has to be &lt;code&gt;Bool -&amp;gt; Bool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Haskell inference is extremely good and the compiler may only have problems if you write something that is inherently vague.&lt;/p&gt;

&lt;p&gt;And yet it is still recommended to put the type signature of the function in the code. You will see that in the vast majority of Haskell codebases the types are always written explicitly.&lt;/p&gt;

&lt;p&gt;You can do it by writing the type of the function above its definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Writing down the type in the code has some major advantages.&lt;/p&gt;

&lt;p&gt;First of all, it increases the readability of the code. Types are incredibly useful as documentation of what your function does. In Haskell, you will often be able to find out what a given function does simply by looking at its name and type signature. No need to read the implementation!&lt;/p&gt;

&lt;p&gt;Function called &lt;code&gt;not&lt;/code&gt; that has type &lt;code&gt;Bool -&amp;gt; Bool&lt;/code&gt;? It surely must be a function negating the booleans!&lt;/p&gt;

&lt;p&gt;Second of all, it's valuable to write the type of the function before writing the function definition itself. If you do that, Haskell's type system will "guide you" and help validate that your code works as expected.&lt;/p&gt;

&lt;p&gt;After all, inferred type of a function may differ from what you have intended. &lt;/p&gt;

&lt;p&gt;Writing the type beforehand is almost like sketching or designing a function, before actually writing it. Personally, I find that writing down the type first often gives me a better idea of how to implement the function.&lt;/p&gt;

&lt;p&gt;This is an example of a skill that Haskell teaches you, that you can easily transfer to other languages. Even when I'm writing untyped JavaScript, I still always start by thinking about what kind of type signature my function will have. This helps me to write code faster and make fewer bugs, even though I have to be my own type-checker in that case.&lt;/p&gt;

&lt;p&gt;So we have successfully replicated the &lt;code&gt;not&lt;/code&gt; function - &lt;code&gt;myNot&lt;/code&gt; has the same type &lt;em&gt;and&lt;/em&gt; behaves in the same way. Running &lt;code&gt;myNot True&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt;, running &lt;code&gt;myNot False&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But let's stay on this topic a bit longer and try to write the same function in a completely different manner.&lt;/p&gt;

&lt;p&gt;Let's write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check for yourself that this loads properly in the &lt;code&gt;ghci&lt;/code&gt;. You can also test that &lt;code&gt;myNot&lt;/code&gt; still behaves the same as before.&lt;/p&gt;

&lt;p&gt;What is happening here?&lt;/p&gt;

&lt;p&gt;We used what is known as pattern matching.&lt;/p&gt;

&lt;p&gt;Instead of declaring the parameter of the function as a variable named &lt;code&gt;b&lt;/code&gt;, we can avoid naming it entirely and simply substitute it with a value that will be provided to the function once it's called.&lt;/p&gt;

&lt;p&gt;When we make a call &lt;code&gt;myNot True&lt;/code&gt;, Haskell looks for a definition that "fits" such a call. In this case, it's the first line (not counting the type signature). If we make a call &lt;code&gt;myNot False&lt;/code&gt;, then it's the second line that &lt;em&gt;matches&lt;/em&gt; that call. Hence the name "pattern matching".&lt;/p&gt;

&lt;p&gt;Hopefully, it's clear that if you call &lt;code&gt;myNot&lt;/code&gt; with a variable, not an actual value, pattern matching will still work just fine. In that case, Haskell simply evaluates the value of the variable and performs pattern matching then.&lt;/p&gt;

&lt;p&gt;So with this new definition, calling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Still properly returns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have two versions of the same function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For all intents and purposes, these two functions behave in the same way (and have the same type). Which one you prefer depends entirely on you.&lt;/p&gt;

&lt;p&gt;Do you want to see yet another way to write the same function? Here you go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arguably this way of writing the function looks the most exotic.&lt;/p&gt;

&lt;p&gt;It uses what is known as "guards". A guard is basically a condition, which is placed between &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt; characters. When the condition is satisfied, a function body that is defined after &lt;code&gt;=&lt;/code&gt; gets executed.&lt;/p&gt;

&lt;p&gt;In our case, the first guard is &lt;code&gt;b == True&lt;/code&gt;. But - just as before - we can write the same condition as simply &lt;code&gt;b&lt;/code&gt;. If &lt;code&gt;b&lt;/code&gt; is True, this condition is satisfied and the function body that returns False will be executed.&lt;/p&gt;

&lt;p&gt;Otherwise (so when &lt;code&gt;b&lt;/code&gt; is not True), the function body that returns True will be executed.&lt;/p&gt;

&lt;p&gt;Interestingly, there is nothing magical about the keyword &lt;code&gt;otherwise&lt;/code&gt;. (Are you noticing a pattern here, where some "feature" of the language is not really a feature, but simply something coded in that language?)&lt;/p&gt;

&lt;p&gt;You can convince yourself that this is true by writing &lt;code&gt;otherwise&lt;/code&gt; in the &lt;code&gt;ghci&lt;/code&gt; console. As a response you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yup. &lt;code&gt;otherwise&lt;/code&gt; is nothing more than a regular variable, holding the value True! Just as our &lt;code&gt;x&lt;/code&gt; is!&lt;/p&gt;

&lt;p&gt;So, without the &lt;code&gt;otherwise&lt;/code&gt; our "guarded" version of the function would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just as in &lt;code&gt;if then else&lt;/code&gt;, a condition &lt;em&gt;has to&lt;/em&gt; be a Bool value. If the last condition is set to True, like it's the case here, it will always hold and therefore it will act as a catchall case if the guards above it fail. Calling it &lt;code&gt;otherwise&lt;/code&gt; is just done to make this a bit more readable.&lt;/p&gt;

&lt;p&gt;One more thing to mention here is that we used indentation. You see that lines starting with &lt;code&gt;|&lt;/code&gt; characters are moved a bit to the right. If we didn't do it and wrote the code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we would get an error while loading that file in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test.hs:3:1: error: parse error on input ‚Äò|‚Äô
 |
3 | | b = False
 | ^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Indenting code makes it more readable for humans and - as you can see - also helps the compiler understand that a given line is still a part of the definition that began in the previous line.&lt;/p&gt;

&lt;p&gt;How much you indent the code is not important to the compiler - it has to be at least one space. But adding a few more spaces is better to keep the code nicely formatted for humans.&lt;/p&gt;

&lt;p&gt;So we have written &lt;code&gt;myNot&lt;/code&gt; in 3 different ways. Which one you prefer depends on you. Nevertheless, it's extremely valuable to get to know all 3 constructs that we've used - if then else, pattern matching and guards - because they appear almost all the time in Haskell code.&lt;/p&gt;

&lt;p&gt;We used them in separation here, but in the future, you will see that you can mix those constructs in various ways, especially when writing more complex code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-types-and-values"&gt;
  &lt;/a&gt;
  Creating Types and Values
&lt;/h3&gt;

&lt;p&gt;So far we have written a custom &lt;code&gt;not&lt;/code&gt; function for the &lt;code&gt;Bool&lt;/code&gt; type. But what if we could recreate the &lt;code&gt;Bool&lt;/code&gt; type itself, as well as its values? Is it even possible?&lt;/p&gt;

&lt;p&gt;Indeed, it's possible and even simple. Let's create a &lt;code&gt;MyBool&lt;/code&gt; type. It will have two values - &lt;code&gt;MyTrue&lt;/code&gt; and &lt;code&gt;MyFalse&lt;/code&gt;. It might seem that we are getting a bit possessive here (wink, wink), but that's only to avoid conflicts with already existing names.&lt;/p&gt;

&lt;p&gt;At the top of our &lt;code&gt;lesson_1.hs&lt;/code&gt; file let's write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy right?&lt;/p&gt;

&lt;p&gt;After you load that file in the &lt;code&gt;ghci&lt;/code&gt;, you can run &lt;code&gt;:t MyTrue&lt;/code&gt; to doublecheck that &lt;code&gt;MyTrue&lt;/code&gt; has type &lt;code&gt;MyBool&lt;/code&gt;, mirroring how &lt;code&gt;True&lt;/code&gt; has type &lt;code&gt;Bool&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyTrue :: MyBool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same is true for &lt;code&gt;MyFalse&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyFalse :: MyBool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, I lied to you &lt;em&gt;a bit&lt;/em&gt;. If you type this in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyTrue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a mysterious message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;interactive&amp;gt;:68:1: error:
 ‚Ä¢ No instance for (Show MyBool) arising from a use of ‚Äòprint‚Äô
 ‚Ä¢ In a stmt of an interactive GHCi command: print it
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It happens because &lt;code&gt;ghci&lt;/code&gt; tries to simply print the value, but... It doesn't know how!&lt;/p&gt;

&lt;p&gt;This is part of the language that will cover in future articles. Luckily we don't have to worry about it for now. Haskell can create sane default for printing, you just have to command it to do that, by adding the following line to type definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt;
 &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now call &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyTrue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will simply print back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyTrue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I said - a sane default. In the future, we will learn how to customize that printing capability, but for now, it's perfectly fine.&lt;/p&gt;

&lt;p&gt;You can now write functions that operate on this brand new type, just as we wrote a function for the built-in &lt;code&gt;Bool&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;So if we wanted &lt;code&gt;myNot&lt;/code&gt; to work on that custom &lt;code&gt;MyBool&lt;/code&gt; type, we would do it like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply replaced all occurrences of &lt;code&gt;Bool&lt;/code&gt; with &lt;code&gt;MyBool&lt;/code&gt;, all occurrences of &lt;code&gt;True&lt;/code&gt; with &lt;code&gt;MyTrue&lt;/code&gt;, and all occurrences of &lt;code&gt;False&lt;/code&gt; with &lt;code&gt;MyFalse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We now have both a built-in version (&lt;code&gt;Bool&lt;/code&gt;) and a custom version (&lt;code&gt;MyBool&lt;/code&gt;) of a boolean type. Wouldn't it be convenient to write functions to switch between them?&lt;/p&gt;

&lt;p&gt;Let's do it!&lt;/p&gt;

&lt;p&gt;First let's write a &lt;code&gt;boolToMyBool&lt;/code&gt; function. It will take a regular, Haskell &lt;code&gt;Bool&lt;/code&gt; and transform it to our custom &lt;code&gt;MyBool&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's write a function that will do the reverse:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We used two different ways to write a function on purpose here. Note that we wouldn't be able to use &lt;code&gt;if then else&lt;/code&gt; with &lt;code&gt;MyBool&lt;/code&gt; type as a conditional, because it works only on the built-in &lt;code&gt;Bool&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;But on the other hand, we can use pattern matching in both, because pattern matching works with custom-defined values without any problems.&lt;/p&gt;

&lt;p&gt;Great. We can now transform back and forth between built-in and custom types. Let's try that.&lt;/p&gt;

&lt;p&gt;Load the file in &lt;code&gt;ghci&lt;/code&gt; with both definitions and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see &lt;code&gt;MyTrue&lt;/code&gt; as a response.&lt;/p&gt;

&lt;p&gt;Now let's try to transform the same value back. Let's write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see &lt;code&gt;True&lt;/code&gt; as the response. &lt;/p&gt;

&lt;p&gt;What happened here is that we converted &lt;code&gt;True&lt;/code&gt; to &lt;code&gt;MyTrue&lt;/code&gt; using the &lt;code&gt;boolToMyBool&lt;/code&gt; function (inside the parenthesis), and then we took that result and converted it back to &lt;code&gt;True&lt;/code&gt; using the &lt;code&gt;myBoolToBool&lt;/code&gt; function, all in a single expression.&lt;/p&gt;

&lt;p&gt;Is it a bit nonsensical example? Perhaps, but it shows us how we can chain multiple function calls.&lt;/p&gt;

&lt;p&gt;In fact, the brackets around the first function call are important.&lt;/p&gt;

&lt;p&gt;Try to run the following in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The compiler will show a fairly elaborate error message, but if you read it carefully, you will find the following sentence:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The function ‚ÄòmyBoolToBool‚Äô is applied to two arguments,
 but its type ‚ÄòMyBool -&amp;gt; Bool‚Äô has only one
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ha, so we found what is the problem. Indeed, our code looks as if we are trying to apply the &lt;code&gt;myBoolToBool&lt;/code&gt; function to two parameters - &lt;code&gt;boolToMyBool&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt;. Remember how &lt;code&gt;f x y&lt;/code&gt; was representing calling a function &lt;code&gt;f&lt;/code&gt; on two parameters? That's exactly what we are doing here! In that case, &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;myBoolToBool&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;boolToMyBool&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have to show the compiler that we want to apply the &lt;code&gt;myBoolToBool&lt;/code&gt; function to a &lt;em&gt;single&lt;/em&gt; parameter. And that parameter is a result of calling &lt;code&gt;boolToMyBool&lt;/code&gt; on &lt;code&gt;True&lt;/code&gt;. So we wrap that call in parenthesis to make that clearer (both to the compiler and us):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can we use those conversion functions for something more practical than needlessly translating booleans back and forth? Absolutely - we can use them to rewrite our &lt;code&gt;myNot&lt;/code&gt; implementation once again.&lt;/p&gt;

&lt;p&gt;We can use the fact that the &lt;code&gt;Bool&lt;/code&gt; type has already the &lt;code&gt;not&lt;/code&gt; function defined. It works exactly how we want, it just operates on different types. So let's take a &lt;code&gt;MyBool&lt;/code&gt; value, convert it to &lt;code&gt;Bool&lt;/code&gt;, use &lt;code&gt;not&lt;/code&gt; on it, and then convert it back to &lt;code&gt;MyBool&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's review step by step how that function works.&lt;/p&gt;

&lt;p&gt;Since it's a function of type &lt;code&gt;MyBool -&amp;gt; MyBool&lt;/code&gt;, its argument is a &lt;code&gt;MyBool&lt;/code&gt; - that's why we called it &lt;code&gt;mb&lt;/code&gt;. We pass that variable to a function - &lt;code&gt;myBoolToBool mb&lt;/code&gt; - and as a result, we are getting something of type &lt;code&gt;Bool&lt;/code&gt;. Then we are applying &lt;code&gt;not&lt;/code&gt; on it, by writing &lt;code&gt;not (myBoolToBool x)&lt;/code&gt;. Note that at this step the type doesn't change - we are feeding &lt;code&gt;not&lt;/code&gt; a &lt;code&gt;Bool&lt;/code&gt; and getting a &lt;code&gt;Bool&lt;/code&gt; again, since &lt;code&gt;not&lt;/code&gt; is of type &lt;code&gt;Bool -&amp;gt; Bool&lt;/code&gt;. At the end we convert back to &lt;code&gt;MyBool&lt;/code&gt;, by writing &lt;code&gt;boolToMyBool (not (myBoolToBool x))&lt;/code&gt; - which is the return value of our function.&lt;/p&gt;

&lt;p&gt;This could be again summarised as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This technique of tracking which value has which type is extremely valuable, especially when just starting with Haskell. Whenever you feel lost about how a certain function works, I would encourage you to analyze all the types of all the values in that function. You will discover that when you know all the types well, it's much easier to understand how the code works and what it does.&lt;/p&gt;

&lt;p&gt;This is the second example of a skill that Haskell teaches you, which is immediately transferable to programming in other languages. Even if your day-to-day language is loosely typed and doesn't have types in its actual syntax, you can still use this way of thinking to better understand functions while reading code.&lt;/p&gt;

&lt;p&gt;In time you will discover that this allows you to understand code much faster, especially the code that you haven't written yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So we played with Bools in Haskell, serving as our introductory lesson in that language.&lt;/p&gt;

&lt;p&gt;We've learned the basics of Haskell's syntax, we've seen how to create and use functions, and even how to create some simple datatypes.&lt;/p&gt;

&lt;p&gt;In future articles, we will elaborate on those ideas quite a bit, so if you are hooked on Haskell by now (as I hope you are!), I would recommend to follow me on &lt;a href="https://twitter.com/m_podlasin"&gt;Twitter&lt;/a&gt;. I don't run any kind of newsletter email or anything like that, so that's the best way to get notified when a new article drops.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments regarding the article, you can reach me there as well. I would like to keep improving this article so that it serves others as best as possible.&lt;/p&gt;

&lt;p&gt;Thanks for reading and see you soon!&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>functional</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Hey Android, Where's my Process?</title>
      <author>Nikhil Thakkar</author>
      <pubDate>Thu, 29 Jul 2021 19:13:30 +0000</pubDate>
      <link>https://dev.to/_nikhi1/hey-android-where-s-my-process-4f0e</link>
      <guid>https://dev.to/_nikhi1/hey-android-where-s-my-process-4f0e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Sometimes good guys gotta do bad things to make the bad guys pay. &lt;br&gt;
&lt;br&gt;- &lt;em&gt;Harvey Specter&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This article is a followup on this &lt;a href="https://medium.com/mindorks/hey-android-please-keep-my-activities-7bf96ccc0a38"&gt;medium article&lt;/a&gt; written by my friend Calvin. I would highly recommend you to go through it as it lays the foundation for this article.&lt;/p&gt;

&lt;p&gt;We would be particularly dealing with process kill scenarios and explore potential solutions to mitigate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#android-app-lifecycle"&gt;
  &lt;/a&gt;
  Android App Lifecycle
&lt;/h2&gt;

&lt;p&gt;Every app runs in its own sandbox environment i.e its own process. Every process is allotted some amount of RAM from the existing available RAM by the OS.&lt;/p&gt;

&lt;p&gt;Nowadays, Android is becoming more and more battery-friendly and it's doing that, partly, by aggressively killing background apps that are not in the foreground after a relatively small amount of time. This, of course, depends on various other factors happening on the device like available RAM, etc. Check out this &lt;a href="https://dontkillmyapp.com/"&gt;site&lt;/a&gt; for more information about how different manufacturers deal with background apps restrictions.&lt;/p&gt;

&lt;p&gt;So it's the developer's responsibility to test his/her app for such scenarios for optimal user experience. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-simulate-a-process-kill-wink"&gt;
  &lt;/a&gt;
  How to simulate a process kill üòâ?
&lt;/h2&gt;

&lt;p&gt;Now that we have established the reason to test these edge cases, its time to simulate a process kill scenario.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAYrn_UE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giphygifs.s3.amazonaws.com/media/8oPkn7Hl79J6g/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAYrn_UE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giphygifs.s3.amazonaws.com/media/8oPkn7Hl79J6g/giphy.gif" alt="Harvey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-naive-way"&gt;
  &lt;/a&gt;
  The Naive way
&lt;/h3&gt;

&lt;p&gt;The camera app on your phone is resource-intensive and requires a lot of RAM to run. Once you start the app, this results in the systematic killing of your background apps almost instantly. Mind well this might not be true for every scenario. Only opt for this approach if you are lazy üòÅ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-nerdy-way"&gt;
  &lt;/a&gt;
  The Nerdy way üòé
&lt;/h3&gt;

&lt;p&gt;Let's get our hands dirty and run some terminal commands. Assuming an Android emulator is available and you have the sample project running with applicationId &lt;strong&gt;com.processkill.example&lt;/strong&gt;, go to terminal and type this command (these commands have been tested on Android emulator running P)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adb shell pidof com.processkill.example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should output the ProcessID in which the app is running. Now go ahead and minimize the app by pressing the HOME button. This is needed to be done as Android would not kill a user-focused activity/app/process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adb shell am kill com.processkill.example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By running this command we have in principle simulated a process kill scenario. If you run the earlier command again you should see an empty string being printed on console meaning the process has been actually terminated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-for-retrospective"&gt;
  &lt;/a&gt;
  Time for retrospective
&lt;/h3&gt;

&lt;p&gt;Go ahead and test your app by running the above commands and see how it behaves in different scenarios.&lt;br&gt;
If you have a well-crafted app and it works well in the above scenario then you should be proud of yourself achieving such a feat üçª. &lt;/p&gt;

&lt;p&gt;If you are facing some issues then read on.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whos-the-culprit-and-i-dont-mean-its-you-joy"&gt;
  &lt;/a&gt;
  Who's the culprit? And I don't mean it's you üòÇ
&lt;/h3&gt;

&lt;p&gt;There could be a number of reasons for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maybe the way you have implemented the app architecture without giving 
careful thought about the state of the app in such scenarios.&lt;/li&gt;
&lt;li&gt;You were short on time, which is mostly the case, in fast pace driven development.&lt;/li&gt;
&lt;li&gt;Android itself üòè&lt;/li&gt;
&lt;li&gt;Add your own reason üòÅ&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The issue/feature about &lt;strong&gt;Android&lt;/strong&gt; is that it will automagically re-create the last Activity and also re-attach the Fragments, if any, from your Task Stack if the user resumes the app after it has been killed by OS. This is different from &lt;strong&gt;iOS&lt;/strong&gt; behaviour wherein the OS doesn't restore the last ViewController automatically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though the intention from Android seem correct resulting in better UX, it throws a challenge for us, developers, to handle these scenarios and think of it while designing apps.&lt;/p&gt;

&lt;p&gt;Let's see what we can do here and strike a balance between UX and state of the app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-first-repeat-after-me"&gt;
  &lt;/a&gt;
  But first, repeat after me:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Static and/or member variables defined in the &lt;strong&gt;Application&lt;/strong&gt; or any &lt;strong&gt;Singleton&lt;/strong&gt; class won't survive the &lt;strong&gt;process kill&lt;/strong&gt; and will reset to their default values which could be &lt;strong&gt;null&lt;/strong&gt;. Remember &lt;code&gt;NullPointerException&lt;/code&gt; üò±.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#scenario-1"&gt;
  &lt;/a&gt;
  Scenario: 1
&lt;/h4&gt;

&lt;p&gt;You don't have any caching/persistence strategy implemented for your app.&lt;/p&gt;

&lt;p&gt;In such scenarios, the easiest way out would be to start from a clean slate. Here is the code that can potentially go inside the BaseActivity class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer Warning&lt;/strong&gt;‚ö†Ô∏è  Use this solution only as a last resort.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;currentProcessId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;myPid&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentProcessId&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PID_KEY&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;intent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicationContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;SplashActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_ACTIVITY_NEW_TASK&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_ACTIVITY_CLEAR_TASK&lt;/span&gt;
                &lt;span class="nf"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;putString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PID_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;myPid&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this piece of code is doing is that if we detect our app has been recreated because of the process kill then we re-direct the app to the launcher activity which in this case is the SplashActvity.&lt;/p&gt;

&lt;p&gt;At first, you would be tempted to use this solution in every app you have built. But this would be bad for UX as the user expects to start off from where he/she left your application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scenario-2"&gt;
  &lt;/a&gt;
  Scenario: 2
&lt;/h4&gt;

&lt;p&gt;Let's try to put everything in &lt;code&gt;Bundle&lt;/code&gt; -&amp;gt; objects that are intended to be used across process boundaries such as with IPC/Binder transactions, between activities with intents, and to store transient state across configuration changes. &lt;/p&gt;

&lt;p&gt;Please refer to &lt;a href="https://github.com/nikhil-thakkar/process-kill-example"&gt;this&lt;/a&gt; github repo for a sample project. Checkout the master branch for the project if you want to follow along.&lt;br&gt;
The code is very simple to understand and is pretty much a boilerplate with classical MVC üòã.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm using sample json files packed inside &lt;code&gt;assets&lt;/code&gt; folder to keep things simple and readable.&lt;br&gt;
The json file holds some randomly generated data to be consumed by the app. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main components of the app are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DataProvider&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a simple interface to abstract the source from where the data is coming from. In our case it's a file read from &lt;code&gt;assets&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MainFragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listing page of all the users.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DetailFragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detail page about a particular user.&lt;/p&gt;

&lt;p&gt;Now if you place around with the app, it should work fine in every scenario including process death. Do verify it by running the terminal commands to simulate a process death scenario we discussed above.&lt;/p&gt;

&lt;p&gt;Now follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checkout branch &lt;strong&gt;scenario-2&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Run the app&lt;/li&gt;
&lt;li&gt;Minimize it&lt;/li&gt;
&lt;li&gt;Look at logcat for some suprises üí©
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;2019-11-13 21:40:10.542 24962-24962/com.processkill.example E/AndroidRuntime: FATAL EXCEPTION: main
    Process: com.processkill.example, PID: 24962
    java.lang.RuntimeException: android.os.TransactionTooLargeException: data parcel size 1253524 bytes
        at android.app.servertransaction.PendingTransactionActions&lt;span class="nv"&gt;$StopInfo&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;PendingTransactionActions.java:161&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.Handler.handleCallback&lt;span class="o"&gt;(&lt;/span&gt;Handler.java:883&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.Handler.dispatchMessage&lt;span class="o"&gt;(&lt;/span&gt;Handler.java:100&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.Looper.loop&lt;span class="o"&gt;(&lt;/span&gt;Looper.java:214&lt;span class="o"&gt;)&lt;/span&gt;
        at android.app.ActivityThread.main&lt;span class="o"&gt;(&lt;/span&gt;ActivityThread.java:7319&lt;span class="o"&gt;)&lt;/span&gt;
        at java.lang.reflect.Method.invoke&lt;span class="o"&gt;(&lt;/span&gt;Native Method&lt;span class="o"&gt;)&lt;/span&gt;
        at com.android.internal.os.RuntimeInit&lt;span class="nv"&gt;$MethodAndArgsCaller&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;RuntimeInit.java:492&lt;span class="o"&gt;)&lt;/span&gt;
        at com.android.internal.os.ZygoteInit.main&lt;span class="o"&gt;(&lt;/span&gt;ZygoteInit.java:934&lt;span class="o"&gt;)&lt;/span&gt;
     Caused by: android.os.TransactionTooLargeException: data parcel size 1253524 bytes
        at android.os.BinderProxy.transactNative&lt;span class="o"&gt;(&lt;/span&gt;Native Method&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.BinderProxy.transact&lt;span class="o"&gt;(&lt;/span&gt;BinderProxy.java:510&lt;span class="o"&gt;)&lt;/span&gt;
        at android.app.IActivityTaskManager&lt;span class="nv"&gt;$Stub$Proxy&lt;/span&gt;.activityStopped&lt;span class="o"&gt;(&lt;/span&gt;IActivityTaskManager.java:4500&lt;span class="o"&gt;)&lt;/span&gt;
        at android.app.servertransaction.PendingTransactionActions&lt;span class="nv"&gt;$StopInfo&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;PendingTransactionActions.java:145&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because when we communicate across different process boundaries there is limit on the data we can share with the other process wiz. &lt;strong&gt;1MB&lt;/strong&gt;. In our case it's a bit over 1MB and hence the exception, &lt;code&gt;TransactionTooLargeException&lt;/code&gt;, which results in process being killed when in background.&lt;/p&gt;

&lt;p&gt;Therefore always carefully examine what you are going to put in &lt;code&gt;Bundle&lt;/code&gt; and size implications.&lt;br&gt;
Save the smallest amount of data possible which could be one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;primary column id when reading from database or &lt;/li&gt;
&lt;li&gt;file path when reading from disk or &lt;/li&gt;
&lt;li&gt;some other souce from where you can reliably re-create app state somehow or&lt;/li&gt;
&lt;li&gt;try try try or&lt;/li&gt;
&lt;li&gt;fallback to &lt;strong&gt;Scenario: 1&lt;/strong&gt; üíØ &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#side-note-on-flutter"&gt;
  &lt;/a&gt;
  Side note on Flutter
&lt;/h3&gt;

&lt;p&gt;Flutter apps run inside a single activity. These apps would, by default, start from the &lt;strong&gt;first widget&lt;/strong&gt; defined in case of &lt;code&gt;Don't keep activities/process death&lt;/code&gt; scenarios unless explicitly handled. This first widget would be the one defined by &lt;em&gt;home&lt;/em&gt; property inside &lt;strong&gt;MaterialApp&lt;/strong&gt; widget.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-it-for-this-time"&gt;
  &lt;/a&gt;
  That's It for this time!
&lt;/h3&gt;

&lt;p&gt;Thank you for hanging around. Hope you learned something new üòÉ. Feel free to reach out on twitter - &lt;a href="https://twitter.com/_nikhi1"&gt;&lt;strong&gt;@_nikhi1&lt;/strong&gt;&lt;/a&gt; - for any questions/feedback you have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TW6HfTEHrAPv2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TW6HfTEHrAPv2/giphy.gif" alt="Harvey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/guide/components/processes-and-threads"&gt;Processes and Threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/guide/components/activities/parcelables-and-bundles"&gt;Parcels and Bundles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JoseAlcerreca/android-lifecycles"&gt;Android Lifecycle Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/reference/android/os/TransactionTooLargeException"&gt;Transactions Too Large Expection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/topic/libraries/architecture/viewmodel-savedstate"&gt;Save State Module for ViewModel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pub.dev/packages/native_state"&gt;Flutter Native State Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>android</category>
      <category>processkill</category>
      <category>background</category>
    </item>
    <item>
      <title>How to Use CDK Outputs in Your InSpec Tests</title>
      <author>Jenna Pederson</author>
      <pubDate>Thu, 29 Jul 2021 18:59:59 +0000</pubDate>
      <link>https://dev.to/aws/how-to-use-cdk-outputs-in-your-inspec-tests-18h6</link>
      <guid>https://dev.to/aws/how-to-use-cdk-outputs-in-your-inspec-tests-18h6</guid>
      <description>&lt;p&gt;As a programmer, hard-coding values in my code, even test code, feels dirty and it's usually not a scalable practice. I've built an AWS CDK app to manage my infrastructure with code and I'm starting to write some integration tests with &lt;a href="https://docs.chef.io/inspec/"&gt;InSpec&lt;/a&gt;, an open-source testing and auditing framework. Unlike my Jest unit tests that test the infrastructure code, these tests compare the desired state (what's in my InSpec test code) with the current state (what's in the cloud). This means they are testing directly against the cloud resources and I'll need access to the IDs of the resources I'm writing tests against. I could hard-code these IDs in my tests, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;aws_ec2_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"i-1234567890abcdef0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_running&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yuck!&lt;/p&gt;

&lt;p&gt;As soon as I re-deploy the CDK code, these resources can be re-provisioned and the IDs can change. And if I'm running my CDK code through a CI/CD pipeline I'll need to run infrastructure tests against resources in different environments. Resource IDs will differ across environments and accounts, also making it difficult for another developer on my team to run the tests against their account. Either way, as a programmer, hard-coding these resource IDs in my test code doesn't feel right and it won't scale.&lt;/p&gt;

&lt;p&gt;Instead, I can add Outputs to our CDK app and push those values to a JSON file that my InSpec tests can use. Let's take a look how to do that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-cdk-outputs"&gt;
  &lt;/a&gt;
  Add CDK Outputs
&lt;/h2&gt;

&lt;p&gt;First, I'll add an output to the CDK code to output the resource's ID, the EC2 instance ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ec2Instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ec2-instance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;InstanceId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ec2Instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instanceId&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-cdk-app-to-get-outputsjson"&gt;
  &lt;/a&gt;
  Deploy CDK App to Get Outputs.json
&lt;/h2&gt;

&lt;p&gt;Next, I'll deploy the CDK app and push the output values to a JSON file that the InSpec profile can use. InSpec expects this file to be located in the profile's &lt;code&gt;files&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cdk deploy &lt;span class="nt"&gt;--outputs-file&lt;/span&gt; inspec/files/outputs.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-cdk-outputs-as-inputs-in-inspec"&gt;
  &lt;/a&gt;
  Use CDK Outputs as Inputs in InSpec
&lt;/h2&gt;

&lt;p&gt;Finally, to use the CDK output values in the InSpec test control, I need to read this file using &lt;code&gt;inspec.profile.file&lt;/code&gt;, parse the JSON, and reference the value in the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;control&lt;/span&gt; &lt;span class="s2"&gt;"01-ec2-instance"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;impact&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
  &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="s2"&gt;"Verify EC2 Instance is Running"&lt;/span&gt;

  &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'outputs.json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="no"&gt;INSTANCE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'MyStack'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'InstanceId'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;aws_ec2_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;INSTANCE_ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_running&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Now my tests rely on dynamic values rather than hard-coded values. These tests won't break the moment a resource gets swapped out or when I run tests in a different environment. If you're not using the CDK, you can follow the same process with other infrastructure as code frameworks as well.&lt;/p&gt;

&lt;p&gt;Grab the code &lt;a href="https://github.com/jennapederson/infrastructure-test-examples"&gt;here&lt;/a&gt; to get started with the CDK, Jest unit tests, or InSpec infrastructure testing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Like what you read? Follow me here on the &lt;a href="https://dev.to/jennapederson"&gt;Dev.to community&lt;/a&gt; or give me a follow on &lt;a href="https://twitter.com/jennapederson"&gt;Twitter&lt;/a&gt; to stay updated!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>iac</category>
      <category>cdk</category>
      <category>inspec</category>
    </item>
    <item>
      <title>Full Stack Netflix App (7 hours free tutorial)</title>
      <author>Safak</author>
      <pubDate>Thu, 29 Jul 2021 18:55:43 +0000</pubDate>
      <link>https://dev.to/safak/full-stack-netflix-app-7-hours-free-tutorial-1o6l</link>
      <guid>https://dev.to/safak/full-stack-netflix-app-7-hours-free-tutorial-1o6l</guid>
      <description>&lt;p&gt;Hi, I'm Safak. I am a full-stack web developer and I'm sharing open source web projects on my YouTube channel. After &lt;a href="https://dev.to/safak/social-media-app-using-mern-stack-4ic6"&gt;Full Stack Social Media App&lt;/a&gt; project, I decided to share my 7 hours "MERN Stack Netflix Clone with an Admin Panel" tutorial. &lt;/p&gt;

&lt;p&gt;For this project I used Express API, MongoDB, React functional components, hooks with context API. I hope you will enjoy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-part-of-the-netflix-app"&gt;
  &lt;/a&gt;
  Design Part of the Netflix App
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to design Netflix clone using React.js and Sass.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FzWG8jiw4XM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mern-stack-part"&gt;
  &lt;/a&gt;
  MERN Stack Part
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to create an Express server with the MongoDB connection. And we are going to make API requests on the client side using axios, hooks and context API.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tsNswx0nRKM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope it was useful. If you want to learn more about web development and practice with real-world projects, you can check my channel out.&lt;/p&gt;

&lt;p&gt;üî• &lt;a href="https://www.youtube.com/c/lamadev"&gt;Lama Dev YouTube Channel&lt;/a&gt;&lt;br&gt;
‚ö°Ô∏è &lt;a href="https://www.facebook.com/groups/lamadev"&gt;Lama Dev Facebook&lt;/a&gt;&lt;br&gt;
üëæ &lt;a href="https://github.com/safak/youtube/tree/mern-netflix-app"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
  </channel>
</rss>
