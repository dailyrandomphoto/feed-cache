<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introducing Arch-Go</title>
      <author>Francisco Daines</author>
      <pubDate>Tue, 20 Apr 2021 22:53:18 +0000</pubDate>
      <link>https://dev.to/fdaines/introducing-arch-go-4dch</link>
      <guid>https://dev.to/fdaines/introducing-arch-go-4dch</guid>
      <description>&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;In this article, we'll show what is &lt;a href="https://pkg.go.dev/github.com/fdaines/arch-go"&gt;Arch-Go&lt;/a&gt; and how to use it in order to check the architecture of a project in Go.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-archgo"&gt;
  &lt;/a&gt;
  What is Arch-Go?
&lt;/h1&gt;

&lt;p&gt;Arch-Go is a testing tool that verifies if your Go project adheres to your architectural guidelines. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-little-review-of-architectural-guidelines"&gt;
  &lt;/a&gt;
  A little review of architectural guidelines
&lt;/h2&gt;

&lt;p&gt;The architectural guidelines of a system defines properties like the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How packages are defined&lt;/li&gt;
&lt;li&gt;How packages interact&lt;/li&gt;
&lt;li&gt;What kind of assets should be part of each package&lt;/li&gt;
&lt;li&gt;Some properties related to specific assets, for example it describes some functions or interfaces properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, let's think that you're working on a Rest Service using a layered structure containing the following three packages: &lt;em&gt;presentation&lt;/em&gt;, &lt;em&gt;businesslogic&lt;/em&gt; and &lt;em&gt;persistence&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Presentation:&lt;/strong&gt; it contains our REST handlers.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Business Logic:&lt;/strong&gt; it contains the components that encapsulates the business logic of our service.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Persistence:&lt;/strong&gt; it contains components to access our persistence services, like a database client.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oFbwxtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uf9knxq6kh7dwuohi0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oFbwxtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0uf9knxq6kh7dwuohi0m.png" alt="REST Service using a layered architecture." title="REST Service using a layered architecture."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we have decided to use a layered architecture, we can find out some dependency rules between its packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The components in &lt;em&gt;presentation&lt;/em&gt; package should depend only on components in the &lt;em&gt;businesslogic&lt;/em&gt; package.&lt;/li&gt;
&lt;li&gt;The components in &lt;em&gt;businesslogic&lt;/em&gt; package should depend only on components in the &lt;em&gt;persistence&lt;/em&gt; package.&lt;/li&gt;
&lt;li&gt;Components in &lt;em&gt;persistence&lt;/em&gt; package should not depend on any other package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What happens if a developer includes a dependency that is not allowed?, for example, a handler that depends on a persistence component. Of course, we should detect this violation in a Pull-Request code review, but as this process is manual then is prone to errors, so we can easily get the following result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYKZtF5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx2for9slyeurswbvajc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYKZtF5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx2for9slyeurswbvajc.png" alt="REST Service using a layered architecture that includes not allowed dependencies." title="REST Service using a layered architecture that includes not allowed dependencies."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What are the consequences of including these dependencies?, in terms of functionalities maybe there will be no impact, but related to system maintenance there are some implications, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unnecessary coupling between &lt;em&gt;presentation&lt;/em&gt; and &lt;em&gt;persistence&lt;/em&gt; layers, so changes in &lt;em&gt;persistence&lt;/em&gt; probably will have an impact on &lt;em&gt;presentation&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;As our handlers have more dependencies, testing them will require more effort.&lt;/li&gt;
&lt;li&gt;Onboarding of new developers will be more complex, as the explanation of dependencies is an important part of this process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#declarative-aproach"&gt;
  &lt;/a&gt;
  Declarative aproach
&lt;/h2&gt;

&lt;p&gt;Arch-Go uses a declarative approach to set the architecture rules, so in order to specify what rules to check we need to setup a YAML file.&lt;br&gt;
The selection of a declarative approach was made thinking in simplify the comprehension of the architectural rules and to help the sharing of these rules between artifacts, products and teams.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#verification-rules-in-archgo"&gt;
  &lt;/a&gt;
  Verification rules in Arch-Go
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#rules-for-dependencies-between-packages"&gt;
  &lt;/a&gt;
  Rules for dependencies between packages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Set what dependencies between packages are allowed and what are not allowed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#rules-for-packages-content"&gt;
  &lt;/a&gt;
  Rules for packages content:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Set the allowed content for the package (interfaces, structs, functions and methods).&lt;/li&gt;
&lt;li&gt;Set the restricted content for the package (interfaces, structs, functions and methods).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#cyclic-dependencies"&gt;
  &lt;/a&gt;
  Cyclic dependencies:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Allows to check for dependency cycles in selected packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#functions-properties"&gt;
  &lt;/a&gt;
  Functions properties:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Set the maximum number of parameters that functions in a package are allowed to receive.&lt;/li&gt;
&lt;li&gt;Set the maximum number of values that functions in a package are allowed to return.&lt;/li&gt;
&lt;li&gt;Set the maximum number of public functions per file.&lt;/li&gt;
&lt;li&gt;Set the maximum number of lines inside a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#architecture-validation-using-archgo"&gt;
  &lt;/a&gt;
  Architecture validation using Arch-Go
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Arch-Go is currently published as a module, so, in order to install it, you need to execute the &lt;code&gt;go get&lt;/code&gt; command, as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get -u github.com/fdaines/arch-go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the verification of a successful installation process, you can execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ arch-go -h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-dependencies-rules"&gt;
  &lt;/a&gt;
  Creating Dependencies Rules
&lt;/h2&gt;

&lt;p&gt;Going back to our example service, we can see some dependency rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Components in &lt;em&gt;presentation&lt;/em&gt; package should only depends on components in &lt;em&gt;businesslogic&lt;/em&gt; package.&lt;/li&gt;
&lt;li&gt;Components in &lt;em&gt;businesslogic&lt;/em&gt; package should only depends on components in &lt;em&gt;persistence&lt;/em&gt; package.&lt;/li&gt;
&lt;li&gt;Components in &lt;em&gt;persistence&lt;/em&gt; package should not depends on any other package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those dependency rules, can be described using the Arch-Go YAML schema as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependenciesRules:
  - package: "**.presentation"
    shouldOnlyDependsOn:
      - "**.businesslogic"
  - package: "**.businesslogic"
    shouldOnlyDependsOn:
      - "**.persistence"
    shouldNotDependsOn:
      - "**.presentation"
  - package: "**.persistence"
    shouldNotDependsOn:
      - "**.presentation"
      - "**.businesslogic"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-archgo"&gt;
  &lt;/a&gt;
  Running Arch-Go
&lt;/h2&gt;

&lt;p&gt;To run Arch-Go we will use an example project that has the code and rules defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/fdaines/arch-go-sample-project.git
$ cd arch-go-sample-project
$ arch-go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As our project complies with our architectural guidelines, the output should be similar to:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lGTxTf72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atl725f8sbk5dvytqcy9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lGTxTf72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atl725f8sbk5dvytqcy9.png" alt="Arch-Go's output when our project complies with the architectural guidelines" title="Arch-Go's output when our project complies with the architectural guidelines"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, we have a code example that violates a dependency rule (the branch is named: &lt;code&gt;dependency-rule-violation&lt;/code&gt;). To check this example, just run in the command line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout dependency-rule-violation
$ arch-go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the output from Arch-Go should be similar as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nvEoyTjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh53vlqa2m2r18fr5mx9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nvEoyTjl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh53vlqa2m2r18fr5mx9.png" alt="Arch-Go's output when some rules were violated" title="Arch-Go's output when some rules were violated"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#running-archgo-as-part-of-a-github-actions-workflow"&gt;
  &lt;/a&gt;
  Running Arch-Go as part of a Github Actions Workflow
&lt;/h2&gt;

&lt;p&gt;To include Arch-Go verification as part of a Github actions workflow, you need to include a YAML file under &lt;code&gt;github/workflows/&lt;/code&gt;, with content as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: 'arch-go'

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  Arch-Go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-go@v2
        with:
          stable: 'false'
          go-version: '1.15'
      - name: Install Arch-Go
        run: go get -u github.com/fdaines/arch-go
      - name: Run Arch-Go
        run: arch-go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, each time we push into master branch, Github Actions will run this workflow and checks if the code complies with our architectural guidelines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOeHMp6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt4un8qo0f852p65la18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOeHMp6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt4un8qo0f852p65la18.png" alt="Running Arch-Go as part of a Github Actions Workflow" title="Running Arch-Go as part of a Github Actions Workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, we have explored the basics of using Arch-Go to check our projects. Arch-Go simplifies the verification of architectural guidelines improving the quality project for reducing maintenance costs.&lt;/p&gt;

</description>
      <category>go</category>
      <category>architecture</category>
      <category>testing</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Fix "Unexpected field" Error From Multer</title>
      <author>Maxim Orlov</author>
      <pubDate>Tue, 20 Apr 2021 22:40:48 +0000</pubDate>
      <link>https://dev.to/maximization/fix-unexpected-field-error-from-multer-2mmo</link>
      <guid>https://dev.to/maximization/fix-unexpected-field-error-from-multer-2mmo</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published a day earlier at &lt;a href="https://maximorlov.com/fix-unexpected-field-error-multer/"&gt;https://maximorlov.com/fix-unexpected-field-error-multer/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You set out to implement file uploads in Node.js, only to get blocked by this particular error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MulterError: Unexpected field&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What does this cryptic message even mean?!&lt;/p&gt;

&lt;p&gt;By now you've already spent &lt;em&gt;several hours&lt;/em&gt; trying to solve this problem. Why does implementing a simple file upload feature have to be so &lt;em&gt;hard&lt;/em&gt;?!&lt;/p&gt;

&lt;p&gt;It doesn't have to be this way though. &lt;strong&gt;Writing an endpoint that accepts, parses and uploads a file in Node.js &lt;em&gt;can&lt;/em&gt; be straightforward.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After reading this article, you'll turn an annoying error into something you'll solve in less than 5 minutes!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input-name-needs-to-match-multer-function-argument"&gt;
  &lt;/a&gt;
  Input name needs to match multer function argument
&lt;/h2&gt;

&lt;p&gt;The foremost cause for this error is when the &lt;em&gt;name&lt;/em&gt; attribute of the file input doesn't match the argument passed to one of multer's middleware functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PFfD17fU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trxhjnm8cbse5q7ix57p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFfD17fU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trxhjnm8cbse5q7ix57p.png" alt="Two code snippets: one shows an HTML form with one file input, another shows an Express POST route with a multer middleware to parse the multipart/form-data request. Both are linked with an arrow pointing at the input name in HTML, and multer argument on the server indicating they should be the same"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;NAME&lt;/code&gt; you use in multer's &lt;code&gt;upload.single(NAME)&lt;/code&gt; middleware function (or any of the other functions discussed below) &lt;em&gt;must&lt;/em&gt; be the same as  the name attribute of the input element &lt;code&gt;&amp;lt;input type="file" name="NAME" /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, you have to double-check that these values are an &lt;em&gt;exact&lt;/em&gt; match. Pay extra attention to invisible whitespace or characters that may look the same but have a different Unicode value. It's better to copy-paste the value from one place to another.&lt;/p&gt;

&lt;p&gt;Multer is strict in what input it accepts from the client, and for a good reason. File uploads can be a big vulnerability for backend servers. It's easy for a bad actor to overflow the server with a huge amount of files, or send malformed data that breaks the parser and potentially gives the hacker access to the server. Multer is designed with a mindset to trust nothing that comes from the client so it can protect your server from a potential DoS attack.&lt;/p&gt;

&lt;p&gt;Depending on the form data you're expecting from the client, multer provides you with different middleware functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no file (text only) - &lt;code&gt;upload.none()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;single file - &lt;code&gt;upload.single(fieldname)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;multiple files, single input - &lt;code&gt;upload.array(fieldname[, maxCount])&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;multiples files, multiple inputs - &lt;code&gt;upload.fields(fields)&lt;/code&gt; where fields is an array of objects with &lt;code&gt;name&lt;/code&gt; and optionally &lt;code&gt;maxCount&lt;/code&gt; keys&lt;/li&gt;
&lt;li&gt;any of the above - &lt;code&gt;upload.any()&lt;/code&gt; (avoid if possible)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;multer.any()&lt;/code&gt; is oftentimes used as a quick fix. This is dangerous and can make your server vulnerable to attacks. &lt;code&gt;multer.any()&lt;/code&gt; will accept all files sent by the client which can lead to unexpected values further down in your application logic. Especially when used as a global middleware instead of a route-specific middleware.&lt;/p&gt;

&lt;p&gt;It's always better to fix the error by making sure field names are the same, instead of using &lt;code&gt;multer.any()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you decide to use &lt;code&gt;multer.any()&lt;/code&gt;, use it only on specific routes and make sure you're handling &lt;em&gt;all&lt;/em&gt; uploaded files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use the appropriate middleware function so that the form data received from the client is allowed to pass through. When you see an "Unexpected field" error from Multer, it's because the middleware function is rejecting some (or all) form data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-formdata"&gt;
  &lt;/a&gt;
  With FormData
&lt;/h3&gt;

&lt;p&gt;When you're using &lt;code&gt;FormData&lt;/code&gt; to programatically construct a form, input name is the first argument to the &lt;code&gt;.append()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Constructing a form in JavaScript&lt;/span&gt;
&lt;span class="c1"&gt;// Input name is the first argument of `append` function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You then have to make sure that the same value, &lt;code&gt;NAME&lt;/code&gt; in this case, is used as the &lt;code&gt;fieldname&lt;/code&gt; argument in the middleware function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Pass the same input name to the multer middleware function&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inputs-with-multiple-files-might-have-a-name-ending-with-raw-endraw-"&gt;
  &lt;/a&gt;
  Inputs with multiple files might have a name ending with &lt;code&gt;[]&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In some cases, you might have a client that appends &lt;code&gt;[]&lt;/code&gt; to the input name if it has multiple files.&lt;/p&gt;

&lt;p&gt;When you configure multer to accept a &lt;code&gt;photos&lt;/code&gt; field but the client sends &lt;code&gt;photos[]&lt;/code&gt; instead, multer will throw a &lt;code&gt;MulterError: Unexpected field&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;To fix the error, append &lt;code&gt;[]&lt;/code&gt; to the &lt;code&gt;fieldname&lt;/code&gt; argument in the middleware function: &lt;code&gt;upload.array('photos[]')&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-the-unexpected-field"&gt;
  &lt;/a&gt;
  Finding the unexpected field
&lt;/h2&gt;

&lt;p&gt;Error messages from multer are rather cryptic. They don't give you much information to help you find the root cause of the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There's a way to extract a little bit more information from the error thrown by multer and find the rejected field.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add an &lt;a href="https://expressjs.com/en/guide/error-handling.html"&gt;error handling middleware&lt;/a&gt; and log the error argument. More specifically, the &lt;code&gt;field&lt;/code&gt; property of the error tells you which input name multer has an issue with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Logging the rejected field from multer error&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is the rejected field -&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a &lt;a href="https://maximorlov.com/start-node-js-in-production/"&gt;Node.js production application&lt;/a&gt;, you'd want to replace &lt;code&gt;console.log&lt;/code&gt; with a &lt;a href="https://maximorlov.com/logging-with-pino-and-asynclocalstorage-in-nodejs/"&gt;proper logging mechanism&lt;/a&gt; to avoid messy logs and quickly find what you're looking for.&lt;/p&gt;

&lt;p&gt;Having found the rejected field, you're a step closer to solving the error since you know where to start looking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-possible-causes"&gt;
  &lt;/a&gt;
  Other possible causes
&lt;/h2&gt;

&lt;p&gt;If the error persists after verifying the input name matches the multer function argument, there might be something else going on. Here are three other possible causes for this error, and a solution for each.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conflicting-multer-instances"&gt;
  &lt;/a&gt;
  Conflicting multer instances
&lt;/h3&gt;

&lt;p&gt;I've seen this come up a few times so it's worth mentioning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make sure there is only &lt;em&gt;one&lt;/em&gt; multer instance used in the middleware chain of any particular route.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What do I mean by this? Let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Typical Express application&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Some more express middleware ...&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;photo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you see what's wrong with the above example?&lt;/p&gt;

&lt;p&gt;There's a multer instance used on all routes (&lt;code&gt;upload.array()&lt;/code&gt;) and another multer instance (&lt;code&gt;upload.single('photo')&lt;/code&gt;) specific to the &lt;code&gt;/upload&lt;/code&gt; route.&lt;/p&gt;

&lt;p&gt;If you try to upload a single file with the correct input name (&lt;code&gt;photo&lt;/code&gt;), the first multer instance will throw an error and the code never reaches the second multer instance. That's because &lt;code&gt;upload.array()&lt;/code&gt; is missing a &lt;code&gt;fieldname&lt;/code&gt; argument and it will always throw an error on file uploads.&lt;/p&gt;

&lt;p&gt;If you're using multer at top of your middleware chain to get access to the authentication token in the body, you should move it to the request headers instead. It's standard practice to put an authentication token in the &lt;code&gt;Authorization&lt;/code&gt; header.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unaccounted-file-inputs"&gt;
  &lt;/a&gt;
  Unaccounted file inputs
&lt;/h3&gt;

&lt;p&gt;Remember when I said earlier that multer is strict about accepting form data from the client?&lt;/p&gt;

&lt;p&gt;Even if you made sure the field names are the same, you will still face this error if there are file inputs you haven't told multer about.&lt;/p&gt;

&lt;p&gt;You can configure multer to accept multiple fields with the &lt;code&gt;upload.fields(fields)&lt;/code&gt; method. &lt;code&gt;fields&lt;/code&gt; is an array of objects with a &lt;code&gt;name&lt;/code&gt;, and optionally &lt;code&gt;maxCount&lt;/code&gt;, key.&lt;/p&gt;

&lt;p&gt;For example, the following HTML form has two file inputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Form with two file inputs: "avatar" and "photos" --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/upload"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"avatar"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"photos"&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Send"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To configure multer to accept the above form, you would have to write the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Configure multer to accept two file inputs: "avatar" and "photos".&lt;/span&gt;
&lt;span class="c1"&gt;// The "avatar" and "photos" inputs are allowed to have up to 1 and 6 files, respectively.&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;avatar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;maxCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;photos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;maxCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This configuration tells multer we're expecting two file input fields named "avatar" and "photos" with no more than 1 and 6 files, respectively. In case there are other fields present, multer will throw an "Unexpected field" error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#number-of-files-exceeding-the-configured-limit"&gt;
  &lt;/a&gt;
  Number of files exceeding the configured limit
&lt;/h3&gt;

&lt;p&gt;When you see a &lt;code&gt;MulterError: Unexpected field&lt;/code&gt; error, you don't suspect the reason to be the number of files exceeding the configured limit.&lt;/p&gt;

&lt;p&gt;If you're using a middleware function that allows multiple files to be uploaded (&lt;code&gt;.array()&lt;/code&gt; or &lt;code&gt;.fields()&lt;/code&gt;), &lt;strong&gt;make sure the number of files uploaded doesn't exceed the &lt;code&gt;maxCount&lt;/code&gt; value.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To quickly check if this might be the cause, set &lt;code&gt;maxCount&lt;/code&gt; to a huge number (eg.: &lt;code&gt;upload.array('photos', 9999)&lt;/code&gt;). If the error disappears, you've found the issue. Either increase &lt;code&gt;maxCount&lt;/code&gt; to allow more files to be uploaded at once, or change the client to send fewer files at a time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Fixing cryptic multer errors and getting file uploads to work properly in Node.js can be a frustrating experience.&lt;/p&gt;

&lt;p&gt;The foremost reason for the "Unexpected field" error is when the file input name doesn't match the argument passed to the multer function.&lt;/p&gt;

&lt;p&gt;Other possible reasons for this error are conflicting multer instances, unaccounted file inputs and exceeding the number of files limit.&lt;/p&gt;

&lt;p&gt;Having a hard time implementing file uploads in Node.js? Become an expert at handling file uploads with this &lt;a href="https://maximorlov.com/request-parsing-nodejs-guide/"&gt;FREE reference guide&lt;/a&gt;. Code examples, concise explanations and best practices are waiting for you.&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Make Rick Astley sing in your console 🎙</title>
      <author>Kuba</author>
      <pubDate>Tue, 20 Apr 2021 22:18:55 +0000</pubDate>
      <link>https://dev.to/kuba_szw/make-rick-astley-sing-in-your-console-3cmc</link>
      <guid>https://dev.to/kuba_szw/make-rick-astley-sing-in-your-console-3cmc</guid>
      <description>&lt;p&gt;This is kind of post that I'm still thinking why I did that 🤔. But remember that not every line of code should be serious. Keep it fun! 🎙&lt;/p&gt;

&lt;p&gt;Let's make &lt;a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ"&gt;Rick Astley sing "Never Gonna Give You Up"&lt;/a&gt; in console. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-first-video"&gt;
  &lt;/a&gt;
  Step first — Video
&lt;/h3&gt;

&lt;p&gt;I assume that you already have some .mp4 file. If not, you can use &lt;code&gt;pytube&lt;/code&gt;. Check out this snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytube&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;YT_video&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
        &lt;span class="n"&gt;youtube&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytube&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YouTube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;youtube&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_highest_resolution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest_folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'downloads'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest_folder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#read-file-and-display-it-with-opencv"&gt;
  &lt;/a&gt;
  Read file and display it with OpenCV
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; 

&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroyAllWindows&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok now we have our core. We play video, but there is no sound, it is playing to fast and our goal is to have it in console. &lt;/p&gt;

&lt;p&gt;Let's solve those problems one by one. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sound"&gt;
  &lt;/a&gt;
  Sound
&lt;/h3&gt;

&lt;p&gt;You can use &lt;code&gt;ffpyplayer&lt;/code&gt; package. I added to our code next part for handling sound. It's only music player that will start song in the background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; 

&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;music_player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MediaPlayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroyAllWindows&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But wait, Rick is dancing twice as fast as sings. That is not spreading joy 🤔.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speed"&gt;
  &lt;/a&gt;
  Speed
&lt;/h3&gt;

&lt;p&gt;To know FPS (Frames Per Second) we will use OpenCV. First we calculate how long should one frame last. Then we will wait a bit before displaying next one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CAP_PROP_FPS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;seconds_per_frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add small wait in the end of out While.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt; 

&lt;span class="n"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;music_player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MediaPlayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;frame_t_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;frame_t_start&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;seconds_per_frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroyAllWindows&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#to-console"&gt;
  &lt;/a&gt;
  To Console!
&lt;/h3&gt;

&lt;p&gt;Before we print it to console, we need to make our video grayscale. Use below to change frame. I've added some threshold to make it more 'binary' for console. You can play with values &lt;code&gt;treshold&lt;/code&gt; and &lt;code&gt;treshold_type&lt;/code&gt;. Check &lt;a href="https://docs.opencv.org/master/d7/d4d/tutorial_py_thresholding.html"&gt;docs&lt;/a&gt; of OpenCV to read more. &lt;/p&gt;

&lt;p&gt;I set my &lt;code&gt;treshold_type&lt;/code&gt; for 3 and &lt;code&gt;treshold&lt;/code&gt; around 120.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cvtColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BGR2GRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;treshold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;treshold_type&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our image is a 2D matrix of numbers. We will replace every number with some character. Assuming that our grayscale is from 0 to 255, find a char that suits perfect. &lt;/p&gt;

&lt;p&gt;Assume that our grayscale is such string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;GRAY_SCALE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"@$#*!=;:~-,. "&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Method for mapping number to char will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grayScaleNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;scale_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GRAY_SCALE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;GRAY_SCALE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add simple print method instead of &lt;code&gt;cv2.imshow("video",frame)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One more thing here is to resize the video. OpenCV can handle it for us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printFrameInConsole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;console_out_dim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SCALE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;SCALE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;console_out_dim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interpolation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INTER_AREA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;to_print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;to_print&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="n"&gt;grayScaleNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_print&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#enjoy"&gt;
  &lt;/a&gt;
  Enjoy
&lt;/h3&gt;

&lt;p&gt;Remember to play with it a bit. Check out some different thresholds and threshold types. Find the best Rick Astley for yourself. &lt;/p&gt;

&lt;p&gt;I will upload some video as soon as I can. Now admire console &lt;a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ"&gt;Rick&lt;/a&gt; 😅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Boy36yS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/Rick_Astley_1.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Boy36yS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/JakubSzwajka/JakubSzwajka.github.io/blob/master/_posts/_images/Rick_Astley_1.png%3Fraw%3Dtrue" alt="Rick_astley"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>opencv</category>
      <category>imageprocessing</category>
      <category>5days5blogposts</category>
    </item>
    <item>
      <title>How to avoid unexpected AWS costs</title>
      <author>Erik Lundevall Zara</author>
      <pubDate>Tue, 20 Apr 2021 21:16:13 +0000</pubDate>
      <link>https://dev.to/eriklz/how-to-avoid-unexpected-aws-costs-21i</link>
      <guid>https://dev.to/eriklz/how-to-avoid-unexpected-aws-costs-21i</guid>
      <description>&lt;p&gt;Have you experimented with some new and interesting AWS service and their features, learned a few interesting pieces, and then continued with your regular work - only to find an unwelcome surprise on the AWS bill at the end of the month?&lt;br&gt;
Or perhaps someone in your organization asked you about a cost increase on one of the AWS accounts?&lt;/p&gt;

&lt;p&gt;This is something that probably most cloud workers have experienced - &lt;em&gt;aw, I forgot to shut off that thing...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is a feature/service that AWS provides that can at least reduce the risk of that painful surprise - &lt;strong&gt;AWS Budgets&lt;/strong&gt;.  This article will show you some info on setting that up via the AWS Management Console. For a scripted approach, see the link at the end of the article.&lt;/p&gt;

&lt;p&gt;AWS Budgets are located under the &lt;em&gt;Billing Dashboard&lt;/em&gt; in AWS Management Console, which you can get to from the account menu in the upper right - assuming you have the privileges to access the Billing Dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1PJ3EtXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77cryqj2ncd2i4zzz58g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1PJ3EtXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77cryqj2ncd2i4zzz58g.png" alt="Get to Billing Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once in the Billing Dashboard, there is an entry in the left pane that leads you to the Budgets section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aWX108tx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jurczeeyq2uh66bnte58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aWX108tx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jurczeeyq2uh66bnte58.png" alt="Select Budget"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are fundamentally four types of budgets that you can create - cost budget, usage, reservation, and savings plan budget. The cost budget is a budget that monitors the amount of $$$ you spend or is forecasted to spend. The usage budget concerns capacity metrics and how much you consume there - for example, GB storage. Reservation and Savings plan budgets are ways to monitor utilization or coverage of your reserved instance allocation or savings plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUYQjvWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oapn5gelof3ofcajcjvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUYQjvWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oapn5gelof3ofcajcjvn.png" alt="4 types of budget"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we deal with unexpected costs and bills in this article, we focus on cost budgets. You can click on Create Budget on the right side to create a new budget. &lt;/p&gt;

&lt;p&gt;There are a few steps to go through to create a cost budget:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Enter a name for the budget&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Select a budget period&lt;/strong&gt;. This is the type of period that the budget is valid for. For a regular cost budget, this can be daily, monthly, quarterly, or annually - but there are restrictions on the daily option. You do want a monthly budget if you are going to catch unexpected costs, most likely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The type of period, which can be recurring or expiring&lt;/strong&gt;. An expiring budget is a one-off kind of budget and it will go away after it expires. So an expiring budget might be what you prefer for a temporary project or setup if you want to track costs for that particular project only.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The start and end month&lt;/strong&gt;, if you have an expiring monthly budget.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DkKZ6aIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erkev71qpyq2g37e3fuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DkKZ6aIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/erkev71qpyq2g37e3fuk.png" alt="Budget options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Select if the budget limit is fixed for each month, or different for each month&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The budget limit for the period&lt;/strong&gt;. It is a single value with a fixed budget. This is the cost limit (in USD) that you set for the period. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;By default, the budget is valid for the whole AWS account and all regions&lt;/strong&gt;. You apply various filters to reduce it to the resources that are relevant to you. See more below.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f_JTg5w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc91jqj2sr01bigphc4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_JTg5w2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc91jqj2sr01bigphc4f.png" alt="Budget options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are also options for &lt;strong&gt;cost aggregation and what types of costs should be included&lt;/strong&gt; in the budget. I have so far kept the defaults here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oMdWVnxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwegdfr31ddlenbb7ucz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oMdWVnxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwegdfr31ddlenbb7ucz.png" alt="Cost types"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You can then set up notification thresholds for the budget&lt;/strong&gt;. This can be for the actual incurred cost or a forecasted cost for the current period. The threshold can be a percentage of the budget limit or an actual value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Notifications can be delivered as email, via SNS, or integration via AWS Chatbot&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--62i-aLbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfxdalv8d0vlh8crlsu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--62i-aLbT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfxdalv8d0vlh8crlsu6.png" alt="Notifications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It is also possible to set up actions that trigger when a threshold is reached&lt;/strong&gt;. I will not go in further into this part here, but this may be interesting for a more elaborate budget setup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once you have gone through all options, you can look at &lt;strong&gt;the summary and confirm your choices&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewWBgniX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3brevgtjptpnecfww64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewWBgniX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3brevgtjptpnecfww64.png" alt="Budget summary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a multitude of options to set and we have not covered all the cases here!  Additional filtering options can pick specific regions and specific resources, for example via tags.&lt;/p&gt;

&lt;p&gt;A caveat with the tags is that the tags you use must have been activated as &lt;strong&gt;cost allocation tags&lt;/strong&gt;. This can also be done via the &lt;em&gt;Billing Dashboard&lt;/em&gt;. Any tag that has been used can be activated as a cost allocation tag. &lt;/p&gt;

&lt;p&gt;Are you going to set up a new budget when you have a new project, going through these steps? In practice, I seldom do this in the AWS Management Console.&lt;/p&gt;

&lt;p&gt;To try to make this process a bit smoother I made &lt;strong&gt;a script to create/update budgets&lt;/strong&gt;. It takes an opinionated and simplified approach, but only &lt;strong&gt;a single command is needed&lt;/strong&gt;, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;/Set-SimpleBudget.ps1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-BudgetName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MyBudget&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Amount&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;100&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-NotificationEmail&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;example.com&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the minimal approach with all the defaults, which will set up an &lt;strong&gt;expiring cost budget&lt;/strong&gt; (100 USD monthly) for the current month, with &lt;strong&gt;two thresholds - &amp;gt;80% of actual cost and &amp;gt;100% of the forecasted cost&lt;/strong&gt;. This is for all resources in the account and all regions. You can also filter on &lt;strong&gt;tags and regions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If this is interesting, check out the description for that script in my other budget post - &lt;a href="https://cloudgnosis.com/articles/how-to-avoid-unexpected-aws-costs/"&gt;How to avoid unexpected AWS costs&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>budget</category>
      <category>costmanagement</category>
    </item>
    <item>
      <title>GIT Quick Course</title>
      <author>Walter Nascimento</author>
      <pubDate>Tue, 20 Apr 2021 20:48:21 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/git-quick-course-1kbj</link>
      <guid>https://dev.to/walternascimentobarroso/git-quick-course-1kbj</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/curso-r%C3%A1pido-de-git-3647058d2776"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is"&gt;
  &lt;/a&gt;
  What is?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://pt.wikipedia.org/wiki/Git"&gt;Git&lt;/a&gt; is a free and open source distributed version control system, designed to handle everything from small to large projects, with speed and efficiency.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-advantage"&gt;
  &lt;/a&gt;
  What is the advantage?
&lt;/h1&gt;

&lt;p&gt;Imagine being able to discover changes made to a project, when they were made and who made them? Imagine you can use CTRL + Z in your entire project from the beginning.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h1&gt;

&lt;p&gt;Torvalds wanted a distributed system that he could use similarly to BitKeeper (BK), but none of the free systems available met his needs, particularly with regard to performance.&lt;/p&gt;

&lt;p&gt;Created in 2005 by Linus Torvalds, development started on April 3, 2005. The project was announced on April 6, and became a self-host on April 7.&lt;/p&gt;

&lt;p&gt;more information &lt;a href="https://pt.wikipedia.org/wiki/Git"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h1&gt;

&lt;p&gt;Go to the git &lt;a href="https://git-scm.com/downloads"&gt;official website page&lt;/a&gt; and choose your distribution.&lt;br&gt;
the installation is very easy to do, for windows systems it is just download and next, next and finalize, for linux it is just an &lt;code&gt;apt install git&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#setting"&gt;
  &lt;/a&gt;
  Setting
&lt;/h1&gt;

&lt;p&gt;When starting to work with git, the first step is to configure it with your defaults, such as email, editor, username and others.&lt;/p&gt;

&lt;p&gt;1 — Configuring via the terminal, to configure your git type the commands below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; color.status auto
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; color.branch auto
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; color.diff auto
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; color.ui always
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; core.editor vim
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"meunome"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email &lt;span class="s2"&gt;"eu@example.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2 — After the configuration is made, a file called .gitignore will be created and it contains all the settings made, if you need to edit it directly, and you can also back it up so that in future installations it is not necessary to reinstall.&lt;/p&gt;

&lt;p&gt;follows my configuration file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;LOCAL:&lt;/strong&gt; To use git locally, no extra installation is needed, just use git init and ready local server is already working&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GITHUB:&lt;/strong&gt; GitHub is a Shared Web Hosting Service for projects that use Git versioning control, it has features of a social network such as feeds, followers, wiki and a graph that shows how developers work on the versions of their repositories. &lt;a href="https://github.com/"&gt;https://github.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bitbucket:&lt;/strong&gt; Service similar to Github. &lt;a href="https://bitbucket.org/"&gt;https://bitbucket.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Gitlab:&lt;/strong&gt; Similar to Github. &lt;a href="https://about.gitlab.com/"&gt;https://about.gitlab.com/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#ssh"&gt;
  &lt;/a&gt;
  SSH
&lt;/h1&gt;

&lt;p&gt;To make the communication between machines and servers, it is best to add an ssh key, thus avoiding the need to enter login and password every time to send a new change, if you use linux you can follow the steps below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~ // go to home
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;ssh
&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen
// file name &lt;span class="o"&gt;(&lt;/span&gt;enter&lt;span class="o"&gt;)&lt;/span&gt;
// password
// re-password
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub &lt;span class="o"&gt;(&lt;/span&gt;send the contents of the file to the owner of the project add you&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#adding-public-key-on-the-server"&gt;
  &lt;/a&gt;
  Adding public key on the server
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;github:&lt;/strong&gt; to add the key on the github server just access the configuration link and then click on keys &lt;a href="https://github.com/settings/keys"&gt;https://github.com/settings/keys&lt;/a&gt;, now just click on the ‘add new key’ button and paste the content of id_rsa.pub here.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bitbucket:&lt;/strong&gt; To add to bitbucket just access your user’s configuration page after the link ssh keys, &lt;a href="https://bitbucket.org/account/settings/ssh-keys/"&gt;https://bitbucket.org/account/settings/ssh-keys/&lt;/a&gt;, now just click on the ‘add key’ button and paste the contents of id_rsa.pub here&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;gitlab:&lt;/strong&gt; To add the key in gitlab, just enter the profile settings (Profile Settings) then ssh keys option (ssh keys). now just click on the Add SSH key button;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#starting-project"&gt;
  &lt;/a&gt;
  Starting Project
&lt;/h1&gt;

&lt;p&gt;To start a project with git just follow the steps below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creating repository:&lt;/strong&gt; To create the project locally type git init
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git init &amp;lt;directory&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cloning a Repository:&lt;/strong&gt; To download (clone) a project from some server type git clone
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone &amp;lt;&lt;span class="nb"&gt;link&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;directoryCreated&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#commit"&gt;
  &lt;/a&gt;
  Commit
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#what-is-it-for"&gt;
  &lt;/a&gt;
  What is it for?
&lt;/h2&gt;

&lt;p&gt;A commit serves as a turning point in the project. Git has tools that make it possible to access the project exactly as it was when each commit was made. This has several advantages, such as providing more security to make modifications to the system (after all, if the change is incorrect, it is possible to revert the commit and return the project code to how it was before the commit was made) or facilitate bug fixing. , as it is possible to execute the project locally in a commit prior to the introduction of a specific bug in the code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-make-a-commit"&gt;
  &lt;/a&gt;
  How to make a commit?
&lt;/h2&gt;

&lt;p&gt;To make a commit, you choose the items you want and then add a message&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git status // Checks the items you want to send
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &amp;lt;file_name&amp;gt; // Add the file
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Commit message title"&lt;/span&gt; // Write the commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#creating-gitignore"&gt;
  &lt;/a&gt;
  Creating GitIgnore
&lt;/h1&gt;

&lt;p&gt;When we use git we can define files that we do not want to send to the server, for example log files, third party folders or configuration files, for these cases we can create a file called &lt;code&gt;.gitignore&lt;/code&gt; and add the files or directors that we do not want to send.&lt;/p&gt;

&lt;p&gt;in this link we can create the default directories to include in &lt;code&gt;.gitignore&lt;/code&gt;&lt;br&gt;
&lt;a href="https://www.toptal.com/developers/gitignore"&gt;https://www.toptal.com/developers/gitignore&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#commit-with-emoji"&gt;
  &lt;/a&gt;
  Commit with emoji
&lt;/h1&gt;

&lt;p&gt;If you want to make the commit more ‘elegant’ it is possible to add emoji both in the title and in the body of the message, however it is necessary to check if the server is supported.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cooperka/emoji-commit-messages"&gt;https://github.com/cooperka/emoji-commit-messages&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.webfx.com/tools/emoji-cheat-sheet/"&gt;https://www.webfx.com/tools/emoji-cheat-sheet/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/dannyfritz/commit-message-emoji"&gt;https://github.com/dannyfritz/commit-message-emoji&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#coding-standard"&gt;
  &lt;/a&gt;
  Coding Standard
&lt;/h1&gt;

&lt;p&gt;Some small tips on how to write a commit, but that help to maintain a good history in a project.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h1&gt;

&lt;p&gt;If you need to read ask questions we have the official website&lt;br&gt;
&lt;a href="https://git-scm.com/doc"&gt;https://git-scm.com/doc&lt;/a&gt;&lt;br&gt;
But if you want something more direct we have git explorer&lt;br&gt;
&lt;a href="https://gitexplorer.com/"&gt;https://gitexplorer.com/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#quick-courses"&gt;
  &lt;/a&gt;
  Quick courses
&lt;/h1&gt;

&lt;p&gt;If you need to have an overview with a practical course you can try the links:&lt;br&gt;
&lt;a href="https://learngitbranching.js.org/"&gt;https://learngitbranching.js.org/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://try.github.io/"&gt;http://try.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#command-list"&gt;
  &lt;/a&gt;
  Command List
&lt;/h1&gt;

&lt;p&gt;List of commands for GIT.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you! 😊😊&lt;/p&gt;

</description>
      <category>git</category>
      <category>settings</category>
      <category>tutorial</category>
      <category>curse</category>
    </item>
    <item>
      <title>How Does Git Work?</title>
      <author>Honeybadger Staff</author>
      <pubDate>Tue, 20 Apr 2021 19:57:13 +0000</pubDate>
      <link>https://dev.to/honeybadger/how-does-git-work-576c</link>
      <guid>https://dev.to/honeybadger/how-does-git-work-576c</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally written by &lt;a href="https://www.honeybadger.io/blog/how-does-git-work/#authorDetails"&gt;Julie Kent&lt;/a&gt; on the &lt;a href="https://www.honeybadger.io/blog/how-does-git-work/"&gt;Honeybadger Developer Blog&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;If you're like me and have less than fifteen years of software engineering experience, the thought of a world without Git doesn't seem possible. When I started to research for this post, I almost fell out of my chair when I read that Git was created in 2005. It doesn't seem &lt;em&gt;that&lt;/em&gt; long ago ... either that, or I'm simply getting old. :) Regardless, I often find myself being scared of certain Git commands. Do I &lt;code&gt;rebase&lt;/code&gt;, or do I &lt;code&gt;merge&lt;/code&gt;? What is the use case for a &lt;code&gt;force push&lt;/code&gt;? There have definitely been a few occasions when a wrong Git command turned into a &lt;em&gt;big deal&lt;/em&gt;. So, I decided to bite the bullet and learn what is going on under that magical hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-brief-history"&gt;
  &lt;/a&gt;
  A brief history
&lt;/h2&gt;

&lt;p&gt;Git is a version control system that is distributed, which means that it uses multiple local repositories, including a centralized repo and server. Before distributed systems, subversion (SVN) was a popular way to manage code version control. Unlike Git, it is centralized rather than distributed. With SVN, your data is stored on a central server, and any time you check it out, you're checking out a single version of the repository.&lt;/p&gt;

&lt;p&gt;While most of us remember Git as the first distributed version control system, before Git, there was BitKeeper, a proprietary source control management system. Created in 1998, BitKeeper was spun up to solve some of the growing pains of Linux. It offered a free license for open-source projects, with the stipulation that developers could not create a competing tool while using BitKeeper plus one additional year. I'm sure you can guess what happened. In the early-to-mid 2000s, there were a plethora of license complaints, and in 2005, the free version of BitKeeper was removed. This prompted Linus Torvalds to create Git, which he named after a British slang word that means "unpleasant person." Linus Torvalds turned the project over to Junio Hamano (a major contributor) after its original v0.99 release, and Junio remains the core maintainer of the project. Fun Fact: The most recent version of Git was released on July 27th, 2020, and is version 2.28.&lt;/p&gt;

&lt;p&gt;If you want to read more about BitKeeper, check out the Wikipedia page &lt;a href="https://en.wikipedia.org/wiki/BitKeeper"&gt;here&lt;/a&gt; -- it is no longer being developed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-git-really"&gt;
  &lt;/a&gt;
  What is Git, really?
&lt;/h2&gt;

&lt;p&gt;While Git has morphed into a full-fledged version control management system, this wasn't the original intent. Linus Torvalds said the following on this topic:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In many ways, you can just see Git as a filesystem -- it's content-addressable, and it has a notion of versioning, but I really designed it coming at the problem from the viewpoint of a &lt;em&gt;filesystem&lt;/em&gt; person (hey, kernels is what I do), and I actually have &lt;em&gt;zero&lt;/em&gt; interest in creating a traditional SCM (source control management) system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Side note: In case you're wondering what "content-addressable" means, it is a way to store information, so it can be retrieved based on content rather than location. Most traditional local and networked storage devices are location addressed.&lt;/p&gt;

&lt;p&gt;Git has two data structures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a mutable index (i.e., a connection point between the object database and the working tree) and&lt;/li&gt;
&lt;li&gt;an immutable, append-only object database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are five types of objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blob: this is the content of a file.&lt;/li&gt;
&lt;li&gt;tree: this is the equivalent of a directory&lt;/li&gt;
&lt;li&gt;commit: this links tree objects together to form a history&lt;/li&gt;
&lt;li&gt;tag: this is a container that contains a ref to another object, as well as other metadata&lt;/li&gt;
&lt;li&gt;packfile: zlib version compressed of various other objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each object has a unique name, which is a SHA-1 hash of its contents.&lt;/p&gt;

&lt;p&gt;To better understand how all of this fits together, let's create a dummy project directory and run &lt;code&gt;git init&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trying-it-out"&gt;
  &lt;/a&gt;
  Trying it out
&lt;/h2&gt;

&lt;p&gt;Open your terminal, and create a new directory. Then, run &lt;code&gt;git init&lt;/code&gt;. You should then see something similar to the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  Documents mkdir understanding-git
➜  understanding-git git init
Initialized empty Git repository in /Users/juliekent/Documents/understanding-git/.git/
➜  understanding-git git:(master)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am sure you have done this many times but may not have really cared to know what was actually in the newly created &lt;code&gt;.git&lt;/code&gt; directory. Let's check it out. If you run &lt;code&gt;ls -a&lt;/code&gt; via your terminal, you will see the &lt;code&gt;.git&lt;/code&gt; directory. By default, it is a hidden directory, which is why you need the &lt;code&gt;-a&lt;/code&gt; flag. Place &lt;code&gt;cd .git&lt;/code&gt; into the directory, and then run &lt;code&gt;ls&lt;/code&gt;. You should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  .git git:(master) ls
HEAD        config      description hooks       info        objects     refs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be focusing on &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;objects&lt;/code&gt;, and &lt;code&gt;refs&lt;/code&gt; directories. We will also run some commands so that we have &lt;code&gt;index&lt;/code&gt; files, but this will come later. The &lt;code&gt;description&lt;/code&gt; file is only used by the GitWeb program. The &lt;code&gt;config&lt;/code&gt; file is pretty straight forward, as it contains project configuration options. The the &lt;code&gt;info&lt;/code&gt; directory keeps a global exclude file for ignored patterns you don't want to track, which is based on the &lt;code&gt;.gitignore&lt;/code&gt; file; I'm sure most of you are familiar with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-objects-directory"&gt;
  &lt;/a&gt;
  The objects directory
&lt;/h2&gt;

&lt;p&gt;Let's start with the &lt;code&gt;objects&lt;/code&gt; directory. To see what is created, run &lt;code&gt;find .git/objects&lt;/code&gt;. You should see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  understanding-git git:(master) find .git/objects
.git/objects
.git/objects/pack
.git/objects/info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's create a file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo 'this is me' &amp;gt; myfile.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates a file named &lt;code&gt;myfile.txt&lt;/code&gt; containing &lt;code&gt;this is me&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let's run the command &lt;code&gt;git hash-object -w myfile.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your output should be a random mix of numbers and letters -- this is a SHA-1 checksum hash. If you're not familiar with SHA-1, you can read more &lt;a href="https://www.lifewire.com/what-is-sha-1-2626011"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, copy your SHA-1, and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git cat-file -p (insert your SHA here)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see "this is me", the contents of your file that was created. Cool! This is how content-addressable Git objects work; you can think of it as a key-value store where the key is the SHA-1, and the value is the contents.&lt;/p&gt;

&lt;p&gt;Let's write some new content to our original file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;echo 'this is not me' &amp;gt; myfile.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, run the &lt;code&gt;hash-object&lt;/code&gt; command again:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git hash-object -w myfile.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You now have two unique SHA-1s for both versions of this file. If you want further proof, run &lt;code&gt;find .git/objects -type f&lt;/code&gt;, and you should see both via your terminal window.&lt;/p&gt;

&lt;p&gt;If you'd like to learn more about how other objects in Git work, I recommend following this &lt;a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-refs-directory"&gt;
  &lt;/a&gt;
  The refs directory
&lt;/h2&gt;

&lt;p&gt;Let's move onto refs. When running &lt;code&gt;find .git/refs&lt;/code&gt;, you should see the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  understanding-git git:(master) ✗ find .git/refs
.git/refs
.git/refs/heads
.git/refs/tags
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we saw in the previous section about objects, we know that Git creates unique SHA-1 hashes for each one. Of course, we could run all of our Git commands utilizing each object's hash. For example, &lt;code&gt;git show 123abcd&lt;/code&gt;, but this is unreasonable and would require us to remember the hash of every object.&lt;/p&gt;

&lt;p&gt;Refs to the rescue! A reference is simply a file stored in &lt;code&gt;.git/refs&lt;/code&gt; containing the hash of a commit object. Let's go ahead and commit our &lt;code&gt;myfile.txt&lt;/code&gt;, so we can better understand how refs work. Go ahead and run &lt;code&gt;git add myfile.txt&lt;/code&gt; and &lt;code&gt;git commit -m 'first commit'&lt;/code&gt;. You should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  understanding-git git:(master) ✗ git add myfile.txt
➜  understanding-git git:(master) ✗ git commit -m 'first commit'
[master (root-commit) 40235ba] first commit
 1 file changed, 1 insertion(+)
 create mode 100644 myfile.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's navigate to the &lt;code&gt;.git/refs/heads&lt;/code&gt; directory by running &lt;code&gt;cd .git/refs/heads&lt;/code&gt;. From there, run &lt;code&gt;cat master&lt;/code&gt;. You should see the SHA-1. Finally, run &lt;code&gt;git log -1 master&lt;/code&gt; which should output something similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;commit Unique SHA-1 (HEAD -&amp;gt; master)
Author: Julie &amp;lt;jkent2910@gmail.com&amp;gt;
Date:   Mon Aug 3 15:59:59 2020 -0500

   first commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool! As you can see, branches are simply just references. When we change the location of the master branch, all Git has to do is change the contents of the &lt;code&gt;refs/heads/master&lt;/code&gt; file. Likewise, creating a new branch creates a new reference file with the commit hash.&lt;/p&gt;

&lt;p&gt;Helpful hint: If you ever want to see &lt;em&gt;all&lt;/em&gt; references, run &lt;code&gt;git show-ref&lt;/code&gt;, which will list all references.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sooooo-what-is-head"&gt;
  &lt;/a&gt;
  Sooooo, what is HEAD?!
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; is a symbolic reference. You might wonder, when running &lt;code&gt;git branch &amp;lt;branch&amp;gt;&lt;/code&gt;, how Git knows the SHA-1 of the last commit. Well, the HEAD file is usually a symbolic reference to your current branch. You might be thinking to yourself, "You keep saying &lt;em&gt;symbolic&lt;/em&gt;; what does that mean?" Great question! &lt;em&gt;Symbolic&lt;/em&gt; means that it contains a &lt;em&gt;pointer&lt;/em&gt; to another reference. If your head is spinning, I'm with you. It took me quite a bit of Googling and reading to finally understand what exactly &lt;code&gt;HEAD&lt;/code&gt; is. Here is a great analogy, pulled from &lt;a href="https://www.educba.com/what-is-head-in-git/"&gt;this website&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A good analogy would be a record player and the playback and record keys on it as the HEAD. As the audio starts recording, the tape moves ahead, moving past the head by recording onto it. The stop button stops the recording while still pointing to the point it last recorded, and the point that record head stopped is where it will continue to record again when Record is pressed again. If we move around, the head pointer moves to different places; however, when Record is pressed again, it starts recording from the point the head was pointing to when Record was pressed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go ahead and run: &lt;code&gt;cat .git/HEAD&lt;/code&gt;, and you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  understanding-git git:(master) cat .git/HEAD
ref: refs/heads/master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes sense because we are on the master branch. HEAD is, essentially, always going to be the reference to the last commit in the currently checked-out branch.&lt;/p&gt;

&lt;p&gt;Helpful Tip: You can run &lt;code&gt;git diff HEAD&lt;/code&gt; to view the difference between HEAD and the working directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;We have covered a lot in this post! We've learned a bit of fun history regarding how Git came about and examined the main plumbing that makes all of the magic happen! If you want to continue to dive deeper into Git, as well as better understand how some of the common commands work, I highly recommend the book titled "Pro Git", which is available for free &lt;a href="https://git-scm.com/book/en/v2"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>github</category>
    </item>
    <item>
      <title>Web socket and HTTP(s); Intro to simple differences</title>
      <author>Eulier Gonzalez</author>
      <pubDate>Tue, 20 Apr 2021 19:30:21 +0000</pubDate>
      <link>https://dev.to/eulier/web-socket-and-http-s-intro-to-simple-differences-38bn</link>
      <guid>https://dev.to/eulier/web-socket-and-http-s-intro-to-simple-differences-38bn</guid>
      <description>&lt;p&gt;In telecommunication a &lt;a href="https://en.wikipedia.org/wiki/Duplex_(telecommunications)"&gt;&lt;strong&gt;duplex&lt;/strong&gt;&lt;/a&gt; communication system is a &lt;strong&gt;point to point&lt;/strong&gt; system composed of 2 or more connected devices.&lt;br&gt;
And it can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Full-duplex system, simultaneously&lt;/strong&gt; or bi-directional at time&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2yz_bgsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l548oj5c0onjkw8mu24o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2yz_bgsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l548oj5c0onjkw8mu24o.png" alt="Screenshot_2021-04-20 Duplex (telecommunications) - Wikipedia(1)"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Half-duplex system&lt;/strong&gt;, communication is &lt;strong&gt;one direction at time&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ipqjaJny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uogwfrip1q9famex8mbl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ipqjaJny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uogwfrip1q9famex8mbl.png" alt="Screenshot_2021-04-20 Duplex (telecommunications) - Wikipedia"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HTTP&lt;/strong&gt;, HyperText Transfer Protocol is a &lt;strong&gt;Half-duplex system&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;So writing chat applications using i.e. LAMP Stack, (Linux, Apache, Mysql &amp;amp; PHP), it involve: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Actively sampling the status of the server (Polling) for changes&lt;/li&gt;
&lt;li&gt;Keep track timestamp and &lt;/li&gt;
&lt;li&gt;It’s slower than it should be.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Socket&lt;/strong&gt; have traditionally been the solution for real-time chat application are architected, supplying a bi-directional (&lt;strong&gt;Full-duplex&lt;/strong&gt;) communication channel between the client and the server. It actually use the URI format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ws://userinfo@host:port/path?query#fragment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just a start to wrap your mind around in case you want to understand how &lt;a href="https://socket.io/get-started/chat"&gt;socket.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also contains very helpful &lt;a href="https://github.com/socketio/socket.io/tree/master/examples"&gt;examples&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>computerscience</category>
      <category>javascript</category>
    </item>
    <item>
      <title>To use Context for state correctly use it like recoil</title>
      <author>Ivan Jeremic</author>
      <pubDate>Tue, 20 Apr 2021 19:23:57 +0000</pubDate>
      <link>https://dev.to/ivanjeremic/to-use-context-for-state-correctly-use-it-like-recoil-14pg</link>
      <guid>https://dev.to/ivanjeremic/to-use-context-for-state-correctly-use-it-like-recoil-14pg</guid>
      <description>&lt;p&gt;One of the biggest problems in managing state with Context is that react re-renders all children if a value in the provider changes, So having multiple states that have nothing to do with one another will make your applications do unmercenary re-renders all the time and this is not manageable stop this!&lt;/p&gt;

&lt;p&gt;Imagine having a counter state and a modal state and both are provided to the app in the same Context that means when you open/close the modal all components of the counter will rerender to.&lt;/p&gt;

&lt;p&gt;So how to solve this problem? For people who are familiar with Recoil js, they know that the so-called &lt;code&gt;atoms&lt;/code&gt; are only one piece of state and not a store for having all kinds of state in it, they hold really only one piece. So let's do the same in Context, we will create for each state of our application a separate Context file that will hold only one piece of state maximum, Our Provider will provide only the &lt;code&gt;state&lt;/code&gt; and the &lt;code&gt;setter&lt;/code&gt; for this one piece of state.&lt;/p&gt;

&lt;p&gt;Here an example with &lt;code&gt;counter&lt;/code&gt; &amp;amp; &lt;code&gt;modal&lt;/code&gt; state&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/contexts/CounterContext.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const CounterContext = createContext();

export function CounterContextProvider({ children }) {
  const [count, setCount] = useState(0);

  return (
    &amp;lt;CounterContext.Provider value={[count, setCount]}&amp;gt;
      {children}
    &amp;lt;/CounterContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the modal in a separate file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/contexts/ModalContext.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const ModalContext = createContext();

export function ModalContextProvider({ children }) {
  const [open, setOpen] = useState(false);

  return (
    &amp;lt;ModalContext.Provider value={[open, setOpen]}&amp;gt;
      {children}
    &amp;lt;/ModalContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I recommend using a folder "contexts" that holds all your state if you are used to "stores" look at you contexts folder as store :)&lt;/p&gt;

&lt;p&gt;Now you use the state where you need it as you develop, important here is never wrap the whole App in the providers, if a button in the Header component needs the counter state only wrap the parts one level above in the provider or even more cleaner create a wapper folder and create a wrapper for each component that needs state, this way only the parts re-render that need to change.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/wrappers/CounterButtonWrapper.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function CounterButton() {
  const [count, setCount] = useContext(CounterContext);

  const increment = () =&amp;gt; {
    setCount((prevState) =&amp;gt; {
      return prevState + 1
    })
  }

  return (
    &amp;lt;button onClick={increment}&amp;gt;Increment&amp;lt;/Button&amp;gt;
  );
}

// use this in your Header
export default function CounterButtonWrapper() {
  return (
   &amp;lt;CounterContext.Provider&amp;gt;
     &amp;lt;CounterButton /&amp;gt;
   &amp;lt;/CounterContext.Provider&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, it is more boilerplate than recoil but not everyone wants to use libraries and if you really want to manage client state with Context then this method with separate contexts for each piece of state and wrappers will scale and is the best way if you ask me.&lt;/p&gt;

</description>
      <category>react</category>
      <category>recoiljs</category>
      <category>recoil</category>
      <category>redux</category>
    </item>
    <item>
      <title>	
How to perform Vehicle Detection using Python and opencv</title>
      <author>Sachin pagar</author>
      <pubDate>Tue, 20 Apr 2021 18:32:41 +0000</pubDate>
      <link>https://dev.to/sachinp67495829/how-to-perform-vehicle-detection-using-python-and-opencv-4cng</link>
      <guid>https://dev.to/sachinp67495829/how-to-perform-vehicle-detection-using-python-and-opencv-4cng</guid>
      <description>&lt;p&gt;For full source code please read this original article&lt;br&gt;
&lt;a href="https://pythonslearning.com/2021/04/how-to-perform-vehicle-detection-using-python-and-opencv.html"&gt;How to perform Vehicle Detection using Python and opencv&lt;/a&gt;&lt;br&gt;
I love the idea of smart cities. The thought of automated smart energy systems, electrical grids, one-touch access ports – it’s an enthralling concept! Honestly, it’s a dream for a data scientist and I’m delighted that a lot of cities around the world are moving towards becoming smarter.&lt;/p&gt;

&lt;p&gt;One of the core components of a smart city is automated traffic management. And that got me thinking – could I use my data science chops to build a vehicle detection model that could play a part in smart traffic management?&lt;/p&gt;

&lt;p&gt;Think about it – if you could integrate a vehicle detection system in a traffic light camera, you could easily track a number of useful things simultaneously:&lt;/p&gt;

&lt;p&gt;How many vehicles are present at the traffic junction during the day?&lt;br&gt;
What time does the traffic build up?&lt;br&gt;
What kind of vehicles are traversing the junction (heavy vehicles, cars, etc.)?&lt;br&gt;
Is there a way to optimize the traffic and distribute it through a different street?&lt;br&gt;
And so on. The applications are endless!&lt;br&gt;
Resource : &lt;a href="https://pythonslearning.com/2021/04/how-to-perform-vehicle-detection-using-python-and-opencv.html"&gt;https://pythonslearning.com/2021/04/how-to-perform-vehicle-detection-using-python-and-opencv.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>What are fun projects to do when you're feeling exhausted?</title>
      <author>Holden</author>
      <pubDate>Tue, 20 Apr 2021 18:18:04 +0000</pubDate>
      <link>https://dev.to/holdenmad/what-are-fun-projects-to-do-when-you-re-feeling-exhausted-3jbf</link>
      <guid>https://dev.to/holdenmad/what-are-fun-projects-to-do-when-you-re-feeling-exhausted-3jbf</guid>
      <description>&lt;p&gt;I've been struggling a lot to find the energy to do personal projects since I started my first programming job. I like my job, and I'm learning a lot, but when I'm done with work I feel so exhausted that I don't have any brain power left to do personal projects. The pandemic of course doesn't help with the exhaustion either. Everything takes a lot more effort than it normally does, and it's all I can do to do basic tasks. &lt;/p&gt;

&lt;p&gt;Do you have any advice for doing personal projects when you're feeling burnt out and exhausted? &lt;/p&gt;

</description>
      <category>burnout</category>
      <category>personalprojects</category>
      <category>projects</category>
      <category>programming</category>
    </item>
    <item>
      <title>Backendless Coin Price List with GraphQL API, Serverless Redis and Next.JS</title>
      <author>Noah</author>
      <pubDate>Tue, 20 Apr 2021 18:16:59 +0000</pubDate>
      <link>https://dev.to/noahfschr/backendless-coin-price-list-with-graphql-api-serverless-redis-and-next-js-826</link>
      <guid>https://dev.to/noahfschr/backendless-coin-price-list-with-graphql-api-serverless-redis-and-next-js-826</guid>
      <description>&lt;p&gt;In this tutorial, we will develop a simple coin price list using GraphQL API of Upstash. You can call the application &lt;code&gt;backendless&lt;/code&gt; because we will access the database directly from the client (javascript).&lt;br&gt;
See the &lt;a href="https://github.com/upstash/examples/tree/master/coin-price-list"&gt;code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5O2uBOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.upstash.com/img/coin-price-list/coin-price-list.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5O2uBOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.upstash.com/img/coin-price-list/coin-price-list.png" width="800"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;We want to give a use case where you can use the GraphQL API without any backend code. The use case is publicly available read only data for web applications where you need low latency. The data is updated frequently by another backend application, you want your users to see the last updated data. Examples: Leaderboards, news list, blog list, product list, top N items in the homepages. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-1-endraw-project-setup"&gt;
  &lt;/a&gt;
  &lt;code&gt;1&lt;/code&gt; Project Setup:
&lt;/h3&gt;

&lt;p&gt;Create a Next application: &lt;code&gt;npx create-next-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Install Apollo GraphQL client: &lt;code&gt;npm i @apollo/client&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-2-endraw-database-setup"&gt;
  &lt;/a&gt;
  &lt;code&gt;2&lt;/code&gt; Database Setup
&lt;/h3&gt;

&lt;p&gt;If you do not have one, create a database following this &lt;a href="//overall/getstarted.md"&gt;guide&lt;/a&gt;.&lt;br&gt;
Connect your database via Redis CLI and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rpush coins &lt;span class="s1"&gt;'{ "name" : "Bitcoin", "price": 56819, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/1.png"}'&lt;/span&gt; &lt;span class="s1"&gt;'{ "name" : "Ethereum", "price": 2130, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png"}'&lt;/span&gt; &lt;span class="s1"&gt;'{ "name" : "Cardano", "price": 1.2, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/2010.png"}'&lt;/span&gt; &lt;span class="s1"&gt;'{ "name" : "Polkadot", "price": 35.96, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/6636.png"}'&lt;/span&gt; &lt;span class="s1"&gt;'{ "name" : "Stellar", "price": 0.506, "image": "https://s2.coinmarketcap.com/static/img/coins/64x64/512.png"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-3-endraw-code"&gt;
  &lt;/a&gt;
  &lt;code&gt;3&lt;/code&gt; Code
&lt;/h3&gt;

&lt;p&gt;In the Upstash console, copy the read only access key in your API configuration page (GraphQL Explorer &amp;gt; Configure API). In the &lt;code&gt;_app.js&lt;/code&gt; create the Apollo client and replace the your access key as below:&lt;/p&gt;

&lt;p&gt;:::caution&lt;br&gt;
You need to use Read Only Access Key, because the key will be accessible publicly. &lt;br&gt;
:::&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ApolloProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createHttpLink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InMemoryCache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHttpLink&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://graphql-us-east-1.upstash.io/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer YOUR_ACCESS_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://graphql-us-east-1.upstash.io/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InMemoryCache&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ApolloProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; &amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;ApolloProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit &lt;code&gt;index.js&lt;/code&gt; as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GET_COIN_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
    query {
        redisLRange(key : "coins", start: 0, stop: 6)
    }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;coins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GET_COIN_LIST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redisLRange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt; &lt;span class="nx"&gt;Next&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nx"&gt;Coin&lt;/span&gt; &lt;span class="nx"&gt;Price&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tbody&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="nx"&gt;coins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                             &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;25&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="p"&gt;))&lt;/span&gt;
                        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/loader.gif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/td&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tr&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="p"&gt;)}&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/tbody&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/table&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://docs.upstash.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;tutorial&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/footer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-4-endraw-run"&gt;
  &lt;/a&gt;
  &lt;code&gt;4&lt;/code&gt; Run
&lt;/h3&gt;

&lt;p&gt;Run your application locally:&lt;br&gt;
&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-5-endraw-live"&gt;
  &lt;/a&gt;
  &lt;code&gt;5&lt;/code&gt; Live!
&lt;/h3&gt;

&lt;p&gt;Go to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; 🎉&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>graphql</category>
      <category>redis</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>tmux: 13 Cool Tweaks to Make It Personal and Powerful</title>
      <author>Balamurugan Krishnamoorthy (Bala)</author>
      <pubDate>Tue, 20 Apr 2021 18:07:20 +0000</pubDate>
      <link>https://dev.to/krishnam/tmux-13-cool-tweaks-to-make-it-personal-and-powerful-487p</link>
      <guid>https://dev.to/krishnam/tmux-13-cool-tweaks-to-make-it-personal-and-powerful-487p</guid>
      <description>&lt;p&gt;&lt;strong&gt;Intended Audience:&lt;/strong&gt; tmux users (beginner) or who read &lt;a href="https://dev.to/krishnam/dev-productivity-command-line-happiness-with-terminal-multiplexing-5067"&gt;the part one&lt;/a&gt; of my "Command Line Happiness" post. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do you want to tweak the default setup ?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keyboard shortcuts in tmux are a bit of &lt;strong&gt;a stretch, both physically and sometimes mentally&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;tmux has a lot of &lt;strong&gt;less-than-stellar default&lt;/strong&gt; setting&lt;/li&gt;
&lt;li&gt;Moreover, the configuration is fun, especially when you personalize it to &lt;strong&gt;suit your needs&lt;/strong&gt;; after all, that's what it's for!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, I prefer using the default setting with any tech/tools that I use as long as it serves its purpose well. However, tmux is different. It is designed to be customizable. On top of that, these are my reasons why you should tweak it.&lt;/p&gt;

&lt;p&gt;Follow along, and let's make your tmux friendly. Along the way, do not forget to put more comments in your configuration file; they'll jog your memory later. Treat your tmux config as a living document; Learn, practice, and update.&lt;/p&gt;

&lt;p&gt;Here is your ready-to-use valuable tmux tips-&amp;amp;-tweaks. Try these to improve your day-to-day development while using tmux. Let's start with the biggie ! [prefix]&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-prefix-should-be-simple"&gt;
  &lt;/a&gt;
  1. Prefix Should be Simple
&lt;/h4&gt;

&lt;p&gt;By default, all key bindings will demand a "prefix" key before they are active. It is similar to a [leader] key in vim. The default is &lt;code&gt;Ctrl-b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The default is a little hard to trigger as the keyboard button is pretty far. Most prefer the &lt;code&gt;Ctrl-a&lt;/code&gt; as prefix key:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It puts your prefix in the home row.&lt;/li&gt;
&lt;li&gt;CapsLock can be remapped with a Ctr key, and A sits just next to it.&lt;/li&gt;
&lt;li&gt;If you have already used the GNU screen, &lt;code&gt;Ctrl-a&lt;/code&gt; is already the standard key for you.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind-key C-b              # free the original bind-key key
set-option -g prefix C-a    # setting the prefix from C-b to C-a
bind-key C-a send-prefix    # ensure that we can send Ctrl-A to other apps or the shell that your interacting
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-just-reload-the-config"&gt;
  &lt;/a&gt;
  2. Just Reload the Config
&lt;/h4&gt;

&lt;p&gt;Considering you will be doing config tweaks and testing often, it is good to introduce the shortcut here.&lt;/p&gt;

&lt;p&gt;By default, there are two ways of reloading&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;shutting down all tmux sessions and start them&lt;/li&gt;
&lt;li&gt;executing 'source-file ~/.tmux.conf' on all the sessions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Who on earth want to follow the above approaches all the time! let's create the shortcut - &lt;code&gt;Ctr+r&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key C-r source-file ~/.tmux.conf \; display "Config Reloaded !"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-this-is-how-i-want-to-start"&gt;
  &lt;/a&gt;
  3. This is How I Want to Start
&lt;/h4&gt;

&lt;p&gt;If you do not want to use your default shell and prefer something else, it is easy to set in tmux.&lt;/p&gt;

&lt;p&gt;Let me set my default to my fav shell - zsh. Macs now use zsh as the default login shell across the operating system. It is for a reason. Give it a try if you don't already use zsh as your default shell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-option -g default-shell /usr/bin/zsh        # login shell for new windows/pane
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-i-cant-see-enough-"&gt;
  &lt;/a&gt;
  4. I Can't See Enough !
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;By default, the message that comes in the status bar disappears in the blink of an eye and the pane number display time also too short to notice. Tweak the time as you wish.&lt;/li&gt;
&lt;li&gt;If you feel your default history limit is not good enough for your case, crank that up too.&lt;/li&gt;
&lt;li&gt;Lock the session after x mins of inactivity. Sometimes, it is good to protect your screen to make sure other's should not see enough.&lt;/li&gt;
&lt;li&gt;Default names given to the window are based on what runs in the pane. Hi tmux, let me name it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-option -g display-time 2000            # By default, status msg disappears in the blink of an eye (750ms)
set-option -g display-panes-time 2000      # By default, pane number disappears in 1 s
set-option -g history-limit 50000          # maximum number of lines held in window history - crank it up from 2k default
set-option -g lock-after-time 3600         # lock the session after 60 mins of inactivity. Sometimes, it is good to protect your screen to make sure other's can't see enough.
set-option -wg automatic-rename off        # default names are too vague to see. Let me name it.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-count-like-human"&gt;
  &lt;/a&gt;
  5. Count like Human
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;By default, the windows or panes start with index 0 (silly programmers!). Though tmux is one of those "created by and for programmers", this indexing makes it challenging to do switching windows; window 0 will be all the way to left in the status bar and the 0 in keyboard is all way to the right, then 1 key comes in the left...it messes with you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's imagine you have three windows. If we removed the second window, the default result would be two remaining windows, numbered 1 and 3. but, tmux could automatically renumber the windows to 1 and 2 with the right setting.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, Let's make tmux a human for a bit,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-option -g base-index 1                # window index will start with 1
set-window-option -g pane-base-index 1    # pane index will start with 1
set-option -g renumber-windows on         
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#6-kill-it-with-xforce-"&gt;
  &lt;/a&gt;
  6. Kill it with X-Force !
&lt;/h4&gt;

&lt;p&gt;By default, if you press  x, tmux will ask if you're sure you want to kill a pane before it does it. That's nice and all, but what if you'd rather just kill it? Let's do that. And, while we’re at it, let’s create a custom key combo for killing the entire session too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind-key x               # unbind-key “x” from it’s current job of “ask and then close”
bind-key x kill-pane       # rebind-key it to just “close”
bind-key X kill-session    # key combo for killing the entire session - &amp;lt;prefix&amp;gt; + shift + x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#7-make-splitting-panes-intuitive"&gt;
  &lt;/a&gt;
  7. Make Splitting Panes Intuitive
&lt;/h4&gt;

&lt;p&gt;Splitting a window in panes are currently bound to  % and  ”&amp;gt;, which are hard to remember. It is much easier to remember if you use &lt;code&gt;|&lt;/code&gt; for vertical splits and &lt;code&gt;_&lt;/code&gt; for horizontal splits. For now, I will leave the default binding as it is since I don’t have any other use for these weird key commands.&lt;/p&gt;

&lt;p&gt;Additionally, you could also mention the directory to open in the new pane when you split.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key | split-window -h -c "#{pane_current_path}" # let's open pane with current directory with -c option
bind-key _ split-window -v -c "#{pane_current_path}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#8-make-movements-quick"&gt;
  &lt;/a&gt;
  8. Make Movements Quick
&lt;/h4&gt;

&lt;p&gt;One of the main reasons for using tmux is because it’s keyboard-centric and plays well with Vim, another my favourite keyboard-centric tool. If you use Vim, you’re probably familiar with its use of h, j, k, and l for movement keys. This way, you do not have to take your fingers off the home row to move to anywhere else.&lt;/p&gt;

&lt;p&gt;Let's make movements in pane, window, &amp;amp; command prompt much familiar and faster,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Pane: Vim Style Movements
bind-key -r h select-pane -L              # go left
bind-key -r j select-pane -D              # go down
bind-key -r l select-pane -R              # go right
bind-key -r k select-pane -U              # go up

# Pane: Arrow Movements
bind-key Up select-pane -U
bind-key Down select-pane -D
bind-key Left select-pane -L
bind-key Right select-pane -R

# Window: Movements
bind-key L last-window
bind-key -r C-h select-window -t :-              # cycle through the windows for quick window selection
bind-key -r C-l select-window -t :+

# word separators for automatic word selection
set-window-option -g word-separators ' @"=()[]'  # default =&amp;gt; ‘ -_@’.

# tmux adds a short, almost imperceptible delay between the commands that can cause funny behavior when running vim inside tmux.
set-option -s escape-time 0

# Command Prompt Movements:  within the tmux command prompt and the command prompt is accessed using &amp;lt;P&amp;gt;: (in the status line)
set-option -g status-keys vi                 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#9-resizing-panes"&gt;
  &lt;/a&gt;
  9. Resizing Panes
&lt;/h4&gt;

&lt;p&gt;The default key binding are &lt;code&gt;Ctr+ Up/Down/Left/Right&lt;/code&gt; for one row movements , &lt;code&gt;Alt + Up/Down/Left/Right&lt;/code&gt; for five row movements.&lt;/p&gt;

&lt;p&gt;Let's add one more to the set (Vim way)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Vim Style
bind-key -r H resize-pane -L 2         # resize a pane two rows at a time.
bind-key -r J resize-pane -D 2
bind-key -r K resize-pane -U 2
bind-key -r L resize-pane -R 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#10-copying-and-pasting-text"&gt;
  &lt;/a&gt;
  10. Copying and Pasting Text
&lt;/h4&gt;

&lt;p&gt;We will do multiple custom setting here. This tweak can be a real productivity boost if you happen to do a lot of copying and pasting between windows.&lt;/p&gt;

&lt;p&gt;We will do these;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigating through output in a quick way like vi&lt;/li&gt;
&lt;li&gt;Vim Style in Copy-Mode&lt;/li&gt;
&lt;li&gt;Setup keys (install xclip if you don't already have it)

&lt;ul&gt;
&lt;li&gt;To copy from the current buffer to the sys clipboard &lt;code&gt;Alt+c&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To paste text from sys clipboard into current buffer &lt;code&gt;Alt+v&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To copy to the sys clipboard directly from the selection &lt;code&gt;Ctr+c&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;To paste text from sys clipboard into the view &lt;code&gt;Ctr+v&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Take a screenshot of the pane and store it with timestamp &lt;code&gt;Alt+s&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# To navigating through output in quick way, enable vim navigation keys
set-window-option -g mode-keys vi

# Vim Style in Copy-Mode "&amp;lt;prefix&amp;gt; ["
# Interacting with Paste Buffer
bind-key Escape copy-mode
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection            -N "start visual mode for selection"
bind-key -T copy-mode-vi 'y' send-keys -X copy-selection-and-cancel  -N "yank text into the buffer"
bind-key C-b choose-buffer # view the buffer stack
unbind-key p
bind-key p paste-buffer # default "&amp;lt;prefix&amp;gt; ]"

# Alt+C: To copy from the current buffer to the sys clipboard .
bind-key M-c run "tmux save-buffer - | xclip -i -sel clipboard"

# Alt+V: To paste text from sys clipboard into current buffer
bind-key M-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\""

# Ctr+C: Make it even better -just one step to move from sys-&amp;gt;buffer-&amp;gt;editor vice versa
bind-key -Tcopy-mode-vi C-c send -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c" \; display-message "copied to system clipboard"

# Ctr+V: To paste text from sys clipboard into the view
bind-key C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\";tmux paste-buffer"

# To take ASCII screenshots (tmux-resurrect uses C-s for saving, here binding to Alt-s ) .
# create the dir for storing screenshots
bind-key M-s run "tmux capture-pane; tmux save-buffer ~/.mytmux/pane_screenshots/\"$(date +%FT%T)\".screenshots"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#11-visual-styling-configuring-colors"&gt;
  &lt;/a&gt;
  11. Visual Styling: Configuring Colors
&lt;/h4&gt;

&lt;p&gt;Once the proper colour mode is set, you'll find it much easier to use Vim, Emacs, and other full-colour programs from within tmux, especially when you are using more complex colour schemes shell or syntax highlighting.&lt;/p&gt;

&lt;p&gt;What you can do here is up to your preference. It goes beyond just colour to your eyes. Let me demo with a few of my tricks;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's dim out any pane that's not active. It is a lot easier to see the active pane this way than looking for * in the status bar.&lt;/li&gt;
&lt;li&gt;Customize pane divider to make it subtle but distinct.&lt;/li&gt;
&lt;li&gt;Make the message colour not harmful to your eyes
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Set the default terminal mode to 256color mode
set -g default-terminal "screen-256color"

# Pane divider
set-window-option -g pane-border-style fg=colour11,bg=colour234
set-window-option -g pane-active-border-style fg=colour118,bg=colour234

# Cool trick: Let's dim out any pane that's not active.
set-window-option -g window-style fg=white,bg=colour236
set-window-option -g window-active-style fg=white,bg=colour235

# Command / Message line
set-window-option -g message-style fg=black,bold,bg=colour11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#12-dress-up-the-status-line"&gt;
  &lt;/a&gt;
  12. Dress Up the Status Line
&lt;/h4&gt;

&lt;p&gt;This is how you tailor up the dress for your status line  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update Status bar colour and window indicator colour&lt;/li&gt;
&lt;li&gt;Update What do you want to see on the left side &amp;amp; right side of the status line &lt;/li&gt;
&lt;li&gt;Setup soft activity alerts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of going fancy here, I just focused on what can help me during my work and less resource-intensive operation. Below is my status bar config;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Status Bar
set-option -g status-style fg=white,bg=colour04
set-option -g status-justify centre
set-window-option -g window-status-style fg=colour118,bg=colour04
set-window-option -g window-status-current-style fg=black,bold,bg=colour011
set-window-option -g window-status-last-style fg=black,bold,bg=colour011
set-window-option -g window-status-separator |

# Left Side
# Show my active session, window, pane name or id  
set-option -g status-left-length 50   # default 10
set-option -g status-left "[#[fg=white]S: #S, #[fg=colour11]W #I-#W, #[fg=colour3]P: #P #[fg=white]]"
# set-option -g status-left-style

# Right Side
set-option -g status-right-length 50   # default 50
set-option -g status-right "#[fg=grey,dim,bg=default] uptime: #(uptime | cut -f 4-5 -d\" \" | cut -f 1 -d\",\")"

# Enable Activity Alerts
set-option -g status-interval 60           # Update the status line every 60 seconds (15 is default)
set-window-option -g monitor-activity on   # highlights the window name in the status line
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#13-extending-tmux-with-plugins"&gt;
  &lt;/a&gt;
  13. Extending tmux with Plugins
&lt;/h4&gt;

&lt;p&gt;There are many tmux &lt;a href="https://github.com/tmux-plugins?q=&amp;amp;type=&amp;amp;language=&amp;amp;sort=stargazers"&gt;plugins&lt;/a&gt; available. If I have to choose one, that would be 'tmux-resurrect'.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This plugin restores the tmux environment after system restart. This plugin goes to great lengths to save and restore all the details from your tmux environment. See &lt;a href="https://github.com/tmux-plugins/tmux-resurrect"&gt;doc&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;If you setup resurrect, then the next logical thing to do is set up 'continuum' to make the saving and restoring as an automatic step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the step to setup tmux plugin management;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Last saved environment is automatically restored when tmux is started.
set -g @continuum-boot 'on'  

# terminal window will go fullscreen
set -g @continuum-boot-options 'fullscreen' 

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run-shell "mkdir -p ~/.tmux/plugins/"
# run-shell "git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm"

run '~/.tmux/plugins/tpm/tpm'

# Hit prefix + I to install plugins for the first time. 
# It takes few seconds. So, wait before panic.
# 
# resurrect key bindings:
#   prefix + Ctrl-s - save
#   prefix + Ctrl-r - restore
# 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: All of these tweaks are tested and working in Ubuntu.20.10 and tmux3.1b&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You could access my tmux config &lt;a href="https://github.com/krishnam-eng/ohmy-linux/tree/main/tmux"&gt;here&lt;/a&gt; &lt;/p&gt;

</description>
      <category>linux</category>
      <category>productivity</category>
      <category>tmux</category>
      <category>developer</category>
    </item>
  </channel>
</rss>
