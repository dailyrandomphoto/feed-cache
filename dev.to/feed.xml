<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Get Financial Aid On Coursera?</title>
      <author>TechABU</author>
      <pubDate>Mon, 01 Nov 2021 05:38:38 +0000</pubDate>
      <link>https://dev.to/techabu_/how-to-get-financial-aid-on-coursera-3f17</link>
      <guid>https://dev.to/techabu_/how-to-get-financial-aid-on-coursera-3f17</guid>
      <description>&lt;p&gt;We all are not equally lucky. Some of us are having financial difficulties, and as a result, our learning is suffering. You may be experiencing financial problems and desire to learn new skills, but you lack the financial means. In simple words, you are less lucky. &lt;/p&gt;

&lt;p&gt;But don’t panic, there is a solution for you to acquire the skill you desire for free, and it’s called &lt;a href="https://techabu.co/how-to/coursera-financial-aid-application-filling-process/"&gt;Coursera’s Financial Aid Program&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It has benefitted a large number of learners. In this article, I’ll concentrate on learners from low-income families. I’ll show you the entire Coursera financial aid application filing process on securing financial aid for any course with a certificate.&lt;/p&gt;

&lt;p&gt;These certificates are worthy and can be accepted in various fields of life. You can also include these certifications in your resume, which may aid your career by allowing you to land a great job interview.&lt;/p&gt;

&lt;p&gt;To learn more about each steps please visit: &lt;a href="https://techabu.co/"&gt;TechABU&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, if you just need the answers for the application you can use the following.&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;Q1: Why are you applying for Financial Aid? (150 words minimum required)&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Ans: I’d like to take the “Measure and Optimize Social Media Marketing Campaigns” Social Media Marketing course. I believe this course will assist me in beginning a new career..” I’m a student with no means of paying for the certificate. It is quite difficult for me to come up with such a large sum of money for the course. The Financial Aid application is my only choice for learning this course and being certified. Financial aid will enable me to complete this course without impacting my monthly budget. My family has three people in high school, and my other brother and I are in university. My father is the only one who earns money and pays for my schooling. If I sum up all of the Coursera courses, it will be tough for my family to cover educational costs. Coursera will assist me in obtaining a great future by completing a course from a renowned institution. If I finish this course, I will be able to add an extra point to my CV, which will make it easier for me to get work, not only for my CV but also because I want to master the course and comprehend all of its key points.&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;Q2: How will taking this course help you achieve your career goals? (150 words minimum required)&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Ans: I’d like to specialize in Social Media Marketing. I enjoy helping others in expanding their businesses. Furthermore, this specialty will enhance the appeal of my CV, and a validated certificate will boost my credibility and increase my chances of landing a job. Coursera’s course will assist me in thoroughly studying this course and putting it into practice. This course will teach me about the necessity for and value of social media marketing and the industry’s future, and how to use it to benefit yourself and others. If I obtain employment as a result of doing this course, I will be able to assist my family with monthly needs and educational costs. Coursera is the greatest way for me to learn about this rapidly evolving technology while also expanding my understanding of the rising IT industry. My major professional objective is to work in computer science, and taking these courses will help me give my certificate more legitimacy and advance in my job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the next question, ‘Help Us Improve,’ Select NO.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;&lt;strong&gt;Q3: If you answered no, please help us understand why?&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Ans: I’m a student with no employment. My family is unable to cover the cost of my education every month. It will be difficult for them to cover the fees if I include the Coursera course certificate expenses. I can only devote my time to these courses, and I am eager to study them. I’ll do everything I can to finish this specialty.&lt;/p&gt;

&lt;p&gt;These answers can be used for any course or specialization. Change the course name to the one you wish to take.&lt;/p&gt;

</description>
      <category>courserafinancialaid</category>
      <category>financialaid</category>
      <category>coursera</category>
      <category>education</category>
    </item>
    <item>
      <title>How To Write SEO Title &amp; Description in Website.</title>
      <author>Bhavyashah</author>
      <pubDate>Mon, 01 Nov 2021 05:26:05 +0000</pubDate>
      <link>https://dev.to/bhavyashah/how-to-write-seo-title-description-in-website-2ko0</link>
      <guid>https://dev.to/bhavyashah/how-to-write-seo-title-description-in-website-2ko0</guid>
      <description>&lt;p&gt;This is a complete guide on &lt;a href="https://www.blogtriggers.com/2021/05/smart-and-informative-seo-titles-and-descriptions.html"&gt;how to write SEO title and description&lt;/a&gt; in website and blog. We all know that search engine is an important place for business and we should use our keywords strategically. So that we can get high rank in google and most of the users can reach our site. Here we will discuss how we can optimize our title and description in such a way it increases conversion rate.&lt;/p&gt;

&lt;p&gt;So we are going to tell you in 2 part &lt;br&gt;
1) How to Write SEO Title?&lt;br&gt;
2) How to Write SEO Description?&lt;/p&gt;

&lt;h1&gt;How to Write SEO Title?&lt;/h1&gt;

&lt;p&gt;See In SEO Title there are various point that you have to note down when you write Title of your website page or posts.&lt;/p&gt;

&lt;p&gt;1) Your title should be not more than 60 to 70 characters long. That's the best advice if you want to write a good title.&lt;/p&gt;

&lt;p&gt;2) Your title should be direct and powerful. It should include keywords that will help your content rank higher on search engines.&lt;/p&gt;

&lt;p&gt;3) It is important to keep your SEO Title short. &lt;/p&gt;

&lt;p&gt;4) In Title you have to write Question based titles like How, Which, What, Whom, Why, When, Where etc... That will increase users curiosity and it will also increase your Title CTR.&lt;/p&gt;

&lt;p&gt;5) When you use numbers in your SEO title, like in "5 Reasons," you make it easier for search engines to find what they're looking for.&lt;/p&gt;

&lt;h2&gt;How to Write SEO Description?&lt;/h2&gt;

&lt;p&gt;When you are writing the SEO Description, you have to follow some points to increase your CTR.&lt;/p&gt;

&lt;p&gt;1) First of all your Description length was in-between 150 to 160 characters.&lt;/p&gt;

&lt;p&gt;2) When you write Description of your posts then you have to add main keywords in starting that will tell that your main posts is focusing on these points.&lt;/p&gt;

&lt;p&gt;3) If you are writing description then you have to write for users not for search engine because If users understand then it chances to click on it.&lt;/p&gt;

&lt;p&gt;4) When writing descriptions, it's important to include your brand name when relevant.&lt;/p&gt;

&lt;p&gt;5) Make sure your description will match with your content because if the description will not match with content then it chances to increase bounce rate.&lt;/p&gt;

&lt;p&gt;In short, these are the points you should remember if you want to increase your CTR and also rank fastly.&lt;/p&gt;

</description>
      <category>seo</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to use PostgreSQL with NodeJS by SilvenLEAF</title>
      <author>SilvenLEAF</author>
      <pubDate>Mon, 01 Nov 2021 04:05:14 +0000</pubDate>
      <link>https://dev.to/silvenleaf/how-to-use-postgresql-with-nodejs-by-silvenleaf-1aef</link>
      <guid>https://dev.to/silvenleaf/how-to-use-postgresql-with-nodejs-by-silvenleaf-1aef</guid>
      <description>&lt;p&gt;Ahoy there mates! Who's excited to embark onto the SQL world? Let's go meet PostgreSQL!! Stay tuned. Because on the very NEXT blog, we'll learn how to automate all DB setups and Schema generations!&lt;/p&gt;

&lt;p&gt;On this blog, we'll learn how to setup PostgreSQL with NodeJS!! To double the fun, let's throw some TypeScript as well. Don't worry, even if you don't know it, we'll be going from level 0, so as long as you know the basics of JavaScript, hop on. Let the adventure begin!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-project-setup"&gt;
  &lt;/a&gt;
  Step 0: Project Setup
&lt;/h3&gt;

&lt;p&gt;Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a package.json file to track all the packages that you'd download and so on)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-step-adding-typescript"&gt;
  &lt;/a&gt;
  Bonus Step: Adding TypeScript
&lt;/h3&gt;

&lt;p&gt;For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out &lt;strong&gt;&lt;a href="https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen"&gt;TypeScript SETUP by SilvenLEAF&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well anyway, in short (for details, checkout the above link)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install typescript
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i typescript 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;init our tsconfig
(make sure you already have typescript globally installed, if not type &lt;strong&gt;npm i -g typescript&lt;/strong&gt;. And don't get it confused with the previous normal &lt;strong&gt;npm i typescript&lt;/strong&gt; command)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It'll create a &lt;strong&gt;.tsconfig&lt;/strong&gt; file)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install &lt;strong&gt;ts-node&lt;/strong&gt; and &lt;strong&gt;ts-node-dev&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i ts-node ts-node-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now finally, let's setup our PostgreSQL Database&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-db-packages"&gt;
  &lt;/a&gt;
  Step 1: Install DB Packages
&lt;/h3&gt;

&lt;p&gt;Type the following command to install the required db packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i sequelize @types/sequelize sequelize-cli pg pg-hstore
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-2-create-sequelizerc-file"&gt;
  &lt;/a&gt;
  Step 2: Create .sequelizerc file
&lt;/h3&gt;

&lt;p&gt;Type &lt;strong&gt;touch .sequelizerc&lt;/strong&gt; to create &lt;strong&gt;.sequelizerc&lt;/strong&gt; file. Now paste the following content into this &lt;strong&gt;.sequelizerc&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./database/config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;config.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;models-path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./database/models&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;seeders-path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./database/seeders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;migrations-path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./database/migrations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sequelize uses this &lt;strong&gt;.sequelizerc&lt;/strong&gt; file to generate the config and the model using the specified path.&lt;/p&gt;

&lt;p&gt;Next up, we generate the config by running the command mentioned in next step.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#step-3-generate-database-config"&gt;
  &lt;/a&gt;
  Step 3: Generate Database config
&lt;/h3&gt;

&lt;p&gt;Make sure you have &lt;strong&gt;sequelize-cli&lt;/strong&gt; globally installed. If not, install it globally by using this command &lt;strong&gt;npm i -g sequelize-cli&lt;/strong&gt;. Otherwise the following command won't work.&lt;/p&gt;

&lt;p&gt;Type the following command to create the Database config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sequelize init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will create a folder called &lt;strong&gt;database&lt;/strong&gt; on the root level and with the following structure/stuff inside it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;config.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;it is the config js file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;models&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// here, I mean, in this "models" folder, we'll put our db models&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#step-4-edit-databaseconfigconfigjs"&gt;
  &lt;/a&gt;
  Step 4: Edit database/config/config.js
&lt;/h3&gt;

&lt;p&gt;Next up, let's edit the &lt;strong&gt;database/config/config.js&lt;/strong&gt;.&lt;br&gt;
Replace the content of the &lt;strong&gt;database/config/config.js&lt;/strong&gt; with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabaseUser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabasePassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yourDatabaseName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DB_STRING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`postgres://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@127.0.0.1:5432/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;development&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DB_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dialect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DB_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dialect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DB_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dialect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Congratulations you are all set up!! Now, create your schemas in that &lt;strong&gt;modals&lt;/strong&gt; folder and export it. Then import in the file where you want to use it and use it to your heart's content!&lt;/p&gt;

&lt;p&gt;But you know what? We are not gonna do that here now. Because We'll automate them right in the next blog. So stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NEXT blog coming soon in 24 hrs!!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's NEXT?
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#1-automate-creating-db-schemas"&gt;
  &lt;/a&gt;
  1. Automate creating DB Schemas
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-insane-stuff-with-javascripttypescript"&gt;
  &lt;/a&gt;
  2. Insane stuff with JavaScript/TypeScript
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-debugging-typescript-with-vs-code-debugger"&gt;
  &lt;/a&gt;
  3. Debugging TypeScript with VS Code Debugger
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#4-how-to-automate-anything"&gt;
  &lt;/a&gt;
  4. How to automate anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#5-sequelize-hooks"&gt;
  &lt;/a&gt;
  5. Sequelize Hooks
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#6-improved-ai-bot-that-can-do-anything"&gt;
  &lt;/a&gt;
  6. Improved AI BOT that can do anything
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#7-how-to-create-an-android-app-with-no-xp"&gt;
  &lt;/a&gt;
  7. How to create an Android APP with NO XP
&lt;/h4&gt;

&lt;p&gt;(including apk generating)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#got-any-doubt"&gt;
  &lt;/a&gt;
  Got any doubt?
&lt;/h1&gt;

&lt;p&gt;Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or &lt;a href="https://www.linkedin.com/in/silvenleaf/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wanna know more about me? Come here! &lt;br&gt;
&lt;a href="https://SilvenLEAF.github.io"&gt;SilvenLEAF.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>express</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Hacktoberfest 2021! My third contribution</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Mon, 01 Nov 2021 02:47:30 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/hacktoberfest-2021-my-third-contribution-5h51</link>
      <guid>https://dev.to/okimotomizuho/hacktoberfest-2021-my-third-contribution-5h51</guid>
      <description>&lt;p&gt;It's the final week of October, and I finally found an issue that I could work on. I would like to introduce this project and what I have learned from it, as it's a little larger than my two previous organizations that I have contributed to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h2&gt;

&lt;p&gt;This project is called &lt;a href="https://github.com/cisco-sbg-ui/atomic-react"&gt;Atomic-React&lt;/a&gt; which is a React library that implements UI components according to Atomic design specifications. Developers are able to have features such as Flexible, tree-shakable components, Full documentation, Auto-import, and many others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;The issue (&lt;a href="https://github.com/cisco-sbg-ui/atomic-react/issues/987"&gt;#987&lt;/a&gt;) pointed out was about displaying scroll tabs, where when you clicked on a tab, the line at the top disappeared.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8xDhnPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45c1yimkk1er2fy0p2a4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8xDhnPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45c1yimkk1er2fy0p2a4.png" alt="Issue" width="524" height="89"&gt;&lt;/a&gt; One of the repository's owners specified how to make the change, so it wasn't difficult to fix except finding the particular file.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;I added padding top 1px to the SCSS below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--scrolling&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;.a-tab-group__tab-wrapper&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The padding fixed the issue:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FvJWtJcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf6alw8t0wnx0xyfneyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvJWtJcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wf6alw8t0wnx0xyfneyi.png" alt="after adding the code" width="817" height="372"&gt;&lt;/a&gt;&lt;br&gt;
I've never used SCSS, so I was a little confused about how to use &amp;amp;(ampersand).　My understanding is SCSS(Sassy Cascading Style Sheets) is a special type of file for SASS, a program written in Ruby that assembles CSS style sheets for a browser. SCSS is like CSS with better formatting. SASS's &amp;amp; (ampersand) is basically a function that allows you to "reference the parent selector". Parent selector reference is a function that describes in CSS after compilation so that when written using the "nested function", the "selector one level above" is copied as it is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-a-pull-request"&gt;
  &lt;/a&gt;
  Make a Pull Request
&lt;/h2&gt;

&lt;p&gt;This time, I was careful about branch/commit/push. Their link to the contribution was broken, but I was able to find how people made commit messages.&lt;br&gt;
However, I had a question about the contents of the issue. &lt;br&gt;
It said "&lt;em&gt;Additional context: After the change is made, the GitHub action workflow Update Snapshots needs run on the published branch, and that should update the visual regression test assets.&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;I couldn't understand the meaning so I asked the person who filed the issue. The person kindly explained to me how to check:&lt;/p&gt;

&lt;p&gt;"&lt;em&gt;So when you add the PR the tests will run and should fail because the snapshot images will be different. Those snapshot images are updated via GitHub action. I took a screenshot from over in the Actions tab. On the left side, click "Update Snapshots" and then on the right side choose your branch. When the workflow runs, it'll update the snapshots and commit the change to the branch you selected.&lt;/em&gt;"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nGGgIg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grpp1cusgq4pnvvqm1h0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nGGgIg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grpp1cusgq4pnvvqm1h0.jpg" alt="Explain for the workflow" width="753" height="401"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I still wasn't sure, but as the person said I made a PR, and checked Action, and updated the snapshot.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cujYJNzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvsus258h4wta8eh685b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cujYJNzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvsus258h4wta8eh685b.png" alt="snapshot" width="880" height="268"&gt;&lt;/a&gt;&lt;br&gt;
I searched about workflow, but do not fully understand it yet, so please share your knowledge about it with me. After I ask my professor, I will update here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This time, both the filing issue and making a PR had some rules to maintain for the project. It was interesting, but I also thought I needed to expand my knowledge. I was surprised that people in this open-source community were nice. Even though Hactoberfest is almost over, but contribution never ends. I'm still looking for one more issue to complete my goal(4PRs) this month. If you have any recommendations to find repos or know something helpful about it (especially JavaScript), please feel free to comment below💌&lt;/p&gt;

&lt;p&gt;(Photo by Tony Hand on Unsplash)&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>hacktoberfest</category>
      <category>github</category>
    </item>
    <item>
      <title>Making the Filter</title>
      <author>Bruno Noriller</author>
      <pubDate>Mon, 01 Nov 2021 02:15:00 +0000</pubDate>
      <link>https://dev.to/noriller/making-the-filter-4l5l</link>
      <guid>https://dev.to/noriller/making-the-filter-4l5l</guid>
      <description>&lt;p&gt;Picking up from where we were in the &lt;a href="https://dev.to/noriller/making-the-parser-32lp"&gt;Parser&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`some random string something "quoted here" not here 'here again' tag:value something alone: and other:tag :value`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// it returns:&lt;/span&gt;
&lt;span class="cm"&gt;/* 
    {
      singleValues:  [ 'some','random','string','something','not','here','something','alone:','and',':value' ],
      quotedValues: [ 'quoted here', 'here again' ],
      tagValues: [['tag', 'value'], ['other', 'tag']]
    }
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-how-do-we-use-it"&gt;
  &lt;/a&gt;
  Now... how do we use it?
&lt;/h2&gt;

&lt;p&gt;Here's a draft of what we need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyBasicFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayToBeFiltered&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayToBeFiltered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;}){&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;???&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// To use this:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="cm"&gt;/* ... values ... */&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;basicFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MyBasicFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsedSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* that big string */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filterResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;basicFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedSearch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we will use a closure, just so we can prepare the function and then just call it afterwards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filter-magic"&gt;
  &lt;/a&gt;
  Filter Magic
&lt;/h3&gt;

&lt;p&gt;For that we will be needing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// check the single values&lt;/span&gt;
  &lt;span class="c1"&gt;// check the quoted values&lt;/span&gt;
  &lt;span class="c1"&gt;// check the tag values&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While writing this, I've made it in a way I didn't even though about using in &lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;EasyFilter&lt;/a&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this concatenates all strings in the item&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// using an object we avoid having to use a switch statement&lt;/span&gt;
  &lt;span class="c1"&gt;// the code is more clear and easier to read&lt;/span&gt;
  &lt;span class="c1"&gt;// and should we need to add more filters we can add them here in a simple way&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this is basically the "base case", it will check if the baseString have the values we are looking for with Regex using the case insensitive flag&lt;/span&gt;
    &lt;span class="c1"&gt;// we pass the stringValue of the item as default, but doing this allows other functions to override it&lt;/span&gt;
    &lt;span class="na"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;baseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baseString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
    &lt;span class="c1"&gt;// for the quoted values, we split them at the space and then call the sibling function "singleValues" for each value&lt;/span&gt;
    &lt;span class="c1"&gt;// and by using the "every" function we check if all the substrings are found&lt;/span&gt;
    &lt;span class="c1"&gt;// we could also had just called the "singleValues" function without splitting the string&lt;/span&gt;
    &lt;span class="c1"&gt;// but that would mean the it would check if it matched the exact string in order&lt;/span&gt;
    &lt;span class="c1"&gt;// it would look like this:&lt;/span&gt;
    &lt;span class="c1"&gt;// quotedValues: (string) =&amp;gt; myMagicFunctions.singleValues(string),&lt;/span&gt;
    &lt;span class="na"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subString&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c1"&gt;// finally, the tags we spread the tag/value and override the default baseString of "singleValues" with the value of the tag&lt;/span&gt;
    &lt;span class="na"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// we break down the parsedObject and with "some" check if any of the single, quoted or tag values have any match&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;parsedType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// since each can hold an array, we loop through them using "some"&lt;/span&gt;
      &lt;span class="c1"&gt;// also, by using "some", it already stops in the first match!&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;// and if this isn't magic, I don't know what is!&lt;/span&gt;
        &lt;span class="c1"&gt;// we use the types coming from the parsedObject,&lt;/span&gt;
        &lt;span class="c1"&gt;// if there's a match, we call the function that matches the type&lt;/span&gt;
        &lt;span class="c1"&gt;// and pass the payload (that can be either a string or a tuple)&lt;/span&gt;
        &lt;span class="c1"&gt;// if there's no match, it will return false by default&lt;/span&gt;
        &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parsedType&lt;/span&gt;&lt;span class="p"&gt;]?.(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// If you want to play around with the FilterMagic&lt;/span&gt;
&lt;span class="c1"&gt;// here's a mockItem for you to test&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;ghosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Are spooky?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;More spooky?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;happy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Halloween&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// and here's a mockParsedObject&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockParsedObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spooky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spoolk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;spooky more&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;morr spook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;happy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;halloween&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// invalidate some of the values to see what's called and what's not&lt;/span&gt;
&lt;span class="c1"&gt;// as is, it will stop at the very first one because "spooky" is in the item!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-final-result"&gt;
  &lt;/a&gt;
  The Final Result
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyBasicFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayToBeFiltered&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arrayToBeFiltered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FilterMagic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsedObject&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;baseString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;baseString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
      &lt;span class="na"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subString&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="na"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;parsedType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;myMagicFunctions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;parsedType&lt;/span&gt;&lt;span class="p"&gt;]?.(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately, the filter is the easiest part... &lt;br&gt;
Unfortunately... it's more straight forward code.&lt;/p&gt;

&lt;p&gt;I'm happy that I've managed to do something totally different than what I've used in &lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;EasyFilter&lt;/a&gt;, but this is a way simpler version of that one... &lt;br&gt;
Although I actually might think about using what we did here in there!&lt;/p&gt;

&lt;p&gt;Hey... how about it? &lt;br&gt;
Check if YOU can can do it... fork the project and then send a PR!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CSdtYYSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkyd8yo1zv3rtysodwxp.png" alt="buy me a spook coffee" width="170" height="37"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@wadeaustinellis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Wade Austin Ellis&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Basic Setup for Create React App</title>
      <author>Kristen Kinnear-Ohlmann</author>
      <pubDate>Mon, 01 Nov 2021 01:59:23 +0000</pubDate>
      <link>https://dev.to/kristenkinnearohlmann/basic-setup-for-create-react-app-1e3m</link>
      <guid>https://dev.to/kristenkinnearohlmann/basic-setup-for-create-react-app-1e3m</guid>
      <description>&lt;p&gt;One of the things I find most valuable is a good quick-start guide. This is the guide I put together to get a React app started and pushed to GitHub, using the Bash terminal in VS Code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the terminal, navigate to the folder on your machine where you want to keep the local copy of your repo.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;create-react-app&lt;/code&gt; to create the new application, replacing &lt;code&gt;&amp;lt;app-name&amp;gt;&lt;/code&gt; for your application's name. Additional documentation is available at &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;reactjs.org&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app &amp;lt;app-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Once the application has been created, create a &lt;code&gt;main&lt;/code&gt; branch (current GitHub default and preferred name) and delete the &lt;code&gt;master&lt;/code&gt; branch (still the current default for &lt;code&gt;create-react-app&lt;/code&gt;).
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; main
git branch &lt;span class="nt"&gt;-d&lt;/span&gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To use &lt;code&gt;npm&lt;/code&gt; instead of &lt;code&gt;yarn&lt;/code&gt;, take the following steps:

&lt;ul&gt;
&lt;li&gt;Delete &lt;code&gt;yarn.lock&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Delete &lt;code&gt;node_modules&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Reinstall &lt;code&gt;node_modules&lt;/code&gt; using &lt;code&gt;npm&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Clean up the generated &lt;code&gt;README&lt;/code&gt;, removing application boilerplate and adding any content desired for the first commit.&lt;/li&gt;
&lt;li&gt;Test the basic React setup and enjoy the spinning React logo!
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KyqY30XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/b92d2065e814e2ce7844d9ccd4dbf39e/60097/basic-react-app-tab.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KyqY30XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/b92d2065e814e2ce7844d9ccd4dbf39e/60097/basic-react-app-tab.jpg" alt="React tab" width="365" height="92"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iNhuTVr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/d079ff8df3e69e9b59bd07c7474b954b/acb04/basic-react-app-logo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNhuTVr_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kristenkinnearohlmann.dev/static/d079ff8df3e69e9b59bd07c7474b954b/acb04/basic-react-app-logo.jpg" alt="React logo" width="750" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commit code locally.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Initial commit"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Go to your account on &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and create the remote repo:

&lt;ul&gt;
&lt;li&gt;Use the same name used for the app creation&lt;/li&gt;
&lt;li&gt;Don't choose to add any of the options for initializing the repo to avoid conflicts pushing the local repo; local already has &lt;code&gt;README&lt;/code&gt; and &lt;code&gt;.gitignore&lt;/code&gt; from the app creation and the license can be added later&lt;/li&gt;
&lt;li&gt;Use the instructions from &lt;strong&gt;…or push an existing repository from the command line&lt;/strong&gt; to link the local repo to the remote location; example code below, the code generated by GitHub will contain the correct values
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   git remote add origin https://github.com/&amp;lt;GitHub user name&amp;gt;/&amp;lt;repo name&amp;gt;.git
   git branch &lt;span class="nt"&gt;-M&lt;/span&gt; main
   git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The basic React app is now ready for further development!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deployment Approvals in GitHub Actions for Private Repositories</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Mon, 01 Nov 2021 01:17:22 +0000</pubDate>
      <link>https://dev.to/n3wt0n/deployment-approvals-in-github-actions-for-private-repositories-4hhd</link>
      <guid>https://dev.to/n3wt0n/deployment-approvals-in-github-actions-for-private-repositories-4hhd</guid>
      <description>&lt;p&gt;Do you want to have &lt;strong&gt;deployments approval&lt;/strong&gt; in GitHub Actions, but you are on a Private Repository?&lt;/p&gt;

&lt;p&gt;If you are familiar with GitHub Actions Environments, you know that &lt;strong&gt;they are available only on Public Repositories&lt;/strong&gt;, or in GitHub Enterprise Cloud. &lt;/p&gt;

&lt;p&gt;In this In this live streaming you will learn how to &lt;strong&gt;get GitHub Actions Approvals with Private Repos&lt;/strong&gt; using a &lt;strong&gt;&lt;em&gt;different approach&lt;/em&gt;&lt;/strong&gt;. I'm going to show you how you can have s rot of deployment approvals in GitHub Actions even on Private Repositories &lt;strong&gt;&lt;em&gt;without&lt;/em&gt;&lt;/strong&gt; GitHub Enterprise Cloud.&lt;/p&gt;

&lt;p&gt;I will also answer all your &lt;strong&gt;questions about Deployments in GitHub Actions&lt;/strong&gt;. So prepare your questions! And if you can't make it, &lt;strong&gt;post your questions or comments down below&lt;/strong&gt; so I can address them during the live!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MDOn9HAS7bQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/MDOn9HAS7bQ"&gt;Link to the video: https://youtu.be/MDOn9HAS7bQ&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-for-the-live"&gt;
  &lt;/a&gt;
  ⏲️ TIME FOR THE LIVE:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tuesday, October 2nd, 9.00 pm HKT&lt;/li&gt;
&lt;li&gt;Tuesday, October 2nd, 6.30 pm IST&lt;/li&gt;
&lt;li&gt;Tuesday, October 2nd, 1.00 pm UTC&lt;/li&gt;
&lt;li&gt;Tuesday, October 2nd, 9.00 am ET&lt;/li&gt;
&lt;li&gt;Tuesday, October 2nd, 6.00 am PT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MDOn9HAS7bQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>actions</category>
      <category>codenewbie</category>
      <category>devops</category>
    </item>
    <item>
      <title>My Hacktoberfest2021 Journey</title>
      <author>Kendra Wing</author>
      <pubDate>Mon, 01 Nov 2021 00:49:24 +0000</pubDate>
      <link>https://dev.to/kwing25/my-hacktoberfest2021-journey-4cc5</link>
      <guid>https://dev.to/kwing25/my-hacktoberfest2021-journey-4cc5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hacktoberfest-2021-women-in-tech-appapi-creation-a-web-devs-reflection"&gt;
  &lt;/a&gt;
  Hacktoberfest 2021 ~ Women In Tech App/API creation ~ A Web Dev's Reflection
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest2021&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kwing25"&gt;
        kwing25
      &lt;/a&gt; / &lt;a href="https://github.com/kwing25/Women-Who-ve-Changed-Tech"&gt;
        Women-Who-ve-Changed-Tech
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Women Tech Pioneers API &amp;amp; React App 👩🏻‍💻. List of amazing Female Tech &amp;amp; STEM Pioneers. Contributions to the list are welcome! 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;‣&lt;a href="#the-project"&gt;The Project&lt;/a&gt; ‣&lt;a href="#the-beginning"&gt;The Beginning&lt;/a&gt; ‣&lt;a href="#the-future"&gt;The Future&lt;/a&gt; ‣&lt;a href="#being-a-maintainer"&gt;Being a Maintainer&lt;/a&gt; ‣&lt;a href="#women-in-tech"&gt;Women In Tech&lt;/a&gt; ‣&lt;a href="#thanks"&gt;Thanks&lt;/a&gt; ‣&lt;a href="#see-more"&gt;See more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was my 1st time being a Contrbutor &amp;amp; Maintainer in Hactoberfest. I'm a new Bootcamp Grad &amp;amp; Developer and this event was a great opportunity to contribute to Open Source Projects.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The Project
&lt;/h3&gt;

&lt;p&gt;Looking at the many open source projects I decided I wanted to do more than just contribute. For a while, I've wanted to do a Female Tech Pioneers Web API/React App after noticing that there aren't many sources online of just Females in Tech. I decided to start a project that would build the foundation of an all-Women Tech &amp;amp; STEM Pioneer API and Website. I wanted to have multiple contributors building a list of Female Tech Individuals. It's been surprising to see the number of people Contributing to the list. I didn't think that there would be many people who would see the Repo and it's been incredible working with people all over the world 🌎. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-beginning"&gt;
  &lt;/a&gt;
  The Beginning
&lt;/h4&gt;

&lt;p&gt;I started with the goal of developing a simple Front End &lt;a href="https://reactjs.org/"&gt;React JS&lt;/a&gt;  and a JSON &amp;amp; Yaml File for the API List. Creating the basic structure of the site I used &lt;a href="https://sass-lang.com/"&gt;Sass/SCSS&lt;/a&gt; for Styling, &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; for Structure, and &lt;a href="https://www.npmjs.com/"&gt;npm packages&lt;/a&gt; (Font Awesome, React-Scroll-Motion). For the API Development I used &lt;a href="//postman.com"&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-future"&gt;
  &lt;/a&gt;
  The Future
&lt;/h4&gt;

&lt;p&gt;This project is just in its infancy and I plan on developing this into a full Web API using REST &amp;amp; React.js as the main technologies. Having multiple Collaborators &amp;amp; Contributors will help to the project's development. &lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/kwing25/Women-Who-ve-Changed-Tech"&gt;Contribute☞&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#being-a-maintainer"&gt;
  &lt;/a&gt;
  Being a Maintainer
&lt;/h4&gt;

&lt;p&gt;Being a maintainer on a repo can be very rewarding but also involves a lot of work. &lt;a href="https://docs.github.com/"&gt;GitHub&lt;/a&gt; &amp;amp; GitLab make Devops/Repo Management accessible for users and is vital for open source collaboration. &lt;em&gt;Issues, Docs, PR's, Tracking, Actions, Projects, Etc.&lt;/em&gt;. One of the most important things I've learned is that having strong connections &amp;amp; communication with other collaborators can make a huge difference in a project. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#women-in-tech"&gt;
  &lt;/a&gt;
  Women in Tech
&lt;/h3&gt;

&lt;p&gt;My experience as a Woman in the Tech Industry has come with challenges. I started out taking Computer Networking courses and wanted to get certifications in IT and Security. There were very few women in these classes and sometimes I was the only one. I never let this stop me from going into this field and I don't want this to stop any other woman from pursuing a career in tech. But I had to learn and grow more confident in myself. Amy Hood the CFO of Microsoft put this feeling into good words-&lt;br&gt;&lt;br&gt;
"Every job I took, I was deeply uncomfortable in terms of feeling unqualified. Every step, every risk I took, built confidence."&lt;br&gt;&lt;br&gt;
When you love a certain field and are passionate about it you can achieve about anything (usually easier said than done). There are so many talented women in the Tech Industry and so many that have made a lasting impact. My ultimate goal for this project is to document women in Tech and make sure there remembered in Tech history. &lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks
&lt;/h4&gt;

&lt;p&gt;👏 Many great Contributors on this project. See the list ☞ github.com/kwing25/Women-Who-ve-Changed-Tech/graphs/contributors&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#see-more"&gt;
  &lt;/a&gt;
  See more
&lt;/h4&gt;

&lt;p&gt;Contact-&lt;br&gt;
&lt;a href="https://github.com/kwing25"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DBnqIuQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GitHub-%40kwing25-85e2cd%3Fstyle%3Dflat%26logo%3DGitHub%26link%3Dhttps://github.com/kwing25" alt="GitHub " width="131" height="20"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/kendrawing/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnKsgTME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/LinkedIn-gray%3Fstyle%3Dflat%26logo%3DLinkedin%26link%3Dhttps://www.linkedin.com/in/kendrawing/" alt="LinkedIn" width="75" height="20"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://www.britannica.com/biography/Ada-Lovelace"&gt;Ada Lovelace&lt;/a&gt; was my first entry to the list. ✦ Known as the 1st Computer Programmer. Ada was brilliant in Mathematics &amp;amp; Computing. She lived in the 1800s and is still remembered today for her contributions in this field. &lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAjpTS_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.britannica.com/22/23622-050-E60DC899/Ada-King-countess-Lovelace-Alfred-Edward-Chalon-circa-1838.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAjpTS_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.britannica.com/22/23622-050-E60DC899/Ada-King-countess-Lovelace-Alfred-Edward-Chalon-circa-1838.jpg" alt="profile" width="880" height="1095"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Ada Lovelace"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"known_for"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"First Computer Programmer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Bio"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Summary"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The daughter of famed poet Lord Byron, Augusta Ada Byron, Countess of Lovelace — better known as &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Ada Lovelace&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; — showed her gift for mathematics at an early age. She translated an article on an invention by Charles Babbage, and added her own comments. Because she introduced many computer concepts, Lovelace is considered the first computer programmer"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Fields"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Computing"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"Programming"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"Algorithms"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Legacy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Lovelace's contributions to the field of computer science were not discovered until the 1950s. Her notes were reintroduced to the world by B.V. Bowden, who republished them in 'Faster Than Thought - A Symposium on Digital Computing Machines'. Since then, Ada has received many posthumous honors for her work."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






</description>
      <category>hacktoberfest</category>
      <category>womenintech</category>
      <category>devops</category>
    </item>
    <item>
      <title>RUBY, C++</title>
      <author>Sam Sonter</author>
      <pubDate>Sun, 31 Oct 2021 23:26:58 +0000</pubDate>
      <link>https://dev.to/asapsonter/ruby-c-12ap</link>
      <guid>https://dev.to/asapsonter/ruby-c-12ap</guid>
      <description>&lt;p&gt;Why do most people hate Ruby on rails and C++?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>ruby</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Pumpkins fall! 🎃</title>
      <author>Okyn</author>
      <pubDate>Sun, 31 Oct 2021 23:15:01 +0000</pubDate>
      <link>https://dev.to/0kyn/pumpkins-fall-43dg</link>
      <guid>https://dev.to/0kyn/pumpkins-fall-43dg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#happy-halloween-2021"&gt;
  &lt;/a&gt;
  Happy Halloween 2021!
&lt;/h1&gt;

&lt;p&gt;I challenged myself and decided to code a tiny project related to Halloween and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Si89C1aY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tp83lagbjdeulf8m08w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Si89C1aY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0tp83lagbjdeulf8m08w.png" alt="screenshot" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confetti"&gt;
  &lt;/a&gt;
  Confetti 🎊
&lt;/h2&gt;

&lt;p&gt;I was looking toward a way to get a random particles generator in a canvas, and I came across this great tool &lt;a href="https://github.com/Agezao/confetti-js"&gt;confetti-js&lt;/a&gt; which widely inspired this project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#halloween2021"&gt;
  &lt;/a&gt;
  halloween-2021
&lt;/h2&gt;

&lt;p&gt;Nearly everything stands in the app config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;images&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./images/bat.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./images/pumpkin.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./images/sweet.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;imageMinWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;imageMaxWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One helpful function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo and code (which might be frightening 😱) are available.&lt;/p&gt;

&lt;p&gt;Demo: &lt;a href="https://0kyn.github.io/halloween-2021/"&gt;https://0kyn.github.io/halloween-2021/&lt;/a&gt;&lt;br&gt;
Sources: &lt;a href="https://github.com/0kyn/halloween-2021"&gt;https://github.com/0kyn/halloween-2021&lt;/a&gt;&lt;/p&gt;

</description>
      <category>halloween</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Coding Journey</title>
      <author>Drew Pellum</author>
      <pubDate>Sun, 31 Oct 2021 22:56:50 +0000</pubDate>
      <link>https://dev.to/apellum/my-coding-journey-2oli</link>
      <guid>https://dev.to/apellum/my-coding-journey-2oli</guid>
      <description>&lt;p&gt;My Background: I have a bachelors degree in exercise science.&lt;br&gt;
Why is this important? It led me to where I am today!&lt;/p&gt;

&lt;p&gt;After graduation, I was unsure of what was next for me, so I went to work for my dad while I figured that out.&lt;br&gt;
After working for my dad at his restaurant for several months, I started applying for any and every job. I was applying to jobs in the outdoor industry (one of my biggest interests) along with ski resorts (now my favorite hobby snowboarding).&lt;br&gt;
While I was doing this, I accidentally accepted two jobs. First, as a snowboard instructor with Winter Park Ski Resort. The other offer came after as a call center agent with Vail Resorts.&lt;/p&gt;

&lt;p&gt;I decided that I had to call and turn down one of the offers, so I let Winter Park know that I would not be arriving in Colorado to be a snowboard instructor. However, I did go to Colorado to work at Vail starting in November of 2017.&lt;/p&gt;

&lt;p&gt;In my time at Vail, I was presented the opportunity to become the supervisor of my office shortly after the summer program started in July of 2018. Doing this helped to teach me lots of valuable skills in managing a team, creating training workflows, along with dealing with difficult customers.&lt;br&gt;
I knew that my ceiling could be so much higher after gaining all these skills and showing how I could implement them into my work, so I started to look at more options.&lt;br&gt;
My skills were still limited to customer service, but I found a startup that had awesome culture and could introduce me to many more options.&lt;br&gt;
I accepted a job with Zen Planner (Fitness Member Management Software) in May of 2019 as a customer advocate. In this role, I taught users of the software how to use it and helped with issues. This was very rewarding because I was solving problems all day and letting the customers get back to what they were best at (Running their gyms and coaching).&lt;br&gt;
As soon as I started, the parent company Daxko acquired a fitness app called SugarWOD. Little did I know this acquisition would help me to pivot and change my career trajectory.&lt;br&gt;
I began working with SugarWOD doing part time email customer support in September of 2019 and was given the opportunity to go to events with the team.&lt;br&gt;
In February of 2020, I went with the team to Wodapalooza (a CrossFit competition in Miami) and had a blast. I was able to watch the event, interact with customers and users of the app, along with talking about a product I had so much knowledge about.&lt;br&gt;
Things began to change&lt;br&gt;
In march of 2020, COVID hit and my industry was taken by surprise. I began working for SugarWOD full time and it was the best move I’ve ever made. SugarWOD was actually built perfect for this. With all these gyms moving remote, they could use SugarWOD as a way to get the workouts to their athletes and keep them engaged. The tool helped with retention for gyms and helped athletes to communicate outside of the gym.&lt;br&gt;
With SugarWOD, I started training with product managers and I had an opportunity to apply for a product manager opening with SugarWOD. I made it to the second part of the interview which was a project to create a roadmap for the product. I didn’t get the job, but it introduced me to working with developers, product managers, and what an incredible product looks like.&lt;br&gt;
Over the next months, I worked with features and became an apprentice as a product manager. I realized that it would take a lot of time to become a product manager and there is a huge responsibility that comes with being a product manager and creating the vision for the company.&lt;br&gt;
This is how my journey led me to Flatiron and starting to code. I downloaded Codecademy and began learning HTML and CSS. I did some work with Javascript, but most of my experience was watching the SugarWOD developers in code reviews. I decided to make the plunge and start working toward a career in Software Development!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Dyslexic DEV? No problem!</title>
      <author>Viorel PETCU</author>
      <pubDate>Sun, 31 Oct 2021 22:06:33 +0000</pubDate>
      <link>https://dev.to/realvorl/dyslexic-dev-no-problem-1nfc</link>
      <guid>https://dev.to/realvorl/dyslexic-dev-no-problem-1nfc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#given"&gt;
  &lt;/a&gt;
  Given
&lt;/h2&gt;

&lt;p&gt;that I am dyslexic and also suffer from &lt;a href="https://aphantasia.com/making-aphantasia-better-known/"&gt;&lt;strong&gt;aphantasia&lt;/strong&gt;&lt;/a&gt;, which is a fascinating quirk of the brain, one  can imagine I have sort of a &lt;strong&gt;love / hate&lt;/strong&gt; relationship with reading. &lt;/p&gt;

&lt;p&gt;On the one hand, I must keep up with the news and trends of the software engineering industry but the serious and useful information I require, is in written form and that always drains my &lt;code&gt;reading battery&lt;/code&gt; because of the above average amount of concentration I have to put forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when"&gt;
  &lt;/a&gt;
  When
&lt;/h2&gt;

&lt;p&gt;daylight saving Weekend rolled around, I decided to do something useful with the "additional" hour, so I set out to improve this situation for people like me. &lt;/p&gt;

&lt;p&gt;I decided to build something that allows us to take the text from &lt;code&gt;any article&lt;/code&gt; in &lt;code&gt;any language&lt;/code&gt; (English, German, Romanian in my case) and convert it to an &lt;code&gt;mp3&lt;/code&gt; file so that we can "listen to the article" and not drain our weak &lt;code&gt;reading battery&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#then"&gt;
  &lt;/a&gt;
  Then
&lt;/h2&gt;

&lt;p&gt;I remembered one of the most important &lt;a href="https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well"&gt;&lt;strong&gt;UNIX&lt;/strong&gt; principles&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"DO ONE THING AND DO IT WELL"&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;so I challenged myself to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;WELL DONE&lt;/code&gt; existing &lt;code&gt;THINGS&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;write only a shell script &lt;/li&gt;
&lt;li&gt;have less than 31 lines (today is halloween 🎃 )&lt;/li&gt;
&lt;li&gt;uses only &lt;code&gt;cli tools&lt;/code&gt;,&lt;code&gt;pipes&lt;/code&gt;, &lt;code&gt;shell commands&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;time box of &lt;code&gt;1h&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🤪
&lt;/h2&gt;

&lt;p&gt;I did it! But this was only possible because so many wonderful people have developed so many great projects and shared them with the rest of us. There exists a multitude of software out there and any UNIX based OS allows us to interconnect it seamlessly, simply amazing 🤩&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-script"&gt;
  &lt;/a&gt;
  The script:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c"&gt;# this script does some text editing for the:&lt;/span&gt;
&lt;span class="c"&gt;#   $1 - input file&lt;/span&gt;
&lt;span class="c"&gt;# and stores it into the:&lt;/span&gt;
&lt;span class="c"&gt;#   out-$1 - output file&lt;/span&gt;
&lt;span class="c"&gt;# which it then later utilises to CURL to http://localhost:5002/api/tts running:&lt;/span&gt;
&lt;span class="c"&gt;#   docker run -it -p 5002:5002 synesthesiam/mozillatts:en&lt;/span&gt;
&lt;span class="c"&gt;# you can replace the TAG at the end with any language supported by TTS&lt;/span&gt;
&lt;span class="c"&gt;# it will:&lt;/span&gt;
&lt;span class="c"&gt;#  - produce a .wav file for each sentance in the outputfile&lt;/span&gt;
&lt;span class="c"&gt;#  - join the wav files into a single one&lt;/span&gt;
&lt;span class="c"&gt;#  - turn it into a .mp3 file named audio-$1.mp3&lt;/span&gt;

&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt;&lt;span class="s1"&gt;'\.'&lt;/span&gt; &lt;span class="s1"&gt;'{ for (i=1; i&amp;lt;NF; i++) print $i ".\n" }'&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s2"&gt;"'"&lt;/span&gt; &lt;span class="s2"&gt;"´"&lt;/span&gt; |tr &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"´"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; out-&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"out-&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; line
&lt;span class="k"&gt;do
  &lt;/span&gt;curl &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="nt"&gt;--request&lt;/span&gt; POST &lt;span class="s1"&gt;'http://localhost:5002/api/tts'&lt;/span&gt; &lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: text/plain'&lt;/span&gt; &lt;span class="nt"&gt;--data-raw&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; &lt;span class="s2"&gt;"audio_&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt; +%s&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;.wav"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="nb"&gt;ls &lt;/span&gt;audio&lt;span class="k"&gt;*&lt;/span&gt;wav |awk &lt;span class="s1"&gt;'{print "file " $0}'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; wav-list.txt

ffmpeg &lt;span class="nt"&gt;-f&lt;/span&gt; concat &lt;span class="nt"&gt;-safe&lt;/span&gt; 0 &lt;span class="nt"&gt;-i&lt;/span&gt; wav-list.txt &lt;span class="nt"&gt;-vn&lt;/span&gt; &lt;span class="nt"&gt;-ar&lt;/span&gt; 44100 &lt;span class="nt"&gt;-ac&lt;/span&gt; 2 &lt;span class="nt"&gt;-b&lt;/span&gt;:a 128k audio-&lt;span class="nv"&gt;$1&lt;/span&gt;.mp3

&lt;span class="nb"&gt;rm &lt;/span&gt;out-&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;wav
&lt;span class="nb"&gt;rm &lt;/span&gt;wav-list.txt

open &lt;span class="s2"&gt;"audio-&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;.mp3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-list-of-ingredients"&gt;
  &lt;/a&gt;
  The list of ingredients:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/mozilla/TTS"&gt;Mozilla/TTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/FFmpeg/FFmpeg"&gt;FFMPEG cli&lt;/a&gt; this thing went to &lt;a href="https://link.springer.com/article/10.1007/s11214-020-00765-9#Sec45"&gt;Mars 🔴&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;UNIX based OS&lt;/li&gt;
&lt;li&gt;docker cli&lt;/li&gt;
&lt;li&gt;the above script&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-recipe"&gt;
  &lt;/a&gt;
  The "recipe":
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="c"&gt;# in your terminal run: &lt;/span&gt;
 docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 5002:5002 synesthesiam/mozillatts:en
 &lt;span class="c"&gt;# replace the 'en' tag with 'de', 'fr', 'ro' etc.&lt;/span&gt;
 &lt;span class="c"&gt;# select and copy the text you want to listen to &lt;/span&gt;
 &lt;span class="c"&gt;# paste it into a file: `article.txt`&lt;/span&gt;
 &lt;span class="c"&gt;# save the script as `audiofy.sh` next to the text file&lt;/span&gt;
 &lt;span class="c"&gt;# in the terminal run:&lt;/span&gt;
 sh audiofy.sh article.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;I used a snippet from the README file of the fantastic &lt;a href="https://github.com/mozilla/TTS"&gt;Mozilla/TTS&lt;/a&gt; for my demo i.e:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zuo5xMWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqdyxx8748t7gubh11xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zuo5xMWA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqdyxx8748t7gubh11xv.png" alt="Mozilla TTL README snippet" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a listen to the output on &lt;a href="https://soundcloud.com/viorel-petcu-439304880/tts-demo"&gt;soundcloud&lt;/a&gt;. (use the &lt;code&gt;open in new tab&lt;/code&gt; function so you can see the text and marvel at the &lt;code&gt;natural sounding&lt;/code&gt; synthetic voice)  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Even tough I set only &lt;code&gt;1h&lt;/code&gt; for this project, I do love the result and will return to it for improvements. Implementing this was way too much fun. &lt;/p&gt;

&lt;p&gt;Also in the time I wrote this post I listend to most of the news articles that popped up on my Google News feed, because I had converted them as a test for my script. &lt;/p&gt;

&lt;p&gt;Synergy: &lt;strong&gt;achieved&lt;/strong&gt;!&lt;br&gt;
Productivity: &lt;strong&gt;increased&lt;/strong&gt;! &lt;br&gt;
Reading battery: &lt;strong&gt;protected&lt;/strong&gt;! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  ✌️
&lt;/h2&gt;

</description>
      <category>linux</category>
      <category>productivity</category>
      <category>a11y</category>
      <category>voice</category>
    </item>
  </channel>
</rss>
