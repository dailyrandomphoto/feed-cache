<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Data Science Tools-KIME Analytic(Section 1)</title>
      <author>nuh yurduseven</author>
      <pubDate>Sun, 31 Oct 2021 20:24:25 +0000</pubDate>
      <link>https://dev.to/noaahhh/data-science-tools-kime-analyticsection-1-160</link>
      <guid>https://dev.to/noaahhh/data-science-tools-kime-analyticsection-1-160</guid>
      <description>&lt;p&gt;Hello, In the first article of the series, where I examined the data science software that I decided to be a series and I will support it with applications, the installation of the KNIME application, which is written in Java and built on Eclipse, and which can prepare data science and artificial intelligence applications with workflow-style visual programming, its configuration on widely used GNU/linux systems. and I will review its usage with a machine learning application. I plan to save the application I prepared and share it in a github repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knime"&gt;
  &lt;/a&gt;
  KNIME
&lt;/h2&gt;

&lt;p&gt;KNIME Analytics is a data science environment written in Java. This software allows visual programming in the form of a workflow using various nodes and is an application that allows to develop a data mining application even without knowing advanced coding. It has a very diverse and rich plugin center and is used quite often in academia as well. It is an extensible data science platform where user-created scripts and codes can be used as well as visual programming. KNIME is cross-platform software that supports installation on many operating systems. You can click &lt;a href="https://www.knime.com/downloads"&gt;link&lt;/a&gt; to download. In this article, I will review KNIME for GNU/Linux distributions only.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;You can extract the &lt;code&gt;tar.gz&lt;/code&gt; archive of the KNIME application to the desired location.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;tar &lt;/span&gt;xvf knime-analytic-?.?.?.tar.gz &lt;span class="nt"&gt;-C&lt;/span&gt; /opt/knime 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All libraries and plugins of KNIME are available in the directory. There is a binary file named &lt;code&gt;Knime&lt;/code&gt; and you can start the application using it. But it needs &lt;code&gt;java&lt;/code&gt; to work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#java-11"&gt;
  &lt;/a&gt;
  JAVA 11
&lt;/h3&gt;

&lt;p&gt;KNIME Analytics works with Java 11 and higher. For this reason, you can install one of the &lt;code&gt;openjdk-11&lt;/code&gt; or &lt;code&gt;openjdk-latest&lt;/code&gt; packages for KNIME. Depending on the distribution you use, you can easily download and install these jdks from the main repository. &lt;/p&gt;

&lt;p&gt;For example, for RHEL based ones;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf/yum &lt;span class="nb"&gt;install &lt;/span&gt;java-11-openjdk &lt;span class="c"&gt;# or java-latest-openjdk &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or Debian based ones;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;openjdk-11-jdk &lt;span class="c"&gt;# or default-jre &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another option I can suggest here is the libertica jdk versions published by Belsoft. These are opensource and freely distributed java jdk versions. You can download and install jdk with many options such as standard and full package. You can find installation scripts or archives &lt;a href="https://bell-sw.com/pages/downloads/#mn"&gt;on this page&lt;/a&gt; for many operating systems. For KNIME Analytics, standard jdk-11-lts is sufficient. For Linux, we need to download the tar.gz package and extract it to a directory. Then the &lt;code&gt;JAVA_HOME&lt;/code&gt; and &lt;code&gt;PATH&lt;/code&gt; variables are updated and the java installation is completed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; ~/libertica-jdks
~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;tar &lt;/span&gt;xvf /path/to/downloaded-jdk.tar.gz &lt;span class="nt"&gt;-C&lt;/span&gt; ~/libertica-jdks/

~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/libertica-jdks/jdk-11.?.?
~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:JAVA_HOME/bin
&lt;span class="c"&gt;## after this&lt;/span&gt;
~&lt;span class="nv"&gt;$ &lt;/span&gt;java &lt;span class="nt"&gt;-version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JDK is available in this session. If you want to use it in this location all the time, you should add the lines exported for JAVA_HOME and PATH to your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; file if you are using zsh.&lt;/p&gt;

&lt;p&gt;After the Java installation, it is sufficient to go to the directory where knime is installed and run the &lt;code&gt;./knime&lt;/code&gt; script. If you have more than one jdk installed on your system, you can specifically give the path to jdk-11 with &lt;code&gt;./knime -v /path/to/jdk-11/bin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to create a &lt;code&gt;dektop entry&lt;/code&gt; for this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;Desktop Entry&lt;span class="p"&gt;]&lt;/span&gt;
Type&lt;span class="p"&gt;=&lt;/span&gt;Application
Name&lt;span class="p"&gt;=&lt;/span&gt;KNIME Analytic Platform
Description&lt;span class="p"&gt;=&lt;/span&gt;Data Science Environment
Exec&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/path/&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="sr"&gt;/knime-folder/&lt;/span&gt;knime_4&lt;span class="p"&gt;.&lt;/span&gt;?&lt;span class="p"&gt;.&lt;/span&gt;?/knime
Icon&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="sr"&gt;/rpath/&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="sr"&gt;/knime-folder/&lt;/span&gt;knime_4&lt;span class="p"&gt;.&lt;/span&gt;?&lt;span class="p"&gt;.&lt;/span&gt;?/&lt;span class="nb"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;svg
Categories&lt;span class="p"&gt;=&lt;/span&gt;Development;Science;
&lt;span class="k"&gt;terminal&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create a file named &lt;code&gt;~/.local/share/application/knime.desktop&lt;/code&gt; and save the entry to the relevant location.If you have problem with exec command. You can give a shell script that runs the ./knime script as a parameter in the &lt;code&gt;exec&lt;/code&gt; command. If you are using wayland as a display server, you may have problems in the application. For this reason, you can add the line &lt;code&gt;export GDK_BACKEND=x11&lt;/code&gt; to your configuration file &lt;code&gt;bashrc&lt;/code&gt; or &lt;code&gt;zshrc&lt;/code&gt; or whatever shell you are using, or inside your script file that starts KNIME. If you're already using x11 you won't have any problems.For example, the shell script that starts KNIME;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;#&lt;span class="sr"&gt;/bin/&lt;/span&gt;bash
&lt;span class="k"&gt;export&lt;/span&gt; GDK_BACKEND&lt;span class="p"&gt;=&lt;/span&gt;x11
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="sr"&gt;/knime -v /&lt;/span&gt;&lt;span class="nb"&gt;path&lt;/span&gt;&lt;span class="sr"&gt;/to/&lt;/span&gt;java&lt;span class="p"&gt;-&lt;/span&gt;jdk&lt;span class="m"&gt;-11&lt;/span&gt;/&lt;span class="nb"&gt;bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;may form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8VeBlSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrcdyzrz61ur58p4s10l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8VeBlSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrcdyzrz61ur58p4s10l.png" alt="knime" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extension-installations"&gt;
  &lt;/a&gt;
  Extension installations
&lt;/h3&gt;

&lt;p&gt;The KNIME application had many extentions. The high number of users and its extensibility are the most important factors that bring it to the top among other data mining applications. You can open the interface by selecting &lt;code&gt;Install KNIME Extensions...&lt;/code&gt; from the &lt;code&gt;File&lt;/code&gt; menu in the application. You can install it by searching for the add-on you want. For example, you can install the &lt;code&gt;KNIME twitter connector&lt;/code&gt; plugin that should be used to connect to the Twitter API and pull data. It will be installed with the necessary dependency packages. The application will need to be restarted before it can read new plugins.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmhd9asz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtp9jxcmsqnzrx673btk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmhd9asz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtp9jxcmsqnzrx673btk.png" alt="knime-extentions" width="880" height="638"&gt;&lt;/a&gt;&lt;br&gt;
Then you can search for the node you want from the &lt;code&gt;Node Repository&lt;/code&gt; section and add it to your project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GmG6vgj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ac4lvygghbpuu7wu7p8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GmG6vgj4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ac4lvygghbpuu7wu7p8.png" alt="knime-twitter" width="402" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#machine-learning-application-with-knime"&gt;
  &lt;/a&gt;
  Machine Learning Application with KNIME
&lt;/h2&gt;

&lt;p&gt;In this section, a ready-made dataset will be used to prepare a machine learning application. A data mining workflow will be created with KNME nodes by using the dataset named &lt;code&gt;HCV Data Dataset&lt;/code&gt; in the &lt;code&gt;UCI Machine Learning Repository&lt;/code&gt;. The project is created with &lt;code&gt;new project&lt;/code&gt; from the &lt;code&gt;File&lt;/code&gt; menu. &lt;code&gt;Node Repository&lt;/code&gt;&lt;br&gt;
I add my file to the project by searching &lt;code&gt;file reader&lt;/code&gt; or &lt;code&gt;csv reader&lt;/code&gt; from the section. Similarly, I search for the transactions I want to do in the &lt;code&gt;Node Repository&lt;/code&gt; and add them to my project and run them, and at the end of each operation, I give the output as the input of the next node.&lt;/p&gt;

&lt;p&gt;When I right-click on the nodes, I configure the operation and then run it. When I right-click again, I can see the output of the node as a result of the operation under the menu. The &lt;code&gt;Normalize&lt;/code&gt; node below outputs the normalized table and model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ljOE-bat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02n01ux1z0vce0lakmub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ljOE-bat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02n01ux1z0vce0lakmub.png" alt="knime-menu" width="880" height="471"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The operations performed in this application can be seen as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mLNkGisa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqpce7ybuaynkk5089gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mLNkGisa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqpce7ybuaynkk5089gm.png" alt="application" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the application, the data in the csv file was first read with the &lt;code&gt;csv reader&lt;/code&gt; node and the categorical values ​​such as &lt;code&gt;sex&lt;/code&gt; were given to the &lt;code&gt;category to number&lt;/code&gt; node to be converted into numbers. The output of this node is given to the &lt;code&gt;column filter&lt;/code&gt; node to extract the Id and categorical gender values. The output dataset is given to the &lt;code&gt;Normalize&lt;/code&gt; node. The dataset with 0-1 normalization was given to the &lt;code&gt;Partitioning&lt;/code&gt; node to be divided into 70% training and 30% testing. A model was created by giving the training dataset from the parts to the 'RProp MLP Learner' node. This model and test dataset was tested by giving it to the &lt;code&gt;MultiLayerPerceptron Predicter&lt;/code&gt; node. And the output of the node has been transformed into a table with the comparison matrix and score values ​​related to the performance in the &lt;code&gt;Scorer&lt;/code&gt; node.&lt;/p&gt;

&lt;p&gt;When our perceptron model was tested with 1 hidden layer and 10 neurons, it was seen that our comparison matrix and performance values, respectively;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrXzgImU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sam3yial1qgt5xoufrbb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrXzgImU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sam3yial1qgt5xoufrbb.png" alt="knime-confusion" width="478" height="129"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tK4lRBMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2zaxm0wzmbmcdbcvobh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tK4lRBMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2zaxm0wzmbmcdbcvobh.png" alt="knime-score" width="880" height="124"&gt;&lt;/a&gt;&lt;br&gt;
It seems to be a very successful model, here the dataset was not raw data. The performance of the data preprocessing on the data set was 98% accuracy. Preprocessing performance is definitely a factor. If you write a model with the raw data set, you can see that you cannot achieve a direct success.&lt;/p&gt;

&lt;p&gt;Due to the preprocessing of this dataset;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reviewed with R&lt;/li&gt;
&lt;li&gt;Sample dataset review with Smote&lt;/li&gt;
&lt;li&gt;Outlier cleaning with R boxplot&lt;/li&gt;
&lt;li&gt;Second time dataset with SMOTE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;direction. &lt;br&gt;
You can find this project and its dataset in the repo in the link.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-and-project"&gt;
  &lt;/a&gt;
  Resources and project
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/noaahhh/Data-Science-Flow-Code"&gt;github repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://archive.ics.uci.edu/ml/datasets/HCV+data"&gt;HCV data dataset&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>knime</category>
      <category>datascience</category>
      <category>ai</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>tsParticles 1.37.2 Released - react-particles-js deprecation notice</title>
      <author>Matteo Bruni</author>
      <pubDate>Sun, 31 Oct 2021 20:01:10 +0000</pubDate>
      <link>https://dev.to/matteobruni/tsparticles-1372-released-react-particles-js-deprecation-notice-1g7k</link>
      <guid>https://dev.to/matteobruni/tsparticles-1372-released-react-particles-js-deprecation-notice-1g7k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tsparticles-1372-changelog"&gt;
  &lt;/a&gt;
  tsParticles 1.37.2 Changelog
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fixed issue with dynamic imports and async loading&lt;/li&gt;
&lt;li&gt;Added browserslist to fix some issues with older browsers (should fix #2428)&lt;/li&gt;
&lt;/ul&gt;





&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Solid, Riot and Web Components.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with
React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Riot.js, Solid.js, and Web Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://join.slack.com/t/tsparticles/shared_invite/enQtOTcxNTQxNjQ4NzkxLWE2MTZhZWExMWRmOWI5MTMxNjczOGE1Yjk0MjViYjdkYTUzODM3OTc5MGQ5MjFlODc4MzE0N2Q1OWQxZDc1YzI" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ee2eed4d8159b570eef394a484f574d3bd038f6c64ad92ca0db286045486edcb/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f736c61636b2e706e67" alt="Slack"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/hACwv45Hme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c4f4ed816c2b77d7c2e15df3876cafa1cf89a896afb04633a1b6e28a81c5036/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f646973636f72642e706e67" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://t.me/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/309cad18f9a2090efdb147ac71064a969b826c3f4e9387f0a8d8e36e70133a80/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f74656c656772616d2e706e67" alt="Telegram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/tsparticles?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-tsparticles%22" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e86b7f51a0224618fe45aad99bff3e02ed8a5838691f244bf1df0e94454dafe2/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d313836313133267468656d653d6c69676874" alt="tsParticles Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Do-you-want-to-use-it-on-your-website"&gt;Use for your website&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Library-installation"&gt;Library installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Official-components-for-some-of-the-most-used-frameworks"&gt;Official components for some of the most used frameworks&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Angular"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Inferno"&gt;Inferno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#jQuery"&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Preact"&gt;Preact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#ReactJS"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Svelte"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-2x"&gt;VueJS 2.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-3x"&gt;VueJS 3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#WordPress"&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Templates-and-Resources"&gt;Templates and Resources&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Demo--Generator"&gt;Demo / Generator&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Characters-as-particles"&gt;Characters as particles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Mouse-hover-connections"&gt;Mouse hover connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Polygon-mask"&gt;Polygon mask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Animated-stars"&gt;Animated stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Nyan-cat-flying-on-scrolling-stars"&gt;Nyan cat flying on scrolling stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Background-Mask-particles"&gt;Background Mask particles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Migrating-from-Particlesjs"&gt;Migrating from Particles.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#PluginsCustomizations"&gt;Plugins/Customizations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Documentation and Development references &lt;a href="https://particles.js.org/docs/" rel="nofollow"&gt;here&lt;/a&gt; 📖&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js
it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the
instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the
links you need, and &lt;em&gt;don't be scared by &lt;/em&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#react-particlesjs-deprecation"&gt;
  &lt;/a&gt;
  React Particles.js deprecation
&lt;/h2&gt;

&lt;p&gt;As mentioned in the title, the library &lt;a href="https://github.com/wufe/react-particles-js"&gt;react-particles-js&lt;/a&gt; is officially deprecated in favor of &lt;a href="https://particles.js.org"&gt;react-tsparticles&lt;/a&gt;, since they share the same core library.&lt;/p&gt;

&lt;p&gt;You can read more &lt;a href="https://github.com/wufe/react-particles-js#warning-deprecation-notice"&gt;here&lt;/a&gt;, so if you were or are using that library it's recommended to migrate to the tsParticles official React component.&lt;/p&gt;

&lt;p&gt;There are also some benefits to this migration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React 17.x support, no need to override peer dependencies warnings&lt;/li&gt;
&lt;li&gt;More frequent updates, a new React tsParticles version will be released with the core library, they share the same version so you'll know if you have the right version&lt;/li&gt;
&lt;li&gt;Future proof, since tsParticles v2 is coming with a lot of breaking changes, the React tsParticles component will be ready since day one&lt;/li&gt;
&lt;li&gt;More updated documentation, you'll find every needed information in the same documentation of tsParticles core library since they share the repository and the maintainer&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Pandas: Creating, Modifying and Inspecting DataFrames (featuring data from Squid Game)</title>
      <author>Ruth</author>
      <pubDate>Sun, 31 Oct 2021 19:07:06 +0000</pubDate>
      <link>https://dev.to/rvtheverett/pandas-creating-modifying-and-inspecting-dataframes-featuring-data-from-squid-game-1d2c</link>
      <guid>https://dev.to/rvtheverett/pandas-creating-modifying-and-inspecting-dataframes-featuring-data-from-squid-game-1d2c</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7TbDLMG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635697226433/p1kLqNC4g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TbDLMG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635697226433/p1kLqNC4g.gif" alt="giphy (6).gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inspired by &lt;a class="mentioned-user" href="https://dev.to/codechips"&gt;@codechips&lt;/a&gt;
' SQL Squid Game guide, I thought it would be fun to use some Squid Game data to write a guide on the basics of the Pandas library in Python including creating a DataFrame, modifying rows and columns and inspecting the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-pandas"&gt;
  &lt;/a&gt;
  Importing Pandas
&lt;/h2&gt;

&lt;p&gt;The first step is to import that Pandas library and alias it as pd. This means we don't have to call the full word when we run a Pandas function, we just need to type pd.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas as pd 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main data structure of Pandas is a DataFrame, which is similar to an excel spreadsheet, where we can store data. Once the data is within a DataFrame, there are several ways it can be used, for example data analysis or to visualise it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-dataframes"&gt;
  &lt;/a&gt;
  Introducing DataFrames
&lt;/h2&gt;

&lt;p&gt;DataFrames store data in rows and columns. Each column has a name, which is a string, and each row has an index, which is typically an integer. Like lists in Python, DataFrames also use 0 indexing, which means the first row in index 0 instead of index 1. However, you can set the index to include extra information about what the row contains if you want. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5JKI-Y_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684575976/YYzdNTC9B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5JKI-Y_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684575976/YYzdNTC9B.png" alt="Screenshot 2021-10-31 at 12.49.20.png" width="690" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DataFrames can contain many different data types, including strings, integers and floats. &lt;/p&gt;

&lt;p&gt;You can create a DataFrame by uploading data from a csv file, but you can also create a DataFrame by typing values into a list and using a dictionary to transform it into a DataFrame. You can use multiple different lists, containing different data types, but the value of content included in each must be the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data = {'Name':  ['Oh Il-Nam', 'Kang Sae-byeok', 'Jang Deok-su', 'Abdul Ali', 'Han Mi-nyeo',  'Cho Sang-woo', 'Ji-yeong'],
'Number': [1, 67, 101, 199, 212, 218, 240],
        }

df = pd.DataFrame(data, index = ["player1", "player67", "player101", "player199", "player212", "player281", 
"player240"])

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above we have one list with the players names, typed as strings, and another with their number, which is an integer. &lt;/p&gt;

&lt;p&gt;We then transform this dictionary of lists to a DataFrame using the &lt;em&gt;pd.DataFrame()&lt;/em&gt; command. We also set the index values, by passing the string names as a list argument. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inspecting-a-dataframe"&gt;
  &lt;/a&gt;
  Inspecting a DataFrame
&lt;/h2&gt;

&lt;p&gt;Once the data has been added, we want to make sure it looks correct and contains everything we want. The best method to do this is to use &lt;em&gt;df.head()&lt;/em&gt;. This will show the first 5 rows of data. However, if you would like to see more data, i.e 10 rows, you can pass this as an argument within the brackets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df.head(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXwlDgmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684192998/BSI6OefFT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXwlDgmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684192998/BSI6OefFT.png" alt="Screenshot 2021-10-31 at 12.20.59.png" width="468" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to only view the data from one row, we can use the panda-specific access method &lt;em&gt;.loc&lt;/em&gt;. This is a label based method, meaning we have to specify the name of the row we want to view, this method can only use string. Here we add in the index name that we specified when creating the DataFrame.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(df.loc["player67"])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OVkaGgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684208937/PwpNHm1re.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OVkaGgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684208937/PwpNHm1re.png" alt="Screenshot 2021-10-31 at 12.21.49.png" width="524" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The other access method is &lt;em&gt;.iloc&lt;/em&gt;, which is integer based, by specifying the positional index of the row we want to view. We would use this one if we hadn't changed the index, or if we had changed it to another integer value instead of a string. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-P55C79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635690271373/FkLwSbFId.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-P55C79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635690271373/FkLwSbFId.png" alt="Screenshot 2021-10-31 at 14.24.13.png" width="808" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also get a count of how many rows within the DataFrame, by using the &lt;em&gt;count()&lt;/em&gt; function. This will print the number of rows in each column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df.count()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WfHjHeGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684222534/zlvMgpnzK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WfHjHeGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684222534/zlvMgpnzK.png" alt="Screenshot 2021-10-31 at 12.22.54.png" width="286" height="128"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we only want to print a single number to display the row count, we can pass in the name of the column we want to square within square brackets before the count function. Storing this within a variable will also enable us to use this number for functions in the future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;player_count = df['Name'].count()
player_count
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-a-new-row"&gt;
  &lt;/a&gt;
  Adding a new row
&lt;/h2&gt;

&lt;p&gt;There are a couple of different ways to add new rows to a DataFrame. If we have multiple rows within another DataFrame, we can use the &lt;em&gt;.append()&lt;/em&gt; function to add several rows to the end of our existing DataFrame. &lt;/p&gt;

&lt;p&gt;However, if we have just 1 row to add, i.e only 1 new player to add, we can again use the .loc method to add the row to the end of our original DataFrame. As we are defining the name of our indexes, we need to pass this in before the new values that will be within the row. The number of values contained must match the number of columns we have and be in the correct order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df.loc['player456'] = ['Seong Gi-hun', 456]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we print the head() of the new DataFrame, we will see our new row added in 🧑‍🦰&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ay6AvSye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684246183/_tnVDlj_u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ay6AvSye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684246183/_tnVDlj_u.png" alt="Screenshot 2021-10-31 at 12.24.04.png" width="506" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-new-column"&gt;
  &lt;/a&gt;
  Adding a new column
&lt;/h2&gt;

&lt;p&gt;In addition to adding a new row, we can also add a new column. There are several ways you can define the value that will be contained within this column for each row, including based on what is within other columns and using conditional statement or lambda function. However, in this case we want the value to be the same for every row, to show that every player is currently playing the game. &lt;/p&gt;

&lt;p&gt;For this we just need to add the name of our new column and assign it the value that we want to add.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df['Status'] = "Playing"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AqHXtCrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684288720/Hps6Ba-7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AqHXtCrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684288720/Hps6Ba-7n.png" alt="Screenshot 2021-10-31 at 12.24.47.png" width="580" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changing-values"&gt;
  &lt;/a&gt;
  Changing values
&lt;/h2&gt;

&lt;p&gt;Now we have a column with the status of all players that are playing the game. But what happens when we start to have eliminations? We need to update the value in that column 😬&lt;/p&gt;

&lt;p&gt;Again, we will use the *.loc * method to define the row that we will be amending and the column that we will be changing the value of. &lt;/p&gt;

&lt;p&gt;In this case it will be based on their number, so we need to pass in this column name and use the equals to ensure it is only going to change the single row that equals that row in the Number column. Next we will pass in the name of the column that we will be amending before assigning the new value of Eliminated 😢&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df.loc[df.Number == 1, "Status"] = "Eliminated"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mlk65P-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684316867/WkohnycJf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mlk65P-N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684316867/WkohnycJf.png" alt="Screenshot 2021-10-31 at 12.30.54.png" width="626" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deleting-a-row"&gt;
  &lt;/a&gt;
  Deleting a row
&lt;/h2&gt;

&lt;p&gt;Once players start being eliminated, they will be removed from the game, therefore we will want to ensure we have updated DataFrame that reflects this and only contains those who are currently playing. &lt;/p&gt;

&lt;p&gt;Because we want to keep track of all of the players in the original DataFrame, we don't want to delete anything from this one. However, we can use the data from our original DataFrame to make another one while leaving the original untouched. We can do this by defining the name of our new DataFrame and apply some logic to pull data from our original one. &lt;/p&gt;

&lt;p&gt;In this case, &lt;em&gt;.drop()&lt;/em&gt; allows us to drop (aka delete, but I guess in the instance of game 5, literally drop) the eliminated players. As we have changed their status to Eliminated, we can use this value to delete them all.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;round5 = df.drop(df.index[df['Status'] == "Eliminated"])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to drop the rows based on their name or number, but this would be done on a row by row basis, rather than removing multiple at once. &lt;/p&gt;

&lt;p&gt;Now we can view the new DataFrame, and see our remaining players for the game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;round5.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5bk4Xf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684404025/o_-4tbSEq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5bk4Xf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684404025/o_-4tbSEq.png" alt="Screenshot 2021-10-31 at 12.38.31.png" width="588" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-data"&gt;
  &lt;/a&gt;
  Using the data
&lt;/h2&gt;

&lt;p&gt;The final thing we can do is use the count function mentioned earlier, where we extracted a count value for the columns based on conditional statements. For example, if we want to print the number of players who have a status of Playing, and then for those who have status of Eliminated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eliminated = df[df['Status'] == "Eliminated"]['Name'].count()
playing = df[df['Status'] == "Playing"]['Name'].count()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assigning these values to a variable means we can also use these counts to create simple sentences using f strings. As the variable values are mutable, we can update these after every game when players are eliminated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(f"there are currently {playing} players playing")
print(f"there are currently {eliminated} players eliminated")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hhl6eNNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684418784/mo-Mb5B_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hhl6eNNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635684418784/mo-Mb5B_3.png" alt="Screenshot 2021-10-31 at 12.40.05.png" width="708" height="94"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And not to forget a wonderful maths function, we can use the number of eliminated players and take this from the total number of players who started to get a count for the current players in the game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;total_players = 8
current = total_players - eliminated
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope this has been a helpful (and fun) way to understand the basics of the Pandas library in Python. I'm  also hoping to make more posts that go further in detail covering logical statements, merging and visualisations in Pandas. &lt;/p&gt;

&lt;p&gt;A quick cheatsheet of these functions can be found  &lt;a href="https://www.notion.so/Pandas-Creating-Modifying-and-Inspecting-DataFrames-featuring-data-from-Squid-Game-01ec20de1527400a8551aeb5a194fa54"&gt;here&lt;/a&gt; and a notebook to download and play around with can be found  &lt;a href="https://github.com/rvth/squid-game-python/blob/main/Squid%20Game%20Python.ipynb"&gt;here&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>python</category>
      <category>pandas</category>
      <category>datascience</category>
      <category>learning</category>
    </item>
    <item>
      <title>Hash Tables</title>
      <author>Code_Regina</author>
      <pubDate>Sun, 31 Oct 2021 18:52:13 +0000</pubDate>
      <link>https://dev.to/code_regina/hash-tables-4ii2</link>
      <guid>https://dev.to/code_regina/hash-tables-4ii2</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                   -Intro to Hash Tables
                   -Handling Collisions
                   -Hash Table Keys and Values 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#intro-to-hash-tables"&gt;
  &lt;/a&gt;
  Intro to Hash Tables
&lt;/h3&gt;

&lt;p&gt;Hash tables are used to store key-value pairs. &lt;br&gt;
They are similar to arrays but there is no required order. &lt;br&gt;
Hash tables have a great speed so they are widely used.&lt;br&gt;
Hash tables have different names in other languages but the functionality is the same. &lt;/p&gt;

&lt;p&gt;Python hash tables are called dictionaries. &lt;br&gt;
JavaScript hash tables are called objects and maps.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arrayLen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// map "a" to 1, "b" to 2, "c" to 3, etc.&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;arrayLen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#handling-collisions"&gt;
  &lt;/a&gt;
  Handling Collisions
&lt;/h3&gt;

&lt;p&gt;There are two ways to handle hash table collisions. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separate Chaining &lt;/li&gt;
&lt;li&gt;Linear Probing&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#separate-chaining"&gt;
  &lt;/a&gt;
  Separate Chaining
&lt;/h4&gt;

&lt;p&gt;is when the hash table has each index in the array has stored values with more data similar to an array or a linked list. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#linear-probing"&gt;
  &lt;/a&gt;
  Linear Probing
&lt;/h4&gt;

&lt;p&gt;When a collision is found, a search is performed throughout the array to find the next  empty slot. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hash-table-keys-and-values"&gt;
  &lt;/a&gt;
  Hash Table Keys and Values
&lt;/h3&gt;

&lt;p&gt;Keys - Loops through the hash table array and returns an array of keys in the table &lt;/p&gt;

&lt;p&gt;Values - Loops through the hash table array and returns an array of values in the table&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;keysArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;keysArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
            &lt;span class="nx"&gt;keysArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;keysArr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;valuesArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;valuesArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;
            &lt;span class="nx"&gt;valuesArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Creating and publishing Clojure libraries</title>
      <author>Volodymyr Kozieiev</author>
      <pubDate>Sun, 31 Oct 2021 18:42:21 +0000</pubDate>
      <link>https://dev.to/vkjr/creating-and-publishing-clojure-libraries-3kpp</link>
      <guid>https://dev.to/vkjr/creating-and-publishing-clojure-libraries-3kpp</guid>
      <description>&lt;p&gt;Here we are going to create a Clojure library, pack it to a JAR file, deploy it to a Maven repository and make its code available from Clojure and ClojureScript projects. We will create the simplest project and will grow it step by step. At the end, we will discuss the &lt;code&gt;build-clj&lt;/code&gt; tool that can be used to create the library template projects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes-for-readers"&gt;
  &lt;/a&gt;
  Notes for readers
&lt;/h2&gt;

&lt;p&gt;Projects here are organized using &lt;code&gt;deps.edn&lt;/code&gt; configuration files.&lt;/p&gt;

&lt;p&gt;All examples in this post use single-segment namespaces, like &lt;code&gt;(ns basic-math)&lt;/code&gt;. It makes examples simpler but please don't use this approach for production code. Both Clojure and ClojureScript have subtle issues with single-segment namespaces. Also this can lead to name clashes when your library published and imported along with another library with the same name. So please use something like &lt;code&gt;(ns basic-math.core)&lt;/code&gt; or &lt;code&gt;(ns your-name/basic-math)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;At the time of writing Clojure CLI with version &lt;code&gt;1.10.3.986&lt;/code&gt; was used on Mac.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forms-and-locations-of-clojure-libraries"&gt;
  &lt;/a&gt;
  Forms and locations of Clojure libraries
&lt;/h2&gt;

&lt;p&gt;Clojure library can exist in a form of a source code or as a JAR file. JAR stands for "java-archive" and it is a zip-archive with all the library files - sources and resources.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tools.deps&lt;/code&gt; library that is used behind the scenes when we invoke &lt;code&gt;clj&lt;/code&gt; command has a concept of "&lt;a href="https://clojure.org/reference/deps_and_cli#_procurers"&gt;procurer&lt;/a&gt;". Each procurer knows how to download the library and its dependencies. Currently, three procurers exist: &lt;code&gt;local&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;mvn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;local&lt;/code&gt; procurer allows you to use a library from a local disk. It can be a folder with a source code or a JAR file.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git&lt;/code&gt; procurer allows you to download a library source code from a git repository. Downloaded libraries will be stored in a local folder &lt;code&gt;~/.gitlibs&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mvn&lt;/code&gt; procurer gives access to the Maven repositories. These are storages of files widely used in a java-world. Libraries are stored there as JARs. When the library is downloaded from a remote Maven repo it is cached in a local repo on your disk. By default, it lives in &lt;code&gt;~/.m2/repository&lt;/code&gt;. Library JAR should be published to a Maven repo along with the &lt;code&gt;pom.xml&lt;/code&gt; file. It is a configuration file for the Maven that contains information about an artifact, for example, its name and version. More information about the POM files can be found in the &lt;a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html"&gt;official documentation&lt;/a&gt;. &lt;br&gt;
Later in this article we will use Maven repository called &lt;a href="https://clojars.org/"&gt;Clojars&lt;/a&gt;. It is a community repo for open-source Clojure libraries.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-local-library"&gt;
  &lt;/a&gt;
  Creating local library
&lt;/h2&gt;

&lt;p&gt;The simplest form of a library is a local folder with a source code. It can be referenced from another project by a relative path.&lt;/p&gt;

&lt;p&gt;As an example let's create a &lt;code&gt;test-lib&lt;/code&gt; that defines the simple &lt;code&gt;sum&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The folder structure looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;playground
└── test-lib
    ├── deps.edn
    └── src
        └── basic_math.clj
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;test-lib/basic_math.clj&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;basic-math&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;test-lib/deps.edn&lt;/code&gt; contains an empty map:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another project in a &lt;code&gt;playground&lt;/code&gt; folder will be the one that uses the &lt;code&gt;test-lib&lt;/code&gt;. Let's call it &lt;code&gt;adder&lt;/code&gt;. Its main function will take arbitrary number of arguments, sum them and print the result. &lt;/p&gt;

&lt;p&gt;Updated folder structure now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;playground
├── adder
│   ├── deps.edn
│   └── src
│       └── core.clj
└── test-lib
    ├── deps.edn
    └── src
        └── basic_math.clj
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;adder/core.clj&lt;/code&gt; references &lt;code&gt;basic-math&lt;/code&gt; namespace from test library, uses the &lt;code&gt;sum&lt;/code&gt; function and prints the sum of arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;basic-math&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;-main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Args sum: "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;basic-math/sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Integer/parseInt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the content of &lt;code&gt;deps.edn&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:paths&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="no"&gt;:deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;test-lib/test-lib&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:local/root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"../test-lib"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make &lt;code&gt;basic-math&lt;/code&gt; namespace available, &lt;code&gt;test-lib&lt;/code&gt; added under &lt;code&gt;:deps&lt;/code&gt; key and pointed to a local folder &lt;code&gt;../test-lib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that lib name should be qualified, so if you write &lt;code&gt;{test-lib {:local/root "../test-lib"}}&lt;/code&gt;, you'll get a warning. At the same time the name itself is not really important because later in the code we won't use it, we use only name of the namespace. So you can write &lt;code&gt;{any-name/any-name {:local/root "../test-lib"}}&lt;/code&gt; and that won't be an error.&lt;/p&gt;

&lt;p&gt;To check that library successfully used we can switch to &lt;code&gt;adder&lt;/code&gt; folder and run main function of &lt;code&gt;core&lt;/code&gt; namespace with couple arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;adder
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-M&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; core 1 2 3
Args &lt;span class="nb"&gt;sum&lt;/span&gt;:  6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-gitbased-library"&gt;
  &lt;/a&gt;
  Creating git-based library
&lt;/h2&gt;

&lt;p&gt;Libraries can be stored in a git. Let's push the lib from the previous section to the github and reuse it from there.&lt;/p&gt;

&lt;p&gt;First, let's create an empty github repo named &lt;code&gt;clojure-test-lib&lt;/code&gt;. After that we need to push there an already existing code of our library.&lt;/p&gt;

&lt;p&gt;Here is a series of commands to do this. &lt;strong&gt;Note&lt;/strong&gt;: you have to be inside the &lt;code&gt;test-lib&lt;/code&gt; folder when invoking them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;test-lib
&lt;span class="nv"&gt;$ &lt;/span&gt;git init
&lt;span class="nv"&gt;$ &lt;/span&gt;git add deps.edn
&lt;span class="nv"&gt;$ &lt;/span&gt;git add src/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"init"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git branch &lt;span class="nt"&gt;-M&lt;/span&gt; main
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add origin https://github.com/YOUR-GITHUB-NAME/clojure-test-lib.git
&lt;span class="nv"&gt;$ &lt;/span&gt;git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use the library from the github we need to update an &lt;code&gt;adder/deps.edn&lt;/code&gt; file. &lt;code&gt;:git/sha&lt;/code&gt; value can be taken from github. It specifies revision of library you want to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:paths&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="no"&gt;:deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;io.github.YOUR-GITHUB-NAME/clojure-test-lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:git/sha&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"4c42a56d9dec002d5a198b61a5d8dcc30b69d3dc"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By contrast with referencing local libraries, here the library name is important. From that name the git url will be deducted for downloading the source code. List of possible library name formats can be found in the &lt;a href="https://clojure.org/reference/deps_and_cli#_coord_attributes"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now when we run the updated &lt;code&gt;adder&lt;/code&gt; app, we see the notification that our library was downloaded from git:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;adder
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-M&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; core 1 2 3
Cloning: https://github.com/YOUR-GITHUB-NAME/clojure-test-lib.git
Checking out: https://github.com/YOUR-GITHUB-NAME/clojure-test-lib.git at 4c42a56d9dec002d5a198b61a5d8dcc30b69d3dc
Args &lt;span class="nb"&gt;sum&lt;/span&gt;:  6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use tags to make referencing of particular library version easier. Let's create one by running commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;test-lib
&lt;span class="nv"&gt;$ &lt;/span&gt;git tag &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="s1"&gt;'v0.0.1'&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s1"&gt;'initial release'&lt;/span&gt; 
&lt;span class="nv"&gt;$ &lt;/span&gt;git push &lt;span class="nt"&gt;--tags&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;code&gt;adder/deps.edn&lt;/code&gt; can be extended with &lt;code&gt;:git/tag&lt;/code&gt; key referencing our newly created tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:paths&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="no"&gt;:deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;io.github.YOUR-GITHUB-NAME/clojure-test-lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:git/tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"v0.0.1"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:git/sha&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"4c42a5"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;:git/sha&lt;/code&gt; key still should exist but it can contain a brief version of &lt;code&gt;sha&lt;/code&gt; just to make sure that tag wasn't moved to other commit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#packaging-library-to-a-jar-file"&gt;
  &lt;/a&gt;
  Packaging library to a JAR file
&lt;/h2&gt;

&lt;p&gt;Not so long ago you had to use 3rd-party tools to build JAR for own Clojure library. But now official &lt;a href="https://github.com/clojure/tools.build"&gt;&lt;code&gt;tools.build&lt;/code&gt;&lt;/a&gt; can be used to create project artificats.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tools.build&lt;/code&gt; itself is a Clojure library and it provides API that allows developers to run build actions from Clojure code. &lt;strong&gt;It is the core idea of the project that building process should be also written in Clojure and build scripts are just Clojure scripts.&lt;/strong&gt;  Examples can be found in an &lt;a href="https://clojure.org/guides/tools_build"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's use &lt;code&gt;tools.build&lt;/code&gt; to create JAR for our &lt;code&gt;test-lib&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;First, we need to add build library to &lt;code&gt;test-lib/deps.edn&lt;/code&gt;. That file had empty map before and now should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:aliases&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;io.github.clojure/tools.build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:git/tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"v0.6.2"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:git/sha&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"226fb52"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="no"&gt;:ns-default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we created &lt;code&gt;build&lt;/code&gt; alias that uses dependency on &lt;code&gt;tools.build&lt;/code&gt; when invoked. That alias should be used as a tool, with &lt;code&gt;-T&lt;/code&gt; option when running &lt;code&gt;clj&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;By providing &lt;code&gt;:ns-default build&lt;/code&gt; we tell that all commands passed to this alias will be found in the &lt;code&gt;build&lt;/code&gt; namespace. So if we run &lt;code&gt;clj -T:build clean&lt;/code&gt;, the &lt;code&gt;(clean)&lt;/code&gt; function from &lt;code&gt;build.clj&lt;/code&gt; file will run.&lt;/p&gt;

&lt;p&gt;Now it is time to create the &lt;code&gt;build.clj&lt;/code&gt; file itself. It is placed in a root of &lt;code&gt;test-lib&lt;/code&gt; project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;playground
├── adder
│   └── ...
└── test-lib
    ├── build.clj      &amp;lt;---
    ├── deps.edn
    └── src
        └── basic_math.clj

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the content of &lt;code&gt;build.clj&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.tools.build.api&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'com.github.YOUR-GITHUB-NAME/clojure-test-lib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.0.%s"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;b/git-count-revs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class-dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"target/classes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;basis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;b/create-basis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"deps.edn"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jar-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"target/%s-%s.jar"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;b/delete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;b/write-pom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:class-dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class-dir&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="no"&gt;:lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="no"&gt;:version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="no"&gt;:basis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;basis&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="no"&gt;:src-dirs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;b/copy-dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:src-dirs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"resources"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
               &lt;/span&gt;&lt;span class="no"&gt;:target-dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class-dir&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;b/jar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:class-dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class-dir&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="no"&gt;:jar-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jar-file&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the top of the file we require an API from &lt;code&gt;tools.build&lt;/code&gt; library. Than go few declared vars:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;lib&lt;/code&gt; - fully qualified name of our library. &lt;strong&gt;Note&lt;/strong&gt;: here we used &lt;code&gt;com.github.YOUR-GITHUB-NAME&lt;/code&gt; as an organization part of the name. But you are free to use any, without mentioning github. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;version&lt;/code&gt; - lib's version. In this code versioning depends on amount of git commits made so far. So after every commit your version will bump.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;class-dir&lt;/code&gt; - folder were we put all files that will go to a JAR file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;basis&lt;/code&gt; - it is a clojure map with all project settings obtained from project &lt;code&gt;deps.edn&lt;/code&gt; and its parents. Probably the most important among them are classpath and dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;jar-file&lt;/code&gt; - name of result JAR file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two declared functions in a &lt;code&gt;build.clj&lt;/code&gt;. &lt;code&gt;(clean)&lt;/code&gt; removes our build directory. And &lt;code&gt;(jar)&lt;/code&gt; does the main work - fills the build directory with all required files and creates a JAR file with our library.&lt;/p&gt;

&lt;p&gt;There are 3 calls to the &lt;code&gt;tools.build&lt;/code&gt; inside the  &lt;code&gt;(jar)&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;(b/write-pom)&lt;/code&gt; - creates a &lt;code&gt;pom.xml&lt;/code&gt; file inside the build directory. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(b/copy-dir)&lt;/code&gt; - copies the source files and the resources (if we'd have any) to a build directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(b/jar)&lt;/code&gt; - packs the content of a build directory to a JAR file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now when everything is ready we can generate JAR file for our library with commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;test-lib
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build jar
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls &lt;/span&gt;target
classes                    clojure-test-lib-0.0.1.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our library now stored in &lt;code&gt;test-lib/target/clojure-test-lib-0.0.1.jar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets change &lt;code&gt;adder/deps.edn&lt;/code&gt; to use the library from the local jar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:paths&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="no"&gt;:deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;com.github.YOUR-GITHUB-NAME/clojure-test-lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:local/root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"../test-lib/target/clojure-test-lib-0.0.1.jar"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And run the &lt;code&gt;adder&lt;/code&gt; again to make sure everything works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;adder
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-M&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; core 1 2 3
Args &lt;span class="nb"&gt;sum&lt;/span&gt;:  6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-jar-to-local-maven-repo"&gt;
  &lt;/a&gt;
  Installing JAR to local Maven repo
&lt;/h2&gt;

&lt;p&gt;Now we have a JAR file but referencing it by relative path doesn't look nice. Ideally we'd like to have it in some remote Maven repo. But before lets install it in a local repo - &lt;code&gt;~/.m2/repository&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To do this we'll add a new function to the &lt;code&gt;test-lib/build.clj&lt;/code&gt; called &lt;code&gt;(install)&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="c1"&gt;; ... previous content of build.clj ...&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;b/install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:basis&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;basis&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:lib&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:version&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:jar-file&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;jar-file&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:class-dir&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;class-dir&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside our new function we call a function with the same name from the &lt;code&gt;tools.build&lt;/code&gt; library that does actual work. &lt;/p&gt;

&lt;p&gt;Now we can create and install JAR of our test library with commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;test-lib
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build clean
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build jar
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check that the library was added to the local repo we can inspect the local folder &lt;code&gt;~/.m2/repository/com/github/YOUR-GITHUB-NAME/clojure-test-lib/&lt;/code&gt;. There should be our JAR inside the folder for version &lt;code&gt;0.0.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;adder/deps.edn&lt;/code&gt; should be changed to use library from maven repo instead of local JAR:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:paths&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="no"&gt;:deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;com.github.YOUR-GITHUB-NAME/clojure-test-lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:mvn/version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's run &lt;code&gt;adder&lt;/code&gt; again to confirm that changes work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;adder
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-M&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; core 1 2 3
Args &lt;span class="nb"&gt;sum&lt;/span&gt;:  6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-jar-to-remote-repo"&gt;
  &lt;/a&gt;
  Installing JAR to remote repo
&lt;/h2&gt;

&lt;p&gt;Now it is a time to make our extremely useful library publicly available. We want to push it to the &lt;a href="https://clojars.org/"&gt;Clojars&lt;/a&gt;. As you probably already guessed, we are going to add a new function to &lt;code&gt;deps-edn/build.clj&lt;/code&gt; that will be responsible for this action. It will be named &lt;code&gt;(deploy)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Unfortunately the standard &lt;code&gt;tools.build&lt;/code&gt; library that we were using before doesn't provide functionality to deploy to Clojars. So we will use a 3rd-party library called &lt;a href="https://github.com/slipset/deps-deploy"&gt;&lt;code&gt;deps-deploy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's add it as another dependency of the &lt;code&gt;build&lt;/code&gt; alias in the &lt;code&gt;test-lib/deps.edn&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:aliases&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;io.github.clojure/tools.build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:git/tag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"v0.6.2"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:git/sha&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"226fb52"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
                 &lt;/span&gt;&lt;span class="n"&gt;slipset/deps-deploy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:mvn/version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"RELEASE"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="c1"&gt;; &amp;lt;-- new dependency&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="no"&gt;:ns-default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Changes to the &lt;code&gt;test-lib/build.clj&lt;/code&gt; add the new &lt;code&gt;(deploy)&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clojure.tools.build.api&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;deps-deploy.deps-deploy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;; &amp;lt;--- don't foget to add a new require&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;; ... previous content of build.clj ...&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;dd/deploy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:installer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:remote&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:artifact&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jar-file&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="no"&gt;:pom-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;b/pom-path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:class-dir&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;class-dir&lt;/span&gt;&lt;span class="p"&gt;})}))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, our &lt;code&gt;(deploy)&lt;/code&gt; function relies on the function with the same name from &lt;code&gt;deps-deploy&lt;/code&gt; package. Being invoked it will take the JAR file and &lt;code&gt;pom.xml&lt;/code&gt; and publish them to Clojars. &lt;code&gt;(b/pom-path)&lt;/code&gt; is a helper function from &lt;code&gt;tools.build&lt;/code&gt; that retuns path to the &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before you will be able to publish anything to the Clojars, you need to go to &lt;a href="https://clojars.org/"&gt;clojars.org&lt;/a&gt;, create an account there and add a "deploy token". It is used in a place of a password when deploying from the command line. &lt;/p&gt;

&lt;p&gt;When you've created an account and a deploy token, deploying the lib will be as simple as running our newly created build command with couple additionl environment variables set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;env &lt;/span&gt;&lt;span class="nv"&gt;CLOJARS_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;USER-NAME &lt;span class="nv"&gt;CLOJARS_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CLOJARS_XXXXXXXX clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;CLOJARS_USERNAME&lt;/code&gt; - your Clojars account name&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CLOJARS_PASSWORD&lt;/code&gt; - your created deploy token. &lt;strong&gt;Not a login password.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After executing previous command you should see the shell messages saying that *.jar and *.pom were successfully uploaded to Clojars. Also you will see a new library on the Clojars dashboard.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;adder/deps.edn&lt;/code&gt; doesn't need to be changed, because the way we reference &lt;code&gt;test-lib&lt;/code&gt; dependency is the same for local and remote Maven repos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modifying-library-to-be-suitable-for-clojurescript"&gt;
  &lt;/a&gt;
  Modifying library to be suitable for ClojureScript
&lt;/h2&gt;

&lt;p&gt;Our &lt;code&gt;test-lib&lt;/code&gt; contains pure Clojure code and doesn't depend on anything Java-specific, so it would be nice to make it available for ClojureScript as well.&lt;/p&gt;

&lt;p&gt;At first, let's create a simple ClojureScript project called &lt;code&gt;adder-cljs&lt;/code&gt; and try to use &lt;code&gt;test-lib&lt;/code&gt; as is.&lt;/p&gt;

&lt;p&gt;Here is a structure of the new project created in the &lt;code&gt;playground&lt;/code&gt; folder on the same level as the already existing &lt;code&gt;adder&lt;/code&gt; and &lt;code&gt;test-lib&lt;/code&gt; projects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adder-cljs
├── deps.edn
└── src
    └── core.cljs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;core.cljs&lt;/code&gt; implements the same logic that we had before in the &lt;code&gt;adder/src/core.clj&lt;/code&gt;. The only difference is that we use the &lt;code&gt;js/parseInt&lt;/code&gt; for turning arguments to integers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;basic-math&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;-main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;println&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Args sum: "&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;basic-math/sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;js/parseInt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;adder-cljs/deps.edn&lt;/code&gt; contains dependencies for ClojureScript itself and our &lt;code&gt;test-lib&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;org.clojure/clojurescript&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:mvn/version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"1.10.879"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;com.github.YOUR-GITHUB-NAME/clojure-test-lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:mvn/version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Command for running the script from a terminal will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-M&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; cljs.main &lt;span class="nt"&gt;-re&lt;/span&gt; node &lt;span class="nt"&gt;-m&lt;/span&gt; core 1 2 3  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as a result we will get an exception:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Unexpected error &lt;span class="o"&gt;(&lt;/span&gt;ExceptionInfo&lt;span class="o"&gt;)&lt;/span&gt; compiling at &lt;span class="o"&gt;(&lt;/span&gt;REPL:1&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
No such namespace: basic-math, could not locate basic_math.cljs, basic_math.cljc, or JavaScript &lt;span class="nb"&gt;source &lt;/span&gt;providing &lt;span class="s2"&gt;"basic-math"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Please check that namespaces with dashes use underscores &lt;span class="k"&gt;in &lt;/span&gt;the ClojureScript file name&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in &lt;/span&gt;file core.cljs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It says that &lt;code&gt;basic-math&lt;/code&gt; can't be found because it is not in a &lt;em&gt;.cljs or *.cljc file. As we remember &lt;code&gt;test_lib&lt;/code&gt; keeps this namespace in the &lt;code&gt;basic_math.clj&lt;/code&gt;. **Fortunately the only change we need to make clojure code usable from both Clojure and ClojureScript is simply store it in *.cljc file.&lt;/em&gt;* More sophisticated libraries can also use "reader conditionals" to add the Clojure- or ClojureScript-specific expressions to the code. More info can be found in the &lt;a href="https://clojure.org/guides/reader_conditionals"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let's rename &lt;code&gt;test-lib/src/basic_math.clj&lt;/code&gt; to &lt;code&gt;test-lib/src/basic_math.cljc&lt;/code&gt; and publish a new version of the library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;test-lib
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mv &lt;/span&gt;src/basic_math.clj src/basic_math.cljc
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"make library usable for ClojureScript"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build clean
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build jar
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;env &lt;/span&gt;&lt;span class="nv"&gt;CLOJARS_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;USER-NAME &lt;span class="nv"&gt;CLOJARS_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CLOJARS_XXXXXXXX clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you remember, &lt;code&gt;build.clj&lt;/code&gt; file of our library uses commits count for changing version name. This is why we've made a commit here before deploying the library.&lt;/p&gt;

&lt;p&gt;As a result, version &lt;code&gt;0.0.2&lt;/code&gt; of our library now should be pushed to the Clojars.&lt;/p&gt;

&lt;p&gt;To use it let's change &lt;code&gt;adder-cljs/deps.edn&lt;/code&gt; and bump library version there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:deps&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;org.clojure/clojurescript&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:mvn/version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"1.10.879"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;com.github.YOUR-GITHUB-NAME/clojure-test-lib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;:mvn/version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"0.0.2"&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;; !!!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And run &lt;code&gt;adder-cljs&lt;/code&gt; again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-M&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; cljs.main &lt;span class="nt"&gt;-re&lt;/span&gt; node &lt;span class="nt"&gt;-m&lt;/span&gt; core 1 2 3
Args &lt;span class="nb"&gt;sum&lt;/span&gt;:  6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-pomxml-to-library-root"&gt;
  &lt;/a&gt;
  Adding pom.xml to library root
&lt;/h2&gt;

&lt;p&gt;Up to now the  &lt;code&gt;pom.xml&lt;/code&gt; file for our library was generated automatically by a call to the &lt;code&gt;(write-pom)&lt;/code&gt; function in the &lt;code&gt;test-lib/build.clj&lt;/code&gt; and stored in the temporary &lt;code&gt;target&lt;/code&gt; folder. Drawback of this is that we can't add any persistent changes to this file because they will be wiped out when &lt;code&gt;clj -T:bulid clean&lt;/code&gt; invoked.  But fortunately &lt;code&gt;(write-pom)&lt;/code&gt; is clever enough and if you have some &lt;code&gt;pom.xml&lt;/code&gt; file in the root of the project, it will be taken as a basis and merged with a generated one.&lt;/p&gt;

&lt;p&gt;Let's use this feature to add a description and a homepage url to our library so they can be seen on the Clojars page.&lt;/p&gt;

&lt;p&gt;First, let's go to the &lt;code&gt;test-lib&lt;/code&gt; directory and copy an already generated &lt;code&gt;pom.xml&lt;/code&gt; to the root of a project for future modification:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;test-lib
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp &lt;/span&gt;target/classes/META-INF/maven/com.github.YOUR-GITHUB-NAME/clojure-test-lib/pom.xml &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to modify the new &lt;code&gt;pom.xml&lt;/code&gt;. We want to replace the actual version of the library with "VERSION" placeholder just to avoid future confusion. Also the &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; fields need to be added. Here is an updated content of the &lt;code&gt;pom.xml&lt;/code&gt;, slightly truncated for readability:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://maven.apache.org/POM/4.0.0"&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt; &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class="nt"&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span class="nt"&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.github.YOUR-GITHUB-NAME&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;clojure-test-lib&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;VERSION&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;                                               &lt;span class="c"&gt;&amp;lt;!-- changed --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;clojure-test-lib&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Test library for article on Clojure libraries&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- added --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://github.com/YOUR-GITHUB-NAME/clojure-test-lib&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;          &lt;span class="c"&gt;&amp;lt;!-- added --&amp;gt;&lt;/span&gt;
  .....
&lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now let's commit these changes and push the updated library to the Clojars:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;test-lib
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Added root pom.xml with description and homepage url"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build clean
&lt;span class="nv"&gt;$ &lt;/span&gt;clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build jar
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;env &lt;/span&gt;&lt;span class="nv"&gt;CLOJARS_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;USER-NAME &lt;span class="nv"&gt;CLOJARS_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;CLOJARS_XXXXXXXX clj &lt;span class="nt"&gt;-T&lt;/span&gt;:build deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when we go to Clojars, on the page of our library we can see that the version number was bumped, description added and there is a link to our homepage. That means that the &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; fields of root &lt;code&gt;pom.xml&lt;/code&gt; were successfully used and merged with the generated fields like &lt;code&gt;version&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-library-project-with-raw-cljnew-endraw-"&gt;
  &lt;/a&gt;
  Creating library project with &lt;code&gt;clj-new&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;So far to setup the &lt;code&gt;test-lib&lt;/code&gt; project we've made the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;added dependencies for &lt;code&gt;tools.build&lt;/code&gt; and &lt;code&gt;deps-deploy&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;created the &lt;code&gt;build.clj&lt;/code&gt;  with own build commands&lt;/li&gt;
&lt;li&gt;added the root &lt;code&gt;pom.xml&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These steps aren't unique for the &lt;code&gt;test-lib&lt;/code&gt; and you'll need to repeat them again when creating another libraries. Fortunately, there is a project called  &lt;a href="https://github.com/seancorfield/clj-new"&gt;&lt;code&gt;clj-new&lt;/code&gt;&lt;/a&gt; that will save you from doing similar work again and again.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;clj-new&lt;/code&gt; you can generate a project template that already equipped with all the features we've discussed and even more.&lt;/p&gt;

&lt;p&gt;Here we'll cover the basic steps to create a library with &lt;code&gt;clj-new&lt;/code&gt; but please go and read the &lt;a href="https://github.com/seancorfield/clj-new"&gt;official docs&lt;/a&gt; for the detailed instructions and up to date version of the library. &lt;/p&gt;

&lt;p&gt;First, we need to install the &lt;code&gt;clj-new&lt;/code&gt; as a tool to make it available for use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;clojure &lt;span class="nt"&gt;-Ttools&lt;/span&gt; &lt;span class="nb"&gt;install &lt;/span&gt;com.github.seancorfield/clj-new &lt;span class="s1"&gt;'{:git/tag "v1.2.362"}'&lt;/span&gt; :as clj-new
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, to create a library we need to run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;clojure &lt;span class="nt"&gt;-Tclj-new&lt;/span&gt; lib :name com.github.YOUR-GITHUB-NAME/clojure-test-lib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we'll get the library template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clojure-test-lib
├── CHANGELOG.md
├── LICENSE
├── README.md
├── build.clj
├── deps.edn
├── doc
│   └── intro.md
├── pom.xml
├── resources
├── src
│   └── YOUR-GITHUB-NAME
│       └── clojure_test_lib.clj
└── test
    └── YOUR-GITHUB-NAME
        └── clojure_test_lib_test.clj
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please take a look at &lt;code&gt;build.clj&lt;/code&gt; file that contains available build commands. Note, that the command for creating a JAR file called here &lt;code&gt;ci&lt;/code&gt; (which stands for "continuous integration"), because it doesn't only create a JAR but also runs tests. &lt;/p&gt;

&lt;p&gt;Also please read the &lt;code&gt;README.md&lt;/code&gt; file. It has the examples of the build commands and an important note that you have to fix the existing test to get a successfull build ;)&lt;/p&gt;

</description>
      <category>clojure</category>
      <category>library</category>
      <category>clojars</category>
      <category>maven</category>
    </item>
    <item>
      <title>Binomial Distribution and Case studies</title>
      <author>Ambarish Ganguly</author>
      <pubDate>Sun, 31 Oct 2021 18:39:04 +0000</pubDate>
      <link>https://dev.to/ambarishg/binomial-distribution-and-case-studies-md3</link>
      <guid>https://dev.to/ambarishg/binomial-distribution-and-case-studies-md3</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Mti755NyFNc"&gt;
&lt;/iframe&gt;
            &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yyqoggEqMG8"&gt;
&lt;/iframe&gt;
           &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wYY52gc-QFc"&gt;
&lt;/iframe&gt;
  &lt;/p&gt;

</description>
      <category>statistics</category>
    </item>
    <item>
      <title>Using KEDA and Prometheus to auto-scale your k8s workloads</title>
      <author>Djamaile</author>
      <pubDate>Sun, 31 Oct 2021 18:30:09 +0000</pubDate>
      <link>https://dev.to/djamaile/using-keda-and-prometheus-to-auto-scale-your-k8s-workloads-57e6</link>
      <guid>https://dev.to/djamaile/using-keda-and-prometheus-to-auto-scale-your-k8s-workloads-57e6</guid>
      <description>&lt;p&gt;These days, everyone and their grandma are using Kubernetes and one important&lt;br&gt;
aspect of Kubernetes is scaling your workloads. With KEDA, it is extremely&lt;br&gt;
simple to scale your workloads! Let’s have a look.&lt;/p&gt;

&lt;p&gt;repository: &lt;a href="https://github.com/djamaile/keda-demo"&gt;https://github.com/djamaile/keda-demo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Straight from the website of &lt;a href="https://keda.sh"&gt;KEDA&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;KEDA is a Kubernetes-based Event Driven&lt;br&gt;
Autoscaler. With KEDA, you can drive the scaling of any container in Kubernetes&lt;br&gt;
based on the number of events needing to be processed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;KEDA provides many 'triggers' on which your application can scale on. For&lt;br&gt;
example, Prometheus, PubSub, Postgres and many more. In this blog post we will&lt;br&gt;
focus on Prometheus.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#starting-up"&gt;
  &lt;/a&gt;
  Starting up
&lt;/h3&gt;

&lt;p&gt;First let's spin up a cluster! I am using &lt;a href="https://kind.sigs.k8s.io/"&gt;kind&lt;/a&gt; but&lt;br&gt;
you are free to use minikube if you prefer that :).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kind create cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Create the namespace&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl create ns keda-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Switch to the namespace&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl config set-context &lt;span class="nt"&gt;--current&lt;/span&gt; &lt;span class="nt"&gt;--namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keda-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the cluster is spun up, we can start deploying our Prometheus. For this, I&lt;br&gt;
have already written a prometheus manifest so you won’t have to do it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;prometheus.yaml&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterRole&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus&lt;/span&gt;
&lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;apiGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;services&lt;/span&gt;
    &lt;span class="na"&gt;verbs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;get"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;list"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;watch"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;nonResourceURLs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/metrics"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;verbs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;get"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ServiceAccount&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keda-demo&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterRoleBinding&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus&lt;/span&gt;
&lt;span class="na"&gt;roleRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;apiGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rbac.authorization.k8s.io&lt;/span&gt;
  &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterRole&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus&lt;/span&gt;
&lt;span class="na"&gt;subjects&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ServiceAccount&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keda-demo&lt;/span&gt;
    &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keda-demo&lt;/span&gt;
&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom-conf&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom-conf&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;prometheus.yml&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|-&lt;/span&gt;
    &lt;span class="s"&gt;global:&lt;/span&gt;
      &lt;span class="s"&gt;scrape_interval: 5s&lt;/span&gt;
      &lt;span class="s"&gt;evaluation_interval: 5s&lt;/span&gt;
    &lt;span class="s"&gt;scrape_configs:&lt;/span&gt;
      &lt;span class="s"&gt;- job_name: 'go-prom-job'&lt;/span&gt;
        &lt;span class="s"&gt;kubernetes_sd_configs:&lt;/span&gt;
        &lt;span class="s"&gt;- role: service&lt;/span&gt;
        &lt;span class="s"&gt;relabel_configs:&lt;/span&gt;
        &lt;span class="s"&gt;- source_labels: [__meta_kubernetes_service_label_run]&lt;/span&gt;
          &lt;span class="s"&gt;regex: go-prom-app-service&lt;/span&gt;
          &lt;span class="s"&gt;action: keep&lt;/span&gt;
&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-deployment&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;replicas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-server&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-server&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;serviceAccountName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keda-demo&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom/prometheus&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--config.file=/etc/prometheus/prometheus.yml"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--storage.tsdb.path=/prometheus/"&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9090&lt;/span&gt;
          &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-config-volume&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/etc/prometheus/&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-storage-volume&lt;/span&gt;
              &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/prometheus/&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-config-volume&lt;/span&gt;
          &lt;span class="na"&gt;configMap&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;defaultMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;420&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom-conf&lt;/span&gt;

        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-storage-volume&lt;/span&gt;
          &lt;span class="na"&gt;emptyDir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-service&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9090&lt;/span&gt;
      &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Prometheus manifest is really simple. Just a Prometheus workload with a&lt;br&gt;
clusterrole and a clusterrolebinding. Don't forget to apply the manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; prometheus.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the pod is up and running, let's see if it also works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl port-forward svc/prometheus-service 9090
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now visit &lt;code&gt;http://localhost:9090&lt;/code&gt; and you should see the user interface of&lt;br&gt;
Prometheus.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-keda"&gt;
  &lt;/a&gt;
  Deploying Keda
&lt;/h3&gt;

&lt;p&gt;We can now deploy the KEDA operator. KEDA provides multiple ways to deploy their&lt;br&gt;
operator, but for now we will use the k8s manifest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://github.com/kedacore/keda/releases/download/v2.4.0/keda-2.4.0.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now there should be two pods in the namespace &lt;code&gt;keda&lt;/code&gt; you can check it with the&lt;br&gt;
following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods &lt;span class="nt"&gt;-n&lt;/span&gt; keda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see there are two pods being spinned up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;on 🤠 kind-kind &lt;span class="o"&gt;(&lt;/span&gt;keda&lt;span class="o"&gt;)&lt;/span&gt; Desktop/projects/keda-prometheus ☁️  default
🕙[ 07:35:40 &lt;span class="o"&gt;]&lt;/span&gt; ❯ kubectl get pods                                                         335ms
NAME                                      READY   STATUS              RESTARTS   AGE
keda-metrics-apiserver-66b8c68649-2mwf8   0/1     ContainerCreating   0          5s
keda-operator-574c6d4769-q9mlc            0/1     ContainerCreating   0          5s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The metrics-apiserver exposes data to the Horizontal Pod Autoscaler, which gets&lt;br&gt;
consumed by a deployment. The operator pod activates Kubernetes deployments to&lt;br&gt;
scale to and from zero on no events.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-the-application-optional"&gt;
  &lt;/a&gt;
  Creating the application (Optional)
&lt;/h3&gt;

&lt;p&gt;The application is a simple go application that increments the metric&lt;br&gt;
&lt;code&gt;http_requests&lt;/code&gt; when you visit it. This section is optional because you are also&lt;br&gt;
free to use my docker image.&lt;/p&gt;

&lt;p&gt;in your folder execute the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go mod init github.com/djamaile/keda-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in your &lt;code&gt;main.go&lt;/code&gt; you can put in the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/prometheus/client_golang/prometheus"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/prometheus/client_golang/prometheus/promhttp"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Labels&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;httpRequestsCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prometheus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prometheus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CounterOpts&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"http_requests"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Help&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"number of http requests"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Metrics have to be registered to be exposed:&lt;/span&gt;
    &lt;span class="n"&gt;prometheus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustRegister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpRequestsCounter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/metrics"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;promhttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;httpRequestsCounter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Inc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hello, you've requested: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now build the go application with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go mod tidy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's then make a simple &lt;code&gt;Dockerfile&lt;/code&gt; for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; golang as build-stage&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.mod /&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; go.sum /&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; main.go /&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; / &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;CGO_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux go build &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-installsuffix&lt;/span&gt; cgo &lt;span class="nt"&gt;-o&lt;/span&gt; go-prom-app

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build-stage /go-prom-app /&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/go-prom-app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Only thing left is to build and push the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; &amp;lt;your_username&amp;gt;/keda &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker push &amp;lt;your_username&amp;gt;/keda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#running-the-application"&gt;
  &lt;/a&gt;
  Running the application
&lt;/h3&gt;

&lt;p&gt;If you don’t have a Docker account or don’t want to use it, that’s fine. You can&lt;br&gt;
use my docker image! Let’s get our go application running in our cluster, for&lt;br&gt;
that we need some k8s manifests. Not to worry because I already wrote them:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;go-deployment.yaml&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;go-prom-app&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keda-demo&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;go-prom-app&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;go-prom-app&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;go-prom-app&lt;/span&gt;
          &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;djam97/keda&lt;/span&gt;
          &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Always&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;go-prom-app-service&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keda-demo&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;go-prom-app-service&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
      &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;go-prom-app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can replace the image name with your own image if you prefer that.&lt;br&gt;
Let's apply the manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; go-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the pod is up verify if it is working&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl port-forward svc/go-prom-app-service 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you visit &lt;code&gt;http://localhost:8080&lt;/code&gt; you should see &lt;code&gt;Hello, you've requested: /&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scaling-the-application"&gt;
  &lt;/a&gt;
  Scaling the application
&lt;/h3&gt;

&lt;p&gt;Now that we have our go application up we can write a manifest that will scale&lt;br&gt;
our application. Keda offers many triggers that can scale our application, but&lt;br&gt;
of course we will use the &lt;a href="https://keda.sh/docs/2.4/scalers/prometheus/"&gt;Prometheus&lt;br&gt;
trigger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a new file called scaled-object.yaml add the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keda.sh/v1alpha1&lt;/span&gt;
&lt;span class="c1"&gt;# Custom CRD provisioned by the Keda operator&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ScaledObject&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus-scaledobject&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;scaleTargetRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# target our deployment&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;go-prom-app&lt;/span&gt;
  &lt;span class="c1"&gt;# Interval to when to query Prometheus&lt;/span&gt;
  &lt;span class="na"&gt;pollingInterval&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;
  &lt;span class="c1"&gt;# The period to wait after the last trigger reported active&lt;/span&gt;
  &lt;span class="c1"&gt;# before scaling the deployment back to 1&lt;/span&gt;
  &lt;span class="na"&gt;cooldownPeriod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
  &lt;span class="c1"&gt;# min replicas keda will scale to&lt;/span&gt;
  &lt;span class="c1"&gt;# if you have an app that has an dependency on pubsub&lt;/span&gt;
  &lt;span class="c1"&gt;# this would be a good use case to set it to zero&lt;/span&gt;
  &lt;span class="c1"&gt;# why keep your app running if your topic has no messages?&lt;/span&gt;
  &lt;span class="na"&gt;minReplicaCount&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="c1"&gt;# max replicas keda will scale to&lt;/span&gt;
  &lt;span class="na"&gt;maxReplicaCount&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
  &lt;span class="na"&gt;advanced&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# HPA config&lt;/span&gt;
    &lt;span class="c1"&gt;# Read about it here: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&lt;/span&gt;
    &lt;span class="na"&gt;horizontalPodAutoscalerConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;scaleDown&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;stabilizationWindowSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
          &lt;span class="na"&gt;policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Percent&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;
              &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
        &lt;span class="na"&gt;scaleUp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;stabilizationWindowSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
          &lt;span class="na"&gt;policies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Percent&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;
              &lt;span class="na"&gt;periodSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
  &lt;span class="na"&gt;triggers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prometheus&lt;/span&gt;
      &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# address where keda can reach our prometheus on&lt;/span&gt;
        &lt;span class="na"&gt;serverAddress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://prometheus-service.keda-demo.svc.cluster.local:9090&lt;/span&gt;
        &lt;span class="c1"&gt;# metric on what we want to scale&lt;/span&gt;
        &lt;span class="na"&gt;metricName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http_requests_total&lt;/span&gt;
        &lt;span class="c1"&gt;# if treshold is reached then Keda will scale our deployment&lt;/span&gt;
        &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;100"&lt;/span&gt;
        &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sum(rate(http_requests[1m]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read the yaml manifest and it’s comments to understand what is going on. One&lt;br&gt;
important note as well is in&lt;br&gt;
&lt;code&gt;advanced.horizontalPodAutoscalerConfig.scaleUp.policies&lt;/code&gt; you can see I have&lt;br&gt;
specified 50%, that means our pod will scale up with 50% of it’s current amount&lt;br&gt;
of pods. &lt;code&gt;1 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 5 -&amp;gt; 8 -&amp;gt; 12 -&amp;gt; 18 -&amp;gt; 20&lt;/code&gt; it will stop at 20 pods because&lt;br&gt;
that is the limit we specified.&lt;/p&gt;

&lt;p&gt;Let's apply the manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; scaled-object.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will provision an HPA in your namespace which you can check with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get hpa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but because this is a custom CRD you can also query the custom CRD wuth kubectl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get scaledobject.keda.sh/prometheus-scaledobject

NAME                      SCALETARGETKIND      SCALETARGETNAME   MIN   MAX   TRIGGERS     AUTHENTICATION   READY   ACTIVE   FALLBACK   AGE
prometheus-scaledobject   apps/v1.Deployment   go-prom-app       1     20    prometheus                    True    False    False      64s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that our &lt;code&gt;prometheus-scaledobject&lt;/code&gt; is ready so let’s scale our&lt;br&gt;
application! Remember our application scales on the metric&lt;br&gt;
&lt;code&gt;http_requests_total&lt;/code&gt;&lt;br&gt;
and our threshold is only 100 so we should be able reach that threshold. For&lt;br&gt;
this we can use a simple tool called &lt;a href="https://github.com/rakyll/hey"&gt;hey&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Run the application&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl port-forward svc/go-prom-app-service 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;In another terminal watch the pods&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; keda-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Put load on the application (Do this continuously, until there are 20 pods)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hey &lt;span class="nt"&gt;-n&lt;/span&gt; 10000 &lt;span class="nt"&gt;-m&lt;/span&gt; GET http://localhost:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can take a minute before the application actually starts scaling. After a&lt;br&gt;
while you should have 20 pods up and running! Now let’s also look at the scale&lt;br&gt;
down process. Stop putting load on the application and let’s just watch the&lt;br&gt;
pods. This process should go from &lt;code&gt;20 -&amp;gt; 10 -&amp;gt; 5 - &amp;gt; 2 -&amp;gt; 1&lt;/code&gt;. This is basically&lt;br&gt;
how KEDA goes to work!&lt;/p&gt;

&lt;p&gt;If you like KEDA please check out their docs for more examples and what type of&lt;br&gt;
different triggers they provide. Happy auto-scaling!&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>keda</category>
      <category>prometheus</category>
    </item>
    <item>
      <title>The Difference Between Web Scraping vs Web Crawling</title>
      <author>Stefan Smiljkovic</author>
      <pubDate>Sun, 31 Oct 2021 18:08:46 +0000</pubDate>
      <link>https://dev.to/shtefcs/the-difference-between-web-scraping-vs-web-crawling-5eo6</link>
      <guid>https://dev.to/shtefcs/the-difference-between-web-scraping-vs-web-crawling-5eo6</guid>
      <description>&lt;p&gt;People sometimes wrongly use the terms web scraping and web crawling synonymously. Although they’re closely related, they’re different actions that need proper delineation — at least, so you can know which one is ideal for your needs at a certain point in time. And understand what the differences are.&lt;/p&gt;

&lt;p&gt;So starting with web scraping, let’s dive into the nitty-gritty of each of these two web actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-scrape-the-web"&gt;
  &lt;/a&gt;
  Why Scrape the Web?
&lt;/h2&gt;

&lt;p&gt;With millions of information getting scraped daily, data scraping is now a part of the new internet trend. Despite this, &lt;a href="https://www.statista.com/statistics/871513/worldwide-data-created/"&gt;Statista&lt;/a&gt; still estimated the amount of data generated on the internet in 2020 alone to be 64.2 zettabytes. It then projected that this value would’ve increased by more than 179 percent by 2025.&lt;/p&gt;

&lt;p&gt;Big organizations and individuals have used the data available on the web for purposes including, but not limited to: predictive marketing, stock price prediction, sales forecasting, competitive monitoring, and more. With these applications, it’s glaring that data is a driver of growth for many businesses today.&lt;/p&gt;

&lt;p&gt;Additionally, with the world now drifting more towards automation, data-driven machines are now springing up. These machines, as accurate as they are, feed on data using machine learning technology. A strict rule of machine learning requires that an algorithm learns patterns from big data over time. Thus, it probably would’ve been impossible to train machines without data. Nonetheless, images, texts, videos, and products on e-commerce websites are all valuable information that drives the world of artificial intelligence.&lt;/p&gt;

&lt;p&gt;It’s, therefore not far-fetched, why existing companies, start-ups, and individuals resort to the web to gather as much information as they can. Ultimately, it means in today’s business world, the more data you have, the more likely you are to be ahead of your competitors. Thus, web scraping becomes essential.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-web-scraping"&gt;
  &lt;/a&gt;
  What Is Web Scraping?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBDJu90Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2A4UbNnQ_jmeQ_q4xN.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBDJu90Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2A4UbNnQ_jmeQ_q4xN.jpg" alt="What Is Web Scraping?" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web scraping, as it sounds, is an act of extracting or sweeping off information from the web. Regardless of the target data, web scraping may be automated using scripted languages and &lt;a href="https://automatio.co/blog/no-code-web-scrapers-ultimate-list/"&gt;dedicated scraping tools&lt;/a&gt; or done manually via copying and pasting. Manual web scraping, of course, isn’t practical. And while writing a scraping script might help, it can be costly and technical as you might need to hire a programmer for it.&lt;/p&gt;

&lt;p&gt;However, using automatic no-code web scraping tools makes the process easy and faster without shedding huge bucks. &lt;a href="https://automatio.co/"&gt;Automatio&lt;/a&gt;, for instance, in addition to its versatile automation toolset, also offers a reliable, flexible, fast, and efficient out-of-the-box no-code tool for scraping any website. So it lets you get as much data as you want, and you can design your scraping bot in no time without writing a single line of code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-web-scrapers-work"&gt;
  &lt;/a&gt;
  How Do Web Scrapers Work?
&lt;/h2&gt;

&lt;p&gt;Web scrapers use the hypertext transfer protocol (HTTP) to request data from a web page using the get method. On most occasions, once it receives a valid response from the web page, a scraper collects updated content from the client side. It does so by attaching itself to specific HTML tags containing readily updated target data.&lt;/p&gt;

&lt;p&gt;There are many methods of web scraping, though. For instance, a scraping bot can evolve to request data directly from another website’s database. Thus, getting real-time updated content from the provider’s server. This type of request to another database from a data scraper usually requires that the website offering the data provides an application programming interface (API), which uses defined authentication protocols to connect the scraper to its database.&lt;/p&gt;

&lt;p&gt;Web scrapers created using Python, for instance, may use the &lt;strong&gt;request.get&lt;/strong&gt; method to retrieve data from a source or use dedicated web scraping libraries like &lt;strong&gt;BeautifulSoup&lt;/strong&gt; to gather rendered content from a web page. Those built using JavaScript typically depend on &lt;strong&gt;fetch&lt;/strong&gt; or &lt;strong&gt;Axios&lt;/strong&gt; to connect and get data from a source.&lt;/p&gt;

&lt;p&gt;After getting the data, scrapers often dump collected information into a dedicated database, a JSON object, a text file, or an excel file. And because of the inconsistencies in the gathered information, data cleaning often follows scraping.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-scraping-methods"&gt;
  &lt;/a&gt;
  Web Scraping Methods
&lt;/h2&gt;

&lt;p&gt;Whether you use third-party automated tools or code from scratch, web scraping involves any or a combination of these methods:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DOM or tag parsing&lt;/strong&gt;: DOM parsing involves client-side inspection of a webpage to create an in-depth DOM tree that shows all nodes. Thus, making it easy to retrieve related data from a webpage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tag grabbing&lt;/strong&gt;: Here, a web scraper targets specific tags on a web page and collects their content. For example, an e-commerce scraper might collect content in all &lt;strong&gt;h2&lt;/strong&gt; tags because they contain product names and reviews.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;HTTP API requests&lt;/strong&gt;: This involves connecting to a data source using an API. It’s helpful when the goal is to retrieve updated content from a database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use of semantic or metadata annotation&lt;/strong&gt;: This method leverages the relationship between a group of data called metadata to extract information in a trendy fashion. For instance, you might decide to retrieve information relating to animals and countries from a web page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Unix text gripping&lt;/strong&gt;: Text gripping uses standard Unix regex to grab matching data from a large log of files or a web page.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-web-crawling-and-how-does-it-work"&gt;
  &lt;/a&gt;
  What Is Web Crawling and How Does it Work?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83fVUkny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3800/0%2AEdvxkDWTWp3G8j1m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83fVUkny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3800/0%2AEdvxkDWTWp3G8j1m.jpg" alt="What Is Web Crawling and How Does it Work?" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While a crawler or a spider bot might download a website’s content in the process of crawling it, scraping isn’t its ultimate goal. A web crawler typically scans the information on a website to check specific metrics. Ultimately it learns about a website’s structure and what it’s all about.&lt;/p&gt;

&lt;p&gt;A crawler works by collecting Unique Resource Locators (URLs) belonging to many web pages into a crawl frontier. It then uses a site downloader to retrieve content, including the entire DOM structure, to create replicas of browsed web pages. It then stores these into a database, where they can be accessed as a list of relevant results when queried.&lt;/p&gt;

&lt;p&gt;Thus, a web crawler is a programmed software that serially and rapidly surfs the internet for content and organizes them to display relevant ones upon request.&lt;/p&gt;

&lt;p&gt;Some crawlers like Google and Bing bots, for instance, rank content based on many factors. A notable ranking factor is the use of naturally occurring keywords in a website’s content. You can view this as a seller collecting different items from a wholesale store, arranging them in order of importance, and providing the most relevant to buyers on request. Invariably, a crawling bot typically branches into related external links it finds while crawling a website. It then crawls and indexes them as well.&lt;/p&gt;

&lt;p&gt;There are many crawlers out there besides Google and Bing bots, though. And many of them also offer specific services besides indexing.&lt;/p&gt;

&lt;p&gt;Unlike a web scraper, a crawling bot surfs the web continuously. In essence, it’s automatically triggered. It then gathers real-time content from many websites as they get updated on the client side. Moving across a website, they recognize and pick up all crawlable links to assess scripts, HTML tags, and metadata on all its pages, except for those restricted by one means or another. Sometimes, spider bots leverage site maps to achieve the same purpose. Websites with sitemaps are, however, faster to crawl than those without one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applications-of-web-crawling"&gt;
  &lt;/a&gt;
  Applications of Web Crawling
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLYmu6bk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3804/0%2A4zOq1GFbBnjpDPSo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLYmu6bk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3804/0%2A4zOq1GFbBnjpDPSo.jpg" alt="Applications of Web Crawling" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike web scraping, web crawling has more applications ranging from Search Engine Optimization (SEO) analytics to search engine indexing, general performance monitoring, and more. And part of its applications may also include scraping a web page.&lt;/p&gt;

&lt;p&gt;While you might manually scrape the web slowly, you can’t crawl it all by yourself, as it requires faster and more accurate bots; this is why they sometimes call crawlers spider bots.&lt;/p&gt;

&lt;p&gt;After creating and launching your website, for instance, Google’s crawling algorithm automatically crawls it within few days to display semantics like meta tags, header tags, and relevant content when people search for it.&lt;/p&gt;

&lt;p&gt;As earlier highlighted, depending on its goal, a spider bot might crawl your website to extract its data, index it in search engines, audit its security, compare it with competitors’ content, or analyze its SEO compliance. But despite its positives, like web scrapers, we can’t sweep the possible malicious use of crawlers under the hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-web-crawlers"&gt;
  &lt;/a&gt;
  Types of Web Crawlers
&lt;/h2&gt;

&lt;p&gt;Based on their applications, crawling bots come in various forms. Here is a list of the different types and what they do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content-focused web crawlers:&lt;/strong&gt; These types of spider bots collect related content across the web. Ultimately, they work by ranking URLs of related websites based on how relevant their content is to a search term. Because they focus on retrieving more niche-related content, an advantage of content or topical crawling bots is that they use fewer resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;In-house crawlers:&lt;/strong&gt; Some organizations build in-house crawlers for specific purposes. These could include spider bots made for checking software vulnerabilities. The onus of managing them is often on the programmers who’re familiar with the architecture of the organization’s software.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Continuous web crawlers:&lt;/strong&gt; Also called an incremental spider bot. A progressive crawler browses websites’ content repeatedly as it gets updated. The crawling may be scheduled or random, depending on specific settings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Synergetic or distributed crawling bots:&lt;/strong&gt; Distributed bots aim to optimize the tedious crawling activities that may be overwhelming when using a single bot. Invariably, they work together towards the same goal. So they efficiently fragment the crawling workload. Thus, they’re generally faster and more efficient than traditional ones.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Monitoring bots:&lt;/strong&gt; Whether a source authorizes them or not, these crawlers use unique algorithms to spy on competitors’ content and traffic. Even if they don’t impede the functioning of the website they monitor, they might start drawing traffic away from other websites into the bot’s source. While people sometimes use them this way, their positive uses outweigh their downsides. For instance, some organizations use them in-house to discover potential loopholes in their software or improve SEO.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Parallel spider bots:&lt;/strong&gt; Although they’re also distributed, parallel crawlers only surf and download fresh content. Nevertheless, they may ignore a website if it’s not regularly updated or contains old content.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#key-differences-between-web-crawlers-and-web-scrapers"&gt;
  &lt;/a&gt;
  Key Differences Between Web Crawlers and Web Scrapers
&lt;/h2&gt;

&lt;p&gt;To narrow the explanations down, here are the notable differences between scraping and crawling:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Unlike web crawlers, scrapers don’t necessarily need to follow the pattern of downloading data into a database. It may write it into other file types.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web crawlers are more generic and may include web scraping in their workflow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scraping bots target specific web pages and content. So they may not collect data at once from multiple sources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike the static to manually triggered data collecting nature of scrapers, web crawlers regularly gather real-time content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;While scraping bots only aim to fetch data when prompted, web crawlers follow specific algorithms. So many tech companies use them to get real-time web insights. And it’s also schedulable. One of its use-cases is periodic web traffic and SEO analytics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Crawling involves serial whole web download and subsequent indexing based on relevance. Web scraping, on the other hand, doesn’t index retrieved content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike crawling bots which are more functionally versatile and expensive to develop, building a scraper is cost-effective and less time-consuming.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#key-similarities-between-web-crawling-and-web-scraping"&gt;
  &lt;/a&gt;
  Key Similarities Between Web Crawling and Web Scraping
&lt;/h2&gt;

&lt;p&gt;While we’ve maintained that crawling and scaping are different in many ways, they still share some similarities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;They both access data by making HTTP requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They’re both automated processes. So they provide more accuracy during data retrieval.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dedicated tools are available all over the web to either scrape or crawl a website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They can both serve malicious purposes when used against a sources’ data protection terms.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web crawlers and scrapers are subject to outright blockades — either through IP clamp down or other means.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Although the workflow may differ, they both download data from the web.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#can-you-block-crawling-and-scraping-on-your-website"&gt;
  &lt;/a&gt;
  Can You Block Crawling and Scraping on Your Website?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkFolrNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2ANpKAuvXSbc2Hw0G_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkFolrNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/0%2ANpKAuvXSbc2Hw0G_.jpg" alt="Can You Block Crawling and Scraping on Your Website?" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, you can go the extra mile and wade off these bots. But while you might want to prevent scraping bots from accessing your content, you need to take care when deciding whether you should block crawlers or not. Unlike scraping bots, spider bots’ crawling influences the growth of your website. Preventing crawling on all of your web pages, for instance, might hurt your discoverability as you might end up obscuring pages with traffic-driving potential.&lt;/p&gt;

&lt;p&gt;Instead of blocking bots outrightly, a best practice is to prevent them from accessing private directories like the admin, registration, and login pages. This ensures that search engines don’t index these pages to bring them up as search results.&lt;/p&gt;

&lt;p&gt;Although we’ve mentioned using robots.txt earlier, there are many other methods that you can use to defend your website against bots invasion:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;You can block bots using the CAPTCHA method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also block malicious IP addresses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Monitor sudden suspicious increase in traffic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Evaluate your traffic sources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clampdown known or specific bots.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Target potential malicious bots.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#can-web-bots-bypass-cors-and-robotstxt"&gt;
  &lt;/a&gt;
  Can Web Bots Bypass CORS and Robots.txt?
&lt;/h2&gt;

&lt;p&gt;The internet, however, follows strict rules when it comes to cross-interaction between software belonging to different origins. So in cases where a resource server doesn’t authorize a bot from another domain, web browsers consequently block its request via a rule called cross-origin resource policy (CORS).&lt;/p&gt;

&lt;p&gt;It’s therefore hard to download data from a resource database directly without using its API or other means like authentication tokens to authorize requests. Additionally, robots.txt, when found on a website, explicitly states rules for crawling certain pages. Thus, it also prevents bots from accessing them.&lt;/p&gt;

&lt;p&gt;But to avert this blockade, some bots mimic real browsers by including a user-agent in their request headers. Ultimately, CORS sees such a bot as a browser and gives it access to the website’s resources. And since robots.txt only prevents bots, such bypass easily fools it and renders its rules impotent.&lt;/p&gt;

&lt;p&gt;So despite several preventive measures, even tech giants still have their data scraped or crawled. So you can only try to put control measures in place, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Despite the differences, as you can see by now, web crawling and scraping are valuable data collection techniques. So since they have some key differences in their applications, you must explicitly define your goal to know the right tool to use in specific scenarios. Moreover, they’re essential business tools that you don’t want to discard. And as mentioned earlier, whether you intend to scrape a web page or crawl it for some reason, there are many third-party automating tools to achieve your aim. So feel free to leverage them.&lt;/p&gt;

</description>
      <category>webscraper</category>
      <category>scraper</category>
      <category>webcrawling</category>
      <category>crawler</category>
    </item>
    <item>
      <title>Building A Meme Generator using Appsmith</title>
      <author>Curious Paul</author>
      <pubDate>Sun, 31 Oct 2021 17:43:52 +0000</pubDate>
      <link>https://dev.to/curiouspaul1/building-a-meme-generator-using-appsmith-2cg9</link>
      <guid>https://dev.to/curiouspaul1/building-a-meme-generator-using-appsmith-2cg9</guid>
      <description>&lt;p&gt;In this article I will be showing you how to build a simple meme generator platform using appsmith and a third party api called &lt;a href="https://humorapi.com/"&gt;&lt;code&gt;Humor Api&lt;/code&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  &lt;u&gt;Pre-Requisites&lt;/u&gt;
&lt;/h3&gt;

&lt;p&gt;In order to follow along with this tutorial you will need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Appsmith account: if you don't already have one you can create one via this &lt;a href="https://app.appsmith.com/user/signup"&gt;link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#building-the-interface-on-appsmith"&gt;
  &lt;/a&gt;
  Building The Interface on Appsmith
&lt;/h3&gt;

&lt;p&gt;We'll start by building the interface to the meme generator platform  on appsmith, so login to your appsmith dashboard and click on the button to create a new application. &lt;/p&gt;

&lt;p&gt;On the design area, we're going to drag an &lt;code&gt;image widget&lt;/code&gt; to the middle of the screen which will display the meme, we also need a &lt;code&gt;button&lt;/code&gt; widget that will randomize the meme each time its clicked, change the default text on the button to &lt;code&gt;generate meme&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Your design should look something like that shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BuIWuPN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dud4c8vfktad1wrmwq8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BuIWuPN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dud4c8vfktad1wrmwq8.PNG" alt="Image description" width="679" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrating-with-humorapi"&gt;
  &lt;/a&gt;
  Integrating With HumorApi
&lt;/h3&gt;

&lt;p&gt;To begin with you need to sign up for a free account on &lt;code&gt;HumorApi&lt;/code&gt; platform and then get your &lt;code&gt;api-key&lt;/code&gt; which will be used to communicate with the &lt;code&gt;Humor APi&lt;/code&gt; server. You can sign up for a free account &lt;a href="https://humorapi.com/console/#Dashboard"&gt;&lt;/a&gt;. Once you're signed up head over to the &lt;code&gt;Profile&lt;/code&gt; section on your dashboard and copy your api-key as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skNRW5oy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6qjsfpjmd1aefd053vz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skNRW5oy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6qjsfpjmd1aefd053vz.PNG" alt="Image description" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will now link the interface with the api, in order for us to this we need to create a new data source. Head over to the &lt;code&gt;Datasources&lt;/code&gt; section on the dashboard and then click the option to create a new api, give this api a name, perhaps &lt;code&gt;randomMemes&lt;/code&gt;. It will send a &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;Humor Api&lt;/code&gt; endpoint of &lt;code&gt;https://api.humorapi.com/memes/random?api-key=YOUR-API-KEY&amp;amp;keywords=random&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--89p3XxAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weki95t81sdkoefwhs6z.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--89p3XxAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weki95t81sdkoefwhs6z.PNG" alt="Image description" width="754" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This API will be responsible for fetching random memes from the public api. Save this api and head back to the widgets section. Head over to the submit widget and bring up the settings pane, and under the &lt;code&gt;Actions&lt;/code&gt; section choose the option to &lt;code&gt;Execute a query&lt;/code&gt; and then select the &lt;code&gt;randomMemes&lt;/code&gt; api from the list of options showed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqhJ3Fh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifer6wuc3s0h3zjwqkfl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqhJ3Fh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifer6wuc3s0h3zjwqkfl.PNG" alt="Image description" width="249" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the image widget bring up the settings pane as well, and in the &lt;code&gt;image&lt;/code&gt; option add the following so that the image loads the url from the response of the  random meme api.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;randomMemes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now click on the &lt;code&gt;generate meme&lt;/code&gt; button and you should now see that the image changes the meme appearing on it, each time you click it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5j4zXgzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lye7gl7ik8je9c84xx51.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5j4zXgzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lye7gl7ik8je9c84xx51.PNG" alt="Image description" width="641" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can choose to deploy this application and share with the public however we want. That's it, you have successfully created a random meme generator in a few easy steps, thanks for staying with me - have fun coding!.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>#1 Anti-Pattern - Mutable Default Arguments</title>
      <author>Dollar Dhingra</author>
      <pubDate>Sun, 31 Oct 2021 17:34:56 +0000</pubDate>
      <link>https://dev.to/dollardhingra/1-anti-pattern-mutable-default-arguments-3bp5</link>
      <guid>https://dev.to/dollardhingra/1-anti-pattern-mutable-default-arguments-3bp5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you are not sure what a mutable default argument is, please read the full article as it can save you hours of &lt;br&gt;
debugging.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code-example-with-a-mutable-default-argument"&gt;
  &lt;/a&gt;
  Code Example With A Mutable Default Argument
&lt;/h2&gt;

&lt;p&gt;Consider the following code example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's understand step by step what is happening:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are creating a function to add fruits(str) in a box(list)&lt;/li&gt;
&lt;li&gt;There is a &lt;code&gt;add_fruit&lt;/code&gt; function which is responsible for adding the &lt;code&gt;fruit&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This function takes 2 arguments: &lt;code&gt;fruit&lt;/code&gt; and &lt;code&gt;box&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attention!&lt;/strong&gt; : The second argument here is a mutable default argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-mutable-default-argument"&gt;
  &lt;/a&gt;
  So, what is mutable default argument?
&lt;/h2&gt;

&lt;p&gt;An argument in a function with default value as mutable. &lt;/p&gt;

&lt;p&gt;In short, Python has both mutable and immutable types. The difference being: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mutables can be modified&lt;/li&gt;
&lt;li&gt;immutables can't be modified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For eg: Tuple is an immutable type. If we define a tuple like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;weekends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'saturday'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'sunday'&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

&lt;span class="n"&gt;weekends&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Monday'&lt;/span&gt; &lt;span class="c1"&gt;# TypeError: 'tuple' object does not support item assignment
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An immutable type can never be modified.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-might-expect"&gt;
  &lt;/a&gt;
  What You Might Expect
&lt;/h2&gt;

&lt;p&gt;let's modify our code and create a couple of boxes, i.e. red box and yellow box&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;

&lt;span class="n"&gt;red_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"red box: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;red_box&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;yellow_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mango"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"yellow box: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;yellow_box&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#expected-output"&gt;
  &lt;/a&gt;
  Expected Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;red box: ["apple"]

yellow box: ["mango"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#actually-output"&gt;
  &lt;/a&gt;
  Actually Output
&lt;/h3&gt;

&lt;p&gt;Actually, you get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;red box: ["apple"]

yellow box: ["apple", "mango"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait? What? We never added apple in the yellow box. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-happened"&gt;
  &lt;/a&gt;
  What Exactly Happened
&lt;/h2&gt;

&lt;p&gt;A new list is created once when the function is defined, and the same list is used in each successive call. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Python’s default arguments are evaluated once when the function is defined. This means that if you use a mutable default argument and mutate it, you will and have mutated that object for all future calls to the function as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will get the same result for other mutable types also(For eg: dict).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-should-be-done"&gt;
  &lt;/a&gt;
  What Should Be Done
&lt;/h2&gt;

&lt;p&gt;If your function needs to have a default argument for a mutable type, then default it with None and also add a check for same.&lt;br&gt;
Let's modify our &lt;code&gt;add_fruit&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt;

&lt;span class="n"&gt;red_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"red box: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;red_box&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;yellow_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add_fruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mango"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"yellow box: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;yellow_box&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This extra check can saves hours of debugging!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It's always a best practice to not use mutable default arguments. Instead, try adding an extra comparison check with &lt;br&gt;
None to handle default arguments which are mutable.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A list of cache providers</title>
      <author>Nicolas Frankel</author>
      <pubDate>Sun, 31 Oct 2021 17:28:27 +0000</pubDate>
      <link>https://dev.to/nfrankel/a-list-of-cache-providers-3o5o</link>
      <guid>https://dev.to/nfrankel/a-list-of-cache-providers-3o5o</guid>
      <description>&lt;p&gt;Last week, we described &lt;a href="https://blog.frankel.ch/choose-cache/1/"&gt;several criteria to look at to choose a cache&lt;/a&gt;.
This week, it’s time to list Java cache providers based on these criteria.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#java-caching-system"&gt;Java Caching System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guava"&gt;Guava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#caffeine"&gt;Caffeine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ehcache"&gt;Ehcache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#infinispan"&gt;Infinispan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coherence-community-edition"&gt;Coherence Community Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ignite"&gt;Ignite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#geode"&gt;Geode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hazelcast"&gt;Hazelcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="java-caching-system"&gt;Java Caching System&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;JCS is a distributed caching system written in Java.
It is intended to speed up applications by providing a means to manage cached data of various dynamic natures.
Like any caching system, JCS is most useful for high read, low put applications.
Latency times drop sharply and bottlenecks move away from the database in an effectively cached system.&lt;/p&gt;
-— https://commons.apache.org/proper/commons-jcs/index.html
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;Name&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://commons.apache.org/proper/commons-jcs/"&gt;Java Caching System&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Provider&lt;/th&gt;
  &lt;td&gt;The Apache Foundation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Source&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/apache/commons-jcs"&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;License&lt;/th&gt;
  &lt;td&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Inception date&lt;/th&gt;
  &lt;td&gt;2002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Last commit&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/apache/commons-jcs/commits/master"&gt;c6b852c&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;GitHub stars&lt;/th&gt;
  &lt;td&gt;76&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Configuration&lt;/th&gt;
  &lt;td&gt;File-based (&lt;code&gt;cache.ccf&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;jcs.default=
jcs.default.cacheattributes=\
    org.apache.commons.jcs3.engine.CompositeCacheAttributes
jcs.default.cacheattributes.MaxObjects=1000
jcs.default.cacheattributes.MemoryCacheName=\
    org.apache.commons.jcs3.engine.memory.lru.LRUMemoryCache&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Sample code&lt;/th&gt;
  &lt;td&gt;
&lt;pre&gt;
var cache =
  JCS.&amp;lt;Long, String&amp;gt;getInstance("cache"); // 1
cache.put(1L, "One");                           // 2
var value = cache.get(1L);                      // 3
System.out.println(value);
JCS.shutdown();                                 // 4
&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;Get access to the cache region
  &lt;/li&gt;
&lt;li&gt;Put
  &lt;/li&gt;
&lt;li&gt;Get
  &lt;/li&gt;
&lt;li&gt;Clean up
&lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Local/distributed&lt;/th&gt;
  &lt;td&gt;Local and distributed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Non-blocking&lt;/th&gt;
  &lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;JCache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Spring Cache&lt;/th&gt;
  &lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;TTL&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Eviction strategies&lt;/th&gt;
  &lt;td&gt;LRU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Miscellaneous&lt;/th&gt;
  &lt;td&gt;
&lt;blockquote&gt;
  &lt;p&gt;The JCS goes beyond simply caching objects in memory. It provides numerous additional features:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Memory management
    &lt;/li&gt;
&lt;li&gt;Disk overflow (and defragmentation)
    &lt;/li&gt;
&lt;li&gt;Thread pool controls
    &lt;/li&gt;
&lt;li&gt;Element grouping
    &lt;/li&gt;
&lt;li&gt;Minimal dependencies
    &lt;/li&gt;
&lt;li&gt;Quick nested categorical removal
    &lt;/li&gt;
&lt;li&gt;Data expiration (idle time and max life)
    &lt;/li&gt;
&lt;li&gt;Extensible framework
    &lt;/li&gt;
&lt;li&gt;Fully configurable runtime parameters
    &lt;/li&gt;
&lt;li&gt;Region data separation and configuration
    &lt;/li&gt;
&lt;li&gt;Fine grained element configuration options
    &lt;/li&gt;
&lt;li&gt;Remote synchronization
    &lt;/li&gt;
&lt;li&gt;Remote store recovery
    &lt;/li&gt;
&lt;li&gt;Non-blocking "zombie" (balking facade) pattern
    &lt;/li&gt;
&lt;li&gt;Lateral distribution of elements via HTTP, TCP, or UDP
    &lt;/li&gt;
&lt;li&gt;UDP Discovery of other caches
    &lt;/li&gt;
&lt;li&gt;Element event handling
    &lt;/li&gt;
&lt;li&gt;Remote server chaining (or clustering) and failover
    &lt;/li&gt;
&lt;li&gt;Custom event logging hooks
    &lt;/li&gt;
&lt;li&gt;Custom event queue injection
    &lt;/li&gt;
&lt;li&gt;Custom object serializer injection
    &lt;/li&gt;
&lt;li&gt;Key pattern matching retrieval
    &lt;/li&gt;
&lt;li&gt;Network efficient multi-key retrieval&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="guava"&gt;Guava&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Guava is a set of core Java libraries from Google that includes new collection types (such as multimap and multiset), immutable collections, a graph library, and utilities for concurrency, I/O, hashing, &lt;strong&gt;caching&lt;/strong&gt;, primitives, strings, and more!
  It is widely used on most Java projects within Google, and widely used by many other companies as well.&lt;/p&gt;
  — https://github.com/google/guava
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;Name&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/google/guava/wiki/CachesExplained"&gt;Guava&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Provider&lt;/th&gt;
  &lt;td&gt;Google&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Source&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/google/guava"&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;License&lt;/th&gt;
  &lt;td&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Inception date&lt;/th&gt;
  &lt;td&gt;2010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Last commit&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/google/guava/commits/master"&gt;ba690ba&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;GitHub stars&lt;/th&gt;
  &lt;td&gt;42.6k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Configuration&lt;/th&gt;
  &lt;td&gt;Programmatic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;var cache = CacheBuilder.newBuilder()
                        .maximumSize(1000)
                        .build()&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Sample code&lt;/th&gt;
  &lt;td&gt;
&lt;pre&gt;
cache.put(1L, "One");               // 1             
var value = cache.getIfPresent(1L); // 2
System.out.println(value);
cache.cleanUp();                    // 3
&lt;/pre&gt;
    &lt;ol&gt;
      &lt;li&gt;Put
      &lt;/li&gt;
&lt;li&gt;Get
      &lt;/li&gt;
&lt;li&gt;Clean up
  &lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Local/distributed&lt;/th&gt;
  &lt;td&gt;Local&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Non-blocking&lt;/th&gt;
  &lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;JCache&lt;/th&gt;
  &lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Spring Cache&lt;/th&gt;
  &lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;TTL&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Eviction strategies&lt;/th&gt;
  &lt;td&gt;
    &lt;ul&gt;
    &lt;li&gt;
FIFO
    &lt;/li&gt;
&lt;li&gt;Weight-based eviction:
One can assign a weight to each entry, according to a custom algorithm, and set the cache a weight limit.
Then, if a new entry would exceed the maximum weight, the "heaviest" entries are removed until the sum of the weights is below the set threshold.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="6"&gt;Miscellaneous&lt;/th&gt;
  &lt;td&gt;Guava is a single JAR that provides cache among many other capabilities&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;A &lt;a href="https://github.com/ocafebabe/guava-jcache"&gt;third-party project&lt;/a&gt; provides a JCache adapter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;The &lt;code&gt;get&lt;/code&gt; method accepts a &lt;code&gt;Callable&lt;/code&gt; parameter that allows to get a value from the cache &lt;strong&gt;or&lt;/strong&gt; compute it and store it if it’s not found&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;The &lt;a href="https://github.com/google/guava/wiki/CachesExplained#reference-based-eviction"&gt;API&lt;/a&gt; uses soft and weak references in keys and values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Allows you to attach &lt;a href="https://github.com/google/guava/wiki/CachesExplained#removal-listeners"&gt;event handlers&lt;/a&gt; when entries are evicted&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="caffeine"&gt;Caffeine&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Caffeine is a &lt;a href="https://github.com/ben-manes/caffeine/wiki/Benchmarks"&gt;high performance&lt;/a&gt;, &lt;a href="https://github.com/ben-manes/caffeine/wiki/Efficiency"&gt;near optimal&lt;/a&gt; caching library.
For more details, see our &lt;a href="https://github.com/ben-manes/caffeine/wiki"&gt;user’s guide&lt;/a&gt; and browse the &lt;a href="http://www.javadoc.io/doc/com.github.ben-manes.caffeine/caffeine"&gt;API docs&lt;/a&gt; for the latest release.&lt;/p&gt;
— https://github.com/ben-manes/caffeine
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;Name&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/ben-manes/caffeine/wiki"&gt;Caffeine&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Provider&lt;/th&gt;
  &lt;td&gt;Ben Manes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Source&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/ben-manes/caffeine"&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;License&lt;/th&gt;
  &lt;td&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Inception date&lt;/th&gt;
  &lt;td&gt;2014&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Last commit&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/ben-manes/caffeine/commits/master"&gt;41abb08&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;GitHub stars&lt;/th&gt;
  &lt;td&gt;10.6k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Configuration&lt;/th&gt;
  &lt;td&gt;Programmatic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;var cache = Caffeine.newBuilder()
                    .maximumSize(1000)
                    .build()&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Sample code&lt;/th&gt;
  &lt;td&gt;
&lt;pre&gt;
cache.put(1L, "One");                 // 1
var value = cache.getIfPresent(1L);   // 2
System.out.println(value);
cache.cleanUp();                      // 3
&lt;/pre&gt;
  &lt;ol&gt;
    &lt;li&gt;Put
    &lt;/li&gt;
&lt;li&gt;Get
    &lt;/li&gt;
&lt;li&gt;Clean up
  &lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Local/distributed&lt;/th&gt;
  &lt;td&gt;Local&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Non-blocking&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;var cache = Caffeine.newBuilder()
                    .maximumSize(1000)
                    .&amp;lt;Long, String&amp;gt;buildAsync();        // 1

CompletableFuture future =
    cache.get(1L, k -&amp;gt; expensiveLookup(1L));&lt;/pre&gt;
    &lt;ol&gt;
      &lt;li&gt;Build an asynchronous cache&lt;/li&gt;
    &lt;ol&gt;
  &lt;/ol&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;JCache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Spring Cache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;TTL&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Eviction strategies&lt;/th&gt;
  &lt;td&gt;
    &lt;ul&gt;
      &lt;li&gt;
FIFO
      &lt;/li&gt;
&lt;li&gt;Weight-based eviction:
One can assign a weight to each entry, according to a custom algorithm, and set the cache a weight limit.
Then, if a new entry would exceed the maximum weight, the "heaviest" entries are removed until the sum of the weights is below the set threshold.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Miscellaneous&lt;/th&gt;
  &lt;td&gt;Caffeine is rewrite of Guava, inspired by its API, but with non-blocking principles at its core.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;
&lt;a href="https://github.com/ben-manes/caffeine/wiki/Population"&gt;Automatic loading of entries&lt;/a&gt; into the cache, optionally asynchronously
        &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ben-manes/caffeine/wiki/Eviction#size-based"&gt;Size-based eviction&lt;/a&gt; when a maximum is exceeded based on &lt;a href="https://github.com/ben-manes/caffeine/wiki/Efficiency"&gt;frequency and recency&lt;/a&gt;
        &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ben-manes/caffeine/wiki/Eviction#time-based"&gt;Time-based expiration&lt;/a&gt; of entries, measured since last access or last write
        &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ben-manes/caffeine/wiki/Refresh"&gt;Asynchronously refresh&lt;/a&gt; when the first stale request for an entry occurs
        &lt;/li&gt;
&lt;li&gt;Keys automatically wrapped in &lt;a href="https://github.com/ben-manes/caffeine/wiki/Eviction#reference-based"&gt;weak references&lt;/a&gt;
        &lt;/li&gt;
&lt;li&gt;Values automatically wrapped in &lt;a href="https://github.com/ben-manes/caffeine/wiki/Eviction#reference-based"&gt;weak or soft references&lt;/a&gt;
        &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ben-manes/caffeine/wiki/Removal"&gt;Notification&lt;/a&gt; of evicted (or otherwise removed) entries
        &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ben-manes/caffeine/wiki/Compute"&gt;Writes propagated&lt;/a&gt; to an external resource
        &lt;/li&gt;
&lt;li&gt;Accumulation of cache access &lt;a href="https://github.com/ben-manes/caffeine/wiki/Statistics"&gt;statistics&lt;/a&gt;
&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="ehcache"&gt;Ehcache&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Ehcache is an open source, standards-based cache that boosts performance, offloads your database, and simplifies scalability.
It’s the most widely-used Java-based cache because it’s robust, proven, full-featured, and integrates with other popular libraries and frameworks.
Ehcache scales from in-process caching, all the way to mixed in-process/out-of-process deployments with terabyte-sized caches.&lt;/p&gt;
-— https://www.ehcache.org/
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;Name&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://www.ehcache.org/"&gt;Ehcache&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Provider&lt;/th&gt;
  &lt;td&gt;Software AG&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Source&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/ehcache/ehcache3"&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;License&lt;/th&gt;
  &lt;td&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Inception date&lt;/th&gt;
  &lt;td&gt;2009&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Last commit&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/ehcache/ehcache3"&gt;212c63c&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;GitHub stars&lt;/th&gt;
  &lt;td&gt;1.7k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Configuration&lt;/th&gt;
  &lt;td&gt;Programmatic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;var cacheManager = CacheManagerBuilder
    .newCacheManagerBuilder()
    .withCache(
        "cache",
        CacheConfigurationBuilder.newCacheConfigurationBuilder(
            Long.class,
            String.class,
            ResourcePoolsBuilder.heap(10)
        )
    ).build();
cacheManager.init();
var cache = cacheManager.getCache(
    "cache", Long.class, String.class
);&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Sample code&lt;/th&gt;
  &lt;td&gt;
&lt;pre&gt;cache.put(key, value);         // 1 
var value = cache.get(key);         // 2
cacheManager.close();               // 3&lt;/pre&gt;
  &lt;ol&gt;
    &lt;li&gt;Put
    &lt;/li&gt;
&lt;li&gt;Get
    &lt;/li&gt;
&lt;li&gt;Clean up
  &lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Local/distributed&lt;/th&gt;
  &lt;td&gt;Local&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Non-blocking&lt;/th&gt;
  &lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;JCache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Spring Cache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;TTL&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Eviction strategies&lt;/th&gt;
  &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;
LRU
    &lt;/li&gt;
&lt;li&gt;
LFU
    &lt;/li&gt;
&lt;li&gt;
FIFO
    &lt;/li&gt;
&lt;li&gt;Pluggable policy:
EhCache provides an API to write your own eviction policy&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Miscellaneous&lt;/th&gt;
  &lt;td&gt;Ehcache 3.x is a complete rewrite from Ehache 2.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Terracota is the Enterprise version of Ehcache.
It provides distributed capabilities.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;h2 id="infinispan"&gt;Infinispan&lt;/h2&gt;

&lt;blockquote&gt;

&lt;p&gt;Infinispan is an open-source in-memory data grid that offers flexible deployment options and robust capabilities for storing, managing, and processing data.
Infinispan provides a key/value data store that can hold all types of data, from Java objects to plain text.
Infinispan distributes your data across elastically scalable clusters to guarantee high availability and fault tolerance, whether you use Infinispan as a volatile cache or a persistent data store.&lt;/p&gt;

— https://infinispan.org/
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;Name&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://infinispan.org/"&gt;Infinispan&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Provider&lt;/th&gt;
  &lt;td&gt;RedHat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Source&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/infinispan/infinispan"&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;License&lt;/th&gt;
  &lt;td&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Inception date&lt;/th&gt;
  &lt;td&gt;2009&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Last commit&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/infinispan/infinispan"&gt;3dd18ce&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;GitHub stars&lt;/th&gt;
  &lt;td&gt;910&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Configuration&lt;/th&gt;
  &lt;td&gt;Programmatic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;var cacheManager = new DefaultCacheManager();
cacheManager.defineConfiguration("cache",
    new ConfigurationBuilder().memory().maxSize("1000").build()
);
var cache = cacheManager.&amp;lt;Long, String&amp;gt;getCache("cache");&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Sample code&lt;/th&gt;
  &lt;td&gt;
&lt;pre&gt;
cache.put(1L, "One");               // 1
var value = cache.get(1L);          // 2
System.out.println(value);
cacheManager.close();               // 3
&lt;/pre&gt;
  &lt;ol&gt;
    &lt;li&gt;Put
    &lt;/li&gt;
&lt;li&gt;Get
    &lt;/li&gt;
&lt;li&gt;Clean up
  &lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Local/distributed&lt;/th&gt;
  &lt;td&gt;Local and distributed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Non-blocking&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;CompletableFuture&amp;lt;String&amp;gt; future =
    cache.getAsync(1L, k -&amp;gt; expensiveLookup(1L));&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;JCache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Spring Cache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;TTL&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Eviction strategies&lt;/th&gt;
  &lt;td&gt;
&lt;p&gt;LFU&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Miscellaneous&lt;/th&gt;
  &lt;td&gt;Infinispan is the successor of JBoss Cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;Interoperability: access data across multiple protocols and programming languages
        &lt;/li&gt;
&lt;li&gt;Resilient and Fault Tolerant Data: ensure data is always available to meet demanding workloads
        &lt;/li&gt;
&lt;li&gt;ACID Transactions: guarantee that data is always valid and consistent
        &lt;/li&gt;
&lt;li&gt;Clustered Processing: process data in real-time without burdening resources
        &lt;/li&gt;
&lt;li&gt;Queries: perform simple, accurate, and fast searches across distributed data sets&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="coherence-community-edition"&gt;Coherence Community Edition&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Coherence is scalable, fault-tolerant, cloud-ready, distributed platform for building grid-based applications and reliably storing data.
The product is used at scale, for both compute and raw storage, in a vast array of industries such as critical financial trading systems, high performance telecommunication products, and eCommerce applications.&lt;/p&gt;

—- https://coherence.community/latest/21.06/docs/
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;Name&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://coherence.community/"&gt;Coherence&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Provider&lt;/th&gt;
  &lt;td&gt;Oracle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Source&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/oracle/coherence"&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;License&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://oss.oracle.com/licenses/upl/"&gt;Universal Permissive License&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Inception date&lt;/th&gt;
  &lt;td&gt;2001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Last commit&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/oracle/coherence/commits/master"&gt;5f0b968&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;GitHub stars&lt;/th&gt;
  &lt;td&gt;340&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Configuration&lt;/th&gt;
  &lt;td&gt;File-based&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;
&amp;lt;?xml version="1.0"?&amp;gt;
&amp;lt;cache-config&amp;gt;
    &amp;lt;caching-scheme-mapping&amp;gt;
        &amp;lt;cache-mapping&amp;gt;
            &amp;lt;cache-name&amp;gt;cache&amp;lt;/cache-name&amp;gt;
            &amp;lt;scheme-name&amp;gt;local&amp;lt;/scheme-name&amp;gt;
        &amp;lt;/cache-mapping&amp;gt;
    &amp;lt;/caching-scheme-mapping&amp;gt;
    &amp;lt;caching-schemes&amp;gt;
        &amp;lt;local-scheme&amp;gt;
            &amp;lt;scheme-name&amp;gt;local&amp;lt;/scheme-name&amp;gt;
            &amp;lt;high-units&amp;gt;1000&amp;lt;/high-units&amp;gt;
        &amp;lt;/local-scheme&amp;gt;
    &amp;lt;/caching-schemes&amp;gt;
&amp;lt;/cache-config&amp;gt;
&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Sample code&lt;/th&gt;
  &lt;td&gt;
&lt;pre&gt;
var cache = CacheFactory.&amp;lt;Long, String&amp;gt;getCache("cache"); // 1
cache.put(1L, "One");        // 2
var value = cache.get(1L);   // 3
System.out.println(value);
cache.close();               // 4
&lt;/pre&gt;
    &lt;ol&gt;
      &lt;li&gt;Get a reference to the cache
      &lt;/li&gt;
&lt;li&gt;Put
      &lt;/li&gt;
&lt;li&gt;Get
      &lt;/li&gt;
&lt;li&gt;Clean up
  &lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Local/distributed&lt;/th&gt;
  &lt;td&gt;Local and distributed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Non-blocking&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;var cache = CacheFactory
                .&amp;lt;Long, String&amp;gt;getCache("cache")
                .async();
CompletableFuture future = cache.get(1L);&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;JCache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Spring Cache&lt;/th&gt;
  &lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;TTL&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Eviction strategies&lt;/th&gt;
  &lt;td&gt;
    &lt;ul&gt;
      &lt;li&gt;
MFU and MRU scaled on a logarithmic curve
      &lt;/li&gt;
&lt;li&gt;
LRU
      &lt;/li&gt;
&lt;li&gt;
LFU
      &lt;/li&gt;
&lt;li&gt;Pluggable policy: EhCache provides an API to write your own eviction policy&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="3"&gt;Miscellaneous&lt;/th&gt;
  &lt;td&gt;Oracle bought Coherence from Tangsol in 2007&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
    &lt;p&gt;Commercial versions are available:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Standard
      &lt;/li&gt;
&lt;li&gt;Enterprise
      &lt;/li&gt;
&lt;li&gt;Grid
    &lt;/li&gt;
&lt;/ul&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
    &lt;ul&gt;
      &lt;li&gt;Clustering and Data Sharding
      &lt;/li&gt;
&lt;li&gt;Scalability and High Avalability
      &lt;/li&gt;
&lt;li&gt;Disk-Based Persistence
      &lt;/li&gt;
&lt;li&gt;Key-Value Data Store
      &lt;/li&gt;
&lt;li&gt;Parallel Queries
      &lt;/li&gt;
&lt;li&gt;Efficient Aggregation
      &lt;/li&gt;
&lt;li&gt;In-Place Processing
      &lt;/li&gt;
&lt;li&gt;Sophisticated Event Model&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="ignite"&gt;Ignite&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Distributed Database For High-Performance Computing With In-Memory Speed&lt;/p&gt;

-- https://ignite.apache.org/
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;Name&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://ignite.apache.org/"&gt;Ignite&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Provider&lt;/th&gt;
  &lt;td&gt;GridGain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Source&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/apache/ignite"&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;License&lt;/th&gt;
  &lt;td&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Inception date&lt;/th&gt;
  &lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Open-Sourced&lt;/th&gt;
  &lt;td&gt;2014&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Last commit&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/apache/ignite/commits/master"&gt;73a687d&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;GitHub stars&lt;/th&gt;
  &lt;td&gt;4k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Configuration&lt;/th&gt;
  &lt;td&gt;Programmatic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;var cacheCfg = new CacheConfiguration&amp;lt;Long, String&amp;gt;();
cacheCfg.setOnheapCacheEnabled(true);
cacheCfg.setEvictionPolicyFactory(
    () -&amp;gt; new LruEvictionPolicy&amp;lt;&amp;gt;(1000)
);
cacheCfg.setName("cache");
var cfg = new IgniteConfiguration();
cfg.setCacheConfiguration(cacheCfg);
ignite = Ignition.start(cfg);
var cache = ignite.getOrCreateCache("cache");&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Code sample&lt;/th&gt;
  &lt;td&gt;
&lt;pre&gt;
cache.put(1L, "One");             // 1
var value = cache.get(1L);        // 2
System.out.println(value);
ignite.close();                   // 3
&lt;/pre&gt;
    &lt;ol&gt;
      &lt;li&gt;Put
      &lt;/li&gt;
&lt;li&gt;Get
      &lt;/li&gt;
&lt;li&gt;Clean up
  &lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Non-blocking&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;
IgniteFuture&amp;lt;String&amp;gt; future = cache.getAsync(1L); // 1&lt;/pre&gt;
    &lt;ol&gt;&lt;li&gt;Ignite provides its own asynchronous primitives, which are different from the JDK’s&lt;/li&gt;&lt;/ol&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;JCache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Spring Cache&lt;/th&gt;
  &lt;td&gt;✅ (provided by Ignite)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;TTL&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Eviction strategies&lt;/th&gt;
  &lt;td&gt;
    &lt;ul&gt;
      &lt;li&gt;
LRU
      &lt;/li&gt;
&lt;li&gt;
FIFO
      &lt;/li&gt;
&lt;li&gt;Sorted:
      Entries are removed in order, so that they need to implement &lt;code&gt;Comparable&lt;/code&gt; or you need to configure you own &lt;code&gt;Comparator&lt;/code&gt; implementation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Miscellaneous&lt;/th&gt;
  &lt;td&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Core features:&lt;/p&gt;
      &lt;ul&gt;
          &lt;li&gt;Distributed SQL
          &lt;/li&gt;
&lt;li&gt;Multi-tier Storage
          &lt;/li&gt;
&lt;li&gt;Co-located Compute
          &lt;/li&gt;
&lt;li&gt;ACID Transactions
          &lt;/li&gt;
&lt;li&gt;Machine Learning
          &lt;/li&gt;
&lt;li&gt;Continuous Queries&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;GridGrain offers an enterprise version of Ignite named GridGain In-Memory Computing Platform&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="geode"&gt;Geode&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Apache Geode is a data management platform that provides real-time, consistent access to data-intensive applications throughout widely distributed cloud architectures.&lt;/p&gt;
&lt;p&gt;Apache Geode pools memory, CPU, network resources, and optionally local disk across multiple processes to manage application objects and behavior.
It uses dynamic replication and data partitioning techniques to implement high availability, improved performance, scalability, and fault tolerance.
In addition to being a distributed data container, Apache Geode is an in-memory data management system that provides reliable asynchronous event notifications and guaranteed message delivery.&lt;/p&gt;

-- https://github.com/apache/geode
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;Name&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://geode.apache.org/"&gt;Geode&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Provider&lt;/th&gt;
  &lt;td&gt;Pivotal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Source&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/apache/geode"&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;License&lt;/th&gt;
  &lt;td&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Inception date&lt;/th&gt;
  &lt;td&gt;2015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Open-Sourced&lt;/th&gt;
  &lt;td&gt;2019&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Last commit&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/apache/geode/commits/develop"&gt;a21df0b&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;GitHub stars&lt;/th&gt;
  &lt;td&gt;2k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Configuration&lt;/th&gt;
  &lt;td&gt;File-based and programmatic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;var cache = new CacheFactory().create();
var factory = cache.&amp;lt;Long, String&amp;gt;createRegionFactory();
factory.setEvictionAttributes(
    EvictionAttributes.createLRUEntryAttributes(1000)
);
var region = factory.create("cache");&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Code sample&lt;/th&gt;
  &lt;td&gt;
&lt;pre&gt;
region.put(1L, "One");         // 1 
var value = region.get(1L);    // 2
System.out.println(value);
cache.close();                 // 3
&lt;/pre&gt;
    &lt;ol&gt;
      &lt;li&gt;Put
      &lt;/li&gt;
&lt;li&gt;Get
      &lt;/li&gt;
&lt;li&gt;Clean up
  &lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Non-blocking&lt;/th&gt;
  &lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;JCache&lt;/th&gt;
  &lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Spring Cache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;TTL&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Eviction strategies&lt;/th&gt;
  &lt;td&gt;
&lt;p&gt;LRU&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Miscellaneous&lt;/th&gt;
  &lt;td&gt;GemStone is the company that initially developed Geode. In 2010, SpringSource acquired GemStone.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
    &lt;blockquote&gt;
      &lt;p&gt;[...] &lt;a href="https://geode.apache.org/docs/guide/114/getting_started/product_intro.html"&gt;main features and key functionality&lt;/a&gt;:&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;High Read-and-Write Throughput
        &lt;/li&gt;
&lt;li&gt;Low and Predictable Latency
        &lt;/li&gt;
&lt;li&gt;High Scalability
        &lt;/li&gt;
&lt;li&gt;Continuous Availability
        &lt;/li&gt;
&lt;li&gt;Reliable Event Notifications
        &lt;/li&gt;
&lt;li&gt;Parallelized Application Behavior on Data Stores
        &lt;/li&gt;
&lt;li&gt;Shared-Nothing Disk Persistence
        &lt;/li&gt;
&lt;li&gt;Reduced Cost of Ownership
        &lt;/li&gt;
&lt;li&gt;Single-Hop Capability for Client/Server
        &lt;/li&gt;
&lt;li&gt;Client/Server Security
        &lt;/li&gt;
&lt;li&gt;Multisite Data Distribution
        &lt;/li&gt;
&lt;li&gt;Continuous Querying
        &lt;/li&gt;
&lt;li&gt;Heterogeneous Data Sharing&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2 id="hazelcast"&gt;Hazelcast&lt;/h2&gt;

&lt;p&gt;I work for Hazelcast at the time of this writing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hazelcast is a streaming and memory-first application platform for fast, stateful, data-intensive workloads on-premises, at the edge or as a fully managed cloud service.&lt;/p&gt;
—- https://hazelcast.com/
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;th&gt;Name&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://hazelcast.com/"&gt;Hazelcast&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Provider&lt;/th&gt;
  &lt;td&gt;Hazelcast&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Source&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/hazelcast/hazelcast"&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;License&lt;/th&gt;
  &lt;td&gt;&lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache 2.0&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Inception date&lt;/th&gt;
  &lt;td&gt;2008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Last commit&lt;/th&gt;
  &lt;td&gt;&lt;a href="https://github.com/hazelcast/hazelcast/commits/master"&gt;de91d6b&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;GitHub stars&lt;/th&gt;
  &lt;td&gt;4.6k&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Configuration&lt;/th&gt;
  &lt;td&gt;File-based and programmatic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;var hazelcast = Hazelcast.newHazelcastInstance();
hazelcast.getConfig()
         .getMapConfig("cache")
         .getEvictionConfig()
         .setSize(1000);
var map = hazelcast.getMap("cache");&lt;/pre&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Code sample&lt;/th&gt;
  &lt;td&gt;
&lt;pre&gt;
map.put(1L, "One");               // 1 
var value = map.get(1L);          // 2
System.out.println(value);
hazelcast.shutdown();             // 3
&lt;/pre&gt;
    &lt;ol&gt;
      &lt;li&gt;Put
      &lt;/li&gt;
&lt;li&gt;Get
      &lt;/li&gt;
&lt;li&gt;Clean up
  &lt;/li&gt;
&lt;/ol&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Non-blocking&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
&lt;pre&gt;CompletionStage&amp;lt;String&amp;gt; stage = cache.getAsync(1L);&lt;/pre&gt;  
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;JCache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Spring Cache&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;TTL&lt;/th&gt;
  &lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th&gt;Eviction strategies&lt;/th&gt;
  &lt;td&gt;
    &lt;ul&gt;
      &lt;li&gt;
LRU
      &lt;/li&gt;
&lt;li&gt;
LFU
      &lt;/li&gt;
&lt;li&gt;Pluggable policy:
Hazelcast provides an API to write your own eviction policy&lt;/li&gt;
&lt;/ul&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th rowspan="2"&gt;Miscellaneous&lt;/th&gt;
  &lt;td&gt;Hazelcast provides an Enterprise edition with additional features&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;Distributed computation, data structures, and events
        &lt;/li&gt;
&lt;li&gt;Streaming data processing
        &lt;/li&gt;
&lt;li&gt;Connectors to read from/write to systems like Apache Kafka, JMS, JDBC and HDMS
        &lt;/li&gt;
&lt;li&gt;Querying with SQL and predicates
        &lt;/li&gt;
&lt;li&gt;CP subsystem for distributed coordination use cases
        &lt;/li&gt;
&lt;li&gt;JCache implementation
        &lt;/li&gt;
&lt;li&gt;Replication of web sessions (filter, Tomcat, Jetty based)
        &lt;/li&gt;
&lt;li&gt;Administration and monitoring utilities including Management Center, JMX, metrics and diagnostics&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The following Maven project shows a simple key get-put for each cache.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ajavageek"&gt;
        ajavageek
      &lt;/a&gt; / &lt;a href="https://github.com/ajavageek/cacheproviders"&gt;
        cacheproviders
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I tried my best to provide accurate objective information.
Please let me know in the comments if something is wrong.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;To go further:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://blog.frankel.ch/choose-cache/1/"&gt;How to choose a cache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://medium.com/outbrain-engineering/oh-my-guava-we-are-moving-to-caffeine-99387819fdbb"&gt;Oh my Guava! We are moving to Caffeine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://db-engines.com/en/system/Ehcache%3BGeode%3BHazelcast%3BIgnite%3BOracle+Coherence"&gt;System Properties Comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://blog.frankel.ch/choose-cache/2/"&gt;A Java Geek&lt;/a&gt; on October 31&lt;sup&gt;st&lt;/sup&gt;, 2021&lt;/em&gt;       &lt;/p&gt;

</description>
      <category>java</category>
      <category>cache</category>
      <category>performance</category>
    </item>
    <item>
      <title>Jetstream user banner photo upload</title>
      <author>HAMZA EL MAGHARI</author>
      <pubDate>Sun, 31 Oct 2021 17:24:58 +0000</pubDate>
      <link>https://dev.to/hamza_elmaghari/jetstream-user-banner-photo-upload-268m</link>
      <guid>https://dev.to/hamza_elmaghari/jetstream-user-banner-photo-upload-268m</guid>
      <description>&lt;p&gt;Hi, devs!&lt;br&gt;
Does anyone of you understand the proccess of uploading photos for users.&lt;br&gt;
I mean Jetstream already provide devs with the ability to uncomment fortify file user profile photo feature line;&lt;br&gt;
But what if I want to let users upload their own profile banner photo. The proccess can't be understandable.&lt;br&gt;
ANy help devs?!&lt;/p&gt;

</description>
      <category>jetstream</category>
      <category>laravel</category>
      <category>photo</category>
      <category>fortify</category>
    </item>
  </channel>
</rss>
