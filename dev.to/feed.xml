<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Windows 11, but for Web</title>
      <author>Abdul Rehman</author>
      <pubDate>Tue, 09 Nov 2021 04:45:41 +0000</pubDate>
      <link>https://dev.to/abdulrrehman0/windows-11-but-for-web-2nh4</link>
      <guid>https://dev.to/abdulrrehman0/windows-11-but-for-web-2nh4</guid>
      <description>&lt;p&gt;Hey Devs,&lt;/p&gt;

&lt;p&gt;I just tried to make Windows-11 for the web.&lt;br&gt;
Made in HTML, CSS and JAVASCRIPT.![Image description]&lt;/p&gt;

&lt;p&gt;Live demo : &lt;a href="https://window-11.netlify.app/"&gt;https://window-11.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Start Menu&lt;br&gt;
Search Menu&lt;br&gt;
Widget Menu&lt;br&gt;
Context Menu&lt;br&gt;
Taskbar hidden apps menu&lt;br&gt;
File Explorer&lt;br&gt;
Taskbar&lt;br&gt;
Quick Settings&lt;br&gt;
Calendar&lt;br&gt;
Adjust Brightness&lt;br&gt;
Adjust Volume&lt;br&gt;
Adjust icons size&lt;br&gt;
Settings&lt;br&gt;
Refresh&lt;br&gt;
New features are adding continuously Day by Day &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By : Abdul Rehman&lt;/p&gt;

&lt;p&gt;About Me:&lt;br&gt;
I am 14 years old boy From Lahore, Pakistan. I belongs to a middle class family. I am interested in things related to computer and internet. I started my journey as a Web Developer From April, 2021 and start learning Html,CSS,Js from YouTube and created Windows 11 clone that is really awesome please Try once. I make Windows 11 on my PC(Which is too much slow) with 2gb ram and 32gb HDD.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Pull Requests need more cute animals</title>
      <author>Caleb Lemoine</author>
      <pubDate>Tue, 09 Nov 2021 04:14:43 +0000</pubDate>
      <link>https://dev.to/circa10a/pull-requests-need-more-cute-animals-3oi0</link>
      <guid>https://dev.to/circa10a/pull-requests-need-more-cute-animals-3oi0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;I created a new GitHub action called &lt;a href="https://github.com/circa10a/animal-action"&gt;animal-action&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a pull request is opened to a repository, it will comment with a cute picture of either a cat, dog, or fox!&lt;/p&gt;

&lt;p&gt;The types of animals and comment supplied are completely configurable.&lt;/p&gt;

&lt;p&gt;Current animals supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cats üêà&lt;/li&gt;
&lt;li&gt;dogs üêï&lt;/li&gt;
&lt;li&gt;foxes ü¶ä&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HENLbaoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/circa10a/animal-action/main/docs/img/example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HENLbaoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/circa10a/animal-action/main/docs/img/example.png" alt="alt text" width="880" height="639"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; Wacky Wildcards&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/circa10a"&gt;
        circa10a
      &lt;/a&gt; / &lt;a href="https://github.com/circa10a/animal-action"&gt;
        animal-action
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A github action to add smiles to pull requests
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
animal-action&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/circa10a/animal-action/workflows/release/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FoTSgUJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/circa10a/animal-action/workflows/release/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/d9c534d5c602357d2e664552f67b66bcbae398cf72edf27f251cce00230cee27/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f63697263613130612f616e696d616c2d616374696f6e3f7374796c653d706c6173746963"&gt;&lt;img src="https://camo.githubusercontent.com/d9c534d5c602357d2e664552f67b66bcbae398cf72edf27f251cce00230cee27/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f63697263613130612f616e696d616c2d616374696f6e3f7374796c653d706c6173746963" alt="GitHub release (latest by date)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A github action to add smiles to pull requests&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/circa10a/animal-actiondocs/img/example.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZShl-8Sl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/circa10a/animal-actiondocs/img/example.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Inputs&lt;/h2&gt;
&lt;h2&gt;
&lt;code&gt;github_token&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Required&lt;/strong&gt; A GitHub token&lt;/p&gt;
&lt;h2&gt;
&lt;code&gt;animals&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;A comma-delimated string of types of animals pictures to comment with.&lt;/p&gt;
&lt;p&gt;Default: &lt;code&gt;"cats,dogs,foxes"&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
&lt;code&gt;pull_request_comment&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;Comment to post along with animal picture.&lt;/p&gt;
&lt;p&gt;Default:&lt;code&gt;"Thank you for your contribution. While we review, please enjoy this cute animal picture :cat:"&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
Outputs&lt;/h2&gt;
&lt;p&gt;None&lt;/p&gt;
&lt;h2&gt;
Example usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;name&lt;/span&gt;: &lt;span class="pl-s"&gt;comment&lt;/span&gt;
&lt;span class="pl-ent"&gt;on&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;pull_request&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;types&lt;/span&gt;: &lt;span class="pl-s"&gt;[opened]&lt;/span&gt;
&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
  &lt;span class="pl-ent"&gt;comment&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;runs-on&lt;/span&gt;: &lt;span class="pl-s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="pl-ent"&gt;steps&lt;/span&gt;:
      - &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;circa10a/animal-action@v1.0.0&lt;/span&gt;
        &lt;span class="pl-ent"&gt;with&lt;/span&gt;:
          &lt;span class="pl-ent"&gt;github_token&lt;/span&gt;: &lt;span class="pl-s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="pl-ent"&gt;animals&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cats,dogs&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; cats,dogs,foxes currently supported&lt;/span&gt;
          &lt;span class="pl-ent"&gt;pull_request_comment&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;üéâ Thank you for the contribution! Here&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-s"&gt;s a cute animal picture to say thank you!'&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/circa10a/animal-action"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;More smiles in Open Source is a definite win. üòÑ&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>useRef vs useState</title>
      <author>Saleh Mubashar</author>
      <pubDate>Tue, 09 Nov 2021 03:37:22 +0000</pubDate>
      <link>https://dev.to/salehmubashar/useref-vs-usestate-4m6l</link>
      <guid>https://dev.to/salehmubashar/useref-vs-usestate-4m6l</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HmuQprlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0xveau60t1ikyoz04mf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HmuQprlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0xveau60t1ikyoz04mf.jpg" alt="header" width="880" height="587"&gt;&lt;/a&gt;&lt;br&gt;
Hi guys!&lt;br&gt;
In this post we will be learning what the useRef and useState hooks are, their differences and when to use which.&lt;br&gt;
The code examples in this post will involve only functional components, however most of the differences and uses cover both class and functional components&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Complete Tutorial on useRef is uploaded at &lt;a href="https://discover.hubpages.com/technology/useRef"&gt;Hubpages&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#the-usestate-hook"&gt;
  &lt;/a&gt;
  The useState hook
&lt;/h2&gt;

&lt;p&gt;useState is a built in react hook that allows you to store information as states in a variable. It lets you add React states to functional components.&lt;br&gt;
In the example below, &lt;code&gt;useState()&lt;/code&gt; declares the state variable while the the value is stored in the count variable. &lt;code&gt;setCount&lt;/code&gt; is the function used to update this value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import useState from react&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Declare a new state variable called count&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-useref-hook"&gt;
  &lt;/a&gt;
  The useRef hook
&lt;/h2&gt;

&lt;p&gt;The useRef hook is a built-in React hook that takes one argument or parameter as its initial value and returns a reference or persisted mutable values. This reference, or ref for short, contains the value which can be retrieved using the current property.&lt;br&gt;
We can also store user inputs in refs and display the collected data like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//import useRef hook&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//create a variable to store the reference &lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nameRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//prevent page from reloading on submit&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;//output the name&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input_group&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nameRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useref-vs-usestate"&gt;
  &lt;/a&gt;
  useRef vs useState
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Data or values stored in a reference or ref remains the same, even after component re-rendering, unlike states. So, &lt;strong&gt;References do not affect component rendering but states do.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;useState returns 2 properties or an array. One is the value or state and the other is the function to update the state. In contrast, useRef returns only one value which is the actual data stored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the reference value is changed, it is updated without the need to refresh or re-render. However in useState, the component must render again to update the state or its value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-refs-and-states"&gt;
  &lt;/a&gt;
  When to use Refs and States
&lt;/h2&gt;

&lt;p&gt;Refs are useful when getting user input, DOM element properties and storing constantly updating values.&lt;br&gt;
However if you are storing component related info or use methods in components states are the best option.&lt;/p&gt;




&lt;p&gt;Thanks for reading!. &lt;br&gt;
Note!: There probably is much more that could have been mentioned here but in short, these were the most important differences.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://discover.hubpages.com/technology/useRef"&gt;Complete Tutorial on useRef&lt;/a&gt; is uploaded at Hubpages&lt;br&gt;
and also follow me on &lt;a href="https://twitter.com/SyntaxE85827144"&gt;twitter&lt;/a&gt;.&lt;br&gt;
Cheers :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>React UseContext is Simple</title>
      <author>yqgoh</author>
      <pubDate>Tue, 09 Nov 2021 02:40:21 +0000</pubDate>
      <link>https://dev.to/kenji_goh/react-usecontext-is-simple-48fa</link>
      <guid>https://dev.to/kenji_goh/react-usecontext-is-simple-48fa</guid>
      <description>&lt;p&gt;In Parent component or App.js, we just need to create &amp;amp; export the context, literally by using the createContext hooks! Simply use these few lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextToPassDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then wrap the context Provider over the child components you wish to provide the context&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;contextToPassDown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dataToPassDown&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/contextToPassDown.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in any Child components that are wrapped by the  tag, we just need to use the useContext hooks!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in ChildComponent.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;contextToPassDown&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contextToUse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contextToPassDown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;contextToUse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The use cases for useContext are usually:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To Pass down logged-in user info to authorized components&lt;/li&gt;
&lt;li&gt;For 'light' or 'dark' theme&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may practice using this link to: &lt;a href="https://codesandbox.io/s/usecontext-demo-solution-tujgu?file=/src/components/App.js"&gt;codesandbox&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>usecontext</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>100 d√≠as de c√≥digo: 6, el camino a seguir para ser un desarrollador full stack</title>
      <author>Daro</author>
      <pubDate>Tue, 09 Nov 2021 01:15:50 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-6-el-camino-a-seguir-para-ser-un-desarrollador-full-stack-3768</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-6-el-camino-a-seguir-para-ser-un-desarrollador-full-stack-3768</guid>
      <description>&lt;p&gt;¬°Hey, hey, hey!&lt;/p&gt;

&lt;p&gt;Cuando alguien comienza a programar casi nadie se detiene a pensar en preguntas como ¬øCu√°l es el mejor camino que debe seguir? ¬øC√≥mo deber√≠a hacerlo? ¬øCu√°l es mi motivaci√≥n?&lt;/p&gt;

&lt;p&gt;Es ah√≠ cuando al pasar el tiempo y aprender lenguajes y frameworks el camino se pierde y se va como un tornado sin un destino, solo atravesando lugares sin darse cuenta hacia donde va. &lt;/p&gt;

&lt;p&gt;No lo digo porque estar generalizando si no porque eso es lo que me paso a mi. &lt;br&gt;
Hace tiempo que realmente no me he dado cuenta de que necesitaba un camino a seguir y agradezco a &lt;a href="https://dev.to/rammina"&gt;Rammina&lt;/a&gt; una vez mas porque me mostro una gu√≠a con la que realmente siento que puedo superar el reto de convertirme en un desarrollador full stack.&lt;/p&gt;

&lt;p&gt;La gu√≠a es la siguiente &lt;a href="https://www.theodinproject.com/"&gt;The odin project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En ella me encontr√© con bastante contenido que adem√°s de ser gratuito siento que realmente me puede ayudar a ir en un camino mas correcto para lograr mi meta.&lt;/p&gt;

&lt;p&gt;Cabe destacar que la gu√≠a esta en ingles pero el traductor integrado en Google Chrome hace lo suyo y con ello logro comprender todos los materiales que contiene. &lt;/p&gt;

&lt;p&gt;Es curioso porque a pesar de que ya hab√≠a conocido gu√≠as como freecodecamp o cursos similares lo que te encuentras en ella es mas una experiencia porque en ella te hablan de entrevistas y motivaci√≥n entre otras cosas adem√°s del c√≥digo en el cual puedes encontrar proyectos que te ayuden a crear un historial de tus progresos en el aprendizaje. &lt;/p&gt;

&lt;p&gt;Cabe destacar que esto no es publicidad ni mucho menos, no se si desean remuneraci√≥n econ√≥mica con el trabajo que puedes encontrar pero desde luego es completamente opcional. Sin duda te lo recomiendo si quieres aprender desarrollo web full stack.&lt;/p&gt;

&lt;p&gt;Ahora sin mas pre√°mbulo volvamos a la secci√≥n regular donde explico cuales son los logros.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Comenc√© a practicar Touch typing para mejorar mi velocidad de escritura en el teclado.&lt;/li&gt;
&lt;li&gt;Escrib√≠ mi motivaci√≥n para volverme un desarrollador full stack.&lt;/li&gt;
&lt;li&gt;Termine con el dise√±o de mi pagina del cual les dejo ver algunas im√°genes abajo.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GmYysjsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2zg7h71i9g1ds226lm1.png" alt="dise√±o" width="749" height="684"&gt;
&lt;/li&gt;
&lt;li&gt;Comenc√© a codificar mi pagina web personal con tecnolog√≠as b√°sicas como HTML, Css y JavaScript ya que realmente no necesita el uso de frameworks pues es una pagina sencilla.&lt;/li&gt;
&lt;li&gt;Avance en la gu√≠a de the odin project.&lt;/li&gt;
&lt;li&gt;Aprend√≠ a afrontar y prepararte para una entrevista de trabajo.&lt;/li&gt;
&lt;li&gt;Aprend√≠ las fases de aprendizaje de software como lo son:

&lt;ul&gt;
&lt;li&gt;La luna de miel de la mano(The Hand Holding Honeymoon).&lt;/li&gt;
&lt;li&gt;El acantilado de la confusi√≥n(The Cliff of Confusion).&lt;/li&gt;
&lt;li&gt;El desierto de la desesperaci√≥n(The Upswing of Awesome).&lt;/li&gt;
&lt;li&gt;El auge de lo impresionante(The Upswing of Awesome).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y muchas cosas mas!&lt;/p&gt;

&lt;p&gt;Espero que les haya gustado este blog, recuerden que esto &lt;strong&gt;no es una gu√≠a&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Que tengan bonita noche y mucho √©xito con sus proyectos!&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>webdev</category>
      <category>career</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Learn Github &amp;&amp; Git in an afternoon (Beginners) üê±‚Äçüíª‚òÅÔ∏è</title>
      <author>Jose Antonio Felix </author>
      <pubDate>Tue, 09 Nov 2021 00:40:01 +0000</pubDate>
      <link>https://dev.to/jafb321/learn-github-git-in-an-afternoon-beginners-20de</link>
      <guid>https://dev.to/jafb321/learn-github-git-in-an-afternoon-beginners-20de</guid>
      <description>&lt;p&gt;If you want to have your code available in a cloud git repository (for free) and be able to collaborate with other developers, this tutorial is for you üòéüíª. Firstly, we have to know some concepts:&lt;/p&gt;

&lt;p&gt;
  Git
  &lt;br&gt;
If you don't know Git (in basic terms), you need to see the post attached bellow before start this tutorial üëáüèª


&lt;div class="ltag__link"&gt;
  &lt;a href="/jafb321" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e56tJ5Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xtPa33d5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/730606/daa63256-d553-4f15-a12d-ddfb40d2c17e.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e56tJ5Uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xtPa33d5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/730606/daa63256-d553-4f15-a12d-ddfb40d2c17e.jpeg" alt="jafb321"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jafb321/learn-git-in-an-afternoon-beginners-200m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn Git in an afternoon (Beginners) üòéüê±‚Äçüíª&lt;/h2&gt;
      &lt;h3&gt;Jose Antonio Felix  „Éª Oct 27 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#code&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;


  Github
  &lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h3&gt;

&lt;p&gt;Is a platform where you can put your code in a cloud &lt;strong&gt;git repository&lt;/strong&gt; completely free and where other developers could see your code and contribute or use it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bTSzRCon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvoo4wdp66oqddqh7qio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bTSzRCon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvoo4wdp66oqddqh7qio.png" alt="Github logo" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github is &lt;strong&gt;very useful&lt;/strong&gt; and &lt;strong&gt;is used by a lot of developers in the world&lt;/strong&gt;. This tool could allow you to improve as developer and be atractive to software companies.&lt;/p&gt;



&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-of-all"&gt;
  &lt;/a&gt;
  First of all
&lt;/h4&gt;

&lt;p&gt;We'll learn the Github (and some Git) basics in this tutorial, if you already know Git fundamentals (repository, commits, log, etc) you're fine, but if you don't, please check the post attached on the previous &lt;strong&gt;"Git"&lt;/strong&gt; tab. Good luck!ü§†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-github"&gt;
  &lt;/a&gt;
  How to use Github
&lt;/h2&gt;

&lt;p&gt;First, we have few things that we should have/know:&lt;br&gt;
  Pre-requisites
  &lt;ul&gt;
&lt;li&gt;A Github account. &lt;a href="https://github.com/signup"&gt;Create one here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Git installed on your PC. 
&lt;a href="https://dev.to/jafb321/learn-git-in-an-afternoon-beginners-200m"&gt;Learn Git&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="//github.com/JAFB321"&gt;Follow me on Github&lt;/a&gt; üê±‚ÄçüèçüéØ&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;Now we can start the tutorial properly, next we'll see some sections where we will:&lt;/p&gt;

&lt;p&gt;
  Create a Github repository ‚òÅÔ∏èüê±‚Äçüëì
  &lt;br&gt;
When you're in the Github main page (logged), you'll see this button:

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3cqlPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0txa73l7w4xwdzjodzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZ3cqlPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0txa73l7w4xwdzjodzq.png" alt="Github create repository button" width="442" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on it and you'll see this page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BeH90PzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifeoyl56ze0gsldrhvz0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BeH90PzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifeoyl56ze0gsldrhvz0.png" alt="Github repository create page" width="810" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This page is very intuitive, but I'll explain the elements on it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Repository name&lt;/strong&gt;: Is the name wich the people will see in your repositories list, find a cool and explicative one.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Description&lt;/strong&gt;: Here you'll explain the project in a few words. Maybe you could write the objective or the tech used on it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Public/Private&lt;/strong&gt;: If you want to show your repo to other developers, set &lt;strong&gt;public&lt;/strong&gt; (recommended). If you want to keep the project only for you, set &lt;strong&gt;private&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following 3 options can be skipped for now, we just have to click on &lt;strong&gt;create repository&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gk2yMucL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn3dc3g5julqeal0qxwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gk2yMucL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vn3dc3g5julqeal0qxwj.png" alt="Github create repository extra options" width="590" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, We have done our repository successfully, we'll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWCJiYQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19ycwota9r6qaf8fht5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWCJiYQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19ycwota9r6qaf8fht5b.png" alt="Blank github repository" width="880" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if you don't understand what that is, we'll see about it in the next steps. For now, you just need to know that you have your first Github repository! üê±‚Äçüëì&lt;br&gt;&lt;/p&gt;

&lt;/p&gt;

&lt;p&gt;
  Configure and push your local repository üß™
  &lt;br&gt;
We already have our Github repository, but also we need a local Git repository on our pc. If you don't know how to create one, you need to see &lt;a href="https://dev.to/jafb321/learn-git-in-an-afternoon-beginners-200m"&gt;this post&lt;/a&gt;.

&lt;p&gt;Okay, the following is an example local repository with 3 files and few commits:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hCQFiW6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z6y1e5jk1jvfx4cr841.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCQFiW6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z6y1e5jk1jvfx4cr841.png" alt="Basic repository project" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have to upload or &lt;strong&gt;push&lt;/strong&gt; our local repository to the Github repository, is like sync both. For this we have to do the following:&lt;/p&gt;

&lt;p&gt;Do you remember the github page of our new repository? there we found this commands:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2sJ5R84u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc5lt7xf1e99873wlrn1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2sJ5R84u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc5lt7xf1e99873wlrn1.png" alt="Github repository push commands" width="642" height="154"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin URL_EXAMPLE&lt;/code&gt; &lt;br&gt;
This git command allow you to add a new &lt;em&gt;remote repository&lt;/em&gt; (URL) to your local repository, that means that you could upload your commits (push), update your local repository (pull) and more. &lt;/p&gt;

&lt;p&gt;In this case, we're adding a new remote &lt;code&gt;URL_EXAMPLE&lt;/code&gt;  with the alias &lt;code&gt;origin&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -M main&lt;/code&gt;&lt;br&gt;
This command change the &lt;em&gt;branch&lt;/em&gt; name of our repository to "main". The reason of the change is because by default git names the branch "master" and Github need a branch named "main" (to avoid racial discrimination of &lt;em&gt;master and slave&lt;/em&gt;).&lt;br&gt;
&lt;em&gt;The &lt;strong&gt;branch&lt;/strong&gt; concept needs a more complete explanation to be understood, but for now isn't necesary, just see it like the main name of this repository&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u origin main&lt;/code&gt;&lt;br&gt;
This is the interesting thing. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;git push&lt;/code&gt; command allow us to &lt;strong&gt;push&lt;/strong&gt; (upload) our commits to the github repo.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;origin main&lt;/code&gt; indicates that we want to &lt;strong&gt;push&lt;/strong&gt; the changes to the remote named "origin" (setted on the first command) and the branch named "main" (setted on the previous command)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-u&lt;/code&gt; is an option to set the &lt;code&gt;origin main&lt;/code&gt; options to default on the future git push/pulls calls.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we know what this commands are for, so we can type them on the terminal an check the results:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDVtaG8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb6cmb5qg1i8b1mzqtqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDVtaG8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xb6cmb5qg1i8b1mzqtqt.png" alt="First push to github repo" width="880" height="243"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;(When you enter the last command a window will open and it will ask you to login to Github, just enter your account and password and continue. This will happen only 1 time)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you refresh the repository page, you'll see your files and you could check interesting info like the commits made, the languages used on the repo and it's description.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J714BEqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4leoac5olysi7liifka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J714BEqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4leoac5olysi7liifka.png" alt="Github repository" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we'll have our repository on Github! And the best part is comming! In the next sections you'll learn what things you can do with Git and Github.&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;
  Push new commits üöÄ
  &lt;br&gt;
In the last section we have pushed our local repository to the Github. Now, both repositories have the same commits. But maybe we want to make more local changes and then commit and push it to the Github repo again. Okay, Let's do it.

&lt;p&gt;First, we'll make some changes:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4dD0kY-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu8mkzy06s6wpzeres91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4dD0kY-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu8mkzy06s6wpzeres91.png" alt="File change" width="477" height="229"&gt;&lt;/a&gt;&lt;br&gt;
Then, add the changes and commit it:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e48VIUjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utvqbahian4a0epavnac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e48VIUjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utvqbahian4a0epavnac.png" alt="Add and commit the changes" width="700" height="88"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can get the repository log (history) to see the new commit:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvr5-vi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hoy58nyx0z3fzypi3kz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvr5-vi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hoy58nyx0z3fzypi3kz.png" alt="Repository log with new commit" width="552" height="128"&gt;&lt;/a&gt;&lt;br&gt;
As we can see, the new commit was made successfully. But this commit is only in the local repository, and it need to be pushed to the Github repo. &lt;/p&gt;

&lt;p&gt;For this, we can type one of the following commands:&lt;br&gt;
&lt;code&gt;git push&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;git push origin main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Both work fine, the difference is that the second one declare explicitly in wich "remote" and "branch" the commits will be pushed. And the first one just take the &lt;em&gt;default&lt;/em&gt; settings.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(If you rememeber, this "remote" and "branch" default settings was been setted in the previous section on the &lt;code&gt;git push -u origin main&lt;/code&gt; command, thanks to the &lt;code&gt;-u&lt;/code&gt; option&lt;/em&gt;) ü§Ø&lt;/p&gt;

&lt;p&gt;When we enter one of this commands, we'll get:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWWdFbYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc90g3qf19dvd4iomgt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWWdFbYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc90g3qf19dvd4iomgt9.png" alt="New commit pushed successfully message" width="652" height="227"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if we go to the Github repository page again and refresh it, we'll see our new commit(s) üòé.&lt;br&gt;&lt;/p&gt;

&lt;/p&gt;

&lt;p&gt;
  Clone a repository üêë
  &lt;br&gt;
In the last sections, we have created new repositories and push our local commits to github, but, if we want to download a Github repository to our local computer, what do we have to do? Well, this process is called "cloning".

&lt;p&gt;To clone a repository we have to know some things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We need the real URL of the repository wich we want to clone. For get it, we have to go to the github repository page and copy this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---aI4N8Wo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dajvs1dib11hhmtjw53m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---aI4N8Wo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dajvs1dib11hhmtjw53m.png" alt="Link to clone a github repository" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can clone whatever public repository that we want, this means that we can go to the page of any repository of any user and copy it's link and clone it on our pc, this is awesome ü§© because we are able to download every open source code , for example we can go to the oficial &lt;a href="https://github.com/microsoft/vscode"&gt;Microsoft Visual Studio code repository&lt;/a&gt;, clone it, change it's code and modify it as we want üß®&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this example, we'll clone this &lt;a href="https://github.com/JAFB321/devto-learn-github"&gt;Example repository&lt;/a&gt;. So, go and copy it's URL.&lt;/p&gt;

&lt;p&gt;Now, we have to open a terminal and go to the folder where we want to clone the repo:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-g7szC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmmos03lecod1ny8b4gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl-g7szC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmmos03lecod1ny8b4gl.png" alt="Terminal in a folder" width="307" height="95"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;In my case, I want to clone it in &lt;code&gt;D:\personal-projects&amp;gt;&lt;/code&gt; folder.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we just have to type this command:&lt;br&gt;
&lt;code&gt;git clone &lt;a href="https://github.com/JAFB321/devto-learn-github.git"&gt;https://github.com/JAFB321/devto-learn-github.git&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We'll get something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PsSwxu-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/indwy5xvtdlm7wfisczi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PsSwxu-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/indwy5xvtdlm7wfisczi.png" alt="Git repository clone result" width="819" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should have created a new folder called like the repository cloned. In this case, the folder is &lt;code&gt;D:\personal-projects\devto-learn-github&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then this folder will have all repository files:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--keCYil1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wufbe58st4mey9h0n6oj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keCYil1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wufbe58st4mey9h0n6oj.png" alt="Repository folder files" width="672" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can open a terminal on this folder and type &lt;code&gt;git log --oneline&lt;/code&gt; or &lt;code&gt;git status&lt;/code&gt; to check the new local repository:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2etbIwRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0nn0rnxp7ah2im1o15k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2etbIwRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0nn0rnxp7ah2im1o15k.png" alt="Cloned local repository" width="672" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can make changes and commit them as we want. But, can we &lt;strong&gt;push&lt;/strong&gt; this new commits to the original Github repo? ü§î In this case, you won't be able to do that, Why?ü§® because the repository isn't yours, you don't have permission to push changes to repositories that you aren't the owner (or where you don't have explicit access).&lt;/p&gt;

&lt;p&gt;For get permission and do that, we have 2 options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Request write access to a Github repository to the owner.&lt;/li&gt;
&lt;li&gt;Make a copy of the Github project on your own Github repositories or &lt;strong&gt;Fork a project&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both options are material for another tutorial, we won't see them in this one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obviously, if you clone a repository wich you're the owner (like the repo that you created on the first sections) you are able to push your changes to the Github repo without problem.&lt;/em&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;
  Update local repo with last changes üîÅ
  &lt;br&gt;
Imagine you have a Github repo, and you clone it on you laptop üíª and your desktop pc üñ•Ô∏è. You go to the laptop and do some changes and make a couple of committs, then you &lt;strong&gt;push&lt;/strong&gt; that commits to the Github repo. Now, you have 1 local repository outdated (in your desktop pc).

&lt;p&gt;To update the desktop pc repository, you must &lt;strong&gt;pull&lt;/strong&gt; the new changes from the Github repo. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-solve-the-problem"&gt;
  &lt;/a&gt;
  How to solve the problem
&lt;/h3&gt;

&lt;p&gt;To do that, we'll clone one of our Github repo 2 times in our pc.&lt;br&gt;
We'll create 2 folders to clone the repo 1 time on each folder:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v32g_S2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxqox6ymzhm7k1y4yr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v32g_S2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxqox6ymzhm7k1y4yr9.png" alt="Github cloned repos Folders" width="184" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXjc2Gtr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfo96g4j1hn3ni1gv8sr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXjc2Gtr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfo96g4j1hn3ni1gv8sr.png" alt="Cloning a repo on 2 folders" width="532" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have 2 copies of the same Github repository on our pc. I cloned &lt;a href="https://github.com/JAFB321/devto-learn-github"&gt;my own repository&lt;/a&gt; but you must clone one of your own Github repos (for example the repo you created in first sections).&lt;/p&gt;

&lt;p&gt;Now, we'll make some new commits on the &lt;code&gt;example-repo1&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QsTJu6g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl7zdxa9wvjl2n2pwwkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QsTJu6g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl7zdxa9wvjl2n2pwwkr.png" alt="Commits on example repo 1" width="720" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And push them:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6jyAWigg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4rkifhrgmmtsm0c8w29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6jyAWigg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4rkifhrgmmtsm0c8w29.png" alt="Push new commits of example repo 1" width="655" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that you don't need to type &lt;code&gt;-u origin main&lt;/code&gt; because is a cloned repository, and these options were set in the cloning process automaticaly&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Once this is done, we have the Github repository and &lt;code&gt;example-repo1&lt;/code&gt; updated, but &lt;code&gt;example-repo2&lt;/code&gt; is outdated because it doesn't have the 2 last commits.&lt;/p&gt;

&lt;p&gt;To update &lt;code&gt;example-repo2&lt;/code&gt; we need to &lt;strong&gt;pull&lt;/strong&gt; this new commits from Github repo. For that we have to type one of the following commands on the terminal in &lt;code&gt;example-repo2&lt;/code&gt; repo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt; &lt;br&gt;
or&lt;br&gt;
&lt;code&gt;git pull origin main&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Both work fine, the difference is the same of the &lt;code&gt;git push&lt;/code&gt; command where &lt;code&gt;origin main&lt;/code&gt; are the "remote" and "branch" explicity defined.&lt;/p&gt;

&lt;p&gt;When we enter one of these comands, we'll get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0Ph9Y8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z4c7md5ck79pei5g51w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0Ph9Y8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z4c7md5ck79pei5g51w.png" alt="Git pull new changes from github repo" width="633" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The elements inside blue rectangle are the changes summary of the commits downloaded. If we run &lt;code&gt;git log --oneline&lt;/code&gt; we'll see these new commits:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LKRceBDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl0b9w9nxkzoqjqgnpxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKRceBDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl0b9w9nxkzoqjqgnpxj.png" alt="Updated example repo 2 log" width="724" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have the 2 repositories updated and ready to work üòé. But take care about pull and push your commits on 2+ copies of the same cloned repository, because if you make different local commits on each repo separately and try to push them at same time you could get a &lt;em&gt;merge error&lt;/em&gt; üå™Ô∏è, but don't worry there is an easy solution for those kinds of problems wich we'll see on future Git tutorials üê±‚Äçüèç.&lt;br&gt;&lt;/p&gt;

&lt;/p&gt;




&lt;p&gt;There are a lot of useful and interesting things that you can do with Git + Github, in this tutorial you have learned the most &lt;em&gt;important&lt;/em&gt; topics ü•á.&lt;/p&gt;

&lt;p&gt;You have learned a lot but there are still more things to learn wich can help you to be a very efficient developer, contribute to the open source community and grow in the IT world ü§ñ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Shmee8vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r74qfs5joj5e0kmz7jk0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Shmee8vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r74qfs5joj5e0kmz7jk0.gif" alt="git meme" width="640" height="358"&gt;&lt;/a&gt;&lt;br&gt;
(If you want to understand the meme, don't forget follow me to learn about git branches, merge, fork and more üéà)&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
      <category>code</category>
    </item>
    <item>
      <title>Intersection observer  API</title>
      <author>thatFemicode</author>
      <pubDate>Mon, 08 Nov 2021 23:27:42 +0000</pubDate>
      <link>https://dev.to/thatfemicode/intersection-observer-api-3aop</link>
      <guid>https://dev.to/thatfemicode/intersection-observer-api-3aop</guid>
      <description>&lt;p&gt;Modern websites depend on scroll events that is the Clich√© way of handling scrolling (window.scrollY). Scrolling can trigger lazy-loading of images and data and so much more. Unfortunately these scroll events are unreliable and intensive to use in my opinion and causes implementation issues which leads to poor browser performance.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Intersection Observer API&lt;/strong&gt; was created as a solution to solve the issues associated with "scroll events". It is  browser API that provides users a way to observe given elements and monitor changes in their intersection like the name says "INTERSECTION" with a given ancestor element or the viewport (Browser window) itself.&lt;/p&gt;

&lt;p&gt;Talking about the problem with the current implementation which is the scroll event. Consider a modern website , there are a lot of scroll events going on that we do not notice as users. The ads on the site load when scrolled into view, new contents load when the bottom of the page is reached, elements animate from time to time, and images are loaded lazily at times as the user reached them (Note: not all sites lazy load images). I myself have only done this once.  These scroll events rely basically on countless loops calling performance intensive methods like the &lt;strong&gt;Element.getBoundingClientRect()&lt;/strong&gt; to get the required position information. &lt;/p&gt;

&lt;p&gt;When these methods run, its all on the main thread and as we know JavaScript is a single threaded language meaning an issue with one causes a break in the code. ** The Intersection Observer API passes off management of intersection events to the browser by using callback functions tied to the intersection status of specific elements. The browser can manage these events more effectively, optimizing for performance.**&lt;/p&gt;

&lt;p&gt;The API is currently supported on most browsers, Chrome, Edge, Firefox and even Safari, which is pretty nice. &lt;/p&gt;

&lt;p&gt;Lets take a look at some of the Concepts and basic usage of the observer. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concepts-amp-basic-usage"&gt;
  &lt;/a&gt;
  Concepts &amp;amp; Basic Usage
&lt;/h1&gt;

&lt;p&gt;To fully understand why the Intersection Observer API is so much better for performance, let‚Äôs start with a look at the basics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definitions"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h2&gt;

&lt;p&gt;A few key terms are used to define any instance of an Intersection Observer. The root is the element which waits for an object to intersect it. By default, this is the browser viewport, but any valid element may be used.&lt;/p&gt;

&lt;p&gt;While the root element is the basis of a single IntersectionObserver, the observer can monitor many different targets. The target may also be any valid element, and the observer fires a callback function when any target intersects with the root element.&lt;/p&gt;

&lt;p&gt;Checkout the GIF in the link below to get a bit of visual representation. &lt;br&gt;
!(&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zi0922bwgvzlrsz5p1u.gif"&gt;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zi0922bwgvzlrsz5p1u.gif&lt;/a&gt;) &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#basic-usage"&gt;
  &lt;/a&gt;
  Basic Usage
&lt;/h2&gt;

&lt;p&gt;Setting up a simple IntersectionObserver is straightforward. First, call the IntersectionObserver constructor. Pass a callback function and desired options to the constructor function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const options = {
    root: document.querySelector('#viewport'),
    rootMargin: '0px',
    threshold: 1.0
};
const observer = new IntersectionObserver(callback, options);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen above, a few options are available to set in the constructor:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#root"&gt;
  &lt;/a&gt;
  root
&lt;/h3&gt;

&lt;p&gt;The root is the element which is used to check for intersections of the target element. This option accepts any valid element, though it‚Äôs important that the root element be an ancestor of the target element for this to work. If a root isn‚Äôt specified (or null is the provided value), the browser viewport becomes the root.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rootmargin"&gt;
  &lt;/a&gt;
  rootMargin
&lt;/h3&gt;

&lt;p&gt;The rootMargin value is used to grow or shrink the size of the root element. Values are passed in a string, with a CSS-like format. A single value can be provided, or a string of multiple values to define specific sides (e.g. '10px 11% -10px 25px).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#threshold"&gt;
  &lt;/a&gt;
  threshold
&lt;/h3&gt;

&lt;p&gt;Last, the threshold option specifies the minimum amount the target element must be intersecting the root for the callback function to fire. Values are floating point from 0.0 - 1.0, so a 75% intersection ratio would be 0.75. If you wish to fire the callback at multiple points, the option also accepts an array of values, e.g. ~[0.33, 0.66, 1.0]~.&lt;/p&gt;

&lt;p&gt;Once the IntersectionObserver instance is created, all that‚Äôs left is to provide one or more target elements for observation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const target = document.querySelector('#target');
observer.observe(target);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, the callback function will fire anytime the target(s) meet the threshold for intersection&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const callback = function(entries, observer) {
    entries.forEach((entry) =&amp;gt; {
        // do stuff here
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#calculation-intersections"&gt;
  &lt;/a&gt;
  Calculation Intersections
&lt;/h2&gt;

&lt;p&gt;It‚Äôs important to understand how intersections are calculated. First, the Intersection Observer API considers everything to be a rectangle for the sake of this calculation. These rectangles are calculated to be the smallest they can possibly be, while still containing all target content.&lt;/p&gt;

&lt;p&gt;Check the GIF below to get a visual representation &lt;br&gt;
!(&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8fiu3aiw33319pnqag5.gif"&gt;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8fiu3aiw33319pnqag5.gif&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Beyond the bounding boxes, consider any adjustments to the bounding box of the root element based on rootMargin values. These can pad or decrease the root size.&lt;/p&gt;

&lt;p&gt;Check out the GIF below to get a visual representation of the bove&lt;/p&gt;

&lt;p&gt;!(&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbslr3nm3gik3kizccnq.gif"&gt;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbslr3nm3gik3kizccnq.gif&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Finally, it‚Äôs crucial to understand that unlike traditional scroll events, Intersection Observer isn‚Äôt polling constantly for every single change in intersection. Instead, the callback is only called when the provided threshold is reached (approximately). If multiple checks are required, simply provide multiple thresholds.&lt;/p&gt;

&lt;p&gt;You want to learn more, check out this series by Kevin Powell i used in getting an understanding of the intersection observer API&lt;br&gt;
Kevin Powell: &lt;a href="https://www.youtube.com/watch?v=T8EYosX4NOo&amp;amp;list=PLC2rzhluWUp-iWl6P2S7JG3xkHxeVCgBs"&gt;Link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>intersectionobserverapi</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How I decided which languages to use for my tech startup</title>
      <author>Kalob Taulien</author>
      <pubDate>Mon, 08 Nov 2021 23:18:30 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/how-i-decided-which-languages-to-use-for-my-tech-startup-1ida</link>
      <guid>https://dev.to/kalobtaulien/how-i-decided-which-languages-to-use-for-my-tech-startup-1ida</guid>
      <description>&lt;p&gt;This is article numero dos (that means number 2) in the series about starting &lt;a href="https://arbington.com/"&gt;Arbington.com&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lets talk about how I decided which languages to use at my startup&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-boils-down-to"&gt;
  &lt;/a&gt;
  What it boils down to...
&lt;/h2&gt;

&lt;p&gt;Simplicity. Efficiency. Community support. And.. do I know it?&lt;/p&gt;

&lt;p&gt;It all boils down to these four things. And most startups probably say this, I get it. I ain't &lt;em&gt;that&lt;/em&gt; unique :P &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplicity"&gt;
  &lt;/a&gt;
  Simplicity
&lt;/h2&gt;

&lt;p&gt;Which language is the easiest to read, write and learn? &lt;/p&gt;

&lt;p&gt;Python. &lt;/p&gt;

&lt;p&gt;Even if you disagree, it's Python. Like, it's just a fact of programming. &lt;/p&gt;

&lt;p&gt;I need code to not become a crazy nest of curly brackets. Something I can hack away at and it maintains it's cleanliness (to some degree). &lt;/p&gt;

&lt;p&gt;It's easy for future developers to pick up and learn quickly, and easy to read through to understand the business logic. &lt;/p&gt;

&lt;p&gt;Plus, there are a lot of Python developers so I'll never be worried about finding a developer (it's the worlds most popular language, officially). &lt;/p&gt;

&lt;p&gt;And! It has an insane ecosystem of packages that lets you install awesome tools super fast. Need to make an API request? Use &lt;code&gt;requests&lt;/code&gt;. Need to parse HTML? Use BeautifulSoup4. This kind of "need &lt;em&gt;x&lt;/em&gt;, use &lt;em&gt;y&lt;/em&gt;" pattern goes on for AGES. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#efficiency"&gt;
  &lt;/a&gt;
  Efficiency
&lt;/h2&gt;

&lt;p&gt;Python is relatively fast. As is JavaScript. Both of which I use &lt;strong&gt;A LOT&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Are they the fastest out there? Heck no. But they are well supported, popular, and &lt;em&gt;fast enough&lt;/em&gt; for what I need. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-support"&gt;
  &lt;/a&gt;
  Community support
&lt;/h2&gt;

&lt;p&gt;I touched on this a little in the &lt;code&gt;Simplicity&lt;/code&gt; section. But having access to packages, libraries and frameworks is very important. &lt;/p&gt;

&lt;p&gt;Don't reinvent the wheel. &lt;/p&gt;

&lt;p&gt;And when you inevitably have questions, are there a sufficient amount of answers available on the web? &lt;/p&gt;

&lt;p&gt;Python ‚úîÔ∏è &lt;br&gt;
JavaScript ‚úîÔ∏è &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-i-know-it"&gt;
  &lt;/a&gt;
  Do I know it?
&lt;/h2&gt;

&lt;p&gt;This is the most important part, to be honest. &lt;/p&gt;

&lt;p&gt;Build using languages you know. Don't learn a programming language just to build something new. That's how you write unmaintainable code. &lt;/p&gt;

&lt;p&gt;So, I built using what I know. But I also know other languages, so I also chose what was simple and easy for future developers to pick up after me. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-this-important-to-you"&gt;
  &lt;/a&gt;
  Why is this important to you?
&lt;/h2&gt;

&lt;p&gt;You're going to see lots of companies showing off their tech stacks and you'll be pulled in 100 different directions with no idea what to learn. &lt;/p&gt;

&lt;p&gt;Pick a language, learn it, then apply for those jobs (if you're looking for a job). You can't be the perfect dev for every company, ever. Just do what you can, and see which jobs exist for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-languages-and-other-things-do-we-use"&gt;
  &lt;/a&gt;
  So what languages (and other things) do we use?
&lt;/h2&gt;

&lt;p&gt;Remember the above because I'm going to blow your mind with one of these. &lt;/p&gt;

&lt;p&gt;Here is what we use: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML/CSS/JavaScript (because that's what 100% of all websites use) &lt;/li&gt;
&lt;li&gt;jQuery. Not React.js. React is awesome! But it's slow to code when your company is moving at the speed of light. Told you - mind blown yet!?&lt;/li&gt;
&lt;li&gt;Tailwind CSS. It's awesome once you learn about it and how it works. Truly, it's powerful. We wrote like 50 lines of custom CSS, the rest is all in the &lt;code&gt;class=""&lt;/code&gt; attribute. &lt;/li&gt;
&lt;li&gt;Python. Because it's powerful, simple, etc. &lt;/li&gt;
&lt;li&gt;Django. It's a batteries included framework that lets you get a lot done with very little code, and it's super secure (and open source!) &lt;/li&gt;
&lt;li&gt;PostgresQL. Just needed a database, and Postgres is a world class database and it's also the one Django devs prefer. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, we use jQuery. Why? It's simple, we know it inside and out, it's fast to develop with and the barrier to entry is incredibly low. And it's a wee bit less typing than vanilla JS with cross browser compatibility. But we'll eventually move to something else like Vue or React, I'm sure. &lt;/p&gt;

&lt;p&gt;In the next article I'll highlight which frameworks and libraries we use, and why. &lt;/p&gt;

</description>
      <category>startup</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding timing attacks with code examples</title>
      <author>propelauthblog</author>
      <pubDate>Mon, 08 Nov 2021 23:10:04 +0000</pubDate>
      <link>https://dev.to/propelauth/understanding-timing-attacks-with-code-examples-32e6</link>
      <guid>https://dev.to/propelauth/understanding-timing-attacks-with-code-examples-32e6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#vulnerable-login-example"&gt;
  &lt;/a&gt;
  Vulnerable login example
&lt;/h2&gt;

&lt;p&gt;The following code snippet has a subtle security issue with it. Can you tell what's wrong?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Returns true if the email/password pair is valid&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Fetch the password hash from the DB by email address&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchPasswordHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// If there was no match, return false&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Bcrypt is "a library to help you hash passwords"&lt;/span&gt;
    &lt;span class="c1"&gt;// Here we use the compare function to check that the&lt;/span&gt;
    &lt;span class="c1"&gt;//   provided password matches the hashed password in the DB&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doesPasswordMatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;doesPasswordMatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Fetches the password hash from the DB&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchPasswordHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// impl not important&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a hint, let's look at how long a few calls to &lt;code&gt;isValidCredentials&lt;/code&gt; takes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Checking &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;isValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Checking &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;emailAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@test.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Checking test@test.com: 63.813ms&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test@test.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Checking test@test.com: 62.867ms&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test2@test.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Checking test2@test.com: 4.017ms&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;timeIsValidCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test3@test.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Checking test3@test.com: 4.008ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a noticeable difference between how long &lt;code&gt;test@test.com&lt;/code&gt; emails take and &lt;code&gt;test2@test.com&lt;/code&gt; or &lt;code&gt;test3@test.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It turns out that the issue is these lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// If there was no match, return false&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By returning early if there was no match, an attacker can easily tell that &lt;code&gt;test@test.com&lt;/code&gt; has an account, but &lt;code&gt;test2@test.com&lt;/code&gt; and &lt;code&gt;test3@test.com&lt;/code&gt; don't.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timing-attacks"&gt;
  &lt;/a&gt;
  Timing attacks
&lt;/h2&gt;

&lt;p&gt;This is a common example of a timing attack. They are a class of attacks where the length of time that your application takes to perform a task leaks some information.&lt;/p&gt;

&lt;p&gt;In the login case, the difference in times made it pretty obvious from even one request. If the difference was more subtle, an attacker can make many requests over a long time and average them together to distinguish different cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-a-big-deal"&gt;
  &lt;/a&gt;
  Is it a big deal?
&lt;/h2&gt;

&lt;p&gt;This might not seem like a big deal, but let's say I'm trying to find someone's personal email. I only have their name, and I know they have signed up for your site. &lt;/p&gt;

&lt;p&gt;I can try a bunch of variations of &lt;code&gt;firstname.lastname@gmail.com&lt;/code&gt; or &lt;code&gt;lastname{3digitnumber}@gmail.com&lt;/code&gt; and so on until I find a valid one.&lt;/p&gt;

&lt;p&gt;Additionally, there are other timing attacks that leak even more sensitive information, which we'll see in a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-we-fix-it"&gt;
  &lt;/a&gt;
  How can we fix it?
&lt;/h2&gt;

&lt;p&gt;There are a few strategies, but the simplest answer is "make sure all codepaths take the same amount of time". You don't have to do this everywhere, just in sensitive parts of the codebase.&lt;/p&gt;

&lt;p&gt;Instead of returning early, we could have checked the password against some hash and then returned false:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// If there was no match, waste time and then return false&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;passwordHashOrNull&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bcrypt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RANDOM_PASSWORD_HASH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also useful to add rate limiting whenever possible. If an attacker needs a lot of requests to distinguish different cases, rate limiting them could make the attack impractical.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#timing-attacks-in-practice"&gt;
  &lt;/a&gt;
  Timing attacks in practice
&lt;/h2&gt;

&lt;p&gt;Recently, a clever &lt;a href="https://soatok.blog/2021/08/20/lobste-rs-password-reset-vulnerability/"&gt;timing attack was found in Lobste.rs' password reset&lt;/a&gt;. It exploited the fact that databases when comparing two strings will return early if the strings don't match.&lt;/p&gt;

&lt;p&gt;So checking&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;should take less time than&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that the more characters you have correct, the longer the call will take. An attacker could try different prefixes and see which one takes the longest to slowly determine a valid password reset token. &lt;/p&gt;

&lt;p&gt;This same vulnerability exists anywhere where someone is checking a secret value directly against a database, so while it may seem pretty theoretical, there are definitely real world cases that have been reported and fixed.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Day 3 of #100daysofcode: React-bootstrap Components</title>
      <author>Ryan Whelchel</author>
      <pubDate>Mon, 08 Nov 2021 23:07:24 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-3-of-100daysofcode-react-bootstrap-components-49gn</link>
      <guid>https://dev.to/rydwhelchel/day-3-of-100daysofcode-react-bootstrap-components-49gn</guid>
      <description>&lt;p&gt;Have you ever been working in a new language and right when you start feeling confident, you realize that something you've been using does not function &lt;em&gt;at all&lt;/em&gt; the way you thought it did? Let me walk you through today's journey of how some capital letters caused me to forget React worked. Or maybe it was the lower-cased letters. It was probably a combination&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Today I played around with React-bootstrap components a bit like a kid in a sandbox. I threw some components at my app with no real thought for design, I just tried to see how they ticked.&lt;/p&gt;

&lt;p&gt;While messing around with components, I decided to fix my input method for &lt;code&gt;artist IDs&lt;/code&gt; in my song display app. The only problem was that I was trying to use React-bootstrap-styled input boxes, and that cause significantly more confusion than it probably should have. More on this later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learned-about-the-components"&gt;
  &lt;/a&gt;
  What I've learned about the components
&lt;/h2&gt;

&lt;p&gt;I think the biggest hurdle today was learning about how to pass arguments to the components. More specifically, it was learning which arguments you &lt;em&gt;can&lt;/em&gt; pass to them. As someone with limited React/JS experience, seeing React-components immediately made me think that I should try and figure out which arguments they expect to see. Components feel sort of like classes or methods from other languages; you import them because they have their own logic you want to use (and reuse) that logic. Classes and methods expect certain input or constructors, and &lt;em&gt;won't accept&lt;/em&gt; other types of input that they don't handle. While I think this is still probably the case for React components, what I didn't realize is that there are so many global arguments that are applicable. That is to say: just because it isn't explicitly listed in the React-bootstrap API for that component &lt;em&gt;doesn't mean&lt;/em&gt; it isn't applicable.&lt;/p&gt;

&lt;p&gt;Let me give you an example: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ev8_cbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bte7knm9q1s63neven11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ev8_cbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bte7knm9q1s63neven11.png" alt="React-bootstrap API example" width="880" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above is an example of &lt;code&gt;InputGroup&lt;/code&gt; from React-bootstrap's documentation. Being how I am, I decided to copy-paste this code and immediately jump into trying to use it to figure out its quirks. &lt;/p&gt;

&lt;p&gt;The very first question I decided to try and solve was: how do I access this input and make it useful? Looking at this component, it appears that the text value is stored in the &lt;code&gt;id&lt;/code&gt; &lt;code&gt;"basic-addon1"&lt;/code&gt;, because that's the ID of the InputGroup's Text! Wrong, it's just a decorator that is showing an &lt;code&gt;@&lt;/code&gt; before the text box. What else can it be?&lt;/p&gt;

&lt;p&gt;Unfortunately from here, I got really into the weeds and started messing with things that were not helpful. To not dwell on this too much, I'll just list them out real quick. I researched &lt;code&gt;aria-label&lt;/code&gt; and &lt;code&gt;aria-describedby&lt;/code&gt; hoping to be able to use them to reference the &lt;code&gt;input&lt;/code&gt; value. My conclusion on the &lt;code&gt;aria&lt;/code&gt; values is that you &lt;em&gt;may&lt;/em&gt; be able to use them to access the text input, but it really seemed like overkill for the scope of my project. Next I attempted using &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;inputRef&lt;/code&gt; to access the input values. Again, I ran into a lot of trouble implementing any sort of way to access the data, even though I found a &lt;a href="https://stackoverflow.com/questions/41085220/how-to-get-an-input-value-using-refs-in-react-bootstrap-form"&gt;bunch&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/45194498/get-value-of-input-text-with-react-bootstrap"&gt;of&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/45194498/get-value-of-input-text-with-react-bootstrap"&gt;Stackoverflow&lt;/a&gt; &lt;a href="https://stackoverflow.com/questions/60917459/react-bootstrap-how-to-get-value-of-form-control"&gt;answers&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;One answer would say that you should use &lt;code&gt;inputRef&lt;/code&gt; instead of &lt;code&gt;ref&lt;/code&gt; to access the data, others would say to use &lt;code&gt;ref&lt;/code&gt; instead of &lt;code&gt;inputRef&lt;/code&gt;. Many answers seemed sure that you should create a new component class to contain the &lt;code&gt;InputGroup&lt;/code&gt; and &lt;code&gt;FormControl&lt;/code&gt;, however it felt like a very odd way to handle accessing the input. Why would you import an &lt;code&gt;InputGroup&lt;/code&gt; component into another component, just to get the value of the text?&lt;/p&gt;

&lt;p&gt;So after stubbornly trying to get to the bottom of these React-bootstrap components and why they were so much more complicated, I decided to take a break and just read some more tutorials on general React.&lt;/p&gt;

&lt;p&gt;One of the very first things I found was using &lt;code&gt;getElementById&lt;/code&gt; and I nearly facepalmed. &lt;code&gt;getElementById&lt;/code&gt; was one of the very first things I learned about in React, I used it to retrieve data being sent up from my Python Flask server.&lt;/p&gt;

&lt;p&gt;I decided to stick with the tutorial a little bit longer, and they introduced an argument that I had not seen before:&lt;code&gt;onChange&lt;/code&gt;. In 10 minutes of learning about basics,I learned two solutions to a problem that I had spent the better part of an hour trying to solve.&lt;/p&gt;

&lt;p&gt;Quickly summarizing the solution, I can use &lt;code&gt;onChange={(e)=&amp;gt;...}&lt;/code&gt; to retrieve the text every time it changes, or I can simply set &lt;code&gt;id="uniqueId"&lt;/code&gt; and retrieve it elsewhere using `document.getElementById("uniqueId").value. &lt;/p&gt;

&lt;p&gt;What makes this worse is that I &lt;em&gt;already knew this&lt;/em&gt;. I have used them in the past on html-style forms in React. Whenever the React-bootstrap components entered the picture, its like I forgot everything I already learned! Doh.&lt;/p&gt;

&lt;p&gt;The bright-side of all of this is that I feel I have a much greater grasp of how these components resolve themselves in the bigger picture.&lt;/p&gt;

&lt;p&gt;The downside is that I think my app has gotten much uglier than it was before. It gets worse before it gets better I guess!&lt;/p&gt;

&lt;p&gt;On the way out, I'll quickly go over a list of the components I've implemented into my page so far: ListGroup, InputGroup, Form, Buttons and Alerts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here's a quick list of what I did today:&lt;br&gt;
Read through some of the React-bootstrap documentation&lt;br&gt;
Implemented a few React-bootstrap components into my app&lt;br&gt;
Struggled through some input and state shenanigans (above)&lt;br&gt;
Began creating the UI for a group project I'm working on&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I have much less time tomorrow to work on things, so I will likely have a much shorter update. I probably will look into some CSS styling tomorrow and see how to shape my page a little better. I was going to do that today, but I think learning the components that fit &lt;em&gt;into&lt;/em&gt; the shape makes more sense to learn first. I think I'm going to try to utilize Grid and Flexbox from CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm struggling on
&lt;/h2&gt;

&lt;p&gt;Right now I'm struggling on the crossroads between CSS and React. HTML and CSS feels fairly simple in comparison to React and CSS. There's odd syntax (such as &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;) and other interactions I'm not quite used to yet. I imagine it will make more sense once I try it out more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-of-this-challenge"&gt;
  &lt;/a&gt;
  Future of this challenge
&lt;/h2&gt;

&lt;p&gt;Following the first couple days of this challenge, I think it might be a good idea to have a quick section that's dedicated to briefly describing what I'm struggling on, hence above. I think in general, I'm going to shape my blogs as followed:&lt;br&gt;
In-depth Discussion (Optional)&lt;br&gt;
Today&lt;br&gt;
Tomorrow&lt;br&gt;
What I'm Struggling on&lt;/p&gt;

&lt;p&gt;I may not always have time to type out some kind of in-depth discussion, or maybe I won't always have something to say about what I worked on that day. So I won't try and force it, I'll just include it if I really have something to share. I imagine if things go perfectly, I probably won't be sharing a whole lot, so take no discussion as a good thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations?
&lt;/h2&gt;

&lt;p&gt;If you're reading this and you're thinking: "Hey this guy is missing this really obvious thing..." You're probably right! If that's you, please share it's greatly appreciated&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-and-suggested-readingwatching"&gt;
  &lt;/a&gt;
  Resources and Suggested Reading/Watching
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8"&gt;React JS Crash Course 2021&lt;/a&gt;&lt;br&gt;
&lt;a href="https://react-bootstrap.github.io/"&gt;React-bootstrap&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.theodinproject.com/paths/full-stack-javascript/courses/javascript/lessons/state-and-props"&gt;React JS - The Odin Project&lt;/a&gt; (Thank you &lt;a class="mentioned-user" href="https://dev.to/rammina"&gt;@rammina&lt;/a&gt;
 for the suggestion!)&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>AWS ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ© ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ© ŸÖÿπ
</title>
      <author>Mohammed Ismaeel</author>
      <pubDate>Mon, 08 Nov 2021 22:54:28 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-lhwsb-lshby-m-1i27</link>
      <guid>https://dev.to/aws-builders/aws-lhwsb-lshby-m-1i27</guid>
      <description>&lt;h4&gt;
  &lt;a href="#note-this-article-is-in-arabic-and-for-special-target-group"&gt;
  &lt;/a&gt;
  Note: this article is in Arabic and for special target group!
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#%D9%85%D9%84%D8%A7%D8%AD%D8%B8%D8%A9%D8%A7%D9%84%D9%87%D8%AF%D9%81-%D9%85%D9%86-%D9%87%D8%B0%D8%A7-%D8%A7%D9%84%D9%85%D9%82%D8%A7%D9%84-%D9%87%D9%88-%D8%A7%D9%84%D8%B7%D9%84%D8%A8%D8%A9-%D9%88%D8%A7%D9%84%D9%85%D9%87%D8%AA%D9%85%D9%8A%D9%86-%D9%81%D9%8A-%D9%85%D8%AC%D8%A7%D9%84"&gt;
  &lt;/a&gt;
  ŸÖŸÑÿßÿ≠ÿ∏ÿ©:ÿßŸÑŸáÿØŸÅ ŸÖŸÜ Ÿáÿ∞ÿß ÿßŸÑŸÖŸÇÿßŸÑ ŸáŸà ÿßŸÑÿ∑ŸÑÿ®ÿ© ŸàÿßŸÑŸÖŸáÿ™ŸÖŸäŸÜ ŸÅŸä ŸÖÿ¨ÿßŸÑ
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#%D8%A7%D9%84%D8%AD%D9%88%D8%B3%D8%A8%D8%A9-%D8%A7%D9%84%D8%B3%D8%AD%D8%A7%D8%A8%D9%8A%D8%A9-%D9%85%D9%86-%D8%AF%D9%88%D9%86-%D8%B3%D8%A7%D8%A8%D9%82-%D8%AE%D8%A8%D8%B1%D8%A9"&gt;
  &lt;/a&gt;
  ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ© ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ© ŸÖŸÜ ÿØŸàŸÜ ÿ≥ÿßÿ®ŸÇ ÿÆÿ®ÿ±ÿ©
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQTLsASY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/attlb0safjuzifhvseji.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQTLsASY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/attlb0safjuzifhvseji.jpg" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D9%85%D8%A7-%D9%87%D9%8A-%D8%A7%D9%84%D8%AD%D9%88%D8%B3%D8%A8%D8%A9-%D8%A7%D9%84%D8%B3%D8%AD%D8%A7%D8%A8%D9%8A%D8%A9"&gt;
  &lt;/a&gt;
  ŸÖÿß ŸáŸä ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ© ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ©ÿü
&lt;/h2&gt;

&lt;p&gt;ÿ•ŸÜ ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ© ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ© ÿ™ÿπŸÜŸä ÿ™ŸàŸÅŸäÿ± ŸÖŸàÿßÿ±ÿØ ÿ™ŸÇŸÜŸäÿ© ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≠ÿ≥ÿ® ÿßŸÑÿ∑ŸÑÿ® ÿπÿ®ÿ± ÿßŸÑÿ•ŸÜÿ™ÿ±ŸÜÿ™ ŸÖÿπ ÿ™ÿ≥ÿπŸäÿ± ÿßŸÑÿ™ŸÉŸÑŸÅÿ© ÿ≠ÿ≥ÿ® ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ. ŸÅÿ®ÿØŸÑÿßŸã ŸÖŸÜ ÿ¥ÿ±ÿßÿ° ŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÅÿπŸÑŸäÿ© ŸàÿßŸÖÿ™ŸÑÿßŸÉŸáÿß ŸàÿßŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®Ÿáÿßÿå ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿßÿ≥ÿ™ŸÅÿßÿØÿ© ŸÖŸÜ ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ™ŸÉŸÜŸàŸÑŸàÿ¨Ÿäÿ©ÿå ŸÖÿ´ŸÑ ÿ•ŸÖŸÉÿßŸÜŸäÿßÿ™ ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ©ÿå ŸàÿßŸÑÿ™ÿÆÿ≤ŸäŸÜÿå ŸàŸÇŸàÿßÿπÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ÿå ÿ®ÿ£ÿ≥ŸÑŸàÿ® Ÿäÿπÿ™ŸÖÿØ ÿπŸÑŸâ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ ŸÑÿØŸäŸÉÿå Ÿàÿ∞ŸÑŸÉ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿ¨Ÿáÿ© ŸÖŸàŸÅÿ±ÿ© ŸÑŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ© ŸÖÿ´ŸÑ Amazon Web Services (AWS).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D9%85%D8%B2%D8%A7%D9%8A%D8%A7-%D8%A7%D9%84%D8%AD%D9%88%D8%B3%D8%A8%D8%A9-%D8%A7%D9%84%D8%B3%D8%AD%D8%A7%D8%A8%D9%8A%D8%A9"&gt;
  &lt;/a&gt;
  ŸÖÿ≤ÿßŸäÿß ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ© ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ©
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ÿßŸÑÿ≥ÿ±ÿπÿ© ŸàÿßŸÑŸÖŸÇÿµŸàÿØ ŸáŸÜÿß ÿ®ÿ≥ÿ±ÿπÿ© ÿßŸÑÿ™ÿ≠ŸàŸÑ ŸÖŸÜ ÿßŸÑŸÅŸÉÿ±ÿ© ÿßŸÑŸâ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ŸÑÿßŸÜ ŸÉŸÑ ŸÖÿß ÿ™ÿ≠ÿ™ÿßÿ¨Ÿá ŸÑŸÑÿ®ÿØÿ° ÿ®ŸÖÿ¥ÿ±ŸàÿπŸÉ ŸÖŸàÿ¨ŸàÿØ&lt;/li&gt;
&lt;li&gt;ÿßŸÑŸÖÿ±ŸàŸÜÿ© ŸÜŸÇÿµÿØ ÿ®Ÿáÿß ÿßŸÜŸÉ ŸÑŸÜ ÿ™ÿ≠ÿ™ÿßÿ¨ ÿßŸÑŸâ ÿßŸÑÿ™ŸÅŸÉŸäÿ± ÿ®ÿπÿØÿØ ÿßŸÑŸÖÿ≥ÿ™ŸáŸÑŸÉŸäŸÜ ŸÅÿßŸÑŸÖŸàÿßÿ±ÿØ ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ© ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ™Ÿàÿ≥ÿπ ŸàÿßŸÑÿ™ŸÇŸÑÿµ ÿ≠ÿ≥ÿ® ÿ∏ÿ±ŸàŸÅ ÿßŸÑÿπŸÖŸÑ&lt;/li&gt;
&lt;li&gt;ÿßŸÑÿ™ŸàŸÅŸäÿ± ÿßŸÜÿ™ ÿ™ÿØŸÅÿπ ŸÑŸÖÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ŸÅŸÇÿ∑ ŸÑÿß ÿ∫Ÿäÿ± &lt;/li&gt;
&lt;li&gt;ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ± ÿπÿßŸÑŸÖŸäÿß ÿ®ÿ≥ÿ±ÿπÿ© ŸÑÿßŸÜ ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ© ŸÖŸÜÿ™ÿ¥ÿ±ÿ© ÿπŸÑŸâ ŸÖÿØŸâ ÿ¨ÿ∫ÿ±ÿßŸÅŸä Ÿàÿßÿ≥ÿπ ŸÅÿßŸÜ ÿßŸÑŸàÿµŸàŸÑ ÿßŸÑŸâ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿµÿßÿ± ÿßÿ≥ŸáŸÑ&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#%D8%A3%D8%A8%D8%B1%D8%B2-%D8%A7%D9%84%D9%85%D8%B2%D9%88%D8%AF%D9%8A%D9%86-%D9%84%D9%84%D8%AE%D8%AF%D9%85%D8%A7%D8%AA-%D8%A7%D9%84%D8%B3%D8%AD%D8%A7%D8%A8%D9%8A%D8%A9"&gt;
  &lt;/a&gt;
  ÿ£ÿ®ÿ±ÿ≤ ÿßŸÑŸÖÿ≤ŸàÿØŸäŸÜ ŸÑŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ©
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Amazon AWS: ŸáŸà ÿßŸÑŸÖÿ™ÿµÿØÿ± ÿπÿßŸÑŸÖŸäÿß ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑŸÖÿ¨ÿßŸÑ ŸÑŸÉÿ´ÿ±ÿ© ÿßŸÑÿÆÿØŸÖÿßÿ™ ŸàÿπÿØÿØ ÿßŸÑŸÖÿ™ÿπÿßŸÇÿØŸäŸÜ ŸàÿßŸÑÿ™Ÿàÿ≥ÿπ ŸàÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ± ÿßŸÑÿ¨ÿ∫ÿ±ÿßŸÅŸä &lt;/li&gt;
&lt;li&gt;MS Azure : Ÿäÿ≠ÿ™ŸÑ ÿßŸÑŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ´ÿßŸÜŸä ŸàŸäŸàŸÅÿ± ÿ™ŸÇÿ±Ÿäÿ®ÿß ŸÜŸÅÿ≥ ÿßŸÑÿÆÿØŸÖÿßÿ™ ŸÖÿπ ÿßÿÆÿ™ŸÑÿßŸÅ ŸÅŸä ÿßŸÑÿßÿ≥ÿπÿßÿ± ŸàÿßŸÖÿßŸÉŸÜ ÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ± ÿßŸÑÿ¨ÿ∫ÿ±ÿßŸÅŸä&lt;/li&gt;
&lt;li&gt;Google Cloud: ÿßŸÑÿ´ÿßŸÑÿ´ ÿπÿßŸÑŸÖŸäÿß ŸàŸÑŸÉŸÜ ŸÑÿØŸäŸáŸÖ ÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±ÿßÿ™ ŸÇŸàŸäÿ© ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑŸÖÿ¨ÿßŸÑ &lt;/li&gt;
&lt;li&gt; ŸáŸÜÿßŸÉ ÿ¥ÿ±ŸÉÿßÿ™ ÿßÿÆÿ±Ÿâ ŸÖŸàÿ¨ŸàÿØÿ© ŸàŸÑŸÉŸÜ ŸÑŸäÿ≥ÿ™ ÿ®ŸÜŸÅÿ≥ ÿßŸÑÿ≠ÿ¨ŸÖ ŸàÿßŸÑÿßŸÜÿ™ÿ¥ÿßÿ± ŸÖÿ´ŸÑ IBM Oracle Ÿàÿ¥ÿ±ŸÉÿßÿ™ ÿßÿÆÿ±Ÿâ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W70MHF-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptjbuidamzkzhjxlu5me.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W70MHF-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptjbuidamzkzhjxlu5me.jpeg" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D8%A3%D9%86%D9%88%D8%A7%D8%B9-%D8%A7%D9%84%D8%AD%D9%88%D8%B3%D8%A8%D8%A9-%D8%A7%D9%84%D8%B3%D8%AD%D8%A7%D8%A8%D9%8A%D8%A9"&gt;
  &lt;/a&gt;
  ÿ£ŸÜŸàÿßÿπ ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ© ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ©
&lt;/h2&gt;

&lt;p&gt;1.ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑÿ™ÿ≠ÿ™Ÿäÿ© ŸÉÿÆÿØŸÖÿ© (IaaS)&lt;br&gt;
2.ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä ŸÉÿÆÿØŸÖÿ© (PaaS)&lt;br&gt;
3.ÿßŸÑÿ®ÿ±ÿßŸÖÿ¨ ŸÉÿÆÿØŸÖÿ© (SaaS)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D9%85%D8%AC%D8%A7%D9%84%D8%A7%D8%AA-%D8%A7%D9%84%D8%A7%D8%B3%D8%AA%D8%AE%D8%AF%D8%A7%D9%85"&gt;
  &lt;/a&gt;
  ŸÖÿ¨ÿßŸÑÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ©&lt;/li&gt;
&lt;li&gt;ÿßŸÑÿ™ÿÆÿ≤ŸäŸÜ&lt;/li&gt;
&lt;li&gt;ŸàŸÇŸàÿßÿπÿØ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™&lt;/li&gt;
&lt;li&gt;ÿßŸÑÿ¥ÿ®ŸÉÿßÿ™&lt;/li&gt;
&lt;li&gt;ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™&lt;/li&gt;
&lt;li&gt;ÿ™ŸÇŸÜŸäÿ© ÿ™ÿπŸÑŸÖ ÿßŸÑÿ¢ŸÑÿ©&lt;/li&gt;
&lt;li&gt;ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä&lt;/li&gt;
&lt;li&gt;ÿ•ŸÜÿ™ÿ±ŸÜÿ™ ÿßŸÑÿ£ÿ¥Ÿäÿßÿ° (IoT)&lt;/li&gt;
&lt;li&gt;ÿßŸÑÿ£ŸÖÿßŸÜ&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#%D8%A3%D8%B1%D8%AC%D9%88-%D8%A7%D9%84%D8%AA%D8%B1%D9%83%D9%8A%D8%B2-%D8%B9%D9%84%D9%89-%D8%A7%D9%84%D8%AC%D8%B2%D8%A1-%D8%A7%D9%84%D9%82%D8%A7%D8%AF%D9%85-%D9%85%D9%86-%D8%A7%D9%84%D9%85%D9%82%D8%A7%D9%84"&gt;
  &lt;/a&gt;
  ÿ£ÿ±ÿ¨Ÿà ÿßŸÑÿ™ÿ±ŸÉŸäÿ≤ ÿπŸÑŸâ ÿßŸÑÿ¨ÿ≤ÿ° ÿßŸÑŸÇÿßÿØŸÖ ŸÖŸÜ ÿßŸÑŸÖŸÇÿßŸÑ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AIZznrWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iewxqs2g5tlef7i7k6ai.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AIZznrWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iewxqs2g5tlef7i7k6ai.jpg" alt="Image description" width="609" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D8%A3%D9%88%D9%84%D8%A7-%D9%87%D9%84-%D9%8A%D8%AC%D8%A8-%D8%B9%D9%84%D9%8A-%D8%A7%D9%86-%D8%A7%D8%AA%D8%B9%D9%84%D9%85-%D8%A7%D9%84%D8%AD%D9%88%D8%B3%D8%A8%D8%A9-%D8%A7%D9%84%D8%B3%D8%AD%D8%A7%D8%A8%D9%8A%D8%A9"&gt;
  &lt;/a&gt;
  ÿ£ŸàŸÑÿß ŸáŸÑ Ÿäÿ¨ÿ® ÿπŸÑŸä ÿßŸÜ ÿßÿ™ÿπŸÑŸÖ ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ© ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ©ÿü
&lt;/h2&gt;

&lt;p&gt;ÿßŸÑÿ≠Ÿàÿßÿ® ŸÜÿπŸÖ Ÿäÿ¨ÿ® ÿßŸÜ ÿ™ÿ™ÿπŸÑŸÖ ŸÑÿßŸÜ ŸÜÿ≠ŸÜ ŸÅŸä ÿπÿµÿ± ÿßŸÑÿ≠Ÿàÿ≥ÿ®ÿ© ÿßŸÑÿ≥ÿ≠ÿßÿ®Ÿäÿ© ŸàŸÉŸÑ ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™ ŸÉÿ®Ÿäÿ±ÿ© ÿßŸà ÿµÿ∫Ÿäÿ±ÿ© ÿ™ÿ≠ŸàŸÑÿ™ ÿßŸà ŸÅŸä ÿ∑Ÿàÿ± ÿßŸÑÿ™ÿ≠ŸàŸÑ&lt;br&gt;
ÿßÿ∞ÿß ŸÉŸÜÿ™ ÿµÿßÿ≠ÿ® ŸÅŸÉÿ±ÿ© ŸÅÿßŸÜ ŸÖŸÜ ÿßŸÑÿ≥ŸáŸÑ ÿ¨ÿØÿß ÿßŸÜ ÿ™ÿ®ÿØÿ£ ŸÅŸä ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ Ÿàÿ®ŸÉŸÑŸÅÿ© ŸÇŸÑŸäŸÑÿ© ÿ¨ÿØÿß&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D9%83%D9%8A%D9%81-%D8%A7%D8%AB%D8%A8%D8%AA-%D8%A7%D9%86%D9%8A-%D9%82%D8%A7%D8%AF%D8%B1-%D8%B9%D9%84%D9%89-%D8%A7%D9%84%D8%B9%D9%85%D9%84-%D9%81%D9%8A-%D9%87%D8%B0%D8%A7-%D8%A7%D9%84%D9%85%D8%AC%D8%A7%D9%84"&gt;
  &lt;/a&gt;
  ŸÉŸäŸÅ ÿßÿ´ÿ®ÿ™ ÿßŸÜŸä ŸÇÿßÿØÿ± ÿπŸÑŸâ ÿßŸÑÿπŸÖŸÑ ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑŸÖÿ¨ÿßŸÑ
&lt;/h2&gt;

&lt;p&gt;AWS:&lt;br&gt;
ÿ™ŸàŸÅÿ± ÿ¥ŸáÿßÿØÿßÿ™ ÿÆÿ®ÿ±ÿ© ŸÖÿπÿ™ÿ±ŸÅ ÿ®Ÿáÿß ÿπÿßŸÑŸÖŸäÿß ŸàŸÑŸáÿß ÿ≥ŸÖÿπÿ© ŸÇŸàŸäÿ© ŸÅŸä ÿ≥ŸàŸÇ ÿßŸÑÿπŸÖŸÑ ŸÅÿßÿ∞ÿß ŸÉŸÜÿ™ ŸÖŸÜ ÿ≠ÿßŸÖŸÑŸäŸÜ Ÿáÿ∞Ÿá ÿßŸÑÿ¥ŸáÿßÿØÿßÿ™ ŸÅÿßŸÜ ŸÅÿ±ÿµ ÿßŸÑÿπŸÖŸÑ ÿ™ŸÉŸàŸÜ ÿ¨ŸäÿØÿ© ÿ¨ÿØÿß &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-%D9%85%D8%A7-%D9%87%D9%8A-%D8%A7%D9%84%D8%B4%D9%87%D8%A7%D8%AF%D8%A7%D8%AA-%D8%A7%D9%84%D9%8A-%D8%AA%D9%88%D9%81%D8%B1%D9%87%D8%A7"&gt;
  &lt;/a&gt;
  AWS ŸÖÿß ŸáŸä ÿßŸÑÿ¥ŸáÿßÿØÿßÿ™ ÿßŸÑŸä ÿ™ŸàŸÅÿ±Ÿáÿß
&lt;/h2&gt;

&lt;p&gt;ÿ™ŸÜŸÇÿ≥ŸÖ ÿßŸÑÿ¥ŸáÿßÿØÿßÿ™ ÿßŸÑŸâ ÿ´ŸÑÿßÿ´ ÿßŸÇÿ≥ÿßŸÖ &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Associate level ŸàŸäŸÜŸÇÿ≥ŸÖ ÿßŸÑŸâ ÿ´ŸÑÿßÿ´ ÿßÿÆÿ™ÿ®ÿßÿ±ÿßÿ™ &lt;/li&gt;
&lt;li&gt;Professional level ŸàŸäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿßÿÆÿ™ÿ®ÿßÿ±ŸäŸÜ ŸàŸáŸÖÿß ÿßŸÑÿßÿµÿπÿ® &lt;/li&gt;
&lt;li&gt;Specialty level Ÿäÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ≥ÿ™ÿ© ÿßÿÆÿ™ÿ®ÿßÿ±ÿßÿ™ ŸÅŸä ÿßÿÆÿ™ÿµÿßÿµÿßÿ™ ŸÖÿπŸäŸÜÿ© &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0LnQJWrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmztid7lvwhkt8aco1yk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0LnQJWrG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmztid7lvwhkt8aco1yk.png" alt="Image description" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%D9%85%D9%86-%D8%A7%D9%8A%D9%86-%D8%A7%D8%A8%D8%AF%D8%A3"&gt;
  &lt;/a&gt;
  ŸÖŸÜ ÿßŸäŸÜ ÿßÿ®ÿØÿ£
&lt;/h2&gt;

&lt;p&gt;ÿ£ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ŸÅÿ∂ŸÑ ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ŸÅÿßŸÜÿµÿ≠ŸÉ ÿßŸÑÿØŸàÿ±ÿ© ÿßŸÑŸÖÿ¨ÿßŸÜŸäÿ© ÿßŸÑŸÖŸÇÿØŸÖÿ© ŸÖŸÜ ŸÇÿ®ŸÑ ÿßŸÑŸÖŸáŸÜÿØÿ≥ ÿπŸäÿ≥Ÿâ ÿßÿ®Ÿà ÿ¥ÿ±ŸäŸÅ ÿ™ÿπÿ™ÿ®ÿ± ŸÖÿØÿÆŸÑ ÿ¨ŸäÿØ ŸàŸäŸÖŸÉŸÜŸÉ ÿπŸÜ ÿ∑ÿ±ŸäŸÇŸáÿß ÿ™ÿÆÿ∑Ÿä ÿ¥ŸáÿßÿØÿ© associate solution architect &lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=E3nLSHQtLes&amp;amp;list=PLOoZRfEtk6kWSM_l9xMjDh-_MJXl03-pf"&gt;ÿßŸÑÿ±ÿßÿ®ÿ∑&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free Code Camp ÿßŸÑŸÉŸàÿ±ÿ≥ ÿßŸÑŸÖÿ¨ÿßŸÜŸä ŸÖŸÜ&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Ia-UEYYR44s"&gt;AWS Certified Solutions Architect - Associate 2020 (PASS THE EXAM!)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://explore.skillbuilder.aws/learn"&gt;AWS skill builder&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;ŸÉŸÖÿß ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ ÿßŸÑŸâ ŸÇŸÜŸàÿßÿ™ŸÜÿß ÿπŸÑŸâ ÿßŸÑÿ™ŸÑŸÉÿ±ÿßŸÖ ÿßŸà ÿßŸÑŸÅŸäÿ≥ÿ®ŸàŸÉ ŸÅŸä ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑÿ™ÿßŸÑŸäÿ© &lt;br&gt;
&lt;a href="https://www.facebook.com/groups/iraqcloud"&gt;AWS Iraq user group&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hNneerDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo9dar5zfm6v3noubvli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hNneerDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo9dar5zfm6v3noubvli.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/groups/300699310518354"&gt;AWS ÿ®ÿßŸÑÿπÿ±ÿ®Ÿä&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyxwElza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gxq8rumn2u4rfrkp1ic.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyxwElza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gxq8rumn2u4rfrkp1ic.jpg" alt="Image description" width="640" height="640"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://t.me/awsbelaraby"&gt;AWS ÿ®ÿßŸÑÿπÿ±ÿ®Ÿä ÿ™ŸÑŸäŸÉÿ±ÿßŸÖ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ŸÅŸä ÿßŸÑŸÜŸáÿßŸäÿ© ÿßÿ∞ÿß ŸÉÿßŸÜ ŸÑÿØŸäŸÉ ÿßŸä ÿ≥ÿ§ÿßŸÑ ÿßŸà ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ± ÿßÿ±ÿ¨Ÿà ŸÖÿ±ÿßÿ≥ŸÑÿ™Ÿä ÿπŸÑŸâ ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ÿßÿØŸÜÿßŸáÿß&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/mohammed-ismaeel-1a748417/"&gt;Linkedin&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/The_Al_Sanad"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>aws</category>
      <category>career</category>
    </item>
    <item>
      <title>Typescript Example #2.</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 08 Nov 2021 22:48:24 +0000</pubDate>
      <link>https://dev.to/baenencalin/typescript-example-2-42n1</link>
      <guid>https://dev.to/baenencalin/typescript-example-2-42n1</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// An example of using generics in a type union.&lt;/span&gt;
&lt;span class="c1"&gt;// A compact version of my Option&amp;lt;T&amp;gt; type from&lt;/span&gt;
&lt;span class="c1"&gt;// "Typescript Example #1." (https://dev.to/baenencalin/typescript-example-1-ia3).&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>programming</category>
      <category>watercooler</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
