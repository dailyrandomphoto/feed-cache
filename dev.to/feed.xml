<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to become a better learner as a developer</title>
      <author>Paul Ccari</author>
      <pubDate>Fri, 21 May 2021 06:32:16 +0000</pubDate>
      <link>https://dev.to/paulclindo/how-to-become-a-better-learner-as-a-developer-2h30</link>
      <guid>https://dev.to/paulclindo/how-to-become-a-better-learner-as-a-developer-2h30</guid>
      <description>&lt;p&gt;When I started learning how to code, I looked for many online resources such as blog posts, youtube videos, online courses, and I used to take them and do the same thing they were doing and then jumped to another resource to do the same over and over again. From my point of view at that time, I was learning a lot but actually, I got an illusion of learning, which is when you think you know more than you actually do, you overestimate what you know about a topic when you can only recognize.&lt;/p&gt;

&lt;p&gt;So I failed plenty of times and that's OK, it's a part of the process but I decided to do research and learn more about effective learning and here's what I do to counter the illusion of learning and get the most value from it.&lt;/p&gt;

&lt;p&gt;Note: We all have our learning style, this blog post doesn't pretend to change your way of learning. I'm only showing you what works best for me during my developer career but I would encourage you to give it a try and see what happens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-one-thing"&gt;
  &lt;/a&gt;
  Focus on one thing
&lt;/h2&gt;

&lt;p&gt;When I started learning front end development on my own, I realized that we had a bunch of technologies to learn and I didn't have an idea how to start, so I looked for a &lt;a href="https://roadmap.sh/frontend"&gt;roadmap to become a front end developer&lt;/a&gt; which is very helpful to guide you step by step but at first, I felt very intimidating and challenging. In consequence, I planned my day to learn basics about Web development, HTML, CSS, JS, and a bit of ReactJS but that ended up making me feel overwhelming during the first 2 months. Each topic contains a lot of content and that was just basics knowledge. In addition, I had a list of several online resources about each topic and I couldn't finish all of them at the end, it was kind of overwhelming. So I would say that you should try:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Focus on one topic and take your time&lt;/strong&gt;: You don't need to rush and ignore the fundamentals of each topic even when it seems pretty straightforward, do more research and be curious about why it works in that way.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Focus on a few learning resources&lt;/strong&gt;: I would say choose your best top 3 resources you enjoy watching, reading, or listening to.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create focused and productive study sessions:&lt;/strong&gt; No distractions! I usually put away my phone and turn off all notifications and I use a Pomodoro technique to get more out of less.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pomodoro technique is a time management system that helps to be productive and make as much progress on a task as possible in 25 minutes. You break your workday into 25-minute chunks separated by five-minute breaks. After about 4 pomodoros, you take a longer break of about 15 to 20 minutes. I usually use &lt;a href="https://www.forestapp.cc/"&gt;Forest App&lt;/a&gt; to make it work! Try it out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-a-break"&gt;
  &lt;/a&gt;
  Take a break
&lt;/h2&gt;

&lt;p&gt;As I mentioned before, I used to spent many hours studying and even at night, I didn't want to go to sleep because of my enthusiasm and motivation of learning new things. But after a few weeks, I felt less motivated, I had a high level of stress that leaves me emotionally and physically burned out and it seems like nothing you do matters. Later, I realized that it's always good to push ourselves to the limit and do the hard work but there's a fine line between testing your limits and pushing past your breaking point. So I would recommend doing few things to avoid burnout and be more productive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pomodoro technique&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't skip out on sleep to get more studying done:&lt;/strong&gt; Getting enough sleep is essential for good health and well-being throughout your life. Take at least from 7-9 hours and make it a priority. I found so much information about why sleeping is so important &lt;a href="https://www.youtube.com/watch?v=pwaWilO_Pig&amp;amp;t=98s"&gt;here&lt;/a&gt;. Check it out.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do physical activities&lt;/strong&gt;: You can start by stretching yourself in your five-minute breaks. Or you start doing swimming, jogging, walking, dancing, etc. Physical activities regulate stress, anxiety and can be a real energy booster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#apply-what-you-learn"&gt;
  &lt;/a&gt;
  Apply what you learn
&lt;/h2&gt;

&lt;p&gt;To be honest, I've watched plenty of videos since I started learning how to code and I don't quite remember all things I studied. Consequently, I ended up wasting so much time because I need to read, watch, research, and learn again and again the same topic I studied before. Why does that happen? Because I didn't build anything from it. It's just simple as that, I used to code along with courses and videos, doing the same thing and when I completed them, I jumped to another course and so on which is commonly called Tutorial Hell. In this way, I noticed that "Output is more important than input" and we can't learn just by watching, so you need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Be curious about certain behaviors&lt;/strong&gt;: Break the codebase, and make some changes to test it out and see what happens and how it works, and I'm sure you'll learn more.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build projects:&lt;/strong&gt; After finishing watching any course or tutorial, built the project from scratch by yourself now or you can add extra features to the final project but make it challenging and you'll see what you learn. Coding along is not bad, but don't just do that because it brings you an illusion of learning like you won't get any errors while coding and that's not the real world.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#learn-in-public"&gt;
  &lt;/a&gt;
  Learn In Public
&lt;/h2&gt;

&lt;p&gt;I've never been selfish to not teach or share something I do know about a topic to someone but I was very timid and reserved and it might be a consequence of growing in my entire life since school where I used to keep what I learned to myself and be a better student.&lt;/p&gt;

&lt;p&gt;However, I recognize that Tech industry is not like that, we have many open source projects that are available to us to read and learn from its codebases, besides that most developers in the community give away knowledge in articles, tutorials, tweets, etc. That's incredible, right? So I would propose you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Share what you're learning on any social media&lt;/strong&gt;: Not only on social media, you can tell someone what you learned and start discussing it. Or you can take advantage of social media to get some feedback and support from the community! You can start by posting a tweet, then you can create a blog post, an e-book, or produce a video, podcasts. You can try them and see what you like most.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't be afraid to learn in public:&lt;/strong&gt; It's your process! if sharing in public makes you feel uncomfortable, that's totally fine. That means you're pushing yourself, so keep doing your best and don't blame yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h2&gt;

&lt;p&gt;I strongly believe these techniques can help us to be more productive and learn more effectively anything we want and not only coding topic related. It can be cooking, playing a new instrument, anything new we want to learn in our lives. Try it out!&lt;/p&gt;

&lt;p&gt;Here are some links related that help me to be a better learner:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About the importance of quality sleep: &lt;a href="https://youtu.be/pwaWilO_Pig"&gt;Joe Morgan Experience w. Matthew Walker&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ujxvy5NjeRQ"&gt;How to Learn Anything! For Creatives &amp;amp; Self Learners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Strongly recommend this book: &lt;a href="https://www.learninpublic.org/"&gt;The Coding Career Handbook by Shawn Wang&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you enjoyed it. Thanks for reading!&lt;br&gt;
... As always, enjoy your process of learning 🚀&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href="https://paulccari.com/"&gt;reach out&lt;/a&gt; if you wanna chat about anything.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>How We Saved $428/Mo &amp; Boosted Performance by 200 times</title>
      <author>AscendixTech</author>
      <pubDate>Fri, 21 May 2021 06:30:40 +0000</pubDate>
      <link>https://dev.to/ascendixtech/how-we-saved-428-mo-boosted-performance-by-200-times-3ncg</link>
      <guid>https://dev.to/ascendixtech/how-we-saved-428-mo-boosted-performance-by-200-times-3ncg</guid>
      <description>&lt;p&gt;&lt;em&gt;The article was originally published on &lt;a href="https://ascendixtech.com/dot-net-core-migration-case/"&gt;Ascendix Tech Blog&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, we achived these results through &lt;strong&gt;.NET to .NET Core migration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The need emerged while we have been supporting a complex KnockoutJS-based web application with a server on .NET 4.5.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;The first need to migrate from .NET to .NET Core appeared while working on a KnockoutJS-based web app with a server on .NET 4.5. We had several Razor pages, JavaScript bundles in .NET Framework, and a physical copy of jQuery.&lt;/p&gt;

&lt;p&gt;We wanted to restructure many code parts in order to use the latest technologies. Thus, we decided to start with backend towards migration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What were the core goals of .NET to .NET Core migration?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, we needed to split up the front-end and back-end logic and avoid lots of old code blocks and poor code quality. It would have helped us to accelerate the future development time and boost the page loading speed. &lt;/p&gt;

&lt;p&gt;Second, we found out that .NET Core had lots of out-of-the-box tools. This way, we saw a great benefit of migrating from .NET to .NET Core and get rid of multiple third-party libraries that would allow us to save lots of time in the future. &lt;/p&gt;

&lt;p&gt;Third, .NET vs .NET Core migration would have enabled us to use Linux thus leveraging the benefits of using Docker and Kubernetes. &lt;/p&gt;

&lt;p&gt;Fourth, we would have become able to use Visual Studio Code for development. &lt;/p&gt;

&lt;p&gt;Fifth, we intended to make our software engineers more happy and motivated by using advanced and new technologies. What’s more, it’s much easier to find and recruit new developers while operating new and ‘hot’ tools. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6YG3s5TM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0gngopi0sf6sn10edyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6YG3s5TM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0gngopi0sf6sn10edyg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h2&gt;

&lt;p&gt;Now let’s take a closer look at the migration process we have undergone. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client-side&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To begin with, we have minimized Razor involvement and needed to build JavaScript bundles in order to somehow organize and build our client code without ASP.NET. The application still used KnockoutJS and jQuery despite the dominance of React/Angular/Vue.js. &lt;/p&gt;

&lt;p&gt;Then, we concluded to use Gulp to create JS bundles that would have greatly helped us prior to migrating our codebase to Vue and Webpack. &lt;/p&gt;

&lt;p&gt;However, bundles are still static resources which means that we couldn’t use hot reload yet, but, nevertheless, we could start taking care of server. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server-side&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We started our backend migration with using out-of-the-box Dependency Injection which gave us more convenience easier integration. Despite the fact that it required multiple enhancements and codebase restructure, it was also a great option to perform a code audit and add/remove/modify some functionality. &lt;/p&gt;

&lt;p&gt;During the optimization process, we moved many code parts from our filesystem and memory to the caching service (Razor/Couchbase). &lt;/p&gt;

&lt;p&gt;What’s more, we removed several blocks of code with unverified logic dedicated to threading and next made our application stateless for more greater scalability. &lt;/p&gt;

&lt;p&gt;Once done with the health-check and monitoring processes, we turned to using Azure Kubernetes Service for deployment orchestration. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#roadblocks"&gt;
  &lt;/a&gt;
  Roadblocks
&lt;/h2&gt;

&lt;p&gt;In terms of the key problems that emerged throughout the migration process, we had a single roadblock and a way-out solution. &lt;/p&gt;

&lt;p&gt;Simply put, we bumped into the lack of several important libraries supported by .NET Core and concluded to search for and utilize alternative solutions. Over time, we found out that there were no analogs to XML and decided to drop the entire XML-based functionality. &lt;/p&gt;

&lt;p&gt;So, we created a separate application for that which was a beneficial solution as we could make the required operations there avoiding runtime. &lt;/p&gt;

&lt;p&gt;This way, we reduced the server-side logic greatly and reached the last phase of making our app stateless. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;We shared our brief story of migrating from .NET to .NET Core in terms of our project. Wondering what were the results of that migration? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We boosted the performance of our app by 200 times compared to the old server. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We drastically cut down environmental costs. In total, the migration process allowed us to save $428/mo along with the great scalability opportunities. Next, we can turn to F2 nodes on Prod and save additional $336 per month. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.NET Core enabled us to perform old codebase audit and refactoring which led to better KPIs of the application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ultimately, .NET Core helped us analyze and optimize our technical approaches multiple times. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To date, we are utilizing .NET Core for all new .NET related projects in order to get all the benefits it offers.  &lt;/p&gt;

&lt;p&gt;If we require some sort of a specific logic and .NET Framework is a must-have option, then we create a separate microservice for that logic only. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;We hope our case study of .NET to .NET Core migration will become helpful for you. &lt;/p&gt;

&lt;p&gt;Actually, we recommend to analyze your tech stack and always try to optimize the solution architecture by using the latest technologies which will help boost your applications’ performance.&lt;/p&gt;

&lt;p&gt;If you want to learn the case in detail, check the full blog article &lt;strong&gt;&lt;a href="https://ascendixtech.com/dot-net-core-migration-case/"&gt;.NET Core Migration Case: How We Saved $428/Mo &amp;amp; Boosted Performance by 200 times&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>kubernetes</category>
      <category>docker</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Deep Dive into Front-End Accessibility Issues</title>
      <author>Mayank Pathela</author>
      <pubDate>Fri, 21 May 2021 06:18:21 +0000</pubDate>
      <link>https://dev.to/starkblaze01/deep-dive-into-the-accessibility-issues-of-front-end-34je</link>
      <guid>https://dev.to/starkblaze01/deep-dive-into-the-accessibility-issues-of-front-end-34je</guid>
      <description>&lt;p&gt;Looking into the complexity of the web-development one of the most common issue that arises in handling big websites is the accessibility issue. Let's deep dive into some common problems and learn how to avoid those.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-term-accessibility-in-frontend-context"&gt;
  &lt;/a&gt;
  The term "Accessibility" in front-end context
&lt;/h2&gt;

&lt;p&gt;Accessibility for a web app aims to make it usable by as many people in as many contexts as possible, varying from low to high powered desktop users, and making it sensible for people with disability. We may be not able to achieve 100% of it but can develop a web app keeping our target audience in mind. &lt;br&gt;
Before Jumping into the development it's better to have a User Persona and the limitations they have. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-you-say-what-possibly-could-go-wrong-with-it"&gt;
  &lt;/a&gt;
  HTML you say? What possibly could go wrong with it?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrFGasbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biq7rpyqhhz21bfu8njf.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrFGasbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biq7rpyqhhz21bfu8njf.jpeg" alt="HTML Easy-Peasy"&gt;&lt;/a&gt;&lt;br&gt;
Most people think that HTML is a piece of cake and underestimates the power it has. There are over 100 HTML5 tags that are supported by modern browsers &lt;em&gt;(Find the whole list &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;here&lt;/a&gt;).&lt;/em&gt; We don't use all the tags on day to day basis but it might come in handy to use them sometimes which can avoid the excess use of JS in your codebase. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic Issues:&lt;/strong&gt;&lt;br&gt;
Always use proper HTML tags instead of implementing things just to make things work out the way you want.&lt;br&gt;
Here are some of the key issues I notice very often:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Often use of &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tag instead of wrapping up their content in the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag. &lt;/li&gt;
&lt;li&gt;Multiple &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags on a single webpage. The title inside the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is supposed to reflect the purpose of that very webpage. If you want to highlight any section of the page use different Heading tags and use only a single &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag per page. Have proper signposts in the form of headings to help users find their concerned part of content quickly.&lt;/li&gt;
&lt;li&gt;Unstructured Content flow on the Page. Either the CSS is being used or not the content of the page itself should make the sense. If you want to validate that then try disabling the CSS and check if it looks good(you can download &lt;a href="https://chrispederick.com/work/web-developer/"&gt;Web Developer&lt;/a&gt; extension for your browser and Disable CSS). Don't use CSS to control fonts if it can be done by using different HTML tags.&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;alt&lt;/code&gt; attribute for &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. Always add this property to let the user know what was supposed to be there in case a broken image is loaded because of low network bandwidth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from semantic issues, there are few things worth noting to make your web page from better to best, Sometimes, users want more keyboard accessibility rather than using a mouse. They just use &lt;code&gt;Tab&lt;/code&gt; and &lt;code&gt;Shift + Tab&lt;/code&gt; to move around the webpage. So, try to ensure that the flow of the page is going in the right direction and it's easier for a user to navigate around. Always check for cross-browser compatibility of your elements, for example, IE9 behaves differently than most other browsers when a &lt;code&gt;poster&lt;/code&gt; attribute is set in the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag. Most browsers interpret the presence of a &lt;code&gt;poster&lt;/code&gt; attribute to mean that the specified image is to be displayed until the user chooses to play the video. IE9 will only use the specified poster image in this way if preload="none" is set; otherwise, it will take the first still of the video and display that instead. Also, try using the &lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt; tag to add subtitles for your video to be understandable by people with disability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ah-css-thats-where-everything-goes-wrong"&gt;
  &lt;/a&gt;
  Ah CSS! That's where everything goes wrong
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVMdayeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq1aifiv62sxiaqtso4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVMdayeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq1aifiv62sxiaqtso4b.png" alt="CSS you say?"&gt;&lt;/a&gt;&lt;br&gt;
It can be summarized in a simple sentence: &lt;em&gt;Don't Overkill!&lt;/em&gt; There's a lot you can do with CSS but it doesn't mean to use it everywhere even when it's not needed. Pouring in the extra animations and transitions can be distracting. As a developer, we may appreciate the work and thought process you have put into it to make it happen but if it's distracting the target audience from focusing on the concerned content then it's of no use. Always keep it simple. &lt;br&gt;
Adding extra colours never helps. Decide on a theme with the minimum set of colours. You are creating a web page, not a colour palate(unless you are). And always check if the different colours are in contrast and make the content more readable. You can use &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;WebAIM&lt;/a&gt; to pick colours for better contrast. &lt;br&gt;
On a side note check for cross-browser compatibility for CSS too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-js-its-complicated"&gt;
  &lt;/a&gt;
  For JS it's complicated
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9rbEqg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phm61o522b96zg2y86nl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9rbEqg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phm61o522b96zg2y86nl.jpeg" alt="JS, it's Complicated"&gt;&lt;/a&gt;&lt;br&gt;
It always adds complexity to a webpage. Always be sure whether to use it or not. Sometimes it hard to decide whether to use repetitive &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or simply put in a JS snippet. Try to optimize your code as much you can, because low-computation devices might not be able to render that and it's not scalable. There isn't much data you can store on the browser using cookies. Decide for yourself what's important data which user wants to quickly access first when visiting the webpage and compare trade-offs storing it on client-side or server-side. &lt;br&gt;
Nowadays every other website has content dynamically loaded and JS is heavily used to fetch and update the data, to minimize the use of JS for controlling the data try using &lt;a href="https://www.w3.org/TR/wai-aria-1.1/"&gt;WAI-ARIA&lt;/a&gt; which provides semantics in the form of new HTML attributes. For example, if the content is regularly updated then use the &lt;code&gt;aria-live&lt;/code&gt; attribute to decide when to update the data so that the user doesn't miss it depending on its importance. You can set its value to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;off&lt;/code&gt;: The default. Updates should not be announced&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;polite&lt;/code&gt;: Updates should be announced only if the user is idle&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;assertive&lt;/code&gt;: Updates should be announced to the user as soon as possible&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rude&lt;/code&gt;: Updates should be announced straight away, even if this interrupts the user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's a wrap! But there are many more things you can explore and do, and knowing your target audience always ends up creating a better web app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3.org/TR/wai-aria-1.1/"&gt;WAI-ARIA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webaim.org/resources/contrastchecker/"&gt;WebAIM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>frontend</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding Async Await In Javascript</title>
      <author>saroj sasmal</author>
      <pubDate>Fri, 21 May 2021 05:42:51 +0000</pubDate>
      <link>https://dev.to/saroj990/async-await-a-cure-for-promise-hell-52i5</link>
      <guid>https://dev.to/saroj990/async-await-a-cure-for-promise-hell-52i5</guid>
      <description>&lt;p&gt;In this article, we are going to explore &lt;code&gt;async/await&lt;/code&gt; which is the go-to tool for every javascript developer for async programming. If you're fairly new to javascript, don't worry, this article will help you understand &lt;code&gt;async/await&lt;/code&gt; from the ground up.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;async/await&lt;/code&gt; is a pattern in javascript which makes your code execute in a synchronous fashion but without compromising the async behaviour of javascript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#defining-an-async-function"&gt;
  &lt;/a&gt;
  Defining an Async Function
&lt;/h4&gt;

&lt;p&gt;To define an async function, all you need to do just prepend an async keyword before the function definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// async function always returns a promise&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy-peasy!😎. Using the &lt;em&gt;async&lt;/em&gt; keyword before a function name &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;makes that function return a promise.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;resolves when the function returns.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;finally rejects when an error is thrown.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It means you don't need to declare the &lt;em&gt;return Promise.new()&lt;/em&gt; each time you want to create a promise. &lt;/p&gt;

&lt;p&gt;To prove that an async function returns a promise, we can quickly attach a &lt;em&gt;then&lt;/em&gt; block to print its value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from an async function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//Hello from an async function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-await-and-executing-async-functions"&gt;
  &lt;/a&gt;
  Using Await and Executing Async Functions
&lt;/h4&gt;

&lt;p&gt;Isn't cool that we can do &lt;code&gt;then()&lt;/code&gt; and &lt;code&gt;catch()&lt;/code&gt; on an &lt;code&gt;async&lt;/code&gt; function ? But that's not the real power of an async function, an &lt;code&gt;async&lt;/code&gt; function's real potential lies in &lt;code&gt;await&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;await&lt;/code&gt; makes the function to be executed in a synchronous way while holding the control in that line until the awaiting method has finished its execution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from an async function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Here are a few rules of thumb that we need to remember.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;👉 &lt;em&gt;await can only be used inside an async function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A function must be declared &lt;code&gt;async&lt;/code&gt; if we use the &lt;em&gt;await&lt;/em&gt; inside it but not the other way around.&lt;/p&gt;

&lt;p&gt;Let me put it in this way. If an &lt;code&gt;await&lt;/code&gt; statement is used inside a method, that method must be an &lt;code&gt;async&lt;/code&gt; method, else the compiler will yell at us.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from an async function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;//this function must be async&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* 
SyntaxError: await is only valid in async function
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;But declaring a function &lt;code&gt;async&lt;/code&gt; doesn't necessarily mean we would always use an &lt;code&gt;await&lt;/code&gt; inside it. Here &lt;code&gt;greet()&lt;/code&gt; is an &lt;code&gt;async&lt;/code&gt; method but we don't have any &lt;code&gt;await&lt;/code&gt; statements inside it.&lt;/p&gt;

&lt;p&gt;👉 &lt;em&gt;await makes sense when the function it is called on, returns a promise or is an async function&lt;/em&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//not an async function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from an async function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Hello from an async function&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Although the code works exactly the same as the previous one, doing an &lt;code&gt;await&lt;/code&gt; on a &lt;code&gt;synchronous&lt;/code&gt; function does not make any sense. I would like to know what are your thoughts on this ?🤔🤔.&lt;/p&gt;

&lt;p&gt;One important aspect of using await is the fact that it blocks the execution of the next lines of code until the await block is executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asyncGreet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;before executing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncGreet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//blocks execution here&lt;/span&gt;
  &lt;span class="c1"&gt;// 👇 executed once await is finished&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I will be executed after 2000ms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you must be wondering if &lt;em&gt;await&lt;/em&gt; makes the code synchronous, why should we use it? NodeJs or browser Javascript are single-threaded environments and execute one task at a time and widely used because of their asynchronous behaviour, which we're losing. So what is the point?&lt;/p&gt;

&lt;p&gt;Yes, you're right that but if you observe in most of the cases, we need to perform a task in relation to others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;subscribeToNewsLetter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;findUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//👇methods need user email to execute&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sendNotification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's correct. but what about code that is not related to each other? Well, there is an alternative for that as well i.e. (&lt;code&gt;Promise.all&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asyncGreet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jane&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;david&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greetingPromises&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;asyncGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greetingPromises&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know the above code is a contrived example, what is important here is that we are using the power of &lt;code&gt;Promise.all&lt;/code&gt; to execute all the promises &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#handling-errors-in-raw-asyncawait-endraw-"&gt;
  &lt;/a&gt;
  Handling Errors in &lt;code&gt;Async/Await&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;Dealing with errors is pretty easy with &lt;em&gt;async/await&lt;/em&gt;, we can use our old friend the &lt;em&gt;try/catch&lt;/em&gt; block for achieving this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;subscribeToNewsLetter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;findUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sendNotification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//handle error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is also another version where we can attach a &lt;em&gt;catch&lt;/em&gt; handler directly to the &lt;em&gt;await&lt;/em&gt; block. I don't use it personally but you can give it a try if you want👍.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncGreet&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2x-readability-easy-debugging"&gt;
  &lt;/a&gt;
  2x Readability, Easy Debugging
&lt;/h4&gt;

&lt;p&gt;The following code uses a &lt;em&gt;Promise&lt;/em&gt; to find the user by &lt;em&gt;id&lt;/em&gt;, assigns the profile information, and then finds the user's subscription.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;User&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
        &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code works perfectly fine, but we could definitely make it more readable, concise, and easier to debug with &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;. Let's give it a go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#callbacks-and-raw-asyncawait-endraw-are-enemies"&gt;
  &lt;/a&gt;
  Callbacks and &lt;code&gt;Async/Await&lt;/code&gt; are Enemies
&lt;/h4&gt;

&lt;p&gt;As we already saw in our previous example, promises play really well with &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;. Any function that returns a promise can be used with &lt;code&gt;await&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;But when it comes to callbacks, it’s totally the opposite, callbacks can’t be directly used with &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, they must be converted to a promise.&lt;/p&gt;

&lt;p&gt;let's consider the following function which asynchronously tests if a value is even or not(raise an error).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;asyncEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;even&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not even&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We know await is not permissible on callback but still, let's give it a try.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//🐶👹 Wrong way&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isEven &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//undefined&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You must be thinking, that we didn't attach a callback that's the reason it printed &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's attach a callback, which is super weird but let's have patience.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//this is also wrong 🐶👹&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inside await on callback&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)});&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isEven &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="cm"&gt;/*
output:
even  undefined
inside await on callback even null
*/&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems like the callback was called and we also got values from the asyncEven function. That's correct but still, it is a wrong approach.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;await&lt;/code&gt; has no impact on callback. it similar to doing an await on a synchronous function.&lt;/p&gt;

&lt;p&gt;Then why did it return &lt;em&gt;undefined&lt;/em&gt;? That's a good question. This the default nature of asynchronous programming. The &lt;em&gt;setTimeout&lt;/em&gt; function is a callback that returns a value via the callback after 2000ms, meanwhile, the control start executing the next line of code, and it reaches the end of the function, that is why we get an &lt;em&gt;undefined&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So what is the solution? Pretty simple. Turn the &lt;code&gt;asyncEven&lt;/code&gt; function to a promise and use &lt;code&gt;await&lt;/code&gt; like a champ.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;asyncEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;even&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not even&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// waits for the execution&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iseven &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;even&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#foreach-does-not-play-well-with-raw-asyncawait-endraw-"&gt;
  &lt;/a&gt;
  ForEach Does Not Play Well with &lt;code&gt;Async/Await&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;ForEach loop may have side effects if we use it with &lt;code&gt;async/await&lt;/code&gt;. Consider the following example, the &lt;code&gt;console.log&lt;/code&gt; statement here doesn't wait for the &lt;code&gt;await greet(name)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, how are you ?`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;before printing names&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;john&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jane&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;//does not wait here&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;after printing names&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="cm"&gt;/*
before printing names
after printing names
Hello john, how are you ?
Hello jane, how are you ?
Hello joe, how are you ?
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#more-than-just-a-syntactic-sugar"&gt;
  &lt;/a&gt;
  More Than Just a Syntactic Sugar
&lt;/h4&gt;

&lt;p&gt;So far we only know that &lt;code&gt;async/await&lt;/code&gt; makes our code more readable, debug friendly and some people say it's a syntactic sugar on javascript promises. In reality, it's more than just a syntactic sugar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// promise&lt;/span&gt;
&lt;span class="nx"&gt;async1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;asyncTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;asyncThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;//other statement&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;//async await&lt;/span&gt;
&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;async1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;await&lt;/code&gt; suspends the execution of current function, while promise continues executing the current function adding the value to the &lt;code&gt;then()&lt;/code&gt;. There is a significant difference between these two way of executing programs.&lt;/p&gt;

&lt;p&gt;Let me explain, consider the promise version, if &lt;em&gt;asyncTwo()&lt;/em&gt; or &lt;em&gt;asyncThree()&lt;/em&gt; throws an async error while performing a task, will it include &lt;code&gt;async1()&lt;/code&gt;in the stack trace ?&lt;/p&gt;

&lt;p&gt;Here promise does not suspend the execution of current function, by the time &lt;code&gt;asyncTwo&lt;/code&gt; resolves or rejects, the context is out of the promise statement. So ideally, it not able to include &lt;code&gt;asyncOne&lt;/code&gt; in the stack trace . But thanks to V8 engine, it does some magic here, by keeping reference to &lt;code&gt;asyncOne()&lt;/code&gt; ahead of the time in order to include &lt;code&gt;asyncOne()&lt;/code&gt; in the context. But this does not come for free. Capturing the stack trace takes time (i.e. degrades performance); storing these stack traces requires memory.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;async/await&lt;/code&gt; beats promises in terms of performance, as the execution of current function is halted until the awaiting function is finished, so we already a have a reference to the function. &lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thanks for reading this article, I hope this post was helpful in understanding the async/await feature of javascript. If you like my article, please show your love by liking this post, this would mean so much to me. Meanwhile you can check out my &lt;a href="https://dev.to/saroj990/mastering-javascript-promises-4kfh"&gt;article&lt;/a&gt; on javascript promises.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;br&gt;
&lt;a href="https://mathiasbynens.be/notes/async-stack-traces"&gt;https://mathiasbynens.be/notes/async-stack-traces&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Responsive Navbar with only HTML and CSS</title>
      <author>Atul Prajapati</author>
      <pubDate>Fri, 21 May 2021 04:20:28 +0000</pubDate>
      <link>https://dev.to/atulcodex/responsive-navbar-with-only-html-and-css-269</link>
      <guid>https://dev.to/atulcodex/responsive-navbar-with-only-html-and-css-269</guid>
      <description>&lt;p&gt;Yes, you can make a responsive navbar with only HTML and CSS. Let's learn how?&lt;/p&gt;

&lt;p&gt;First of all, you have to create an HTML file with these codes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEKsdyx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0iz9sbz8prbwutit75n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEKsdyx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0iz9sbz8prbwutit75n.png" alt="Responsive navbar HTML code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this HTML file, I have created a nav tag for navigation I that I have separated into elements first is menu links which is visible by default on the desktop screen and second is the square box which will visible on small screen devices to hide/show the menu links in smartphone screens.&lt;/p&gt;




&lt;p&gt;I have used &lt;code&gt;&amp;lt;section&amp;gt;&amp;lt;/section&amp;gt;&lt;/code&gt; tag to add a huge image to cover the blank screen of the device.&lt;/p&gt;

&lt;p&gt;That's it for the HTML code.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-link-httpsdevtoatulcodexopensourceportfoliotemplate2a97-"&gt;
  &lt;/a&gt;
  &lt;div class="ltag__link"&gt;
  &lt;a href="/atulcodex" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ErqHWdNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZnbzrMba--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/164389/2f218b06-d5c9-4cae-b3b5-d582cfc110a0.jpg" alt="atulcodex image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/atulcodex/open-source-portfolio-template-2a97" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Open Source portfolio template 🔥&lt;/h2&gt;
      &lt;h3&gt;Atul Prajapati ・ Mar 31 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#portfolio&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,200;0,400;0,600;1,200&amp;amp;display=swap');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By this line of code, I'm getting 'Poppins' font family from &lt;a href="https://fonts.google.com/"&gt;google font&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now i just you to play around with this codepen project&lt;/p&gt;

&lt;p&gt;NOTE: &lt;code&gt;~&lt;/code&gt; this is if else condition &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/atulcodex/embed/ZEeBNgr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>What do you think about strongly-annotated HTML?</title>
      <author>Calin Baenen</author>
      <pubDate>Fri, 21 May 2021 04:12:38 +0000</pubDate>
      <link>https://dev.to/baenencalin/what-do-you-think-about-strongly-annotated-html-94o</link>
      <guid>https://dev.to/baenencalin/what-do-you-think-about-strongly-annotated-html-94o</guid>
      <description>&lt;p&gt;I want to know what you all think about strongly-annotated HTML?&lt;br&gt;
Let me know!&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;b&gt;&lt;h1&gt;&lt;b&gt;What is strongly-annotated HTML?&lt;/b&gt;&lt;/h1&gt;&lt;/b&gt;&lt;br&gt;
Strongly-annotated HTML is where you don't leave any optional attributes unset, even if they have a default value.&lt;br&gt;
E.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;"ltr"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"css"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;/* ... */&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./icon.png"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;language=&lt;/span&gt;&lt;span class="s"&gt;"css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./_.css"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"An image of Katty."&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./katty.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An example of non-annotated HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;/* ... */&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./icon.png"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./_.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"An image of Katty."&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./katty.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Using Font Awesome Icons in a React Application</title>
      <author>Sabin Adams 🧑🏻‍💻</author>
      <pubDate>Fri, 21 May 2021 02:57:03 +0000</pubDate>
      <link>https://dev.to/sabinthedev/using-font-awesome-icons-in-a-react-application-lpe</link>
      <guid>https://dev.to/sabinthedev/using-font-awesome-icons-in-a-react-application-lpe</guid>
      <description>&lt;p&gt;If you've ever had to display some sort of Icon on a webpage, more than likely you've used or seen &lt;a href="https://fontawesome.com/"&gt;Font Awesome&lt;/a&gt;. Font Awesome is an awesome &lt;em&gt;(heh)&lt;/em&gt; toolkit that provides a rich set of icons and logos. &lt;/p&gt;

&lt;p&gt;The amazing team over at Font Awesome provides a nice React component that makes adding these icons to your React application super simple. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to follow along in this tutorial, you'll need to set up a React application. The quickest and easiest way to do this would be to use &lt;code&gt;create-react-app&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In case you aren't familiar with &lt;code&gt;create-react-app&lt;/code&gt;, I have a tutorial &lt;a href="https://www.sabinthedev.com/post/create-react-app-setup/"&gt;here&lt;/a&gt; that walks you through the steps to get a basic project set up and running&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#installing-font-awesome"&gt;
  &lt;/a&gt;
  Installing Font Awesome
&lt;/h2&gt;

&lt;p&gt;Once you've got your React application started, we'll need to install the libries Font Awesome provides:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# SVG Rendering Library&lt;/span&gt;
npm i &lt;span class="nt"&gt;--save&lt;/span&gt; @fortawesome/fontawesome-svg-core
&lt;span class="c"&gt;# The set of icons Font Awesome provides&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @fortawesome/free-solid-svg-icons
&lt;span class="c"&gt;# The actual React component we will be using&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; @fortawesome/react-fontawesome
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install all the pieces necessary to load up and render the icons you want to use.&lt;/p&gt;

&lt;p&gt;There are a bunch of other sets of icons in different styles you can install, including the &lt;a href="https://fontawesome.com/plans"&gt;Pro&lt;/a&gt; icons. For our purposes here, we'll stick to the solid-style free icons and logos.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: To use Pro icons, you will need a paid Pro account.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#using-an-icon"&gt;
  &lt;/a&gt;
  Using an Icon
&lt;/h2&gt;

&lt;p&gt;Now that we've got all of our packages installed, it's time for the fun part! Let's throw some icons on the page!&lt;/p&gt;

&lt;p&gt;For now, let's open up our &lt;code&gt;App.js&lt;/code&gt; file. This file should just contain the boilerplate JSX &lt;code&gt;create-react-app&lt;/code&gt; provides. Let's go ahead and get rid of everything in the main &lt;code&gt;header&lt;/code&gt; tag so we have a clean slate but keep some styling. &lt;/p&gt;

&lt;p&gt;In order to throw an Icon on this page, we're going to need to import the &lt;code&gt;FontAwesomeIcon&lt;/code&gt; component we installed and an SVG Icon to render. Let's use the &lt;code&gt;fa-rocket&lt;/code&gt; icon. Then we can render out that component and give the icon we want to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Font Awesome Imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;faRocket&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fortawesome/free-solid-svg-icons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fortawesome/react-fontawesome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;faRocket&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: The icons exported from the icon libraries are in Camel Case&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The output of that should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3AuKv82l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od63nd5vnzpdp4d1jbgi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3AuKv82l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/od63nd5vnzpdp4d1jbgi.png" alt="Rocket Icon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, Font Awesome has a ton of different styles and sets of icons to choose from, however because a lot of those require a Pro account I will leave those out of this tutorial. &lt;/p&gt;

&lt;p&gt;If you're interested in using these, take a look at their &lt;a href="https://fontawesome.com/how-to-use/on-the-web/using-with/react"&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-an-icon-library"&gt;
  &lt;/a&gt;
  Setting up an Icon Library
&lt;/h2&gt;

&lt;p&gt;What happens if we have a TON of icons we want to use? Will we have to re-import them everywhere we want to use them?&lt;/p&gt;

&lt;p&gt;Great question! The answer is no, Font Awesome provides a way to create a &lt;code&gt;library&lt;/code&gt; of icons that become globally available to the application after being imported. &lt;/p&gt;

&lt;p&gt;To set that up, let's first create a new file called &lt;code&gt;fontawesome.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We'll add the library setup into this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import the library&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;library&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fortawesome/fontawesome-svg-core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Import whichever icons you want to use&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;faRocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;faHome&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fortawesome/free-solid-svg-icons&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Add the icons to your library&lt;/span&gt;
&lt;span class="nx"&gt;library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;faRocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;faHome&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are picking out the icons we want and adding them to out "library" that will become globally available after we put this file to use. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: You can also &lt;code&gt;import * as Icons from '@fortawesome/free-solid-svg-icons';&lt;/code&gt; and map those into your library to get &lt;em&gt;all&lt;/em&gt; of the icons, but the bundle size is huge! Best to just pick the ones you know you'll need.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, we've got a library. Let's use it. Over in your &lt;code&gt;index.js&lt;/code&gt; file we're going to import that &lt;code&gt;fontawesome.js&lt;/code&gt; file so that it runs when the application starts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;reportWebVitals&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./reportWebVitals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./fontawesome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// If you want to start measuring performance in your app, pass a function&lt;/span&gt;
&lt;span class="c1"&gt;// to log results (for example: reportWebVitals(console.log))&lt;/span&gt;
&lt;span class="c1"&gt;// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals&lt;/span&gt;
&lt;span class="nx"&gt;reportWebVitals&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all the setup for the library! The icons you put into your library should now be globally available. The only thing that's changed is how we specify our icons when rendering a &lt;code&gt;&amp;lt;FontAwesomeIcon&amp;gt;&lt;/code&gt; component. Let's take a look back in the &lt;code&gt;App.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// NOTICE we don't need to import the individual icons!&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fortawesome/react-fontawesome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rocket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We no longer need to import each individual icon into our component! Also, in the &lt;code&gt;&amp;lt;FontAwesomeIcon&amp;gt;&lt;/code&gt; itself, rather than passing it an icon, we will pass it an array. This array should have:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The icon prefix (&lt;em&gt;see the full selection &lt;a href="https://fontawesome.com/icons"&gt;here&lt;/a&gt;&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;The icon's name without the prefix&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8L8O8inj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t4xh8ejzj2l8nbvvlw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8L8O8inj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t4xh8ejzj2l8nbvvlw6.png" alt="Rocket and Home Icon"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And there you have it! You can now use icons as you please throughout your application.&lt;/p&gt;

&lt;p&gt;There are other configuration options and attributes you can apply to these icons that are described in Font Awesome's &lt;a href="https://fontawesome.com/how-to-use/on-the-web/using-with/react"&gt;docs&lt;/a&gt; that I highly recommend checking out!&lt;/p&gt;

&lt;p&gt;Thanks for reading, and have fun throwing all the icons you can onto your next React webpage 😎&lt;/p&gt;

&lt;p&gt;P.S. If you liked this article, be sure to follow me on &lt;a href="https://twitter.com/sabinthedev"&gt;Twitter&lt;/a&gt; to get updates on new articles I write&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>🚀 Productivity Tips 🚀 for every Javascript Programmer 💻</title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Fri, 21 May 2021 02:30:41 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/productivity-tips-for-every-javascript-programmer-59l2</link>
      <guid>https://dev.to/sudarshansb143/productivity-tips-for-every-javascript-programmer-59l2</guid>
      <description>&lt;p&gt;Here is a interesting fact, do you know which is the worlds most hated and most loved programming language .......? 🙄&lt;/p&gt;

&lt;p&gt;(anyways) You are right it is   ❤ JAVASCRIPT  ❤ &lt;/p&gt;

&lt;p&gt;Someone who is working in javascript from a certain period of time can easily describe the advantages of using javascript over some another languages like PHP and Python.&lt;br&gt;
for ex.&lt;/p&gt;

&lt;p&gt;🔰🔰🔰&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Async nature of javascript &lt;/li&gt;
&lt;li&gt;Interpreted instead of Compiled
&lt;/li&gt;
&lt;li&gt;Supports Promises and Closures and many more.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But, every thing comes with it's own cost. If someone tried coding in javascript without understanding the execution context and behavior of javascript, then (I think) it's the end game.&lt;/p&gt;

&lt;p&gt;For avoiding this kinds of situation, here is the list of best practices, which anyone can follow to avoid the future mistakes. &lt;/p&gt;

&lt;p&gt;👉 one thing, I want to mention is, this may not be worlds best article for best practices, but I will definitely make it as good as possible. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#understand-scoping-of-variables-"&gt;
  &lt;/a&gt;
  🔳 Understand Scoping of Variables :
&lt;/h3&gt;

&lt;p&gt;Understanding the scoping of variables is pretty important while coding. Variables declared with &lt;em&gt;let&lt;/em&gt; are specifically blocked scope. Whereas, if you used &lt;em&gt;var&lt;/em&gt; then you can hoist it anywhere in your code, but using &lt;em&gt;var&lt;/em&gt; should be avoided as much as possible (suggested by many !).&lt;/p&gt;

&lt;p&gt;But, I escalate this suggestion only when there is nothings seems working or scenarios where, I have to manipulate the global variables based of the events like &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If exception occurs print log and terminate programme using
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;etc...&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#getting-known-to-this-"&gt;
  &lt;/a&gt;
  📢 Getting Known To &lt;em&gt;This&lt;/em&gt; :
&lt;/h3&gt;

&lt;p&gt;I often find the behavior of the &lt;em&gt;this&lt;/em&gt; is pretty confusing in javascript for me. Coming from the background of &lt;strong&gt;java&lt;/strong&gt; and &lt;br&gt;
PHP, I assumed that I will definitely feel at home if I used it but, then I was pretty confused when getting started with the React or ES6. After several weird things, I left it and then approached the programming in javascript using &lt;strong&gt;functional&lt;/strong&gt; &lt;br&gt;
approach. &lt;/p&gt;

&lt;p&gt;It is still pretty confusing for me to know how &lt;em&gt;this&lt;/em&gt; works, but if you wanna use it then know it perfectly. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#create-pure-functions-"&gt;
  &lt;/a&gt;
  🍭Create Pure Functions :
&lt;/h3&gt;

&lt;p&gt;This is the principal everyone should follow in their programming paradigm. Creating pure functions and causing less side effects on the external world, makes the function more reusable and robust. If function is no longer making any side effects on the global context or the data present outside the body of the function, then it can be easily swapped out, reused and manipulated with ease&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3EK-b6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6p1fesw249t7ni2dufy6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3EK-b6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6p1fesw249t7ni2dufy6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#never-trust-api-response-blindly"&gt;
  &lt;/a&gt;
  😷 Never Trust API Response Blindly:
&lt;/h3&gt;

&lt;p&gt;Handling the API responses blindly can easily lead us to the end game or late night forceful fixes. Always handle the API response with null coalescing operators or default initialization of the variables. &lt;/p&gt;

&lt;p&gt;for ex .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44ABpU-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igtvwntvxtl8bsed6p0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44ABpU-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igtvwntvxtl8bsed6p0m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Know more about &lt;a href="https://dev.to/sudarshansb143/6-nullish-coalescing-operators-every-javascript-programmer-must-know-12m2"&gt;Null Coalescing Operators Here&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-iief-whenever-possible-"&gt;
  &lt;/a&gt;
  💪 Use IIEF Whenever Possible :
&lt;/h3&gt;

&lt;p&gt;IIEF stands for " Immediately Invoking Function Expression". It's comes pretty handy if you want to make your isolated from the  global context. Take a look at here &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TnR7pYbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7pqvn94sa1brmpfwab6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TnR7pYbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7pqvn94sa1brmpfwab6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IIEF keeps the variable inside the context and avoids the hoisting.  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-promises-instead-of-callback-only-approach-"&gt;
  &lt;/a&gt;
  😎 Use Promises Instead of Callback Only Approach :
&lt;/h3&gt;

&lt;p&gt;Using Promises is pretty standard practice now. But, anyone using callback-only approach must take a look at here.&lt;/p&gt;

&lt;p&gt;Introducing promises cured the some major deficiencies in the javascript. for ex&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inversion of Control trust loss &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;etc. &lt;/p&gt;

&lt;p&gt;Handle promises gracefully and enjoy the javascripting &lt;/p&gt;




&lt;p&gt;🏵 Final Thoughts 🏵 &lt;/p&gt;

&lt;p&gt;Using javascript with modern practices could be the experience which any programmer never wanna leave, but it can be nightmare for someone who tries to get rid of the basic and directly jump into the advanced stuff.&lt;/p&gt;

&lt;p&gt;Thanks for reading 🙏&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How I Learned to Code and Started Freelancing Full-Time in 8 Months</title>
      <author>Sam Tanoak Sycamore</author>
      <pubDate>Fri, 21 May 2021 02:23:13 +0000</pubDate>
      <link>https://dev.to/tanoaksam/how-i-learned-to-code-and-started-freelancing-full-time-in-8-months-4kpl</link>
      <guid>https://dev.to/tanoaksam/how-i-learned-to-code-and-started-freelancing-full-time-in-8-months-4kpl</guid>
      <description>&lt;p&gt;In September 2020 I signed up for Free Code Camp and started learning HTML and CSS.&lt;/p&gt;

&lt;p&gt;In April 2021 I doubled my monthly income from my previous job in landscaping, doing freelance web development and technical writing work.&lt;/p&gt;

&lt;p&gt;In the span of 8 months - using mostly free resources - I went from being a complete beginner with code, to being offered more contract work than I'm able to take on.&lt;/p&gt;

&lt;p&gt;If that sounds crazy to you - well, yeah. It's been crazy for me, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#real-talk"&gt;
  &lt;/a&gt;
  Real talk
&lt;/h2&gt;

&lt;p&gt;This journey has led to a pretty large audience growing around me on &lt;a href="https://www.twitter.com/tanoaksam"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Hundreds of people have reached out to me to ask how I've done it.&lt;/p&gt;

&lt;p&gt;My honest answer:&lt;/p&gt;

&lt;p&gt;I wish I knew!&lt;/p&gt;

&lt;p&gt;Believe me, if I knew the secret formula to break into the tech industry, I'd bottle it and hand it out on street corners in the hopes that everyone could enjoy the high compensation and high quality of life that a career in tech affords.&lt;/p&gt;

&lt;p&gt;What I've attempted to do here is maybe the next best thing that I can offer:&lt;/p&gt;

&lt;p&gt;To revisit the choices I made and the resources I learned from along the way, to the best of my recollection.&lt;/p&gt;

&lt;p&gt;Will you be able to accomplish exactly what I have, if you try to recreate my timeline?&lt;/p&gt;

&lt;p&gt;Well, no, probably not.&lt;/p&gt;

&lt;p&gt;I won't mince words here: &lt;/p&gt;

&lt;p&gt;First of all, I'm a straight white male with a nice smile who lives in California, USA. I have a liberal arts education. &lt;/p&gt;

&lt;p&gt;Relatively speaking, it's pretty easy for me to get a haircut, put on a clean shirt, and be taken seriously as a "software engineer" mere hours after mowing lawns for minimum wage.&lt;/p&gt;

&lt;p&gt;Second, I'm coming up on 35 years old. &lt;/p&gt;

&lt;p&gt;I've been around the block. A few times.&lt;/p&gt;

&lt;p&gt;I showed up to the tech industry with a fairly mature set of "soft skills" - I have many years of experience in other industries, and I'm good at what I know how to do.&lt;/p&gt;

&lt;p&gt;I also showed up with a helluva lot of &lt;strong&gt;grit&lt;/strong&gt; - which I think of as perseverance plus passion. &lt;/p&gt;

&lt;p&gt;There comes a point about halfway through this story where my only choice is whether to sink or swim. &lt;/p&gt;

&lt;p&gt;I absolutely could have failed. But I would have kept going anyway, because life didn't give me any other option.&lt;/p&gt;

&lt;p&gt;My real hope in telling my story in conjunction with the resources I used, is so you will see that &lt;em&gt;it didn't take as much as you might think for me to get to where I am.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you just want to check out the learning resources, you can find a complete list of everything mentioned at the end the article.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't get me wrong: I'm a total n00b! I'm definitely not qualified to be your mentor, dear sweet stranger/friend I don't know yet DMing me on Twitter.&lt;/p&gt;

&lt;p&gt;And I fully expect to feel that way for years to come.&lt;/p&gt;

&lt;p&gt;But:&lt;/p&gt;

&lt;p&gt;I know &lt;strong&gt;enough&lt;/strong&gt; to be useful to the right teams.&lt;/p&gt;

&lt;p&gt;And more importantly:&lt;/p&gt;

&lt;p&gt;I know &lt;em&gt;how to learn&lt;/em&gt;, and I know &lt;em&gt;"how to win friends and influence people"&lt;/em&gt;, so to speak.&lt;/p&gt;

&lt;p&gt;This is how I got here:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-8month-journey-to-fulltime-freelancing-in-tech"&gt;
  &lt;/a&gt;
  My 8-Month Journey to Full-Time Freelancing in Tech
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#month-1-september-2020"&gt;
  &lt;/a&gt;
  Month 1: September 2020
&lt;/h3&gt;

&lt;p&gt;Feeling burned out and directionless in my paycheck-to-paycheck career, I started toying around with a crazy idea:&lt;/p&gt;

&lt;p&gt;What if I taught myself to code?&lt;/p&gt;

&lt;p&gt;Could I land a job in tech without a CS degree?&lt;/p&gt;

&lt;p&gt;Where do I even start?&lt;/p&gt;

&lt;p&gt;After lots of googling “Python vs JavaScript” etc. I settled on JS &amp;amp; web development.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-javascript"&gt;
  &lt;/a&gt;
  Why JavaScript?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;most in-demand&lt;/li&gt;
&lt;li&gt;lowest barrier to entry&lt;/li&gt;
&lt;li&gt;CS students often learn Python but not JS so i figured it’d be a more level playing field&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be honest, I felt absolutely ridiculous to even be considering any of this. I was so embarrassed to tell my girlfriend about it, and she was understandably confused and skeptical. As was I!&lt;/p&gt;

&lt;p&gt;I'd spent the previous five years working as a carpenter and landscaper while writing a blog about homesteading. Why would anyone ever take me seriously in tech?&lt;/p&gt;

&lt;p&gt;Then I found a podcast called &lt;em&gt;JavaScript Jabber&lt;/em&gt; and listened to an episode called &lt;a href="https://devchat.tv/js-jabber/jsj-442-breaking-into-tech-with-danny-thompson/"&gt;&lt;em&gt;Breaking Into Tech with Danny Thompson&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Danny's story changed my life.&lt;/p&gt;

&lt;p&gt;I'm not exaggerating.&lt;/p&gt;

&lt;p&gt;His story lit a fire inside of me that I've been stoking ever since.&lt;/p&gt;

&lt;p&gt;If you don't know Danny, do yourself a favor and listen to that podcast episode. You can come back to this later. It will still be here.&lt;/p&gt;

&lt;p&gt;I was working full time in construction from 9-5 at this time, so I started waking up at 4 AM every day to work through &lt;a href="https://www.freecodecamp.org"&gt;Free Code Camp&lt;/a&gt;, as well as my first Udemy course:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.udemy.com/course/design-and-develop-a-killer-website-with-html5-and-css3/"&gt;Build Responsive Real-World Websites with HTML5 and CSS3&lt;/a&gt; by Jonas Schmedtmann&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found that I really genuinely enjoyed the work, and I was eager to get up for my pre-dawn study sessions each day.&lt;/p&gt;

&lt;p&gt;As soon as I could build a full landing page, I started daydreaming about how I might be able to sell websites to local businesses. &lt;/p&gt;

&lt;p&gt;My first solo project was a re-creation of the site in Jonas's course, but redesigned with a local biz in mind.&lt;/p&gt;

&lt;p&gt;Once I felt sure I wanted to keep going with this stuff, I bought my second Udemy course, also by Jonas:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.udemy.com/course/the-complete-javascript-course/"&gt;The Complete JavaScript Course 2021: From Zero to Expert&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Looking back through my Udemy account in May 2021, I am seeing that I only ever made it about 30% of the way through both of these courses. Don't beat yourself up over unfinished tutorials! Take what you need and keep going.&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#month-2-october-2020"&gt;
  &lt;/a&gt;
  Month 2: October 2020
&lt;/h3&gt;

&lt;p&gt;On October 1 I started working through &lt;a href="https://www.theodinproject.com"&gt;The Odin Project&lt;/a&gt;. That program instructed me to set up git and GitHub right away - this is something I am really glad for, in retrospect.&lt;/p&gt;

&lt;p&gt;TOP also encouraged me to sign up for &lt;a href="https://www.twitter.com/tanoaksam"&gt;Twitter&lt;/a&gt; and take on a #100daysofcode challenge.&lt;/p&gt;

&lt;p&gt;That decision has turned out to be arguably the most impactful thing I've done throughout this entire journey. I cannot stress enough how huge the Tech Twitter community has been for my growth and my professional network.&lt;/p&gt;

&lt;p&gt;Beyond those steps, I didn't make it very far into TOP because I hit a wall with JavaScript fundamentals and decided maybe I should retreat back to HTML &amp;amp; CSS for a bit.&lt;/p&gt;

&lt;p&gt;One day while browsing Reddit to try to decide just how foolish and silly I was for trying to make this career change, I stumbled upon a thread posted by &lt;a href="https://www.leonnoel.com"&gt;Leon Noel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He said he was running a &lt;em&gt;free&lt;/em&gt; full-stack JavaScript bootcamp online over the next 7 months.&lt;/p&gt;

&lt;p&gt;I signed up immediately. &lt;/p&gt;

&lt;p&gt;This is another big decision I made early on that has had a huge impact on my overall trajectory.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.leonnoel.com"&gt;Leon&lt;/a&gt; has amassed an incredible wealth of no-strings-attached free resources for learning how to code, and &lt;a href="https://www.leonnoel.com/100devs"&gt;the 100 Devs community&lt;/a&gt; is one of the best I'm aware of in this realm.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don't need to join 100 Devs specifically - though we'd be glad to have you!&lt;/p&gt;

&lt;p&gt;But you do need to plug into &lt;em&gt;some&lt;/em&gt; community, somewhere.&lt;/p&gt;

&lt;p&gt;Don't try to do this alone. Trust me.&lt;/p&gt;

&lt;p&gt;Towards the end of this month I did the first few projects in Wes Bos's &lt;a href="https://javascript30.com/"&gt;JavaScript 30&lt;/a&gt;, but once again felt like I just wasn't ready for JavaScript at this level yet.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#month-3-november-2020"&gt;
  &lt;/a&gt;
  Month 3: November 2020
&lt;/h3&gt;

&lt;p&gt;I was feeling good about my progress at this point with HTML &amp;amp; CSS, so I signed up for &lt;a href="https://www.teamtreehouse.com"&gt;Team Treehouse&lt;/a&gt; to try to go deeper with JS. &lt;/p&gt;

&lt;p&gt;I really liked the initial assessment they gave me, and was surprised to discover that I'd actually tested out of the first few sections of their JS fundamentals curriculum. I found their course style and frequent quizzes to be great for making sure I was really understanding what I was studying.&lt;/p&gt;

&lt;p&gt;Now in addition to my 4 AM studying I was also in front of the computer most nights after work, too.&lt;/p&gt;

&lt;p&gt;Around Thanksgiving (late November), Leon gave us a half-dozen website designs and said "have at it - do your worst translating these into HTML and CSS."&lt;/p&gt;

&lt;p&gt;This was the first moment in my journey when I started to feel like I had legitimately accomplished something.&lt;/p&gt;

&lt;p&gt;I don't remember when, but definitely by this point I had become aware of Brad Traversy - I'm not going to say he's the only tech YouTuber you &lt;em&gt;need&lt;/em&gt; to follow, but if you only have time for one:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA"&gt;Traversy Media on YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#month-4-december-2020"&gt;
  &lt;/a&gt;
  Month 4: December 2020
&lt;/h3&gt;

&lt;p&gt;Leon continuously stressed the importance of networking to land a job in tech. &lt;/p&gt;

&lt;p&gt;He assured us that knowing the right people would take us much further, much faster, than solely focusing on acquiring the skills.&lt;/p&gt;

&lt;p&gt;I took this to heart, and started blocking off time for networking just like I did for studying. I began taking Twitter and LinkedIn more seriously as tools for connecting with people in the tech industry.&lt;/p&gt;

&lt;p&gt;I wrote my first blog post about my experiences up to this point - a day in the life of a landscaper teaching himself how to code:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://blog.sycamore.design/learning-to-code-off-grid"&gt;Learning to Code in an Off-Grid Cabin in the Woods&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...Oh, did I mention I don't have running water or conventional electricity?&lt;/p&gt;

&lt;p&gt;That's another story for another day. If you want to know more about what I was up to before I started learning how to code, you can check out this piece I wrote a few months later:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://blog.sycamore.design/full-stack-developer-journey"&gt;Wildfire Refugee to Full-Stack Web Developer: My Journey&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Leon also made it a requirement of the bootcamp that every student had to land at least one freelance website client. &lt;/p&gt;

&lt;p&gt;I began emailing local businesses in my town to see if they’d buy a website from me, but didn’t get much of a response.&lt;/p&gt;

&lt;p&gt;Around the holidays I read the first several chapters of &lt;a href="https://eloquentjavascript.net/"&gt;&lt;em&gt;Eloquent JavaScript&lt;/em&gt;&lt;/a&gt;, and overall I'd say I understood very little.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#month-5-january-2021"&gt;
  &lt;/a&gt;
  Month 5: January 2021
&lt;/h3&gt;

&lt;p&gt;In early January 2021, everything changed in an instant:&lt;/p&gt;

&lt;p&gt;I injured my foot, and had to resign from my day job in construction because it was too painful to be on my feet.&lt;/p&gt;

&lt;p&gt;Studying suddenly became my full-time focus. I began putting in 8-10-hour days pretty much every day of the week.&lt;/p&gt;

&lt;p&gt;The only feasible way for me to earn any money was to try to hustle for that first freelance client that Leon had encouraged us all to seek out.&lt;/p&gt;

&lt;p&gt;In addition to coding and networking, I started reading up on marketing, cold email strategies, and how to generate leads.&lt;/p&gt;

&lt;p&gt;After two weeks and hundreds of emails to local business owners in my region, I actually did it — I sold not just one but &lt;em&gt;two&lt;/em&gt; websites in one day!&lt;/p&gt;

&lt;p&gt;I couldn’t believe it.&lt;/p&gt;

&lt;p&gt;These two sites would earn me more money than I’d make in six weeks of intense physical labor at my previous job.&lt;/p&gt;

&lt;p&gt;But would the work keep coming?&lt;/p&gt;

&lt;p&gt;You can read more about how I landed those first few clients here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://blog.sycamore.design/freelancing-workflow"&gt;My Freelancing Workflow, From Cold Leads to Paid Invoices&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seemed like a good idea to learn WordPress if I was going to venture down the freelance path. So I started in on this Udemy course while I was working on my first client site (which didn't need a CMS):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.udemy.com/course/become-a-wordpress-developer-php-javascript/"&gt;Become a WordPress Developer: Unlocking Power With Code&lt;/a&gt; by Brad Schiff&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn't make it far, though. I enjoyed learning the basics of PHP, but ultimately decided I would be better off focusing solely on JavaScript before trying to take on another language.&lt;/p&gt;

&lt;p&gt;By now I was sailing through the JavaScript curriculum on Team Treehouse. JS became a ton of fun once I got the hang of DOM manipulation and built my first simple to-do app.&lt;/p&gt;

&lt;p&gt;About this same time, I also started reading free resources on React. The first pet project I attempted on my own was a random quote generator that I strung together from a couple different blog tutorials that I tracked down. It was a total mess, but I felt like a genius nonetheless.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#month-6-february-2021"&gt;
  &lt;/a&gt;
  Month 6: February 2021
&lt;/h3&gt;

&lt;p&gt;Searching for an alternative to WordPress, I eventually learned about Gatsby and Next.js.&lt;/p&gt;

&lt;p&gt;This led me down a rabbit hole of reading and learning about headless CMSs and Jamstack architecture so I could use Next.js with my next freelance client.&lt;/p&gt;

&lt;p&gt;I wrote about what I learned from these explorations here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://blog.sycamore.design/headless-cms-jamstack"&gt;A Clueless Newbie's Guide to Headless CMS &amp;amp; the Jamstack&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My experiences with this tech helped me to "level up" as a developer: I finally became comfortable digging directly into documentation instead of searching for tutorials. I started to see how docs could really make or break a tool for me, especially as a newbie.&lt;/p&gt;

&lt;p&gt;At the same time, I continued cold emailing hundreds more biz owners, but couldn’t seem to seal the deal again like I had in January. &lt;/p&gt;

&lt;p&gt;After several weeks of no sales, I figured that January must have been a random stroke of luck that couldn’t be repeated.&lt;/p&gt;

&lt;p&gt;So I started applying for jobs at the end of the month.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#month-7-march-2021"&gt;
  &lt;/a&gt;
  Month 7: March 2021
&lt;/h3&gt;

&lt;p&gt;I landed a few interviews, purely thanks to referrals from the audience that had grown around my Twitter by now.&lt;/p&gt;

&lt;p&gt;Hold on, run that back, I think you need to read that sentence again:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I landed a few interviews, purely thanks to referrals from the audience that had grown around my Twitter by now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's the power of networking.&lt;/p&gt;

&lt;p&gt;Unfortunately, most companies I talked to were rightly skeptical of my intentions: “it kinda looks like you wanna be self-employed, no?” &lt;/p&gt;

&lt;p&gt;My &lt;a href="https://work.sycamore.design"&gt;work history&lt;/a&gt; involves a lot of off-and-on self-employment. I've worked in a few different industries, mostly to make ends meet while pursuing my true passion projects which have also spanned varied interests.&lt;/p&gt;

&lt;p&gt;Even my sharpest resume makes it clear that I would probably prefer to be doing my own thing.&lt;/p&gt;

&lt;p&gt;I also had effectively zero practical experience as a developer, and mostly couldn't get pass the initial sniff tests with hiring managers.&lt;/p&gt;

&lt;p&gt;Up until this point I had my heart set on front end web dev, but now it occurred to me that I could be valuable to the industry as a technical writer. &lt;/p&gt;

&lt;p&gt;I started reaching out to companies on &lt;a href="https://whopaystechnicalwriters.com"&gt;Who Pays Technical Writers?&lt;/a&gt; and got some interest right away.&lt;/p&gt;

&lt;p&gt;And just like that — back to freelancing!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#month-8-april-2021"&gt;
  &lt;/a&gt;
  Month 8: April 2021
&lt;/h3&gt;

&lt;p&gt;I started being more vocal on Twitter about the services I could provide to agencies and tech startups.&lt;/p&gt;

&lt;p&gt;Between my first freelance clients and a few articles published, I had a modest portfolio of &lt;em&gt;real&lt;/em&gt; work in the tech industry. &lt;/p&gt;

&lt;p&gt;Now folks were DMing me to inquire about hiring me for contract work. Or offering to introduce me to others looking to hire.&lt;/p&gt;

&lt;p&gt;For the first time ever in my life, I actually had to &lt;em&gt;turn down&lt;/em&gt; some work I was offered, because I already had too much on my plate!&lt;/p&gt;

&lt;p&gt;After a couple months of almost zero income — being too busy was a really, really great problem to have.&lt;/p&gt;

&lt;p&gt;In April, all told, I invoiced for almost twice what I earned in hourly wages in my last month as a landscaper.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#month-9-may-2021-present"&gt;
  &lt;/a&gt;
  Month 9: May 2021 (Present)
&lt;/h3&gt;

&lt;p&gt;I have a few ongoing clients for freelance work as a front end developer, technical writer, and developer advocate. &lt;/p&gt;

&lt;p&gt;I really value being able to make my own schedule and choose the projects I want to take on. I don't know if I will continue freelancing forever, but it's a good fit for now.&lt;/p&gt;

&lt;p&gt;I'm still doing a lot of studying, but now it's more along the lines of "JIT" (Just In Time) learning: instead of learning what I hope an employer will want, I learn what I need, when the need arises.&lt;/p&gt;

&lt;p&gt;In the last few weeks I've deepened my understanding of React hooks, picked up Sass and GraphQL, and tinkered with half a dozen vanilla JS libraries, all for the sake of applying them to my work.&lt;/p&gt;

&lt;p&gt;Am I getting rich off that sweet Silicon Valley tech boom?&lt;/p&gt;

&lt;p&gt;Well, no. &lt;/p&gt;

&lt;p&gt;But it's fun and stimulating work in an industry with seemingly endless growth potential, and I feel extremely fortunate to have gotten my foot in the door so quickly. &lt;/p&gt;




&lt;p&gt;Dear reader, I wish you all the success in the world. &lt;/p&gt;

&lt;p&gt;If you're hoping to start a career in web development, I can vouch that the resources I've shared here contain everything you could need to know. &lt;/p&gt;

&lt;p&gt;And if you've taken a "nontraditional" path to get here like me, then I hope you know you are closer than you might think to achieving your goals.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources-for-learning-frontend-web-development"&gt;
  &lt;/a&gt;
  Resources for Learning Front-End Web Development
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devchat.tv/js-jabber/jsj-442-breaking-into-tech-with-danny-thompson/"&gt;&lt;em&gt;JavaScript Jabber #442: Breaking Into Tech with Danny Thompson&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org"&gt;Free Code Camp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/design-and-develop-a-killer-website-with-html5-and-css3/"&gt;Build Responsive Real-World Websites with HTML5 and CSS3&lt;/a&gt; by Jonas Schmedtmann&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/the-complete-javascript-course/"&gt;The Complete JavaScript Course 2021: From Zero to Expert&lt;/a&gt; by Jonas Schmedtmann&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.theodinproject.com"&gt;The Odin Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.leonnoel.com/100devs"&gt;Leon Noel's 100 Devs Learning Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wes Bos's &lt;a href="https://javascript30.com/"&gt;JavaScript 30&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.teamtreehouse.com"&gt;Team Treehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA"&gt;Traversy Media on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/"&gt;&lt;em&gt;Eloquent JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/become-a-wordpress-developer-php-javascript/"&gt;Become a WordPress Developer: Unlocking Power With Code&lt;/a&gt; by Brad Schiff&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#career-resources-from-my-blog"&gt;
  &lt;/a&gt;
  Career Resources From My Blog
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.sycamore.design/freelancing-workflow"&gt;My Freelancing Workflow, From Cold Leads to Paid Invoices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sycamore.design/freelancing-tech-industry"&gt;Everything You Need to Know to Succeed as a Freelancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sycamore.design/pricing-freelance-projects"&gt;How to Set Your Price For Freelancing Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sycamore.design/tech-career-networking"&gt;My Networking Strategy For Making Meaningful Connections in Tech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#if-you-enjoyed-this-piece-and-you-want-to-keep-up-with-my-work-you-can-sign-up-for-my-email-newsletter-through-this-link-i-promise-to-make-every-email-something-you-will-be-excited-to-open"&gt;
  &lt;/a&gt;
  &lt;strong&gt;If you enjoyed this piece and you want to keep up with my work, you can &lt;a href="https://sycamore.design/newsletter"&gt;sign up for my email newsletter through this link&lt;/a&gt;. I promise to make every email something you will be excited to open!&lt;/strong&gt;
&lt;/h2&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>freelancing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>May 20th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 21 May 2021 01:53:43 +0000</pubDate>
      <link>https://dev.to/nickytonline/may-20th-2021-what-did-you-learn-this-week-2b7e</link>
      <guid>https://dev.to/nickytonline/may-20th-2021-what-did-you-learn-this-week-2b7e</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" alt="A picture it a dog waving their paw with the caption “Learning, cool at school or at home”"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Six Things You Thought Senior Devs Did (But We Don't)</title>
      <author>Jason C. McDonald</author>
      <pubDate>Fri, 21 May 2021 00:19:52 +0000</pubDate>
      <link>https://dev.to/codemouse92/six-things-you-thought-senior-devs-did-but-we-don-t-3k6e</link>
      <guid>https://dev.to/codemouse92/six-things-you-thought-senior-devs-did-but-we-don-t-3k6e</guid>
      <description>&lt;p&gt;If you're a junior or mid-level developer, you may have certain ideas about what constitutes a Senior Developer. There's almost certainly an idealized picture in your mind, and if so, I can safely bet you keep comparing yourself to that fictional ideal.&lt;/p&gt;

&lt;p&gt;But what &lt;em&gt;is&lt;/em&gt; a Senior Developer, really?&lt;/p&gt;

&lt;p&gt;It doesn't help matters that practically every company has its own definition. In general, a Senior Developer is simply someone who has enough experience with software development to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Independently understand a given problem that needs to be solved in their particular knowledge domain,&lt;/li&gt;
&lt;li&gt;Enumerate one or more viable solutions and their merits, and then&lt;/li&gt;
&lt;li&gt;Implement one of the better solutions, likely as a member of a team, using the idiomatic patterns of the language and framework being employed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seriously. That's it.&lt;/p&gt;

&lt;p&gt;So what about all those other things you've always imagined were true of Senior Developers?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-we-dont-avoid-if-statements"&gt;
  &lt;/a&gt;
  1: We Don't Avoid "If" Statements
&lt;/h1&gt;

&lt;p&gt;A lot of junior developers seem to be under the impression that conditional statements are for sissies and n00bs. Nothing could be further from the truth!&lt;/p&gt;

&lt;p&gt;Often the best solution to a problem is also the simplest. While there are times and situations wherein there's a better solution that a conditional statement or a loop, senior developers still default to the classics. As Donald Knuth famously said...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Premature optimization is the root of all evil.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The basics are the basics because they work. Don't go looking for a clever alternative solution to an already well-solved problem.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-we-arent-developing-algorithms"&gt;
  &lt;/a&gt;
  2: We Aren't Developing Algorithms
&lt;/h1&gt;

&lt;p&gt;For the most part, it's the propeller heads at the universities who are coming up with better sorting and pathfinding algorithms, and more power to 'em!&lt;/p&gt;

&lt;p&gt;A senior developer knows when to rely on the preexisting work of others who have come before. In other words...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Good programmers know what to write. Great ones know what to rewrite (and reuse).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Don't be afraid to use existing libraries, algorithms, and abstractions.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-we-dont-customize-our-kernels"&gt;
  &lt;/a&gt;
  3: We Don't Customize Our Kernels
&lt;/h1&gt;

&lt;p&gt;Seriously, we don't have time to be mucking about in the internals of our day-to-day operating system. A senior developer prefers to do the minimum necessary work to get a working environment that meets her needs...and then she leaves it alone!&lt;/p&gt;

&lt;p&gt;Most of the time, the only reason a senior developer will be recompiling their kernel is to solve a hardware issue, and even then, it's compiled from an unmodified source. The only real exception is the folks for whom kernel hacking is a hobby...and that has nothing to do with seniority.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beware yak shaving! If it ain't broke, don't fix it.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-we-dont-have-regex-memorized-either"&gt;
  &lt;/a&gt;
  4: We Don't Have Regex Memorized Either
&lt;/h1&gt;

&lt;p&gt;Your average senior developer is going to have one of her ten thousand browser tabs open to regex101.com too. Regex is infamously esoteric, and we have more important things to remember.&lt;/p&gt;

&lt;p&gt;On a related note, if a typical senior developer is able to get the syntax for the &lt;code&gt;tar&lt;/code&gt; command on Unix right on the first try without checking the docs, he probably has it tattooed on his arm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't be ashamed to read the documentation, even if it's something you've looked up before.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-we-dont-know-all-top-10-hottest-languages"&gt;
  &lt;/a&gt;
  5: We Don't Know All Top 10 Hottest Languages
&lt;/h1&gt;

&lt;p&gt;Pick any random senior developer, and chances are that they know one or two languages very well, and have working proficiency in two or three others. They almost certainly won't have mastered a dozen different languages!&lt;/p&gt;

&lt;p&gt;This is on purpose. A good senior developer is mostly interested in gaining further mastery of their primary languages, frameworks, and knowledge domains. It's impossible to know everything there is to know for any one language!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You don't need to learn everything. When you find a language you love, dig deeper.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-we-dont-feel-like-senior-developers-either"&gt;
  &lt;/a&gt;
  6: We Don't Feel Like Senior Developers Either
&lt;/h1&gt;

&lt;p&gt;No, really. We don't. As soon as you crest one mountain, you discover a dozen higher peaks on the horizon. We &lt;em&gt;also&lt;/em&gt; have imposter syndrome. I've talked to 30-year-veteran software developers who still felt like they were faking it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software development is a life-long adventure. The destination is always changing; the &lt;em&gt;journey&lt;/em&gt; is the interesting part.&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Up and Running with Marko and Vite!</title>
      <author>Austin Gardner</author>
      <pubDate>Fri, 21 May 2021 00:02:57 +0000</pubDate>
      <link>https://dev.to/austingardner/up-and-running-with-marko-and-vite-3m32</link>
      <guid>https://dev.to/austingardner/up-and-running-with-marko-and-vite-3m32</guid>
      <description>&lt;p&gt;In this tutorial I will show you some of the basics of Marko.js and getting it set up with Vite.js!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-marko"&gt;
  &lt;/a&gt;
  Why Marko
&lt;/h2&gt;

&lt;p&gt;Marko.js is a JS framework that is SSR (server-side rendered) by default with an MPA (multi-page app) architecture. &lt;a href="//ebay.com"&gt;eBay&lt;/a&gt; runs on it. It has been around for a few years but has gotten a lot of updates lately, like the new Vite plugin. Additionally new features that are coming soon like a concise syntax and improved performance will make Marko.js a great choice for many JS devs. &lt;/p&gt;

&lt;p&gt;Did I mention even Dan Abramov (of the React core team) said we're on track to go where no JS framework has gone before? &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1YgPzW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336281436685541376/fRSl8uJP_normal.jpg" alt="Dan profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dan_abramov"&gt;@dan_abramov&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I haven’t closely looked at Marko but this 2014 article describes a mechanism that’s ahead of what most mainstream solutions (including React!) do in 2020.&lt;br&gt;&lt;br&gt;We’ve been working to add this to React since 2018 but it’s peculiar how this is almost lost art. &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/75ENOYUleO"&gt;tech.ebayinc.com/engineering/as…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:32 PM - 31 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1377343141485764610" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1377343141485764610" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1377343141485764610" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#mpa-ssr-by-default"&gt;
  &lt;/a&gt;
  MPA + SSR -- By Default!
&lt;/h2&gt;

&lt;p&gt;Marko's MPA architecture allows it to run without needing a router like React Router or Vue Router, making things that much simpler for devs. And because it is SSR by default, there is no need to worry about anything like Next.js or Gatsby. &lt;/p&gt;

&lt;p&gt;In this tutorial I will show how this all works. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-vitejs"&gt;
  &lt;/a&gt;
  Why Vite.js
&lt;/h2&gt;

&lt;p&gt;Vite, like Webpack, takes care of your bundling needs, putting all of your HTML, CSS, JS and in our case &lt;code&gt;.marko&lt;/code&gt; files together to serve to the browser.&lt;/p&gt;

&lt;p&gt;Unlike Webpack, Vite is WAY faster and has an extremely minimal configuration. In this case we'll just use the command line and we won't have to worry about any configuration! &lt;/p&gt;

&lt;p&gt;Vite also gives us hot module reloading, so when you save, the page automatically reloads. This is a very nice feature  because you don't have to restart your dev server when you make changes to your code, it just reloads itself for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-go"&gt;
  &lt;/a&gt;
  Let's Go!
&lt;/h2&gt;

&lt;p&gt;First, you need NPX installed. If you haven't done that yet, go &lt;a href="https://github.com/nvm-sh/nvm"&gt;here&lt;/a&gt; and follow the instructions to install NVM, which will then allow you to get Node.js and NPX on your device.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/austingardner/marko-vite-blog"&gt;Here&lt;/a&gt; is the repo for the finished code if you don't want to go through the tutorial step-by-step.&lt;/p&gt;

&lt;p&gt;We'll call our app's directory marko-vite. Let's run &lt;code&gt;npx @marko/create marko-vite&lt;/code&gt; in the command line. Then arrow down to &lt;code&gt;Example from marko-js/examples&lt;/code&gt;, hit enter, then arrow to &lt;code&gt;vite-express&lt;/code&gt; and hit enter again. &lt;/p&gt;

&lt;p&gt;A directory named marko-vite will be generated for us. &lt;/p&gt;

&lt;p&gt;Open it up in your code editor, and let's nuke some things. &lt;br&gt;
Delete the components, pages, and services directories.&lt;/p&gt;

&lt;p&gt;Next, make a new pages directory and put a file called index.js into it, with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./template.marko&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marko&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This just tells our server when it comes to this page, to load in our Marko template.&lt;/p&gt;

&lt;p&gt;Next, let's make a basic Marko page! &lt;/p&gt;

&lt;p&gt;Make a new file in the src/pages/ directory and call it &lt;code&gt;template.marko&lt;/code&gt;, and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Marko + Vite&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/goodbye"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Goodbye!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/counters"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Count!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;WAIT! Doesn't that look just like HTML? Marko is a superset of HTML, so anything that is HTML can be taken care of by Marko. &lt;/p&gt;

&lt;p&gt;Next, let's make a file named goodbye.js in the src/pages directory and put the following code in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;goodbye&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./goodbye.marko&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marko&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;goodbye&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and another file called goodbye.marko:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Marko + Vite&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;See you later world!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        Bye Bye!
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    👋
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello Again!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's update the src/index.js file to make sure we have the right routes. We'll worry about the &lt;code&gt;/counters&lt;/code&gt; in a little bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;indexPage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages/index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;goodbyePage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages/goodbye&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;indexPage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/goodbye&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;goodbyePage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-the-project"&gt;
  &lt;/a&gt;
  Running the project
&lt;/h2&gt;

&lt;p&gt;Now let's run the project! run &lt;code&gt;npm run dev&lt;/code&gt; and navigate to &lt;code&gt;localhost:3000&lt;/code&gt;. You should see something like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dXhqioux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofe9qujunkrjwf408rwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXhqioux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofe9qujunkrjwf408rwe.png" alt="Screen Shot 2021-05-20 at 4.03.13 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and then if you navigate to the goodbye link, you should see something like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uofSoSkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t48rkpaysr96sssm0eiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uofSoSkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t48rkpaysr96sssm0eiz.png" alt="Screen Shot 2021-05-20 at 4.03.23 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But wait! We haven't added JS to the browser yet! Let's keep rolling!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-components"&gt;
  &lt;/a&gt;
  Adding Components!
&lt;/h2&gt;

&lt;p&gt;let's make a file in &lt;code&gt;src/pages/&lt;/code&gt; called &lt;code&gt;counters.js&lt;/code&gt; and add the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;counters&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./counters.marko&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marko&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then another file in &lt;code&gt;src/pages/&lt;/code&gt; called &lt;code&gt;counters.marko&lt;/code&gt; and add the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Marko + Vite&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Count 'em up!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;counter/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;counter/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;counter/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;counter/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;counter/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Back to home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Woah! This looks different... where are those counter tags coming from? That's no longer valid HTML! You see, Marko automatically detects Marko components in our &lt;code&gt;src/&lt;/code&gt; directory, and then adds them into their respective places. Pretty nifty!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-counters"&gt;
  &lt;/a&gt;
  Adding Counters
&lt;/h2&gt;

&lt;p&gt;Let's make a new directory under &lt;code&gt;src&lt;/code&gt; called &lt;code&gt;components&lt;/code&gt; and then make the file &lt;code&gt;src/components/counter.marko&lt;/code&gt;. Then let's add the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;class {
    onCreate() {
        this.state = {
            count: 0
        };
    }
    increment() {
        this.state.count++;
    }
}

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Count is: &lt;span class="nt"&gt;&amp;lt;output&amp;gt;&lt;/span&gt;${state.count}&lt;span class="nt"&gt;&amp;lt;/output&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on-click&lt;/span&gt;&lt;span class="err"&gt;('&lt;/span&gt;&lt;span class="na"&gt;increment&lt;/span&gt;&lt;span class="err"&gt;')&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Click Here!   
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have a basic counter, which increments based on the on-click handler we added to the button. Marko allows us to combine the JS and the HTML in one page in this way! &lt;/p&gt;

&lt;p&gt;(There are cases where you can or should separate out the JS from the .marko file -&amp;gt; see &lt;a href="https://markojs.com/docs/class-components/"&gt;Marko docs&lt;/a&gt; for more info).&lt;/p&gt;

&lt;p&gt;Now we're almost ready to show off our counters! We just need to add the new &lt;code&gt;&amp;lt;a/&amp;gt;&lt;/code&gt; tag into our &lt;code&gt;template.marko&lt;/code&gt; file and add the routes into our &lt;code&gt;src/index.js&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;Now our &lt;code&gt;src/index.js&lt;/code&gt; file will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;indexPage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages/index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;goodbyePage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages/goodbye&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;countersPage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./pages/counters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;indexPage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/goodbye&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;goodbyePage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/counters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;countersPage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and our &lt;code&gt;src/pages/template.marko&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Marko + Vite&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/goodbye"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Goodbye!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/counters"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Count!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how on saving the files, Vite re-runs things for us - that is hot module reloading at work. Then from our base page, clicking on the &lt;code&gt;count!&lt;/code&gt; link gives us a lot of buttons to click on! Alright!! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5aXMNKzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qtlovipix0yal3gqq56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5aXMNKzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qtlovipix0yal3gqq56.png" alt="Screen Shot 2021-05-20 at 4.15.31 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Here we can see that using Marko with Vite allows us to use some shortcuts compared to React. SSR by default, no router needed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-more-about-the-future-of-marko"&gt;
  &lt;/a&gt;
  Read more about the future of Marko!
&lt;/h2&gt;

&lt;p&gt;See Ryan Carniato's posts &lt;a href="https://dev.to/ryansolid/fluurt-re-inventing-marko-3o1o"&gt;FLUURT overview&lt;/a&gt; for an overview of the future changes to Marko; &lt;a href="https://dev.to/ryansolid/marko-designing-a-ui-language-2hni"&gt;UI language&lt;/a&gt; for more specifics on the conciseness of Marko's future syntax; and Michael Rawling's &lt;a href="https://medium.com/@mlrawlings/maybe-you-dont-need-that-spa-f2c659bc7fec"&gt;Maybe you don't need that SPA&lt;/a&gt; about how Marko's server-native architecture puts Marko on the path to sub-component level hydration, enabling high levels of SSR performance.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>marko</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
